
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007930  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08007b20  08007b20  00017b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000084  08007d70  08007d70  00017d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000118  08007df4  08007df4  00017df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f0c  08007f0c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007f0c  08007f0c  00017f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f14  08007f14  00017f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c04  2000007c  08007f94  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c80  08007f94  00021c80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f42d  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fec  00000000  00000000  0004f4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b78  00000000  00000000  000554c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e8  00000000  00000000  00057038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218b0  00000000  00000000  00058a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002231a  00000000  00000000  0007a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6b32  00000000  00000000  0009c5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015311c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090a0  00000000  00000000  0015316c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000007c 	.word	0x2000007c
 800020c:	00000000 	.word	0x00000000
 8000210:	08007b08 	.word	0x08007b08

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000080 	.word	0x20000080
 800022c:	08007b08 	.word	0x08007b08

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <selfrel_offset31>:
 8000240:	6803      	ldr	r3, [r0, #0]
 8000242:	005a      	lsls	r2, r3, #1
 8000244:	bf4c      	ite	mi
 8000246:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800024a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800024e:	4418      	add	r0, r3
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop

08000254 <search_EIT_table>:
 8000254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000258:	b339      	cbz	r1, 80002aa <search_EIT_table+0x56>
 800025a:	1e4f      	subs	r7, r1, #1
 800025c:	4604      	mov	r4, r0
 800025e:	4615      	mov	r5, r2
 8000260:	463e      	mov	r6, r7
 8000262:	f04f 0800 	mov.w	r8, #0
 8000266:	eb08 0106 	add.w	r1, r8, r6
 800026a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800026e:	1049      	asrs	r1, r1, #1
 8000270:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000274:	4648      	mov	r0, r9
 8000276:	f7ff ffe3 	bl	8000240 <selfrel_offset31>
 800027a:	4603      	mov	r3, r0
 800027c:	00c8      	lsls	r0, r1, #3
 800027e:	3008      	adds	r0, #8
 8000280:	428f      	cmp	r7, r1
 8000282:	4420      	add	r0, r4
 8000284:	d00b      	beq.n	800029e <search_EIT_table+0x4a>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d80b      	bhi.n	80002a2 <search_EIT_table+0x4e>
 800028a:	f7ff ffd9 	bl	8000240 <selfrel_offset31>
 800028e:	3801      	subs	r0, #1
 8000290:	42a8      	cmp	r0, r5
 8000292:	f101 0801 	add.w	r8, r1, #1
 8000296:	d3e6      	bcc.n	8000266 <search_EIT_table+0x12>
 8000298:	4648      	mov	r0, r9
 800029a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800029e:	42ab      	cmp	r3, r5
 80002a0:	d9fa      	bls.n	8000298 <search_EIT_table+0x44>
 80002a2:	4588      	cmp	r8, r1
 80002a4:	d001      	beq.n	80002aa <search_EIT_table+0x56>
 80002a6:	1e4e      	subs	r6, r1, #1
 80002a8:	e7dd      	b.n	8000266 <search_EIT_table+0x12>
 80002aa:	f04f 0900 	mov.w	r9, #0
 80002ae:	4648      	mov	r0, r9
 80002b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080002b4 <__gnu_unwind_get_pr_addr>:
 80002b4:	2801      	cmp	r0, #1
 80002b6:	d007      	beq.n	80002c8 <__gnu_unwind_get_pr_addr+0x14>
 80002b8:	2802      	cmp	r0, #2
 80002ba:	d007      	beq.n	80002cc <__gnu_unwind_get_pr_addr+0x18>
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <__gnu_unwind_get_pr_addr+0x1c>)
 80002be:	2800      	cmp	r0, #0
 80002c0:	bf0c      	ite	eq
 80002c2:	4618      	moveq	r0, r3
 80002c4:	2000      	movne	r0, #0
 80002c6:	4770      	bx	lr
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <__gnu_unwind_get_pr_addr+0x20>)
 80002ca:	4770      	bx	lr
 80002cc:	4802      	ldr	r0, [pc, #8]	; (80002d8 <__gnu_unwind_get_pr_addr+0x24>)
 80002ce:	4770      	bx	lr
 80002d0:	080009a5 	.word	0x080009a5
 80002d4:	080009a9 	.word	0x080009a9
 80002d8:	080009ad 	.word	0x080009ad

080002dc <get_eit_entry>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	4b24      	ldr	r3, [pc, #144]	; (8000370 <get_eit_entry+0x94>)
 80002e0:	4604      	mov	r4, r0
 80002e2:	b083      	sub	sp, #12
 80002e4:	1e8d      	subs	r5, r1, #2
 80002e6:	b33b      	cbz	r3, 8000338 <get_eit_entry+0x5c>
 80002e8:	4628      	mov	r0, r5
 80002ea:	a901      	add	r1, sp, #4
 80002ec:	f3af 8000 	nop.w
 80002f0:	b1e8      	cbz	r0, 800032e <get_eit_entry+0x52>
 80002f2:	9901      	ldr	r1, [sp, #4]
 80002f4:	462a      	mov	r2, r5
 80002f6:	f7ff ffad 	bl	8000254 <search_EIT_table>
 80002fa:	4601      	mov	r1, r0
 80002fc:	b1b8      	cbz	r0, 800032e <get_eit_entry+0x52>
 80002fe:	f7ff ff9f 	bl	8000240 <selfrel_offset31>
 8000302:	684b      	ldr	r3, [r1, #4]
 8000304:	64a0      	str	r0, [r4, #72]	; 0x48
 8000306:	2b01      	cmp	r3, #1
 8000308:	d02e      	beq.n	8000368 <get_eit_entry+0x8c>
 800030a:	2b00      	cmp	r3, #0
 800030c:	db27      	blt.n	800035e <get_eit_entry+0x82>
 800030e:	1d08      	adds	r0, r1, #4
 8000310:	f7ff ff96 	bl	8000240 <selfrel_offset31>
 8000314:	2300      	movs	r3, #0
 8000316:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800031a:	6803      	ldr	r3, [r0, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	db12      	blt.n	8000346 <get_eit_entry+0x6a>
 8000320:	f7ff ff8e 	bl	8000240 <selfrel_offset31>
 8000324:	4603      	mov	r3, r0
 8000326:	2000      	movs	r0, #0
 8000328:	6123      	str	r3, [r4, #16]
 800032a:	b003      	add	sp, #12
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	2300      	movs	r3, #0
 8000330:	2009      	movs	r0, #9
 8000332:	6123      	str	r3, [r4, #16]
 8000334:	b003      	add	sp, #12
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <get_eit_entry+0x98>)
 800033a:	490f      	ldr	r1, [pc, #60]	; (8000378 <get_eit_entry+0x9c>)
 800033c:	4618      	mov	r0, r3
 800033e:	1ac9      	subs	r1, r1, r3
 8000340:	10c9      	asrs	r1, r1, #3
 8000342:	9101      	str	r1, [sp, #4]
 8000344:	e7d6      	b.n	80002f4 <get_eit_entry+0x18>
 8000346:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800034a:	f7ff ffb3 	bl	80002b4 <__gnu_unwind_get_pr_addr>
 800034e:	2800      	cmp	r0, #0
 8000350:	4603      	mov	r3, r0
 8000352:	bf14      	ite	ne
 8000354:	2000      	movne	r0, #0
 8000356:	2009      	moveq	r0, #9
 8000358:	6123      	str	r3, [r4, #16]
 800035a:	b003      	add	sp, #12
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	2301      	movs	r3, #1
 8000360:	1d08      	adds	r0, r1, #4
 8000362:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000366:	e7d8      	b.n	800031a <get_eit_entry+0x3e>
 8000368:	2300      	movs	r3, #0
 800036a:	2005      	movs	r0, #5
 800036c:	6123      	str	r3, [r4, #16]
 800036e:	e7dc      	b.n	800032a <get_eit_entry+0x4e>
 8000370:	00000000 	.word	0x00000000
 8000374:	08007df4 	.word	0x08007df4
 8000378:	08007f0c 	.word	0x08007f0c

0800037c <restore_non_core_regs>:
 800037c:	6803      	ldr	r3, [r0, #0]
 800037e:	b510      	push	{r4, lr}
 8000380:	07da      	lsls	r2, r3, #31
 8000382:	4604      	mov	r4, r0
 8000384:	d406      	bmi.n	8000394 <restore_non_core_regs+0x18>
 8000386:	079b      	lsls	r3, r3, #30
 8000388:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800038c:	d509      	bpl.n	80003a2 <restore_non_core_regs+0x26>
 800038e:	f000 fc5d 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000392:	6823      	ldr	r3, [r4, #0]
 8000394:	0759      	lsls	r1, r3, #29
 8000396:	d509      	bpl.n	80003ac <restore_non_core_regs+0x30>
 8000398:	071a      	lsls	r2, r3, #28
 800039a:	d50e      	bpl.n	80003ba <restore_non_core_regs+0x3e>
 800039c:	06db      	lsls	r3, r3, #27
 800039e:	d513      	bpl.n	80003c8 <restore_non_core_regs+0x4c>
 80003a0:	bd10      	pop	{r4, pc}
 80003a2:	f000 fc4b 	bl	8000c3c <__gnu_Unwind_Restore_VFP>
 80003a6:	6823      	ldr	r3, [r4, #0]
 80003a8:	0759      	lsls	r1, r3, #29
 80003aa:	d4f5      	bmi.n	8000398 <restore_non_core_regs+0x1c>
 80003ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80003b0:	f000 fc54 	bl	8000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80003b4:	6823      	ldr	r3, [r4, #0]
 80003b6:	071a      	lsls	r2, r3, #28
 80003b8:	d4f0      	bmi.n	800039c <restore_non_core_regs+0x20>
 80003ba:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80003be:	f000 fc55 	bl	8000c6c <__gnu_Unwind_Restore_WMMXD>
 80003c2:	6823      	ldr	r3, [r4, #0]
 80003c4:	06db      	lsls	r3, r3, #27
 80003c6:	d4eb      	bmi.n	80003a0 <restore_non_core_regs+0x24>
 80003c8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80003cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003d0:	f000 bc90 	b.w	8000cf4 <__gnu_Unwind_Restore_WMMXC>

080003d4 <__gnu_unwind_24bit.constprop.0>:
 80003d4:	2009      	movs	r0, #9
 80003d6:	4770      	bx	lr

080003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80003d8:	4603      	mov	r3, r0
 80003da:	6800      	ldr	r0, [r0, #0]
 80003dc:	b100      	cbz	r0, 80003e0 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80003de:	4418      	add	r0, r3
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop

080003e4 <_Unwind_DebugHook>:
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop

080003e8 <unwind_phase2>:
 80003e8:	b570      	push	{r4, r5, r6, lr}
 80003ea:	4604      	mov	r4, r0
 80003ec:	460e      	mov	r6, r1
 80003ee:	4620      	mov	r0, r4
 80003f0:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80003f2:	f7ff ff73 	bl	80002dc <get_eit_entry>
 80003f6:	4605      	mov	r5, r0
 80003f8:	b998      	cbnz	r0, 8000422 <unwind_phase2+0x3a>
 80003fa:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 80003fe:	4632      	mov	r2, r6
 8000400:	4621      	mov	r1, r4
 8000402:	2001      	movs	r0, #1
 8000404:	6923      	ldr	r3, [r4, #16]
 8000406:	f8c4 c014 	str.w	ip, [r4, #20]
 800040a:	4798      	blx	r3
 800040c:	2808      	cmp	r0, #8
 800040e:	d0ee      	beq.n	80003ee <unwind_phase2+0x6>
 8000410:	2807      	cmp	r0, #7
 8000412:	d106      	bne.n	8000422 <unwind_phase2+0x3a>
 8000414:	4628      	mov	r0, r5
 8000416:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000418:	f7ff ffe4 	bl	80003e4 <_Unwind_DebugHook>
 800041c:	1d30      	adds	r0, r6, #4
 800041e:	f000 fc01 	bl	8000c24 <__restore_core_regs>
 8000422:	f007 f9ce 	bl	80077c2 <abort>
 8000426:	bf00      	nop

08000428 <unwind_phase2_forced>:
 8000428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800042c:	f04f 0a00 	mov.w	sl, #0
 8000430:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000434:	f10d 0e0c 	add.w	lr, sp, #12
 8000438:	f101 0c04 	add.w	ip, r1, #4
 800043c:	68c7      	ldr	r7, [r0, #12]
 800043e:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000442:	4606      	mov	r6, r0
 8000444:	4614      	mov	r4, r2
 8000446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800044a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800044e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000452:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000456:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800045a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800045e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000462:	ad02      	add	r5, sp, #8
 8000464:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000468:	f8c5 a000 	str.w	sl, [r5]
 800046c:	e021      	b.n	80004b2 <unwind_phase2_forced+0x8a>
 800046e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000470:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000474:	4629      	mov	r1, r5
 8000476:	6173      	str	r3, [r6, #20]
 8000478:	a87a      	add	r0, sp, #488	; 0x1e8
 800047a:	f007 f9f1 	bl	8007860 <memcpy>
 800047e:	4631      	mov	r1, r6
 8000480:	4650      	mov	r0, sl
 8000482:	6933      	ldr	r3, [r6, #16]
 8000484:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000486:	4798      	blx	r3
 8000488:	9c88      	ldr	r4, [sp, #544]	; 0x220
 800048a:	4682      	mov	sl, r0
 800048c:	646c      	str	r4, [r5, #68]	; 0x44
 800048e:	4633      	mov	r3, r6
 8000490:	4632      	mov	r2, r6
 8000492:	4649      	mov	r1, r9
 8000494:	2001      	movs	r0, #1
 8000496:	e9cd 5800 	strd	r5, r8, [sp]
 800049a:	47b8      	blx	r7
 800049c:	4604      	mov	r4, r0
 800049e:	b9f0      	cbnz	r0, 80004de <unwind_phase2_forced+0xb6>
 80004a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80004a4:	4628      	mov	r0, r5
 80004a6:	a97a      	add	r1, sp, #488	; 0x1e8
 80004a8:	f007 f9da 	bl	8007860 <memcpy>
 80004ac:	f1ba 0f08 	cmp.w	sl, #8
 80004b0:	d11b      	bne.n	80004ea <unwind_phase2_forced+0xc2>
 80004b2:	4630      	mov	r0, r6
 80004b4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004b6:	f7ff ff11 	bl	80002dc <get_eit_entry>
 80004ba:	f104 0909 	add.w	r9, r4, #9
 80004be:	fa5f fa89 	uxtb.w	sl, r9
 80004c2:	4604      	mov	r4, r0
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d0d2      	beq.n	800046e <unwind_phase2_forced+0x46>
 80004c8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80004ca:	4633      	mov	r3, r6
 80004cc:	6469      	str	r1, [r5, #68]	; 0x44
 80004ce:	4632      	mov	r2, r6
 80004d0:	2001      	movs	r0, #1
 80004d2:	e9cd 5800 	strd	r5, r8, [sp]
 80004d6:	f04a 0110 	orr.w	r1, sl, #16
 80004da:	47b8      	blx	r7
 80004dc:	b100      	cbz	r0, 80004e0 <unwind_phase2_forced+0xb8>
 80004de:	2409      	movs	r4, #9
 80004e0:	4620      	mov	r0, r4
 80004e2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1ba 0f07 	cmp.w	sl, #7
 80004ee:	d1f6      	bne.n	80004de <unwind_phase2_forced+0xb6>
 80004f0:	4620      	mov	r0, r4
 80004f2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004f4:	f7ff ff76 	bl	80003e4 <_Unwind_DebugHook>
 80004f8:	a803      	add	r0, sp, #12
 80004fa:	f000 fb93 	bl	8000c24 <__restore_core_regs>
 80004fe:	bf00      	nop

08000500 <_Unwind_GetCFA>:
 8000500:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000502:	4770      	bx	lr

08000504 <__gnu_Unwind_RaiseException>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800050a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800050c:	b0f9      	sub	sp, #484	; 0x1e4
 800050e:	640b      	str	r3, [r1, #64]	; 0x40
 8000510:	ac01      	add	r4, sp, #4
 8000512:	f101 0c04 	add.w	ip, r1, #4
 8000516:	460e      	mov	r6, r1
 8000518:	4605      	mov	r5, r0
 800051a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000534:	9700      	str	r7, [sp, #0]
 8000536:	e006      	b.n	8000546 <__gnu_Unwind_RaiseException+0x42>
 8000538:	466a      	mov	r2, sp
 800053a:	4629      	mov	r1, r5
 800053c:	692b      	ldr	r3, [r5, #16]
 800053e:	4798      	blx	r3
 8000540:	2808      	cmp	r0, #8
 8000542:	4604      	mov	r4, r0
 8000544:	d108      	bne.n	8000558 <__gnu_Unwind_RaiseException+0x54>
 8000546:	4628      	mov	r0, r5
 8000548:	9910      	ldr	r1, [sp, #64]	; 0x40
 800054a:	f7ff fec7 	bl	80002dc <get_eit_entry>
 800054e:	2800      	cmp	r0, #0
 8000550:	d0f2      	beq.n	8000538 <__gnu_Unwind_RaiseException+0x34>
 8000552:	2009      	movs	r0, #9
 8000554:	b079      	add	sp, #484	; 0x1e4
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000558:	4668      	mov	r0, sp
 800055a:	f7ff ff0f 	bl	800037c <restore_non_core_regs>
 800055e:	2c06      	cmp	r4, #6
 8000560:	d1f7      	bne.n	8000552 <__gnu_Unwind_RaiseException+0x4e>
 8000562:	4631      	mov	r1, r6
 8000564:	4628      	mov	r0, r5
 8000566:	f7ff ff3f 	bl	80003e8 <unwind_phase2>
 800056a:	bf00      	nop

0800056c <__gnu_Unwind_ForcedUnwind>:
 800056c:	b410      	push	{r4}
 800056e:	4614      	mov	r4, r2
 8000570:	6184      	str	r4, [r0, #24]
 8000572:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000574:	60c1      	str	r1, [r0, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	641c      	str	r4, [r3, #64]	; 0x40
 800057a:	4619      	mov	r1, r3
 800057c:	bc10      	pop	{r4}
 800057e:	e753      	b.n	8000428 <unwind_phase2_forced>

08000580 <__gnu_Unwind_Resume>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	6943      	ldr	r3, [r0, #20]
 8000584:	68c6      	ldr	r6, [r0, #12]
 8000586:	640b      	str	r3, [r1, #64]	; 0x40
 8000588:	b9ae      	cbnz	r6, 80005b6 <__gnu_Unwind_Resume+0x36>
 800058a:	460a      	mov	r2, r1
 800058c:	6903      	ldr	r3, [r0, #16]
 800058e:	4604      	mov	r4, r0
 8000590:	460d      	mov	r5, r1
 8000592:	4601      	mov	r1, r0
 8000594:	2002      	movs	r0, #2
 8000596:	4798      	blx	r3
 8000598:	2807      	cmp	r0, #7
 800059a:	d005      	beq.n	80005a8 <__gnu_Unwind_Resume+0x28>
 800059c:	2808      	cmp	r0, #8
 800059e:	d10f      	bne.n	80005c0 <__gnu_Unwind_Resume+0x40>
 80005a0:	4629      	mov	r1, r5
 80005a2:	4620      	mov	r0, r4
 80005a4:	f7ff ff20 	bl	80003e8 <unwind_phase2>
 80005a8:	4630      	mov	r0, r6
 80005aa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80005ac:	f7ff ff1a 	bl	80003e4 <_Unwind_DebugHook>
 80005b0:	1d28      	adds	r0, r5, #4
 80005b2:	f000 fb37 	bl	8000c24 <__restore_core_regs>
 80005b6:	2201      	movs	r2, #1
 80005b8:	f7ff ff36 	bl	8000428 <unwind_phase2_forced>
 80005bc:	f007 f901 	bl	80077c2 <abort>
 80005c0:	f007 f8ff 	bl	80077c2 <abort>

080005c4 <__gnu_Unwind_Resume_or_Rethrow>:
 80005c4:	68c2      	ldr	r2, [r0, #12]
 80005c6:	b12a      	cbz	r2, 80005d4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80005c8:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 80005cc:	2200      	movs	r2, #0
 80005ce:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 80005d2:	e729      	b.n	8000428 <unwind_phase2_forced>
 80005d4:	e796      	b.n	8000504 <__gnu_Unwind_RaiseException>
 80005d6:	bf00      	nop

080005d8 <_Unwind_Complete>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_Unwind_DeleteException>:
 80005dc:	6883      	ldr	r3, [r0, #8]
 80005de:	4601      	mov	r1, r0
 80005e0:	b10b      	cbz	r3, 80005e6 <_Unwind_DeleteException+0xa>
 80005e2:	2001      	movs	r0, #1
 80005e4:	4718      	bx	r3
 80005e6:	4770      	bx	lr

080005e8 <_Unwind_VRS_Get>:
 80005e8:	2901      	cmp	r1, #1
 80005ea:	d012      	beq.n	8000612 <_Unwind_VRS_Get+0x2a>
 80005ec:	d809      	bhi.n	8000602 <_Unwind_VRS_Get+0x1a>
 80005ee:	b973      	cbnz	r3, 800060e <_Unwind_VRS_Get+0x26>
 80005f0:	2a0f      	cmp	r2, #15
 80005f2:	d80c      	bhi.n	800060e <_Unwind_VRS_Get+0x26>
 80005f4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005f8:	6842      	ldr	r2, [r0, #4]
 80005fa:	4618      	mov	r0, r3
 80005fc:	9b00      	ldr	r3, [sp, #0]
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	4770      	bx	lr
 8000602:	3903      	subs	r1, #3
 8000604:	2901      	cmp	r1, #1
 8000606:	bf94      	ite	ls
 8000608:	2001      	movls	r0, #1
 800060a:	2002      	movhi	r0, #2
 800060c:	4770      	bx	lr
 800060e:	2002      	movs	r0, #2
 8000610:	4770      	bx	lr
 8000612:	4608      	mov	r0, r1
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <_Unwind_GetGR>:
 8000618:	2300      	movs	r3, #0
 800061a:	b500      	push	{lr}
 800061c:	b085      	sub	sp, #20
 800061e:	460a      	mov	r2, r1
 8000620:	a903      	add	r1, sp, #12
 8000622:	9100      	str	r1, [sp, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	f7ff ffdf 	bl	80005e8 <_Unwind_VRS_Get>
 800062a:	9803      	ldr	r0, [sp, #12]
 800062c:	b005      	add	sp, #20
 800062e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000632:	bf00      	nop

08000634 <_Unwind_VRS_Set>:
 8000634:	2901      	cmp	r1, #1
 8000636:	d012      	beq.n	800065e <_Unwind_VRS_Set+0x2a>
 8000638:	d809      	bhi.n	800064e <_Unwind_VRS_Set+0x1a>
 800063a:	b973      	cbnz	r3, 800065a <_Unwind_VRS_Set+0x26>
 800063c:	2a0f      	cmp	r2, #15
 800063e:	d80c      	bhi.n	800065a <_Unwind_VRS_Set+0x26>
 8000640:	9900      	ldr	r1, [sp, #0]
 8000642:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000646:	6809      	ldr	r1, [r1, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	6051      	str	r1, [r2, #4]
 800064c:	4770      	bx	lr
 800064e:	3903      	subs	r1, #3
 8000650:	2901      	cmp	r1, #1
 8000652:	bf94      	ite	ls
 8000654:	2001      	movls	r0, #1
 8000656:	2002      	movhi	r0, #2
 8000658:	4770      	bx	lr
 800065a:	2002      	movs	r0, #2
 800065c:	4770      	bx	lr
 800065e:	4608      	mov	r0, r1
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop

08000664 <_Unwind_SetGR>:
 8000664:	2300      	movs	r3, #0
 8000666:	b510      	push	{r4, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	ac03      	add	r4, sp, #12
 800066c:	9203      	str	r2, [sp, #12]
 800066e:	9400      	str	r4, [sp, #0]
 8000670:	460a      	mov	r2, r1
 8000672:	4619      	mov	r1, r3
 8000674:	f7ff ffde 	bl	8000634 <_Unwind_VRS_Set>
 8000678:	b004      	add	sp, #16
 800067a:	bd10      	pop	{r4, pc}

0800067c <__gnu_Unwind_Backtrace>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000682:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000684:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000688:	6413      	str	r3, [r2, #64]	; 0x40
 800068a:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 800068e:	f102 0c04 	add.w	ip, r2, #4
 8000692:	4605      	mov	r5, r0
 8000694:	460c      	mov	r4, r1
 8000696:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800069a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800069e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006ae:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80006b2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80006b6:	9616      	str	r6, [sp, #88]	; 0x58
 80006b8:	e012      	b.n	80006e0 <__gnu_Unwind_Backtrace+0x64>
 80006ba:	210c      	movs	r1, #12
 80006bc:	a816      	add	r0, sp, #88	; 0x58
 80006be:	466a      	mov	r2, sp
 80006c0:	f7ff ffd0 	bl	8000664 <_Unwind_SetGR>
 80006c4:	4621      	mov	r1, r4
 80006c6:	a816      	add	r0, sp, #88	; 0x58
 80006c8:	47a8      	blx	r5
 80006ca:	b978      	cbnz	r0, 80006ec <__gnu_Unwind_Backtrace+0x70>
 80006cc:	4669      	mov	r1, sp
 80006ce:	2008      	movs	r0, #8
 80006d0:	9b04      	ldr	r3, [sp, #16]
 80006d2:	aa16      	add	r2, sp, #88	; 0x58
 80006d4:	4798      	blx	r3
 80006d6:	2805      	cmp	r0, #5
 80006d8:	4606      	mov	r6, r0
 80006da:	d008      	beq.n	80006ee <__gnu_Unwind_Backtrace+0x72>
 80006dc:	2809      	cmp	r0, #9
 80006de:	d005      	beq.n	80006ec <__gnu_Unwind_Backtrace+0x70>
 80006e0:	4668      	mov	r0, sp
 80006e2:	9926      	ldr	r1, [sp, #152]	; 0x98
 80006e4:	f7ff fdfa 	bl	80002dc <get_eit_entry>
 80006e8:	2800      	cmp	r0, #0
 80006ea:	d0e6      	beq.n	80006ba <__gnu_Unwind_Backtrace+0x3e>
 80006ec:	2609      	movs	r6, #9
 80006ee:	a816      	add	r0, sp, #88	; 0x58
 80006f0:	f7ff fe44 	bl	800037c <restore_non_core_regs>
 80006f4:	4630      	mov	r0, r6
 80006f6:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80006fa:	bd70      	pop	{r4, r5, r6, pc}

080006fc <__gnu_unwind_pr_common>:
 80006fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000700:	461e      	mov	r6, r3
 8000702:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000704:	b089      	sub	sp, #36	; 0x24
 8000706:	f854 3b04 	ldr.w	r3, [r4], #4
 800070a:	460d      	mov	r5, r1
 800070c:	4617      	mov	r7, r2
 800070e:	f000 0803 	and.w	r8, r0, #3
 8000712:	9406      	str	r4, [sp, #24]
 8000714:	2e00      	cmp	r6, #0
 8000716:	d079      	beq.n	800080c <__gnu_unwind_pr_common+0x110>
 8000718:	2202      	movs	r2, #2
 800071a:	f88d 201c 	strb.w	r2, [sp, #28]
 800071e:	0c1a      	lsrs	r2, r3, #16
 8000720:	f88d 201d 	strb.w	r2, [sp, #29]
 8000724:	041b      	lsls	r3, r3, #16
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	9305      	str	r3, [sp, #20]
 800072a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800072e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000730:	f1b8 0f02 	cmp.w	r8, #2
 8000734:	bf08      	it	eq
 8000736:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000738:	f013 0301 	ands.w	r3, r3, #1
 800073c:	d00c      	beq.n	8000758 <__gnu_unwind_pr_common+0x5c>
 800073e:	4638      	mov	r0, r7
 8000740:	a905      	add	r1, sp, #20
 8000742:	f000 fb71 	bl	8000e28 <__gnu_unwind_execute>
 8000746:	b918      	cbnz	r0, 8000750 <__gnu_unwind_pr_common+0x54>
 8000748:	2008      	movs	r0, #8
 800074a:	b009      	add	sp, #36	; 0x24
 800074c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000750:	2009      	movs	r0, #9
 8000752:	b009      	add	sp, #36	; 0x24
 8000754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000758:	f8d4 a000 	ldr.w	sl, [r4]
 800075c:	f1ba 0f00 	cmp.w	sl, #0
 8000760:	d0ed      	beq.n	800073e <__gnu_unwind_pr_common+0x42>
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	f000 0308 	and.w	r3, r0, #8
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	2e02      	cmp	r6, #2
 800076c:	d04a      	beq.n	8000804 <__gnu_unwind_pr_common+0x108>
 800076e:	f8b4 a000 	ldrh.w	sl, [r4]
 8000772:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000776:	3404      	adds	r4, #4
 8000778:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800077a:	210f      	movs	r1, #15
 800077c:	4638      	mov	r0, r7
 800077e:	f029 0b01 	bic.w	fp, r9, #1
 8000782:	4493      	add	fp, r2
 8000784:	f7ff ff48 	bl	8000618 <_Unwind_GetGR>
 8000788:	4583      	cmp	fp, r0
 800078a:	d839      	bhi.n	8000800 <__gnu_unwind_pr_common+0x104>
 800078c:	f02a 0201 	bic.w	r2, sl, #1
 8000790:	445a      	add	r2, fp
 8000792:	4282      	cmp	r2, r0
 8000794:	bf94      	ite	ls
 8000796:	2000      	movls	r0, #0
 8000798:	2001      	movhi	r0, #1
 800079a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	f00a 0a01 	and.w	sl, sl, #1
 80007a6:	ea43 030a 	orr.w	r3, r3, sl
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d049      	beq.n	8000842 <__gnu_unwind_pr_common+0x146>
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d032      	beq.n	8000818 <__gnu_unwind_pr_common+0x11c>
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1cc      	bne.n	8000750 <__gnu_unwind_pr_common+0x54>
 80007b6:	f1b8 0f00 	cmp.w	r8, #0
 80007ba:	d002      	beq.n	80007c2 <__gnu_unwind_pr_common+0xc6>
 80007bc:	2800      	cmp	r0, #0
 80007be:	f040 80ce 	bne.w	800095e <__gnu_unwind_pr_common+0x262>
 80007c2:	3404      	adds	r4, #4
 80007c4:	f8d4 a000 	ldr.w	sl, [r4]
 80007c8:	f1ba 0f00 	cmp.w	sl, #0
 80007cc:	d1cd      	bne.n	800076a <__gnu_unwind_pr_common+0x6e>
 80007ce:	4638      	mov	r0, r7
 80007d0:	a905      	add	r1, sp, #20
 80007d2:	f000 fb29 	bl	8000e28 <__gnu_unwind_execute>
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d1ba      	bne.n	8000750 <__gnu_unwind_pr_common+0x54>
 80007da:	9b01      	ldr	r3, [sp, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0b3      	beq.n	8000748 <__gnu_unwind_pr_common+0x4c>
 80007e0:	210f      	movs	r1, #15
 80007e2:	4638      	mov	r0, r7
 80007e4:	f7ff ff18 	bl	8000618 <_Unwind_GetGR>
 80007e8:	210e      	movs	r1, #14
 80007ea:	4602      	mov	r2, r0
 80007ec:	4638      	mov	r0, r7
 80007ee:	f7ff ff39 	bl	8000664 <_Unwind_SetGR>
 80007f2:	4638      	mov	r0, r7
 80007f4:	210f      	movs	r1, #15
 80007f6:	4a6a      	ldr	r2, [pc, #424]	; (80009a0 <__gnu_unwind_pr_common+0x2a4>)
 80007f8:	f7ff ff34 	bl	8000664 <_Unwind_SetGR>
 80007fc:	2007      	movs	r0, #7
 80007fe:	e7a8      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000800:	2000      	movs	r0, #0
 8000802:	e7ca      	b.n	800079a <__gnu_unwind_pr_common+0x9e>
 8000804:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000808:	3408      	adds	r4, #8
 800080a:	e7b5      	b.n	8000778 <__gnu_unwind_pr_common+0x7c>
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	9305      	str	r3, [sp, #20]
 8000810:	2303      	movs	r3, #3
 8000812:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000816:	e78a      	b.n	800072e <__gnu_unwind_pr_common+0x32>
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800081e:	f1b8 0f00 	cmp.w	r8, #0
 8000822:	d145      	bne.n	80008b0 <__gnu_unwind_pr_common+0x1b4>
 8000824:	b128      	cbz	r0, 8000832 <__gnu_unwind_pr_common+0x136>
 8000826:	9a02      	ldr	r2, [sp, #8]
 8000828:	2a00      	cmp	r2, #0
 800082a:	d05c      	beq.n	80008e6 <__gnu_unwind_pr_common+0x1ea>
 800082c:	f1bb 0f00 	cmp.w	fp, #0
 8000830:	d074      	beq.n	800091c <__gnu_unwind_pr_common+0x220>
 8000832:	2b00      	cmp	r3, #0
 8000834:	da00      	bge.n	8000838 <__gnu_unwind_pr_common+0x13c>
 8000836:	3404      	adds	r4, #4
 8000838:	f10b 0b01 	add.w	fp, fp, #1
 800083c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000840:	e7c0      	b.n	80007c4 <__gnu_unwind_pr_common+0xc8>
 8000842:	f1b8 0f00 	cmp.w	r8, #0
 8000846:	d119      	bne.n	800087c <__gnu_unwind_pr_common+0x180>
 8000848:	b1b0      	cbz	r0, 8000878 <__gnu_unwind_pr_common+0x17c>
 800084a:	6863      	ldr	r3, [r4, #4]
 800084c:	6822      	ldr	r2, [r4, #0]
 800084e:	1c99      	adds	r1, r3, #2
 8000850:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000854:	f43f af7c 	beq.w	8000750 <__gnu_unwind_pr_common+0x54>
 8000858:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800085c:	3301      	adds	r3, #1
 800085e:	9104      	str	r1, [sp, #16]
 8000860:	f000 8091 	beq.w	8000986 <__gnu_unwind_pr_common+0x28a>
 8000864:	1d20      	adds	r0, r4, #4
 8000866:	f7ff fdb7 	bl	80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800086a:	ab04      	add	r3, sp, #16
 800086c:	4601      	mov	r1, r0
 800086e:	4628      	mov	r0, r5
 8000870:	f3af 8000 	nop.w
 8000874:	2800      	cmp	r0, #0
 8000876:	d15c      	bne.n	8000932 <__gnu_unwind_pr_common+0x236>
 8000878:	3408      	adds	r4, #8
 800087a:	e7a3      	b.n	80007c4 <__gnu_unwind_pr_common+0xc8>
 800087c:	210d      	movs	r1, #13
 800087e:	4638      	mov	r0, r7
 8000880:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000884:	f7ff fec8 	bl	8000618 <_Unwind_GetGR>
 8000888:	4581      	cmp	r9, r0
 800088a:	d1f5      	bne.n	8000878 <__gnu_unwind_pr_common+0x17c>
 800088c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800088e:	429c      	cmp	r4, r3
 8000890:	d1f2      	bne.n	8000878 <__gnu_unwind_pr_common+0x17c>
 8000892:	4620      	mov	r0, r4
 8000894:	f7ff fcd4 	bl	8000240 <selfrel_offset31>
 8000898:	210f      	movs	r1, #15
 800089a:	4602      	mov	r2, r0
 800089c:	4638      	mov	r0, r7
 800089e:	f7ff fee1 	bl	8000664 <_Unwind_SetGR>
 80008a2:	4638      	mov	r0, r7
 80008a4:	462a      	mov	r2, r5
 80008a6:	2100      	movs	r1, #0
 80008a8:	f7ff fedc 	bl	8000664 <_Unwind_SetGR>
 80008ac:	2007      	movs	r0, #7
 80008ae:	e750      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 80008b0:	210d      	movs	r1, #13
 80008b2:	4638      	mov	r0, r7
 80008b4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80008b8:	f7ff feae 	bl	8000618 <_Unwind_GetGR>
 80008bc:	4581      	cmp	r9, r0
 80008be:	d001      	beq.n	80008c4 <__gnu_unwind_pr_common+0x1c8>
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	e7b6      	b.n	8000832 <__gnu_unwind_pr_common+0x136>
 80008c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008c6:	429c      	cmp	r4, r3
 80008c8:	d1fa      	bne.n	80008c0 <__gnu_unwind_pr_common+0x1c4>
 80008ca:	2304      	movs	r3, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80008d2:	18e3      	adds	r3, r4, r3
 80008d4:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80008d8:	636b      	str	r3, [r5, #52]	; 0x34
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db5a      	blt.n	8000996 <__gnu_unwind_pr_common+0x29a>
 80008e0:	2301      	movs	r3, #1
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	e7a8      	b.n	8000838 <__gnu_unwind_pr_common+0x13c>
 80008e6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80008ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80008ee:	4691      	mov	r9, r2
 80008f0:	46b0      	mov	r8, r6
 80008f2:	f104 0a04 	add.w	sl, r4, #4
 80008f6:	461e      	mov	r6, r3
 80008f8:	e00e      	b.n	8000918 <__gnu_unwind_pr_common+0x21c>
 80008fa:	4650      	mov	r0, sl
 80008fc:	9604      	str	r6, [sp, #16]
 80008fe:	f7ff fd6b 	bl	80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000902:	2200      	movs	r2, #0
 8000904:	4601      	mov	r1, r0
 8000906:	ab04      	add	r3, sp, #16
 8000908:	4628      	mov	r0, r5
 800090a:	f109 0901 	add.w	r9, r9, #1
 800090e:	f10a 0a04 	add.w	sl, sl, #4
 8000912:	f3af 8000 	nop.w
 8000916:	b9e8      	cbnz	r0, 8000954 <__gnu_unwind_pr_common+0x258>
 8000918:	45d9      	cmp	r9, fp
 800091a:	d1ee      	bne.n	80008fa <__gnu_unwind_pr_common+0x1fe>
 800091c:	210d      	movs	r1, #13
 800091e:	4638      	mov	r0, r7
 8000920:	f7ff fe7a 	bl	8000618 <_Unwind_GetGR>
 8000924:	4603      	mov	r3, r0
 8000926:	9a04      	ldr	r2, [sp, #16]
 8000928:	2006      	movs	r0, #6
 800092a:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 800092e:	622b      	str	r3, [r5, #32]
 8000930:	e70f      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000932:	4681      	mov	r9, r0
 8000934:	210d      	movs	r1, #13
 8000936:	4638      	mov	r0, r7
 8000938:	f7ff fe6e 	bl	8000618 <_Unwind_GetGR>
 800093c:	f1b9 0f02 	cmp.w	r9, #2
 8000940:	6228      	str	r0, [r5, #32]
 8000942:	d125      	bne.n	8000990 <__gnu_unwind_pr_common+0x294>
 8000944:	462b      	mov	r3, r5
 8000946:	9a04      	ldr	r2, [sp, #16]
 8000948:	f843 2f2c 	str.w	r2, [r3, #44]!
 800094c:	626b      	str	r3, [r5, #36]	; 0x24
 800094e:	2006      	movs	r0, #6
 8000950:	62ac      	str	r4, [r5, #40]	; 0x28
 8000952:	e6fe      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000954:	4646      	mov	r6, r8
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800095c:	e769      	b.n	8000832 <__gnu_unwind_pr_common+0x136>
 800095e:	4620      	mov	r0, r4
 8000960:	f7ff fc6e 	bl	8000240 <selfrel_offset31>
 8000964:	4602      	mov	r2, r0
 8000966:	3404      	adds	r4, #4
 8000968:	63ac      	str	r4, [r5, #56]	; 0x38
 800096a:	4628      	mov	r0, r5
 800096c:	4614      	mov	r4, r2
 800096e:	f3af 8000 	nop.w
 8000972:	2800      	cmp	r0, #0
 8000974:	f43f aeec 	beq.w	8000750 <__gnu_unwind_pr_common+0x54>
 8000978:	4638      	mov	r0, r7
 800097a:	4622      	mov	r2, r4
 800097c:	210f      	movs	r1, #15
 800097e:	f7ff fe71 	bl	8000664 <_Unwind_SetGR>
 8000982:	2007      	movs	r0, #7
 8000984:	e6e5      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000986:	210d      	movs	r1, #13
 8000988:	4638      	mov	r0, r7
 800098a:	f7ff fe45 	bl	8000618 <_Unwind_GetGR>
 800098e:	6228      	str	r0, [r5, #32]
 8000990:	9b04      	ldr	r3, [sp, #16]
 8000992:	626b      	str	r3, [r5, #36]	; 0x24
 8000994:	e7db      	b.n	800094e <__gnu_unwind_pr_common+0x252>
 8000996:	f10b 0001 	add.w	r0, fp, #1
 800099a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800099e:	e779      	b.n	8000894 <__gnu_unwind_pr_common+0x198>
 80009a0:	00000000 	.word	0x00000000

080009a4 <__aeabi_unwind_cpp_pr0>:
 80009a4:	2300      	movs	r3, #0
 80009a6:	e6a9      	b.n	80006fc <__gnu_unwind_pr_common>

080009a8 <__aeabi_unwind_cpp_pr1>:
 80009a8:	2301      	movs	r3, #1
 80009aa:	e6a7      	b.n	80006fc <__gnu_unwind_pr_common>

080009ac <__aeabi_unwind_cpp_pr2>:
 80009ac:	2302      	movs	r3, #2
 80009ae:	e6a5      	b.n	80006fc <__gnu_unwind_pr_common>

080009b0 <_Unwind_VRS_Pop>:
 80009b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009b4:	4606      	mov	r6, r0
 80009b6:	4615      	mov	r5, r2
 80009b8:	461c      	mov	r4, r3
 80009ba:	b0c3      	sub	sp, #268	; 0x10c
 80009bc:	2904      	cmp	r1, #4
 80009be:	f200 80b8 	bhi.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009c2:	e8df f001 	tbb	[pc, r1]
 80009c6:	569c      	.short	0x569c
 80009c8:	2db6      	.short	0x2db6
 80009ca:	03          	.byte	0x03
 80009cb:	00          	.byte	0x00
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	f040 80b0 	bne.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009d2:	2a10      	cmp	r2, #16
 80009d4:	f200 80ad 	bhi.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009d8:	6803      	ldr	r3, [r0, #0]
 80009da:	06d8      	lsls	r0, r3, #27
 80009dc:	f100 80f1 	bmi.w	8000bc2 <_Unwind_VRS_Pop+0x212>
 80009e0:	af20      	add	r7, sp, #128	; 0x80
 80009e2:	4638      	mov	r0, r7
 80009e4:	f000 f990 	bl	8000d08 <__gnu_Unwind_Save_WMMXC>
 80009e8:	2401      	movs	r4, #1
 80009ea:	4638      	mov	r0, r7
 80009ec:	2300      	movs	r3, #0
 80009ee:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80009f0:	fa04 f203 	lsl.w	r2, r4, r3
 80009f4:	422a      	tst	r2, r5
 80009f6:	f103 0301 	add.w	r3, r3, #1
 80009fa:	d005      	beq.n	8000a08 <_Unwind_VRS_Pop+0x58>
 80009fc:	460a      	mov	r2, r1
 80009fe:	f852 cb04 	ldr.w	ip, [r2], #4
 8000a02:	4611      	mov	r1, r2
 8000a04:	f8c0 c000 	str.w	ip, [r0]
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	f100 0004 	add.w	r0, r0, #4
 8000a0e:	d1ef      	bne.n	80009f0 <_Unwind_VRS_Pop+0x40>
 8000a10:	4638      	mov	r0, r7
 8000a12:	63b1      	str	r1, [r6, #56]	; 0x38
 8000a14:	f000 f96e 	bl	8000cf4 <__gnu_Unwind_Restore_WMMXC>
 8000a18:	2000      	movs	r0, #0
 8000a1a:	b043      	add	sp, #268	; 0x10c
 8000a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a20:	2c03      	cmp	r4, #3
 8000a22:	f040 8086 	bne.w	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a26:	b294      	uxth	r4, r2
 8000a28:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000a2c:	2b10      	cmp	r3, #16
 8000a2e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000a32:	d87e      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a34:	6803      	ldr	r3, [r0, #0]
 8000a36:	071f      	lsls	r7, r3, #28
 8000a38:	f100 80cb 	bmi.w	8000bd2 <_Unwind_VRS_Pop+0x222>
 8000a3c:	af20      	add	r7, sp, #128	; 0x80
 8000a3e:	4638      	mov	r0, r7
 8000a40:	f000 f936 	bl	8000cb0 <__gnu_Unwind_Save_WMMXD>
 8000a44:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000a46:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000a4a:	b154      	cbz	r4, 8000a62 <_Unwind_VRS_Pop+0xb2>
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000a52:	1ad0      	subs	r0, r2, r3
 8000a54:	00e4      	lsls	r4, r4, #3
 8000a56:	581d      	ldr	r5, [r3, r0]
 8000a58:	f843 5b04 	str.w	r5, [r3], #4
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d1fa      	bne.n	8000a56 <_Unwind_VRS_Pop+0xa6>
 8000a60:	4422      	add	r2, r4
 8000a62:	4638      	mov	r0, r7
 8000a64:	63b2      	str	r2, [r6, #56]	; 0x38
 8000a66:	f000 f901 	bl	8000c6c <__gnu_Unwind_Restore_WMMXD>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	b043      	add	sp, #268	; 0x10c
 8000a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a72:	2c01      	cmp	r4, #1
 8000a74:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000a78:	b295      	uxth	r5, r2
 8000a7a:	d056      	beq.n	8000b2a <_Unwind_VRS_Pop+0x17a>
 8000a7c:	2c05      	cmp	r4, #5
 8000a7e:	d158      	bne.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a80:	eb08 0905 	add.w	r9, r8, r5
 8000a84:	f1b9 0f20 	cmp.w	r9, #32
 8000a88:	d853      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a8a:	f1b8 0f0f 	cmp.w	r8, #15
 8000a8e:	d973      	bls.n	8000b78 <_Unwind_VRS_Pop+0x1c8>
 8000a90:	46a9      	mov	r9, r5
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f040 8084 	bne.w	8000ba0 <_Unwind_VRS_Pop+0x1f0>
 8000a98:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a9a:	b365      	cbz	r5, 8000af6 <_Unwind_VRS_Pop+0x146>
 8000a9c:	af20      	add	r7, sp, #128	; 0x80
 8000a9e:	f04f 0900 	mov.w	r9, #0
 8000aa2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000aa6:	3f04      	subs	r7, #4
 8000aa8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000aac:	f853 1b04 	ldr.w	r1, [r3], #4
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	f847 1f04 	str.w	r1, [r7, #4]!
 8000ab6:	d1f9      	bne.n	8000aac <_Unwind_VRS_Pop+0xfc>
 8000ab8:	f1b9 0f00 	cmp.w	r9, #0
 8000abc:	d00f      	beq.n	8000ade <_Unwind_VRS_Pop+0x12e>
 8000abe:	466f      	mov	r7, sp
 8000ac0:	4641      	mov	r1, r8
 8000ac2:	2910      	cmp	r1, #16
 8000ac4:	bf38      	it	cc
 8000ac6:	2110      	movcc	r1, #16
 8000ac8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000acc:	3984      	subs	r1, #132	; 0x84
 8000ace:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000ad2:	f853 0b04 	ldr.w	r0, [r3], #4
 8000ad6:	42ab      	cmp	r3, r5
 8000ad8:	f841 0f04 	str.w	r0, [r1, #4]!
 8000adc:	d1f9      	bne.n	8000ad2 <_Unwind_VRS_Pop+0x122>
 8000ade:	2c01      	cmp	r4, #1
 8000ae0:	d07f      	beq.n	8000be2 <_Unwind_VRS_Pop+0x232>
 8000ae2:	f1b8 0f0f 	cmp.w	r8, #15
 8000ae6:	63b5      	str	r5, [r6, #56]	; 0x38
 8000ae8:	d942      	bls.n	8000b70 <_Unwind_VRS_Pop+0x1c0>
 8000aea:	f1b9 0f00 	cmp.w	r9, #0
 8000aee:	d002      	beq.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000af0:	4668      	mov	r0, sp
 8000af2:	f000 f8b3 	bl	8000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000af6:	2000      	movs	r0, #0
 8000af8:	b043      	add	sp, #268	; 0x10c
 8000afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000afe:	b9c4      	cbnz	r4, 8000b32 <_Unwind_VRS_Pop+0x182>
 8000b00:	4623      	mov	r3, r4
 8000b02:	2401      	movs	r4, #1
 8000b04:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000b06:	1d37      	adds	r7, r6, #4
 8000b08:	b2a8      	uxth	r0, r5
 8000b0a:	fa04 f103 	lsl.w	r1, r4, r3
 8000b0e:	4201      	tst	r1, r0
 8000b10:	bf1c      	itt	ne
 8000b12:	f852 1b04 	ldrne.w	r1, [r2], #4
 8000b16:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	2b10      	cmp	r3, #16
 8000b1e:	d1f4      	bne.n	8000b0a <_Unwind_VRS_Pop+0x15a>
 8000b20:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000b24:	d1e7      	bne.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000b26:	63b2      	str	r2, [r6, #56]	; 0x38
 8000b28:	e004      	b.n	8000b34 <_Unwind_VRS_Pop+0x184>
 8000b2a:	eb08 0305 	add.w	r3, r8, r5
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d903      	bls.n	8000b3a <_Unwind_VRS_Pop+0x18a>
 8000b32:	2002      	movs	r0, #2
 8000b34:	b043      	add	sp, #268	; 0x10c
 8000b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b3a:	f1b8 0f0f 	cmp.w	r8, #15
 8000b3e:	d8f8      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000b40:	6833      	ldr	r3, [r6, #0]
 8000b42:	07da      	lsls	r2, r3, #31
 8000b44:	d506      	bpl.n	8000b54 <_Unwind_VRS_Pop+0x1a4>
 8000b46:	4630      	mov	r0, r6
 8000b48:	f023 0303 	bic.w	r3, r3, #3
 8000b4c:	f840 3b48 	str.w	r3, [r0], #72
 8000b50:	f000 f878 	bl	8000c44 <__gnu_Unwind_Save_VFP>
 8000b54:	af20      	add	r7, sp, #128	; 0x80
 8000b56:	4638      	mov	r0, r7
 8000b58:	f000 f874 	bl	8000c44 <__gnu_Unwind_Save_VFP>
 8000b5c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d19d      	bne.n	8000a9e <_Unwind_VRS_Pop+0xee>
 8000b62:	461d      	mov	r5, r3
 8000b64:	3504      	adds	r5, #4
 8000b66:	4638      	mov	r0, r7
 8000b68:	63b5      	str	r5, [r6, #56]	; 0x38
 8000b6a:	f000 f867 	bl	8000c3c <__gnu_Unwind_Restore_VFP>
 8000b6e:	e7c2      	b.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000b70:	a820      	add	r0, sp, #128	; 0x80
 8000b72:	f000 f86b 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000b76:	e7b8      	b.n	8000aea <_Unwind_VRS_Pop+0x13a>
 8000b78:	f1b9 0f10 	cmp.w	r9, #16
 8000b7c:	d93f      	bls.n	8000bfe <_Unwind_VRS_Pop+0x24e>
 8000b7e:	f1a9 0910 	sub.w	r9, r9, #16
 8000b82:	6833      	ldr	r3, [r6, #0]
 8000b84:	07d9      	lsls	r1, r3, #31
 8000b86:	d508      	bpl.n	8000b9a <_Unwind_VRS_Pop+0x1ea>
 8000b88:	4630      	mov	r0, r6
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f840 3b48 	str.w	r3, [r0], #72
 8000b96:	f000 f85d 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000b9a:	f1b9 0f00 	cmp.w	r9, #0
 8000b9e:	d031      	beq.n	8000c04 <_Unwind_VRS_Pop+0x254>
 8000ba0:	6833      	ldr	r3, [r6, #0]
 8000ba2:	075a      	lsls	r2, r3, #29
 8000ba4:	d41f      	bmi.n	8000be6 <_Unwind_VRS_Pop+0x236>
 8000ba6:	f1b8 0f0f 	cmp.w	r8, #15
 8000baa:	d924      	bls.n	8000bf6 <_Unwind_VRS_Pop+0x246>
 8000bac:	466f      	mov	r7, sp
 8000bae:	f1c8 0510 	rsb	r5, r8, #16
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	f000 f856 	bl	8000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000bbc:	dd80      	ble.n	8000ac0 <_Unwind_VRS_Pop+0x110>
 8000bbe:	af20      	add	r7, sp, #128	; 0x80
 8000bc0:	e76f      	b.n	8000aa2 <_Unwind_VRS_Pop+0xf2>
 8000bc2:	f023 0310 	bic.w	r3, r3, #16
 8000bc6:	6033      	str	r3, [r6, #0]
 8000bc8:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000bcc:	f000 f89c 	bl	8000d08 <__gnu_Unwind_Save_WMMXC>
 8000bd0:	e706      	b.n	80009e0 <_Unwind_VRS_Pop+0x30>
 8000bd2:	f023 0308 	bic.w	r3, r3, #8
 8000bd6:	6003      	str	r3, [r0, #0]
 8000bd8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000bdc:	f000 f868 	bl	8000cb0 <__gnu_Unwind_Save_WMMXD>
 8000be0:	e72c      	b.n	8000a3c <_Unwind_VRS_Pop+0x8c>
 8000be2:	af20      	add	r7, sp, #128	; 0x80
 8000be4:	e7be      	b.n	8000b64 <_Unwind_VRS_Pop+0x1b4>
 8000be6:	4630      	mov	r0, r6
 8000be8:	f023 0304 	bic.w	r3, r3, #4
 8000bec:	f840 3bd0 	str.w	r3, [r0], #208
 8000bf0:	f000 f838 	bl	8000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bf4:	e7d7      	b.n	8000ba6 <_Unwind_VRS_Pop+0x1f6>
 8000bf6:	a820      	add	r0, sp, #128	; 0x80
 8000bf8:	f000 f82c 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000bfc:	e7d6      	b.n	8000bac <_Unwind_VRS_Pop+0x1fc>
 8000bfe:	f04f 0900 	mov.w	r9, #0
 8000c02:	e7be      	b.n	8000b82 <_Unwind_VRS_Pop+0x1d2>
 8000c04:	f1b8 0f0f 	cmp.w	r8, #15
 8000c08:	f63f af46 	bhi.w	8000a98 <_Unwind_VRS_Pop+0xe8>
 8000c0c:	af20      	add	r7, sp, #128	; 0x80
 8000c0e:	4638      	mov	r0, r7
 8000c10:	f000 f820 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000c14:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	f47f af41 	bne.w	8000a9e <_Unwind_VRS_Pop+0xee>
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	f000 f815 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000c22:	e768      	b.n	8000af6 <_Unwind_VRS_Pop+0x146>

08000c24 <__restore_core_regs>:
 8000c24:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000c28:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000c2c:	469c      	mov	ip, r3
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000c34:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000c38:	46e5      	mov	sp, ip
 8000c3a:	bd00      	pop	{pc}

08000c3c <__gnu_Unwind_Restore_VFP>:
 8000c3c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <__gnu_Unwind_Save_VFP>:
 8000c44:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__gnu_Unwind_Restore_VFP_D>:
 8000c4c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__gnu_Unwind_Save_VFP_D>:
 8000c54:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000c5c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000c64:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__gnu_Unwind_Restore_WMMXD>:
 8000c6c:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c70:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c74:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c78:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c7c:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c80:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c84:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c88:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c8c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c90:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c94:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c98:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c9c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000ca0:	ecf0 d102 	ldfp	f5, [r0], #8
 8000ca4:	ecf0 e102 	ldfp	f6, [r0], #8
 8000ca8:	ecf0 f102 	ldfp	f7, [r0], #8
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__gnu_Unwind_Save_WMMXD>:
 8000cb0:	ece0 0102 	stfe	f0, [r0], #8
 8000cb4:	ece0 1102 	stfe	f1, [r0], #8
 8000cb8:	ece0 2102 	stfe	f2, [r0], #8
 8000cbc:	ece0 3102 	stfe	f3, [r0], #8
 8000cc0:	ece0 4102 	stfe	f4, [r0], #8
 8000cc4:	ece0 5102 	stfe	f5, [r0], #8
 8000cc8:	ece0 6102 	stfe	f6, [r0], #8
 8000ccc:	ece0 7102 	stfe	f7, [r0], #8
 8000cd0:	ece0 8102 	stfp	f0, [r0], #8
 8000cd4:	ece0 9102 	stfp	f1, [r0], #8
 8000cd8:	ece0 a102 	stfp	f2, [r0], #8
 8000cdc:	ece0 b102 	stfp	f3, [r0], #8
 8000ce0:	ece0 c102 	stfp	f4, [r0], #8
 8000ce4:	ece0 d102 	stfp	f5, [r0], #8
 8000ce8:	ece0 e102 	stfp	f6, [r0], #8
 8000cec:	ece0 f102 	stfp	f7, [r0], #8
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <__gnu_Unwind_Restore_WMMXC>:
 8000cf4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000cf8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000cfc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000d00:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__gnu_Unwind_Save_WMMXC>:
 8000d08:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000d0c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000d10:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000d14:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <_Unwind_RaiseException>:
 8000d1c:	46ec      	mov	ip, sp
 8000d1e:	b500      	push	{lr}
 8000d20:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d24:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d30:	a901      	add	r1, sp, #4
 8000d32:	f7ff fbe7 	bl	8000504 <__gnu_Unwind_RaiseException>
 8000d36:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d3a:	b012      	add	sp, #72	; 0x48
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <_Unwind_Resume>:
 8000d40:	46ec      	mov	ip, sp
 8000d42:	b500      	push	{lr}
 8000d44:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d48:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d54:	a901      	add	r1, sp, #4
 8000d56:	f7ff fc13 	bl	8000580 <__gnu_Unwind_Resume>
 8000d5a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d5e:	b012      	add	sp, #72	; 0x48
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <_Unwind_Resume_or_Rethrow>:
 8000d64:	46ec      	mov	ip, sp
 8000d66:	b500      	push	{lr}
 8000d68:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d6c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d78:	a901      	add	r1, sp, #4
 8000d7a:	f7ff fc23 	bl	80005c4 <__gnu_Unwind_Resume_or_Rethrow>
 8000d7e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d82:	b012      	add	sp, #72	; 0x48
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <_Unwind_ForcedUnwind>:
 8000d88:	46ec      	mov	ip, sp
 8000d8a:	b500      	push	{lr}
 8000d8c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d90:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d9c:	ab01      	add	r3, sp, #4
 8000d9e:	f7ff fbe5 	bl	800056c <__gnu_Unwind_ForcedUnwind>
 8000da2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000da6:	b012      	add	sp, #72	; 0x48
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <_Unwind_Backtrace>:
 8000dac:	46ec      	mov	ip, sp
 8000dae:	b500      	push	{lr}
 8000db0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000db4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000dc0:	aa01      	add	r2, sp, #4
 8000dc2:	f7ff fc5b 	bl	800067c <__gnu_Unwind_Backtrace>
 8000dc6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000dca:	b012      	add	sp, #72	; 0x48
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <next_unwind_byte>:
 8000dd0:	7a02      	ldrb	r2, [r0, #8]
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b97a      	cbnz	r2, 8000df6 <next_unwind_byte+0x26>
 8000dd6:	7a42      	ldrb	r2, [r0, #9]
 8000dd8:	b1a2      	cbz	r2, 8000e04 <next_unwind_byte+0x34>
 8000dda:	f04f 0c03 	mov.w	ip, #3
 8000dde:	6841      	ldr	r1, [r0, #4]
 8000de0:	3a01      	subs	r2, #1
 8000de2:	7242      	strb	r2, [r0, #9]
 8000de4:	6808      	ldr	r0, [r1, #0]
 8000de6:	1d0a      	adds	r2, r1, #4
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	0202      	lsls	r2, r0, #8
 8000dec:	f883 c008 	strb.w	ip, [r3, #8]
 8000df0:	0e00      	lsrs	r0, r0, #24
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	4770      	bx	lr
 8000df6:	6800      	ldr	r0, [r0, #0]
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	721a      	strb	r2, [r3, #8]
 8000dfc:	0202      	lsls	r2, r0, #8
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	0e00      	lsrs	r0, r0, #24
 8000e02:	4770      	bx	lr
 8000e04:	20b0      	movs	r0, #176	; 0xb0
 8000e06:	4770      	bx	lr

08000e08 <_Unwind_GetGR.constprop.0>:
 8000e08:	2300      	movs	r3, #0
 8000e0a:	b500      	push	{lr}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	a903      	add	r1, sp, #12
 8000e10:	9100      	str	r1, [sp, #0]
 8000e12:	220c      	movs	r2, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	f7ff fbe7 	bl	80005e8 <_Unwind_VRS_Get>
 8000e1a:	9803      	ldr	r0, [sp, #12]
 8000e1c:	b005      	add	sp, #20
 8000e1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e22:	bf00      	nop

08000e24 <unwind_UCB_from_context>:
 8000e24:	e7f0      	b.n	8000e08 <_Unwind_GetGR.constprop.0>
 8000e26:	bf00      	nop

08000e28 <__gnu_unwind_execute>:
 8000e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e2c:	f04f 0800 	mov.w	r8, #0
 8000e30:	4605      	mov	r5, r0
 8000e32:	460e      	mov	r6, r1
 8000e34:	b085      	sub	sp, #20
 8000e36:	4630      	mov	r0, r6
 8000e38:	f7ff ffca 	bl	8000dd0 <next_unwind_byte>
 8000e3c:	28b0      	cmp	r0, #176	; 0xb0
 8000e3e:	4604      	mov	r4, r0
 8000e40:	f000 80ba 	beq.w	8000fb8 <__gnu_unwind_execute+0x190>
 8000e44:	0607      	lsls	r7, r0, #24
 8000e46:	d520      	bpl.n	8000e8a <__gnu_unwind_execute+0x62>
 8000e48:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000e4c:	2b80      	cmp	r3, #128	; 0x80
 8000e4e:	d04d      	beq.n	8000eec <__gnu_unwind_execute+0xc4>
 8000e50:	2b90      	cmp	r3, #144	; 0x90
 8000e52:	d036      	beq.n	8000ec2 <__gnu_unwind_execute+0x9a>
 8000e54:	2ba0      	cmp	r3, #160	; 0xa0
 8000e56:	d060      	beq.n	8000f1a <__gnu_unwind_execute+0xf2>
 8000e58:	2bb0      	cmp	r3, #176	; 0xb0
 8000e5a:	d073      	beq.n	8000f44 <__gnu_unwind_execute+0x11c>
 8000e5c:	2bc0      	cmp	r3, #192	; 0xc0
 8000e5e:	f000 808a 	beq.w	8000f76 <__gnu_unwind_execute+0x14e>
 8000e62:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e66:	2bd0      	cmp	r3, #208	; 0xd0
 8000e68:	d10b      	bne.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000e6a:	f000 0207 	and.w	r2, r0, #7
 8000e6e:	3201      	adds	r2, #1
 8000e70:	2305      	movs	r3, #5
 8000e72:	2101      	movs	r1, #1
 8000e74:	4628      	mov	r0, r5
 8000e76:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e7a:	f7ff fd99 	bl	80009b0 <_Unwind_VRS_Pop>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d0d9      	beq.n	8000e36 <__gnu_unwind_execute+0xe>
 8000e82:	2009      	movs	r0, #9
 8000e84:	b005      	add	sp, #20
 8000e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e8a:	0083      	lsls	r3, r0, #2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	1d1f      	adds	r7, r3, #4
 8000e90:	2300      	movs	r3, #0
 8000e92:	f10d 090c 	add.w	r9, sp, #12
 8000e96:	4619      	mov	r1, r3
 8000e98:	220d      	movs	r2, #13
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f8cd 9000 	str.w	r9, [sp]
 8000ea0:	f7ff fba2 	bl	80005e8 <_Unwind_VRS_Get>
 8000ea4:	9b03      	ldr	r3, [sp, #12]
 8000ea6:	0660      	lsls	r0, r4, #25
 8000ea8:	bf4c      	ite	mi
 8000eaa:	1bdf      	submi	r7, r3, r7
 8000eac:	18ff      	addpl	r7, r7, r3
 8000eae:	2300      	movs	r3, #0
 8000eb0:	220d      	movs	r2, #13
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f8cd 9000 	str.w	r9, [sp]
 8000eba:	9703      	str	r7, [sp, #12]
 8000ebc:	f7ff fbba 	bl	8000634 <_Unwind_VRS_Set>
 8000ec0:	e7b9      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000ec2:	f000 030d 	and.w	r3, r0, #13
 8000ec6:	2b0d      	cmp	r3, #13
 8000ec8:	d0db      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	af03      	add	r7, sp, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f000 020f 	and.w	r2, r0, #15
 8000ed4:	9700      	str	r7, [sp, #0]
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	f7ff fb86 	bl	80005e8 <_Unwind_VRS_Get>
 8000edc:	2300      	movs	r3, #0
 8000ede:	220d      	movs	r2, #13
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	9700      	str	r7, [sp, #0]
 8000ee6:	f7ff fba5 	bl	8000634 <_Unwind_VRS_Set>
 8000eea:	e7a4      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000eec:	4630      	mov	r0, r6
 8000eee:	f7ff ff6f 	bl	8000dd0 <next_unwind_byte>
 8000ef2:	0224      	lsls	r4, r4, #8
 8000ef4:	4320      	orrs	r0, r4
 8000ef6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000efa:	d0c2      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000efc:	2300      	movs	r3, #0
 8000efe:	0104      	lsls	r4, r0, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4628      	mov	r0, r5
 8000f04:	b2a2      	uxth	r2, r4
 8000f06:	f7ff fd53 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d1b9      	bne.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f0e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000f12:	bf18      	it	ne
 8000f14:	f04f 0801 	movne.w	r8, #1
 8000f18:	e78d      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000f1a:	43c3      	mvns	r3, r0
 8000f1c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	411a      	asrs	r2, r3
 8000f26:	2300      	movs	r3, #0
 8000f28:	0701      	lsls	r1, r0, #28
 8000f2a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000f2e:	bf48      	it	mi
 8000f30:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000f34:	4628      	mov	r0, r5
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fd3a 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	f43f af7a 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000f42:	e79e      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f44:	28b1      	cmp	r0, #177	; 0xb1
 8000f46:	d03c      	beq.n	8000fc2 <__gnu_unwind_execute+0x19a>
 8000f48:	28b2      	cmp	r0, #178	; 0xb2
 8000f4a:	f000 80b0 	beq.w	80010ae <__gnu_unwind_execute+0x286>
 8000f4e:	28b3      	cmp	r0, #179	; 0xb3
 8000f50:	d04a      	beq.n	8000fe8 <__gnu_unwind_execute+0x1c0>
 8000f52:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000f56:	2bb4      	cmp	r3, #180	; 0xb4
 8000f58:	d093      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f000 0207 	and.w	r2, r0, #7
 8000f60:	441a      	add	r2, r3
 8000f62:	4628      	mov	r0, r5
 8000f64:	4619      	mov	r1, r3
 8000f66:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f6a:	f7ff fd21 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	f43f af61 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000f74:	e785      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f76:	28c6      	cmp	r0, #198	; 0xc6
 8000f78:	d04f      	beq.n	800101a <__gnu_unwind_execute+0x1f2>
 8000f7a:	28c7      	cmp	r0, #199	; 0xc7
 8000f7c:	d061      	beq.n	8001042 <__gnu_unwind_execute+0x21a>
 8000f7e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f82:	2bc0      	cmp	r3, #192	; 0xc0
 8000f84:	d070      	beq.n	8001068 <__gnu_unwind_execute+0x240>
 8000f86:	28c8      	cmp	r0, #200	; 0xc8
 8000f88:	d07c      	beq.n	8001084 <__gnu_unwind_execute+0x25c>
 8000f8a:	28c9      	cmp	r0, #201	; 0xc9
 8000f8c:	f47f af79 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000f90:	4630      	mov	r0, r6
 8000f92:	f7ff ff1d 	bl	8000dd0 <next_unwind_byte>
 8000f96:	2305      	movs	r3, #5
 8000f98:	4602      	mov	r2, r0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	0314      	lsls	r4, r2, #12
 8000fa0:	f002 020f 	and.w	r2, r2, #15
 8000fa4:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000fa8:	440a      	add	r2, r1
 8000faa:	4322      	orrs	r2, r4
 8000fac:	f7ff fd00 	bl	80009b0 <_Unwind_VRS_Pop>
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	f43f af40 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000fb6:	e764      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000fb8:	f1b8 0f00 	cmp.w	r8, #0
 8000fbc:	d01c      	beq.n	8000ff8 <__gnu_unwind_execute+0x1d0>
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	e760      	b.n	8000e84 <__gnu_unwind_execute+0x5c>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	f7ff ff04 	bl	8000dd0 <next_unwind_byte>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	f43f af59 	beq.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000fd0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fd4:	f47f af55 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f7ff fce8 	bl	80009b0 <_Unwind_VRS_Pop>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	f43f af28 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000fe6:	e74c      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f7ff fef1 	bl	8000dd0 <next_unwind_byte>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	e7d2      	b.n	8000f9e <__gnu_unwind_execute+0x176>
 8000ff8:	ac03      	add	r4, sp, #12
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	220e      	movs	r2, #14
 8000ffe:	4641      	mov	r1, r8
 8001000:	4628      	mov	r0, r5
 8001002:	9400      	str	r4, [sp, #0]
 8001004:	f7ff faf0 	bl	80005e8 <_Unwind_VRS_Get>
 8001008:	4643      	mov	r3, r8
 800100a:	220f      	movs	r2, #15
 800100c:	4628      	mov	r0, r5
 800100e:	4641      	mov	r1, r8
 8001010:	9400      	str	r4, [sp, #0]
 8001012:	f7ff fb0f 	bl	8000634 <_Unwind_VRS_Set>
 8001016:	4640      	mov	r0, r8
 8001018:	e734      	b.n	8000e84 <__gnu_unwind_execute+0x5c>
 800101a:	4630      	mov	r0, r6
 800101c:	f7ff fed8 	bl	8000dd0 <next_unwind_byte>
 8001020:	4602      	mov	r2, r0
 8001022:	2303      	movs	r3, #3
 8001024:	0314      	lsls	r4, r2, #12
 8001026:	f002 020f 	and.w	r2, r2, #15
 800102a:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 800102e:	3201      	adds	r2, #1
 8001030:	4628      	mov	r0, r5
 8001032:	4619      	mov	r1, r3
 8001034:	4322      	orrs	r2, r4
 8001036:	f7ff fcbb 	bl	80009b0 <_Unwind_VRS_Pop>
 800103a:	2800      	cmp	r0, #0
 800103c:	f43f aefb 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001040:	e71f      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001042:	4630      	mov	r0, r6
 8001044:	f7ff fec4 	bl	8000dd0 <next_unwind_byte>
 8001048:	4602      	mov	r2, r0
 800104a:	2800      	cmp	r0, #0
 800104c:	f43f af19 	beq.w	8000e82 <__gnu_unwind_execute+0x5a>
 8001050:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001054:	f47f af15 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8001058:	2104      	movs	r1, #4
 800105a:	4628      	mov	r0, r5
 800105c:	f7ff fca8 	bl	80009b0 <_Unwind_VRS_Pop>
 8001060:	2800      	cmp	r0, #0
 8001062:	f43f aee8 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001066:	e70c      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001068:	2303      	movs	r3, #3
 800106a:	f000 020f 	and.w	r2, r0, #15
 800106e:	3201      	adds	r2, #1
 8001070:	4628      	mov	r0, r5
 8001072:	4619      	mov	r1, r3
 8001074:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001078:	f7ff fc9a 	bl	80009b0 <_Unwind_VRS_Pop>
 800107c:	2800      	cmp	r0, #0
 800107e:	f43f aeda 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001082:	e6fe      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001084:	4630      	mov	r0, r6
 8001086:	f7ff fea3 	bl	8000dd0 <next_unwind_byte>
 800108a:	4602      	mov	r2, r0
 800108c:	2101      	movs	r1, #1
 800108e:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8001092:	f002 020f 	and.w	r2, r2, #15
 8001096:	3410      	adds	r4, #16
 8001098:	440a      	add	r2, r1
 800109a:	2305      	movs	r3, #5
 800109c:	4628      	mov	r0, r5
 800109e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80010a2:	f7ff fc85 	bl	80009b0 <_Unwind_VRS_Pop>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	f43f aec5 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 80010ac:	e6e9      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 80010ae:	2300      	movs	r3, #0
 80010b0:	f10d 090c 	add.w	r9, sp, #12
 80010b4:	220d      	movs	r2, #13
 80010b6:	4619      	mov	r1, r3
 80010b8:	4628      	mov	r0, r5
 80010ba:	f8cd 9000 	str.w	r9, [sp]
 80010be:	f7ff fa93 	bl	80005e8 <_Unwind_VRS_Get>
 80010c2:	4630      	mov	r0, r6
 80010c4:	f7ff fe84 	bl	8000dd0 <next_unwind_byte>
 80010c8:	0602      	lsls	r2, r0, #24
 80010ca:	f04f 0402 	mov.w	r4, #2
 80010ce:	d50c      	bpl.n	80010ea <__gnu_unwind_execute+0x2c2>
 80010d0:	9b03      	ldr	r3, [sp, #12]
 80010d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80010d6:	40a0      	lsls	r0, r4
 80010d8:	4418      	add	r0, r3
 80010da:	9003      	str	r0, [sp, #12]
 80010dc:	4630      	mov	r0, r6
 80010de:	f7ff fe77 	bl	8000dd0 <next_unwind_byte>
 80010e2:	0603      	lsls	r3, r0, #24
 80010e4:	f104 0407 	add.w	r4, r4, #7
 80010e8:	d4f2      	bmi.n	80010d0 <__gnu_unwind_execute+0x2a8>
 80010ea:	9b03      	ldr	r3, [sp, #12]
 80010ec:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80010f0:	40a2      	lsls	r2, r4
 80010f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010f6:	441a      	add	r2, r3
 80010f8:	2300      	movs	r3, #0
 80010fa:	9203      	str	r2, [sp, #12]
 80010fc:	4628      	mov	r0, r5
 80010fe:	220d      	movs	r2, #13
 8001100:	4619      	mov	r1, r3
 8001102:	f8cd 9000 	str.w	r9, [sp]
 8001106:	f7ff fa95 	bl	8000634 <_Unwind_VRS_Set>
 800110a:	e694      	b.n	8000e36 <__gnu_unwind_execute+0xe>

0800110c <__gnu_unwind_frame>:
 800110c:	460b      	mov	r3, r1
 800110e:	f04f 0c03 	mov.w	ip, #3
 8001112:	b500      	push	{lr}
 8001114:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001116:	4618      	mov	r0, r3
 8001118:	6853      	ldr	r3, [r2, #4]
 800111a:	b085      	sub	sp, #20
 800111c:	3208      	adds	r2, #8
 800111e:	9202      	str	r2, [sp, #8]
 8001120:	a901      	add	r1, sp, #4
 8001122:	0e1a      	lsrs	r2, r3, #24
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	f88d c00c 	strb.w	ip, [sp, #12]
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	f88d 200d 	strb.w	r2, [sp, #13]
 8001130:	f7ff fe7a 	bl	8000e28 <__gnu_unwind_execute>
 8001134:	b005      	add	sp, #20
 8001136:	f85d fb04 	ldr.w	pc, [sp], #4
 800113a:	bf00      	nop

0800113c <_Unwind_GetRegionStart>:
 800113c:	b508      	push	{r3, lr}
 800113e:	f7ff fe71 	bl	8000e24 <unwind_UCB_from_context>
 8001142:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001144:	bd08      	pop	{r3, pc}
 8001146:	bf00      	nop

08001148 <_Unwind_GetLanguageSpecificData>:
 8001148:	b508      	push	{r3, lr}
 800114a:	f7ff fe6b 	bl	8000e24 <unwind_UCB_from_context>
 800114e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001150:	79c3      	ldrb	r3, [r0, #7]
 8001152:	3302      	adds	r3, #2
 8001154:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001158:	bd08      	pop	{r3, pc}
 800115a:	bf00      	nop

0800115c <_ZN3LED6setPinEt>:
public:
	LED();
	LED( GPIO_TypeDef*, uint16_t pin );
	virtual ~LED();

	void setPin( uint16_t pin ) { mPin = pin; }
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	811a      	strh	r2, [r3, #8]
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <_ZN3LED7setPortEP12GPIO_TypeDef>:
	void setPort( GPIO_TypeDef* port ) { mPort = port; }
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>:
	void setPortAndPin( GPIO_TypeDef* port, uint16_t pin ) { setPin( pin ); setPort( port ); }
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	4613      	mov	r3, r2
 800119e:	80fb      	strh	r3, [r7, #6]
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	4619      	mov	r1, r3
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f7ff ffd9 	bl	800115c <_ZN3LED6setPinEt>
 80011aa:	68b9      	ldr	r1, [r7, #8]
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff ffe3 	bl	8001178 <_ZN3LED7setPortEP12GPIO_TypeDef>
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <_ZN3I2CC1Ev>:
	I2C_HandleTypeDef mI2C;
private:
	uint8_t mBuffer[16];

public:
	I2C() {}
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <_ZN3I2CC1Ev+0x1c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	08007c2c 	.word	0x08007c2c

080011dc <_ZN3I2C10setBusDataE17I2C_HandleTypeDef>:
	I2C( I2C_HandleTypeDef bus );
	virtual ~I2C();

	void setBusData( I2C_HandleTypeDef bus ) { mI2C = bus; }
 80011dc:	b084      	sub	sp, #16
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	f107 0014 	add.w	r0, r7, #20
 80011ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3304      	adds	r3, #4
 80011f2:	f107 0114 	add.w	r1, r7, #20
 80011f6:	2254      	movs	r2, #84	; 0x54
 80011f8:	4618      	mov	r0, r3
 80011fa:	f006 fb31 	bl	8007860 <memcpy>
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001208:	b004      	add	sp, #16
 800120a:	4770      	bx	lr

0800120c <_ZN9AmplifierC1Ev>:
#include "main.h"
#include "cmsis_os.h"
#include "I2CDevice.h"
#include "DACPCM1681.h"

Amplifier::Amplifier() : mDAC( 0 ) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	4a15      	ldr	r2, [pc, #84]	; (800126c <_ZN9AmplifierC1Ev+0x60>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3304      	adds	r3, #4
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fd22 	bl	8001c68 <_ZN2UIC1Ev>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3308      	adds	r3, #8
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fae5 	bl	80017f8 <_ZN7DisplayC1Ev>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3310      	adds	r3, #16
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fcbe 	bl	8001bb4 <_ZN3LEDC1Ev>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3320      	adds	r3, #32
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fcb9 	bl	8001bb4 <_ZN3LEDC1Ev>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3330      	adds	r3, #48	; 0x30
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ffb8 	bl	80011bc <_ZN3I2CC1Ev>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	// TODO Auto-generated constructor stub
	mDolbyLED.setPortAndPin( LED_MUTE_GPIO_Port, LED_MUTE_Pin );
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3310      	adds	r3, #16
 8001258:	2208      	movs	r2, #8
 800125a:	4905      	ldr	r1, [pc, #20]	; (8001270 <_ZN9AmplifierC1Ev+0x64>)
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff98 	bl	8001192 <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
}
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	08007b78 	.word	0x08007b78
 8001270:	40011000 	.word	0x40011000

08001274 <_ZN9AmplifierD1Ev>:

Amplifier::~Amplifier() {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <_ZN9AmplifierD1Ev+0x4c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3330      	adds	r3, #48	; 0x30
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fb52 	bl	8001930 <_ZN3I2CD1Ev>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3320      	adds	r3, #32
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fca7 	bl	8001be4 <_ZN3LEDD1Ev>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3310      	adds	r3, #16
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fca2 	bl	8001be4 <_ZN3LEDD1Ev>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3308      	adds	r3, #8
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 fab9 	bl	800181c <_ZN7DisplayD1Ev>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3304      	adds	r3, #4
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fcea 	bl	8001c88 <_ZN2UID1Ev>
	// TODO Auto-generated destructor stub
}
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	08007b78 	.word	0x08007b78

080012c4 <_ZN9AmplifierD0Ev>:
Amplifier::~Amplifier() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
}
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ffd1 	bl	8001274 <_ZN9AmplifierD1Ev>
 80012d2:	219c      	movs	r1, #156	; 0x9c
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f006 f9c6 	bl	8007666 <_ZdlPvj>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_ZN9Amplifier10initializeE17I2C_HandleTypeDef>:

void
Amplifier::initialize( I2C_HandleTypeDef bus ) {
 80012e4:	b084      	sub	sp, #16
 80012e6:	b5b0      	push	{r4, r5, r7, lr}
 80012e8:	b094      	sub	sp, #80	; 0x50
 80012ea:	af12      	add	r7, sp, #72	; 0x48
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	f107 001c 	add.w	r0, r7, #28
 80012f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// Take the I2C bus info and configure our internal I2C bus class
	mBusI2C.setBusData( bus );
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80012fc:	4668      	mov	r0, sp
 80012fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001302:	2248      	movs	r2, #72	; 0x48
 8001304:	4619      	mov	r1, r3
 8001306:	f006 faab 	bl	8007860 <memcpy>
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001310:	4620      	mov	r0, r4
 8001312:	f7ff ff63 	bl	80011dc <_ZN3I2C10setBusDataE17I2C_HandleTypeDef>

	mDAC = new DAC_PCM1681( mBusI2C.makeDevice( 0 ) );
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3330      	adds	r3, #48	; 0x30
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fb89 	bl	8001a34 <_ZN3I2C10makeDeviceEh>
 8001322:	4605      	mov	r5, r0
 8001324:	2010      	movs	r0, #16
 8001326:	f006 f9a0 	bl	800766a <_Znwj>
 800132a:	4603      	mov	r3, r0
 800132c:	461c      	mov	r4, r3
 800132e:	4629      	mov	r1, r5
 8001330:	4620      	mov	r0, r4
 8001332:	f000 f917 	bl	8001564 <_ZN11DAC_PCM1681C1EP10I2C_Device>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001346:	b004      	add	sp, #16
 8001348:	4770      	bx	lr
	...

0800134c <_ZN9Amplifier3runEv>:

void Amplifier::run() {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	for(;;) {
		osDelay(1);
 8001354:	2001      	movs	r0, #1
 8001356:	f003 fdbd 	bl	8004ed4 <osDelay>
		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_SET );
 800135a:	2201      	movs	r2, #1
 800135c:	2108      	movs	r1, #8
 800135e:	480f      	ldr	r0, [pc, #60]	; (800139c <_ZN9Amplifier3runEv+0x50>)
 8001360:	f001 fdbe 	bl	8002ee0 <HAL_GPIO_WritePin>

		  osDelay( 200 );
 8001364:	20c8      	movs	r0, #200	; 0xc8
 8001366:	f003 fdb5 	bl	8004ed4 <osDelay>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2108      	movs	r1, #8
 800136e:	480b      	ldr	r0, [pc, #44]	; (800139c <_ZN9Amplifier3runEv+0x50>)
 8001370:	f001 fdb6 	bl	8002ee0 <HAL_GPIO_WritePin>

		  osDelay( 200 );
 8001374:	20c8      	movs	r0, #200	; 0xc8
 8001376:	f003 fdad 	bl	8004ed4 <osDelay>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_DOLBY_GPIO_Port, LED_DOLBY_Pin, GPIO_PIN_SET );
 800137a:	2201      	movs	r2, #1
 800137c:	2102      	movs	r1, #2
 800137e:	4808      	ldr	r0, [pc, #32]	; (80013a0 <_ZN9Amplifier3runEv+0x54>)
 8001380:	f001 fdae 	bl	8002ee0 <HAL_GPIO_WritePin>

		  osDelay( 200 );
 8001384:	20c8      	movs	r0, #200	; 0xc8
 8001386:	f003 fda5 	bl	8004ed4 <osDelay>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_DOLBY_GPIO_Port, LED_DOLBY_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2102      	movs	r1, #2
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <_ZN9Amplifier3runEv+0x54>)
 8001390:	f001 fda6 	bl	8002ee0 <HAL_GPIO_WritePin>

		  osDelay( 200 );
 8001394:	20c8      	movs	r0, #200	; 0xc8
 8001396:	f003 fd9d 	bl	8004ed4 <osDelay>
		osDelay(1);
 800139a:	e7db      	b.n	8001354 <_ZN9Amplifier3runEv+0x8>
 800139c:	40011000 	.word	0x40011000
 80013a0:	40010800 	.word	0x40010800

080013a4 <_ZN6DAC_IC9isEnabledEv>:

	// the name for this DAC
	virtual std::string name() = 0;
	virtual void init() = 0;

	virtual bool isEnabled() { return true; }
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	2301      	movs	r3, #1
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <_ZN6DAC_IC6enableEb>:
	virtual void enable( bool state ) {};
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <_ZN6DAC_IC14supportsFormatEh>:
	virtual bool supportsFormat( uint8_t format ) { return false; }
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	70fb      	strb	r3, [r7, #3]
 80013da:	2300      	movs	r3, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <_ZN6DAC_IC14supportsVolumeEv>:
	virtual bool supportsVolume() { return false; }
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	2300      	movs	r3, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <_ZN6DAC_IC12supportsMuteEv>:
	virtual bool supportsMute() { return false; }
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	2300      	movs	r3, #0
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <_ZN6DAC_IC8channelsEv>:
	virtual int channels() { return 0; }
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	2300      	movs	r3, #0
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <_ZN6DAC_IC16setChannelVolumeEii>:

	// volume is 0 to 63, where 0 is lowest and 63 is highest
	virtual void setChannelVolume( int channel, int volume ) {}
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <_ZN6DAC_IC9setVolumeEi>:

	// sets the volume on all channels
	virtual void setVolume( int volume ) {};
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <_ZN6DAC_IC11muteChannelEib>:

	virtual void muteChannel( int channel, bool enable ) {}
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	4613      	mov	r3, r2
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <_ZN6DAC_IC4muteEb>:
	virtual void mute( bool enable ) {}
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <_ZN6DAC_IC9setFormatEh>:

	virtual void setFormat( uint8_t format ) {};
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	70fb      	strb	r3, [r7, #3]
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <_ZN6DAC_ICC1Ev>:
 *      Author: duane
 */

#include "DAC.h"

DAC_IC::DAC_IC() {
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <_ZN6DAC_ICC1Ev+0x1c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	08007b90 	.word	0x08007b90

080014b0 <_ZN6DAC_ICD1Ev>:

DAC_IC::~DAC_IC() {
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <_ZN6DAC_ICD1Ev+0x1c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	08007b90 	.word	0x08007b90

080014d0 <_ZN11DAC_PCM16819isEnabledEv>:
	DAC_PCM1681( I2C_Device *device );
	virtual ~DAC_PCM1681();

	virtual void init();

	virtual bool isEnabled() { return mEnabled; }
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7b5b      	ldrb	r3, [r3, #13]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf14      	ite	ne
 80014e0:	2301      	movne	r3, #1
 80014e2:	2300      	moveq	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <_ZN11DAC_PCM168114supportsVolumeEv>:
	virtual void enable( bool state );

	virtual bool supportsFormat( uint8_t format );
	virtual bool supportsVolume() { return true; }
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	2301      	movs	r3, #1
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <_ZN11DAC_PCM168112supportsMuteEv>:
	virtual bool supportsMute() { return true; }
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	2301      	movs	r3, #1
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <_ZN11DAC_PCM16818channelsEv>:
	virtual int channels() { return 8; }
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	2308      	movs	r3, #8
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <_ZN11DAC_PCM16814nameB5cxx11Ev>:

	virtual std::string name() { return "PCM1681"; }
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	4618      	mov	r0, r3
 800153c:	f006 f8a9 	bl	8007692 <_ZNSaIcEC1Ev>
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	461a      	mov	r2, r3
 8001546:	4906      	ldr	r1, [pc, #24]	; (8001560 <_ZN11DAC_PCM16814nameB5cxx11Ev+0x34>)
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f006 f8ff 	bl	800774c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	4618      	mov	r0, r3
 8001554:	f006 f89e 	bl	8007694 <_ZNSaIcED1Ev>
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	08007b20 	.word	0x08007b20

08001564 <_ZN11DAC_PCM1681C1EP10I2C_Device>:
#define PCM1681_REG_MUTE	7
#define PCM1681_REG_ENABLE	8
#define PCM1681_REG_FORMAT	9
#define PCM1681_REG_DAMS	13

DAC_PCM1681::DAC_PCM1681( I2C_Device *device ) : mDevice( device ), mEnabled( true ) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff8d 	bl	8001490 <_ZN6DAC_ICC1Ev>
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <_ZN11DAC_PCM1681C1EP10I2C_Device+0x34>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	735a      	strb	r2, [r3, #13]
	// TODO Auto-generated constructor stub
	mMuteStatus = 0;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	731a      	strb	r2, [r3, #12]
}
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	08007bd4 	.word	0x08007bd4

0800159c <_ZN11DAC_PCM1681D1Ev>:

DAC_PCM1681::~DAC_PCM1681() {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	4a05      	ldr	r2, [pc, #20]	; (80015bc <_ZN11DAC_PCM1681D1Ev+0x20>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff7f 	bl	80014b0 <_ZN6DAC_ICD1Ev>
	// TODO Auto-generated destructor stub
}
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	08007bd4 	.word	0x08007bd4

080015c0 <_ZN11DAC_PCM1681D0Ev>:
DAC_PCM1681::~DAC_PCM1681() {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
}
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ffe7 	bl	800159c <_ZN11DAC_PCM1681D1Ev>
 80015ce:	2110      	movs	r1, #16
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f006 f848 	bl	8007666 <_ZdlPvj>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_ZN11DAC_PCM16816enableEb>:

void
DAC_PCM1681::enable( bool state ) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
	if ( state ) {
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00a      	beq.n	8001608 <_ZN11DAC_PCM16816enableEb+0x28>
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0 );
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6898      	ldr	r0, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3314      	adds	r3, #20
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2200      	movs	r2, #0
 8001602:	2108      	movs	r1, #8
 8001604:	4798      	blx	r3
 8001606:	e009      	b.n	800161c <_ZN11DAC_PCM16816enableEb+0x3c>
	} else {
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0xff );
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6898      	ldr	r0, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	3314      	adds	r3, #20
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	22ff      	movs	r2, #255	; 0xff
 8001618:	2108      	movs	r1, #8
 800161a:	4798      	blx	r3
	}

	mEnabled = state;
 800161c:	78fa      	ldrb	r2, [r7, #3]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	735a      	strb	r2, [r3, #13]
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_ZN11DAC_PCM168114supportsFormatEh>:

bool
DAC_PCM1681::supportsFormat( uint8_t format ) {
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	70fb      	strb	r3, [r7, #3]
	return ( format == DAC_IC::FORMAT_SONY || format == DAC_IC::FORMAT_I2S );
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <_ZN11DAC_PCM168114supportsFormatEh+0x18>
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <_ZN11DAC_PCM168114supportsFormatEh+0x1c>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <_ZN11DAC_PCM168114supportsFormatEh+0x1e>
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <_ZN11DAC_PCM16819setFormatEh>:

void
DAC_PCM1681::setFormat( uint8_t format ) {
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	73fb      	strb	r3, [r7, #15]
	if ( format == FORMAT_SONY ) {
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <_ZN11DAC_PCM16819setFormatEh+0x1c>
		value = 5;
 8001668:	2305      	movs	r3, #5
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	e004      	b.n	8001678 <_ZN11DAC_PCM16819setFormatEh+0x26>
	} else if ( format == FORMAT_I2S ) {
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <_ZN11DAC_PCM16819setFormatEh+0x26>
		value = 4;
 8001674:	2304      	movs	r3, #4
 8001676:	73fb      	strb	r3, [r7, #15]
	}

	mDevice->writeRegister( PCM1681_REG_FORMAT, value );
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6898      	ldr	r0, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3314      	adds	r3, #20
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	2109      	movs	r1, #9
 800168a:	4798      	blx	r3
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_ZN11DAC_PCM16814initEv>:

void
DAC_PCM1681::init() {
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	// do setup

	// set digital attenuation range of 0-63db in 0.5db increments
	mDevice->writeRegister( PCM1681_REG_DAMS, 0 );
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6898      	ldr	r0, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3314      	adds	r3, #20
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2200      	movs	r2, #0
 80016ac:	210d      	movs	r1, #13
 80016ae:	4798      	blx	r3
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_ZN11DAC_PCM168116setChannelVolumeEii>:

void
DAC_PCM1681::setChannelVolume( int channel, int volume ) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
	uint8_t reg = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	75fb      	strb	r3, [r7, #23]
	switch( channel ) {
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	d820      	bhi.n	8001710 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
 80016ce:	a201      	add	r2, pc, #4	; (adr r2, 80016d4 <_ZN11DAC_PCM168116setChannelVolumeEii+0x1c>)
 80016d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d4:	080016ed 	.word	0x080016ed
 80016d8:	080016f3 	.word	0x080016f3
 80016dc:	080016f9 	.word	0x080016f9
 80016e0:	080016ff 	.word	0x080016ff
 80016e4:	08001705 	.word	0x08001705
 80016e8:	0800170b 	.word	0x0800170b
		case FRONT_LEFT:
			reg = 1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	75fb      	strb	r3, [r7, #23]
			break;
 80016f0:	e00e      	b.n	8001710 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case FRONT_RIGHT:
			reg = 2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	75fb      	strb	r3, [r7, #23]
			break;
 80016f6:	e00b      	b.n	8001710 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_LEFT:
			reg = 3;
 80016f8:	2303      	movs	r3, #3
 80016fa:	75fb      	strb	r3, [r7, #23]
			break;
 80016fc:	e008      	b.n	8001710 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_RIGHT:
			reg = 4;
 80016fe:	2304      	movs	r3, #4
 8001700:	75fb      	strb	r3, [r7, #23]
			break;
 8001702:	e005      	b.n	8001710 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case CENTER:
			reg = 5;
 8001704:	2305      	movs	r3, #5
 8001706:	75fb      	strb	r3, [r7, #23]
			break;
 8001708:	e002      	b.n	8001710 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case SUBWOOFER:
			reg = 6;
 800170a:	2306      	movs	r3, #6
 800170c:	75fb      	strb	r3, [r7, #23]
			break;
 800170e:	bf00      	nop
	}

	// Clamp the volume to the upper limit
	if ( volume > 127 ) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b7f      	cmp	r3, #127	; 0x7f
 8001714:	dd01      	ble.n	800171a <_ZN11DAC_PCM168116setChannelVolumeEii+0x62>
		volume = 127;
 8001716:	237f      	movs	r3, #127	; 0x7f
 8001718:	607b      	str	r3, [r7, #4]
	}

	uint8_t volumeLevel = volume + 128;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	3b80      	subs	r3, #128	; 0x80
 8001720:	75bb      	strb	r3, [r7, #22]
	mDevice->writeRegister( reg, volumeLevel );
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6898      	ldr	r0, [r3, #8]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3314      	adds	r3, #20
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	7dba      	ldrb	r2, [r7, #22]
 8001732:	7df9      	ldrb	r1, [r7, #23]
 8001734:	4798      	blx	r3
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop

08001740 <_ZN11DAC_PCM16819setVolumeEi>:

void
DAC_PCM1681::setVolume( int volume ) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]

}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <_ZN11DAC_PCM168111muteChannelEib>:

void
DAC_PCM1681::muteChannel( int channel, bool enable ) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	4613      	mov	r3, r2
 8001760:	71fb      	strb	r3, [r7, #7]
	uint8_t mask =  ( 1 << ( channel ) );
 8001762:	2201      	movs	r2, #1
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	75fb      	strb	r3, [r7, #23]
	if ( enable ) {
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <_ZN11DAC_PCM168111muteChannelEib+0x2e>
		// enable the bit representing this channel
		mMuteStatus = mMuteStatus & mask;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	7b1a      	ldrb	r2, [r3, #12]
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	4013      	ands	r3, r2
 800177a:	b2da      	uxtb	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	731a      	strb	r2, [r3, #12]
 8001780:	e00b      	b.n	800179a <_ZN11DAC_PCM168111muteChannelEib+0x46>
	} else {
		// disable the bit representing the channel
		mMuteStatus = mMuteStatus & ~mask;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	7b1b      	ldrb	r3, [r3, #12]
 8001786:	b25a      	sxtb	r2, r3
 8001788:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800178c:	43db      	mvns	r3, r3
 800178e:	b25b      	sxtb	r3, r3
 8001790:	4013      	ands	r3, r2
 8001792:	b25b      	sxtb	r3, r3
 8001794:	b2da      	uxtb	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	731a      	strb	r2, [r3, #12]
	}

	mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6898      	ldr	r0, [r3, #8]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3314      	adds	r3, #20
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	7b12      	ldrb	r2, [r2, #12]
 80017ac:	2107      	movs	r1, #7
 80017ae:	4798      	blx	r3
}
 80017b0:	bf00      	nop
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <_ZN11DAC_PCM16814muteEb>:

void
DAC_PCM1681::mute( bool enable ) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	70fb      	strb	r3, [r7, #3]
	 if ( enable ) {
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <_ZN11DAC_PCM16814muteEb+0x1a>
		 mMuteStatus = 0xff;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	22ff      	movs	r2, #255	; 0xff
 80017ce:	731a      	strb	r2, [r3, #12]
 80017d0:	e002      	b.n	80017d8 <_ZN11DAC_PCM16814muteEb+0x20>
	 } else {
		 mMuteStatus = 0;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	731a      	strb	r2, [r3, #12]
	 }

	 mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6898      	ldr	r0, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	3314      	adds	r3, #20
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	7b12      	ldrb	r2, [r2, #12]
 80017ea:	2107      	movs	r1, #7
 80017ec:	4798      	blx	r3
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <_ZN7DisplayC1Ev>:

#include "Display.h"
#include "main.h"
#include "cmsis_os.h"

Display::Display() : mShouldUpdate( true ) {
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	4a05      	ldr	r2, [pc, #20]	; (8001818 <_ZN7DisplayC1Ev+0x20>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	711a      	strb	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	08007c18 	.word	0x08007c18

0800181c <_ZN7DisplayD1Ev>:

Display::~Display() {
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <_ZN7DisplayD1Ev+0x1c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	08007c18 	.word	0x08007c18

0800183c <_ZN7DisplayD0Ev>:
Display::~Display() {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
}
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ffe9 	bl	800181c <_ZN7DisplayD1Ev>
 800184a:	2108      	movs	r1, #8
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f005 ff0a 	bl	8007666 <_ZdlPvj>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZN7Display3runEv>:
Display::update() {
	mShouldUpdate = true;
}

void
Display::run() {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	for(;;) {
		// Check to see if we need to update the display
		if ( mShouldUpdate ) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	791b      	ldrb	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <_ZN7Display3runEv+0x16>

			// Clear the update for the next time
			mShouldUpdate = false;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	711a      	strb	r2, [r3, #4]
		}

		osDelay( 5 );
 8001872:	2005      	movs	r0, #5
 8001874:	f003 fb2e 	bl	8004ed4 <osDelay>
		if ( mShouldUpdate ) {
 8001878:	e7f4      	b.n	8001864 <_ZN7Display3runEv+0x8>
	...

0800187c <_ZN3I2CC1ERKS_>:
class I2C {
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <_ZN3I2CC1ERKS_+0x3c>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	1d10      	adds	r0, r2, #4
 8001892:	3304      	adds	r3, #4
 8001894:	2254      	movs	r2, #84	; 0x54
 8001896:	4619      	mov	r1, r3
 8001898:	f005 ffe2 	bl	8007860 <memcpy>
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f102 0458 	add.w	r4, r2, #88	; 0x58
 80018a4:	3358      	adds	r3, #88	; 0x58
 80018a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd90      	pop	{r4, r7, pc}
 80018b6:	bf00      	nop
 80018b8:	08007c2c 	.word	0x08007c2c

080018bc <_ZN10I2C_DeviceC1E3I2Ch>:
	I2C mBus;
	I2C_ADDR mAddr;
public:
	I2C_Device( I2C bus ) : mBus( bus ), mAddr( 0 ) {}
	I2C_Device( I2C_ADDR addr );
	I2C_Device( I2C bus, I2C_ADDR addr ) : mBus( bus), mAddr( addr ) {}
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	4613      	mov	r3, r2
 80018c8:	71fb      	strb	r3, [r7, #7]
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <_ZN10I2C_DeviceC1E3I2Ch+0x34>)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3304      	adds	r3, #4
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ffd0 	bl	800187c <_ZN3I2CC1ERKS_>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	79fa      	ldrb	r2, [r7, #7]
 80018e0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	08007c3c 	.word	0x08007c3c

080018f4 <_ZN3I2CC1E17I2C_HandleTypeDef>:

#include "I2C.h"
#include "I2CDevice.h"
#include <memory>

I2C::I2C( I2C_HandleTypeDef bus ) : mI2C( bus ) {
 80018f4:	b084      	sub	sp, #16
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	f107 0014 	add.w	r0, r7, #20
 8001902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <_ZN3I2CC1E17I2C_HandleTypeDef+0x38>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3304      	adds	r3, #4
 8001910:	f107 0114 	add.w	r1, r7, #20
 8001914:	2254      	movs	r2, #84	; 0x54
 8001916:	4618      	mov	r0, r3
 8001918:	f005 ffa2 	bl	8007860 <memcpy>
	// TODO Auto-generated constructor stub

}
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001928:	b004      	add	sp, #16
 800192a:	4770      	bx	lr
 800192c:	08007c2c 	.word	0x08007c2c

08001930 <_ZN3I2CD1Ev>:

I2C::~I2C() {
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <_ZN3I2CD1Ev+0x1c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	08007c2c 	.word	0x08007c2c

08001950 <_ZN3I2CD0Ev>:
I2C::~I2C() {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
}
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ffe9 	bl	8001930 <_ZN3I2CD1Ev>
 800195e:	2168      	movs	r1, #104	; 0x68
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f005 fe80 	bl	8007666 <_ZdlPvj>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZN3I2C8readByteEh>:

uint8_t
I2C::readByte( I2C_ADDR addr ) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af02      	add	r7, sp, #8
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	70fb      	strb	r3, [r7, #3]
	int ret = HAL_I2C_Master_Receive( &mI2C, addr, mBuffer, 1, HAL_MAX_DELAY );
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	1d18      	adds	r0, r3, #4
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	b299      	uxth	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800198a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2301      	movs	r3, #1
 8001992:	f001 fcff 	bl	8003394 <HAL_I2C_Master_Receive>
 8001996:	4603      	mov	r3, r0
 8001998:	60fb      	str	r3, [r7, #12]
	if ( ret == HAL_OK ) {
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <_ZN3I2C8readByteEh+0x38>
		return mBuffer[ 0 ];
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80019a6:	e000      	b.n	80019aa <_ZN3I2C8readByteEh+0x3a>
	} else {
		return 0;
 80019a8:	2300      	movs	r3, #0
	}
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_ZN3I2C9writeByteEhh>:

bool
I2C::writeByte( I2C_ADDR addr, uint8_t data ) {
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af02      	add	r7, sp, #8
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	460b      	mov	r3, r1
 80019bc:	70fb      	strb	r3, [r7, #3]
 80019be:	4613      	mov	r3, r2
 80019c0:	70bb      	strb	r3, [r7, #2]
	int ret = HAL_I2C_Master_Transmit( &mI2C, addr, &data, 1, HAL_MAX_DELAY );
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	1d18      	adds	r0, r3, #4
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	b299      	uxth	r1, r3
 80019ca:	1cba      	adds	r2, r7, #2
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2301      	movs	r3, #1
 80019d4:	f001 fbe0 	bl	8003198 <HAL_I2C_Master_Transmit>
 80019d8:	4603      	mov	r3, r0
 80019da:	60fb      	str	r3, [r7, #12]
	return ( ret == HAL_OK );
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	bf0c      	ite	eq
 80019e2:	2301      	moveq	r3, #1
 80019e4:	2300      	movne	r3, #0
 80019e6:	b2db      	uxtb	r3, r3
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_ZN3I2C9writeDataEhPhh>:

bool
I2C::writeData( I2C_ADDR addr, uint8_t *data, uint8_t size ) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af02      	add	r7, sp, #8
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	461a      	mov	r2, r3
 80019fc:	460b      	mov	r3, r1
 80019fe:	72fb      	strb	r3, [r7, #11]
 8001a00:	4613      	mov	r3, r2
 8001a02:	72bb      	strb	r3, [r7, #10]
	int ret = HAL_I2C_Master_Transmit( &mI2C, addr, data, size, HAL_MAX_DELAY );
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1d18      	adds	r0, r3, #4
 8001a08:	7afb      	ldrb	r3, [r7, #11]
 8001a0a:	b299      	uxth	r1, r3
 8001a0c:	7abb      	ldrb	r3, [r7, #10]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a14:	9200      	str	r2, [sp, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	f001 fbbe 	bl	8003198 <HAL_I2C_Master_Transmit>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	617b      	str	r3, [r7, #20]
	return ( ret == HAL_OK );
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf0c      	ite	eq
 8001a26:	2301      	moveq	r3, #1
 8001a28:	2300      	movne	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_ZN3I2C10makeDeviceEh>:

I2C_Device *
I2C::makeDevice( I2C_ADDR addr ) {
 8001a34:	b5b0      	push	{r4, r5, r7, lr}
 8001a36:	b0ae      	sub	sp, #184	; 0xb8
 8001a38:	af12      	add	r7, sp, #72	; 0x48
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	70fb      	strb	r3, [r7, #3]
	return new I2C_Device( mI2C, addr );
 8001a40:	687c      	ldr	r4, [r7, #4]
 8001a42:	f107 0508 	add.w	r5, r7, #8
 8001a46:	4668      	mov	r0, sp
 8001a48:	f104 0310 	add.w	r3, r4, #16
 8001a4c:	2248      	movs	r2, #72	; 0x48
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f005 ff06 	bl	8007860 <memcpy>
 8001a54:	1d23      	adds	r3, r4, #4
 8001a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a58:	4628      	mov	r0, r5
 8001a5a:	f7ff ff4b 	bl	80018f4 <_ZN3I2CC1E17I2C_HandleTypeDef>
 8001a5e:	f107 0408 	add.w	r4, r7, #8
 8001a62:	2070      	movs	r0, #112	; 0x70
 8001a64:	f005 fe01 	bl	800766a <_Znwj>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461d      	mov	r5, r3
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4621      	mov	r1, r4
 8001a72:	4628      	mov	r0, r5
 8001a74:	f7ff ff22 	bl	80018bc <_ZN10I2C_DeviceC1E3I2Ch>
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff57 	bl	8001930 <_ZN3I2CD1Ev>
 8001a82:	462b      	mov	r3, r5
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3770      	adds	r7, #112	; 0x70
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bdb0      	pop	{r4, r5, r7, pc}

08001a8c <_ZN10I2C_Device7setAddrEh>:

	virtual ~I2C_Device();

	virtual void setAddr( I2C_ADDR addr ) { mAddr = addr; }
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
	...

08001aac <_ZN10I2C_DeviceD1Ev>:
I2C_Device::I2C_Device( I2C_ADDR addr ) : mAddr( addr ) {
	// TODO Auto-generated constructor stub

}

I2C_Device::~I2C_Device() {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <_ZN10I2C_DeviceD1Ev+0x24>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff36 	bl	8001930 <_ZN3I2CD1Ev>
	// TODO Auto-generated destructor stub
}
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	08007c3c 	.word	0x08007c3c

08001ad4 <_ZN10I2C_DeviceD0Ev>:
I2C_Device::~I2C_Device() {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
}
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ffe5 	bl	8001aac <_ZN10I2C_DeviceD1Ev>
 8001ae2:	2170      	movs	r1, #112	; 0x70
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f005 fdbe 	bl	8007666 <_ZdlPvj>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_ZN10I2C_Device9writeByteEh>:

bool
I2C_Device::writeByte( uint8_t data ) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
	return mBus.writeByte( mAddr, data );
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	1d18      	adds	r0, r3, #4
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7ff ff50 	bl	80019b2 <_ZN3I2C9writeByteEhh>
 8001b12:	4603      	mov	r3, r0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_ZN10I2C_Device13writeRegisterEhh>:

bool
I2C_Device::writeRegister( uint8_t reg, uint8_t value ) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	70fb      	strb	r3, [r7, #3]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = reg;
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8001b30:	78bb      	ldrb	r3, [r7, #2]
 8001b32:	737b      	strb	r3, [r7, #13]

	return mBus.writeData( mAddr, buf, 2 );
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	1d18      	adds	r0, r3, #4
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8001b3e:	f107 020c 	add.w	r2, r7, #12
 8001b42:	2302      	movs	r3, #2
 8001b44:	f7ff ff54 	bl	80019f0 <_ZN3I2C9writeDataEhPhh>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_ZN10I2C_Device8readByteEv>:


uint8_t
I2C_Device::readByte() {
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
	return mBus.readByte( mAddr );
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	1d1a      	adds	r2, r3, #4
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001b64:	4619      	mov	r1, r3
 8001b66:	4610      	mov	r0, r2
 8001b68:	f7ff ff02 	bl	8001970 <_ZN3I2C8readByteEh>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_ZN3LED6enableEv>:

	virtual void enable() { setState( true ); }
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	3310      	adds	r3, #16
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2101      	movs	r1, #1
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4798      	blx	r3
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_ZN3LED7disableEv>:
	virtual void disable() { setState( false ); }
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3310      	adds	r3, #16
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	4798      	blx	r3
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <_ZN3LEDC1Ev>:
 */

#include "LED.h"
#include "main.h"

LED::LED() : mPort( 0 ), mPin( 0 ), mCurrentState( 0 ) {
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <_ZN3LEDC1Ev+0x2c>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	811a      	strh	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub

}
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	08007c5c 	.word	0x08007c5c

08001be4 <_ZN3LEDD1Ev>:

LED::LED( GPIO_TypeDef* port, uint16_t pin ) : mPort( port ), mPin( pin ), mCurrentState( 0 ) {

}

LED::~LED() {
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <_ZN3LEDD1Ev+0x1c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	08007c5c 	.word	0x08007c5c

08001c04 <_ZN3LEDD0Ev>:
LED::~LED() {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
}
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ffe9 	bl	8001be4 <_ZN3LEDD1Ev>
 8001c12:	2110      	movs	r1, #16
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f005 fd26 	bl	8007666 <_ZdlPvj>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_ZN3LED8setStateEb>:

void
LED::setState( bool enable ) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d008      	beq.n	8001c48 <_ZN3LED8setStateEb+0x24>
		HAL_GPIO_WritePin( mPort, mPin, GPIO_PIN_SET );
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6858      	ldr	r0, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	891b      	ldrh	r3, [r3, #8]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4619      	mov	r1, r3
 8001c42:	f001 f94d 	bl	8002ee0 <HAL_GPIO_WritePin>
 8001c46:	e007      	b.n	8001c58 <_ZN3LED8setStateEb+0x34>
	} else {
		HAL_GPIO_WritePin( mPort, mPin, GPIO_PIN_RESET );
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6858      	ldr	r0, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	891b      	ldrh	r3, [r3, #8]
 8001c50:	2200      	movs	r2, #0
 8001c52:	4619      	mov	r1, r3
 8001c54:	f001 f944 	bl	8002ee0 <HAL_GPIO_WritePin>
	}

	mCurrentState = enable;
 8001c58:	78fa      	ldrb	r2, [r7, #3]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60da      	str	r2, [r3, #12]
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <_ZN2UIC1Ev>:

#include "UI.h"
#include "main.h"
#include "cmsis_os.h"

UI::UI() {
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <_ZN2UIC1Ev+0x1c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	08007c78 	.word	0x08007c78

08001c88 <_ZN2UID1Ev>:

UI::~UI() {
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <_ZN2UID1Ev+0x1c>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	08007c78 	.word	0x08007c78

08001ca8 <_ZN2UID0Ev>:
UI::~UI() {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
}
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ffe9 	bl	8001c88 <_ZN2UID1Ev>
 8001cb6:	2104      	movs	r1, #4
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f005 fcd4 	bl	8007666 <_ZdlPvj>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_ZN2UI3runEv>:

void UI::run() {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	for(;;) {
		osDelay(1);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f003 f8ff 	bl	8004ed4 <osDelay>
 8001cd6:	e7fb      	b.n	8001cd0 <_ZN2UI3runEv+0x8>

08001cd8 <_ZN9Amplifier5getUIEv>:
	DAC_IC *mDAC;
public:
	Amplifier();
	virtual ~Amplifier();

	UI &getUI() { return mUI; }
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <_ZN9Amplifier10getDisplayEv>:
	Display &getDisplay() { return mDisplay; }
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3308      	adds	r3, #8
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b093      	sub	sp, #76	; 0x4c
 8001d08:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d0a:	f000 fe0f 	bl	800292c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d0e:	f000 f85d 	bl	8001dcc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d12:	f000 fa41 	bl	8002198 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8001d16:	f000 f8dd 	bl	8001ed4 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8001d1a:	f000 f917 	bl	8001f4c <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 8001d1e:	f000 f951 	bl	8001fc4 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8001d22:	f000 f9ad 	bl	8002080 <_ZL12MX_TIM4_Initv>
  MX_USART3_UART_Init();
 8001d26:	f000 fa09 	bl	800213c <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 8001d2a:	f000 f89f 	bl	8001e6c <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  // The main amplifier class

  amplifier.initialize( hi2c1 );
 8001d2e:	4c19      	ldr	r4, [pc, #100]	; (8001d94 <main+0x90>)
 8001d30:	4668      	mov	r0, sp
 8001d32:	f104 030c 	add.w	r3, r4, #12
 8001d36:	2248      	movs	r2, #72	; 0x48
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f005 fd91 	bl	8007860 <memcpy>
 8001d3e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001d42:	4815      	ldr	r0, [pc, #84]	; (8001d98 <main+0x94>)
 8001d44:	f7ff face 	bl	80012e4 <_ZN9Amplifier10initializeE17I2C_HandleTypeDef>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d48:	f002 ffb4 	bl	8004cb4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d4c:	4a13      	ldr	r2, [pc, #76]	; (8001d9c <main+0x98>)
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4813      	ldr	r0, [pc, #76]	; (8001da0 <main+0x9c>)
 8001d52:	f003 f815 	bl	8004d80 <osThreadNew>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <main+0xa0>)
 8001d5a:	6013      	str	r3, [r2, #0]

  /* creation of display */
  displayHandle = osThreadNew(startDisplay, NULL, &display_attributes);
 8001d5c:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <main+0xa4>)
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4812      	ldr	r0, [pc, #72]	; (8001dac <main+0xa8>)
 8001d62:	f003 f80d 	bl	8004d80 <osThreadNew>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <main+0xac>)
 8001d6a:	6013      	str	r3, [r2, #0]

  /* creation of audio */
  audioHandle = osThreadNew(startAudio, NULL, &audio_attributes);
 8001d6c:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <main+0xb0>)
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4811      	ldr	r0, [pc, #68]	; (8001db8 <main+0xb4>)
 8001d72:	f003 f805 	bl	8004d80 <osThreadNew>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4a10      	ldr	r2, [pc, #64]	; (8001dbc <main+0xb8>)
 8001d7a:	6013      	str	r3, [r2, #0]

  /* creation of UI */
  UIHandle = osThreadNew(startUI, NULL, &UI_attributes);
 8001d7c:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <main+0xbc>)
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4810      	ldr	r0, [pc, #64]	; (8001dc4 <main+0xc0>)
 8001d82:	f002 fffd 	bl	8004d80 <osThreadNew>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <main+0xc4>)
 8001d8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001d8c:	f002 ffc4 	bl	8004d18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <main+0x8c>
 8001d92:	bf00      	nop
 8001d94:	20000098 	.word	0x20000098
 8001d98:	20000280 	.word	0x20000280
 8001d9c:	08007c84 	.word	0x08007c84
 8001da0:	08002331 	.word	0x08002331
 8001da4:	20000270 	.word	0x20000270
 8001da8:	08007ca8 	.word	0x08007ca8
 8001dac:	0800234d 	.word	0x0800234d
 8001db0:	20000274 	.word	0x20000274
 8001db4:	08007ccc 	.word	0x08007ccc
 8001db8:	08002375 	.word	0x08002375
 8001dbc:	20000278 	.word	0x20000278
 8001dc0:	08007cf0 	.word	0x08007cf0
 8001dc4:	08002385 	.word	0x08002385
 8001dc8:	2000027c 	.word	0x2000027c

08001dcc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b090      	sub	sp, #64	; 0x40
 8001dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd2:	f107 0318 	add.w	r3, r7, #24
 8001dd6:	2228      	movs	r2, #40	; 0x28
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f005 fd4e 	bl	800787c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dee:	2301      	movs	r3, #1
 8001df0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e00:	2302      	movs	r3, #2
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001e0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e10:	f107 0318 	add.w	r3, r7, #24
 8001e14:	4618      	mov	r0, r3
 8001e16:	f002 f849 	bl	8003eac <HAL_RCC_OscConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf14      	ite	ne
 8001e20:	2301      	movne	r3, #1
 8001e22:	2300      	moveq	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001e2a:	f000 fabf 	bl	80023ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e2e:	230f      	movs	r3, #15
 8001e30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e32:	2302      	movs	r3, #2
 8001e34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	2101      	movs	r1, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f002 fab1 	bl	80043b0 <HAL_RCC_ClockConfig>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf14      	ite	ne
 8001e54:	2301      	movne	r3, #1
 8001e56:	2300      	moveq	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001e5e:	f000 faa5 	bl	80023ac <Error_Handler>
  }
}
 8001e62:	bf00      	nop
 8001e64:	3740      	adds	r7, #64	; 0x40
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e72:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <_ZL12MX_I2C1_Initv+0x60>)
 8001e74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e78:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <_ZL12MX_I2C1_Initv+0x64>)
 8001e7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e90:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ea8:	4807      	ldr	r0, [pc, #28]	; (8001ec8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001eaa:	f001 f831 	bl	8002f10 <HAL_I2C_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001ebe:	f000 fa75 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000098 	.word	0x20000098
 8001ecc:	40005400 	.word	0x40005400
 8001ed0:	000186a0 	.word	0x000186a0

08001ed4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <_ZL12MX_SPI1_Initv+0x70>)
 8001eda:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <_ZL12MX_SPI1_Initv+0x74>)
 8001edc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <_ZL12MX_SPI1_Initv+0x70>)
 8001ee0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ee4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <_ZL12MX_SPI1_Initv+0x70>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <_ZL12MX_SPI1_Initv+0x70>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <_ZL12MX_SPI1_Initv+0x70>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <_ZL12MX_SPI1_Initv+0x70>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <_ZL12MX_SPI1_Initv+0x70>)
 8001f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <_ZL12MX_SPI1_Initv+0x70>)
 8001f08:	2208      	movs	r2, #8
 8001f0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <_ZL12MX_SPI1_Initv+0x70>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <_ZL12MX_SPI1_Initv+0x70>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <_ZL12MX_SPI1_Initv+0x70>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <_ZL12MX_SPI1_Initv+0x70>)
 8001f20:	220a      	movs	r2, #10
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f24:	4807      	ldr	r0, [pc, #28]	; (8001f44 <_ZL12MX_SPI1_Initv+0x70>)
 8001f26:	f002 fbdd 	bl	80046e4 <HAL_SPI_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf14      	ite	ne
 8001f30:	2301      	movne	r3, #1
 8001f32:	2300      	moveq	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001f3a:	f000 fa37 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200000ec 	.word	0x200000ec
 8001f48:	40013000 	.word	0x40013000

08001f4c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <_ZL12MX_SPI2_Initv+0x70>)
 8001f52:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <_ZL12MX_SPI2_Initv+0x74>)
 8001f54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <_ZL12MX_SPI2_Initv+0x70>)
 8001f58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <_ZL12MX_SPI2_Initv+0x70>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <_ZL12MX_SPI2_Initv+0x70>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <_ZL12MX_SPI2_Initv+0x70>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <_ZL12MX_SPI2_Initv+0x70>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_ZL12MX_SPI2_Initv+0x70>)
 8001f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <_ZL12MX_SPI2_Initv+0x70>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <_ZL12MX_SPI2_Initv+0x70>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <_ZL12MX_SPI2_Initv+0x70>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <_ZL12MX_SPI2_Initv+0x70>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <_ZL12MX_SPI2_Initv+0x70>)
 8001f98:	220a      	movs	r2, #10
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f9c:	4807      	ldr	r0, [pc, #28]	; (8001fbc <_ZL12MX_SPI2_Initv+0x70>)
 8001f9e:	f002 fba1 	bl	80046e4 <HAL_SPI_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8001fb2:	f000 f9fb 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000144 	.word	0x20000144
 8001fc0:	40003800 	.word	0x40003800

08001fc4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	; 0x30
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	2224      	movs	r2, #36	; 0x24
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f005 fc52 	bl	800787c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <_ZL12MX_TIM3_Initv+0xb4>)
 8001fe2:	4a26      	ldr	r2, [pc, #152]	; (800207c <_ZL12MX_TIM3_Initv+0xb8>)
 8001fe4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fe6:	4b24      	ldr	r3, [pc, #144]	; (8002078 <_ZL12MX_TIM3_Initv+0xb4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <_ZL12MX_TIM3_Initv+0xb4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ff2:	4b21      	ldr	r3, [pc, #132]	; (8002078 <_ZL12MX_TIM3_Initv+0xb4>)
 8001ff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <_ZL12MX_TIM3_Initv+0xb4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002000:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <_ZL12MX_TIM3_Initv+0xb4>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002006:	2301      	movs	r3, #1
 8002008:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800200e:	2301      	movs	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800201e:	2301      	movs	r3, #1
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	4619      	mov	r1, r3
 8002030:	4811      	ldr	r0, [pc, #68]	; (8002078 <_ZL12MX_TIM3_Initv+0xb4>)
 8002032:	f002 fbdb 	bl	80047ec <HAL_TIM_Encoder_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8002046:	f000 f9b1 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4808      	ldr	r0, [pc, #32]	; (8002078 <_ZL12MX_TIM3_Initv+0xb4>)
 8002058:	f002 fce4 	bl	8004a24 <HAL_TIMEx_MasterConfigSynchronization>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	bf14      	ite	ne
 8002062:	2301      	movne	r3, #1
 8002064:	2300      	moveq	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 800206c:	f000 f99e 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	3730      	adds	r7, #48	; 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2000019c 	.word	0x2000019c
 800207c:	40000400 	.word	0x40000400

08002080 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	; 0x30
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	2224      	movs	r2, #36	; 0x24
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f005 fbf4 	bl	800787c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <_ZL12MX_TIM4_Initv+0xb4>)
 800209e:	4a26      	ldr	r2, [pc, #152]	; (8002138 <_ZL12MX_TIM4_Initv+0xb8>)
 80020a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020a2:	4b24      	ldr	r3, [pc, #144]	; (8002134 <_ZL12MX_TIM4_Initv+0xb4>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <_ZL12MX_TIM4_Initv+0xb4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <_ZL12MX_TIM4_Initv+0xb4>)
 80020b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b6:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <_ZL12MX_TIM4_Initv+0xb4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <_ZL12MX_TIM4_Initv+0xb4>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020c2:	2301      	movs	r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020ca:	2301      	movs	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020da:	2301      	movs	r3, #1
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020de:	2300      	movs	r3, #0
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	4619      	mov	r1, r3
 80020ec:	4811      	ldr	r0, [pc, #68]	; (8002134 <_ZL12MX_TIM4_Initv+0xb4>)
 80020ee:	f002 fb7d 	bl	80047ec <HAL_TIM_Encoder_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8002102:	f000 f953 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	4619      	mov	r1, r3
 8002112:	4808      	ldr	r0, [pc, #32]	; (8002134 <_ZL12MX_TIM4_Initv+0xb4>)
 8002114:	f002 fc86 	bl	8004a24 <HAL_TIMEx_MasterConfigSynchronization>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	bf14      	ite	ne
 800211e:	2301      	movne	r3, #1
 8002120:	2300      	moveq	r3, #0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8002128:	f000 f940 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	3730      	adds	r7, #48	; 0x30
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	200001e4 	.word	0x200001e4
 8002138:	40000800 	.word	0x40000800

0800213c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002142:	4a14      	ldr	r2, [pc, #80]	; (8002194 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002144:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800214c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <_ZL19MX_USART3_UART_Initv+0x54>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002162:	220c      	movs	r2, #12
 8002164:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <_ZL19MX_USART3_UART_Initv+0x54>)
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002172:	4807      	ldr	r0, [pc, #28]	; (8002190 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002174:	f002 fcc2 	bl	8004afc <HAL_UART_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf14      	ite	ne
 800217e:	2301      	movne	r3, #1
 8002180:	2300      	moveq	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002188:	f000 f910 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	2000022c 	.word	0x2000022c
 8002194:	40004800 	.word	0x40004800

08002198 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219e:	f107 0318 	add.w	r3, r7, #24
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ac:	4b5a      	ldr	r3, [pc, #360]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a59      	ldr	r2, [pc, #356]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b57      	ldr	r3, [pc, #348]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	4b54      	ldr	r3, [pc, #336]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a53      	ldr	r2, [pc, #332]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b51      	ldr	r3, [pc, #324]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021dc:	4b4e      	ldr	r3, [pc, #312]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	4a4d      	ldr	r2, [pc, #308]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e6:	6193      	str	r3, [r2, #24]
 80021e8:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f4:	4b48      	ldr	r3, [pc, #288]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4a47      	ldr	r2, [pc, #284]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	4b45      	ldr	r3, [pc, #276]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800220c:	4b42      	ldr	r3, [pc, #264]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a41      	ldr	r2, [pc, #260]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 8002212:	f043 0320 	orr.w	r3, r3, #32
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b3f      	ldr	r3, [pc, #252]	; (8002318 <_ZL12MX_GPIO_Initv+0x180>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	2108      	movs	r1, #8
 8002228:	483c      	ldr	r0, [pc, #240]	; (800231c <_ZL12MX_GPIO_Initv+0x184>)
 800222a:	f000 fe59 	bl	8002ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 800222e:	2200      	movs	r2, #0
 8002230:	211f      	movs	r1, #31
 8002232:	483b      	ldr	r0, [pc, #236]	; (8002320 <_ZL12MX_GPIO_Initv+0x188>)
 8002234:	f000 fe54 	bl	8002ee0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 8002238:	2200      	movs	r2, #0
 800223a:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 800223e:	4839      	ldr	r0, [pc, #228]	; (8002324 <_ZL12MX_GPIO_Initv+0x18c>)
 8002240:	f000 fe4e 	bl	8002ee0 <HAL_GPIO_WritePin>
                          |LED_POWER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_5CH_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800224a:	4837      	ldr	r0, [pc, #220]	; (8002328 <_ZL12MX_GPIO_Initv+0x190>)
 800224c:	f000 fe48 	bl	8002ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_MUTE_Pin */
  GPIO_InitStruct.Pin = LED_MUTE_Pin;
 8002250:	2308      	movs	r3, #8
 8002252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2302      	movs	r3, #2
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_MUTE_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 0318 	add.w	r3, r7, #24
 8002264:	4619      	mov	r1, r3
 8002266:	482d      	ldr	r0, [pc, #180]	; (800231c <_ZL12MX_GPIO_Initv+0x184>)
 8002268:	f000 fca6 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PCM_Pin LED_DOLBY_Pin PA2 LED_MUTEA3_Pin
                           PA4 */
  GPIO_InitStruct.Pin = LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 800226c:	231f      	movs	r3, #31
 800226e:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002270:	2301      	movs	r3, #1
 8002272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2302      	movs	r3, #2
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 0318 	add.w	r3, r7, #24
 8002280:	4619      	mov	r1, r3
 8002282:	4827      	ldr	r0, [pc, #156]	; (8002320 <_ZL12MX_GPIO_Initv+0x188>)
 8002284:	f000 fc98 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SETTING_BATTERY_Pin */
  GPIO_InitStruct.Pin = SETTING_BATTERY_Pin;
 8002288:	2310      	movs	r3, #16
 800228a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800228c:	2300      	movs	r3, #0
 800228e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SETTING_BATTERY_GPIO_Port, &GPIO_InitStruct);
 8002294:	f107 0318 	add.w	r3, r7, #24
 8002298:	4619      	mov	r1, r3
 800229a:	4820      	ldr	r0, [pc, #128]	; (800231c <_ZL12MX_GPIO_Initv+0x184>)
 800229c:	f000 fc8c 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_1_Pin LED_INPUT_2_Pin LED_INPUT_3_Pin LED_INPUT_4_Pin
                           LED_POWER_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 80022a0:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 80022a4:	61bb      	str	r3, [r7, #24]
                          |LED_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2302      	movs	r3, #2
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022b2:	f107 0318 	add.w	r3, r7, #24
 80022b6:	4619      	mov	r1, r3
 80022b8:	481a      	ldr	r0, [pc, #104]	; (8002324 <_ZL12MX_GPIO_Initv+0x18c>)
 80022ba:	f000 fc7d 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_POWER_Pin */
  GPIO_InitStruct.Pin = BUTTON_POWER_Pin;
 80022be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_POWER_GPIO_Port, &GPIO_InitStruct);
 80022cc:	f107 0318 	add.w	r3, r7, #24
 80022d0:	4619      	mov	r1, r3
 80022d2:	4814      	ldr	r0, [pc, #80]	; (8002324 <_ZL12MX_GPIO_Initv+0x18c>)
 80022d4:	f000 fc70 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_5CH_Pin LED_RUN_Pin */
  GPIO_InitStruct.Pin = LED_5CH_Pin|LED_RUN_Pin;
 80022d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022de:	2301      	movs	r3, #1
 80022e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2302      	movs	r3, #2
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ea:	f107 0318 	add.w	r3, r7, #24
 80022ee:	4619      	mov	r1, r3
 80022f0:	480d      	ldr	r0, [pc, #52]	; (8002328 <_ZL12MX_GPIO_Initv+0x190>)
 80022f2:	f000 fc61 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 80022f6:	2308      	movs	r3, #8
 80022f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8002302:	f107 0318 	add.w	r3, r7, #24
 8002306:	4619      	mov	r1, r3
 8002308:	4808      	ldr	r0, [pc, #32]	; (800232c <_ZL12MX_GPIO_Initv+0x194>)
 800230a:	f000 fc55 	bl	8002bb8 <HAL_GPIO_Init>

}
 800230e:	bf00      	nop
 8002310:	3728      	adds	r7, #40	; 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	40011000 	.word	0x40011000
 8002320:	40010800 	.word	0x40010800
 8002324:	40011800 	.word	0x40011800
 8002328:	40010c00 	.word	0x40010c00
 800232c:	40011400 	.word	0x40011400

08002330 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  amplifier.run();
 8002338:	4803      	ldr	r0, [pc, #12]	; (8002348 <_Z16StartDefaultTaskPv+0x18>)
 800233a:	f7ff f807 	bl	800134c <_ZN9Amplifier3runEv>
  /* USER CODE END 5 */
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000280 	.word	0x20000280

0800234c <_Z12startDisplayPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startDisplay */
void startDisplay(void *argument)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDisplay */
  /* Infinite loop */
  amplifier.getDisplay().run();
 8002354:	4806      	ldr	r0, [pc, #24]	; (8002370 <_Z12startDisplayPv+0x24>)
 8002356:	f7ff fcca 	bl	8001cee <_ZN9Amplifier10getDisplayEv>
 800235a:	4603      	mov	r3, r0
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	3208      	adds	r2, #8
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	4790      	blx	r2
  /* USER CODE END startDisplay */
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000280 	.word	0x20000280

08002374 <_Z10startAudioPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAudio */
void startAudio(void *argument)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAudio */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800237c:	2001      	movs	r0, #1
 800237e:	f002 fda9 	bl	8004ed4 <osDelay>
 8002382:	e7fb      	b.n	800237c <_Z10startAudioPv+0x8>

08002384 <_Z7startUIPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startUI */
void startUI(void *argument)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUI */
  /* Infinite loop */
	amplifier.getUI().run();
 800238c:	4806      	ldr	r0, [pc, #24]	; (80023a8 <_Z7startUIPv+0x24>)
 800238e:	f7ff fca3 	bl	8001cd8 <_ZN9Amplifier5getUIEv>
 8002392:	4603      	mov	r3, r0
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	3208      	adds	r2, #8
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	4790      	blx	r2
  /* USER CODE END startUI */
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000280 	.word	0x20000280

080023ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b0:	b672      	cpsid	i
}
 80023b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <Error_Handler+0x8>
	...

080023b8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d10c      	bne.n	80023e2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d107      	bne.n	80023e2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
Amplifier amplifier;
 80023d2:	4806      	ldr	r0, [pc, #24]	; (80023ec <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80023d4:	f7fe ff1a 	bl	800120c <_ZN9AmplifierC1Ev>
 80023d8:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80023da:	4906      	ldr	r1, [pc, #24]	; (80023f4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80023dc:	4803      	ldr	r0, [pc, #12]	; (80023ec <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80023de:	f005 f93d 	bl	800765c <__aeabi_atexit>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000280 	.word	0x20000280
 80023f0:	20000000 	.word	0x20000000
 80023f4:	08001275 	.word	0x08001275

080023f8 <_GLOBAL__sub_I_hi2c1>:
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002400:	2001      	movs	r0, #1
 8002402:	f7ff ffd9 	bl	80023b8 <_Z41__static_initialization_and_destruction_0ii>
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800240e:	4b18      	ldr	r3, [pc, #96]	; (8002470 <HAL_MspInit+0x68>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	4a17      	ldr	r2, [pc, #92]	; (8002470 <HAL_MspInit+0x68>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6193      	str	r3, [r2, #24]
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_MspInit+0x68>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_MspInit+0x68>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a11      	ldr	r2, [pc, #68]	; (8002470 <HAL_MspInit+0x68>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	61d3      	str	r3, [r2, #28]
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <HAL_MspInit+0x68>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	210f      	movs	r1, #15
 8002442:	f06f 0001 	mvn.w	r0, #1
 8002446:	f000 fb8e 	bl	8002b66 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_MspInit+0x6c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <HAL_MspInit+0x6c>)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	40010000 	.word	0x40010000

08002478 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 0310 	add.w	r3, r7, #16
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <HAL_I2C_MspInit+0x70>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d123      	bne.n	80024e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <HAL_I2C_MspInit+0x74>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	4a13      	ldr	r2, [pc, #76]	; (80024ec <HAL_I2C_MspInit+0x74>)
 800249e:	f043 0308 	orr.w	r3, r3, #8
 80024a2:	6193      	str	r3, [r2, #24]
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_I2C_MspInit+0x74>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024b0:	23c0      	movs	r3, #192	; 0xc0
 80024b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024b4:	2312      	movs	r3, #18
 80024b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024b8:	2303      	movs	r3, #3
 80024ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	4619      	mov	r1, r3
 80024c2:	480b      	ldr	r0, [pc, #44]	; (80024f0 <HAL_I2C_MspInit+0x78>)
 80024c4:	f000 fb78 	bl	8002bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_I2C_MspInit+0x74>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	4a07      	ldr	r2, [pc, #28]	; (80024ec <HAL_I2C_MspInit+0x74>)
 80024ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024d2:	61d3      	str	r3, [r2, #28]
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_I2C_MspInit+0x74>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024e0:	bf00      	nop
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40005400 	.word	0x40005400
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40010c00 	.word	0x40010c00

080024f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 0318 	add.w	r3, r7, #24
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a37      	ldr	r2, [pc, #220]	; (80025ec <HAL_SPI_MspInit+0xf8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d130      	bne.n	8002576 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002514:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_SPI_MspInit+0xfc>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4a35      	ldr	r2, [pc, #212]	; (80025f0 <HAL_SPI_MspInit+0xfc>)
 800251a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800251e:	6193      	str	r3, [r2, #24]
 8002520:	4b33      	ldr	r3, [pc, #204]	; (80025f0 <HAL_SPI_MspInit+0xfc>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252c:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_SPI_MspInit+0xfc>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a2f      	ldr	r2, [pc, #188]	; (80025f0 <HAL_SPI_MspInit+0xfc>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_SPI_MspInit+0xfc>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002544:	23a0      	movs	r3, #160	; 0xa0
 8002546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0318 	add.w	r3, r7, #24
 8002554:	4619      	mov	r1, r3
 8002556:	4827      	ldr	r0, [pc, #156]	; (80025f4 <HAL_SPI_MspInit+0x100>)
 8002558:	f000 fb2e 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800255c:	2340      	movs	r3, #64	; 0x40
 800255e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002568:	f107 0318 	add.w	r3, r7, #24
 800256c:	4619      	mov	r1, r3
 800256e:	4821      	ldr	r0, [pc, #132]	; (80025f4 <HAL_SPI_MspInit+0x100>)
 8002570:	f000 fb22 	bl	8002bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002574:	e036      	b.n	80025e4 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1f      	ldr	r2, [pc, #124]	; (80025f8 <HAL_SPI_MspInit+0x104>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d131      	bne.n	80025e4 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_SPI_MspInit+0xfc>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	4a1a      	ldr	r2, [pc, #104]	; (80025f0 <HAL_SPI_MspInit+0xfc>)
 8002586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800258a:	61d3      	str	r3, [r2, #28]
 800258c:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <HAL_SPI_MspInit+0xfc>)
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_SPI_MspInit+0xfc>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <HAL_SPI_MspInit+0xfc>)
 800259e:	f043 0308 	orr.w	r3, r3, #8
 80025a2:	6193      	str	r3, [r2, #24]
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_SPI_MspInit+0xfc>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80025b0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80025b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ba:	2303      	movs	r3, #3
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025be:	f107 0318 	add.w	r3, r7, #24
 80025c2:	4619      	mov	r1, r3
 80025c4:	480d      	ldr	r0, [pc, #52]	; (80025fc <HAL_SPI_MspInit+0x108>)
 80025c6:	f000 faf7 	bl	8002bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80025ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d8:	f107 0318 	add.w	r3, r7, #24
 80025dc:	4619      	mov	r1, r3
 80025de:	4807      	ldr	r0, [pc, #28]	; (80025fc <HAL_SPI_MspInit+0x108>)
 80025e0:	f000 faea 	bl	8002bb8 <HAL_GPIO_Init>
}
 80025e4:	bf00      	nop
 80025e6:	3728      	adds	r7, #40	; 0x28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40013000 	.word	0x40013000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010800 	.word	0x40010800
 80025f8:	40003800 	.word	0x40003800
 80025fc:	40010c00 	.word	0x40010c00

08002600 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08c      	sub	sp, #48	; 0x30
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 0318 	add.w	r3, r7, #24
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a3b      	ldr	r2, [pc, #236]	; (8002708 <HAL_TIM_Encoder_MspInit+0x108>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d136      	bne.n	800268e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002620:	4b3a      	ldr	r3, [pc, #232]	; (800270c <HAL_TIM_Encoder_MspInit+0x10c>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	4a39      	ldr	r2, [pc, #228]	; (800270c <HAL_TIM_Encoder_MspInit+0x10c>)
 8002626:	f043 0302 	orr.w	r3, r3, #2
 800262a:	61d3      	str	r3, [r2, #28]
 800262c:	4b37      	ldr	r3, [pc, #220]	; (800270c <HAL_TIM_Encoder_MspInit+0x10c>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002638:	4b34      	ldr	r3, [pc, #208]	; (800270c <HAL_TIM_Encoder_MspInit+0x10c>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	4a33      	ldr	r2, [pc, #204]	; (800270c <HAL_TIM_Encoder_MspInit+0x10c>)
 800263e:	f043 0310 	orr.w	r3, r3, #16
 8002642:	6193      	str	r3, [r2, #24]
 8002644:	4b31      	ldr	r3, [pc, #196]	; (800270c <HAL_TIM_Encoder_MspInit+0x10c>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002650:	23c0      	movs	r3, #192	; 0xc0
 8002652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265c:	f107 0318 	add.w	r3, r7, #24
 8002660:	4619      	mov	r1, r3
 8002662:	482b      	ldr	r0, [pc, #172]	; (8002710 <HAL_TIM_Encoder_MspInit+0x110>)
 8002664:	f000 faa8 	bl	8002bb8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002668:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <HAL_TIM_Encoder_MspInit+0x114>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
 800267e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002680:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
 8002686:	4a23      	ldr	r2, [pc, #140]	; (8002714 <HAL_TIM_Encoder_MspInit+0x114>)
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800268c:	e037      	b.n	80026fe <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a21      	ldr	r2, [pc, #132]	; (8002718 <HAL_TIM_Encoder_MspInit+0x118>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d132      	bne.n	80026fe <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002698:	4b1c      	ldr	r3, [pc, #112]	; (800270c <HAL_TIM_Encoder_MspInit+0x10c>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	4a1b      	ldr	r2, [pc, #108]	; (800270c <HAL_TIM_Encoder_MspInit+0x10c>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	61d3      	str	r3, [r2, #28]
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_TIM_Encoder_MspInit+0x10c>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026b0:	4b16      	ldr	r3, [pc, #88]	; (800270c <HAL_TIM_Encoder_MspInit+0x10c>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4a15      	ldr	r2, [pc, #84]	; (800270c <HAL_TIM_Encoder_MspInit+0x10c>)
 80026b6:	f043 0320 	orr.w	r3, r3, #32
 80026ba:	6193      	str	r3, [r2, #24]
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_TIM_Encoder_MspInit+0x10c>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80026c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80026cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d6:	f107 0318 	add.w	r3, r7, #24
 80026da:	4619      	mov	r1, r3
 80026dc:	480f      	ldr	r0, [pc, #60]	; (800271c <HAL_TIM_Encoder_MspInit+0x11c>)
 80026de:	f000 fa6b 	bl	8002bb8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_TIM_Encoder_MspInit+0x114>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f8:	4a06      	ldr	r2, [pc, #24]	; (8002714 <HAL_TIM_Encoder_MspInit+0x114>)
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	6053      	str	r3, [r2, #4]
}
 80026fe:	bf00      	nop
 8002700:	3730      	adds	r7, #48	; 0x30
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40000400 	.word	0x40000400
 800270c:	40021000 	.word	0x40021000
 8002710:	40011000 	.word	0x40011000
 8002714:	40010000 	.word	0x40010000
 8002718:	40000800 	.word	0x40000800
 800271c:	40011400 	.word	0x40011400

08002720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a25      	ldr	r2, [pc, #148]	; (80027d0 <HAL_UART_MspInit+0xb0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d143      	bne.n	80027c8 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002740:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_UART_MspInit+0xb4>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <HAL_UART_MspInit+0xb4>)
 8002746:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274a:	61d3      	str	r3, [r2, #28]
 800274c:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_UART_MspInit+0xb4>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002758:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_UART_MspInit+0xb4>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_UART_MspInit+0xb4>)
 800275e:	f043 0320 	orr.w	r3, r3, #32
 8002762:	6193      	str	r3, [r2, #24]
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_UART_MspInit+0xb4>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800277a:	2303      	movs	r3, #3
 800277c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4619      	mov	r1, r3
 8002784:	4814      	ldr	r0, [pc, #80]	; (80027d8 <HAL_UART_MspInit+0xb8>)
 8002786:	f000 fa17 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800278a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800278e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4619      	mov	r1, r3
 800279e:	480e      	ldr	r0, [pc, #56]	; (80027d8 <HAL_UART_MspInit+0xb8>)
 80027a0:	f000 fa0a 	bl	8002bb8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_ENABLE();
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_UART_MspInit+0xbc>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	4a06      	ldr	r2, [pc, #24]	; (80027dc <HAL_UART_MspInit+0xbc>)
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027c8:	bf00      	nop
 80027ca:	3728      	adds	r7, #40	; 0x28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40004800 	.word	0x40004800
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40011400 	.word	0x40011400
 80027dc:	40010000 	.word	0x40010000

080027e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <NMI_Handler+0x4>

080027e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <HardFault_Handler+0x4>

080027ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <MemManage_Handler+0x4>

080027f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f6:	e7fe      	b.n	80027f6 <BusFault_Handler+0x4>

080027f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <UsageFault_Handler+0x4>

080027fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800280e:	f000 f8d3 	bl	80029b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002812:	f003 ff6b 	bl	80066ec <xTaskGetSchedulerState>
 8002816:	4603      	mov	r3, r0
 8002818:	2b01      	cmp	r3, #1
 800281a:	d001      	beq.n	8002820 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800281c:	f004 fcc4 	bl	80071a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}

08002824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
	return 1;
 8002828:	2301      	movs	r3, #1
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <_kill>:

int _kill(int pid, int sig)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800283c:	f004 ffd6 	bl	80077ec <__errno>
 8002840:	4603      	mov	r3, r0
 8002842:	2216      	movs	r2, #22
 8002844:	601a      	str	r2, [r3, #0]
	return -1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_exit>:

void _exit (int status)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800285a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ffe7 	bl	8002832 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002864:	e7fe      	b.n	8002864 <_exit+0x12>
	...

08002868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002870:	4a14      	ldr	r2, [pc, #80]	; (80028c4 <_sbrk+0x5c>)
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <_sbrk+0x60>)
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800287c:	4b13      	ldr	r3, [pc, #76]	; (80028cc <_sbrk+0x64>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <_sbrk+0x64>)
 8002886:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <_sbrk+0x68>)
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	429a      	cmp	r2, r3
 8002896:	d207      	bcs.n	80028a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002898:	f004 ffa8 	bl	80077ec <__errno>
 800289c:	4603      	mov	r3, r0
 800289e:	220c      	movs	r2, #12
 80028a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028a6:	e009      	b.n	80028bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ae:	4b07      	ldr	r3, [pc, #28]	; (80028cc <_sbrk+0x64>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	4a05      	ldr	r2, [pc, #20]	; (80028cc <_sbrk+0x64>)
 80028b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20010000 	.word	0x20010000
 80028c8:	00000400 	.word	0x00000400
 80028cc:	2000031c 	.word	0x2000031c
 80028d0:	20001c80 	.word	0x20001c80

080028d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e0:	480c      	ldr	r0, [pc, #48]	; (8002914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028e2:	490d      	ldr	r1, [pc, #52]	; (8002918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028e4:	4a0d      	ldr	r2, [pc, #52]	; (800291c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e8:	e002      	b.n	80028f0 <LoopCopyDataInit>

080028ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ee:	3304      	adds	r3, #4

080028f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f4:	d3f9      	bcc.n	80028ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028f8:	4c0a      	ldr	r4, [pc, #40]	; (8002924 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028fc:	e001      	b.n	8002902 <LoopFillZerobss>

080028fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002900:	3204      	adds	r2, #4

08002902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002904:	d3fb      	bcc.n	80028fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002906:	f7ff ffe5 	bl	80028d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800290a:	f004 ff75 	bl	80077f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290e:	f7ff f9f9 	bl	8001d04 <main>
  bx lr
 8002912:	4770      	bx	lr
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800291c:	08007f18 	.word	0x08007f18
  ldr r2, =_sbss
 8002920:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002924:	20001c80 	.word	0x20001c80

08002928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC1_2_IRQHandler>
	...

0800292c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_Init+0x28>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <HAL_Init+0x28>)
 8002936:	f043 0310 	orr.w	r3, r3, #16
 800293a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293c:	2003      	movs	r0, #3
 800293e:	f000 f907 	bl	8002b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002942:	200f      	movs	r0, #15
 8002944:	f000 f808 	bl	8002958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002948:	f7ff fd5e 	bl	8002408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40022000 	.word	0x40022000

08002958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_InitTick+0x54>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_InitTick+0x58>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800296e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f911 	bl	8002b9e <HAL_SYSTICK_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e00e      	b.n	80029a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b0f      	cmp	r3, #15
 800298a:	d80a      	bhi.n	80029a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298c:	2200      	movs	r2, #0
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002994:	f000 f8e7 	bl	8002b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002998:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <HAL_InitTick+0x5c>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	e000      	b.n	80029a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000004 	.word	0x20000004
 80029b0:	2000000c 	.word	0x2000000c
 80029b4:	20000008 	.word	0x20000008

080029b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_IncTick+0x1c>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_IncTick+0x20>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	4a03      	ldr	r2, [pc, #12]	; (80029d8 <HAL_IncTick+0x20>)
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	2000000c 	.word	0x2000000c
 80029d8:	20000320 	.word	0x20000320

080029dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return uwTick;
 80029e0:	4b02      	ldr	r3, [pc, #8]	; (80029ec <HAL_GetTick+0x10>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	20000320 	.word	0x20000320

080029f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a22:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60d3      	str	r3, [r2, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <__NVIC_GetPriorityGrouping+0x18>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	f003 0307 	and.w	r3, r3, #7
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	db0a      	blt.n	8002a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	490c      	ldr	r1, [pc, #48]	; (8002aa0 <__NVIC_SetPriority+0x4c>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	440b      	add	r3, r1
 8002a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a7c:	e00a      	b.n	8002a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4908      	ldr	r1, [pc, #32]	; (8002aa4 <__NVIC_SetPriority+0x50>)
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	440b      	add	r3, r1
 8002a92:	761a      	strb	r2, [r3, #24]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f1c3 0307 	rsb	r3, r3, #7
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	bf28      	it	cs
 8002ac6:	2304      	movcs	r3, #4
 8002ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d902      	bls.n	8002ad8 <NVIC_EncodePriority+0x30>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3b03      	subs	r3, #3
 8002ad6:	e000      	b.n	8002ada <NVIC_EncodePriority+0x32>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	401a      	ands	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	43d9      	mvns	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	4313      	orrs	r3, r2
         );
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3724      	adds	r7, #36	; 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b1c:	d301      	bcc.n	8002b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e00f      	b.n	8002b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b22:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <SysTick_Config+0x40>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2a:	210f      	movs	r1, #15
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b30:	f7ff ff90 	bl	8002a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <SysTick_Config+0x40>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <SysTick_Config+0x40>)
 8002b3c:	2207      	movs	r2, #7
 8002b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	e000e010 	.word	0xe000e010

08002b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ff49 	bl	80029f0 <__NVIC_SetPriorityGrouping>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b78:	f7ff ff5e 	bl	8002a38 <__NVIC_GetPriorityGrouping>
 8002b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f7ff ff90 	bl	8002aa8 <NVIC_EncodePriority>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff5f 	bl	8002a54 <__NVIC_SetPriority>
}
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff ffb0 	bl	8002b0c <SysTick_Config>
 8002bac:	4603      	mov	r3, r0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b08b      	sub	sp, #44	; 0x2c
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bca:	e179      	b.n	8002ec0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bcc:	2201      	movs	r2, #1
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69fa      	ldr	r2, [r7, #28]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	f040 8168 	bne.w	8002eba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4a96      	ldr	r2, [pc, #600]	; (8002e48 <HAL_GPIO_Init+0x290>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d05e      	beq.n	8002cb2 <HAL_GPIO_Init+0xfa>
 8002bf4:	4a94      	ldr	r2, [pc, #592]	; (8002e48 <HAL_GPIO_Init+0x290>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d875      	bhi.n	8002ce6 <HAL_GPIO_Init+0x12e>
 8002bfa:	4a94      	ldr	r2, [pc, #592]	; (8002e4c <HAL_GPIO_Init+0x294>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d058      	beq.n	8002cb2 <HAL_GPIO_Init+0xfa>
 8002c00:	4a92      	ldr	r2, [pc, #584]	; (8002e4c <HAL_GPIO_Init+0x294>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d86f      	bhi.n	8002ce6 <HAL_GPIO_Init+0x12e>
 8002c06:	4a92      	ldr	r2, [pc, #584]	; (8002e50 <HAL_GPIO_Init+0x298>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d052      	beq.n	8002cb2 <HAL_GPIO_Init+0xfa>
 8002c0c:	4a90      	ldr	r2, [pc, #576]	; (8002e50 <HAL_GPIO_Init+0x298>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d869      	bhi.n	8002ce6 <HAL_GPIO_Init+0x12e>
 8002c12:	4a90      	ldr	r2, [pc, #576]	; (8002e54 <HAL_GPIO_Init+0x29c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d04c      	beq.n	8002cb2 <HAL_GPIO_Init+0xfa>
 8002c18:	4a8e      	ldr	r2, [pc, #568]	; (8002e54 <HAL_GPIO_Init+0x29c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d863      	bhi.n	8002ce6 <HAL_GPIO_Init+0x12e>
 8002c1e:	4a8e      	ldr	r2, [pc, #568]	; (8002e58 <HAL_GPIO_Init+0x2a0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d046      	beq.n	8002cb2 <HAL_GPIO_Init+0xfa>
 8002c24:	4a8c      	ldr	r2, [pc, #560]	; (8002e58 <HAL_GPIO_Init+0x2a0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d85d      	bhi.n	8002ce6 <HAL_GPIO_Init+0x12e>
 8002c2a:	2b12      	cmp	r3, #18
 8002c2c:	d82a      	bhi.n	8002c84 <HAL_GPIO_Init+0xcc>
 8002c2e:	2b12      	cmp	r3, #18
 8002c30:	d859      	bhi.n	8002ce6 <HAL_GPIO_Init+0x12e>
 8002c32:	a201      	add	r2, pc, #4	; (adr r2, 8002c38 <HAL_GPIO_Init+0x80>)
 8002c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c38:	08002cb3 	.word	0x08002cb3
 8002c3c:	08002c8d 	.word	0x08002c8d
 8002c40:	08002c9f 	.word	0x08002c9f
 8002c44:	08002ce1 	.word	0x08002ce1
 8002c48:	08002ce7 	.word	0x08002ce7
 8002c4c:	08002ce7 	.word	0x08002ce7
 8002c50:	08002ce7 	.word	0x08002ce7
 8002c54:	08002ce7 	.word	0x08002ce7
 8002c58:	08002ce7 	.word	0x08002ce7
 8002c5c:	08002ce7 	.word	0x08002ce7
 8002c60:	08002ce7 	.word	0x08002ce7
 8002c64:	08002ce7 	.word	0x08002ce7
 8002c68:	08002ce7 	.word	0x08002ce7
 8002c6c:	08002ce7 	.word	0x08002ce7
 8002c70:	08002ce7 	.word	0x08002ce7
 8002c74:	08002ce7 	.word	0x08002ce7
 8002c78:	08002ce7 	.word	0x08002ce7
 8002c7c:	08002c95 	.word	0x08002c95
 8002c80:	08002ca9 	.word	0x08002ca9
 8002c84:	4a75      	ldr	r2, [pc, #468]	; (8002e5c <HAL_GPIO_Init+0x2a4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c8a:	e02c      	b.n	8002ce6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	623b      	str	r3, [r7, #32]
          break;
 8002c92:	e029      	b.n	8002ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	623b      	str	r3, [r7, #32]
          break;
 8002c9c:	e024      	b.n	8002ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	3308      	adds	r3, #8
 8002ca4:	623b      	str	r3, [r7, #32]
          break;
 8002ca6:	e01f      	b.n	8002ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	330c      	adds	r3, #12
 8002cae:	623b      	str	r3, [r7, #32]
          break;
 8002cb0:	e01a      	b.n	8002ce8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cba:	2304      	movs	r3, #4
 8002cbc:	623b      	str	r3, [r7, #32]
          break;
 8002cbe:	e013      	b.n	8002ce8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d105      	bne.n	8002cd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cc8:	2308      	movs	r3, #8
 8002cca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	611a      	str	r2, [r3, #16]
          break;
 8002cd2:	e009      	b.n	8002ce8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	615a      	str	r2, [r3, #20]
          break;
 8002cde:	e003      	b.n	8002ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	623b      	str	r3, [r7, #32]
          break;
 8002ce4:	e000      	b.n	8002ce8 <HAL_GPIO_Init+0x130>
          break;
 8002ce6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	2bff      	cmp	r3, #255	; 0xff
 8002cec:	d801      	bhi.n	8002cf2 <HAL_GPIO_Init+0x13a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	e001      	b.n	8002cf6 <HAL_GPIO_Init+0x13e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2bff      	cmp	r3, #255	; 0xff
 8002cfc:	d802      	bhi.n	8002d04 <HAL_GPIO_Init+0x14c>
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	e002      	b.n	8002d0a <HAL_GPIO_Init+0x152>
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	3b08      	subs	r3, #8
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	210f      	movs	r1, #15
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	6a39      	ldr	r1, [r7, #32]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	431a      	orrs	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 80c1 	beq.w	8002eba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d38:	4b49      	ldr	r3, [pc, #292]	; (8002e60 <HAL_GPIO_Init+0x2a8>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	4a48      	ldr	r2, [pc, #288]	; (8002e60 <HAL_GPIO_Init+0x2a8>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6193      	str	r3, [r2, #24]
 8002d44:	4b46      	ldr	r3, [pc, #280]	; (8002e60 <HAL_GPIO_Init+0x2a8>)
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d50:	4a44      	ldr	r2, [pc, #272]	; (8002e64 <HAL_GPIO_Init+0x2ac>)
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	089b      	lsrs	r3, r3, #2
 8002d56:	3302      	adds	r3, #2
 8002d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	220f      	movs	r2, #15
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4013      	ands	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a3c      	ldr	r2, [pc, #240]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d01f      	beq.n	8002dbc <HAL_GPIO_Init+0x204>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a3b      	ldr	r2, [pc, #236]	; (8002e6c <HAL_GPIO_Init+0x2b4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d019      	beq.n	8002db8 <HAL_GPIO_Init+0x200>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a3a      	ldr	r2, [pc, #232]	; (8002e70 <HAL_GPIO_Init+0x2b8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d013      	beq.n	8002db4 <HAL_GPIO_Init+0x1fc>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a39      	ldr	r2, [pc, #228]	; (8002e74 <HAL_GPIO_Init+0x2bc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00d      	beq.n	8002db0 <HAL_GPIO_Init+0x1f8>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a38      	ldr	r2, [pc, #224]	; (8002e78 <HAL_GPIO_Init+0x2c0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d007      	beq.n	8002dac <HAL_GPIO_Init+0x1f4>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a37      	ldr	r2, [pc, #220]	; (8002e7c <HAL_GPIO_Init+0x2c4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d101      	bne.n	8002da8 <HAL_GPIO_Init+0x1f0>
 8002da4:	2305      	movs	r3, #5
 8002da6:	e00a      	b.n	8002dbe <HAL_GPIO_Init+0x206>
 8002da8:	2306      	movs	r3, #6
 8002daa:	e008      	b.n	8002dbe <HAL_GPIO_Init+0x206>
 8002dac:	2304      	movs	r3, #4
 8002dae:	e006      	b.n	8002dbe <HAL_GPIO_Init+0x206>
 8002db0:	2303      	movs	r3, #3
 8002db2:	e004      	b.n	8002dbe <HAL_GPIO_Init+0x206>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e002      	b.n	8002dbe <HAL_GPIO_Init+0x206>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_GPIO_Init+0x206>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc0:	f002 0203 	and.w	r2, r2, #3
 8002dc4:	0092      	lsls	r2, r2, #2
 8002dc6:	4093      	lsls	r3, r2
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dce:	4925      	ldr	r1, [pc, #148]	; (8002e64 <HAL_GPIO_Init+0x2ac>)
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d006      	beq.n	8002df6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002de8:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <HAL_GPIO_Init+0x2c8>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4924      	ldr	r1, [pc, #144]	; (8002e80 <HAL_GPIO_Init+0x2c8>)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
 8002df4:	e006      	b.n	8002e04 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002df6:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <HAL_GPIO_Init+0x2c8>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	4920      	ldr	r1, [pc, #128]	; (8002e80 <HAL_GPIO_Init+0x2c8>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d006      	beq.n	8002e1e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_GPIO_Init+0x2c8>)
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	491a      	ldr	r1, [pc, #104]	; (8002e80 <HAL_GPIO_Init+0x2c8>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
 8002e1c:	e006      	b.n	8002e2c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_GPIO_Init+0x2c8>)
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	4916      	ldr	r1, [pc, #88]	; (8002e80 <HAL_GPIO_Init+0x2c8>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d025      	beq.n	8002e84 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_GPIO_Init+0x2c8>)
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	4910      	ldr	r1, [pc, #64]	; (8002e80 <HAL_GPIO_Init+0x2c8>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]
 8002e44:	e025      	b.n	8002e92 <HAL_GPIO_Init+0x2da>
 8002e46:	bf00      	nop
 8002e48:	10320000 	.word	0x10320000
 8002e4c:	10310000 	.word	0x10310000
 8002e50:	10220000 	.word	0x10220000
 8002e54:	10210000 	.word	0x10210000
 8002e58:	10120000 	.word	0x10120000
 8002e5c:	10110000 	.word	0x10110000
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40010800 	.word	0x40010800
 8002e6c:	40010c00 	.word	0x40010c00
 8002e70:	40011000 	.word	0x40011000
 8002e74:	40011400 	.word	0x40011400
 8002e78:	40011800 	.word	0x40011800
 8002e7c:	40011c00 	.word	0x40011c00
 8002e80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <HAL_GPIO_Init+0x324>)
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	4913      	ldr	r1, [pc, #76]	; (8002edc <HAL_GPIO_Init+0x324>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d006      	beq.n	8002eac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_GPIO_Init+0x324>)
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	490e      	ldr	r1, [pc, #56]	; (8002edc <HAL_GPIO_Init+0x324>)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60cb      	str	r3, [r1, #12]
 8002eaa:	e006      	b.n	8002eba <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_GPIO_Init+0x324>)
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	4909      	ldr	r1, [pc, #36]	; (8002edc <HAL_GPIO_Init+0x324>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f47f ae7e 	bne.w	8002bcc <HAL_GPIO_Init+0x14>
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	372c      	adds	r7, #44	; 0x2c
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	40010400 	.word	0x40010400

08002ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	807b      	strh	r3, [r7, #2]
 8002eec:	4613      	mov	r3, r2
 8002eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ef0:	787b      	ldrb	r3, [r7, #1]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ef6:	887a      	ldrh	r2, [r7, #2]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002efc:	e003      	b.n	8002f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002efe:	887b      	ldrh	r3, [r7, #2]
 8002f00:	041a      	lsls	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	611a      	str	r2, [r3, #16]
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e12b      	b.n	800317a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff fa9e 	bl	8002478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2224      	movs	r2, #36	; 0x24
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0201 	bic.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f74:	f001 fb70 	bl	8004658 <HAL_RCC_GetPCLK1Freq>
 8002f78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4a81      	ldr	r2, [pc, #516]	; (8003184 <HAL_I2C_Init+0x274>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d807      	bhi.n	8002f94 <HAL_I2C_Init+0x84>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a80      	ldr	r2, [pc, #512]	; (8003188 <HAL_I2C_Init+0x278>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	bf94      	ite	ls
 8002f8c:	2301      	movls	r3, #1
 8002f8e:	2300      	movhi	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	e006      	b.n	8002fa2 <HAL_I2C_Init+0x92>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4a7d      	ldr	r2, [pc, #500]	; (800318c <HAL_I2C_Init+0x27c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	bf94      	ite	ls
 8002f9c:	2301      	movls	r3, #1
 8002f9e:	2300      	movhi	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0e7      	b.n	800317a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a78      	ldr	r2, [pc, #480]	; (8003190 <HAL_I2C_Init+0x280>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0c9b      	lsrs	r3, r3, #18
 8002fb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4a6a      	ldr	r2, [pc, #424]	; (8003184 <HAL_I2C_Init+0x274>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d802      	bhi.n	8002fe4 <HAL_I2C_Init+0xd4>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	e009      	b.n	8002ff8 <HAL_I2C_Init+0xe8>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	4a69      	ldr	r2, [pc, #420]	; (8003194 <HAL_I2C_Init+0x284>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800300a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	495c      	ldr	r1, [pc, #368]	; (8003184 <HAL_I2C_Init+0x274>)
 8003014:	428b      	cmp	r3, r1
 8003016:	d819      	bhi.n	800304c <HAL_I2C_Init+0x13c>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1e59      	subs	r1, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	fbb1 f3f3 	udiv	r3, r1, r3
 8003026:	1c59      	adds	r1, r3, #1
 8003028:	f640 73fc 	movw	r3, #4092	; 0xffc
 800302c:	400b      	ands	r3, r1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_I2C_Init+0x138>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1e59      	subs	r1, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003040:	3301      	adds	r3, #1
 8003042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003046:	e051      	b.n	80030ec <HAL_I2C_Init+0x1dc>
 8003048:	2304      	movs	r3, #4
 800304a:	e04f      	b.n	80030ec <HAL_I2C_Init+0x1dc>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d111      	bne.n	8003078 <HAL_I2C_Init+0x168>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1e58      	subs	r0, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	440b      	add	r3, r1
 8003062:	fbb0 f3f3 	udiv	r3, r0, r3
 8003066:	3301      	adds	r3, #1
 8003068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e012      	b.n	800309e <HAL_I2C_Init+0x18e>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1e58      	subs	r0, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	0099      	lsls	r1, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	fbb0 f3f3 	udiv	r3, r0, r3
 800308e:	3301      	adds	r3, #1
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Init+0x196>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e022      	b.n	80030ec <HAL_I2C_Init+0x1dc>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10e      	bne.n	80030cc <HAL_I2C_Init+0x1bc>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1e58      	subs	r0, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	440b      	add	r3, r1
 80030bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ca:	e00f      	b.n	80030ec <HAL_I2C_Init+0x1dc>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1e58      	subs	r0, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	0099      	lsls	r1, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	6809      	ldr	r1, [r1, #0]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800311a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6911      	ldr	r1, [r2, #16]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68d2      	ldr	r2, [r2, #12]
 8003126:	4311      	orrs	r1, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	430b      	orrs	r3, r1
 800312e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	000186a0 	.word	0x000186a0
 8003188:	001e847f 	.word	0x001e847f
 800318c:	003d08ff 	.word	0x003d08ff
 8003190:	431bde83 	.word	0x431bde83
 8003194:	10624dd3 	.word	0x10624dd3

08003198 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	461a      	mov	r2, r3
 80031a4:	460b      	mov	r3, r1
 80031a6:	817b      	strh	r3, [r7, #10]
 80031a8:	4613      	mov	r3, r2
 80031aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031ac:	f7ff fc16 	bl	80029dc <HAL_GetTick>
 80031b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	f040 80e0 	bne.w	8003380 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	2319      	movs	r3, #25
 80031c6:	2201      	movs	r2, #1
 80031c8:	4970      	ldr	r1, [pc, #448]	; (800338c <HAL_I2C_Master_Transmit+0x1f4>)
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 fc92 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
 80031d8:	e0d3      	b.n	8003382 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_I2C_Master_Transmit+0x50>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e0cc      	b.n	8003382 <HAL_I2C_Master_Transmit+0x1ea>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d007      	beq.n	800320e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0201 	orr.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800321c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2221      	movs	r2, #33	; 0x21
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2210      	movs	r2, #16
 800322a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	893a      	ldrh	r2, [r7, #8]
 800323e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a50      	ldr	r2, [pc, #320]	; (8003390 <HAL_I2C_Master_Transmit+0x1f8>)
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003250:	8979      	ldrh	r1, [r7, #10]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	6a3a      	ldr	r2, [r7, #32]
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fafc 	bl	8003854 <I2C_MasterRequestWrite>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e08d      	b.n	8003382 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800327c:	e066      	b.n	800334c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	6a39      	ldr	r1, [r7, #32]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 fd0c 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00d      	beq.n	80032aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	2b04      	cmp	r3, #4
 8003294:	d107      	bne.n	80032a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e06b      	b.n	8003382 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	781a      	ldrb	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d11b      	bne.n	8003320 <HAL_I2C_Master_Transmit+0x188>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d017      	beq.n	8003320 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	781a      	ldrb	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	6a39      	ldr	r1, [r7, #32]
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fcfc 	bl	8003d22 <I2C_WaitOnBTFFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00d      	beq.n	800334c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	2b04      	cmp	r3, #4
 8003336:	d107      	bne.n	8003348 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003346:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e01a      	b.n	8003382 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003350:	2b00      	cmp	r3, #0
 8003352:	d194      	bne.n	800327e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
  }
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	00100002 	.word	0x00100002
 8003390:	ffff0000 	.word	0xffff0000

08003394 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08c      	sub	sp, #48	; 0x30
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	461a      	mov	r2, r3
 80033a0:	460b      	mov	r3, r1
 80033a2:	817b      	strh	r3, [r7, #10]
 80033a4:	4613      	mov	r3, r2
 80033a6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033ac:	f7ff fb16 	bl	80029dc <HAL_GetTick>
 80033b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	f040 823f 	bne.w	800383e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2319      	movs	r3, #25
 80033c6:	2201      	movs	r2, #1
 80033c8:	497f      	ldr	r1, [pc, #508]	; (80035c8 <HAL_I2C_Master_Receive+0x234>)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 fb92 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
 80033d8:	e232      	b.n	8003840 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_I2C_Master_Receive+0x54>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e22b      	b.n	8003840 <HAL_I2C_Master_Receive+0x4ac>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d007      	beq.n	800340e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800341c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2222      	movs	r2, #34	; 0x22
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2210      	movs	r2, #16
 800342a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	893a      	ldrh	r2, [r7, #8]
 800343e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4a5f      	ldr	r2, [pc, #380]	; (80035cc <HAL_I2C_Master_Receive+0x238>)
 800344e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003450:	8979      	ldrh	r1, [r7, #10]
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fa7e 	bl	8003958 <I2C_MasterRequestRead>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e1ec      	b.n	8003840 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	2b00      	cmp	r3, #0
 800346c:	d113      	bne.n	8003496 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e1c0      	b.n	8003818 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	2b01      	cmp	r3, #1
 800349c:	d11e      	bne.n	80034dc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034ae:	b672      	cpsid	i
}
 80034b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034d8:	b662      	cpsie	i
}
 80034da:	e035      	b.n	8003548 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d11e      	bne.n	8003522 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034f4:	b672      	cpsid	i
}
 80034f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800351e:	b662      	cpsie	i
}
 8003520:	e012      	b.n	8003548 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003530:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003548:	e166      	b.n	8003818 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	2b03      	cmp	r3, #3
 8003550:	f200 811f 	bhi.w	8003792 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	2b01      	cmp	r3, #1
 800355a:	d123      	bne.n	80035a4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fc1f 	bl	8003da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e167      	b.n	8003840 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035a2:	e139      	b.n	8003818 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d152      	bne.n	8003652 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	2200      	movs	r2, #0
 80035b4:	4906      	ldr	r1, [pc, #24]	; (80035d0 <HAL_I2C_Master_Receive+0x23c>)
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fa9c 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e13c      	b.n	8003840 <HAL_I2C_Master_Receive+0x4ac>
 80035c6:	bf00      	nop
 80035c8:	00100002 	.word	0x00100002
 80035cc:	ffff0000 	.word	0xffff0000
 80035d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80035d4:	b672      	cpsid	i
}
 80035d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800361a:	b662      	cpsie	i
}
 800361c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003650:	e0e2      	b.n	8003818 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	2200      	movs	r2, #0
 800365a:	497b      	ldr	r1, [pc, #492]	; (8003848 <HAL_I2C_Master_Receive+0x4b4>)
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 fa49 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0e9      	b.n	8003840 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800367c:	b672      	cpsid	i
}
 800367e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036b2:	4b66      	ldr	r3, [pc, #408]	; (800384c <HAL_I2C_Master_Receive+0x4b8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	08db      	lsrs	r3, r3, #3
 80036b8:	4a65      	ldr	r2, [pc, #404]	; (8003850 <HAL_I2C_Master_Receive+0x4bc>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	0a1a      	lsrs	r2, r3, #8
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	00da      	lsls	r2, r3, #3
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d118      	bne.n	800370a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80036fa:	b662      	cpsie	i
}
 80036fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e09a      	b.n	8003840 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b04      	cmp	r3, #4
 8003716:	d1d9      	bne.n	80036cc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800375a:	b662      	cpsie	i
}
 800375c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003790:	e042      	b.n	8003818 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fb04 	bl	8003da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e04c      	b.n	8003840 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d118      	bne.n	8003818 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	f47f ae94 	bne.w	800354a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3728      	adds	r7, #40	; 0x28
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	00010004 	.word	0x00010004
 800384c:	20000004 	.word	0x20000004
 8003850:	14f8b589 	.word	0x14f8b589

08003854 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	460b      	mov	r3, r1
 8003862:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d006      	beq.n	800387e <I2C_MasterRequestWrite+0x2a>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d003      	beq.n	800387e <I2C_MasterRequestWrite+0x2a>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800387c:	d108      	bne.n	8003890 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e00b      	b.n	80038a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	2b12      	cmp	r3, #18
 8003896:	d107      	bne.n	80038a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f91d 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00d      	beq.n	80038dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ce:	d103      	bne.n	80038d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e035      	b.n	8003948 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e4:	d108      	bne.n	80038f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038e6:	897b      	ldrh	r3, [r7, #10]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038f4:	611a      	str	r2, [r3, #16]
 80038f6:	e01b      	b.n	8003930 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038f8:	897b      	ldrh	r3, [r7, #10]
 80038fa:	11db      	asrs	r3, r3, #7
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f003 0306 	and.w	r3, r3, #6
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f063 030f 	orn	r3, r3, #15
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	490e      	ldr	r1, [pc, #56]	; (8003950 <I2C_MasterRequestWrite+0xfc>)
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f943 	bl	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e010      	b.n	8003948 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003926:	897b      	ldrh	r3, [r7, #10]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4907      	ldr	r1, [pc, #28]	; (8003954 <I2C_MasterRequestWrite+0x100>)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f933 	bl	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	00010008 	.word	0x00010008
 8003954:	00010002 	.word	0x00010002

08003958 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	460b      	mov	r3, r1
 8003966:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800397c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d006      	beq.n	8003992 <I2C_MasterRequestRead+0x3a>
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d003      	beq.n	8003992 <I2C_MasterRequestRead+0x3a>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003990:	d108      	bne.n	80039a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e00b      	b.n	80039bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	2b11      	cmp	r3, #17
 80039aa:	d107      	bne.n	80039bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f893 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00d      	beq.n	80039f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e2:	d103      	bne.n	80039ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e079      	b.n	8003ae4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f8:	d108      	bne.n	8003a0c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039fa:	897b      	ldrh	r3, [r7, #10]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	611a      	str	r2, [r3, #16]
 8003a0a:	e05f      	b.n	8003acc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a0c:	897b      	ldrh	r3, [r7, #10]
 8003a0e:	11db      	asrs	r3, r3, #7
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f003 0306 	and.w	r3, r3, #6
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f063 030f 	orn	r3, r3, #15
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4930      	ldr	r1, [pc, #192]	; (8003aec <I2C_MasterRequestRead+0x194>)
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f8b9 	bl	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e054      	b.n	8003ae4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a3a:	897b      	ldrh	r3, [r7, #10]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	4929      	ldr	r1, [pc, #164]	; (8003af0 <I2C_MasterRequestRead+0x198>)
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f8a9 	bl	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e044      	b.n	8003ae4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f831 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa6:	d103      	bne.n	8003ab0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e017      	b.n	8003ae4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ab4:	897b      	ldrh	r3, [r7, #10]
 8003ab6:	11db      	asrs	r3, r3, #7
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	f003 0306 	and.w	r3, r3, #6
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f063 030e 	orn	r3, r3, #14
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4907      	ldr	r1, [pc, #28]	; (8003af0 <I2C_MasterRequestRead+0x198>)
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f865 	bl	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	00010008 	.word	0x00010008
 8003af0:	00010002 	.word	0x00010002

08003af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	4613      	mov	r3, r2
 8003b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b04:	e025      	b.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b0c:	d021      	beq.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fe ff65 	bl	80029dc <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d116      	bne.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e023      	b.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d10d      	bne.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	43da      	mvns	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4013      	ands	r3, r2
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf0c      	ite	eq
 8003b6e:	2301      	moveq	r3, #1
 8003b70:	2300      	movne	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	e00c      	b.n	8003b92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4013      	ands	r3, r2
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bf0c      	ite	eq
 8003b8a:	2301      	moveq	r3, #1
 8003b8c:	2300      	movne	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d0b6      	beq.n	8003b06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
 8003bae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bb0:	e051      	b.n	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc0:	d123      	bne.n	8003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f043 0204 	orr.w	r2, r3, #4
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e046      	b.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c10:	d021      	beq.n	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c12:	f7fe fee3 	bl	80029dc <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d302      	bcc.n	8003c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d116      	bne.n	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e020      	b.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	0c1b      	lsrs	r3, r3, #16
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d10c      	bne.n	8003c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	43da      	mvns	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bf14      	ite	ne
 8003c72:	2301      	movne	r3, #1
 8003c74:	2300      	moveq	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e00b      	b.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	43da      	mvns	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4013      	ands	r3, r2
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d18d      	bne.n	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cac:	e02d      	b.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f8ce 	bl	8003e50 <I2C_IsAcknowledgeFailed>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e02d      	b.n	8003d1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cc4:	d021      	beq.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc6:	f7fe fe89 	bl	80029dc <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d116      	bne.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f043 0220 	orr.w	r2, r3, #32
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e007      	b.n	8003d1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d14:	2b80      	cmp	r3, #128	; 0x80
 8003d16:	d1ca      	bne.n	8003cae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d2e:	e02d      	b.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f88d 	bl	8003e50 <I2C_IsAcknowledgeFailed>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e02d      	b.n	8003d9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d46:	d021      	beq.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d48:	f7fe fe48 	bl	80029dc <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d302      	bcc.n	8003d5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d116      	bne.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	f043 0220 	orr.w	r2, r3, #32
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e007      	b.n	8003d9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d1ca      	bne.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003db0:	e042      	b.n	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b10      	cmp	r3, #16
 8003dbe:	d119      	bne.n	8003df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0210 	mvn.w	r2, #16
 8003dc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e029      	b.n	8003e48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df4:	f7fe fdf2 	bl	80029dc <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d302      	bcc.n	8003e0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d116      	bne.n	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	f043 0220 	orr.w	r2, r3, #32
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e007      	b.n	8003e48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d1b5      	bne.n	8003db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e66:	d11b      	bne.n	8003ea0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f043 0204 	orr.w	r2, r3, #4
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e272      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8087 	beq.w	8003fda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ecc:	4b92      	ldr	r3, [pc, #584]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d00c      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ed8:	4b8f      	ldr	r3, [pc, #572]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d112      	bne.n	8003f0a <HAL_RCC_OscConfig+0x5e>
 8003ee4:	4b8c      	ldr	r3, [pc, #560]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef0:	d10b      	bne.n	8003f0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef2:	4b89      	ldr	r3, [pc, #548]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d06c      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x12c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d168      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e24c      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f12:	d106      	bne.n	8003f22 <HAL_RCC_OscConfig+0x76>
 8003f14:	4b80      	ldr	r3, [pc, #512]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a7f      	ldr	r2, [pc, #508]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	e02e      	b.n	8003f80 <HAL_RCC_OscConfig+0xd4>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x98>
 8003f2a:	4b7b      	ldr	r3, [pc, #492]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7a      	ldr	r2, [pc, #488]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	4b78      	ldr	r3, [pc, #480]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a77      	ldr	r2, [pc, #476]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	e01d      	b.n	8003f80 <HAL_RCC_OscConfig+0xd4>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0xbc>
 8003f4e:	4b72      	ldr	r3, [pc, #456]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a71      	ldr	r2, [pc, #452]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b6f      	ldr	r3, [pc, #444]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a6e      	ldr	r2, [pc, #440]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e00b      	b.n	8003f80 <HAL_RCC_OscConfig+0xd4>
 8003f68:	4b6b      	ldr	r3, [pc, #428]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a6a      	ldr	r2, [pc, #424]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	4b68      	ldr	r3, [pc, #416]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a67      	ldr	r2, [pc, #412]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d013      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fe fd28 	bl	80029dc <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f90:	f7fe fd24 	bl	80029dc <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	; 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e200      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	4b5d      	ldr	r3, [pc, #372]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0xe4>
 8003fae:	e014      	b.n	8003fda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7fe fd14 	bl	80029dc <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7fe fd10 	bl	80029dc <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	; 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e1ec      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fca:	4b53      	ldr	r3, [pc, #332]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x10c>
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d063      	beq.n	80040ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fe6:	4b4c      	ldr	r3, [pc, #304]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ff2:	4b49      	ldr	r3, [pc, #292]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d11c      	bne.n	8004038 <HAL_RCC_OscConfig+0x18c>
 8003ffe:	4b46      	ldr	r3, [pc, #280]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d116      	bne.n	8004038 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400a:	4b43      	ldr	r3, [pc, #268]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_RCC_OscConfig+0x176>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d001      	beq.n	8004022 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e1c0      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004022:	4b3d      	ldr	r3, [pc, #244]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4939      	ldr	r1, [pc, #228]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	e03a      	b.n	80040ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d020      	beq.n	8004082 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004040:	4b36      	ldr	r3, [pc, #216]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004046:	f7fe fcc9 	bl	80029dc <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404e:	f7fe fcc5 	bl	80029dc <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e1a1      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004060:	4b2d      	ldr	r3, [pc, #180]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406c:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4927      	ldr	r1, [pc, #156]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 800407c:	4313      	orrs	r3, r2
 800407e:	600b      	str	r3, [r1, #0]
 8004080:	e015      	b.n	80040ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004082:	4b26      	ldr	r3, [pc, #152]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fe fca8 	bl	80029dc <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004090:	f7fe fca4 	bl	80029dc <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e180      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a2:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d03a      	beq.n	8004130 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d019      	beq.n	80040f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c2:	4b17      	ldr	r3, [pc, #92]	; (8004120 <HAL_RCC_OscConfig+0x274>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c8:	f7fe fc88 	bl	80029dc <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d0:	f7fe fc84 	bl	80029dc <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e160      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040ee:	2001      	movs	r0, #1
 80040f0:	f000 fada 	bl	80046a8 <RCC_Delay>
 80040f4:	e01c      	b.n	8004130 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f6:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <HAL_RCC_OscConfig+0x274>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fc:	f7fe fc6e 	bl	80029dc <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004102:	e00f      	b.n	8004124 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004104:	f7fe fc6a 	bl	80029dc <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d908      	bls.n	8004124 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e146      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000
 800411c:	42420000 	.word	0x42420000
 8004120:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004124:	4b92      	ldr	r3, [pc, #584]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e9      	bne.n	8004104 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80a6 	beq.w	800428a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413e:	2300      	movs	r3, #0
 8004140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004142:	4b8b      	ldr	r3, [pc, #556]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10d      	bne.n	800416a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414e:	4b88      	ldr	r3, [pc, #544]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	4a87      	ldr	r2, [pc, #540]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004158:	61d3      	str	r3, [r2, #28]
 800415a:	4b85      	ldr	r3, [pc, #532]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004166:	2301      	movs	r3, #1
 8004168:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416a:	4b82      	ldr	r3, [pc, #520]	; (8004374 <HAL_RCC_OscConfig+0x4c8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d118      	bne.n	80041a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004176:	4b7f      	ldr	r3, [pc, #508]	; (8004374 <HAL_RCC_OscConfig+0x4c8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a7e      	ldr	r2, [pc, #504]	; (8004374 <HAL_RCC_OscConfig+0x4c8>)
 800417c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004182:	f7fe fc2b 	bl	80029dc <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418a:	f7fe fc27 	bl	80029dc <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b64      	cmp	r3, #100	; 0x64
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e103      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	4b75      	ldr	r3, [pc, #468]	; (8004374 <HAL_RCC_OscConfig+0x4c8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d106      	bne.n	80041be <HAL_RCC_OscConfig+0x312>
 80041b0:	4b6f      	ldr	r3, [pc, #444]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	4a6e      	ldr	r2, [pc, #440]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6213      	str	r3, [r2, #32]
 80041bc:	e02d      	b.n	800421a <HAL_RCC_OscConfig+0x36e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x334>
 80041c6:	4b6a      	ldr	r3, [pc, #424]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	4a69      	ldr	r2, [pc, #420]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	6213      	str	r3, [r2, #32]
 80041d2:	4b67      	ldr	r3, [pc, #412]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	4a66      	ldr	r2, [pc, #408]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041d8:	f023 0304 	bic.w	r3, r3, #4
 80041dc:	6213      	str	r3, [r2, #32]
 80041de:	e01c      	b.n	800421a <HAL_RCC_OscConfig+0x36e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2b05      	cmp	r3, #5
 80041e6:	d10c      	bne.n	8004202 <HAL_RCC_OscConfig+0x356>
 80041e8:	4b61      	ldr	r3, [pc, #388]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4a60      	ldr	r2, [pc, #384]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041ee:	f043 0304 	orr.w	r3, r3, #4
 80041f2:	6213      	str	r3, [r2, #32]
 80041f4:	4b5e      	ldr	r3, [pc, #376]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	4a5d      	ldr	r2, [pc, #372]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	6213      	str	r3, [r2, #32]
 8004200:	e00b      	b.n	800421a <HAL_RCC_OscConfig+0x36e>
 8004202:	4b5b      	ldr	r3, [pc, #364]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	4a5a      	ldr	r2, [pc, #360]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	6213      	str	r3, [r2, #32]
 800420e:	4b58      	ldr	r3, [pc, #352]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4a57      	ldr	r2, [pc, #348]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004214:	f023 0304 	bic.w	r3, r3, #4
 8004218:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d015      	beq.n	800424e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004222:	f7fe fbdb 	bl	80029dc <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004228:	e00a      	b.n	8004240 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fe fbd7 	bl	80029dc <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	; 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e0b1      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004240:	4b4b      	ldr	r3, [pc, #300]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ee      	beq.n	800422a <HAL_RCC_OscConfig+0x37e>
 800424c:	e014      	b.n	8004278 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424e:	f7fe fbc5 	bl	80029dc <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004254:	e00a      	b.n	800426c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fe fbc1 	bl	80029dc <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e09b      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800426c:	4b40      	ldr	r3, [pc, #256]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1ee      	bne.n	8004256 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004278:	7dfb      	ldrb	r3, [r7, #23]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d105      	bne.n	800428a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427e:	4b3c      	ldr	r3, [pc, #240]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	4a3b      	ldr	r2, [pc, #236]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004288:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8087 	beq.w	80043a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004294:	4b36      	ldr	r3, [pc, #216]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 030c 	and.w	r3, r3, #12
 800429c:	2b08      	cmp	r3, #8
 800429e:	d061      	beq.n	8004364 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d146      	bne.n	8004336 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a8:	4b33      	ldr	r3, [pc, #204]	; (8004378 <HAL_RCC_OscConfig+0x4cc>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ae:	f7fe fb95 	bl	80029dc <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b6:	f7fe fb91 	bl	80029dc <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e06d      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c8:	4b29      	ldr	r3, [pc, #164]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f0      	bne.n	80042b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042dc:	d108      	bne.n	80042f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042de:	4b24      	ldr	r3, [pc, #144]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	4921      	ldr	r1, [pc, #132]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f0:	4b1f      	ldr	r3, [pc, #124]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a19      	ldr	r1, [r3, #32]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	430b      	orrs	r3, r1
 8004302:	491b      	ldr	r1, [pc, #108]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004304:	4313      	orrs	r3, r2
 8004306:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004308:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <HAL_RCC_OscConfig+0x4cc>)
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430e:	f7fe fb65 	bl	80029dc <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004316:	f7fe fb61 	bl	80029dc <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e03d      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x46a>
 8004334:	e035      	b.n	80043a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004336:	4b10      	ldr	r3, [pc, #64]	; (8004378 <HAL_RCC_OscConfig+0x4cc>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fe fb4e 	bl	80029dc <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7fe fb4a 	bl	80029dc <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e026      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_RCC_OscConfig+0x4c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x498>
 8004362:	e01e      	b.n	80043a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d107      	bne.n	800437c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e019      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
 8004370:	40021000 	.word	0x40021000
 8004374:	40007000 	.word	0x40007000
 8004378:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	429a      	cmp	r2, r3
 800438e:	d106      	bne.n	800439e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439a:	429a      	cmp	r2, r3
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40021000 	.word	0x40021000

080043b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0d0      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043c4:	4b6a      	ldr	r3, [pc, #424]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d910      	bls.n	80043f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d2:	4b67      	ldr	r3, [pc, #412]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 0207 	bic.w	r2, r3, #7
 80043da:	4965      	ldr	r1, [pc, #404]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e2:	4b63      	ldr	r3, [pc, #396]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0b8      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d020      	beq.n	8004442 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800440c:	4b59      	ldr	r3, [pc, #356]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4a58      	ldr	r2, [pc, #352]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004416:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004424:	4b53      	ldr	r3, [pc, #332]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4a52      	ldr	r2, [pc, #328]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800442a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800442e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004430:	4b50      	ldr	r3, [pc, #320]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	494d      	ldr	r1, [pc, #308]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	4313      	orrs	r3, r2
 8004440:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d040      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d107      	bne.n	8004466 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d115      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e07f      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446e:	4b41      	ldr	r3, [pc, #260]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e073      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447e:	4b3d      	ldr	r3, [pc, #244]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e06b      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800448e:	4b39      	ldr	r3, [pc, #228]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f023 0203 	bic.w	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	4936      	ldr	r1, [pc, #216]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a0:	f7fe fa9c 	bl	80029dc <HAL_GetTick>
 80044a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a6:	e00a      	b.n	80044be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a8:	f7fe fa98 	bl	80029dc <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e053      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	4b2d      	ldr	r3, [pc, #180]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f003 020c 	and.w	r2, r3, #12
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d1eb      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044d0:	4b27      	ldr	r3, [pc, #156]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d210      	bcs.n	8004500 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b24      	ldr	r3, [pc, #144]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 0207 	bic.w	r2, r3, #7
 80044e6:	4922      	ldr	r1, [pc, #136]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b20      	ldr	r3, [pc, #128]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e032      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4916      	ldr	r1, [pc, #88]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800451a:	4313      	orrs	r3, r2
 800451c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	490e      	ldr	r1, [pc, #56]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800453e:	f000 f821 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 8004542:	4602      	mov	r2, r0
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	490a      	ldr	r1, [pc, #40]	; (8004578 <HAL_RCC_ClockConfig+0x1c8>)
 8004550:	5ccb      	ldrb	r3, [r1, r3]
 8004552:	fa22 f303 	lsr.w	r3, r2, r3
 8004556:	4a09      	ldr	r2, [pc, #36]	; (800457c <HAL_RCC_ClockConfig+0x1cc>)
 8004558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_RCC_ClockConfig+0x1d0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe f9fa 	bl	8002958 <HAL_InitTick>

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40022000 	.word	0x40022000
 8004574:	40021000 	.word	0x40021000
 8004578:	08007d14 	.word	0x08007d14
 800457c:	20000004 	.word	0x20000004
 8004580:	20000008 	.word	0x20000008

08004584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004584:	b490      	push	{r4, r7}
 8004586:	b08a      	sub	sp, #40	; 0x28
 8004588:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800458a:	4b29      	ldr	r3, [pc, #164]	; (8004630 <HAL_RCC_GetSysClockFreq+0xac>)
 800458c:	1d3c      	adds	r4, r7, #4
 800458e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004594:	f240 2301 	movw	r3, #513	; 0x201
 8004598:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	2300      	movs	r3, #0
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045ae:	4b21      	ldr	r3, [pc, #132]	; (8004634 <HAL_RCC_GetSysClockFreq+0xb0>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d002      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0x40>
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d003      	beq.n	80045ca <HAL_RCC_GetSysClockFreq+0x46>
 80045c2:	e02b      	b.n	800461c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045c4:	4b1c      	ldr	r3, [pc, #112]	; (8004638 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045c6:	623b      	str	r3, [r7, #32]
      break;
 80045c8:	e02b      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	0c9b      	lsrs	r3, r3, #18
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	3328      	adds	r3, #40	; 0x28
 80045d4:	443b      	add	r3, r7
 80045d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d012      	beq.n	800460c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045e6:	4b13      	ldr	r3, [pc, #76]	; (8004634 <HAL_RCC_GetSysClockFreq+0xb0>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	0c5b      	lsrs	r3, r3, #17
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	3328      	adds	r3, #40	; 0x28
 80045f2:	443b      	add	r3, r7
 80045f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	4a0e      	ldr	r2, [pc, #56]	; (8004638 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045fe:	fb03 f202 	mul.w	r2, r3, r2
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
 800460a:	e004      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	4a0b      	ldr	r2, [pc, #44]	; (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004610:	fb02 f303 	mul.w	r3, r2, r3
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	623b      	str	r3, [r7, #32]
      break;
 800461a:	e002      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800461c:	4b08      	ldr	r3, [pc, #32]	; (8004640 <HAL_RCC_GetSysClockFreq+0xbc>)
 800461e:	623b      	str	r3, [r7, #32]
      break;
 8004620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004622:	6a3b      	ldr	r3, [r7, #32]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3728      	adds	r7, #40	; 0x28
 8004628:	46bd      	mov	sp, r7
 800462a:	bc90      	pop	{r4, r7}
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	08007b48 	.word	0x08007b48
 8004634:	40021000 	.word	0x40021000
 8004638:	00f42400 	.word	0x00f42400
 800463c:	003d0900 	.word	0x003d0900
 8004640:	007a1200 	.word	0x007a1200

08004644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004648:	4b02      	ldr	r3, [pc, #8]	; (8004654 <HAL_RCC_GetHCLKFreq+0x10>)
 800464a:	681b      	ldr	r3, [r3, #0]
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr
 8004654:	20000004 	.word	0x20000004

08004658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800465c:	f7ff fff2 	bl	8004644 <HAL_RCC_GetHCLKFreq>
 8004660:	4602      	mov	r2, r0
 8004662:	4b05      	ldr	r3, [pc, #20]	; (8004678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	0a1b      	lsrs	r3, r3, #8
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	4903      	ldr	r1, [pc, #12]	; (800467c <HAL_RCC_GetPCLK1Freq+0x24>)
 800466e:	5ccb      	ldrb	r3, [r1, r3]
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40021000 	.word	0x40021000
 800467c:	08007d24 	.word	0x08007d24

08004680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004684:	f7ff ffde 	bl	8004644 <HAL_RCC_GetHCLKFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	0adb      	lsrs	r3, r3, #11
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	4903      	ldr	r1, [pc, #12]	; (80046a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000
 80046a4:	08007d24 	.word	0x08007d24

080046a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <RCC_Delay+0x34>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <RCC_Delay+0x38>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	0a5b      	lsrs	r3, r3, #9
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046c4:	bf00      	nop
  }
  while (Delay --);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1e5a      	subs	r2, r3, #1
 80046ca:	60fa      	str	r2, [r7, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f9      	bne.n	80046c4 <RCC_Delay+0x1c>
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	20000004 	.word	0x20000004
 80046e0:	10624dd3 	.word	0x10624dd3

080046e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e076      	b.n	80047e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d108      	bne.n	8004710 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004706:	d009      	beq.n	800471c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	61da      	str	r2, [r3, #28]
 800470e:	e005      	b.n	800471c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fd fedc 	bl	80024f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004752:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a0:	ea42 0103 	orr.w	r1, r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	0c1a      	lsrs	r2, r3, #16
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f002 0204 	and.w	r2, r2, #4
 80047c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e093      	b.n	8004928 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d106      	bne.n	800481a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fd fef3 	bl	8002600 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2202      	movs	r2, #2
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004830:	f023 0307 	bic.w	r3, r3, #7
 8004834:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f000 f875 	bl	8004930 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486e:	f023 0303 	bic.w	r3, r3, #3
 8004872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	4313      	orrs	r3, r2
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800488c:	f023 030c 	bic.w	r3, r3, #12
 8004890:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004898:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800489c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	4313      	orrs	r3, r2
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	011a      	lsls	r2, r3, #4
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	031b      	lsls	r3, r3, #12
 80048bc:	4313      	orrs	r3, r2
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	4313      	orrs	r3, r2
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a33      	ldr	r2, [pc, #204]	; (8004a10 <TIM_Base_SetConfig+0xe0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d013      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a32      	ldr	r2, [pc, #200]	; (8004a14 <TIM_Base_SetConfig+0xe4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00f      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004956:	d00b      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a2f      	ldr	r2, [pc, #188]	; (8004a18 <TIM_Base_SetConfig+0xe8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d007      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a2e      	ldr	r2, [pc, #184]	; (8004a1c <TIM_Base_SetConfig+0xec>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a2d      	ldr	r2, [pc, #180]	; (8004a20 <TIM_Base_SetConfig+0xf0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d108      	bne.n	8004982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a22      	ldr	r2, [pc, #136]	; (8004a10 <TIM_Base_SetConfig+0xe0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d013      	beq.n	80049b2 <TIM_Base_SetConfig+0x82>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a21      	ldr	r2, [pc, #132]	; (8004a14 <TIM_Base_SetConfig+0xe4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00f      	beq.n	80049b2 <TIM_Base_SetConfig+0x82>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004998:	d00b      	beq.n	80049b2 <TIM_Base_SetConfig+0x82>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <TIM_Base_SetConfig+0xe8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d007      	beq.n	80049b2 <TIM_Base_SetConfig+0x82>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <TIM_Base_SetConfig+0xec>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d003      	beq.n	80049b2 <TIM_Base_SetConfig+0x82>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a1c      	ldr	r2, [pc, #112]	; (8004a20 <TIM_Base_SetConfig+0xf0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d108      	bne.n	80049c4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <TIM_Base_SetConfig+0xe0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d003      	beq.n	80049f8 <TIM_Base_SetConfig+0xc8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a08      	ldr	r2, [pc, #32]	; (8004a14 <TIM_Base_SetConfig+0xe4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d103      	bne.n	8004a00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	615a      	str	r2, [r3, #20]
}
 8004a06:	bf00      	nop
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40013400 	.word	0x40013400
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40000c00 	.word	0x40000c00

08004a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e050      	b.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d018      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a19      	ldr	r2, [pc, #100]	; (8004aec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d013      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a92:	d00e      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d009      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a14      	ldr	r2, [pc, #80]	; (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d004      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d10c      	bne.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40013400 	.word	0x40013400
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800
 8004af8:	40000c00 	.word	0x40000c00

08004afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e03f      	b.n	8004b8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fd fdfc 	bl	8002720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2224      	movs	r2, #36	; 0x24
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f829 	bl	8004b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004bd2:	f023 030c 	bic.w	r3, r3, #12
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a2c      	ldr	r2, [pc, #176]	; (8004cac <UART_SetConfig+0x114>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d103      	bne.n	8004c08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c00:	f7ff fd3e 	bl	8004680 <HAL_RCC_GetPCLK2Freq>
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	e002      	b.n	8004c0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c08:	f7ff fd26 	bl	8004658 <HAL_RCC_GetPCLK1Freq>
 8004c0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009a      	lsls	r2, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	4a22      	ldr	r2, [pc, #136]	; (8004cb0 <UART_SetConfig+0x118>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	0119      	lsls	r1, r3, #4
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009a      	lsls	r2, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c44:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <UART_SetConfig+0x118>)
 8004c46:	fba3 0302 	umull	r0, r3, r3, r2
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	2064      	movs	r0, #100	; 0x64
 8004c4e:	fb00 f303 	mul.w	r3, r0, r3
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	3332      	adds	r3, #50	; 0x32
 8004c58:	4a15      	ldr	r2, [pc, #84]	; (8004cb0 <UART_SetConfig+0x118>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c64:	4419      	add	r1, r3
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009a      	lsls	r2, r3, #2
 8004c70:	441a      	add	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <UART_SetConfig+0x118>)
 8004c7e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	2064      	movs	r0, #100	; 0x64
 8004c86:	fb00 f303 	mul.w	r3, r0, r3
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	3332      	adds	r3, #50	; 0x32
 8004c90:	4a07      	ldr	r2, [pc, #28]	; (8004cb0 <UART_SetConfig+0x118>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	f003 020f 	and.w	r2, r3, #15
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40013800 	.word	0x40013800
 8004cb0:	51eb851f 	.word	0x51eb851f

08004cb4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cba:	f3ef 8305 	mrs	r3, IPSR
 8004cbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cca:	607b      	str	r3, [r7, #4]
  return(result);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <osKernelInitialize+0x32>
 8004cd2:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <osKernelInitialize+0x60>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d109      	bne.n	8004cee <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cda:	f3ef 8311 	mrs	r3, BASEPRI
 8004cde:	603b      	str	r3, [r7, #0]
  return(result);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004ce6:	f06f 0305 	mvn.w	r3, #5
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e00c      	b.n	8004d08 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cee:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <osKernelInitialize+0x60>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004cf6:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <osKernelInitialize+0x60>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e002      	b.n	8004d08 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d08:	68fb      	ldr	r3, [r7, #12]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr
 8004d14:	20000324 	.word	0x20000324

08004d18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d1e:	f3ef 8305 	mrs	r3, IPSR
 8004d22:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10f      	bne.n	8004d4a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2e:	607b      	str	r3, [r7, #4]
  return(result);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <osKernelStart+0x32>
 8004d36:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <osKernelStart+0x64>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d109      	bne.n	8004d52 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d42:	603b      	str	r3, [r7, #0]
  return(result);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004d4a:	f06f 0305 	mvn.w	r3, #5
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	e00e      	b.n	8004d70 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d52:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <osKernelStart+0x64>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d107      	bne.n	8004d6a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004d5a:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <osKernelStart+0x64>)
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004d60:	f001 f878 	bl	8005e54 <vTaskStartScheduler>
      stat = osOK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e002      	b.n	8004d70 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d70:	68fb      	ldr	r3, [r7, #12]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000324 	.word	0x20000324

08004d80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b092      	sub	sp, #72	; 0x48
 8004d84:	af04      	add	r7, sp, #16
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d90:	f3ef 8305 	mrs	r3, IPSR
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f040 8094 	bne.w	8004ec6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004da2:	623b      	str	r3, [r7, #32]
  return(result);
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f040 808d 	bne.w	8004ec6 <osThreadNew+0x146>
 8004dac:	4b48      	ldr	r3, [pc, #288]	; (8004ed0 <osThreadNew+0x150>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d106      	bne.n	8004dc2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004db4:	f3ef 8311 	mrs	r3, BASEPRI
 8004db8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f040 8082 	bne.w	8004ec6 <osThreadNew+0x146>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d07e      	beq.n	8004ec6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004dc8:	2380      	movs	r3, #128	; 0x80
 8004dca:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004dcc:	2318      	movs	r3, #24
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004dd4:	f107 031b 	add.w	r3, r7, #27
 8004dd8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d045      	beq.n	8004e72 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <osThreadNew+0x74>
        name = attr->name;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <osThreadNew+0x9a>
 8004e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0a:	2b38      	cmp	r3, #56	; 0x38
 8004e0c:	d805      	bhi.n	8004e1a <osThreadNew+0x9a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <osThreadNew+0x9e>
        return (NULL);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e054      	b.n	8004ec8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	089b      	lsrs	r3, r3, #2
 8004e2c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00e      	beq.n	8004e54 <osThreadNew+0xd4>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b5b      	cmp	r3, #91	; 0x5b
 8004e3c:	d90a      	bls.n	8004e54 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d006      	beq.n	8004e54 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <osThreadNew+0xd4>
        mem = 1;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e52:	e010      	b.n	8004e76 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10c      	bne.n	8004e76 <osThreadNew+0xf6>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d108      	bne.n	8004e76 <osThreadNew+0xf6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <osThreadNew+0xf6>
          mem = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e70:	e001      	b.n	8004e76 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d110      	bne.n	8004e9e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e84:	9202      	str	r2, [sp, #8]
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fe12 	bl	8005abc <xTaskCreateStatic>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	e013      	b.n	8004ec6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d110      	bne.n	8004ec6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	f107 0314 	add.w	r3, r7, #20
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fe5c 	bl	8005b74 <xTaskCreate>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d001      	beq.n	8004ec6 <osThreadNew+0x146>
          hTask = NULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ec6:	697b      	ldr	r3, [r7, #20]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3738      	adds	r7, #56	; 0x38
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000324 	.word	0x20000324

08004ed4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004edc:	f3ef 8305 	mrs	r3, IPSR
 8004ee0:	613b      	str	r3, [r7, #16]
  return(result);
 8004ee2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10f      	bne.n	8004f08 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8004eec:	60fb      	str	r3, [r7, #12]
  return(result);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d109      	bne.n	8004f08 <osDelay+0x34>
 8004ef4:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <osDelay+0x58>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d109      	bne.n	8004f10 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004efc:	f3ef 8311 	mrs	r3, BASEPRI
 8004f00:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <osDelay+0x3c>
    stat = osErrorISR;
 8004f08:	f06f 0305 	mvn.w	r3, #5
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	e007      	b.n	8004f20 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 ff66 	bl	8005dec <vTaskDelay>
    }
  }

  return (stat);
 8004f20:	697b      	ldr	r3, [r7, #20]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000324 	.word	0x20000324

08004f30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4a06      	ldr	r2, [pc, #24]	; (8004f58 <vApplicationGetIdleTaskMemory+0x28>)
 8004f40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4a05      	ldr	r2, [pc, #20]	; (8004f5c <vApplicationGetIdleTaskMemory+0x2c>)
 8004f46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2280      	movs	r2, #128	; 0x80
 8004f4c:	601a      	str	r2, [r3, #0]
}
 8004f4e:	bf00      	nop
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr
 8004f58:	20000328 	.word	0x20000328
 8004f5c:	20000384 	.word	0x20000384

08004f60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4a07      	ldr	r2, [pc, #28]	; (8004f8c <vApplicationGetTimerTaskMemory+0x2c>)
 8004f70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	4a06      	ldr	r2, [pc, #24]	; (8004f90 <vApplicationGetTimerTaskMemory+0x30>)
 8004f76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f7e:	601a      	str	r2, [r3, #0]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	20000584 	.word	0x20000584
 8004f90:	200005e0 	.word	0x200005e0

08004f94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f103 0208 	add.w	r2, r3, #8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f103 0208 	add.w	r2, r3, #8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f103 0208 	add.w	r2, r3, #8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr

08004fd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr

08004fea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	601a      	str	r2, [r3, #0]
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005046:	d103      	bne.n	8005050 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	e00c      	b.n	800506a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3308      	adds	r3, #8
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	e002      	b.n	800505e <vListInsert+0x2e>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	429a      	cmp	r2, r3
 8005068:	d2f6      	bcs.n	8005058 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	601a      	str	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr

080050a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6892      	ldr	r2, [r2, #8]
 80050b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6852      	ldr	r2, [r2, #4]
 80050c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d103      	bne.n	80050d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	1e5a      	subs	r2, r3, #1
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	4770      	bx	lr
	...

080050f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800511e:	f001 ffc5 	bl	80070ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512a:	68f9      	ldr	r1, [r7, #12]
 800512c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800512e:	fb01 f303 	mul.w	r3, r1, r3
 8005132:	441a      	add	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	3b01      	subs	r3, #1
 8005150:	68f9      	ldr	r1, [r7, #12]
 8005152:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005154:	fb01 f303 	mul.w	r3, r1, r3
 8005158:	441a      	add	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	22ff      	movs	r2, #255	; 0xff
 8005162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	22ff      	movs	r2, #255	; 0xff
 800516a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d114      	bne.n	800519e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01a      	beq.n	80051b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3310      	adds	r3, #16
 8005180:	4618      	mov	r0, r3
 8005182:	f001 f8f1 	bl	8006368 <xTaskRemoveFromEventList>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d012      	beq.n	80051b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800518c:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <xQueueGenericReset+0xcc>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	e009      	b.n	80051b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3310      	adds	r3, #16
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff fef6 	bl	8004f94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3324      	adds	r3, #36	; 0x24
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fef1 	bl	8004f94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051b2:	f001 ffab 	bl	800710c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051b6:	2301      	movs	r3, #1
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	e000ed04 	.word	0xe000ed04

080051c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08e      	sub	sp, #56	; 0x38
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <xQueueGenericCreateStatic+0x52>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <xQueueGenericCreateStatic+0x56>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueGenericCreateStatic+0x58>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	623b      	str	r3, [r7, #32]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d102      	bne.n	8005242 <xQueueGenericCreateStatic+0x7e>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <xQueueGenericCreateStatic+0x82>
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <xQueueGenericCreateStatic+0x84>
 8005246:	2300      	movs	r3, #0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	61fb      	str	r3, [r7, #28]
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005262:	2350      	movs	r3, #80	; 0x50
 8005264:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b50      	cmp	r3, #80	; 0x50
 800526a:	d00a      	beq.n	8005282 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	61bb      	str	r3, [r7, #24]
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00d      	beq.n	80052a8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005294:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	4613      	mov	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f805 	bl	80052b2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3730      	adds	r7, #48	; 0x30
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d103      	bne.n	80052ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	e002      	b.n	80052d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052e0:	2101      	movs	r1, #1
 80052e2:	69b8      	ldr	r0, [r7, #24]
 80052e4:	f7ff ff06 	bl	80050f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052f0:	bf00      	nop
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08e      	sub	sp, #56	; 0x38
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005306:	2300      	movs	r3, #0
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <xQueueGenericSend+0x32>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005326:	bf00      	nop
 8005328:	e7fe      	b.n	8005328 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <xQueueGenericSend+0x40>
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <xQueueGenericSend+0x44>
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <xQueueGenericSend+0x46>
 800533c:	2300      	movs	r3, #0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10a      	bne.n	8005358 <xQueueGenericSend+0x60>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005354:	bf00      	nop
 8005356:	e7fe      	b.n	8005356 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d103      	bne.n	8005366 <xQueueGenericSend+0x6e>
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <xQueueGenericSend+0x72>
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <xQueueGenericSend+0x74>
 800536a:	2300      	movs	r3, #0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <xQueueGenericSend+0x8e>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	623b      	str	r3, [r7, #32]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005386:	f001 f9b1 	bl	80066ec <xTaskGetSchedulerState>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d102      	bne.n	8005396 <xQueueGenericSend+0x9e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <xQueueGenericSend+0xa2>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <xQueueGenericSend+0xa4>
 800539a:	2300      	movs	r3, #0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	61fb      	str	r3, [r7, #28]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053b6:	f001 fe79 	bl	80070ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d302      	bcc.n	80053cc <xQueueGenericSend+0xd4>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d129      	bne.n	8005420 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053d2:	f000 fa07 	bl	80057e4 <prvCopyDataToQueue>
 80053d6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d010      	beq.n	8005402 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	3324      	adds	r3, #36	; 0x24
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 ffbf 	bl	8006368 <xTaskRemoveFromEventList>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d013      	beq.n	8005418 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053f0:	4b3f      	ldr	r3, [pc, #252]	; (80054f0 <xQueueGenericSend+0x1f8>)
 80053f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	e00a      	b.n	8005418 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005408:	4b39      	ldr	r3, [pc, #228]	; (80054f0 <xQueueGenericSend+0x1f8>)
 800540a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005418:	f001 fe78 	bl	800710c <vPortExitCritical>
				return pdPASS;
 800541c:	2301      	movs	r3, #1
 800541e:	e063      	b.n	80054e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d103      	bne.n	800542e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005426:	f001 fe71 	bl	800710c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800542a:	2300      	movs	r3, #0
 800542c:	e05c      	b.n	80054e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800542e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005430:	2b00      	cmp	r3, #0
 8005432:	d106      	bne.n	8005442 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005434:	f107 0314 	add.w	r3, r7, #20
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fff9 	bl	8006430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800543e:	2301      	movs	r3, #1
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005442:	f001 fe63 	bl	800710c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005446:	f000 fd6b 	bl	8005f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800544a:	f001 fe2f 	bl	80070ac <vPortEnterCritical>
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005454:	b25b      	sxtb	r3, r3
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800545a:	d103      	bne.n	8005464 <xQueueGenericSend+0x16c>
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800546a:	b25b      	sxtb	r3, r3
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005470:	d103      	bne.n	800547a <xQueueGenericSend+0x182>
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800547a:	f001 fe47 	bl	800710c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800547e:	1d3a      	adds	r2, r7, #4
 8005480:	f107 0314 	add.w	r3, r7, #20
 8005484:	4611      	mov	r1, r2
 8005486:	4618      	mov	r0, r3
 8005488:	f000 ffe8 	bl	800645c <xTaskCheckForTimeOut>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d124      	bne.n	80054dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005494:	f000 fa9e 	bl	80059d4 <prvIsQueueFull>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d018      	beq.n	80054d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	3310      	adds	r3, #16
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	4611      	mov	r1, r2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 ff0e 	bl	80062c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ae:	f000 fa29 	bl	8005904 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054b2:	f000 fd43 	bl	8005f3c <xTaskResumeAll>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f47f af7c 	bne.w	80053b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80054be:	4b0c      	ldr	r3, [pc, #48]	; (80054f0 <xQueueGenericSend+0x1f8>)
 80054c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	e772      	b.n	80053b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054d2:	f000 fa17 	bl	8005904 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054d6:	f000 fd31 	bl	8005f3c <xTaskResumeAll>
 80054da:	e76c      	b.n	80053b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054de:	f000 fa11 	bl	8005904 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054e2:	f000 fd2b 	bl	8005f3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054e6:	2300      	movs	r3, #0
		}
	}
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3738      	adds	r7, #56	; 0x38
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08e      	sub	sp, #56	; 0x38
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d103      	bne.n	8005530 <xQueueGenericSendFromISR+0x3c>
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <xQueueGenericSendFromISR+0x40>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <xQueueGenericSendFromISR+0x42>
 8005534:	2300      	movs	r3, #0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	623b      	str	r3, [r7, #32]
}
 800554c:	bf00      	nop
 800554e:	e7fe      	b.n	800554e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d103      	bne.n	800555e <xQueueGenericSendFromISR+0x6a>
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <xQueueGenericSendFromISR+0x6e>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <xQueueGenericSendFromISR+0x70>
 8005562:	2300      	movs	r3, #0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	61fb      	str	r3, [r7, #28]
}
 800557a:	bf00      	nop
 800557c:	e7fe      	b.n	800557c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800557e:	f001 fe57 	bl	8007230 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005582:	f3ef 8211 	mrs	r2, BASEPRI
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	61ba      	str	r2, [r7, #24]
 8005598:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800559a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <xQueueGenericSendFromISR+0xbc>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d12c      	bne.n	800560a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055c0:	f000 f910 	bl	80057e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80055c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055cc:	d112      	bne.n	80055f4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d016      	beq.n	8005604 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	3324      	adds	r3, #36	; 0x24
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fec4 	bl	8006368 <xTaskRemoveFromEventList>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00e      	beq.n	8005604 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e007      	b.n	8005604 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055f8:	3301      	adds	r3, #1
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	b25a      	sxtb	r2, r3
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005604:	2301      	movs	r3, #1
 8005606:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005608:	e001      	b.n	800560e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800560a:	2300      	movs	r3, #0
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005618:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800561a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800561c:	4618      	mov	r0, r3
 800561e:	3738      	adds	r7, #56	; 0x38
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08c      	sub	sp, #48	; 0x30
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005630:	2300      	movs	r3, #0
 8005632:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <xQueueReceive+0x30>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	623b      	str	r3, [r7, #32]
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d103      	bne.n	8005662 <xQueueReceive+0x3e>
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <xQueueReceive+0x42>
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <xQueueReceive+0x44>
 8005666:	2300      	movs	r3, #0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10a      	bne.n	8005682 <xQueueReceive+0x5e>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	61fb      	str	r3, [r7, #28]
}
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005682:	f001 f833 	bl	80066ec <xTaskGetSchedulerState>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <xQueueReceive+0x6e>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <xQueueReceive+0x72>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <xQueueReceive+0x74>
 8005696:	2300      	movs	r3, #0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10a      	bne.n	80056b2 <xQueueReceive+0x8e>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	61bb      	str	r3, [r7, #24]
}
 80056ae:	bf00      	nop
 80056b0:	e7fe      	b.n	80056b0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80056b2:	f001 fcfb 	bl	80070ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d01f      	beq.n	8005702 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056c2:	68b9      	ldr	r1, [r7, #8]
 80056c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056c6:	f000 f8f7 	bl	80058b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	1e5a      	subs	r2, r3, #1
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00f      	beq.n	80056fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	3310      	adds	r3, #16
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fe42 	bl	8006368 <xTaskRemoveFromEventList>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056ea:	4b3d      	ldr	r3, [pc, #244]	; (80057e0 <xQueueReceive+0x1bc>)
 80056ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056fa:	f001 fd07 	bl	800710c <vPortExitCritical>
				return pdPASS;
 80056fe:	2301      	movs	r3, #1
 8005700:	e069      	b.n	80057d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d103      	bne.n	8005710 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005708:	f001 fd00 	bl	800710c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800570c:	2300      	movs	r3, #0
 800570e:	e062      	b.n	80057d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005716:	f107 0310 	add.w	r3, r7, #16
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fe88 	bl	8006430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005720:	2301      	movs	r3, #1
 8005722:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005724:	f001 fcf2 	bl	800710c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005728:	f000 fbfa 	bl	8005f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800572c:	f001 fcbe 	bl	80070ac <vPortEnterCritical>
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005736:	b25b      	sxtb	r3, r3
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800573c:	d103      	bne.n	8005746 <xQueueReceive+0x122>
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800574c:	b25b      	sxtb	r3, r3
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005752:	d103      	bne.n	800575c <xQueueReceive+0x138>
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800575c:	f001 fcd6 	bl	800710c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005760:	1d3a      	adds	r2, r7, #4
 8005762:	f107 0310 	add.w	r3, r7, #16
 8005766:	4611      	mov	r1, r2
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fe77 	bl	800645c <xTaskCheckForTimeOut>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d123      	bne.n	80057bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005776:	f000 f917 	bl	80059a8 <prvIsQueueEmpty>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d017      	beq.n	80057b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	3324      	adds	r3, #36	; 0x24
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	4611      	mov	r1, r2
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fd9d 	bl	80062c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800578e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005790:	f000 f8b8 	bl	8005904 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005794:	f000 fbd2 	bl	8005f3c <xTaskResumeAll>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d189      	bne.n	80056b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800579e:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <xQueueReceive+0x1bc>)
 80057a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	e780      	b.n	80056b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057b2:	f000 f8a7 	bl	8005904 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057b6:	f000 fbc1 	bl	8005f3c <xTaskResumeAll>
 80057ba:	e77a      	b.n	80056b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057be:	f000 f8a1 	bl	8005904 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057c2:	f000 fbbb 	bl	8005f3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057c8:	f000 f8ee 	bl	80059a8 <prvIsQueueEmpty>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f43f af6f 	beq.w	80056b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3730      	adds	r7, #48	; 0x30
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10d      	bne.n	800581e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d14d      	bne.n	80058a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 ff8a 	bl	8006728 <xTaskPriorityDisinherit>
 8005814:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	605a      	str	r2, [r3, #4]
 800581c:	e043      	b.n	80058a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d119      	bne.n	8005858 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6898      	ldr	r0, [r3, #8]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	461a      	mov	r2, r3
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	f002 f816 	bl	8007860 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	441a      	add	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	429a      	cmp	r2, r3
 800584c:	d32b      	bcc.n	80058a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	609a      	str	r2, [r3, #8]
 8005856:	e026      	b.n	80058a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68d8      	ldr	r0, [r3, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	461a      	mov	r2, r3
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	f001 fffc 	bl	8007860 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	425b      	negs	r3, r3
 8005872:	441a      	add	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	d207      	bcs.n	8005894 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	425b      	negs	r3, r3
 800588e:	441a      	add	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d105      	bne.n	80058a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058ae:	697b      	ldr	r3, [r7, #20]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d018      	beq.n	80058fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	441a      	add	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d303      	bcc.n	80058ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68d9      	ldr	r1, [r3, #12]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	461a      	mov	r2, r3
 80058f6:	6838      	ldr	r0, [r7, #0]
 80058f8:	f001 ffb2 	bl	8007860 <memcpy>
	}
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800590c:	f001 fbce 	bl	80070ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005916:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005918:	e011      	b.n	800593e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	d012      	beq.n	8005948 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3324      	adds	r3, #36	; 0x24
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fd1e 	bl	8006368 <xTaskRemoveFromEventList>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005932:	f000 fdf5 	bl	8006520 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	3b01      	subs	r3, #1
 800593a:	b2db      	uxtb	r3, r3
 800593c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800593e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005942:	2b00      	cmp	r3, #0
 8005944:	dce9      	bgt.n	800591a <prvUnlockQueue+0x16>
 8005946:	e000      	b.n	800594a <prvUnlockQueue+0x46>
					break;
 8005948:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	22ff      	movs	r2, #255	; 0xff
 800594e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005952:	f001 fbdb 	bl	800710c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005956:	f001 fba9 	bl	80070ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005960:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005962:	e011      	b.n	8005988 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d012      	beq.n	8005992 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3310      	adds	r3, #16
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fcf9 	bl	8006368 <xTaskRemoveFromEventList>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800597c:	f000 fdd0 	bl	8006520 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005980:	7bbb      	ldrb	r3, [r7, #14]
 8005982:	3b01      	subs	r3, #1
 8005984:	b2db      	uxtb	r3, r3
 8005986:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800598c:	2b00      	cmp	r3, #0
 800598e:	dce9      	bgt.n	8005964 <prvUnlockQueue+0x60>
 8005990:	e000      	b.n	8005994 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005992:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	22ff      	movs	r2, #255	; 0xff
 8005998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800599c:	f001 fbb6 	bl	800710c <vPortExitCritical>
}
 80059a0:	bf00      	nop
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059b0:	f001 fb7c 	bl	80070ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059bc:	2301      	movs	r3, #1
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	e001      	b.n	80059c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059c6:	f001 fba1 	bl	800710c <vPortExitCritical>

	return xReturn;
 80059ca:	68fb      	ldr	r3, [r7, #12]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059dc:	f001 fb66 	bl	80070ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d102      	bne.n	80059f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059ec:	2301      	movs	r3, #1
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	e001      	b.n	80059f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059f6:	f001 fb89 	bl	800710c <vPortExitCritical>

	return xReturn;
 80059fa:	68fb      	ldr	r3, [r7, #12]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	e014      	b.n	8005a3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a14:	4a0e      	ldr	r2, [pc, #56]	; (8005a50 <vQueueAddToRegistry+0x4c>)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10b      	bne.n	8005a38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a20:	490b      	ldr	r1, [pc, #44]	; (8005a50 <vQueueAddToRegistry+0x4c>)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a2a:	4a09      	ldr	r2, [pc, #36]	; (8005a50 <vQueueAddToRegistry+0x4c>)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4413      	add	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a36:	e006      	b.n	8005a46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b07      	cmp	r3, #7
 8005a42:	d9e7      	bls.n	8005a14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr
 8005a50:	200009e0 	.word	0x200009e0

08005a54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a64:	f001 fb22 	bl	80070ac <vPortEnterCritical>
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a6e:	b25b      	sxtb	r3, r3
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a74:	d103      	bne.n	8005a7e <vQueueWaitForMessageRestricted+0x2a>
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a84:	b25b      	sxtb	r3, r3
 8005a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a8a:	d103      	bne.n	8005a94 <vQueueWaitForMessageRestricted+0x40>
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a94:	f001 fb3a 	bl	800710c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d106      	bne.n	8005aae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	3324      	adds	r3, #36	; 0x24
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fc31 	bl	8006310 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005aae:	6978      	ldr	r0, [r7, #20]
 8005ab0:	f7ff ff28 	bl	8005904 <prvUnlockQueue>
	}
 8005ab4:	bf00      	nop
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08e      	sub	sp, #56	; 0x38
 8005ac0:	af04      	add	r7, sp, #16
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10a      	bne.n	8005ae6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	623b      	str	r3, [r7, #32]
}
 8005ae2:	bf00      	nop
 8005ae4:	e7fe      	b.n	8005ae4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10a      	bne.n	8005b02 <xTaskCreateStatic+0x46>
	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	61fb      	str	r3, [r7, #28]
}
 8005afe:	bf00      	nop
 8005b00:	e7fe      	b.n	8005b00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b02:	235c      	movs	r3, #92	; 0x5c
 8005b04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b5c      	cmp	r3, #92	; 0x5c
 8005b0a:	d00a      	beq.n	8005b22 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	61bb      	str	r3, [r7, #24]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01e      	beq.n	8005b66 <xTaskCreateStatic+0xaa>
 8005b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d01b      	beq.n	8005b66 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b40:	2300      	movs	r3, #0
 8005b42:	9303      	str	r3, [sp, #12]
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	9302      	str	r3, [sp, #8]
 8005b48:	f107 0314 	add.w	r3, r7, #20
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f850 	bl	8005bfe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b60:	f000 f8d4 	bl	8005d0c <prvAddNewTaskToReadyList>
 8005b64:	e001      	b.n	8005b6a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b6a:	697b      	ldr	r3, [r7, #20]
	}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3728      	adds	r7, #40	; 0x28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08c      	sub	sp, #48	; 0x30
 8005b78:	af04      	add	r7, sp, #16
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	4613      	mov	r3, r2
 8005b82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b84:	88fb      	ldrh	r3, [r7, #6]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fb8f 	bl	80072ac <pvPortMalloc>
 8005b8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00e      	beq.n	8005bb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005b96:	205c      	movs	r0, #92	; 0x5c
 8005b98:	f001 fb88 	bl	80072ac <pvPortMalloc>
 8005b9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8005baa:	e005      	b.n	8005bb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bac:	6978      	ldr	r0, [r7, #20]
 8005bae:	f001 fc41 	bl	8007434 <vPortFree>
 8005bb2:	e001      	b.n	8005bb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d017      	beq.n	8005bee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bc6:	88fa      	ldrh	r2, [r7, #6]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	9303      	str	r3, [sp, #12]
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	9302      	str	r3, [sp, #8]
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	9301      	str	r3, [sp, #4]
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f80e 	bl	8005bfe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005be2:	69f8      	ldr	r0, [r7, #28]
 8005be4:	f000 f892 	bl	8005d0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005be8:	2301      	movs	r3, #1
 8005bea:	61bb      	str	r3, [r7, #24]
 8005bec:	e002      	b.n	8005bf4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bf2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
	}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3720      	adds	r7, #32
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b088      	sub	sp, #32
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
 8005c0a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	461a      	mov	r2, r3
 8005c16:	21a5      	movs	r1, #165	; 0xa5
 8005c18:	f001 fe30 	bl	800787c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c26:	3b01      	subs	r3, #1
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f023 0307 	bic.w	r3, r3, #7
 8005c34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00a      	beq.n	8005c56 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	617b      	str	r3, [r7, #20]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c56:	2300      	movs	r3, #0
 8005c58:	61fb      	str	r3, [r7, #28]
 8005c5a:	e012      	b.n	8005c82 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	4413      	add	r3, r2
 8005c62:	7819      	ldrb	r1, [r3, #0]
 8005c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	3334      	adds	r3, #52	; 0x34
 8005c6c:	460a      	mov	r2, r1
 8005c6e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	4413      	add	r3, r2
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d006      	beq.n	8005c8a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	2b0f      	cmp	r3, #15
 8005c86:	d9e9      	bls.n	8005c5c <prvInitialiseNewTask+0x5e>
 8005c88:	e000      	b.n	8005c8c <prvInitialiseNewTask+0x8e>
		{
			break;
 8005c8a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	2b37      	cmp	r3, #55	; 0x37
 8005c98:	d901      	bls.n	8005c9e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c9a:	2337      	movs	r3, #55	; 0x37
 8005c9c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	2200      	movs	r2, #0
 8005cae:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff f98c 	bl	8004fd2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	3318      	adds	r3, #24
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff f987 	bl	8004fd2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ccc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	2200      	movs	r2, #0
 8005cde:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	68f9      	ldr	r1, [r7, #12]
 8005cec:	69b8      	ldr	r0, [r7, #24]
 8005cee:	f001 f8ef 	bl	8006ed0 <pxPortInitialiseStack>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d04:	bf00      	nop
 8005d06:	3720      	adds	r7, #32
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d14:	f001 f9ca 	bl	80070ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d18:	4b2d      	ldr	r3, [pc, #180]	; (8005dd0 <prvAddNewTaskToReadyList+0xc4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	4a2c      	ldr	r2, [pc, #176]	; (8005dd0 <prvAddNewTaskToReadyList+0xc4>)
 8005d20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d22:	4b2c      	ldr	r3, [pc, #176]	; (8005dd4 <prvAddNewTaskToReadyList+0xc8>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d109      	bne.n	8005d3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d2a:	4a2a      	ldr	r2, [pc, #168]	; (8005dd4 <prvAddNewTaskToReadyList+0xc8>)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d30:	4b27      	ldr	r3, [pc, #156]	; (8005dd0 <prvAddNewTaskToReadyList+0xc4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d110      	bne.n	8005d5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d38:	f000 fc16 	bl	8006568 <prvInitialiseTaskLists>
 8005d3c:	e00d      	b.n	8005d5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d3e:	4b26      	ldr	r3, [pc, #152]	; (8005dd8 <prvAddNewTaskToReadyList+0xcc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d46:	4b23      	ldr	r3, [pc, #140]	; (8005dd4 <prvAddNewTaskToReadyList+0xc8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d802      	bhi.n	8005d5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d54:	4a1f      	ldr	r2, [pc, #124]	; (8005dd4 <prvAddNewTaskToReadyList+0xc8>)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d5a:	4b20      	ldr	r3, [pc, #128]	; (8005ddc <prvAddNewTaskToReadyList+0xd0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <prvAddNewTaskToReadyList+0xd0>)
 8005d62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d64:	4b1d      	ldr	r3, [pc, #116]	; (8005ddc <prvAddNewTaskToReadyList+0xd0>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d70:	4b1b      	ldr	r3, [pc, #108]	; (8005de0 <prvAddNewTaskToReadyList+0xd4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d903      	bls.n	8005d80 <prvAddNewTaskToReadyList+0x74>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	4a18      	ldr	r2, [pc, #96]	; (8005de0 <prvAddNewTaskToReadyList+0xd4>)
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4a15      	ldr	r2, [pc, #84]	; (8005de4 <prvAddNewTaskToReadyList+0xd8>)
 8005d8e:	441a      	add	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f7ff f927 	bl	8004fea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d9c:	f001 f9b6 	bl	800710c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005da0:	4b0d      	ldr	r3, [pc, #52]	; (8005dd8 <prvAddNewTaskToReadyList+0xcc>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00e      	beq.n	8005dc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005da8:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <prvAddNewTaskToReadyList+0xc8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d207      	bcs.n	8005dc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005db6:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <prvAddNewTaskToReadyList+0xdc>)
 8005db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000ef4 	.word	0x20000ef4
 8005dd4:	20000a20 	.word	0x20000a20
 8005dd8:	20000f00 	.word	0x20000f00
 8005ddc:	20000f10 	.word	0x20000f10
 8005de0:	20000efc 	.word	0x20000efc
 8005de4:	20000a24 	.word	0x20000a24
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d017      	beq.n	8005e2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dfe:	4b13      	ldr	r3, [pc, #76]	; (8005e4c <vTaskDelay+0x60>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <vTaskDelay+0x30>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	60bb      	str	r3, [r7, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e1c:	f000 f880 	bl	8005f20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e20:	2100      	movs	r1, #0
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fcee 	bl	8006804 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e28:	f000 f888 	bl	8005f3c <xTaskResumeAll>
 8005e2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d107      	bne.n	8005e44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e34:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <vTaskDelay+0x64>)
 8005e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20000f1c 	.word	0x20000f1c
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08a      	sub	sp, #40	; 0x28
 8005e58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e62:	463a      	mov	r2, r7
 8005e64:	1d39      	adds	r1, r7, #4
 8005e66:	f107 0308 	add.w	r3, r7, #8
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff f860 	bl	8004f30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	9202      	str	r2, [sp, #8]
 8005e78:	9301      	str	r3, [sp, #4]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	460a      	mov	r2, r1
 8005e82:	4921      	ldr	r1, [pc, #132]	; (8005f08 <vTaskStartScheduler+0xb4>)
 8005e84:	4821      	ldr	r0, [pc, #132]	; (8005f0c <vTaskStartScheduler+0xb8>)
 8005e86:	f7ff fe19 	bl	8005abc <xTaskCreateStatic>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	4a20      	ldr	r2, [pc, #128]	; (8005f10 <vTaskStartScheduler+0xbc>)
 8005e8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e90:	4b1f      	ldr	r3, [pc, #124]	; (8005f10 <vTaskStartScheduler+0xbc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	e001      	b.n	8005ea2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d102      	bne.n	8005eae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ea8:	f000 fd00 	bl	80068ac <xTimerCreateTimerTask>
 8005eac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d116      	bne.n	8005ee2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	613b      	str	r3, [r7, #16]
}
 8005ec6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ec8:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <vTaskStartScheduler+0xc0>)
 8005eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ece:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ed0:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <vTaskStartScheduler+0xc4>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005ed6:	4b11      	ldr	r3, [pc, #68]	; (8005f1c <vTaskStartScheduler+0xc8>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005edc:	f001 f874 	bl	8006fc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ee0:	e00e      	b.n	8005f00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee8:	d10a      	bne.n	8005f00 <vTaskStartScheduler+0xac>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	60fb      	str	r3, [r7, #12]
}
 8005efc:	bf00      	nop
 8005efe:	e7fe      	b.n	8005efe <vTaskStartScheduler+0xaa>
}
 8005f00:	bf00      	nop
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	08007b58 	.word	0x08007b58
 8005f0c:	08006539 	.word	0x08006539
 8005f10:	20000f18 	.word	0x20000f18
 8005f14:	20000f14 	.word	0x20000f14
 8005f18:	20000f00 	.word	0x20000f00
 8005f1c:	20000ef8 	.word	0x20000ef8

08005f20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f24:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <vTaskSuspendAll+0x18>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	4a03      	ldr	r2, [pc, #12]	; (8005f38 <vTaskSuspendAll+0x18>)
 8005f2c:	6013      	str	r3, [r2, #0]
}
 8005f2e:	bf00      	nop
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	20000f1c 	.word	0x20000f1c

08005f3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f4a:	4b42      	ldr	r3, [pc, #264]	; (8006054 <xTaskResumeAll+0x118>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	603b      	str	r3, [r7, #0]
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f68:	f001 f8a0 	bl	80070ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f6c:	4b39      	ldr	r3, [pc, #228]	; (8006054 <xTaskResumeAll+0x118>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	4a38      	ldr	r2, [pc, #224]	; (8006054 <xTaskResumeAll+0x118>)
 8005f74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f76:	4b37      	ldr	r3, [pc, #220]	; (8006054 <xTaskResumeAll+0x118>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d162      	bne.n	8006044 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f7e:	4b36      	ldr	r3, [pc, #216]	; (8006058 <xTaskResumeAll+0x11c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d05e      	beq.n	8006044 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f86:	e02f      	b.n	8005fe8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005f88:	4b34      	ldr	r3, [pc, #208]	; (800605c <xTaskResumeAll+0x120>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3318      	adds	r3, #24
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff f883 	bl	80050a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff f87e 	bl	80050a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa8:	4b2d      	ldr	r3, [pc, #180]	; (8006060 <xTaskResumeAll+0x124>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d903      	bls.n	8005fb8 <xTaskResumeAll+0x7c>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	4a2a      	ldr	r2, [pc, #168]	; (8006060 <xTaskResumeAll+0x124>)
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4a27      	ldr	r2, [pc, #156]	; (8006064 <xTaskResumeAll+0x128>)
 8005fc6:	441a      	add	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	f7ff f80b 	bl	8004fea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd8:	4b23      	ldr	r3, [pc, #140]	; (8006068 <xTaskResumeAll+0x12c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d302      	bcc.n	8005fe8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005fe2:	4b22      	ldr	r3, [pc, #136]	; (800606c <xTaskResumeAll+0x130>)
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fe8:	4b1c      	ldr	r3, [pc, #112]	; (800605c <xTaskResumeAll+0x120>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1cb      	bne.n	8005f88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ff6:	f000 fb55 	bl	80066a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ffa:	4b1d      	ldr	r3, [pc, #116]	; (8006070 <xTaskResumeAll+0x134>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d010      	beq.n	8006028 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006006:	f000 f845 	bl	8006094 <xTaskIncrementTick>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006010:	4b16      	ldr	r3, [pc, #88]	; (800606c <xTaskResumeAll+0x130>)
 8006012:	2201      	movs	r2, #1
 8006014:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3b01      	subs	r3, #1
 800601a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f1      	bne.n	8006006 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006022:	4b13      	ldr	r3, [pc, #76]	; (8006070 <xTaskResumeAll+0x134>)
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006028:	4b10      	ldr	r3, [pc, #64]	; (800606c <xTaskResumeAll+0x130>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d009      	beq.n	8006044 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006030:	2301      	movs	r3, #1
 8006032:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006034:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <xTaskResumeAll+0x138>)
 8006036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006044:	f001 f862 	bl	800710c <vPortExitCritical>

	return xAlreadyYielded;
 8006048:	68bb      	ldr	r3, [r7, #8]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000f1c 	.word	0x20000f1c
 8006058:	20000ef4 	.word	0x20000ef4
 800605c:	20000eb4 	.word	0x20000eb4
 8006060:	20000efc 	.word	0x20000efc
 8006064:	20000a24 	.word	0x20000a24
 8006068:	20000a20 	.word	0x20000a20
 800606c:	20000f08 	.word	0x20000f08
 8006070:	20000f04 	.word	0x20000f04
 8006074:	e000ed04 	.word	0xe000ed04

08006078 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800607e:	4b04      	ldr	r3, [pc, #16]	; (8006090 <xTaskGetTickCount+0x18>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006084:	687b      	ldr	r3, [r7, #4]
}
 8006086:	4618      	mov	r0, r3
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	bc80      	pop	{r7}
 800608e:	4770      	bx	lr
 8006090:	20000ef8 	.word	0x20000ef8

08006094 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800609a:	2300      	movs	r3, #0
 800609c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800609e:	4b51      	ldr	r3, [pc, #324]	; (80061e4 <xTaskIncrementTick+0x150>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 808e 	bne.w	80061c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060a8:	4b4f      	ldr	r3, [pc, #316]	; (80061e8 <xTaskIncrementTick+0x154>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3301      	adds	r3, #1
 80060ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060b0:	4a4d      	ldr	r2, [pc, #308]	; (80061e8 <xTaskIncrementTick+0x154>)
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d120      	bne.n	80060fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060bc:	4b4b      	ldr	r3, [pc, #300]	; (80061ec <xTaskIncrementTick+0x158>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <xTaskIncrementTick+0x48>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	603b      	str	r3, [r7, #0]
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <xTaskIncrementTick+0x46>
 80060dc:	4b43      	ldr	r3, [pc, #268]	; (80061ec <xTaskIncrementTick+0x158>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	4b43      	ldr	r3, [pc, #268]	; (80061f0 <xTaskIncrementTick+0x15c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a41      	ldr	r2, [pc, #260]	; (80061ec <xTaskIncrementTick+0x158>)
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	4a41      	ldr	r2, [pc, #260]	; (80061f0 <xTaskIncrementTick+0x15c>)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	4b40      	ldr	r3, [pc, #256]	; (80061f4 <xTaskIncrementTick+0x160>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3301      	adds	r3, #1
 80060f6:	4a3f      	ldr	r2, [pc, #252]	; (80061f4 <xTaskIncrementTick+0x160>)
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	f000 fad3 	bl	80066a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060fe:	4b3e      	ldr	r3, [pc, #248]	; (80061f8 <xTaskIncrementTick+0x164>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	429a      	cmp	r2, r3
 8006106:	d34e      	bcc.n	80061a6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006108:	4b38      	ldr	r3, [pc, #224]	; (80061ec <xTaskIncrementTick+0x158>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <xTaskIncrementTick+0x82>
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <xTaskIncrementTick+0x84>
 8006116:	2300      	movs	r3, #0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d004      	beq.n	8006126 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800611c:	4b36      	ldr	r3, [pc, #216]	; (80061f8 <xTaskIncrementTick+0x164>)
 800611e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006122:	601a      	str	r2, [r3, #0]
					break;
 8006124:	e03f      	b.n	80061a6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006126:	4b31      	ldr	r3, [pc, #196]	; (80061ec <xTaskIncrementTick+0x158>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	429a      	cmp	r2, r3
 800613c:	d203      	bcs.n	8006146 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800613e:	4a2e      	ldr	r2, [pc, #184]	; (80061f8 <xTaskIncrementTick+0x164>)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6013      	str	r3, [r2, #0]
						break;
 8006144:	e02f      	b.n	80061a6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	3304      	adds	r3, #4
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe ffa8 	bl	80050a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	3318      	adds	r3, #24
 800615c:	4618      	mov	r0, r3
 800615e:	f7fe ff9f 	bl	80050a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006166:	4b25      	ldr	r3, [pc, #148]	; (80061fc <xTaskIncrementTick+0x168>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d903      	bls.n	8006176 <xTaskIncrementTick+0xe2>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	4a22      	ldr	r2, [pc, #136]	; (80061fc <xTaskIncrementTick+0x168>)
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4a1f      	ldr	r2, [pc, #124]	; (8006200 <xTaskIncrementTick+0x16c>)
 8006184:	441a      	add	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	3304      	adds	r3, #4
 800618a:	4619      	mov	r1, r3
 800618c:	4610      	mov	r0, r2
 800618e:	f7fe ff2c 	bl	8004fea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006196:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <xTaskIncrementTick+0x170>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	429a      	cmp	r2, r3
 800619e:	d3b3      	bcc.n	8006108 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061a4:	e7b0      	b.n	8006108 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061a6:	4b17      	ldr	r3, [pc, #92]	; (8006204 <xTaskIncrementTick+0x170>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ac:	4914      	ldr	r1, [pc, #80]	; (8006200 <xTaskIncrementTick+0x16c>)
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	440b      	add	r3, r1
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d907      	bls.n	80061ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80061be:	2301      	movs	r3, #1
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	e004      	b.n	80061ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80061c4:	4b10      	ldr	r3, [pc, #64]	; (8006208 <xTaskIncrementTick+0x174>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3301      	adds	r3, #1
 80061ca:	4a0f      	ldr	r2, [pc, #60]	; (8006208 <xTaskIncrementTick+0x174>)
 80061cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80061ce:	4b0f      	ldr	r3, [pc, #60]	; (800620c <xTaskIncrementTick+0x178>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80061d6:	2301      	movs	r3, #1
 80061d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80061da:	697b      	ldr	r3, [r7, #20]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20000f1c 	.word	0x20000f1c
 80061e8:	20000ef8 	.word	0x20000ef8
 80061ec:	20000eac 	.word	0x20000eac
 80061f0:	20000eb0 	.word	0x20000eb0
 80061f4:	20000f0c 	.word	0x20000f0c
 80061f8:	20000f14 	.word	0x20000f14
 80061fc:	20000efc 	.word	0x20000efc
 8006200:	20000a24 	.word	0x20000a24
 8006204:	20000a20 	.word	0x20000a20
 8006208:	20000f04 	.word	0x20000f04
 800620c:	20000f08 	.word	0x20000f08

08006210 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006216:	4b27      	ldr	r3, [pc, #156]	; (80062b4 <vTaskSwitchContext+0xa4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800621e:	4b26      	ldr	r3, [pc, #152]	; (80062b8 <vTaskSwitchContext+0xa8>)
 8006220:	2201      	movs	r2, #1
 8006222:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006224:	e041      	b.n	80062aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006226:	4b24      	ldr	r3, [pc, #144]	; (80062b8 <vTaskSwitchContext+0xa8>)
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800622c:	4b23      	ldr	r3, [pc, #140]	; (80062bc <vTaskSwitchContext+0xac>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	e010      	b.n	8006256 <vTaskSwitchContext+0x46>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10a      	bne.n	8006250 <vTaskSwitchContext+0x40>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	607b      	str	r3, [r7, #4]
}
 800624c:	bf00      	nop
 800624e:	e7fe      	b.n	800624e <vTaskSwitchContext+0x3e>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3b01      	subs	r3, #1
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	491a      	ldr	r1, [pc, #104]	; (80062c0 <vTaskSwitchContext+0xb0>)
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	440b      	add	r3, r1
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0e4      	beq.n	8006234 <vTaskSwitchContext+0x24>
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4613      	mov	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4a12      	ldr	r2, [pc, #72]	; (80062c0 <vTaskSwitchContext+0xb0>)
 8006276:	4413      	add	r3, r2
 8006278:	60bb      	str	r3, [r7, #8]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	605a      	str	r2, [r3, #4]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	3308      	adds	r3, #8
 800628c:	429a      	cmp	r2, r3
 800628e:	d104      	bne.n	800629a <vTaskSwitchContext+0x8a>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	605a      	str	r2, [r3, #4]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	4a08      	ldr	r2, [pc, #32]	; (80062c4 <vTaskSwitchContext+0xb4>)
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	4a05      	ldr	r2, [pc, #20]	; (80062bc <vTaskSwitchContext+0xac>)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6013      	str	r3, [r2, #0]
}
 80062aa:	bf00      	nop
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bc80      	pop	{r7}
 80062b2:	4770      	bx	lr
 80062b4:	20000f1c 	.word	0x20000f1c
 80062b8:	20000f08 	.word	0x20000f08
 80062bc:	20000efc 	.word	0x20000efc
 80062c0:	20000a24 	.word	0x20000a24
 80062c4:	20000a20 	.word	0x20000a20

080062c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	60fb      	str	r3, [r7, #12]
}
 80062ea:	bf00      	nop
 80062ec:	e7fe      	b.n	80062ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062ee:	4b07      	ldr	r3, [pc, #28]	; (800630c <vTaskPlaceOnEventList+0x44>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3318      	adds	r3, #24
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7fe fe9a 	bl	8005030 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062fc:	2101      	movs	r1, #1
 80062fe:	6838      	ldr	r0, [r7, #0]
 8006300:	f000 fa80 	bl	8006804 <prvAddCurrentTaskToDelayedList>
}
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	20000a20 	.word	0x20000a20

08006310 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	617b      	str	r3, [r7, #20]
}
 8006334:	bf00      	nop
 8006336:	e7fe      	b.n	8006336 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006338:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <vTaskPlaceOnEventListRestricted+0x54>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3318      	adds	r3, #24
 800633e:	4619      	mov	r1, r3
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f7fe fe52 	bl	8004fea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800634c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006350:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	68b8      	ldr	r0, [r7, #8]
 8006356:	f000 fa55 	bl	8006804 <prvAddCurrentTaskToDelayedList>
	}
 800635a:	bf00      	nop
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000a20 	.word	0x20000a20

08006368 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	60fb      	str	r3, [r7, #12]
}
 8006390:	bf00      	nop
 8006392:	e7fe      	b.n	8006392 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	3318      	adds	r3, #24
 8006398:	4618      	mov	r0, r3
 800639a:	f7fe fe81 	bl	80050a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800639e:	4b1e      	ldr	r3, [pc, #120]	; (8006418 <xTaskRemoveFromEventList+0xb0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d11d      	bne.n	80063e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	3304      	adds	r3, #4
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe fe78 	bl	80050a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b4:	4b19      	ldr	r3, [pc, #100]	; (800641c <xTaskRemoveFromEventList+0xb4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d903      	bls.n	80063c4 <xTaskRemoveFromEventList+0x5c>
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	4a16      	ldr	r2, [pc, #88]	; (800641c <xTaskRemoveFromEventList+0xb4>)
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c8:	4613      	mov	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4a13      	ldr	r2, [pc, #76]	; (8006420 <xTaskRemoveFromEventList+0xb8>)
 80063d2:	441a      	add	r2, r3
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	3304      	adds	r3, #4
 80063d8:	4619      	mov	r1, r3
 80063da:	4610      	mov	r0, r2
 80063dc:	f7fe fe05 	bl	8004fea <vListInsertEnd>
 80063e0:	e005      	b.n	80063ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	3318      	adds	r3, #24
 80063e6:	4619      	mov	r1, r3
 80063e8:	480e      	ldr	r0, [pc, #56]	; (8006424 <xTaskRemoveFromEventList+0xbc>)
 80063ea:	f7fe fdfe 	bl	8004fea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f2:	4b0d      	ldr	r3, [pc, #52]	; (8006428 <xTaskRemoveFromEventList+0xc0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d905      	bls.n	8006408 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063fc:	2301      	movs	r3, #1
 80063fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <xTaskRemoveFromEventList+0xc4>)
 8006402:	2201      	movs	r2, #1
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e001      	b.n	800640c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006408:	2300      	movs	r3, #0
 800640a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800640c:	697b      	ldr	r3, [r7, #20]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000f1c 	.word	0x20000f1c
 800641c:	20000efc 	.word	0x20000efc
 8006420:	20000a24 	.word	0x20000a24
 8006424:	20000eb4 	.word	0x20000eb4
 8006428:	20000a20 	.word	0x20000a20
 800642c:	20000f08 	.word	0x20000f08

08006430 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006438:	4b06      	ldr	r3, [pc, #24]	; (8006454 <vTaskInternalSetTimeOutState+0x24>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006440:	4b05      	ldr	r3, [pc, #20]	; (8006458 <vTaskInternalSetTimeOutState+0x28>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	605a      	str	r2, [r3, #4]
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	20000f0c 	.word	0x20000f0c
 8006458:	20000ef8 	.word	0x20000ef8

0800645c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10a      	bne.n	8006482 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	613b      	str	r3, [r7, #16]
}
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	60fb      	str	r3, [r7, #12]
}
 800649a:	bf00      	nop
 800649c:	e7fe      	b.n	800649c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800649e:	f000 fe05 	bl	80070ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064a2:	4b1d      	ldr	r3, [pc, #116]	; (8006518 <xTaskCheckForTimeOut+0xbc>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ba:	d102      	bne.n	80064c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064bc:	2300      	movs	r3, #0
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	e023      	b.n	800650a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	4b15      	ldr	r3, [pc, #84]	; (800651c <xTaskCheckForTimeOut+0xc0>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d007      	beq.n	80064de <xTaskCheckForTimeOut+0x82>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d302      	bcc.n	80064de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064d8:	2301      	movs	r3, #1
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	e015      	b.n	800650a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d20b      	bcs.n	8006500 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	1ad2      	subs	r2, r2, r3
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff ff9b 	bl	8006430 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
 80064fe:	e004      	b.n	800650a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006506:	2301      	movs	r3, #1
 8006508:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800650a:	f000 fdff 	bl	800710c <vPortExitCritical>

	return xReturn;
 800650e:	69fb      	ldr	r3, [r7, #28]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3720      	adds	r7, #32
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000ef8 	.word	0x20000ef8
 800651c:	20000f0c 	.word	0x20000f0c

08006520 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006524:	4b03      	ldr	r3, [pc, #12]	; (8006534 <vTaskMissedYield+0x14>)
 8006526:	2201      	movs	r2, #1
 8006528:	601a      	str	r2, [r3, #0]
}
 800652a:	bf00      	nop
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000f08 	.word	0x20000f08

08006538 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006540:	f000 f852 	bl	80065e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006544:	4b06      	ldr	r3, [pc, #24]	; (8006560 <prvIdleTask+0x28>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d9f9      	bls.n	8006540 <prvIdleTask+0x8>
			{
				taskYIELD();
 800654c:	4b05      	ldr	r3, [pc, #20]	; (8006564 <prvIdleTask+0x2c>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800655c:	e7f0      	b.n	8006540 <prvIdleTask+0x8>
 800655e:	bf00      	nop
 8006560:	20000a24 	.word	0x20000a24
 8006564:	e000ed04 	.word	0xe000ed04

08006568 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800656e:	2300      	movs	r3, #0
 8006570:	607b      	str	r3, [r7, #4]
 8006572:	e00c      	b.n	800658e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4a12      	ldr	r2, [pc, #72]	; (80065c8 <prvInitialiseTaskLists+0x60>)
 8006580:	4413      	add	r3, r2
 8006582:	4618      	mov	r0, r3
 8006584:	f7fe fd06 	bl	8004f94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3301      	adds	r3, #1
 800658c:	607b      	str	r3, [r7, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b37      	cmp	r3, #55	; 0x37
 8006592:	d9ef      	bls.n	8006574 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006594:	480d      	ldr	r0, [pc, #52]	; (80065cc <prvInitialiseTaskLists+0x64>)
 8006596:	f7fe fcfd 	bl	8004f94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800659a:	480d      	ldr	r0, [pc, #52]	; (80065d0 <prvInitialiseTaskLists+0x68>)
 800659c:	f7fe fcfa 	bl	8004f94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065a0:	480c      	ldr	r0, [pc, #48]	; (80065d4 <prvInitialiseTaskLists+0x6c>)
 80065a2:	f7fe fcf7 	bl	8004f94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065a6:	480c      	ldr	r0, [pc, #48]	; (80065d8 <prvInitialiseTaskLists+0x70>)
 80065a8:	f7fe fcf4 	bl	8004f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065ac:	480b      	ldr	r0, [pc, #44]	; (80065dc <prvInitialiseTaskLists+0x74>)
 80065ae:	f7fe fcf1 	bl	8004f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065b2:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <prvInitialiseTaskLists+0x78>)
 80065b4:	4a05      	ldr	r2, [pc, #20]	; (80065cc <prvInitialiseTaskLists+0x64>)
 80065b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <prvInitialiseTaskLists+0x7c>)
 80065ba:	4a05      	ldr	r2, [pc, #20]	; (80065d0 <prvInitialiseTaskLists+0x68>)
 80065bc:	601a      	str	r2, [r3, #0]
}
 80065be:	bf00      	nop
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20000a24 	.word	0x20000a24
 80065cc:	20000e84 	.word	0x20000e84
 80065d0:	20000e98 	.word	0x20000e98
 80065d4:	20000eb4 	.word	0x20000eb4
 80065d8:	20000ec8 	.word	0x20000ec8
 80065dc:	20000ee0 	.word	0x20000ee0
 80065e0:	20000eac 	.word	0x20000eac
 80065e4:	20000eb0 	.word	0x20000eb0

080065e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065ee:	e019      	b.n	8006624 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065f0:	f000 fd5c 	bl	80070ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80065f4:	4b10      	ldr	r3, [pc, #64]	; (8006638 <prvCheckTasksWaitingTermination+0x50>)
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	3304      	adds	r3, #4
 8006600:	4618      	mov	r0, r3
 8006602:	f7fe fd4d 	bl	80050a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006606:	4b0d      	ldr	r3, [pc, #52]	; (800663c <prvCheckTasksWaitingTermination+0x54>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3b01      	subs	r3, #1
 800660c:	4a0b      	ldr	r2, [pc, #44]	; (800663c <prvCheckTasksWaitingTermination+0x54>)
 800660e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <prvCheckTasksWaitingTermination+0x58>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3b01      	subs	r3, #1
 8006616:	4a0a      	ldr	r2, [pc, #40]	; (8006640 <prvCheckTasksWaitingTermination+0x58>)
 8006618:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800661a:	f000 fd77 	bl	800710c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f810 	bl	8006644 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006624:	4b06      	ldr	r3, [pc, #24]	; (8006640 <prvCheckTasksWaitingTermination+0x58>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e1      	bne.n	80065f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20000ec8 	.word	0x20000ec8
 800663c:	20000ef4 	.word	0x20000ef4
 8006640:	20000edc 	.word	0x20000edc

08006644 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006652:	2b00      	cmp	r3, #0
 8006654:	d108      	bne.n	8006668 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665a:	4618      	mov	r0, r3
 800665c:	f000 feea 	bl	8007434 <vPortFree>
				vPortFree( pxTCB );
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fee7 	bl	8007434 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006666:	e018      	b.n	800669a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800666e:	2b01      	cmp	r3, #1
 8006670:	d103      	bne.n	800667a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fede 	bl	8007434 <vPortFree>
	}
 8006678:	e00f      	b.n	800669a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006680:	2b02      	cmp	r3, #2
 8006682:	d00a      	beq.n	800669a <prvDeleteTCB+0x56>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	60fb      	str	r3, [r7, #12]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <prvDeleteTCB+0x54>
	}
 800669a:	bf00      	nop
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066aa:	4b0e      	ldr	r3, [pc, #56]	; (80066e4 <prvResetNextTaskUnblockTime+0x40>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <prvResetNextTaskUnblockTime+0x14>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <prvResetNextTaskUnblockTime+0x16>
 80066b8:	2300      	movs	r3, #0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d004      	beq.n	80066c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066be:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <prvResetNextTaskUnblockTime+0x44>)
 80066c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066c6:	e008      	b.n	80066da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066c8:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <prvResetNextTaskUnblockTime+0x40>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	4a04      	ldr	r2, [pc, #16]	; (80066e8 <prvResetNextTaskUnblockTime+0x44>)
 80066d8:	6013      	str	r3, [r2, #0]
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr
 80066e4:	20000eac 	.word	0x20000eac
 80066e8:	20000f14 	.word	0x20000f14

080066ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066f2:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <xTaskGetSchedulerState+0x34>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d102      	bne.n	8006700 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066fa:	2301      	movs	r3, #1
 80066fc:	607b      	str	r3, [r7, #4]
 80066fe:	e008      	b.n	8006712 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006700:	4b08      	ldr	r3, [pc, #32]	; (8006724 <xTaskGetSchedulerState+0x38>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d102      	bne.n	800670e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006708:	2302      	movs	r3, #2
 800670a:	607b      	str	r3, [r7, #4]
 800670c:	e001      	b.n	8006712 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800670e:	2300      	movs	r3, #0
 8006710:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006712:	687b      	ldr	r3, [r7, #4]
	}
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20000f00 	.word	0x20000f00
 8006724:	20000f1c 	.word	0x20000f1c

08006728 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006734:	2300      	movs	r3, #0
 8006736:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d056      	beq.n	80067ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800673e:	4b2e      	ldr	r3, [pc, #184]	; (80067f8 <xTaskPriorityDisinherit+0xd0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	429a      	cmp	r2, r3
 8006746:	d00a      	beq.n	800675e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	60fb      	str	r3, [r7, #12]
}
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10a      	bne.n	800677c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	60bb      	str	r3, [r7, #8]
}
 8006778:	bf00      	nop
 800677a:	e7fe      	b.n	800677a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006780:	1e5a      	subs	r2, r3, #1
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678e:	429a      	cmp	r2, r3
 8006790:	d02c      	beq.n	80067ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006796:	2b00      	cmp	r3, #0
 8006798:	d128      	bne.n	80067ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	3304      	adds	r3, #4
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fe fc7e 	bl	80050a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067bc:	4b0f      	ldr	r3, [pc, #60]	; (80067fc <xTaskPriorityDisinherit+0xd4>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d903      	bls.n	80067cc <xTaskPriorityDisinherit+0xa4>
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	4a0c      	ldr	r2, [pc, #48]	; (80067fc <xTaskPriorityDisinherit+0xd4>)
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d0:	4613      	mov	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4a09      	ldr	r2, [pc, #36]	; (8006800 <xTaskPriorityDisinherit+0xd8>)
 80067da:	441a      	add	r2, r3
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	3304      	adds	r3, #4
 80067e0:	4619      	mov	r1, r3
 80067e2:	4610      	mov	r0, r2
 80067e4:	f7fe fc01 	bl	8004fea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067e8:	2301      	movs	r3, #1
 80067ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067ec:	697b      	ldr	r3, [r7, #20]
	}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000a20 	.word	0x20000a20
 80067fc:	20000efc 	.word	0x20000efc
 8006800:	20000a24 	.word	0x20000a24

08006804 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800680e:	4b21      	ldr	r3, [pc, #132]	; (8006894 <prvAddCurrentTaskToDelayedList+0x90>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006814:	4b20      	ldr	r3, [pc, #128]	; (8006898 <prvAddCurrentTaskToDelayedList+0x94>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3304      	adds	r3, #4
 800681a:	4618      	mov	r0, r3
 800681c:	f7fe fc40 	bl	80050a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006826:	d10a      	bne.n	800683e <prvAddCurrentTaskToDelayedList+0x3a>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d007      	beq.n	800683e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800682e:	4b1a      	ldr	r3, [pc, #104]	; (8006898 <prvAddCurrentTaskToDelayedList+0x94>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3304      	adds	r3, #4
 8006834:	4619      	mov	r1, r3
 8006836:	4819      	ldr	r0, [pc, #100]	; (800689c <prvAddCurrentTaskToDelayedList+0x98>)
 8006838:	f7fe fbd7 	bl	8004fea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800683c:	e026      	b.n	800688c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4413      	add	r3, r2
 8006844:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006846:	4b14      	ldr	r3, [pc, #80]	; (8006898 <prvAddCurrentTaskToDelayedList+0x94>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	429a      	cmp	r2, r3
 8006854:	d209      	bcs.n	800686a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006856:	4b12      	ldr	r3, [pc, #72]	; (80068a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <prvAddCurrentTaskToDelayedList+0x94>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3304      	adds	r3, #4
 8006860:	4619      	mov	r1, r3
 8006862:	4610      	mov	r0, r2
 8006864:	f7fe fbe4 	bl	8005030 <vListInsert>
}
 8006868:	e010      	b.n	800688c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800686a:	4b0e      	ldr	r3, [pc, #56]	; (80068a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <prvAddCurrentTaskToDelayedList+0x94>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3304      	adds	r3, #4
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f7fe fbda 	bl	8005030 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800687c:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	429a      	cmp	r2, r3
 8006884:	d202      	bcs.n	800688c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006886:	4a08      	ldr	r2, [pc, #32]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	6013      	str	r3, [r2, #0]
}
 800688c:	bf00      	nop
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	20000ef8 	.word	0x20000ef8
 8006898:	20000a20 	.word	0x20000a20
 800689c:	20000ee0 	.word	0x20000ee0
 80068a0:	20000eb0 	.word	0x20000eb0
 80068a4:	20000eac 	.word	0x20000eac
 80068a8:	20000f14 	.word	0x20000f14

080068ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08a      	sub	sp, #40	; 0x28
 80068b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068b2:	2300      	movs	r3, #0
 80068b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068b6:	f000 facb 	bl	8006e50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068ba:	4b1c      	ldr	r3, [pc, #112]	; (800692c <xTimerCreateTimerTask+0x80>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d021      	beq.n	8006906 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068ca:	1d3a      	adds	r2, r7, #4
 80068cc:	f107 0108 	add.w	r1, r7, #8
 80068d0:	f107 030c 	add.w	r3, r7, #12
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fe fb43 	bl	8004f60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	9202      	str	r2, [sp, #8]
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	2302      	movs	r3, #2
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	2300      	movs	r3, #0
 80068ea:	460a      	mov	r2, r1
 80068ec:	4910      	ldr	r1, [pc, #64]	; (8006930 <xTimerCreateTimerTask+0x84>)
 80068ee:	4811      	ldr	r0, [pc, #68]	; (8006934 <xTimerCreateTimerTask+0x88>)
 80068f0:	f7ff f8e4 	bl	8005abc <xTaskCreateStatic>
 80068f4:	4603      	mov	r3, r0
 80068f6:	4a10      	ldr	r2, [pc, #64]	; (8006938 <xTimerCreateTimerTask+0x8c>)
 80068f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068fa:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <xTimerCreateTimerTask+0x8c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006902:	2301      	movs	r3, #1
 8006904:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10a      	bne.n	8006922 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	613b      	str	r3, [r7, #16]
}
 800691e:	bf00      	nop
 8006920:	e7fe      	b.n	8006920 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006922:	697b      	ldr	r3, [r7, #20]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000f50 	.word	0x20000f50
 8006930:	08007b60 	.word	0x08007b60
 8006934:	08006a59 	.word	0x08006a59
 8006938:	20000f54 	.word	0x20000f54

0800693c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08a      	sub	sp, #40	; 0x28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800694a:	2300      	movs	r3, #0
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	623b      	str	r3, [r7, #32]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800696a:	4b1a      	ldr	r3, [pc, #104]	; (80069d4 <xTimerGenericCommand+0x98>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d02a      	beq.n	80069c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b05      	cmp	r3, #5
 8006982:	dc18      	bgt.n	80069b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006984:	f7ff feb2 	bl	80066ec <xTaskGetSchedulerState>
 8006988:	4603      	mov	r3, r0
 800698a:	2b02      	cmp	r3, #2
 800698c:	d109      	bne.n	80069a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800698e:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <xTimerGenericCommand+0x98>)
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	f107 0110 	add.w	r1, r7, #16
 8006996:	2300      	movs	r3, #0
 8006998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800699a:	f7fe fcad 	bl	80052f8 <xQueueGenericSend>
 800699e:	6278      	str	r0, [r7, #36]	; 0x24
 80069a0:	e012      	b.n	80069c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069a2:	4b0c      	ldr	r3, [pc, #48]	; (80069d4 <xTimerGenericCommand+0x98>)
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	f107 0110 	add.w	r1, r7, #16
 80069aa:	2300      	movs	r3, #0
 80069ac:	2200      	movs	r2, #0
 80069ae:	f7fe fca3 	bl	80052f8 <xQueueGenericSend>
 80069b2:	6278      	str	r0, [r7, #36]	; 0x24
 80069b4:	e008      	b.n	80069c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069b6:	4b07      	ldr	r3, [pc, #28]	; (80069d4 <xTimerGenericCommand+0x98>)
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	f107 0110 	add.w	r1, r7, #16
 80069be:	2300      	movs	r3, #0
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	f7fe fd97 	bl	80054f4 <xQueueGenericSendFromISR>
 80069c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3728      	adds	r7, #40	; 0x28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	20000f50 	.word	0x20000f50

080069d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af02      	add	r7, sp, #8
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069e2:	4b1c      	ldr	r3, [pc, #112]	; (8006a54 <prvProcessExpiredTimer+0x7c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	3304      	adds	r3, #4
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fe fb55 	bl	80050a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d122      	bne.n	8006a44 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	18d1      	adds	r1, r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	6978      	ldr	r0, [r7, #20]
 8006a0c:	f000 f8c8 	bl	8006ba0 <prvInsertTimerInActiveList>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d016      	beq.n	8006a44 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a16:	2300      	movs	r3, #0
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	2100      	movs	r1, #0
 8006a20:	6978      	ldr	r0, [r7, #20]
 8006a22:	f7ff ff8b 	bl	800693c <xTimerGenericCommand>
 8006a26:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	60fb      	str	r3, [r7, #12]
}
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	6978      	ldr	r0, [r7, #20]
 8006a4a:	4798      	blx	r3
}
 8006a4c:	bf00      	nop
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	20000f48 	.word	0x20000f48

08006a58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a60:	f107 0308 	add.w	r3, r7, #8
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 f857 	bl	8006b18 <prvGetNextExpireTime>
 8006a6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f803 	bl	8006a7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a76:	f000 f8d5 	bl	8006c24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a7a:	e7f1      	b.n	8006a60 <prvTimerTask+0x8>

08006a7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a86:	f7ff fa4b 	bl	8005f20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a8a:	f107 0308 	add.w	r3, r7, #8
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 f866 	bl	8006b60 <prvSampleTimeNow>
 8006a94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d130      	bne.n	8006afe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <prvProcessTimerOrBlockTask+0x3c>
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d806      	bhi.n	8006ab8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006aaa:	f7ff fa47 	bl	8005f3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006aae:	68f9      	ldr	r1, [r7, #12]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff ff91 	bl	80069d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ab6:	e024      	b.n	8006b02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d008      	beq.n	8006ad0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006abe:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <prvProcessTimerOrBlockTask+0x90>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	bf0c      	ite	eq
 8006ac8:	2301      	moveq	r3, #1
 8006aca:	2300      	movne	r3, #0
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ad0:	4b0f      	ldr	r3, [pc, #60]	; (8006b10 <prvProcessTimerOrBlockTask+0x94>)
 8006ad2:	6818      	ldr	r0, [r3, #0]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	4619      	mov	r1, r3
 8006ade:	f7fe ffb9 	bl	8005a54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ae2:	f7ff fa2b 	bl	8005f3c <xTaskResumeAll>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006aec:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <prvProcessTimerOrBlockTask+0x98>)
 8006aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	f3bf 8f6f 	isb	sy
}
 8006afc:	e001      	b.n	8006b02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006afe:	f7ff fa1d 	bl	8005f3c <xTaskResumeAll>
}
 8006b02:	bf00      	nop
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000f4c 	.word	0x20000f4c
 8006b10:	20000f50 	.word	0x20000f50
 8006b14:	e000ed04 	.word	0xe000ed04

08006b18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b20:	4b0e      	ldr	r3, [pc, #56]	; (8006b5c <prvGetNextExpireTime+0x44>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bf0c      	ite	eq
 8006b2a:	2301      	moveq	r3, #1
 8006b2c:	2300      	movne	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d105      	bne.n	8006b4a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b3e:	4b07      	ldr	r3, [pc, #28]	; (8006b5c <prvGetNextExpireTime+0x44>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	e001      	b.n	8006b4e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	20000f48 	.word	0x20000f48

08006b60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b68:	f7ff fa86 	bl	8006078 <xTaskGetTickCount>
 8006b6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b6e:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <prvSampleTimeNow+0x3c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d205      	bcs.n	8006b84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b78:	f000 f908 	bl	8006d8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	e002      	b.n	8006b8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b8a:	4a04      	ldr	r2, [pc, #16]	; (8006b9c <prvSampleTimeNow+0x3c>)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b90:	68fb      	ldr	r3, [r7, #12]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000f58 	.word	0x20000f58

08006ba0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d812      	bhi.n	8006bec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	1ad2      	subs	r2, r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d302      	bcc.n	8006bda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e01b      	b.n	8006c12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bda:	4b10      	ldr	r3, [pc, #64]	; (8006c1c <prvInsertTimerInActiveList+0x7c>)
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3304      	adds	r3, #4
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f7fe fa23 	bl	8005030 <vListInsert>
 8006bea:	e012      	b.n	8006c12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d206      	bcs.n	8006c02 <prvInsertTimerInActiveList+0x62>
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d302      	bcc.n	8006c02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	e007      	b.n	8006c12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c02:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <prvInsertTimerInActiveList+0x80>)
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	f7fe fa0f 	bl	8005030 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c12:	697b      	ldr	r3, [r7, #20]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20000f4c 	.word	0x20000f4c
 8006c20:	20000f48 	.word	0x20000f48

08006c24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08e      	sub	sp, #56	; 0x38
 8006c28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c2a:	e09d      	b.n	8006d68 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	da18      	bge.n	8006c64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c32:	1d3b      	adds	r3, r7, #4
 8006c34:	3304      	adds	r3, #4
 8006c36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	61fb      	str	r3, [r7, #28]
}
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c5a:	6850      	ldr	r0, [r2, #4]
 8006c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c5e:	6892      	ldr	r2, [r2, #8]
 8006c60:	4611      	mov	r1, r2
 8006c62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	db7d      	blt.n	8006d66 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d004      	beq.n	8006c80 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fe fa10 	bl	80050a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c80:	463b      	mov	r3, r7
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff ff6c 	bl	8006b60 <prvSampleTimeNow>
 8006c88:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b09      	cmp	r3, #9
 8006c8e:	d86b      	bhi.n	8006d68 <prvProcessReceivedCommands+0x144>
 8006c90:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <prvProcessReceivedCommands+0x74>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006cc1 	.word	0x08006cc1
 8006c9c:	08006cc1 	.word	0x08006cc1
 8006ca0:	08006cc1 	.word	0x08006cc1
 8006ca4:	08006d69 	.word	0x08006d69
 8006ca8:	08006d1d 	.word	0x08006d1d
 8006cac:	08006d55 	.word	0x08006d55
 8006cb0:	08006cc1 	.word	0x08006cc1
 8006cb4:	08006cc1 	.word	0x08006cc1
 8006cb8:	08006d69 	.word	0x08006d69
 8006cbc:	08006d1d 	.word	0x08006d1d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	18d1      	adds	r1, r2, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cce:	f7ff ff67 	bl	8006ba0 <prvInsertTimerInActiveList>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d047      	beq.n	8006d68 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cde:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d13f      	bne.n	8006d68 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	441a      	add	r2, r3
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cfa:	f7ff fe1f 	bl	800693c <xTimerGenericCommand>
 8006cfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d130      	bne.n	8006d68 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	61bb      	str	r3, [r7, #24]
}
 8006d18:	bf00      	nop
 8006d1a:	e7fe      	b.n	8006d1a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d20:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10a      	bne.n	8006d40 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	617b      	str	r3, [r7, #20]
}
 8006d3c:	bf00      	nop
 8006d3e:	e7fe      	b.n	8006d3e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	699a      	ldr	r2, [r3, #24]
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	18d1      	adds	r1, r2, r3
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d4e:	f7ff ff27 	bl	8006ba0 <prvInsertTimerInActiveList>
					break;
 8006d52:	e009      	b.n	8006d68 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d104      	bne.n	8006d68 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d60:	f000 fb68 	bl	8007434 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d64:	e000      	b.n	8006d68 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d66:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d68:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <prvProcessReceivedCommands+0x164>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	1d39      	adds	r1, r7, #4
 8006d6e:	2200      	movs	r2, #0
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fe fc57 	bl	8005624 <xQueueReceive>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f47f af57 	bne.w	8006c2c <prvProcessReceivedCommands+0x8>
	}
}
 8006d7e:	bf00      	nop
 8006d80:	bf00      	nop
 8006d82:	3730      	adds	r7, #48	; 0x30
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20000f50 	.word	0x20000f50

08006d8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b088      	sub	sp, #32
 8006d90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d92:	e045      	b.n	8006e20 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d94:	4b2c      	ldr	r3, [pc, #176]	; (8006e48 <prvSwitchTimerLists+0xbc>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d9e:	4b2a      	ldr	r3, [pc, #168]	; (8006e48 <prvSwitchTimerLists+0xbc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3304      	adds	r3, #4
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7fe f977 	bl	80050a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d12e      	bne.n	8006e20 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	4413      	add	r3, r2
 8006dca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d90e      	bls.n	8006df2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006de0:	4b19      	ldr	r3, [pc, #100]	; (8006e48 <prvSwitchTimerLists+0xbc>)
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3304      	adds	r3, #4
 8006de8:	4619      	mov	r1, r3
 8006dea:	4610      	mov	r0, r2
 8006dec:	f7fe f920 	bl	8005030 <vListInsert>
 8006df0:	e016      	b.n	8006e20 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006df2:	2300      	movs	r3, #0
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	2300      	movs	r3, #0
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff fd9d 	bl	800693c <xTimerGenericCommand>
 8006e02:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	603b      	str	r3, [r7, #0]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e20:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <prvSwitchTimerLists+0xbc>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1b4      	bne.n	8006d94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e2a:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <prvSwitchTimerLists+0xbc>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e30:	4b06      	ldr	r3, [pc, #24]	; (8006e4c <prvSwitchTimerLists+0xc0>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a04      	ldr	r2, [pc, #16]	; (8006e48 <prvSwitchTimerLists+0xbc>)
 8006e36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e38:	4a04      	ldr	r2, [pc, #16]	; (8006e4c <prvSwitchTimerLists+0xc0>)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	6013      	str	r3, [r2, #0]
}
 8006e3e:	bf00      	nop
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20000f48 	.word	0x20000f48
 8006e4c:	20000f4c 	.word	0x20000f4c

08006e50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e56:	f000 f929 	bl	80070ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e5a:	4b15      	ldr	r3, [pc, #84]	; (8006eb0 <prvCheckForValidListAndQueue+0x60>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d120      	bne.n	8006ea4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e62:	4814      	ldr	r0, [pc, #80]	; (8006eb4 <prvCheckForValidListAndQueue+0x64>)
 8006e64:	f7fe f896 	bl	8004f94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e68:	4813      	ldr	r0, [pc, #76]	; (8006eb8 <prvCheckForValidListAndQueue+0x68>)
 8006e6a:	f7fe f893 	bl	8004f94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e6e:	4b13      	ldr	r3, [pc, #76]	; (8006ebc <prvCheckForValidListAndQueue+0x6c>)
 8006e70:	4a10      	ldr	r2, [pc, #64]	; (8006eb4 <prvCheckForValidListAndQueue+0x64>)
 8006e72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e74:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <prvCheckForValidListAndQueue+0x70>)
 8006e76:	4a10      	ldr	r2, [pc, #64]	; (8006eb8 <prvCheckForValidListAndQueue+0x68>)
 8006e78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <prvCheckForValidListAndQueue+0x74>)
 8006e80:	4a11      	ldr	r2, [pc, #68]	; (8006ec8 <prvCheckForValidListAndQueue+0x78>)
 8006e82:	2110      	movs	r1, #16
 8006e84:	200a      	movs	r0, #10
 8006e86:	f7fe f99d 	bl	80051c4 <xQueueGenericCreateStatic>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	4a08      	ldr	r2, [pc, #32]	; (8006eb0 <prvCheckForValidListAndQueue+0x60>)
 8006e8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <prvCheckForValidListAndQueue+0x60>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d005      	beq.n	8006ea4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e98:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <prvCheckForValidListAndQueue+0x60>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	490b      	ldr	r1, [pc, #44]	; (8006ecc <prvCheckForValidListAndQueue+0x7c>)
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fdb0 	bl	8005a04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ea4:	f000 f932 	bl	800710c <vPortExitCritical>
}
 8006ea8:	bf00      	nop
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20000f50 	.word	0x20000f50
 8006eb4:	20000f20 	.word	0x20000f20
 8006eb8:	20000f34 	.word	0x20000f34
 8006ebc:	20000f48 	.word	0x20000f48
 8006ec0:	20000f4c 	.word	0x20000f4c
 8006ec4:	20000ffc 	.word	0x20000ffc
 8006ec8:	20000f5c 	.word	0x20000f5c
 8006ecc:	08007b68 	.word	0x08007b68

08006ed0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3b04      	subs	r3, #4
 8006ee0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3b04      	subs	r3, #4
 8006eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f023 0201 	bic.w	r2, r3, #1
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3b04      	subs	r3, #4
 8006efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f00:	4a08      	ldr	r2, [pc, #32]	; (8006f24 <pxPortInitialiseStack+0x54>)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3b14      	subs	r3, #20
 8006f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3b20      	subs	r3, #32
 8006f16:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f18:	68fb      	ldr	r3, [r7, #12]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bc80      	pop	{r7}
 8006f22:	4770      	bx	lr
 8006f24:	08006f29 	.word	0x08006f29

08006f28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f32:	4b12      	ldr	r3, [pc, #72]	; (8006f7c <prvTaskExitError+0x54>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f3a:	d00a      	beq.n	8006f52 <prvTaskExitError+0x2a>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60fb      	str	r3, [r7, #12]
}
 8006f4e:	bf00      	nop
 8006f50:	e7fe      	b.n	8006f50 <prvTaskExitError+0x28>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	60bb      	str	r3, [r7, #8]
}
 8006f64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f66:	bf00      	nop
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0fc      	beq.n	8006f68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f6e:	bf00      	nop
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bc80      	pop	{r7}
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	20000010 	.word	0x20000010

08006f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f80:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <pxCurrentTCBConst2>)
 8006f82:	6819      	ldr	r1, [r3, #0]
 8006f84:	6808      	ldr	r0, [r1, #0]
 8006f86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f8a:	f380 8809 	msr	PSP, r0
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8811 	msr	BASEPRI, r0
 8006f9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006f9e:	4770      	bx	lr

08006fa0 <pxCurrentTCBConst2>:
 8006fa0:	20000a20 	.word	0x20000a20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006fa8:	4806      	ldr	r0, [pc, #24]	; (8006fc4 <prvPortStartFirstTask+0x1c>)
 8006faa:	6800      	ldr	r0, [r0, #0]
 8006fac:	6800      	ldr	r0, [r0, #0]
 8006fae:	f380 8808 	msr	MSP, r0
 8006fb2:	b662      	cpsie	i
 8006fb4:	b661      	cpsie	f
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	df00      	svc	0
 8006fc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fc2:	bf00      	nop
 8006fc4:	e000ed08 	.word	0xe000ed08

08006fc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fce:	4b32      	ldr	r3, [pc, #200]	; (8007098 <xPortStartScheduler+0xd0>)
 8006fd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	22ff      	movs	r2, #255	; 0xff
 8006fde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	4b2a      	ldr	r3, [pc, #168]	; (800709c <xPortStartScheduler+0xd4>)
 8006ff4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ff6:	4b2a      	ldr	r3, [pc, #168]	; (80070a0 <xPortStartScheduler+0xd8>)
 8006ff8:	2207      	movs	r2, #7
 8006ffa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ffc:	e009      	b.n	8007012 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006ffe:	4b28      	ldr	r3, [pc, #160]	; (80070a0 <xPortStartScheduler+0xd8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3b01      	subs	r3, #1
 8007004:	4a26      	ldr	r2, [pc, #152]	; (80070a0 <xPortStartScheduler+0xd8>)
 8007006:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007008:	78fb      	ldrb	r3, [r7, #3]
 800700a:	b2db      	uxtb	r3, r3
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	b2db      	uxtb	r3, r3
 8007010:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007012:	78fb      	ldrb	r3, [r7, #3]
 8007014:	b2db      	uxtb	r3, r3
 8007016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701a:	2b80      	cmp	r3, #128	; 0x80
 800701c:	d0ef      	beq.n	8006ffe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800701e:	4b20      	ldr	r3, [pc, #128]	; (80070a0 <xPortStartScheduler+0xd8>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f1c3 0307 	rsb	r3, r3, #7
 8007026:	2b04      	cmp	r3, #4
 8007028:	d00a      	beq.n	8007040 <xPortStartScheduler+0x78>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	60bb      	str	r3, [r7, #8]
}
 800703c:	bf00      	nop
 800703e:	e7fe      	b.n	800703e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007040:	4b17      	ldr	r3, [pc, #92]	; (80070a0 <xPortStartScheduler+0xd8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	4a16      	ldr	r2, [pc, #88]	; (80070a0 <xPortStartScheduler+0xd8>)
 8007048:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800704a:	4b15      	ldr	r3, [pc, #84]	; (80070a0 <xPortStartScheduler+0xd8>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007052:	4a13      	ldr	r2, [pc, #76]	; (80070a0 <xPortStartScheduler+0xd8>)
 8007054:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	b2da      	uxtb	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800705e:	4b11      	ldr	r3, [pc, #68]	; (80070a4 <xPortStartScheduler+0xdc>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a10      	ldr	r2, [pc, #64]	; (80070a4 <xPortStartScheduler+0xdc>)
 8007064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007068:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800706a:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <xPortStartScheduler+0xdc>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a0d      	ldr	r2, [pc, #52]	; (80070a4 <xPortStartScheduler+0xdc>)
 8007070:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007074:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007076:	f000 f8b9 	bl	80071ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800707a:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <xPortStartScheduler+0xe0>)
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007080:	f7ff ff92 	bl	8006fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007084:	f7ff f8c4 	bl	8006210 <vTaskSwitchContext>
	prvTaskExitError();
 8007088:	f7ff ff4e 	bl	8006f28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	e000e400 	.word	0xe000e400
 800709c:	2000104c 	.word	0x2000104c
 80070a0:	20001050 	.word	0x20001050
 80070a4:	e000ed20 	.word	0xe000ed20
 80070a8:	20000010 	.word	0x20000010

080070ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	607b      	str	r3, [r7, #4]
}
 80070c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070c6:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <vPortEnterCritical+0x58>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3301      	adds	r3, #1
 80070cc:	4a0d      	ldr	r2, [pc, #52]	; (8007104 <vPortEnterCritical+0x58>)
 80070ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070d0:	4b0c      	ldr	r3, [pc, #48]	; (8007104 <vPortEnterCritical+0x58>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d10f      	bne.n	80070f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070d8:	4b0b      	ldr	r3, [pc, #44]	; (8007108 <vPortEnterCritical+0x5c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	603b      	str	r3, [r7, #0]
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <vPortEnterCritical+0x4a>
	}
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bc80      	pop	{r7}
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000010 	.word	0x20000010
 8007108:	e000ed04 	.word	0xe000ed04

0800710c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007112:	4b11      	ldr	r3, [pc, #68]	; (8007158 <vPortExitCritical+0x4c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <vPortExitCritical+0x24>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	607b      	str	r3, [r7, #4]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007130:	4b09      	ldr	r3, [pc, #36]	; (8007158 <vPortExitCritical+0x4c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3b01      	subs	r3, #1
 8007136:	4a08      	ldr	r2, [pc, #32]	; (8007158 <vPortExitCritical+0x4c>)
 8007138:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800713a:	4b07      	ldr	r3, [pc, #28]	; (8007158 <vPortExitCritical+0x4c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d105      	bne.n	800714e <vPortExitCritical+0x42>
 8007142:	2300      	movs	r3, #0
 8007144:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	f383 8811 	msr	BASEPRI, r3
}
 800714c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	bc80      	pop	{r7}
 8007156:	4770      	bx	lr
 8007158:	20000010 	.word	0x20000010
 800715c:	00000000 	.word	0x00000000

08007160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007160:	f3ef 8009 	mrs	r0, PSP
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	4b0d      	ldr	r3, [pc, #52]	; (80071a0 <pxCurrentTCBConst>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007170:	6010      	str	r0, [r2, #0]
 8007172:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007176:	f04f 0050 	mov.w	r0, #80	; 0x50
 800717a:	f380 8811 	msr	BASEPRI, r0
 800717e:	f7ff f847 	bl	8006210 <vTaskSwitchContext>
 8007182:	f04f 0000 	mov.w	r0, #0
 8007186:	f380 8811 	msr	BASEPRI, r0
 800718a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800718e:	6819      	ldr	r1, [r3, #0]
 8007190:	6808      	ldr	r0, [r1, #0]
 8007192:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007196:	f380 8809 	msr	PSP, r0
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	4770      	bx	lr

080071a0 <pxCurrentTCBConst>:
 80071a0:	20000a20 	.word	0x20000a20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop

080071a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	607b      	str	r3, [r7, #4]
}
 80071c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071c2:	f7fe ff67 	bl	8006094 <xTaskIncrementTick>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071cc:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <xPortSysTickHandler+0x40>)
 80071ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	2300      	movs	r3, #0
 80071d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	f383 8811 	msr	BASEPRI, r3
}
 80071de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	e000ed04 	.word	0xe000ed04

080071ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071f0:	4b0a      	ldr	r3, [pc, #40]	; (800721c <vPortSetupTimerInterrupt+0x30>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071f6:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <vPortSetupTimerInterrupt+0x34>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071fc:	4b09      	ldr	r3, [pc, #36]	; (8007224 <vPortSetupTimerInterrupt+0x38>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a09      	ldr	r2, [pc, #36]	; (8007228 <vPortSetupTimerInterrupt+0x3c>)
 8007202:	fba2 2303 	umull	r2, r3, r2, r3
 8007206:	099b      	lsrs	r3, r3, #6
 8007208:	4a08      	ldr	r2, [pc, #32]	; (800722c <vPortSetupTimerInterrupt+0x40>)
 800720a:	3b01      	subs	r3, #1
 800720c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800720e:	4b03      	ldr	r3, [pc, #12]	; (800721c <vPortSetupTimerInterrupt+0x30>)
 8007210:	2207      	movs	r2, #7
 8007212:	601a      	str	r2, [r3, #0]
}
 8007214:	bf00      	nop
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr
 800721c:	e000e010 	.word	0xe000e010
 8007220:	e000e018 	.word	0xe000e018
 8007224:	20000004 	.word	0x20000004
 8007228:	10624dd3 	.word	0x10624dd3
 800722c:	e000e014 	.word	0xe000e014

08007230 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007236:	f3ef 8305 	mrs	r3, IPSR
 800723a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b0f      	cmp	r3, #15
 8007240:	d914      	bls.n	800726c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007242:	4a16      	ldr	r2, [pc, #88]	; (800729c <vPortValidateInterruptPriority+0x6c>)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800724c:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <vPortValidateInterruptPriority+0x70>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	7afa      	ldrb	r2, [r7, #11]
 8007252:	429a      	cmp	r2, r3
 8007254:	d20a      	bcs.n	800726c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	607b      	str	r3, [r7, #4]
}
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800726c:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <vPortValidateInterruptPriority+0x74>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007274:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <vPortValidateInterruptPriority+0x78>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	429a      	cmp	r2, r3
 800727a:	d90a      	bls.n	8007292 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	603b      	str	r3, [r7, #0]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <vPortValidateInterruptPriority+0x60>
	}
 8007292:	bf00      	nop
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr
 800729c:	e000e3f0 	.word	0xe000e3f0
 80072a0:	2000104c 	.word	0x2000104c
 80072a4:	e000ed0c 	.word	0xe000ed0c
 80072a8:	20001050 	.word	0x20001050

080072ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08a      	sub	sp, #40	; 0x28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072b8:	f7fe fe32 	bl	8005f20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072bc:	4b58      	ldr	r3, [pc, #352]	; (8007420 <pvPortMalloc+0x174>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072c4:	f000 f910 	bl	80074e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072c8:	4b56      	ldr	r3, [pc, #344]	; (8007424 <pvPortMalloc+0x178>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4013      	ands	r3, r2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f040 808e 	bne.w	80073f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01d      	beq.n	8007318 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80072dc:	2208      	movs	r2, #8
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4413      	add	r3, r2
 80072e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d014      	beq.n	8007318 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f023 0307 	bic.w	r3, r3, #7
 80072f4:	3308      	adds	r3, #8
 80072f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <pvPortMalloc+0x6c>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	617b      	str	r3, [r7, #20]
}
 8007314:	bf00      	nop
 8007316:	e7fe      	b.n	8007316 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d069      	beq.n	80073f2 <pvPortMalloc+0x146>
 800731e:	4b42      	ldr	r3, [pc, #264]	; (8007428 <pvPortMalloc+0x17c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	429a      	cmp	r2, r3
 8007326:	d864      	bhi.n	80073f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007328:	4b40      	ldr	r3, [pc, #256]	; (800742c <pvPortMalloc+0x180>)
 800732a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800732c:	4b3f      	ldr	r3, [pc, #252]	; (800742c <pvPortMalloc+0x180>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007332:	e004      	b.n	800733e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	429a      	cmp	r2, r3
 8007346:	d903      	bls.n	8007350 <pvPortMalloc+0xa4>
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1f1      	bne.n	8007334 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007350:	4b33      	ldr	r3, [pc, #204]	; (8007420 <pvPortMalloc+0x174>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007356:	429a      	cmp	r2, r3
 8007358:	d04b      	beq.n	80073f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2208      	movs	r2, #8
 8007360:	4413      	add	r3, r2
 8007362:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	1ad2      	subs	r2, r2, r3
 8007374:	2308      	movs	r3, #8
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	429a      	cmp	r2, r3
 800737a:	d91f      	bls.n	80073bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800737c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4413      	add	r3, r2
 8007382:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00a      	beq.n	80073a4 <pvPortMalloc+0xf8>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	613b      	str	r3, [r7, #16]
}
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	1ad2      	subs	r2, r2, r3
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073b6:	69b8      	ldr	r0, [r7, #24]
 80073b8:	f000 f8f8 	bl	80075ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073bc:	4b1a      	ldr	r3, [pc, #104]	; (8007428 <pvPortMalloc+0x17c>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	4a18      	ldr	r2, [pc, #96]	; (8007428 <pvPortMalloc+0x17c>)
 80073c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073ca:	4b17      	ldr	r3, [pc, #92]	; (8007428 <pvPortMalloc+0x17c>)
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	4b18      	ldr	r3, [pc, #96]	; (8007430 <pvPortMalloc+0x184>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d203      	bcs.n	80073de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073d6:	4b14      	ldr	r3, [pc, #80]	; (8007428 <pvPortMalloc+0x17c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a15      	ldr	r2, [pc, #84]	; (8007430 <pvPortMalloc+0x184>)
 80073dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	4b10      	ldr	r3, [pc, #64]	; (8007424 <pvPortMalloc+0x178>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	431a      	orrs	r2, r3
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073f2:	f7fe fda3 	bl	8005f3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <pvPortMalloc+0x16a>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	60fb      	str	r3, [r7, #12]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <pvPortMalloc+0x168>
	return pvReturn;
 8007416:	69fb      	ldr	r3, [r7, #28]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3728      	adds	r7, #40	; 0x28
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	20001c5c 	.word	0x20001c5c
 8007424:	20001c68 	.word	0x20001c68
 8007428:	20001c60 	.word	0x20001c60
 800742c:	20001c54 	.word	0x20001c54
 8007430:	20001c64 	.word	0x20001c64

08007434 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d048      	beq.n	80074d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007446:	2308      	movs	r3, #8
 8007448:	425b      	negs	r3, r3
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4413      	add	r3, r2
 800744e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	4b21      	ldr	r3, [pc, #132]	; (80074e0 <vPortFree+0xac>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4013      	ands	r3, r2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <vPortFree+0x44>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	60fb      	str	r3, [r7, #12]
}
 8007474:	bf00      	nop
 8007476:	e7fe      	b.n	8007476 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00a      	beq.n	8007496 <vPortFree+0x62>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	60bb      	str	r3, [r7, #8]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	4b11      	ldr	r3, [pc, #68]	; (80074e0 <vPortFree+0xac>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4013      	ands	r3, r2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d019      	beq.n	80074d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d115      	bne.n	80074d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <vPortFree+0xac>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	43db      	mvns	r3, r3
 80074b6:	401a      	ands	r2, r3
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074bc:	f7fe fd30 	bl	8005f20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <vPortFree+0xb0>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4413      	add	r3, r2
 80074ca:	4a06      	ldr	r2, [pc, #24]	; (80074e4 <vPortFree+0xb0>)
 80074cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074ce:	6938      	ldr	r0, [r7, #16]
 80074d0:	f000 f86c 	bl	80075ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80074d4:	f7fe fd32 	bl	8005f3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074d8:	bf00      	nop
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20001c68 	.word	0x20001c68
 80074e4:	20001c60 	.word	0x20001c60

080074e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80074f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074f4:	4b27      	ldr	r3, [pc, #156]	; (8007594 <prvHeapInit+0xac>)
 80074f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00c      	beq.n	800751c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3307      	adds	r3, #7
 8007506:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0307 	bic.w	r3, r3, #7
 800750e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	4a1f      	ldr	r2, [pc, #124]	; (8007594 <prvHeapInit+0xac>)
 8007518:	4413      	add	r3, r2
 800751a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007520:	4a1d      	ldr	r2, [pc, #116]	; (8007598 <prvHeapInit+0xb0>)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007526:	4b1c      	ldr	r3, [pc, #112]	; (8007598 <prvHeapInit+0xb0>)
 8007528:	2200      	movs	r2, #0
 800752a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	4413      	add	r3, r2
 8007532:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007534:	2208      	movs	r2, #8
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0307 	bic.w	r3, r3, #7
 8007542:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4a15      	ldr	r2, [pc, #84]	; (800759c <prvHeapInit+0xb4>)
 8007548:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800754a:	4b14      	ldr	r3, [pc, #80]	; (800759c <prvHeapInit+0xb4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2200      	movs	r2, #0
 8007550:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007552:	4b12      	ldr	r3, [pc, #72]	; (800759c <prvHeapInit+0xb4>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2200      	movs	r2, #0
 8007558:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	1ad2      	subs	r2, r2, r3
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007568:	4b0c      	ldr	r3, [pc, #48]	; (800759c <prvHeapInit+0xb4>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	4a0a      	ldr	r2, [pc, #40]	; (80075a0 <prvHeapInit+0xb8>)
 8007576:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	4a09      	ldr	r2, [pc, #36]	; (80075a4 <prvHeapInit+0xbc>)
 800757e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007580:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <prvHeapInit+0xc0>)
 8007582:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007586:	601a      	str	r2, [r3, #0]
}
 8007588:	bf00      	nop
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	20001054 	.word	0x20001054
 8007598:	20001c54 	.word	0x20001c54
 800759c:	20001c5c 	.word	0x20001c5c
 80075a0:	20001c64 	.word	0x20001c64
 80075a4:	20001c60 	.word	0x20001c60
 80075a8:	20001c68 	.word	0x20001c68

080075ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075b4:	4b27      	ldr	r3, [pc, #156]	; (8007654 <prvInsertBlockIntoFreeList+0xa8>)
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	e002      	b.n	80075c0 <prvInsertBlockIntoFreeList+0x14>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d8f7      	bhi.n	80075ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	4413      	add	r3, r2
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d108      	bne.n	80075ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	441a      	add	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	441a      	add	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d118      	bne.n	8007634 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b14      	ldr	r3, [pc, #80]	; (8007658 <prvInsertBlockIntoFreeList+0xac>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d00d      	beq.n	800762a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	441a      	add	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	e008      	b.n	800763c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800762a:	4b0b      	ldr	r3, [pc, #44]	; (8007658 <prvInsertBlockIntoFreeList+0xac>)
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	e003      	b.n	800763c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	429a      	cmp	r2, r3
 8007642:	d002      	beq.n	800764a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800764a:	bf00      	nop
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	bc80      	pop	{r7}
 8007652:	4770      	bx	lr
 8007654:	20001c54 	.word	0x20001c54
 8007658:	20001c5c 	.word	0x20001c5c

0800765c <__aeabi_atexit>:
 800765c:	460b      	mov	r3, r1
 800765e:	4601      	mov	r1, r0
 8007660:	4618      	mov	r0, r3
 8007662:	f000 b8b5 	b.w	80077d0 <__cxa_atexit>

08007666 <_ZdlPvj>:
 8007666:	f000 b886 	b.w	8007776 <_ZdlPv>

0800766a <_Znwj>:
 800766a:	2801      	cmp	r0, #1
 800766c:	bf38      	it	cc
 800766e:	2001      	movcc	r0, #1
 8007670:	b510      	push	{r4, lr}
 8007672:	4604      	mov	r4, r0
 8007674:	4620      	mov	r0, r4
 8007676:	f000 f8e3 	bl	8007840 <malloc>
 800767a:	b930      	cbnz	r0, 800768a <_Znwj+0x20>
 800767c:	f000 f890 	bl	80077a0 <_ZSt15get_new_handlerv>
 8007680:	b908      	cbnz	r0, 8007686 <_Znwj+0x1c>
 8007682:	f000 f89e 	bl	80077c2 <abort>
 8007686:	4780      	blx	r0
 8007688:	e7f4      	b.n	8007674 <_Znwj+0xa>
 800768a:	bd10      	pop	{r4, pc}

0800768c <__cxa_pure_virtual>:
 800768c:	b508      	push	{r3, lr}
 800768e:	f000 f881 	bl	8007794 <_ZSt9terminatev>

08007692 <_ZNSaIcEC1Ev>:
 8007692:	4770      	bx	lr

08007694 <_ZNSaIcED1Ev>:
 8007694:	4770      	bx	lr

08007696 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8007696:	b10a      	cbz	r2, 800769c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8007698:	f000 b8e2 	b.w	8007860 <memcpy>
 800769c:	4770      	bx	lr
	...

080076a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80076a0:	b508      	push	{r3, lr}
 80076a2:	680b      	ldr	r3, [r1, #0]
 80076a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a8:	d302      	bcc.n	80076b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80076aa:	480d      	ldr	r0, [pc, #52]	; (80076e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80076ac:	f000 f886 	bl	80077bc <_ZSt20__throw_length_errorPKc>
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d90b      	bls.n	80076cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80076b4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80076b8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80076bc:	d206      	bcs.n	80076cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80076be:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80076c2:	bf2a      	itet	cs
 80076c4:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80076c8:	6008      	strcc	r0, [r1, #0]
 80076ca:	600b      	strcs	r3, [r1, #0]
 80076cc:	6808      	ldr	r0, [r1, #0]
 80076ce:	3001      	adds	r0, #1
 80076d0:	d501      	bpl.n	80076d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80076d2:	f000 f86d 	bl	80077b0 <_ZSt17__throw_bad_allocv>
 80076d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80076da:	f7ff bfc6 	b.w	800766a <_Znwj>
 80076de:	bf00      	nop
 80076e0:	08007d2c 	.word	0x08007d2c

080076e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80076e4:	2a01      	cmp	r2, #1
 80076e6:	b410      	push	{r4}
 80076e8:	d103      	bne.n	80076f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 80076ea:	780a      	ldrb	r2, [r1, #0]
 80076ec:	bc10      	pop	{r4}
 80076ee:	7002      	strb	r2, [r0, #0]
 80076f0:	4770      	bx	lr
 80076f2:	bc10      	pop	{r4}
 80076f4:	f7ff bfcf 	b.w	8007696 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080076f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80076f8:	b508      	push	{r3, lr}
 80076fa:	1a52      	subs	r2, r2, r1
 80076fc:	f7ff fff2 	bl	80076e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007700:	bd08      	pop	{r3, pc}
	...

08007704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8007704:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007706:	4604      	mov	r4, r0
 8007708:	4616      	mov	r6, r2
 800770a:	460d      	mov	r5, r1
 800770c:	b919      	cbnz	r1, 8007716 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800770e:	b112      	cbz	r2, 8007716 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8007710:	480d      	ldr	r0, [pc, #52]	; (8007748 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8007712:	f000 f850 	bl	80077b6 <_ZSt19__throw_logic_errorPKc>
 8007716:	1b73      	subs	r3, r6, r5
 8007718:	2b0f      	cmp	r3, #15
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	d907      	bls.n	800772e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800771e:	2200      	movs	r2, #0
 8007720:	4620      	mov	r0, r4
 8007722:	a901      	add	r1, sp, #4
 8007724:	f7ff ffbc 	bl	80076a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007728:	9b01      	ldr	r3, [sp, #4]
 800772a:	6020      	str	r0, [r4, #0]
 800772c:	60a3      	str	r3, [r4, #8]
 800772e:	4632      	mov	r2, r6
 8007730:	4629      	mov	r1, r5
 8007732:	6820      	ldr	r0, [r4, #0]
 8007734:	f7ff ffe0 	bl	80076f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8007738:	2100      	movs	r1, #0
 800773a:	9b01      	ldr	r3, [sp, #4]
 800773c:	6822      	ldr	r2, [r4, #0]
 800773e:	6063      	str	r3, [r4, #4]
 8007740:	54d1      	strb	r1, [r2, r3]
 8007742:	b002      	add	sp, #8
 8007744:	bd70      	pop	{r4, r5, r6, pc}
 8007746:	bf00      	nop
 8007748:	08007d44 	.word	0x08007d44

0800774c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	f100 0308 	add.w	r3, r0, #8
 8007752:	4604      	mov	r4, r0
 8007754:	460d      	mov	r5, r1
 8007756:	6003      	str	r3, [r0, #0]
 8007758:	b159      	cbz	r1, 8007772 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800775a:	4608      	mov	r0, r1
 800775c:	f7f8 fd68 	bl	8000230 <strlen>
 8007760:	182a      	adds	r2, r5, r0
 8007762:	4620      	mov	r0, r4
 8007764:	f04f 0300 	mov.w	r3, #0
 8007768:	4629      	mov	r1, r5
 800776a:	f7ff ffcb 	bl	8007704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800776e:	4620      	mov	r0, r4
 8007770:	bd38      	pop	{r3, r4, r5, pc}
 8007772:	2201      	movs	r2, #1
 8007774:	e7f5      	b.n	8007762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08007776 <_ZdlPv>:
 8007776:	f000 b86b 	b.w	8007850 <free>

0800777a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800777a:	b508      	push	{r3, lr}
 800777c:	4780      	blx	r0
 800777e:	f000 f820 	bl	80077c2 <abort>
	...

08007784 <_ZSt13get_terminatev>:
 8007784:	4b02      	ldr	r3, [pc, #8]	; (8007790 <_ZSt13get_terminatev+0xc>)
 8007786:	6818      	ldr	r0, [r3, #0]
 8007788:	f3bf 8f5b 	dmb	ish
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	20000014 	.word	0x20000014

08007794 <_ZSt9terminatev>:
 8007794:	b508      	push	{r3, lr}
 8007796:	f7ff fff5 	bl	8007784 <_ZSt13get_terminatev>
 800779a:	f7ff ffee 	bl	800777a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080077a0 <_ZSt15get_new_handlerv>:
 80077a0:	4b02      	ldr	r3, [pc, #8]	; (80077ac <_ZSt15get_new_handlerv+0xc>)
 80077a2:	6818      	ldr	r0, [r3, #0]
 80077a4:	f3bf 8f5b 	dmb	ish
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	20001c6c 	.word	0x20001c6c

080077b0 <_ZSt17__throw_bad_allocv>:
 80077b0:	b508      	push	{r3, lr}
 80077b2:	f000 f806 	bl	80077c2 <abort>

080077b6 <_ZSt19__throw_logic_errorPKc>:
 80077b6:	b508      	push	{r3, lr}
 80077b8:	f000 f803 	bl	80077c2 <abort>

080077bc <_ZSt20__throw_length_errorPKc>:
 80077bc:	b508      	push	{r3, lr}
 80077be:	f000 f800 	bl	80077c2 <abort>

080077c2 <abort>:
 80077c2:	2006      	movs	r0, #6
 80077c4:	b508      	push	{r3, lr}
 80077c6:	f000 f975 	bl	8007ab4 <raise>
 80077ca:	2001      	movs	r0, #1
 80077cc:	f7fb f841 	bl	8002852 <_exit>

080077d0 <__cxa_atexit>:
 80077d0:	b510      	push	{r4, lr}
 80077d2:	4604      	mov	r4, r0
 80077d4:	4804      	ldr	r0, [pc, #16]	; (80077e8 <__cxa_atexit+0x18>)
 80077d6:	4613      	mov	r3, r2
 80077d8:	b120      	cbz	r0, 80077e4 <__cxa_atexit+0x14>
 80077da:	460a      	mov	r2, r1
 80077dc:	2002      	movs	r0, #2
 80077de:	4621      	mov	r1, r4
 80077e0:	f3af 8000 	nop.w
 80077e4:	bd10      	pop	{r4, pc}
 80077e6:	bf00      	nop
 80077e8:	00000000 	.word	0x00000000

080077ec <__errno>:
 80077ec:	4b01      	ldr	r3, [pc, #4]	; (80077f4 <__errno+0x8>)
 80077ee:	6818      	ldr	r0, [r3, #0]
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	20000018 	.word	0x20000018

080077f8 <__libc_init_array>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	2600      	movs	r6, #0
 80077fc:	4d0c      	ldr	r5, [pc, #48]	; (8007830 <__libc_init_array+0x38>)
 80077fe:	4c0d      	ldr	r4, [pc, #52]	; (8007834 <__libc_init_array+0x3c>)
 8007800:	1b64      	subs	r4, r4, r5
 8007802:	10a4      	asrs	r4, r4, #2
 8007804:	42a6      	cmp	r6, r4
 8007806:	d109      	bne.n	800781c <__libc_init_array+0x24>
 8007808:	f000 f97e 	bl	8007b08 <_init>
 800780c:	2600      	movs	r6, #0
 800780e:	4d0a      	ldr	r5, [pc, #40]	; (8007838 <__libc_init_array+0x40>)
 8007810:	4c0a      	ldr	r4, [pc, #40]	; (800783c <__libc_init_array+0x44>)
 8007812:	1b64      	subs	r4, r4, r5
 8007814:	10a4      	asrs	r4, r4, #2
 8007816:	42a6      	cmp	r6, r4
 8007818:	d105      	bne.n	8007826 <__libc_init_array+0x2e>
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007820:	4798      	blx	r3
 8007822:	3601      	adds	r6, #1
 8007824:	e7ee      	b.n	8007804 <__libc_init_array+0xc>
 8007826:	f855 3b04 	ldr.w	r3, [r5], #4
 800782a:	4798      	blx	r3
 800782c:	3601      	adds	r6, #1
 800782e:	e7f2      	b.n	8007816 <__libc_init_array+0x1e>
 8007830:	08007f0c 	.word	0x08007f0c
 8007834:	08007f0c 	.word	0x08007f0c
 8007838:	08007f0c 	.word	0x08007f0c
 800783c:	08007f14 	.word	0x08007f14

08007840 <malloc>:
 8007840:	4b02      	ldr	r3, [pc, #8]	; (800784c <malloc+0xc>)
 8007842:	4601      	mov	r1, r0
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	f000 b889 	b.w	800795c <_malloc_r>
 800784a:	bf00      	nop
 800784c:	20000018 	.word	0x20000018

08007850 <free>:
 8007850:	4b02      	ldr	r3, [pc, #8]	; (800785c <free+0xc>)
 8007852:	4601      	mov	r1, r0
 8007854:	6818      	ldr	r0, [r3, #0]
 8007856:	f000 b819 	b.w	800788c <_free_r>
 800785a:	bf00      	nop
 800785c:	20000018 	.word	0x20000018

08007860 <memcpy>:
 8007860:	440a      	add	r2, r1
 8007862:	4291      	cmp	r1, r2
 8007864:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007868:	d100      	bne.n	800786c <memcpy+0xc>
 800786a:	4770      	bx	lr
 800786c:	b510      	push	{r4, lr}
 800786e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007872:	4291      	cmp	r1, r2
 8007874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007878:	d1f9      	bne.n	800786e <memcpy+0xe>
 800787a:	bd10      	pop	{r4, pc}

0800787c <memset>:
 800787c:	4603      	mov	r3, r0
 800787e:	4402      	add	r2, r0
 8007880:	4293      	cmp	r3, r2
 8007882:	d100      	bne.n	8007886 <memset+0xa>
 8007884:	4770      	bx	lr
 8007886:	f803 1b01 	strb.w	r1, [r3], #1
 800788a:	e7f9      	b.n	8007880 <memset+0x4>

0800788c <_free_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4605      	mov	r5, r0
 8007890:	2900      	cmp	r1, #0
 8007892:	d040      	beq.n	8007916 <_free_r+0x8a>
 8007894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007898:	1f0c      	subs	r4, r1, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	bfb8      	it	lt
 800789e:	18e4      	addlt	r4, r4, r3
 80078a0:	f000 f924 	bl	8007aec <__malloc_lock>
 80078a4:	4a1c      	ldr	r2, [pc, #112]	; (8007918 <_free_r+0x8c>)
 80078a6:	6813      	ldr	r3, [r2, #0]
 80078a8:	b933      	cbnz	r3, 80078b8 <_free_r+0x2c>
 80078aa:	6063      	str	r3, [r4, #4]
 80078ac:	6014      	str	r4, [r2, #0]
 80078ae:	4628      	mov	r0, r5
 80078b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b4:	f000 b920 	b.w	8007af8 <__malloc_unlock>
 80078b8:	42a3      	cmp	r3, r4
 80078ba:	d908      	bls.n	80078ce <_free_r+0x42>
 80078bc:	6820      	ldr	r0, [r4, #0]
 80078be:	1821      	adds	r1, r4, r0
 80078c0:	428b      	cmp	r3, r1
 80078c2:	bf01      	itttt	eq
 80078c4:	6819      	ldreq	r1, [r3, #0]
 80078c6:	685b      	ldreq	r3, [r3, #4]
 80078c8:	1809      	addeq	r1, r1, r0
 80078ca:	6021      	streq	r1, [r4, #0]
 80078cc:	e7ed      	b.n	80078aa <_free_r+0x1e>
 80078ce:	461a      	mov	r2, r3
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	b10b      	cbz	r3, 80078d8 <_free_r+0x4c>
 80078d4:	42a3      	cmp	r3, r4
 80078d6:	d9fa      	bls.n	80078ce <_free_r+0x42>
 80078d8:	6811      	ldr	r1, [r2, #0]
 80078da:	1850      	adds	r0, r2, r1
 80078dc:	42a0      	cmp	r0, r4
 80078de:	d10b      	bne.n	80078f8 <_free_r+0x6c>
 80078e0:	6820      	ldr	r0, [r4, #0]
 80078e2:	4401      	add	r1, r0
 80078e4:	1850      	adds	r0, r2, r1
 80078e6:	4283      	cmp	r3, r0
 80078e8:	6011      	str	r1, [r2, #0]
 80078ea:	d1e0      	bne.n	80078ae <_free_r+0x22>
 80078ec:	6818      	ldr	r0, [r3, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	4401      	add	r1, r0
 80078f2:	6011      	str	r1, [r2, #0]
 80078f4:	6053      	str	r3, [r2, #4]
 80078f6:	e7da      	b.n	80078ae <_free_r+0x22>
 80078f8:	d902      	bls.n	8007900 <_free_r+0x74>
 80078fa:	230c      	movs	r3, #12
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	e7d6      	b.n	80078ae <_free_r+0x22>
 8007900:	6820      	ldr	r0, [r4, #0]
 8007902:	1821      	adds	r1, r4, r0
 8007904:	428b      	cmp	r3, r1
 8007906:	bf01      	itttt	eq
 8007908:	6819      	ldreq	r1, [r3, #0]
 800790a:	685b      	ldreq	r3, [r3, #4]
 800790c:	1809      	addeq	r1, r1, r0
 800790e:	6021      	streq	r1, [r4, #0]
 8007910:	6063      	str	r3, [r4, #4]
 8007912:	6054      	str	r4, [r2, #4]
 8007914:	e7cb      	b.n	80078ae <_free_r+0x22>
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	20001c70 	.word	0x20001c70

0800791c <sbrk_aligned>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	4e0e      	ldr	r6, [pc, #56]	; (8007958 <sbrk_aligned+0x3c>)
 8007920:	460c      	mov	r4, r1
 8007922:	6831      	ldr	r1, [r6, #0]
 8007924:	4605      	mov	r5, r0
 8007926:	b911      	cbnz	r1, 800792e <sbrk_aligned+0x12>
 8007928:	f000 f88c 	bl	8007a44 <_sbrk_r>
 800792c:	6030      	str	r0, [r6, #0]
 800792e:	4621      	mov	r1, r4
 8007930:	4628      	mov	r0, r5
 8007932:	f000 f887 	bl	8007a44 <_sbrk_r>
 8007936:	1c43      	adds	r3, r0, #1
 8007938:	d00a      	beq.n	8007950 <sbrk_aligned+0x34>
 800793a:	1cc4      	adds	r4, r0, #3
 800793c:	f024 0403 	bic.w	r4, r4, #3
 8007940:	42a0      	cmp	r0, r4
 8007942:	d007      	beq.n	8007954 <sbrk_aligned+0x38>
 8007944:	1a21      	subs	r1, r4, r0
 8007946:	4628      	mov	r0, r5
 8007948:	f000 f87c 	bl	8007a44 <_sbrk_r>
 800794c:	3001      	adds	r0, #1
 800794e:	d101      	bne.n	8007954 <sbrk_aligned+0x38>
 8007950:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007954:	4620      	mov	r0, r4
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	20001c74 	.word	0x20001c74

0800795c <_malloc_r>:
 800795c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007960:	1ccd      	adds	r5, r1, #3
 8007962:	f025 0503 	bic.w	r5, r5, #3
 8007966:	3508      	adds	r5, #8
 8007968:	2d0c      	cmp	r5, #12
 800796a:	bf38      	it	cc
 800796c:	250c      	movcc	r5, #12
 800796e:	2d00      	cmp	r5, #0
 8007970:	4607      	mov	r7, r0
 8007972:	db01      	blt.n	8007978 <_malloc_r+0x1c>
 8007974:	42a9      	cmp	r1, r5
 8007976:	d905      	bls.n	8007984 <_malloc_r+0x28>
 8007978:	230c      	movs	r3, #12
 800797a:	2600      	movs	r6, #0
 800797c:	603b      	str	r3, [r7, #0]
 800797e:	4630      	mov	r0, r6
 8007980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007984:	4e2e      	ldr	r6, [pc, #184]	; (8007a40 <_malloc_r+0xe4>)
 8007986:	f000 f8b1 	bl	8007aec <__malloc_lock>
 800798a:	6833      	ldr	r3, [r6, #0]
 800798c:	461c      	mov	r4, r3
 800798e:	bb34      	cbnz	r4, 80079de <_malloc_r+0x82>
 8007990:	4629      	mov	r1, r5
 8007992:	4638      	mov	r0, r7
 8007994:	f7ff ffc2 	bl	800791c <sbrk_aligned>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	4604      	mov	r4, r0
 800799c:	d14d      	bne.n	8007a3a <_malloc_r+0xde>
 800799e:	6834      	ldr	r4, [r6, #0]
 80079a0:	4626      	mov	r6, r4
 80079a2:	2e00      	cmp	r6, #0
 80079a4:	d140      	bne.n	8007a28 <_malloc_r+0xcc>
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	4631      	mov	r1, r6
 80079aa:	4638      	mov	r0, r7
 80079ac:	eb04 0803 	add.w	r8, r4, r3
 80079b0:	f000 f848 	bl	8007a44 <_sbrk_r>
 80079b4:	4580      	cmp	r8, r0
 80079b6:	d13a      	bne.n	8007a2e <_malloc_r+0xd2>
 80079b8:	6821      	ldr	r1, [r4, #0]
 80079ba:	3503      	adds	r5, #3
 80079bc:	1a6d      	subs	r5, r5, r1
 80079be:	f025 0503 	bic.w	r5, r5, #3
 80079c2:	3508      	adds	r5, #8
 80079c4:	2d0c      	cmp	r5, #12
 80079c6:	bf38      	it	cc
 80079c8:	250c      	movcc	r5, #12
 80079ca:	4638      	mov	r0, r7
 80079cc:	4629      	mov	r1, r5
 80079ce:	f7ff ffa5 	bl	800791c <sbrk_aligned>
 80079d2:	3001      	adds	r0, #1
 80079d4:	d02b      	beq.n	8007a2e <_malloc_r+0xd2>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	442b      	add	r3, r5
 80079da:	6023      	str	r3, [r4, #0]
 80079dc:	e00e      	b.n	80079fc <_malloc_r+0xa0>
 80079de:	6822      	ldr	r2, [r4, #0]
 80079e0:	1b52      	subs	r2, r2, r5
 80079e2:	d41e      	bmi.n	8007a22 <_malloc_r+0xc6>
 80079e4:	2a0b      	cmp	r2, #11
 80079e6:	d916      	bls.n	8007a16 <_malloc_r+0xba>
 80079e8:	1961      	adds	r1, r4, r5
 80079ea:	42a3      	cmp	r3, r4
 80079ec:	6025      	str	r5, [r4, #0]
 80079ee:	bf18      	it	ne
 80079f0:	6059      	strne	r1, [r3, #4]
 80079f2:	6863      	ldr	r3, [r4, #4]
 80079f4:	bf08      	it	eq
 80079f6:	6031      	streq	r1, [r6, #0]
 80079f8:	5162      	str	r2, [r4, r5]
 80079fa:	604b      	str	r3, [r1, #4]
 80079fc:	4638      	mov	r0, r7
 80079fe:	f104 060b 	add.w	r6, r4, #11
 8007a02:	f000 f879 	bl	8007af8 <__malloc_unlock>
 8007a06:	f026 0607 	bic.w	r6, r6, #7
 8007a0a:	1d23      	adds	r3, r4, #4
 8007a0c:	1af2      	subs	r2, r6, r3
 8007a0e:	d0b6      	beq.n	800797e <_malloc_r+0x22>
 8007a10:	1b9b      	subs	r3, r3, r6
 8007a12:	50a3      	str	r3, [r4, r2]
 8007a14:	e7b3      	b.n	800797e <_malloc_r+0x22>
 8007a16:	6862      	ldr	r2, [r4, #4]
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	bf0c      	ite	eq
 8007a1c:	6032      	streq	r2, [r6, #0]
 8007a1e:	605a      	strne	r2, [r3, #4]
 8007a20:	e7ec      	b.n	80079fc <_malloc_r+0xa0>
 8007a22:	4623      	mov	r3, r4
 8007a24:	6864      	ldr	r4, [r4, #4]
 8007a26:	e7b2      	b.n	800798e <_malloc_r+0x32>
 8007a28:	4634      	mov	r4, r6
 8007a2a:	6876      	ldr	r6, [r6, #4]
 8007a2c:	e7b9      	b.n	80079a2 <_malloc_r+0x46>
 8007a2e:	230c      	movs	r3, #12
 8007a30:	4638      	mov	r0, r7
 8007a32:	603b      	str	r3, [r7, #0]
 8007a34:	f000 f860 	bl	8007af8 <__malloc_unlock>
 8007a38:	e7a1      	b.n	800797e <_malloc_r+0x22>
 8007a3a:	6025      	str	r5, [r4, #0]
 8007a3c:	e7de      	b.n	80079fc <_malloc_r+0xa0>
 8007a3e:	bf00      	nop
 8007a40:	20001c70 	.word	0x20001c70

08007a44 <_sbrk_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	2300      	movs	r3, #0
 8007a48:	4d05      	ldr	r5, [pc, #20]	; (8007a60 <_sbrk_r+0x1c>)
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	602b      	str	r3, [r5, #0]
 8007a50:	f7fa ff0a 	bl	8002868 <_sbrk>
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	d102      	bne.n	8007a5e <_sbrk_r+0x1a>
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	b103      	cbz	r3, 8007a5e <_sbrk_r+0x1a>
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	20001c78 	.word	0x20001c78

08007a64 <_raise_r>:
 8007a64:	291f      	cmp	r1, #31
 8007a66:	b538      	push	{r3, r4, r5, lr}
 8007a68:	4604      	mov	r4, r0
 8007a6a:	460d      	mov	r5, r1
 8007a6c:	d904      	bls.n	8007a78 <_raise_r+0x14>
 8007a6e:	2316      	movs	r3, #22
 8007a70:	6003      	str	r3, [r0, #0]
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a7a:	b112      	cbz	r2, 8007a82 <_raise_r+0x1e>
 8007a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a80:	b94b      	cbnz	r3, 8007a96 <_raise_r+0x32>
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 f830 	bl	8007ae8 <_getpid_r>
 8007a88:	462a      	mov	r2, r5
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a92:	f000 b817 	b.w	8007ac4 <_kill_r>
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d00a      	beq.n	8007ab0 <_raise_r+0x4c>
 8007a9a:	1c59      	adds	r1, r3, #1
 8007a9c:	d103      	bne.n	8007aa6 <_raise_r+0x42>
 8007a9e:	2316      	movs	r3, #22
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	e7e7      	b.n	8007a76 <_raise_r+0x12>
 8007aa6:	2400      	movs	r4, #0
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007aae:	4798      	blx	r3
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	e7e0      	b.n	8007a76 <_raise_r+0x12>

08007ab4 <raise>:
 8007ab4:	4b02      	ldr	r3, [pc, #8]	; (8007ac0 <raise+0xc>)
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	f7ff bfd3 	b.w	8007a64 <_raise_r>
 8007abe:	bf00      	nop
 8007ac0:	20000018 	.word	0x20000018

08007ac4 <_kill_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	4d06      	ldr	r5, [pc, #24]	; (8007ae4 <_kill_r+0x20>)
 8007aca:	4604      	mov	r4, r0
 8007acc:	4608      	mov	r0, r1
 8007ace:	4611      	mov	r1, r2
 8007ad0:	602b      	str	r3, [r5, #0]
 8007ad2:	f7fa feae 	bl	8002832 <_kill>
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	d102      	bne.n	8007ae0 <_kill_r+0x1c>
 8007ada:	682b      	ldr	r3, [r5, #0]
 8007adc:	b103      	cbz	r3, 8007ae0 <_kill_r+0x1c>
 8007ade:	6023      	str	r3, [r4, #0]
 8007ae0:	bd38      	pop	{r3, r4, r5, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20001c78 	.word	0x20001c78

08007ae8 <_getpid_r>:
 8007ae8:	f7fa be9c 	b.w	8002824 <_getpid>

08007aec <__malloc_lock>:
 8007aec:	4801      	ldr	r0, [pc, #4]	; (8007af4 <__malloc_lock+0x8>)
 8007aee:	f000 b809 	b.w	8007b04 <__retarget_lock_acquire_recursive>
 8007af2:	bf00      	nop
 8007af4:	20001c7c 	.word	0x20001c7c

08007af8 <__malloc_unlock>:
 8007af8:	4801      	ldr	r0, [pc, #4]	; (8007b00 <__malloc_unlock+0x8>)
 8007afa:	f000 b804 	b.w	8007b06 <__retarget_lock_release_recursive>
 8007afe:	bf00      	nop
 8007b00:	20001c7c 	.word	0x20001c7c

08007b04 <__retarget_lock_acquire_recursive>:
 8007b04:	4770      	bx	lr

08007b06 <__retarget_lock_release_recursive>:
 8007b06:	4770      	bx	lr

08007b08 <_init>:
 8007b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0a:	bf00      	nop
 8007b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b0e:	bc08      	pop	{r3}
 8007b10:	469e      	mov	lr, r3
 8007b12:	4770      	bx	lr

08007b14 <_fini>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	bf00      	nop
 8007b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1a:	bc08      	pop	{r3}
 8007b1c:	469e      	mov	lr, r3
 8007b1e:	4770      	bx	lr
