
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b234  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800b424  0800b424  0001b424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000006c  0800b7fc  0800b7fc  0001b7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000118  0800b868  0800b868  0001b868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b980  0800b980  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b980  0800b980  0001b980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b988  0800b988  0001b988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b98c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a4c  2000007c  0800ba08  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ac8  0800ba08  00023ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00050f6a  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000096d9  00000000  00000000  0007100f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff8  00000000  00000000  0007a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001dd8  00000000  00000000  0007c6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025292  00000000  00000000  0007e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d44a  00000000  00000000  000a374a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bad0f  00000000  00000000  000d0b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018b8a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a5a4  00000000  00000000  0018b8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000007c 	.word	0x2000007c
 800020c:	00000000 	.word	0x00000000
 8000210:	0800b40c 	.word	0x0800b40c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000080 	.word	0x20000080
 800022c:	0800b40c 	.word	0x0800b40c

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <selfrel_offset31>:
 8000240:	6803      	ldr	r3, [r0, #0]
 8000242:	005a      	lsls	r2, r3, #1
 8000244:	bf4c      	ite	mi
 8000246:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800024a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800024e:	4418      	add	r0, r3
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop

08000254 <search_EIT_table>:
 8000254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000258:	b339      	cbz	r1, 80002aa <search_EIT_table+0x56>
 800025a:	1e4f      	subs	r7, r1, #1
 800025c:	4604      	mov	r4, r0
 800025e:	4615      	mov	r5, r2
 8000260:	463e      	mov	r6, r7
 8000262:	f04f 0800 	mov.w	r8, #0
 8000266:	eb08 0106 	add.w	r1, r8, r6
 800026a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800026e:	1049      	asrs	r1, r1, #1
 8000270:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000274:	4648      	mov	r0, r9
 8000276:	f7ff ffe3 	bl	8000240 <selfrel_offset31>
 800027a:	4603      	mov	r3, r0
 800027c:	00c8      	lsls	r0, r1, #3
 800027e:	3008      	adds	r0, #8
 8000280:	428f      	cmp	r7, r1
 8000282:	4420      	add	r0, r4
 8000284:	d00b      	beq.n	800029e <search_EIT_table+0x4a>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d80b      	bhi.n	80002a2 <search_EIT_table+0x4e>
 800028a:	f7ff ffd9 	bl	8000240 <selfrel_offset31>
 800028e:	3801      	subs	r0, #1
 8000290:	42a8      	cmp	r0, r5
 8000292:	f101 0801 	add.w	r8, r1, #1
 8000296:	d3e6      	bcc.n	8000266 <search_EIT_table+0x12>
 8000298:	4648      	mov	r0, r9
 800029a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800029e:	42ab      	cmp	r3, r5
 80002a0:	d9fa      	bls.n	8000298 <search_EIT_table+0x44>
 80002a2:	4588      	cmp	r8, r1
 80002a4:	d001      	beq.n	80002aa <search_EIT_table+0x56>
 80002a6:	1e4e      	subs	r6, r1, #1
 80002a8:	e7dd      	b.n	8000266 <search_EIT_table+0x12>
 80002aa:	f04f 0900 	mov.w	r9, #0
 80002ae:	4648      	mov	r0, r9
 80002b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080002b4 <__gnu_unwind_get_pr_addr>:
 80002b4:	2801      	cmp	r0, #1
 80002b6:	d007      	beq.n	80002c8 <__gnu_unwind_get_pr_addr+0x14>
 80002b8:	2802      	cmp	r0, #2
 80002ba:	d007      	beq.n	80002cc <__gnu_unwind_get_pr_addr+0x18>
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <__gnu_unwind_get_pr_addr+0x1c>)
 80002be:	2800      	cmp	r0, #0
 80002c0:	bf0c      	ite	eq
 80002c2:	4618      	moveq	r0, r3
 80002c4:	2000      	movne	r0, #0
 80002c6:	4770      	bx	lr
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <__gnu_unwind_get_pr_addr+0x20>)
 80002ca:	4770      	bx	lr
 80002cc:	4802      	ldr	r0, [pc, #8]	; (80002d8 <__gnu_unwind_get_pr_addr+0x24>)
 80002ce:	4770      	bx	lr
 80002d0:	080009a5 	.word	0x080009a5
 80002d4:	080009a9 	.word	0x080009a9
 80002d8:	080009ad 	.word	0x080009ad

080002dc <get_eit_entry>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	4b24      	ldr	r3, [pc, #144]	; (8000370 <get_eit_entry+0x94>)
 80002e0:	4604      	mov	r4, r0
 80002e2:	b083      	sub	sp, #12
 80002e4:	1e8d      	subs	r5, r1, #2
 80002e6:	b33b      	cbz	r3, 8000338 <get_eit_entry+0x5c>
 80002e8:	4628      	mov	r0, r5
 80002ea:	a901      	add	r1, sp, #4
 80002ec:	f3af 8000 	nop.w
 80002f0:	b1e8      	cbz	r0, 800032e <get_eit_entry+0x52>
 80002f2:	9901      	ldr	r1, [sp, #4]
 80002f4:	462a      	mov	r2, r5
 80002f6:	f7ff ffad 	bl	8000254 <search_EIT_table>
 80002fa:	4601      	mov	r1, r0
 80002fc:	b1b8      	cbz	r0, 800032e <get_eit_entry+0x52>
 80002fe:	f7ff ff9f 	bl	8000240 <selfrel_offset31>
 8000302:	684b      	ldr	r3, [r1, #4]
 8000304:	64a0      	str	r0, [r4, #72]	; 0x48
 8000306:	2b01      	cmp	r3, #1
 8000308:	d02e      	beq.n	8000368 <get_eit_entry+0x8c>
 800030a:	2b00      	cmp	r3, #0
 800030c:	db27      	blt.n	800035e <get_eit_entry+0x82>
 800030e:	1d08      	adds	r0, r1, #4
 8000310:	f7ff ff96 	bl	8000240 <selfrel_offset31>
 8000314:	2300      	movs	r3, #0
 8000316:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800031a:	6803      	ldr	r3, [r0, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	db12      	blt.n	8000346 <get_eit_entry+0x6a>
 8000320:	f7ff ff8e 	bl	8000240 <selfrel_offset31>
 8000324:	4603      	mov	r3, r0
 8000326:	2000      	movs	r0, #0
 8000328:	6123      	str	r3, [r4, #16]
 800032a:	b003      	add	sp, #12
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	2300      	movs	r3, #0
 8000330:	2009      	movs	r0, #9
 8000332:	6123      	str	r3, [r4, #16]
 8000334:	b003      	add	sp, #12
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <get_eit_entry+0x98>)
 800033a:	490f      	ldr	r1, [pc, #60]	; (8000378 <get_eit_entry+0x9c>)
 800033c:	4618      	mov	r0, r3
 800033e:	1ac9      	subs	r1, r1, r3
 8000340:	10c9      	asrs	r1, r1, #3
 8000342:	9101      	str	r1, [sp, #4]
 8000344:	e7d6      	b.n	80002f4 <get_eit_entry+0x18>
 8000346:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800034a:	f7ff ffb3 	bl	80002b4 <__gnu_unwind_get_pr_addr>
 800034e:	2800      	cmp	r0, #0
 8000350:	4603      	mov	r3, r0
 8000352:	bf14      	ite	ne
 8000354:	2000      	movne	r0, #0
 8000356:	2009      	moveq	r0, #9
 8000358:	6123      	str	r3, [r4, #16]
 800035a:	b003      	add	sp, #12
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	2301      	movs	r3, #1
 8000360:	1d08      	adds	r0, r1, #4
 8000362:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000366:	e7d8      	b.n	800031a <get_eit_entry+0x3e>
 8000368:	2300      	movs	r3, #0
 800036a:	2005      	movs	r0, #5
 800036c:	6123      	str	r3, [r4, #16]
 800036e:	e7dc      	b.n	800032a <get_eit_entry+0x4e>
 8000370:	00000000 	.word	0x00000000
 8000374:	0800b868 	.word	0x0800b868
 8000378:	0800b980 	.word	0x0800b980

0800037c <restore_non_core_regs>:
 800037c:	6803      	ldr	r3, [r0, #0]
 800037e:	b510      	push	{r4, lr}
 8000380:	07da      	lsls	r2, r3, #31
 8000382:	4604      	mov	r4, r0
 8000384:	d406      	bmi.n	8000394 <restore_non_core_regs+0x18>
 8000386:	079b      	lsls	r3, r3, #30
 8000388:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800038c:	d509      	bpl.n	80003a2 <restore_non_core_regs+0x26>
 800038e:	f000 fc5d 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000392:	6823      	ldr	r3, [r4, #0]
 8000394:	0759      	lsls	r1, r3, #29
 8000396:	d509      	bpl.n	80003ac <restore_non_core_regs+0x30>
 8000398:	071a      	lsls	r2, r3, #28
 800039a:	d50e      	bpl.n	80003ba <restore_non_core_regs+0x3e>
 800039c:	06db      	lsls	r3, r3, #27
 800039e:	d513      	bpl.n	80003c8 <restore_non_core_regs+0x4c>
 80003a0:	bd10      	pop	{r4, pc}
 80003a2:	f000 fc4b 	bl	8000c3c <__gnu_Unwind_Restore_VFP>
 80003a6:	6823      	ldr	r3, [r4, #0]
 80003a8:	0759      	lsls	r1, r3, #29
 80003aa:	d4f5      	bmi.n	8000398 <restore_non_core_regs+0x1c>
 80003ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80003b0:	f000 fc54 	bl	8000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80003b4:	6823      	ldr	r3, [r4, #0]
 80003b6:	071a      	lsls	r2, r3, #28
 80003b8:	d4f0      	bmi.n	800039c <restore_non_core_regs+0x20>
 80003ba:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80003be:	f000 fc55 	bl	8000c6c <__gnu_Unwind_Restore_WMMXD>
 80003c2:	6823      	ldr	r3, [r4, #0]
 80003c4:	06db      	lsls	r3, r3, #27
 80003c6:	d4eb      	bmi.n	80003a0 <restore_non_core_regs+0x24>
 80003c8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80003cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003d0:	f000 bc90 	b.w	8000cf4 <__gnu_Unwind_Restore_WMMXC>

080003d4 <__gnu_unwind_24bit.constprop.0>:
 80003d4:	2009      	movs	r0, #9
 80003d6:	4770      	bx	lr

080003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80003d8:	4603      	mov	r3, r0
 80003da:	6800      	ldr	r0, [r0, #0]
 80003dc:	b100      	cbz	r0, 80003e0 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80003de:	4418      	add	r0, r3
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop

080003e4 <_Unwind_DebugHook>:
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop

080003e8 <unwind_phase2>:
 80003e8:	b570      	push	{r4, r5, r6, lr}
 80003ea:	4604      	mov	r4, r0
 80003ec:	460e      	mov	r6, r1
 80003ee:	4620      	mov	r0, r4
 80003f0:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80003f2:	f7ff ff73 	bl	80002dc <get_eit_entry>
 80003f6:	4605      	mov	r5, r0
 80003f8:	b998      	cbnz	r0, 8000422 <unwind_phase2+0x3a>
 80003fa:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 80003fe:	4632      	mov	r2, r6
 8000400:	4621      	mov	r1, r4
 8000402:	2001      	movs	r0, #1
 8000404:	6923      	ldr	r3, [r4, #16]
 8000406:	f8c4 c014 	str.w	ip, [r4, #20]
 800040a:	4798      	blx	r3
 800040c:	2808      	cmp	r0, #8
 800040e:	d0ee      	beq.n	80003ee <unwind_phase2+0x6>
 8000410:	2807      	cmp	r0, #7
 8000412:	d106      	bne.n	8000422 <unwind_phase2+0x3a>
 8000414:	4628      	mov	r0, r5
 8000416:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000418:	f7ff ffe4 	bl	80003e4 <_Unwind_DebugHook>
 800041c:	1d30      	adds	r0, r6, #4
 800041e:	f000 fc01 	bl	8000c24 <__restore_core_regs>
 8000422:	f00a fa64 	bl	800a8ee <abort>
 8000426:	bf00      	nop

08000428 <unwind_phase2_forced>:
 8000428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800042c:	f04f 0a00 	mov.w	sl, #0
 8000430:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000434:	f10d 0e0c 	add.w	lr, sp, #12
 8000438:	f101 0c04 	add.w	ip, r1, #4
 800043c:	68c7      	ldr	r7, [r0, #12]
 800043e:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000442:	4606      	mov	r6, r0
 8000444:	4614      	mov	r4, r2
 8000446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800044a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800044e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000452:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000456:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800045a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800045e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000462:	ad02      	add	r5, sp, #8
 8000464:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000468:	f8c5 a000 	str.w	sl, [r5]
 800046c:	e021      	b.n	80004b2 <unwind_phase2_forced+0x8a>
 800046e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000470:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000474:	4629      	mov	r1, r5
 8000476:	6173      	str	r3, [r6, #20]
 8000478:	a87a      	add	r0, sp, #488	; 0x1e8
 800047a:	f00a faa7 	bl	800a9cc <memcpy>
 800047e:	4631      	mov	r1, r6
 8000480:	4650      	mov	r0, sl
 8000482:	6933      	ldr	r3, [r6, #16]
 8000484:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000486:	4798      	blx	r3
 8000488:	9c88      	ldr	r4, [sp, #544]	; 0x220
 800048a:	4682      	mov	sl, r0
 800048c:	646c      	str	r4, [r5, #68]	; 0x44
 800048e:	4633      	mov	r3, r6
 8000490:	4632      	mov	r2, r6
 8000492:	4649      	mov	r1, r9
 8000494:	2001      	movs	r0, #1
 8000496:	e9cd 5800 	strd	r5, r8, [sp]
 800049a:	47b8      	blx	r7
 800049c:	4604      	mov	r4, r0
 800049e:	b9f0      	cbnz	r0, 80004de <unwind_phase2_forced+0xb6>
 80004a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80004a4:	4628      	mov	r0, r5
 80004a6:	a97a      	add	r1, sp, #488	; 0x1e8
 80004a8:	f00a fa90 	bl	800a9cc <memcpy>
 80004ac:	f1ba 0f08 	cmp.w	sl, #8
 80004b0:	d11b      	bne.n	80004ea <unwind_phase2_forced+0xc2>
 80004b2:	4630      	mov	r0, r6
 80004b4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004b6:	f7ff ff11 	bl	80002dc <get_eit_entry>
 80004ba:	f104 0909 	add.w	r9, r4, #9
 80004be:	fa5f fa89 	uxtb.w	sl, r9
 80004c2:	4604      	mov	r4, r0
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d0d2      	beq.n	800046e <unwind_phase2_forced+0x46>
 80004c8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80004ca:	4633      	mov	r3, r6
 80004cc:	6469      	str	r1, [r5, #68]	; 0x44
 80004ce:	4632      	mov	r2, r6
 80004d0:	2001      	movs	r0, #1
 80004d2:	e9cd 5800 	strd	r5, r8, [sp]
 80004d6:	f04a 0110 	orr.w	r1, sl, #16
 80004da:	47b8      	blx	r7
 80004dc:	b100      	cbz	r0, 80004e0 <unwind_phase2_forced+0xb8>
 80004de:	2409      	movs	r4, #9
 80004e0:	4620      	mov	r0, r4
 80004e2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1ba 0f07 	cmp.w	sl, #7
 80004ee:	d1f6      	bne.n	80004de <unwind_phase2_forced+0xb6>
 80004f0:	4620      	mov	r0, r4
 80004f2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004f4:	f7ff ff76 	bl	80003e4 <_Unwind_DebugHook>
 80004f8:	a803      	add	r0, sp, #12
 80004fa:	f000 fb93 	bl	8000c24 <__restore_core_regs>
 80004fe:	bf00      	nop

08000500 <_Unwind_GetCFA>:
 8000500:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000502:	4770      	bx	lr

08000504 <__gnu_Unwind_RaiseException>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800050a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800050c:	b0f9      	sub	sp, #484	; 0x1e4
 800050e:	640b      	str	r3, [r1, #64]	; 0x40
 8000510:	ac01      	add	r4, sp, #4
 8000512:	f101 0c04 	add.w	ip, r1, #4
 8000516:	460e      	mov	r6, r1
 8000518:	4605      	mov	r5, r0
 800051a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000534:	9700      	str	r7, [sp, #0]
 8000536:	e006      	b.n	8000546 <__gnu_Unwind_RaiseException+0x42>
 8000538:	466a      	mov	r2, sp
 800053a:	4629      	mov	r1, r5
 800053c:	692b      	ldr	r3, [r5, #16]
 800053e:	4798      	blx	r3
 8000540:	2808      	cmp	r0, #8
 8000542:	4604      	mov	r4, r0
 8000544:	d108      	bne.n	8000558 <__gnu_Unwind_RaiseException+0x54>
 8000546:	4628      	mov	r0, r5
 8000548:	9910      	ldr	r1, [sp, #64]	; 0x40
 800054a:	f7ff fec7 	bl	80002dc <get_eit_entry>
 800054e:	2800      	cmp	r0, #0
 8000550:	d0f2      	beq.n	8000538 <__gnu_Unwind_RaiseException+0x34>
 8000552:	2009      	movs	r0, #9
 8000554:	b079      	add	sp, #484	; 0x1e4
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000558:	4668      	mov	r0, sp
 800055a:	f7ff ff0f 	bl	800037c <restore_non_core_regs>
 800055e:	2c06      	cmp	r4, #6
 8000560:	d1f7      	bne.n	8000552 <__gnu_Unwind_RaiseException+0x4e>
 8000562:	4631      	mov	r1, r6
 8000564:	4628      	mov	r0, r5
 8000566:	f7ff ff3f 	bl	80003e8 <unwind_phase2>
 800056a:	bf00      	nop

0800056c <__gnu_Unwind_ForcedUnwind>:
 800056c:	b410      	push	{r4}
 800056e:	4614      	mov	r4, r2
 8000570:	6184      	str	r4, [r0, #24]
 8000572:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000574:	60c1      	str	r1, [r0, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	641c      	str	r4, [r3, #64]	; 0x40
 800057a:	4619      	mov	r1, r3
 800057c:	bc10      	pop	{r4}
 800057e:	e753      	b.n	8000428 <unwind_phase2_forced>

08000580 <__gnu_Unwind_Resume>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	6943      	ldr	r3, [r0, #20]
 8000584:	68c6      	ldr	r6, [r0, #12]
 8000586:	640b      	str	r3, [r1, #64]	; 0x40
 8000588:	b9ae      	cbnz	r6, 80005b6 <__gnu_Unwind_Resume+0x36>
 800058a:	460a      	mov	r2, r1
 800058c:	6903      	ldr	r3, [r0, #16]
 800058e:	4604      	mov	r4, r0
 8000590:	460d      	mov	r5, r1
 8000592:	4601      	mov	r1, r0
 8000594:	2002      	movs	r0, #2
 8000596:	4798      	blx	r3
 8000598:	2807      	cmp	r0, #7
 800059a:	d005      	beq.n	80005a8 <__gnu_Unwind_Resume+0x28>
 800059c:	2808      	cmp	r0, #8
 800059e:	d10f      	bne.n	80005c0 <__gnu_Unwind_Resume+0x40>
 80005a0:	4629      	mov	r1, r5
 80005a2:	4620      	mov	r0, r4
 80005a4:	f7ff ff20 	bl	80003e8 <unwind_phase2>
 80005a8:	4630      	mov	r0, r6
 80005aa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80005ac:	f7ff ff1a 	bl	80003e4 <_Unwind_DebugHook>
 80005b0:	1d28      	adds	r0, r5, #4
 80005b2:	f000 fb37 	bl	8000c24 <__restore_core_regs>
 80005b6:	2201      	movs	r2, #1
 80005b8:	f7ff ff36 	bl	8000428 <unwind_phase2_forced>
 80005bc:	f00a f997 	bl	800a8ee <abort>
 80005c0:	f00a f995 	bl	800a8ee <abort>

080005c4 <__gnu_Unwind_Resume_or_Rethrow>:
 80005c4:	68c2      	ldr	r2, [r0, #12]
 80005c6:	b12a      	cbz	r2, 80005d4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80005c8:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 80005cc:	2200      	movs	r2, #0
 80005ce:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 80005d2:	e729      	b.n	8000428 <unwind_phase2_forced>
 80005d4:	e796      	b.n	8000504 <__gnu_Unwind_RaiseException>
 80005d6:	bf00      	nop

080005d8 <_Unwind_Complete>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_Unwind_DeleteException>:
 80005dc:	6883      	ldr	r3, [r0, #8]
 80005de:	4601      	mov	r1, r0
 80005e0:	b10b      	cbz	r3, 80005e6 <_Unwind_DeleteException+0xa>
 80005e2:	2001      	movs	r0, #1
 80005e4:	4718      	bx	r3
 80005e6:	4770      	bx	lr

080005e8 <_Unwind_VRS_Get>:
 80005e8:	2901      	cmp	r1, #1
 80005ea:	d012      	beq.n	8000612 <_Unwind_VRS_Get+0x2a>
 80005ec:	d809      	bhi.n	8000602 <_Unwind_VRS_Get+0x1a>
 80005ee:	b973      	cbnz	r3, 800060e <_Unwind_VRS_Get+0x26>
 80005f0:	2a0f      	cmp	r2, #15
 80005f2:	d80c      	bhi.n	800060e <_Unwind_VRS_Get+0x26>
 80005f4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005f8:	6842      	ldr	r2, [r0, #4]
 80005fa:	4618      	mov	r0, r3
 80005fc:	9b00      	ldr	r3, [sp, #0]
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	4770      	bx	lr
 8000602:	3903      	subs	r1, #3
 8000604:	2901      	cmp	r1, #1
 8000606:	bf94      	ite	ls
 8000608:	2001      	movls	r0, #1
 800060a:	2002      	movhi	r0, #2
 800060c:	4770      	bx	lr
 800060e:	2002      	movs	r0, #2
 8000610:	4770      	bx	lr
 8000612:	4608      	mov	r0, r1
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <_Unwind_GetGR>:
 8000618:	2300      	movs	r3, #0
 800061a:	b500      	push	{lr}
 800061c:	b085      	sub	sp, #20
 800061e:	460a      	mov	r2, r1
 8000620:	a903      	add	r1, sp, #12
 8000622:	9100      	str	r1, [sp, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	f7ff ffdf 	bl	80005e8 <_Unwind_VRS_Get>
 800062a:	9803      	ldr	r0, [sp, #12]
 800062c:	b005      	add	sp, #20
 800062e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000632:	bf00      	nop

08000634 <_Unwind_VRS_Set>:
 8000634:	2901      	cmp	r1, #1
 8000636:	d012      	beq.n	800065e <_Unwind_VRS_Set+0x2a>
 8000638:	d809      	bhi.n	800064e <_Unwind_VRS_Set+0x1a>
 800063a:	b973      	cbnz	r3, 800065a <_Unwind_VRS_Set+0x26>
 800063c:	2a0f      	cmp	r2, #15
 800063e:	d80c      	bhi.n	800065a <_Unwind_VRS_Set+0x26>
 8000640:	9900      	ldr	r1, [sp, #0]
 8000642:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000646:	6809      	ldr	r1, [r1, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	6051      	str	r1, [r2, #4]
 800064c:	4770      	bx	lr
 800064e:	3903      	subs	r1, #3
 8000650:	2901      	cmp	r1, #1
 8000652:	bf94      	ite	ls
 8000654:	2001      	movls	r0, #1
 8000656:	2002      	movhi	r0, #2
 8000658:	4770      	bx	lr
 800065a:	2002      	movs	r0, #2
 800065c:	4770      	bx	lr
 800065e:	4608      	mov	r0, r1
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop

08000664 <_Unwind_SetGR>:
 8000664:	2300      	movs	r3, #0
 8000666:	b510      	push	{r4, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	ac03      	add	r4, sp, #12
 800066c:	9203      	str	r2, [sp, #12]
 800066e:	9400      	str	r4, [sp, #0]
 8000670:	460a      	mov	r2, r1
 8000672:	4619      	mov	r1, r3
 8000674:	f7ff ffde 	bl	8000634 <_Unwind_VRS_Set>
 8000678:	b004      	add	sp, #16
 800067a:	bd10      	pop	{r4, pc}

0800067c <__gnu_Unwind_Backtrace>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000682:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000684:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000688:	6413      	str	r3, [r2, #64]	; 0x40
 800068a:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 800068e:	f102 0c04 	add.w	ip, r2, #4
 8000692:	4605      	mov	r5, r0
 8000694:	460c      	mov	r4, r1
 8000696:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800069a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800069e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006ae:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80006b2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80006b6:	9616      	str	r6, [sp, #88]	; 0x58
 80006b8:	e012      	b.n	80006e0 <__gnu_Unwind_Backtrace+0x64>
 80006ba:	210c      	movs	r1, #12
 80006bc:	a816      	add	r0, sp, #88	; 0x58
 80006be:	466a      	mov	r2, sp
 80006c0:	f7ff ffd0 	bl	8000664 <_Unwind_SetGR>
 80006c4:	4621      	mov	r1, r4
 80006c6:	a816      	add	r0, sp, #88	; 0x58
 80006c8:	47a8      	blx	r5
 80006ca:	b978      	cbnz	r0, 80006ec <__gnu_Unwind_Backtrace+0x70>
 80006cc:	4669      	mov	r1, sp
 80006ce:	2008      	movs	r0, #8
 80006d0:	9b04      	ldr	r3, [sp, #16]
 80006d2:	aa16      	add	r2, sp, #88	; 0x58
 80006d4:	4798      	blx	r3
 80006d6:	2805      	cmp	r0, #5
 80006d8:	4606      	mov	r6, r0
 80006da:	d008      	beq.n	80006ee <__gnu_Unwind_Backtrace+0x72>
 80006dc:	2809      	cmp	r0, #9
 80006de:	d005      	beq.n	80006ec <__gnu_Unwind_Backtrace+0x70>
 80006e0:	4668      	mov	r0, sp
 80006e2:	9926      	ldr	r1, [sp, #152]	; 0x98
 80006e4:	f7ff fdfa 	bl	80002dc <get_eit_entry>
 80006e8:	2800      	cmp	r0, #0
 80006ea:	d0e6      	beq.n	80006ba <__gnu_Unwind_Backtrace+0x3e>
 80006ec:	2609      	movs	r6, #9
 80006ee:	a816      	add	r0, sp, #88	; 0x58
 80006f0:	f7ff fe44 	bl	800037c <restore_non_core_regs>
 80006f4:	4630      	mov	r0, r6
 80006f6:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80006fa:	bd70      	pop	{r4, r5, r6, pc}

080006fc <__gnu_unwind_pr_common>:
 80006fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000700:	461e      	mov	r6, r3
 8000702:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000704:	b089      	sub	sp, #36	; 0x24
 8000706:	f854 3b04 	ldr.w	r3, [r4], #4
 800070a:	460d      	mov	r5, r1
 800070c:	4617      	mov	r7, r2
 800070e:	f000 0803 	and.w	r8, r0, #3
 8000712:	9406      	str	r4, [sp, #24]
 8000714:	2e00      	cmp	r6, #0
 8000716:	d079      	beq.n	800080c <__gnu_unwind_pr_common+0x110>
 8000718:	2202      	movs	r2, #2
 800071a:	f88d 201c 	strb.w	r2, [sp, #28]
 800071e:	0c1a      	lsrs	r2, r3, #16
 8000720:	f88d 201d 	strb.w	r2, [sp, #29]
 8000724:	041b      	lsls	r3, r3, #16
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	9305      	str	r3, [sp, #20]
 800072a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800072e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000730:	f1b8 0f02 	cmp.w	r8, #2
 8000734:	bf08      	it	eq
 8000736:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000738:	f013 0301 	ands.w	r3, r3, #1
 800073c:	d00c      	beq.n	8000758 <__gnu_unwind_pr_common+0x5c>
 800073e:	4638      	mov	r0, r7
 8000740:	a905      	add	r1, sp, #20
 8000742:	f000 fb71 	bl	8000e28 <__gnu_unwind_execute>
 8000746:	b918      	cbnz	r0, 8000750 <__gnu_unwind_pr_common+0x54>
 8000748:	2008      	movs	r0, #8
 800074a:	b009      	add	sp, #36	; 0x24
 800074c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000750:	2009      	movs	r0, #9
 8000752:	b009      	add	sp, #36	; 0x24
 8000754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000758:	f8d4 a000 	ldr.w	sl, [r4]
 800075c:	f1ba 0f00 	cmp.w	sl, #0
 8000760:	d0ed      	beq.n	800073e <__gnu_unwind_pr_common+0x42>
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	f000 0308 	and.w	r3, r0, #8
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	2e02      	cmp	r6, #2
 800076c:	d04a      	beq.n	8000804 <__gnu_unwind_pr_common+0x108>
 800076e:	f8b4 a000 	ldrh.w	sl, [r4]
 8000772:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000776:	3404      	adds	r4, #4
 8000778:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800077a:	210f      	movs	r1, #15
 800077c:	4638      	mov	r0, r7
 800077e:	f029 0b01 	bic.w	fp, r9, #1
 8000782:	4493      	add	fp, r2
 8000784:	f7ff ff48 	bl	8000618 <_Unwind_GetGR>
 8000788:	4583      	cmp	fp, r0
 800078a:	d839      	bhi.n	8000800 <__gnu_unwind_pr_common+0x104>
 800078c:	f02a 0201 	bic.w	r2, sl, #1
 8000790:	445a      	add	r2, fp
 8000792:	4282      	cmp	r2, r0
 8000794:	bf94      	ite	ls
 8000796:	2000      	movls	r0, #0
 8000798:	2001      	movhi	r0, #1
 800079a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	f00a 0a01 	and.w	sl, sl, #1
 80007a6:	ea43 030a 	orr.w	r3, r3, sl
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d049      	beq.n	8000842 <__gnu_unwind_pr_common+0x146>
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d032      	beq.n	8000818 <__gnu_unwind_pr_common+0x11c>
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1cc      	bne.n	8000750 <__gnu_unwind_pr_common+0x54>
 80007b6:	f1b8 0f00 	cmp.w	r8, #0
 80007ba:	d002      	beq.n	80007c2 <__gnu_unwind_pr_common+0xc6>
 80007bc:	2800      	cmp	r0, #0
 80007be:	f040 80ce 	bne.w	800095e <__gnu_unwind_pr_common+0x262>
 80007c2:	3404      	adds	r4, #4
 80007c4:	f8d4 a000 	ldr.w	sl, [r4]
 80007c8:	f1ba 0f00 	cmp.w	sl, #0
 80007cc:	d1cd      	bne.n	800076a <__gnu_unwind_pr_common+0x6e>
 80007ce:	4638      	mov	r0, r7
 80007d0:	a905      	add	r1, sp, #20
 80007d2:	f000 fb29 	bl	8000e28 <__gnu_unwind_execute>
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d1ba      	bne.n	8000750 <__gnu_unwind_pr_common+0x54>
 80007da:	9b01      	ldr	r3, [sp, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0b3      	beq.n	8000748 <__gnu_unwind_pr_common+0x4c>
 80007e0:	210f      	movs	r1, #15
 80007e2:	4638      	mov	r0, r7
 80007e4:	f7ff ff18 	bl	8000618 <_Unwind_GetGR>
 80007e8:	210e      	movs	r1, #14
 80007ea:	4602      	mov	r2, r0
 80007ec:	4638      	mov	r0, r7
 80007ee:	f7ff ff39 	bl	8000664 <_Unwind_SetGR>
 80007f2:	4638      	mov	r0, r7
 80007f4:	210f      	movs	r1, #15
 80007f6:	4a6a      	ldr	r2, [pc, #424]	; (80009a0 <__gnu_unwind_pr_common+0x2a4>)
 80007f8:	f7ff ff34 	bl	8000664 <_Unwind_SetGR>
 80007fc:	2007      	movs	r0, #7
 80007fe:	e7a8      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000800:	2000      	movs	r0, #0
 8000802:	e7ca      	b.n	800079a <__gnu_unwind_pr_common+0x9e>
 8000804:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000808:	3408      	adds	r4, #8
 800080a:	e7b5      	b.n	8000778 <__gnu_unwind_pr_common+0x7c>
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	9305      	str	r3, [sp, #20]
 8000810:	2303      	movs	r3, #3
 8000812:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000816:	e78a      	b.n	800072e <__gnu_unwind_pr_common+0x32>
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800081e:	f1b8 0f00 	cmp.w	r8, #0
 8000822:	d145      	bne.n	80008b0 <__gnu_unwind_pr_common+0x1b4>
 8000824:	b128      	cbz	r0, 8000832 <__gnu_unwind_pr_common+0x136>
 8000826:	9a02      	ldr	r2, [sp, #8]
 8000828:	2a00      	cmp	r2, #0
 800082a:	d05c      	beq.n	80008e6 <__gnu_unwind_pr_common+0x1ea>
 800082c:	f1bb 0f00 	cmp.w	fp, #0
 8000830:	d074      	beq.n	800091c <__gnu_unwind_pr_common+0x220>
 8000832:	2b00      	cmp	r3, #0
 8000834:	da00      	bge.n	8000838 <__gnu_unwind_pr_common+0x13c>
 8000836:	3404      	adds	r4, #4
 8000838:	f10b 0b01 	add.w	fp, fp, #1
 800083c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000840:	e7c0      	b.n	80007c4 <__gnu_unwind_pr_common+0xc8>
 8000842:	f1b8 0f00 	cmp.w	r8, #0
 8000846:	d119      	bne.n	800087c <__gnu_unwind_pr_common+0x180>
 8000848:	b1b0      	cbz	r0, 8000878 <__gnu_unwind_pr_common+0x17c>
 800084a:	6863      	ldr	r3, [r4, #4]
 800084c:	6822      	ldr	r2, [r4, #0]
 800084e:	1c99      	adds	r1, r3, #2
 8000850:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000854:	f43f af7c 	beq.w	8000750 <__gnu_unwind_pr_common+0x54>
 8000858:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800085c:	3301      	adds	r3, #1
 800085e:	9104      	str	r1, [sp, #16]
 8000860:	f000 8091 	beq.w	8000986 <__gnu_unwind_pr_common+0x28a>
 8000864:	1d20      	adds	r0, r4, #4
 8000866:	f7ff fdb7 	bl	80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800086a:	ab04      	add	r3, sp, #16
 800086c:	4601      	mov	r1, r0
 800086e:	4628      	mov	r0, r5
 8000870:	f3af 8000 	nop.w
 8000874:	2800      	cmp	r0, #0
 8000876:	d15c      	bne.n	8000932 <__gnu_unwind_pr_common+0x236>
 8000878:	3408      	adds	r4, #8
 800087a:	e7a3      	b.n	80007c4 <__gnu_unwind_pr_common+0xc8>
 800087c:	210d      	movs	r1, #13
 800087e:	4638      	mov	r0, r7
 8000880:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000884:	f7ff fec8 	bl	8000618 <_Unwind_GetGR>
 8000888:	4581      	cmp	r9, r0
 800088a:	d1f5      	bne.n	8000878 <__gnu_unwind_pr_common+0x17c>
 800088c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800088e:	429c      	cmp	r4, r3
 8000890:	d1f2      	bne.n	8000878 <__gnu_unwind_pr_common+0x17c>
 8000892:	4620      	mov	r0, r4
 8000894:	f7ff fcd4 	bl	8000240 <selfrel_offset31>
 8000898:	210f      	movs	r1, #15
 800089a:	4602      	mov	r2, r0
 800089c:	4638      	mov	r0, r7
 800089e:	f7ff fee1 	bl	8000664 <_Unwind_SetGR>
 80008a2:	4638      	mov	r0, r7
 80008a4:	462a      	mov	r2, r5
 80008a6:	2100      	movs	r1, #0
 80008a8:	f7ff fedc 	bl	8000664 <_Unwind_SetGR>
 80008ac:	2007      	movs	r0, #7
 80008ae:	e750      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 80008b0:	210d      	movs	r1, #13
 80008b2:	4638      	mov	r0, r7
 80008b4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80008b8:	f7ff feae 	bl	8000618 <_Unwind_GetGR>
 80008bc:	4581      	cmp	r9, r0
 80008be:	d001      	beq.n	80008c4 <__gnu_unwind_pr_common+0x1c8>
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	e7b6      	b.n	8000832 <__gnu_unwind_pr_common+0x136>
 80008c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008c6:	429c      	cmp	r4, r3
 80008c8:	d1fa      	bne.n	80008c0 <__gnu_unwind_pr_common+0x1c4>
 80008ca:	2304      	movs	r3, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80008d2:	18e3      	adds	r3, r4, r3
 80008d4:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80008d8:	636b      	str	r3, [r5, #52]	; 0x34
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db5a      	blt.n	8000996 <__gnu_unwind_pr_common+0x29a>
 80008e0:	2301      	movs	r3, #1
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	e7a8      	b.n	8000838 <__gnu_unwind_pr_common+0x13c>
 80008e6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80008ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80008ee:	4691      	mov	r9, r2
 80008f0:	46b0      	mov	r8, r6
 80008f2:	f104 0a04 	add.w	sl, r4, #4
 80008f6:	461e      	mov	r6, r3
 80008f8:	e00e      	b.n	8000918 <__gnu_unwind_pr_common+0x21c>
 80008fa:	4650      	mov	r0, sl
 80008fc:	9604      	str	r6, [sp, #16]
 80008fe:	f7ff fd6b 	bl	80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000902:	2200      	movs	r2, #0
 8000904:	4601      	mov	r1, r0
 8000906:	ab04      	add	r3, sp, #16
 8000908:	4628      	mov	r0, r5
 800090a:	f109 0901 	add.w	r9, r9, #1
 800090e:	f10a 0a04 	add.w	sl, sl, #4
 8000912:	f3af 8000 	nop.w
 8000916:	b9e8      	cbnz	r0, 8000954 <__gnu_unwind_pr_common+0x258>
 8000918:	45d9      	cmp	r9, fp
 800091a:	d1ee      	bne.n	80008fa <__gnu_unwind_pr_common+0x1fe>
 800091c:	210d      	movs	r1, #13
 800091e:	4638      	mov	r0, r7
 8000920:	f7ff fe7a 	bl	8000618 <_Unwind_GetGR>
 8000924:	4603      	mov	r3, r0
 8000926:	9a04      	ldr	r2, [sp, #16]
 8000928:	2006      	movs	r0, #6
 800092a:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 800092e:	622b      	str	r3, [r5, #32]
 8000930:	e70f      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000932:	4681      	mov	r9, r0
 8000934:	210d      	movs	r1, #13
 8000936:	4638      	mov	r0, r7
 8000938:	f7ff fe6e 	bl	8000618 <_Unwind_GetGR>
 800093c:	f1b9 0f02 	cmp.w	r9, #2
 8000940:	6228      	str	r0, [r5, #32]
 8000942:	d125      	bne.n	8000990 <__gnu_unwind_pr_common+0x294>
 8000944:	462b      	mov	r3, r5
 8000946:	9a04      	ldr	r2, [sp, #16]
 8000948:	f843 2f2c 	str.w	r2, [r3, #44]!
 800094c:	626b      	str	r3, [r5, #36]	; 0x24
 800094e:	2006      	movs	r0, #6
 8000950:	62ac      	str	r4, [r5, #40]	; 0x28
 8000952:	e6fe      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000954:	4646      	mov	r6, r8
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800095c:	e769      	b.n	8000832 <__gnu_unwind_pr_common+0x136>
 800095e:	4620      	mov	r0, r4
 8000960:	f7ff fc6e 	bl	8000240 <selfrel_offset31>
 8000964:	4602      	mov	r2, r0
 8000966:	3404      	adds	r4, #4
 8000968:	63ac      	str	r4, [r5, #56]	; 0x38
 800096a:	4628      	mov	r0, r5
 800096c:	4614      	mov	r4, r2
 800096e:	f3af 8000 	nop.w
 8000972:	2800      	cmp	r0, #0
 8000974:	f43f aeec 	beq.w	8000750 <__gnu_unwind_pr_common+0x54>
 8000978:	4638      	mov	r0, r7
 800097a:	4622      	mov	r2, r4
 800097c:	210f      	movs	r1, #15
 800097e:	f7ff fe71 	bl	8000664 <_Unwind_SetGR>
 8000982:	2007      	movs	r0, #7
 8000984:	e6e5      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000986:	210d      	movs	r1, #13
 8000988:	4638      	mov	r0, r7
 800098a:	f7ff fe45 	bl	8000618 <_Unwind_GetGR>
 800098e:	6228      	str	r0, [r5, #32]
 8000990:	9b04      	ldr	r3, [sp, #16]
 8000992:	626b      	str	r3, [r5, #36]	; 0x24
 8000994:	e7db      	b.n	800094e <__gnu_unwind_pr_common+0x252>
 8000996:	f10b 0001 	add.w	r0, fp, #1
 800099a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800099e:	e779      	b.n	8000894 <__gnu_unwind_pr_common+0x198>
 80009a0:	00000000 	.word	0x00000000

080009a4 <__aeabi_unwind_cpp_pr0>:
 80009a4:	2300      	movs	r3, #0
 80009a6:	e6a9      	b.n	80006fc <__gnu_unwind_pr_common>

080009a8 <__aeabi_unwind_cpp_pr1>:
 80009a8:	2301      	movs	r3, #1
 80009aa:	e6a7      	b.n	80006fc <__gnu_unwind_pr_common>

080009ac <__aeabi_unwind_cpp_pr2>:
 80009ac:	2302      	movs	r3, #2
 80009ae:	e6a5      	b.n	80006fc <__gnu_unwind_pr_common>

080009b0 <_Unwind_VRS_Pop>:
 80009b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009b4:	4606      	mov	r6, r0
 80009b6:	4615      	mov	r5, r2
 80009b8:	461c      	mov	r4, r3
 80009ba:	b0c3      	sub	sp, #268	; 0x10c
 80009bc:	2904      	cmp	r1, #4
 80009be:	f200 80b8 	bhi.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009c2:	e8df f001 	tbb	[pc, r1]
 80009c6:	569c      	.short	0x569c
 80009c8:	2db6      	.short	0x2db6
 80009ca:	03          	.byte	0x03
 80009cb:	00          	.byte	0x00
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	f040 80b0 	bne.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009d2:	2a10      	cmp	r2, #16
 80009d4:	f200 80ad 	bhi.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009d8:	6803      	ldr	r3, [r0, #0]
 80009da:	06d8      	lsls	r0, r3, #27
 80009dc:	f100 80f1 	bmi.w	8000bc2 <_Unwind_VRS_Pop+0x212>
 80009e0:	af20      	add	r7, sp, #128	; 0x80
 80009e2:	4638      	mov	r0, r7
 80009e4:	f000 f990 	bl	8000d08 <__gnu_Unwind_Save_WMMXC>
 80009e8:	2401      	movs	r4, #1
 80009ea:	4638      	mov	r0, r7
 80009ec:	2300      	movs	r3, #0
 80009ee:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80009f0:	fa04 f203 	lsl.w	r2, r4, r3
 80009f4:	422a      	tst	r2, r5
 80009f6:	f103 0301 	add.w	r3, r3, #1
 80009fa:	d005      	beq.n	8000a08 <_Unwind_VRS_Pop+0x58>
 80009fc:	460a      	mov	r2, r1
 80009fe:	f852 cb04 	ldr.w	ip, [r2], #4
 8000a02:	4611      	mov	r1, r2
 8000a04:	f8c0 c000 	str.w	ip, [r0]
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	f100 0004 	add.w	r0, r0, #4
 8000a0e:	d1ef      	bne.n	80009f0 <_Unwind_VRS_Pop+0x40>
 8000a10:	4638      	mov	r0, r7
 8000a12:	63b1      	str	r1, [r6, #56]	; 0x38
 8000a14:	f000 f96e 	bl	8000cf4 <__gnu_Unwind_Restore_WMMXC>
 8000a18:	2000      	movs	r0, #0
 8000a1a:	b043      	add	sp, #268	; 0x10c
 8000a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a20:	2c03      	cmp	r4, #3
 8000a22:	f040 8086 	bne.w	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a26:	b294      	uxth	r4, r2
 8000a28:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000a2c:	2b10      	cmp	r3, #16
 8000a2e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000a32:	d87e      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a34:	6803      	ldr	r3, [r0, #0]
 8000a36:	071f      	lsls	r7, r3, #28
 8000a38:	f100 80cb 	bmi.w	8000bd2 <_Unwind_VRS_Pop+0x222>
 8000a3c:	af20      	add	r7, sp, #128	; 0x80
 8000a3e:	4638      	mov	r0, r7
 8000a40:	f000 f936 	bl	8000cb0 <__gnu_Unwind_Save_WMMXD>
 8000a44:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000a46:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000a4a:	b154      	cbz	r4, 8000a62 <_Unwind_VRS_Pop+0xb2>
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000a52:	1ad0      	subs	r0, r2, r3
 8000a54:	00e4      	lsls	r4, r4, #3
 8000a56:	581d      	ldr	r5, [r3, r0]
 8000a58:	f843 5b04 	str.w	r5, [r3], #4
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d1fa      	bne.n	8000a56 <_Unwind_VRS_Pop+0xa6>
 8000a60:	4422      	add	r2, r4
 8000a62:	4638      	mov	r0, r7
 8000a64:	63b2      	str	r2, [r6, #56]	; 0x38
 8000a66:	f000 f901 	bl	8000c6c <__gnu_Unwind_Restore_WMMXD>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	b043      	add	sp, #268	; 0x10c
 8000a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a72:	2c01      	cmp	r4, #1
 8000a74:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000a78:	b295      	uxth	r5, r2
 8000a7a:	d056      	beq.n	8000b2a <_Unwind_VRS_Pop+0x17a>
 8000a7c:	2c05      	cmp	r4, #5
 8000a7e:	d158      	bne.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a80:	eb08 0905 	add.w	r9, r8, r5
 8000a84:	f1b9 0f20 	cmp.w	r9, #32
 8000a88:	d853      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a8a:	f1b8 0f0f 	cmp.w	r8, #15
 8000a8e:	d973      	bls.n	8000b78 <_Unwind_VRS_Pop+0x1c8>
 8000a90:	46a9      	mov	r9, r5
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f040 8084 	bne.w	8000ba0 <_Unwind_VRS_Pop+0x1f0>
 8000a98:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a9a:	b365      	cbz	r5, 8000af6 <_Unwind_VRS_Pop+0x146>
 8000a9c:	af20      	add	r7, sp, #128	; 0x80
 8000a9e:	f04f 0900 	mov.w	r9, #0
 8000aa2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000aa6:	3f04      	subs	r7, #4
 8000aa8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000aac:	f853 1b04 	ldr.w	r1, [r3], #4
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	f847 1f04 	str.w	r1, [r7, #4]!
 8000ab6:	d1f9      	bne.n	8000aac <_Unwind_VRS_Pop+0xfc>
 8000ab8:	f1b9 0f00 	cmp.w	r9, #0
 8000abc:	d00f      	beq.n	8000ade <_Unwind_VRS_Pop+0x12e>
 8000abe:	466f      	mov	r7, sp
 8000ac0:	4641      	mov	r1, r8
 8000ac2:	2910      	cmp	r1, #16
 8000ac4:	bf38      	it	cc
 8000ac6:	2110      	movcc	r1, #16
 8000ac8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000acc:	3984      	subs	r1, #132	; 0x84
 8000ace:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000ad2:	f853 0b04 	ldr.w	r0, [r3], #4
 8000ad6:	42ab      	cmp	r3, r5
 8000ad8:	f841 0f04 	str.w	r0, [r1, #4]!
 8000adc:	d1f9      	bne.n	8000ad2 <_Unwind_VRS_Pop+0x122>
 8000ade:	2c01      	cmp	r4, #1
 8000ae0:	d07f      	beq.n	8000be2 <_Unwind_VRS_Pop+0x232>
 8000ae2:	f1b8 0f0f 	cmp.w	r8, #15
 8000ae6:	63b5      	str	r5, [r6, #56]	; 0x38
 8000ae8:	d942      	bls.n	8000b70 <_Unwind_VRS_Pop+0x1c0>
 8000aea:	f1b9 0f00 	cmp.w	r9, #0
 8000aee:	d002      	beq.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000af0:	4668      	mov	r0, sp
 8000af2:	f000 f8b3 	bl	8000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000af6:	2000      	movs	r0, #0
 8000af8:	b043      	add	sp, #268	; 0x10c
 8000afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000afe:	b9c4      	cbnz	r4, 8000b32 <_Unwind_VRS_Pop+0x182>
 8000b00:	4623      	mov	r3, r4
 8000b02:	2401      	movs	r4, #1
 8000b04:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000b06:	1d37      	adds	r7, r6, #4
 8000b08:	b2a8      	uxth	r0, r5
 8000b0a:	fa04 f103 	lsl.w	r1, r4, r3
 8000b0e:	4201      	tst	r1, r0
 8000b10:	bf1c      	itt	ne
 8000b12:	f852 1b04 	ldrne.w	r1, [r2], #4
 8000b16:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	2b10      	cmp	r3, #16
 8000b1e:	d1f4      	bne.n	8000b0a <_Unwind_VRS_Pop+0x15a>
 8000b20:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000b24:	d1e7      	bne.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000b26:	63b2      	str	r2, [r6, #56]	; 0x38
 8000b28:	e004      	b.n	8000b34 <_Unwind_VRS_Pop+0x184>
 8000b2a:	eb08 0305 	add.w	r3, r8, r5
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d903      	bls.n	8000b3a <_Unwind_VRS_Pop+0x18a>
 8000b32:	2002      	movs	r0, #2
 8000b34:	b043      	add	sp, #268	; 0x10c
 8000b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b3a:	f1b8 0f0f 	cmp.w	r8, #15
 8000b3e:	d8f8      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000b40:	6833      	ldr	r3, [r6, #0]
 8000b42:	07da      	lsls	r2, r3, #31
 8000b44:	d506      	bpl.n	8000b54 <_Unwind_VRS_Pop+0x1a4>
 8000b46:	4630      	mov	r0, r6
 8000b48:	f023 0303 	bic.w	r3, r3, #3
 8000b4c:	f840 3b48 	str.w	r3, [r0], #72
 8000b50:	f000 f878 	bl	8000c44 <__gnu_Unwind_Save_VFP>
 8000b54:	af20      	add	r7, sp, #128	; 0x80
 8000b56:	4638      	mov	r0, r7
 8000b58:	f000 f874 	bl	8000c44 <__gnu_Unwind_Save_VFP>
 8000b5c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d19d      	bne.n	8000a9e <_Unwind_VRS_Pop+0xee>
 8000b62:	461d      	mov	r5, r3
 8000b64:	3504      	adds	r5, #4
 8000b66:	4638      	mov	r0, r7
 8000b68:	63b5      	str	r5, [r6, #56]	; 0x38
 8000b6a:	f000 f867 	bl	8000c3c <__gnu_Unwind_Restore_VFP>
 8000b6e:	e7c2      	b.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000b70:	a820      	add	r0, sp, #128	; 0x80
 8000b72:	f000 f86b 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000b76:	e7b8      	b.n	8000aea <_Unwind_VRS_Pop+0x13a>
 8000b78:	f1b9 0f10 	cmp.w	r9, #16
 8000b7c:	d93f      	bls.n	8000bfe <_Unwind_VRS_Pop+0x24e>
 8000b7e:	f1a9 0910 	sub.w	r9, r9, #16
 8000b82:	6833      	ldr	r3, [r6, #0]
 8000b84:	07d9      	lsls	r1, r3, #31
 8000b86:	d508      	bpl.n	8000b9a <_Unwind_VRS_Pop+0x1ea>
 8000b88:	4630      	mov	r0, r6
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f840 3b48 	str.w	r3, [r0], #72
 8000b96:	f000 f85d 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000b9a:	f1b9 0f00 	cmp.w	r9, #0
 8000b9e:	d031      	beq.n	8000c04 <_Unwind_VRS_Pop+0x254>
 8000ba0:	6833      	ldr	r3, [r6, #0]
 8000ba2:	075a      	lsls	r2, r3, #29
 8000ba4:	d41f      	bmi.n	8000be6 <_Unwind_VRS_Pop+0x236>
 8000ba6:	f1b8 0f0f 	cmp.w	r8, #15
 8000baa:	d924      	bls.n	8000bf6 <_Unwind_VRS_Pop+0x246>
 8000bac:	466f      	mov	r7, sp
 8000bae:	f1c8 0510 	rsb	r5, r8, #16
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	f000 f856 	bl	8000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000bbc:	dd80      	ble.n	8000ac0 <_Unwind_VRS_Pop+0x110>
 8000bbe:	af20      	add	r7, sp, #128	; 0x80
 8000bc0:	e76f      	b.n	8000aa2 <_Unwind_VRS_Pop+0xf2>
 8000bc2:	f023 0310 	bic.w	r3, r3, #16
 8000bc6:	6033      	str	r3, [r6, #0]
 8000bc8:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000bcc:	f000 f89c 	bl	8000d08 <__gnu_Unwind_Save_WMMXC>
 8000bd0:	e706      	b.n	80009e0 <_Unwind_VRS_Pop+0x30>
 8000bd2:	f023 0308 	bic.w	r3, r3, #8
 8000bd6:	6003      	str	r3, [r0, #0]
 8000bd8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000bdc:	f000 f868 	bl	8000cb0 <__gnu_Unwind_Save_WMMXD>
 8000be0:	e72c      	b.n	8000a3c <_Unwind_VRS_Pop+0x8c>
 8000be2:	af20      	add	r7, sp, #128	; 0x80
 8000be4:	e7be      	b.n	8000b64 <_Unwind_VRS_Pop+0x1b4>
 8000be6:	4630      	mov	r0, r6
 8000be8:	f023 0304 	bic.w	r3, r3, #4
 8000bec:	f840 3bd0 	str.w	r3, [r0], #208
 8000bf0:	f000 f838 	bl	8000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bf4:	e7d7      	b.n	8000ba6 <_Unwind_VRS_Pop+0x1f6>
 8000bf6:	a820      	add	r0, sp, #128	; 0x80
 8000bf8:	f000 f82c 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000bfc:	e7d6      	b.n	8000bac <_Unwind_VRS_Pop+0x1fc>
 8000bfe:	f04f 0900 	mov.w	r9, #0
 8000c02:	e7be      	b.n	8000b82 <_Unwind_VRS_Pop+0x1d2>
 8000c04:	f1b8 0f0f 	cmp.w	r8, #15
 8000c08:	f63f af46 	bhi.w	8000a98 <_Unwind_VRS_Pop+0xe8>
 8000c0c:	af20      	add	r7, sp, #128	; 0x80
 8000c0e:	4638      	mov	r0, r7
 8000c10:	f000 f820 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000c14:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	f47f af41 	bne.w	8000a9e <_Unwind_VRS_Pop+0xee>
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	f000 f815 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000c22:	e768      	b.n	8000af6 <_Unwind_VRS_Pop+0x146>

08000c24 <__restore_core_regs>:
 8000c24:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000c28:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000c2c:	469c      	mov	ip, r3
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000c34:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000c38:	46e5      	mov	sp, ip
 8000c3a:	bd00      	pop	{pc}

08000c3c <__gnu_Unwind_Restore_VFP>:
 8000c3c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <__gnu_Unwind_Save_VFP>:
 8000c44:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__gnu_Unwind_Restore_VFP_D>:
 8000c4c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__gnu_Unwind_Save_VFP_D>:
 8000c54:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000c5c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000c64:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__gnu_Unwind_Restore_WMMXD>:
 8000c6c:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c70:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c74:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c78:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c7c:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c80:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c84:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c88:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c8c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c90:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c94:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c98:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c9c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000ca0:	ecf0 d102 	ldfp	f5, [r0], #8
 8000ca4:	ecf0 e102 	ldfp	f6, [r0], #8
 8000ca8:	ecf0 f102 	ldfp	f7, [r0], #8
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__gnu_Unwind_Save_WMMXD>:
 8000cb0:	ece0 0102 	stfe	f0, [r0], #8
 8000cb4:	ece0 1102 	stfe	f1, [r0], #8
 8000cb8:	ece0 2102 	stfe	f2, [r0], #8
 8000cbc:	ece0 3102 	stfe	f3, [r0], #8
 8000cc0:	ece0 4102 	stfe	f4, [r0], #8
 8000cc4:	ece0 5102 	stfe	f5, [r0], #8
 8000cc8:	ece0 6102 	stfe	f6, [r0], #8
 8000ccc:	ece0 7102 	stfe	f7, [r0], #8
 8000cd0:	ece0 8102 	stfp	f0, [r0], #8
 8000cd4:	ece0 9102 	stfp	f1, [r0], #8
 8000cd8:	ece0 a102 	stfp	f2, [r0], #8
 8000cdc:	ece0 b102 	stfp	f3, [r0], #8
 8000ce0:	ece0 c102 	stfp	f4, [r0], #8
 8000ce4:	ece0 d102 	stfp	f5, [r0], #8
 8000ce8:	ece0 e102 	stfp	f6, [r0], #8
 8000cec:	ece0 f102 	stfp	f7, [r0], #8
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <__gnu_Unwind_Restore_WMMXC>:
 8000cf4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000cf8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000cfc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000d00:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__gnu_Unwind_Save_WMMXC>:
 8000d08:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000d0c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000d10:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000d14:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <_Unwind_RaiseException>:
 8000d1c:	46ec      	mov	ip, sp
 8000d1e:	b500      	push	{lr}
 8000d20:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d24:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d30:	a901      	add	r1, sp, #4
 8000d32:	f7ff fbe7 	bl	8000504 <__gnu_Unwind_RaiseException>
 8000d36:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d3a:	b012      	add	sp, #72	; 0x48
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <_Unwind_Resume>:
 8000d40:	46ec      	mov	ip, sp
 8000d42:	b500      	push	{lr}
 8000d44:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d48:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d54:	a901      	add	r1, sp, #4
 8000d56:	f7ff fc13 	bl	8000580 <__gnu_Unwind_Resume>
 8000d5a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d5e:	b012      	add	sp, #72	; 0x48
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <_Unwind_Resume_or_Rethrow>:
 8000d64:	46ec      	mov	ip, sp
 8000d66:	b500      	push	{lr}
 8000d68:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d6c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d78:	a901      	add	r1, sp, #4
 8000d7a:	f7ff fc23 	bl	80005c4 <__gnu_Unwind_Resume_or_Rethrow>
 8000d7e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d82:	b012      	add	sp, #72	; 0x48
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <_Unwind_ForcedUnwind>:
 8000d88:	46ec      	mov	ip, sp
 8000d8a:	b500      	push	{lr}
 8000d8c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d90:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d9c:	ab01      	add	r3, sp, #4
 8000d9e:	f7ff fbe5 	bl	800056c <__gnu_Unwind_ForcedUnwind>
 8000da2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000da6:	b012      	add	sp, #72	; 0x48
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <_Unwind_Backtrace>:
 8000dac:	46ec      	mov	ip, sp
 8000dae:	b500      	push	{lr}
 8000db0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000db4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000dc0:	aa01      	add	r2, sp, #4
 8000dc2:	f7ff fc5b 	bl	800067c <__gnu_Unwind_Backtrace>
 8000dc6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000dca:	b012      	add	sp, #72	; 0x48
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <next_unwind_byte>:
 8000dd0:	7a02      	ldrb	r2, [r0, #8]
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b97a      	cbnz	r2, 8000df6 <next_unwind_byte+0x26>
 8000dd6:	7a42      	ldrb	r2, [r0, #9]
 8000dd8:	b1a2      	cbz	r2, 8000e04 <next_unwind_byte+0x34>
 8000dda:	f04f 0c03 	mov.w	ip, #3
 8000dde:	6841      	ldr	r1, [r0, #4]
 8000de0:	3a01      	subs	r2, #1
 8000de2:	7242      	strb	r2, [r0, #9]
 8000de4:	6808      	ldr	r0, [r1, #0]
 8000de6:	1d0a      	adds	r2, r1, #4
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	0202      	lsls	r2, r0, #8
 8000dec:	f883 c008 	strb.w	ip, [r3, #8]
 8000df0:	0e00      	lsrs	r0, r0, #24
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	4770      	bx	lr
 8000df6:	6800      	ldr	r0, [r0, #0]
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	721a      	strb	r2, [r3, #8]
 8000dfc:	0202      	lsls	r2, r0, #8
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	0e00      	lsrs	r0, r0, #24
 8000e02:	4770      	bx	lr
 8000e04:	20b0      	movs	r0, #176	; 0xb0
 8000e06:	4770      	bx	lr

08000e08 <_Unwind_GetGR.constprop.0>:
 8000e08:	2300      	movs	r3, #0
 8000e0a:	b500      	push	{lr}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	a903      	add	r1, sp, #12
 8000e10:	9100      	str	r1, [sp, #0]
 8000e12:	220c      	movs	r2, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	f7ff fbe7 	bl	80005e8 <_Unwind_VRS_Get>
 8000e1a:	9803      	ldr	r0, [sp, #12]
 8000e1c:	b005      	add	sp, #20
 8000e1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e22:	bf00      	nop

08000e24 <unwind_UCB_from_context>:
 8000e24:	e7f0      	b.n	8000e08 <_Unwind_GetGR.constprop.0>
 8000e26:	bf00      	nop

08000e28 <__gnu_unwind_execute>:
 8000e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e2c:	f04f 0800 	mov.w	r8, #0
 8000e30:	4605      	mov	r5, r0
 8000e32:	460e      	mov	r6, r1
 8000e34:	b085      	sub	sp, #20
 8000e36:	4630      	mov	r0, r6
 8000e38:	f7ff ffca 	bl	8000dd0 <next_unwind_byte>
 8000e3c:	28b0      	cmp	r0, #176	; 0xb0
 8000e3e:	4604      	mov	r4, r0
 8000e40:	f000 80ba 	beq.w	8000fb8 <__gnu_unwind_execute+0x190>
 8000e44:	0607      	lsls	r7, r0, #24
 8000e46:	d520      	bpl.n	8000e8a <__gnu_unwind_execute+0x62>
 8000e48:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000e4c:	2b80      	cmp	r3, #128	; 0x80
 8000e4e:	d04d      	beq.n	8000eec <__gnu_unwind_execute+0xc4>
 8000e50:	2b90      	cmp	r3, #144	; 0x90
 8000e52:	d036      	beq.n	8000ec2 <__gnu_unwind_execute+0x9a>
 8000e54:	2ba0      	cmp	r3, #160	; 0xa0
 8000e56:	d060      	beq.n	8000f1a <__gnu_unwind_execute+0xf2>
 8000e58:	2bb0      	cmp	r3, #176	; 0xb0
 8000e5a:	d073      	beq.n	8000f44 <__gnu_unwind_execute+0x11c>
 8000e5c:	2bc0      	cmp	r3, #192	; 0xc0
 8000e5e:	f000 808a 	beq.w	8000f76 <__gnu_unwind_execute+0x14e>
 8000e62:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e66:	2bd0      	cmp	r3, #208	; 0xd0
 8000e68:	d10b      	bne.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000e6a:	f000 0207 	and.w	r2, r0, #7
 8000e6e:	3201      	adds	r2, #1
 8000e70:	2305      	movs	r3, #5
 8000e72:	2101      	movs	r1, #1
 8000e74:	4628      	mov	r0, r5
 8000e76:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e7a:	f7ff fd99 	bl	80009b0 <_Unwind_VRS_Pop>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d0d9      	beq.n	8000e36 <__gnu_unwind_execute+0xe>
 8000e82:	2009      	movs	r0, #9
 8000e84:	b005      	add	sp, #20
 8000e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e8a:	0083      	lsls	r3, r0, #2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	1d1f      	adds	r7, r3, #4
 8000e90:	2300      	movs	r3, #0
 8000e92:	f10d 090c 	add.w	r9, sp, #12
 8000e96:	4619      	mov	r1, r3
 8000e98:	220d      	movs	r2, #13
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f8cd 9000 	str.w	r9, [sp]
 8000ea0:	f7ff fba2 	bl	80005e8 <_Unwind_VRS_Get>
 8000ea4:	9b03      	ldr	r3, [sp, #12]
 8000ea6:	0660      	lsls	r0, r4, #25
 8000ea8:	bf4c      	ite	mi
 8000eaa:	1bdf      	submi	r7, r3, r7
 8000eac:	18ff      	addpl	r7, r7, r3
 8000eae:	2300      	movs	r3, #0
 8000eb0:	220d      	movs	r2, #13
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f8cd 9000 	str.w	r9, [sp]
 8000eba:	9703      	str	r7, [sp, #12]
 8000ebc:	f7ff fbba 	bl	8000634 <_Unwind_VRS_Set>
 8000ec0:	e7b9      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000ec2:	f000 030d 	and.w	r3, r0, #13
 8000ec6:	2b0d      	cmp	r3, #13
 8000ec8:	d0db      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	af03      	add	r7, sp, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f000 020f 	and.w	r2, r0, #15
 8000ed4:	9700      	str	r7, [sp, #0]
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	f7ff fb86 	bl	80005e8 <_Unwind_VRS_Get>
 8000edc:	2300      	movs	r3, #0
 8000ede:	220d      	movs	r2, #13
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	9700      	str	r7, [sp, #0]
 8000ee6:	f7ff fba5 	bl	8000634 <_Unwind_VRS_Set>
 8000eea:	e7a4      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000eec:	4630      	mov	r0, r6
 8000eee:	f7ff ff6f 	bl	8000dd0 <next_unwind_byte>
 8000ef2:	0224      	lsls	r4, r4, #8
 8000ef4:	4320      	orrs	r0, r4
 8000ef6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000efa:	d0c2      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000efc:	2300      	movs	r3, #0
 8000efe:	0104      	lsls	r4, r0, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4628      	mov	r0, r5
 8000f04:	b2a2      	uxth	r2, r4
 8000f06:	f7ff fd53 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d1b9      	bne.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f0e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000f12:	bf18      	it	ne
 8000f14:	f04f 0801 	movne.w	r8, #1
 8000f18:	e78d      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000f1a:	43c3      	mvns	r3, r0
 8000f1c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	411a      	asrs	r2, r3
 8000f26:	2300      	movs	r3, #0
 8000f28:	0701      	lsls	r1, r0, #28
 8000f2a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000f2e:	bf48      	it	mi
 8000f30:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000f34:	4628      	mov	r0, r5
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fd3a 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	f43f af7a 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000f42:	e79e      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f44:	28b1      	cmp	r0, #177	; 0xb1
 8000f46:	d03c      	beq.n	8000fc2 <__gnu_unwind_execute+0x19a>
 8000f48:	28b2      	cmp	r0, #178	; 0xb2
 8000f4a:	f000 80b0 	beq.w	80010ae <__gnu_unwind_execute+0x286>
 8000f4e:	28b3      	cmp	r0, #179	; 0xb3
 8000f50:	d04a      	beq.n	8000fe8 <__gnu_unwind_execute+0x1c0>
 8000f52:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000f56:	2bb4      	cmp	r3, #180	; 0xb4
 8000f58:	d093      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f000 0207 	and.w	r2, r0, #7
 8000f60:	441a      	add	r2, r3
 8000f62:	4628      	mov	r0, r5
 8000f64:	4619      	mov	r1, r3
 8000f66:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f6a:	f7ff fd21 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	f43f af61 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000f74:	e785      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f76:	28c6      	cmp	r0, #198	; 0xc6
 8000f78:	d04f      	beq.n	800101a <__gnu_unwind_execute+0x1f2>
 8000f7a:	28c7      	cmp	r0, #199	; 0xc7
 8000f7c:	d061      	beq.n	8001042 <__gnu_unwind_execute+0x21a>
 8000f7e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f82:	2bc0      	cmp	r3, #192	; 0xc0
 8000f84:	d070      	beq.n	8001068 <__gnu_unwind_execute+0x240>
 8000f86:	28c8      	cmp	r0, #200	; 0xc8
 8000f88:	d07c      	beq.n	8001084 <__gnu_unwind_execute+0x25c>
 8000f8a:	28c9      	cmp	r0, #201	; 0xc9
 8000f8c:	f47f af79 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000f90:	4630      	mov	r0, r6
 8000f92:	f7ff ff1d 	bl	8000dd0 <next_unwind_byte>
 8000f96:	2305      	movs	r3, #5
 8000f98:	4602      	mov	r2, r0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	0314      	lsls	r4, r2, #12
 8000fa0:	f002 020f 	and.w	r2, r2, #15
 8000fa4:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000fa8:	440a      	add	r2, r1
 8000faa:	4322      	orrs	r2, r4
 8000fac:	f7ff fd00 	bl	80009b0 <_Unwind_VRS_Pop>
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	f43f af40 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000fb6:	e764      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000fb8:	f1b8 0f00 	cmp.w	r8, #0
 8000fbc:	d01c      	beq.n	8000ff8 <__gnu_unwind_execute+0x1d0>
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	e760      	b.n	8000e84 <__gnu_unwind_execute+0x5c>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	f7ff ff04 	bl	8000dd0 <next_unwind_byte>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	f43f af59 	beq.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000fd0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fd4:	f47f af55 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f7ff fce8 	bl	80009b0 <_Unwind_VRS_Pop>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	f43f af28 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000fe6:	e74c      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f7ff fef1 	bl	8000dd0 <next_unwind_byte>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	e7d2      	b.n	8000f9e <__gnu_unwind_execute+0x176>
 8000ff8:	ac03      	add	r4, sp, #12
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	220e      	movs	r2, #14
 8000ffe:	4641      	mov	r1, r8
 8001000:	4628      	mov	r0, r5
 8001002:	9400      	str	r4, [sp, #0]
 8001004:	f7ff faf0 	bl	80005e8 <_Unwind_VRS_Get>
 8001008:	4643      	mov	r3, r8
 800100a:	220f      	movs	r2, #15
 800100c:	4628      	mov	r0, r5
 800100e:	4641      	mov	r1, r8
 8001010:	9400      	str	r4, [sp, #0]
 8001012:	f7ff fb0f 	bl	8000634 <_Unwind_VRS_Set>
 8001016:	4640      	mov	r0, r8
 8001018:	e734      	b.n	8000e84 <__gnu_unwind_execute+0x5c>
 800101a:	4630      	mov	r0, r6
 800101c:	f7ff fed8 	bl	8000dd0 <next_unwind_byte>
 8001020:	4602      	mov	r2, r0
 8001022:	2303      	movs	r3, #3
 8001024:	0314      	lsls	r4, r2, #12
 8001026:	f002 020f 	and.w	r2, r2, #15
 800102a:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 800102e:	3201      	adds	r2, #1
 8001030:	4628      	mov	r0, r5
 8001032:	4619      	mov	r1, r3
 8001034:	4322      	orrs	r2, r4
 8001036:	f7ff fcbb 	bl	80009b0 <_Unwind_VRS_Pop>
 800103a:	2800      	cmp	r0, #0
 800103c:	f43f aefb 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001040:	e71f      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001042:	4630      	mov	r0, r6
 8001044:	f7ff fec4 	bl	8000dd0 <next_unwind_byte>
 8001048:	4602      	mov	r2, r0
 800104a:	2800      	cmp	r0, #0
 800104c:	f43f af19 	beq.w	8000e82 <__gnu_unwind_execute+0x5a>
 8001050:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001054:	f47f af15 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8001058:	2104      	movs	r1, #4
 800105a:	4628      	mov	r0, r5
 800105c:	f7ff fca8 	bl	80009b0 <_Unwind_VRS_Pop>
 8001060:	2800      	cmp	r0, #0
 8001062:	f43f aee8 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001066:	e70c      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001068:	2303      	movs	r3, #3
 800106a:	f000 020f 	and.w	r2, r0, #15
 800106e:	3201      	adds	r2, #1
 8001070:	4628      	mov	r0, r5
 8001072:	4619      	mov	r1, r3
 8001074:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001078:	f7ff fc9a 	bl	80009b0 <_Unwind_VRS_Pop>
 800107c:	2800      	cmp	r0, #0
 800107e:	f43f aeda 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001082:	e6fe      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001084:	4630      	mov	r0, r6
 8001086:	f7ff fea3 	bl	8000dd0 <next_unwind_byte>
 800108a:	4602      	mov	r2, r0
 800108c:	2101      	movs	r1, #1
 800108e:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8001092:	f002 020f 	and.w	r2, r2, #15
 8001096:	3410      	adds	r4, #16
 8001098:	440a      	add	r2, r1
 800109a:	2305      	movs	r3, #5
 800109c:	4628      	mov	r0, r5
 800109e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80010a2:	f7ff fc85 	bl	80009b0 <_Unwind_VRS_Pop>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	f43f aec5 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 80010ac:	e6e9      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 80010ae:	2300      	movs	r3, #0
 80010b0:	f10d 090c 	add.w	r9, sp, #12
 80010b4:	220d      	movs	r2, #13
 80010b6:	4619      	mov	r1, r3
 80010b8:	4628      	mov	r0, r5
 80010ba:	f8cd 9000 	str.w	r9, [sp]
 80010be:	f7ff fa93 	bl	80005e8 <_Unwind_VRS_Get>
 80010c2:	4630      	mov	r0, r6
 80010c4:	f7ff fe84 	bl	8000dd0 <next_unwind_byte>
 80010c8:	0602      	lsls	r2, r0, #24
 80010ca:	f04f 0402 	mov.w	r4, #2
 80010ce:	d50c      	bpl.n	80010ea <__gnu_unwind_execute+0x2c2>
 80010d0:	9b03      	ldr	r3, [sp, #12]
 80010d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80010d6:	40a0      	lsls	r0, r4
 80010d8:	4418      	add	r0, r3
 80010da:	9003      	str	r0, [sp, #12]
 80010dc:	4630      	mov	r0, r6
 80010de:	f7ff fe77 	bl	8000dd0 <next_unwind_byte>
 80010e2:	0603      	lsls	r3, r0, #24
 80010e4:	f104 0407 	add.w	r4, r4, #7
 80010e8:	d4f2      	bmi.n	80010d0 <__gnu_unwind_execute+0x2a8>
 80010ea:	9b03      	ldr	r3, [sp, #12]
 80010ec:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80010f0:	40a2      	lsls	r2, r4
 80010f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010f6:	441a      	add	r2, r3
 80010f8:	2300      	movs	r3, #0
 80010fa:	9203      	str	r2, [sp, #12]
 80010fc:	4628      	mov	r0, r5
 80010fe:	220d      	movs	r2, #13
 8001100:	4619      	mov	r1, r3
 8001102:	f8cd 9000 	str.w	r9, [sp]
 8001106:	f7ff fa95 	bl	8000634 <_Unwind_VRS_Set>
 800110a:	e694      	b.n	8000e36 <__gnu_unwind_execute+0xe>

0800110c <__gnu_unwind_frame>:
 800110c:	460b      	mov	r3, r1
 800110e:	f04f 0c03 	mov.w	ip, #3
 8001112:	b500      	push	{lr}
 8001114:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001116:	4618      	mov	r0, r3
 8001118:	6853      	ldr	r3, [r2, #4]
 800111a:	b085      	sub	sp, #20
 800111c:	3208      	adds	r2, #8
 800111e:	9202      	str	r2, [sp, #8]
 8001120:	a901      	add	r1, sp, #4
 8001122:	0e1a      	lsrs	r2, r3, #24
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	f88d c00c 	strb.w	ip, [sp, #12]
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	f88d 200d 	strb.w	r2, [sp, #13]
 8001130:	f7ff fe7a 	bl	8000e28 <__gnu_unwind_execute>
 8001134:	b005      	add	sp, #20
 8001136:	f85d fb04 	ldr.w	pc, [sp], #4
 800113a:	bf00      	nop

0800113c <_Unwind_GetRegionStart>:
 800113c:	b508      	push	{r3, lr}
 800113e:	f7ff fe71 	bl	8000e24 <unwind_UCB_from_context>
 8001142:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001144:	bd08      	pop	{r3, pc}
 8001146:	bf00      	nop

08001148 <_Unwind_GetLanguageSpecificData>:
 8001148:	b508      	push	{r3, lr}
 800114a:	f7ff fe6b 	bl	8000e24 <unwind_UCB_from_context>
 800114e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001150:	79c3      	ldrb	r3, [r0, #7]
 8001152:	3302      	adds	r3, #2
 8001154:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001158:	bd08      	pop	{r3, pc}
 800115a:	bf00      	nop

0800115c <_ZN3I2CC1Ev>:
	I2C_HandleTypeDef mI2C;
private:
	uint8_t mBuffer[16] = {0};

public:
	I2C() {}
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <_ZN3I2CC1Ev+0x28>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3358      	adds	r3, #88	; 0x58
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	0800b654 	.word	0x0800b654

08001188 <_ZN3I2C10setBusDataE17I2C_HandleTypeDef>:
	I2C( I2C_HandleTypeDef bus );
	virtual ~I2C();

	void setBusData( I2C_HandleTypeDef bus ) { mI2C = bus; }
 8001188:	b084      	sub	sp, #16
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	f107 0014 	add.w	r0, r7, #20
 8001196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3304      	adds	r3, #4
 800119e:	f107 0114 	add.w	r1, r7, #20
 80011a2:	2254      	movs	r2, #84	; 0x54
 80011a4:	4618      	mov	r0, r3
 80011a6:	f009 fc11 	bl	800a9cc <memcpy>
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011b4:	b004      	add	sp, #16
 80011b6:	4770      	bx	lr

080011b8 <_ZN7Display6setLCDEP3LCD>:
		SCREEN_MAIN = 0
	};

	Display();
	virtual ~Display();
	void setLCD( LCD *lcd ) { mLCD = lcd; }
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <_ZN5Audio10setDecoderEP12DolbyDecoder>:
public:
	Audio( Amplifier *amp );
	virtual ~Audio();

	virtual void run();
	virtual void setDecoder( DolbyDecoder *decoder ) { mDecoder = decoder; }
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <_ZN5Audio6setDACEP6DAC_IC>:
	virtual void setDAC( DAC_IC *dac ) { mDAC = dac; }
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
	...

08001208 <_ZN9AmplifierC1Ev>:
#include "DACPCM1681.h"
#include "DolbyDecoderSTA310.h"
//#include "usbd_cdc_if.h"
#include "Debug.h"

Amplifier::Amplifier() : mUI( this ), mAudio( this ), mDAC( 0 ), mDecoder( 0 ), mLastVolumeTimer( 0 ), mCurrentVolume( 50 ), mSamplingFrequency( 0 ) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fcaa 	bl	8001b6c <_ZN13DecoderEventsC1Ev>
 8001218:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <_ZN9AmplifierC1Ev+0x80>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3304      	adds	r3, #4
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	f001 ffef 	bl	8003208 <_ZN2UIC1EP9Amplifier>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	330c      	adds	r3, #12
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fcbc 	bl	8001bac <_ZN7DisplayC1Ev>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	333c      	adds	r3, #60	; 0x3c
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f97e 	bl	800153c <_ZN5AudioC1EP9Amplifier>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3354      	adds	r3, #84	; 0x54
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff89 	bl	800115c <_ZN3I2CC1Ev>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2232      	movs	r2, #50	; 0x32
 8001266:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	33d4      	adds	r3, #212	; 0xd4
 800126e:	4618      	mov	r0, r3
 8001270:	f009 fa86 	bl	800a780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	// TODO Auto-generated constructor stub
}
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	0800b4ec 	.word	0x0800b4ec

0800128c <_ZN9AmplifierD1Ev>:

Amplifier::~Amplifier() {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <_ZN9AmplifierD1Ev+0x54>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	33d4      	adds	r3, #212	; 0xd4
 800129e:	4618      	mov	r0, r3
 80012a0:	f009 fa75 	bl	800a78e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3354      	adds	r3, #84	; 0x54
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 fc2f 	bl	8002b0c <_ZN3I2CD1Ev>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	333c      	adds	r3, #60	; 0x3c
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f962 	bl	800157c <_ZN5AudioD1Ev>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	330c      	adds	r3, #12
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fc95 	bl	8001bec <_ZN7DisplayD1Ev>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3304      	adds	r3, #4
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 ffb2 	bl	8003230 <_ZN2UID1Ev>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fc5c 	bl	8001b8c <_ZN13DecoderEventsD1Ev>
	// TODO Auto-generated destructor stub
}
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	0800b4ec 	.word	0x0800b4ec

080012e4 <_ZN9AmplifierD0Ev>:
Amplifier::~Amplifier() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
}
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffcd 	bl	800128c <_ZN9AmplifierD1Ev>
 80012f2:	21f0      	movs	r1, #240	; 0xf0
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f009 f9be 	bl	800a676 <_ZdlPvj>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <_ZN9Amplifier20onSamplingRateChangeEm>:

void
Amplifier::onSamplingRateChange( uint32_t samplingRate ) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	mDisplay.setSamplingRate( samplingRate );
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	330c      	adds	r3, #12
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fca4 	bl	8001c62 <_ZN7Display15setSamplingRateEm>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_ZN9Amplifier17onAlgorithmChangeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void
Amplifier::onAlgorithmChange( const std::string &algorithm ) {
 8001322:	b590      	push	{r4, r7, lr}
 8001324:	b089      	sub	sp, #36	; 0x24
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
	mDisplay.setAlgorithm( algorithm );
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f103 040c 	add.w	r4, r3, #12
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	6839      	ldr	r1, [r7, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f009 fa6b 	bl	800a814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	4619      	mov	r1, r3
 8001344:	4620      	mov	r0, r4
 8001346:	f000 fca1 	bl	8001c8c <_ZN7Display12setAlgorithmENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4618      	mov	r0, r3
 8001350:	f009 fa1d 	bl	800a78e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8001354:	bf00      	nop
 8001356:	3724      	adds	r7, #36	; 0x24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd90      	pop	{r4, r7, pc}

0800135c <_ZN9Amplifier10initializeE17I2C_HandleTypeDef>:

void
Amplifier::initialize( I2C_HandleTypeDef bus ) {
 800135c:	b084      	sub	sp, #16
 800135e:	b5b0      	push	{r4, r5, r7, lr}
 8001360:	b094      	sub	sp, #80	; 0x50
 8001362:	af12      	add	r7, sp, #72	; 0x48
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	f107 001c 	add.w	r0, r7, #28
 800136a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// Take the I2C bus info and configure our internal I2C bus class
	mBusI2C.setBusData( bus );
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8001374:	4668      	mov	r0, sp
 8001376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137a:	2248      	movs	r2, #72	; 0x48
 800137c:	4619      	mov	r1, r3
 800137e:	f009 fb25 	bl	800a9cc <memcpy>
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001388:	4620      	mov	r0, r4
 800138a:	f7ff fefd 	bl	8001188 <_ZN3I2C10setBusDataE17I2C_HandleTypeDef>

	mDAC = new DAC_PCM1681( mBusI2C.makeDevice( 0x4c << 1 ) );
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3354      	adds	r3, #84	; 0x54
 8001392:	2198      	movs	r1, #152	; 0x98
 8001394:	4618      	mov	r0, r3
 8001396:	f001 fcc1 	bl	8002d1c <_ZN3I2C10makeDeviceEh>
 800139a:	4605      	mov	r5, r0
 800139c:	2010      	movs	r0, #16
 800139e:	f009 f96c 	bl	800a67a <_Znwj>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461c      	mov	r4, r3
 80013a6:	4629      	mov	r1, r5
 80013a8:	4620      	mov	r0, r4
 80013aa:	f000 fa83 	bl	80018b4 <_ZN11DAC_PCM1681C1EP10I2C_Device>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
	mDecoder = new DolbyDecoder_STA310( mBusI2C.makeDevice( 0x60 << 1 ) );
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3354      	adds	r3, #84	; 0x54
 80013b8:	21c0      	movs	r1, #192	; 0xc0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 fcae 	bl	8002d1c <_ZN3I2C10makeDeviceEh>
 80013c0:	4605      	mov	r5, r0
 80013c2:	2018      	movs	r0, #24
 80013c4:	f009 f959 	bl	800a67a <_Znwj>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461c      	mov	r4, r3
 80013cc:	4629      	mov	r1, r5
 80013ce:	4620      	mov	r0, r4
 80013d0:	f000 fd64 	bl	8001e9c <_ZN19DolbyDecoder_STA310C1EP10I2C_Device>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0

	mDecoder->setEventHandler( this );
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3324      	adds	r3, #36	; 0x24
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4610      	mov	r0, r2
 80013f0:	4798      	blx	r3

	// Configure the audio thread
	mAudio.setDecoder( mDecoder );
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013fe:	4619      	mov	r1, r3
 8001400:	4610      	mov	r0, r2
 8001402:	f7ff fee6 	bl	80011d2 <_ZN5Audio10setDecoderEP12DolbyDecoder>
	mAudio.setDAC( mDAC );
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001412:	4619      	mov	r1, r3
 8001414:	4610      	mov	r0, r2
 8001416:	f7ff fee9 	bl	80011ec <_ZN5Audio6setDACEP6DAC_IC>

	mLCD = new LCD( mBusI2C.makeDevice( LCD_I2C_ADDR ) );
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3354      	adds	r3, #84	; 0x54
 800141e:	214e      	movs	r1, #78	; 0x4e
 8001420:	4618      	mov	r0, r3
 8001422:	f001 fc7b 	bl	8002d1c <_ZN3I2C10makeDeviceEh>
 8001426:	4605      	mov	r5, r0
 8001428:	200c      	movs	r0, #12
 800142a:	f009 f926 	bl	800a67a <_Znwj>
 800142e:	4603      	mov	r3, r0
 8001430:	461c      	mov	r4, r3
 8001432:	4629      	mov	r1, r5
 8001434:	4620      	mov	r0, r4
 8001436:	f001 fe2d 	bl	8003094 <_ZN3LCDC1EP10I2C_Device>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
	mDisplay.setLCD( mLCD );
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f103 020c 	add.w	r2, r3, #12
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800144c:	4619      	mov	r1, r3
 800144e:	4610      	mov	r0, r2
 8001450:	f7ff feb2 	bl	80011b8 <_ZN7Display6setLCDEP3LCD>

	mVolumeEncoder = new Encoder();
 8001454:	2008      	movs	r0, #8
 8001456:	f009 f910 	bl	800a67a <_Znwj>
 800145a:	4603      	mov	r3, r0
 800145c:	461c      	mov	r4, r3
 800145e:	4620      	mov	r0, r4
 8001460:	f001 fa78 	bl	8002954 <_ZN7EncoderC1Ev>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4

	mAudio.start();
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	333c      	adds	r3, #60	; 0x3c
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f936 	bl	80016e0 <_ZN5Audio5startEv>
	mStatusLEDs[ STATUS_MUTE ].setPortAndPin( LED_MUTE_GPIO_Port, LED_MUTE_Pin );
	mStatusLEDs[ STATUS_RUN ].setPortAndPin( LED_RUN_GPIO_Port, LED_RUN_Pin );
	*/


}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800147e:	b004      	add	sp, #16
 8001480:	4770      	bx	lr
	...

08001484 <_ZN9Amplifier3runEv>:

void Amplifier::run() {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	mLCD->initialize();
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3308      	adds	r3, #8
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4610      	mov	r0, r2
 80014a0:	4798      	blx	r3
	mDisplay.updateVolume( mCurrentVolume );
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f103 020c 	add.w	r2, r3, #12
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80014ae:	4619      	mov	r1, r3
 80014b0:	4610      	mov	r0, r2
 80014b2:	f000 fc0b 	bl	8001ccc <_ZN7Display12updateVolumeEi>
	mDisplay.update();
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	330c      	adds	r3, #12
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fbba 	bl	8001c34 <_ZN7Display6updateEv>

	while ( true ) {
		uint32_t currentCount = (uint32_t)TIM4->CNT;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <_ZN9Amplifier3runEv+0xb4>)
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	60fb      	str	r3, [r7, #12]
		ENCODER_VALUE encoderChange = mVolumeEncoder->checkEncoder( currentCount );
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3308      	adds	r3, #8
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68f9      	ldr	r1, [r7, #12]
 80014da:	4610      	mov	r0, r2
 80014dc:	4798      	blx	r3
 80014de:	60b8      	str	r0, [r7, #8]
		if ( encoderChange == Encoder::ENCODER_INCREASE ) {
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d107      	bne.n	80014f6 <_ZN9Amplifier3runEv+0x72>
			mCurrentVolume++;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80014f4:	e009      	b.n	800150a <_ZN9Amplifier3runEv+0x86>
		} else if ( encoderChange == Encoder::ENCODER_DECREASE ) {
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d106      	bne.n	800150a <_ZN9Amplifier3runEv+0x86>
			mCurrentVolume--;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001502:	1e5a      	subs	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		if ( encoderChange != Encoder::ENCODER_NOCHANGE ) {
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d009      	beq.n	8001524 <_ZN9Amplifier3runEv+0xa0>
			mDisplay.updateVolume( mCurrentVolume );
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f103 020c 	add.w	r2, r3, #12
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f000 fbd4 	bl	8001ccc <_ZN7Display12updateVolumeEi>
		}

		mDisplay.update();
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	330c      	adds	r3, #12
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fb83 	bl	8001c34 <_ZN7Display6updateEv>

		osDelay( 1 );
 800152e:	2001      	movs	r0, #1
 8001530:	f006 fca6 	bl	8007e80 <osDelay>
	}
 8001534:	e7c4      	b.n	80014c0 <_ZN9Amplifier3runEv+0x3c>
 8001536:	bf00      	nop
 8001538:	40000800 	.word	0x40000800

0800153c <_ZN5AudioC1EP9Amplifier>:
 */

#include "Audio.h"
#include "cmsis_os.h"

Audio::Audio( Amplifier *amp ) : Runnable( amp ), mDecoder( 0 ), mDAC( 0 ), mHasBeenInitialized( false ), mTick( 0 ) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6839      	ldr	r1, [r7, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fe38 	bl	80031c0 <_ZN8RunnableC1EP9Amplifier>
 8001550:	4a09      	ldr	r2, [pc, #36]	; (8001578 <_ZN5AudioC1EP9Amplifier+0x3c>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	741a      	strb	r2, [r3, #16]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
	// TODO Auto-generated constructor stub

}
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	0800b50c 	.word	0x0800b50c

0800157c <_ZN5AudioD1Ev>:

Audio::~Audio() {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	4a05      	ldr	r2, [pc, #20]	; (800159c <_ZN5AudioD1Ev+0x20>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fe2b 	bl	80031e8 <_ZN8RunnableD1Ev>
	// TODO Auto-generated destructor stub
}
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	0800b50c 	.word	0x0800b50c

080015a0 <_ZN5AudioD0Ev>:
Audio::~Audio() {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
}
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ffe7 	bl	800157c <_ZN5AudioD1Ev>
 80015ae:	2118      	movs	r1, #24
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f009 f860 	bl	800a676 <_ZdlPvj>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_ZN5Audio3runEv>:


void
Audio::run() {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	// We need to start setting up the audio interfaces
	// First we'll configure the Dolby Decoder
	for(;;) {
		if ( !mHasBeenInitialized ) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7c1b      	ldrb	r3, [r3, #16]
 80015cc:	f083 0301 	eor.w	r3, r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d052      	beq.n	800167c <_ZN5Audio3runEv+0xbc>
			// Let's run the audio init.. we'll put this in the for loop in case for some reason we need to initialize again
			if ( mDAC && mDecoder ) {
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d04e      	beq.n	800167c <_ZN5Audio3runEv+0xbc>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d04a      	beq.n	800167c <_ZN5Audio3runEv+0xbc>
				// We have a valid DAC and a valid decoder.. for now both are required

				// Initialize the Dolby Decoder
				mDecoder->initialize();
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3308      	adds	r3, #8
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4610      	mov	r0, r2
 80015f6:	4798      	blx	r3

				if ( mDecoder->isInitialized() ) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	330c      	adds	r3, #12
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4610      	mov	r0, r2
 8001608:	4798      	blx	r3
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d035      	beq.n	800167c <_ZN5Audio3runEv+0xbc>
					// This means the startup of the decoder was successful

					// Let's mute the output on the decoder
					mDecoder->mute( true );
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3310      	adds	r3, #16
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2101      	movs	r1, #1
 8001620:	4610      	mov	r0, r2
 8001622:	4798      	blx	r3

					// Now let's pull the Decoder out of the IDLE state..
					mDecoder->run();
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3318      	adds	r3, #24
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4610      	mov	r0, r2
 8001634:	4798      	blx	r3

					// Decoder should be sending a clock signal to the DAC chip, so it should be responsive
					// The datasheet says the DAC needs about 5ms to be responsive, so let's wait 10
					osDelay( 10 );
 8001636:	200a      	movs	r0, #10
 8001638:	f006 fc22 	bl	8007e80 <osDelay>

					mDAC->init();
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	330c      	adds	r3, #12
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4610      	mov	r0, r2
 800164c:	4798      	blx	r3

					// Time to unleash the KRAKEN!  Let's start decoding...
					mDecoder->play();
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3314      	adds	r3, #20
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2101      	movs	r1, #1
 800165e:	4610      	mov	r0, r2
 8001660:	4798      	blx	r3

					mDecoder->mute( false );
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3310      	adds	r3, #16
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2100      	movs	r1, #0
 8001672:	4610      	mov	r0, r2
 8001674:	4798      	blx	r3

					mHasBeenInitialized = true;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	741a      	strb	r2, [r3, #16]
				//	mDAC->enable( true );
				}
			}
		}

		if ( mDecoder && mHasBeenInitialized ) {
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d022      	beq.n	80016ca <_ZN5Audio3runEv+0x10a>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7c1b      	ldrb	r3, [r3, #16]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01e      	beq.n	80016ca <_ZN5Audio3runEv+0x10a>
			mDecoder->checkForInterrupt();
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	331c      	adds	r3, #28
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4610      	mov	r0, r2
 800169c:	4798      	blx	r3

			if ( mTick % 5000 == 0 ) {
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <_ZN5Audio3runEv+0x11c>)
 80016a4:	fba3 1302 	umull	r1, r3, r3, r2
 80016a8:	0b1b      	lsrs	r3, r3, #12
 80016aa:	f241 3188 	movw	r1, #5000	; 0x1388
 80016ae:	fb01 f303 	mul.w	r3, r1, r3
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d108      	bne.n	80016ca <_ZN5Audio3runEv+0x10a>
				mDecoder->checkFormat();
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3320      	adds	r3, #32
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4610      	mov	r0, r2
 80016c8:	4798      	blx	r3
			}
		}

		mTick = mTick + 1;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	615a      	str	r2, [r3, #20]


		osDelay(1);
 80016d4:	2001      	movs	r0, #1
 80016d6:	f006 fbd3 	bl	8007e80 <osDelay>
		if ( !mHasBeenInitialized ) {
 80016da:	e775      	b.n	80015c8 <_ZN5Audio3runEv+0x8>
 80016dc:	d1b71759 	.word	0xd1b71759

080016e0 <_ZN5Audio5startEv>:
	}
}

void
Audio::start() {
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
//	mHasBeenInitialized = true;
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <_ZN6DAC_IC9isEnabledEv>:

	// the name for this DAC
	virtual std::string name() = 0;
	virtual void init() = 0;

	virtual bool isEnabled() { return true; }
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	2301      	movs	r3, #1
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <_ZN6DAC_IC6enableEb>:
	virtual void enable( bool state ) {};
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	70fb      	strb	r3, [r7, #3]
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <_ZN6DAC_IC14supportsFormatEh>:
	virtual bool supportsFormat( uint8_t format ) { return false; }
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
 8001728:	2300      	movs	r3, #0
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <_ZN6DAC_IC14supportsVolumeEv>:
	virtual bool supportsVolume() { return false; }
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	2300      	movs	r3, #0
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <_ZN6DAC_IC12supportsMuteEv>:
	virtual bool supportsMute() { return false; }
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	2300      	movs	r3, #0
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <_ZN6DAC_IC8channelsEv>:
	virtual int channels() { return 0; }
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	2300      	movs	r3, #0
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <_ZN6DAC_IC16setChannelVolumeEii>:

	// volume is 0 to 63, where 0 is lowest and 63 is highest
	virtual void setChannelVolume( int channel, int volume ) {}
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <_ZN6DAC_IC9setVolumeEi>:

	// sets the volume on all channels
	virtual void setVolume( int volume ) {};
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <_ZN6DAC_IC11muteChannelEib>:

	virtual void muteChannel( int channel, bool enable ) {}
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71fb      	strb	r3, [r7, #7]
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <_ZN6DAC_IC4muteEb>:
	virtual void mute( bool enable ) {}
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	460b      	mov	r3, r1
 80017bc:	70fb      	strb	r3, [r7, #3]
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <_ZN6DAC_IC9setFormatEh>:

	virtual void setFormat( uint8_t format ) {};
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	70fb      	strb	r3, [r7, #3]
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
	...

080017e0 <_ZN6DAC_ICC1Ev>:
 *      Author: duane
 */

#include "DAC.h"

DAC_IC::DAC_IC() {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <_ZN6DAC_ICC1Ev+0x1c>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	0800b52c 	.word	0x0800b52c

08001800 <_ZN6DAC_ICD1Ev>:

DAC_IC::~DAC_IC() {
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <_ZN6DAC_ICD1Ev+0x1c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	0800b52c 	.word	0x0800b52c

08001820 <_ZN11DAC_PCM16819isEnabledEv>:
	DAC_PCM1681( I2C_Device *device );
	virtual ~DAC_PCM1681();

	virtual void init();

	virtual bool isEnabled() { return mEnabled; }
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7b5b      	ldrb	r3, [r3, #13]
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf14      	ite	ne
 8001830:	2301      	movne	r3, #1
 8001832:	2300      	moveq	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <_ZN11DAC_PCM168114supportsVolumeEv>:
	virtual void enable( bool state );

	virtual bool supportsFormat( uint8_t format );
	virtual bool supportsVolume() { return true; }
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	2301      	movs	r3, #1
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <_ZN11DAC_PCM168112supportsMuteEv>:
	virtual bool supportsMute() { return true; }
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	2301      	movs	r3, #1
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <_ZN11DAC_PCM16818channelsEv>:
	virtual int channels() { return 8; }
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	2308      	movs	r3, #8
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <_ZN11DAC_PCM16814nameB5cxx11Ev>:

	virtual std::string name() { return "PCM1681"; }
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4618      	mov	r0, r3
 800188c:	f008 ff09 	bl	800a6a2 <_ZNSaIcEC1Ev>
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	461a      	mov	r2, r3
 8001896:	4906      	ldr	r1, [pc, #24]	; (80018b0 <_ZN11DAC_PCM16814nameB5cxx11Ev+0x34>)
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f008 ffed 	bl	800a878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	4618      	mov	r0, r3
 80018a4:	f008 fefe 	bl	800a6a4 <_ZNSaIcED1Ev>
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	0800b424 	.word	0x0800b424

080018b4 <_ZN11DAC_PCM1681C1EP10I2C_Device>:
#define PCM1681_REG_MUTE	7
#define PCM1681_REG_ENABLE	8
#define PCM1681_REG_FORMAT	9
#define PCM1681_REG_DAMS	13

DAC_PCM1681::DAC_PCM1681( I2C_Device *device ) : mDevice( device ), mEnabled( true ) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff8d 	bl	80017e0 <_ZN6DAC_ICC1Ev>
 80018c6:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <_ZN11DAC_PCM1681C1EP10I2C_Device+0x34>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	735a      	strb	r2, [r3, #13]
	// TODO Auto-generated constructor stub
	mMuteStatus = 0;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	731a      	strb	r2, [r3, #12]
}
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	0800b570 	.word	0x0800b570

080018ec <_ZN11DAC_PCM1681D1Ev>:

DAC_PCM1681::~DAC_PCM1681() {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	4a05      	ldr	r2, [pc, #20]	; (800190c <_ZN11DAC_PCM1681D1Ev+0x20>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff7f 	bl	8001800 <_ZN6DAC_ICD1Ev>
	// TODO Auto-generated destructor stub
}
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	0800b570 	.word	0x0800b570

08001910 <_ZN11DAC_PCM1681D0Ev>:
DAC_PCM1681::~DAC_PCM1681() {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
}
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ffe7 	bl	80018ec <_ZN11DAC_PCM1681D1Ev>
 800191e:	2110      	movs	r1, #16
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f008 fea8 	bl	800a676 <_ZdlPvj>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_ZN11DAC_PCM16816enableEb>:

void
DAC_PCM1681::enable( bool state ) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
	if ( state ) {
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00a      	beq.n	8001958 <_ZN11DAC_PCM16816enableEb+0x28>
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0 );
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6898      	ldr	r0, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3318      	adds	r3, #24
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2200      	movs	r2, #0
 8001952:	2108      	movs	r1, #8
 8001954:	4798      	blx	r3
 8001956:	e009      	b.n	800196c <_ZN11DAC_PCM16816enableEb+0x3c>
	} else {
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0xff );
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6898      	ldr	r0, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3318      	adds	r3, #24
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	22ff      	movs	r2, #255	; 0xff
 8001968:	2108      	movs	r1, #8
 800196a:	4798      	blx	r3
	}

	mEnabled = state;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	735a      	strb	r2, [r3, #13]
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_ZN11DAC_PCM168114supportsFormatEh>:

bool
DAC_PCM1681::supportsFormat( uint8_t format ) {
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	460b      	mov	r3, r1
 8001984:	70fb      	strb	r3, [r7, #3]
	return ( format == DAC_IC::FORMAT_SONY || format == DAC_IC::FORMAT_I2S );
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <_ZN11DAC_PCM168114supportsFormatEh+0x18>
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <_ZN11DAC_PCM168114supportsFormatEh+0x1c>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <_ZN11DAC_PCM168114supportsFormatEh+0x1e>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <_ZN11DAC_PCM16819setFormatEh>:

void
DAC_PCM1681::setFormat( uint8_t format ) {
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	73fb      	strb	r3, [r7, #15]
	if ( format == FORMAT_SONY ) {
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_ZN11DAC_PCM16819setFormatEh+0x1c>
		value = 5;
 80019b8:	2305      	movs	r3, #5
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e004      	b.n	80019c8 <_ZN11DAC_PCM16819setFormatEh+0x26>
	} else if ( format == FORMAT_I2S ) {
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <_ZN11DAC_PCM16819setFormatEh+0x26>
		value = 4;
 80019c4:	2304      	movs	r3, #4
 80019c6:	73fb      	strb	r3, [r7, #15]
	}

	//mDevice->writeRegister( PCM1681_REG_FORMAT, value );
	uint8_t data[2];
	data[0] = PCM1681_REG_FORMAT;
 80019c8:	2309      	movs	r3, #9
 80019ca:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	737b      	strb	r3, [r7, #13]
	//mDevice->writeData( data, 2 );
	mDevice->writeRegister( PCM1681_REG_FORMAT, 4 );
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6898      	ldr	r0, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	3318      	adds	r3, #24
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2204      	movs	r2, #4
 80019e0:	2109      	movs	r1, #9
 80019e2:	4798      	blx	r3
	// mDevice->writeRegister( PCM1681_REG_FORMAT, 4 ); works
}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZN11DAC_PCM16814initEv>:

void
DAC_PCM1681::init() {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	// do setup

	// set digital attenuation range of 0-63db in 0.5db increments
//	mDevice->writeRegister( PCM1681_REG_DAMS, 0 );

	setFormat( FORMAT_SONY );
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3338      	adds	r3, #56	; 0x38
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2100      	movs	r1, #0
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4798      	blx	r3

	// Let's set a reasonable volume at first
	//setVolume( 127 );
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <_ZN11DAC_PCM168116setChannelVolumeEii>:

void
DAC_PCM1681::setChannelVolume( int channel, int volume ) {
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
	uint8_t reg = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	75fb      	strb	r3, [r7, #23]
	switch( channel ) {
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	d820      	bhi.n	8001a64 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
 8001a22:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <_ZN11DAC_PCM168116setChannelVolumeEii+0x1c>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001a41 	.word	0x08001a41
 8001a2c:	08001a47 	.word	0x08001a47
 8001a30:	08001a4d 	.word	0x08001a4d
 8001a34:	08001a53 	.word	0x08001a53
 8001a38:	08001a59 	.word	0x08001a59
 8001a3c:	08001a5f 	.word	0x08001a5f
		case FRONT_LEFT:
			reg = 1;
 8001a40:	2301      	movs	r3, #1
 8001a42:	75fb      	strb	r3, [r7, #23]
			break;
 8001a44:	e00e      	b.n	8001a64 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case FRONT_RIGHT:
			reg = 2;
 8001a46:	2302      	movs	r3, #2
 8001a48:	75fb      	strb	r3, [r7, #23]
			break;
 8001a4a:	e00b      	b.n	8001a64 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_LEFT:
			reg = 3;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	75fb      	strb	r3, [r7, #23]
			break;
 8001a50:	e008      	b.n	8001a64 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_RIGHT:
			reg = 4;
 8001a52:	2304      	movs	r3, #4
 8001a54:	75fb      	strb	r3, [r7, #23]
			break;
 8001a56:	e005      	b.n	8001a64 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case CENTER:
			reg = 5;
 8001a58:	2305      	movs	r3, #5
 8001a5a:	75fb      	strb	r3, [r7, #23]
			break;
 8001a5c:	e002      	b.n	8001a64 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case SUBWOOFER:
			reg = 6;
 8001a5e:	2306      	movs	r3, #6
 8001a60:	75fb      	strb	r3, [r7, #23]
			break;
 8001a62:	bf00      	nop
	}

	// Clamp the volume to the upper limit
	if ( volume > 127 ) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b7f      	cmp	r3, #127	; 0x7f
 8001a68:	dd01      	ble.n	8001a6e <_ZN11DAC_PCM168116setChannelVolumeEii+0x62>
		volume = 127;
 8001a6a:	237f      	movs	r3, #127	; 0x7f
 8001a6c:	607b      	str	r3, [r7, #4]
	}

	uint8_t volumeLevel = volume + 128;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	3b80      	subs	r3, #128	; 0x80
 8001a74:	75bb      	strb	r3, [r7, #22]
//	mDevice->writeRegister( reg, volumeLevel );
}
 8001a76:	bf00      	nop
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <_ZN11DAC_PCM16819setVolumeEi>:

void
DAC_PCM1681::setVolume( int volume ) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
	setChannelVolume( FRONT_LEFT, volume );
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3328      	adds	r3, #40	; 0x28
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	2100      	movs	r1, #0
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
	setChannelVolume( FRONT_RIGHT, volume );
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3328      	adds	r3, #40	; 0x28
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
	setChannelVolume( REAR_LEFT, volume );
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3328      	adds	r3, #40	; 0x28
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	4798      	blx	r3
	setChannelVolume( REAR_RIGHT, volume );
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3328      	adds	r3, #40	; 0x28
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	2103      	movs	r1, #3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
	setChannelVolume( CENTER, volume );
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3328      	adds	r3, #40	; 0x28
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	4798      	blx	r3
	setChannelVolume( SUBWOOFER, volume );
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3328      	adds	r3, #40	; 0x28
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	4798      	blx	r3
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_ZN11DAC_PCM168111muteChannelEib>:

void
DAC_PCM1681::muteChannel( int channel, bool enable ) {
 8001af2:	b480      	push	{r7}
 8001af4:	b087      	sub	sp, #28
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	4613      	mov	r3, r2
 8001afe:	71fb      	strb	r3, [r7, #7]
	uint8_t mask =  ( 1 << ( channel ) );
 8001b00:	2201      	movs	r2, #1
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	75fb      	strb	r3, [r7, #23]
	if ( enable ) {
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <_ZN11DAC_PCM168111muteChannelEib+0x2e>
		// enable the bit representing this channel
		mMuteStatus = mMuteStatus & mask;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	7b1a      	ldrb	r2, [r3, #12]
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	4013      	ands	r3, r2
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	731a      	strb	r2, [r3, #12]
		// disable the bit representing the channel
		mMuteStatus = mMuteStatus & ~mask;
	}

	//mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
}
 8001b1e:	e00b      	b.n	8001b38 <_ZN11DAC_PCM168111muteChannelEib+0x46>
		mMuteStatus = mMuteStatus & ~mask;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	7b1b      	ldrb	r3, [r3, #12]
 8001b24:	b25a      	sxtb	r2, r3
 8001b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	b25b      	sxtb	r3, r3
 8001b2e:	4013      	ands	r3, r2
 8001b30:	b25b      	sxtb	r3, r3
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	731a      	strb	r2, [r3, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <_ZN11DAC_PCM16814muteEb>:

void
DAC_PCM1681::mute( bool enable ) {
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	70fb      	strb	r3, [r7, #3]
	 if ( enable ) {
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <_ZN11DAC_PCM16814muteEb+0x1a>
		 mMuteStatus = 0xff;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	22ff      	movs	r2, #255	; 0xff
 8001b58:	731a      	strb	r2, [r3, #12]
	 } else {
		 mMuteStatus = 0;
	 }

	// mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
}
 8001b5a:	e002      	b.n	8001b62 <_ZN11DAC_PCM16814muteEb+0x20>
		 mMuteStatus = 0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	731a      	strb	r2, [r3, #12]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <_ZN13DecoderEventsC1Ev>:
 *      Author: duane
 */

#include "DecoderEvents.h"

DecoderEvents::DecoderEvents() {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <_ZN13DecoderEventsC1Ev+0x1c>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	0800b5b4 	.word	0x0800b5b4

08001b8c <_ZN13DecoderEventsD1Ev>:

DecoderEvents::~DecoderEvents() {
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <_ZN13DecoderEventsD1Ev+0x1c>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	0800b5b4 	.word	0x0800b5b4

08001bac <_ZN7DisplayC1Ev>:
#include "main.h"
#include "cmsis_os.h"
#include <stdio.h>
#include "Debug.h"

Display::Display() : mShouldUpdate( true ), mCurrentScreen( SCREEN_MAIN ), mCurrentVolume( 50 ), mLCD( 0 ) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <_ZN7DisplayC1Ev+0x3c>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	711a      	strb	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2232      	movs	r2, #50	; 0x32
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3318      	adds	r3, #24
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f008 fdd2 	bl	800a780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub

}
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	0800b5cc 	.word	0x0800b5cc

08001bec <_ZN7DisplayD1Ev>:

Display::~Display() {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <_ZN7DisplayD1Ev+0x24>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3318      	adds	r3, #24
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f008 fdc5 	bl	800a78e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	// TODO Auto-generated destructor stub
}
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	0800b5cc 	.word	0x0800b5cc

08001c14 <_ZN7DisplayD0Ev>:
Display::~Display() {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
}
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ffe5 	bl	8001bec <_ZN7DisplayD1Ev>
 8001c22:	2130      	movs	r1, #48	; 0x30
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f008 fd26 	bl	800a676 <_ZdlPvj>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_ZN7Display6updateEv>:

void
Display::update() {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	if ( mShouldUpdate ) {
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	791b      	ldrb	r3, [r3, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00a      	beq.n	8001c5a <_ZN7Display6updateEv+0x26>
		switch( mCurrentScreen ) {
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d103      	bne.n	8001c54 <_ZN7Display6updateEv+0x20>
			case SCREEN_MAIN:
				updateMainScreen();
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f853 	bl	8001cf8 <_ZN7Display16updateMainScreenEv>
				break;
 8001c52:	bf00      	nop
		}

		mShouldUpdate = false;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	711a      	strb	r2, [r3, #4]
	}

}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_ZN7Display15setSamplingRateEm>:


void
Display::setSamplingRate( uint32_t samplingRate ) {
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
	// This will happen on another thread, the audio one, so in and out quickly
	if ( samplingRate != mSamplingRate ) {
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d005      	beq.n	8001c82 <_ZN7Display15setSamplingRateEm+0x20>
		mSamplingRate = samplingRate;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	615a      	str	r2, [r3, #20]
		mShouldUpdate = true;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	711a      	strb	r2, [r3, #4]
	}

}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <_ZN7Display12setAlgorithmENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void
Display::setAlgorithm( const std::string algorithm ) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
	// This will happen on another thread, the audio one, so in and out quickly
	if ( algorithm.compare( mAlgorithm ) != 0 ) {
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3318      	adds	r3, #24
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6838      	ldr	r0, [r7, #0]
 8001c9e:	f008 fd86 	bl	800a7ae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf14      	ite	ne
 8001ca8:	2301      	movne	r3, #1
 8001caa:	2300      	moveq	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <_ZN7Display12setAlgorithmENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
		mAlgorithm = algorithm;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3318      	adds	r3, #24
 8001cb6:	6839      	ldr	r1, [r7, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f008 fd6e 	bl	800a79a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		mShouldUpdate = true;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	711a      	strb	r2, [r3, #4]
	}
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_ZN7Display12updateVolumeEi>:
Display::initialize() {
	DEBUG_STR( "Initializing" );
}

void
Display::updateVolume( int volume ) {
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
	if ( volume != mCurrentVolume ) {
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d002      	beq.n	8001ce6 <_ZN7Display12updateVolumeEi+0x1a>
		//DEBUG_STR( "Adjusting volume" );
		mShouldUpdate = true;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	711a      	strb	r2, [r3, #4]
	}

	mCurrentVolume = volume;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	60da      	str	r2, [r3, #12]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
	...

08001cf8 <_ZN7Display16updateMainScreenEv>:

void
Display::updateMainScreen() {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b094      	sub	sp, #80	; 0x50
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	6078      	str	r0, [r7, #4]
	//DEBUG_STR( "Updating main screen" );

	char s[50];

	mLCD->setCursor( 0, 0 );
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2200      	movs	r2, #0
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f001 f93b 	bl	8002f84 <_ZN3LCD9setCursorEhh>
	sprintf( s, "Volume %-3d          ", mCurrentVolume );
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	493f      	ldr	r1, [pc, #252]	; (8001e14 <_ZN7Display16updateMainScreenEv+0x11c>)
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f009 f821 	bl	800ad60 <siprintf>
	mLCD->writeString( s );
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f107 020c 	add.w	r2, r7, #12
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f001 f969 	bl	8003000 <_ZN3LCD11writeStringEPc>

	mLCD->setCursor( 0, 1 );
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2201      	movs	r2, #1
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 f924 	bl	8002f84 <_ZN3LCD9setCursorEhh>
	sprintf( s, "                     ", mCurrentVolume );
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4934      	ldr	r1, [pc, #208]	; (8001e18 <_ZN7Display16updateMainScreenEv+0x120>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f009 f80a 	bl	800ad60 <siprintf>
	mLCD->writeString( s );
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f107 020c 	add.w	r2, r7, #12
 8001d54:	4611      	mov	r1, r2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f001 f952 	bl	8003000 <_ZN3LCD11writeStringEPc>

	if ( mAlgorithm.length() && mSamplingRate ) {
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3318      	adds	r3, #24
 8001d60:	4618      	mov	r0, r3
 8001d62:	f008 fd20 	bl	800a7a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <_ZN7Display16updateMainScreenEv+0x80>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <_ZN7Display16updateMainScreenEv+0x80>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <_ZN7Display16updateMainScreenEv+0x82>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d030      	beq.n	8001de0 <_ZN7Display16updateMainScreenEv+0xe8>
		mLCD->setCursor( 0, 2 );
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2202      	movs	r2, #2
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f001 f8fc 	bl	8002f84 <_ZN3LCD9setCursorEhh>
		int intPart = mSamplingRate / 1000;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <_ZN7Display16updateMainScreenEv+0x124>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	099b      	lsrs	r3, r3, #6
 8001d98:	647b      	str	r3, [r7, #68]	; 0x44
		int fracPart = ( mSamplingRate - ( intPart * 1000 ) ) / 100;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001da0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001da4:	fb01 f202 	mul.w	r2, r1, r2
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	4a1d      	ldr	r2, [pc, #116]	; (8001e20 <_ZN7Display16updateMainScreenEv+0x128>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	643b      	str	r3, [r7, #64]	; 0x40
		sprintf( s, "%-5s        %d.%dkHz", mAlgorithm.c_str(), intPart, fracPart );
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3318      	adds	r3, #24
 8001db8:	4618      	mov	r0, r3
 8001dba:	f008 fcf6 	bl	800a7aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	f107 000c 	add.w	r0, r7, #12
 8001dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dca:	4916      	ldr	r1, [pc, #88]	; (8001e24 <_ZN7Display16updateMainScreenEv+0x12c>)
 8001dcc:	f008 ffc8 	bl	800ad60 <siprintf>
		mLCD->writeString( s );
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	f107 020c 	add.w	r2, r7, #12
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f001 f910 	bl	8003000 <_ZN3LCD11writeStringEPc>
	}

	mLCD->setCursor( 0, 3 );
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2203      	movs	r2, #3
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f001 f8cb 	bl	8002f84 <_ZN3LCD9setCursorEhh>
	sprintf( s, "6-Ch         Digital" );
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	490d      	ldr	r1, [pc, #52]	; (8001e28 <_ZN7Display16updateMainScreenEv+0x130>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f008 ffb3 	bl	800ad60 <siprintf>
	mLCD->writeString( s );
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f107 020c 	add.w	r2, r7, #12
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f001 f8fb 	bl	8003000 <_ZN3LCD11writeStringEPc>
}
 8001e0a:	bf00      	nop
 8001e0c:	3748      	adds	r7, #72	; 0x48
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	0800b42c 	.word	0x0800b42c
 8001e18:	0800b444 	.word	0x0800b444
 8001e1c:	10624dd3 	.word	0x10624dd3
 8001e20:	51eb851f 	.word	0x51eb851f
 8001e24:	0800b45c 	.word	0x0800b45c
 8001e28:	0800b474 	.word	0x0800b474

08001e2c <_ZN12DolbyDecoderC1Ev>:
 *      Author: duane
 */

#include "DolbyDecoder.h"

DolbyDecoder::DolbyDecoder() {
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <_ZN12DolbyDecoderC1Ev+0x1c>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	0800b5dc 	.word	0x0800b5dc

08001e4c <_ZN12DolbyDecoderD1Ev>:

DolbyDecoder::~DolbyDecoder() {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <_ZN12DolbyDecoderD1Ev+0x1c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	0800b5dc 	.word	0x0800b5dc

08001e6c <_ZN19DolbyDecoder_STA31015setEventHandlerEP13DecoderEvents>:
	} REGISTERS;

	DolbyDecoder_STA310( I2C_Device *device  );
	virtual ~DolbyDecoder_STA310();

	virtual void setEventHandler( DecoderEvents *handler ) { mEventHandler = handler; }
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <_ZN19DolbyDecoder_STA31013isInitializedEv>:
	virtual void initialize();
	virtual void mute( bool enable = true );
	virtual void run();
	virtual void play( bool enable = true );

	virtual bool isInitialized() { return mInitialized; }
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	7a1b      	ldrb	r3, [r3, #8]
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <_ZN19DolbyDecoder_STA310C1EP10I2C_Device>:
 */

#include "DolbyDecoderSTA310.h"
#include "cmsis_os.h"

DolbyDecoder_STA310::DolbyDecoder_STA310( I2C_Device *device ) :
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
	mDevice( device ), mInitialized( false ), mMuted( false ), mRunning( false ), mPlaying( false ), mEventHandler( 0 ), mIdent( 0 ), mSoftwareVersion( 0 ) {
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ffbf 	bl	8001e2c <_ZN12DolbyDecoderC1Ev>
 8001eae:	4a10      	ldr	r2, [pc, #64]	; (8001ef0 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device+0x54>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	721a      	strb	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	725a      	strb	r2, [r3, #9]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	729a      	strb	r2, [r3, #10]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	72da      	strb	r2, [r3, #11]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	741a      	strb	r2, [r3, #16]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	745a      	strb	r2, [r3, #17]
	// TODO Auto-generated constructor stub

}
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	0800b60c 	.word	0x0800b60c

08001ef4 <_ZN19DolbyDecoder_STA310D1Ev>:

DolbyDecoder_STA310::~DolbyDecoder_STA310() {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <_ZN19DolbyDecoder_STA310D1Ev+0x20>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ffa1 	bl	8001e4c <_ZN12DolbyDecoderD1Ev>
	// TODO Auto-generated destructor stub
}
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	0800b60c 	.word	0x0800b60c

08001f18 <_ZN19DolbyDecoder_STA310D0Ev>:
DolbyDecoder_STA310::~DolbyDecoder_STA310() {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
}
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ffe7 	bl	8001ef4 <_ZN19DolbyDecoder_STA310D1Ev>
 8001f26:	2118      	movs	r1, #24
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f008 fba4 	bl	800a676 <_ZdlPvj>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_ZN19DolbyDecoder_STA3104muteEb>:



void
DolbyDecoder_STA310::mute( bool enable ) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <_ZN19DolbyDecoder_STA3104muteEb+0x28>
		mDevice->writeRegister( DolbyDecoder_STA310::MUTE, 1 );
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6858      	ldr	r0, [r3, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	3318      	adds	r3, #24
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2114      	movs	r1, #20
 8001f5c:	4798      	blx	r3
 8001f5e:	e009      	b.n	8001f74 <_ZN19DolbyDecoder_STA3104muteEb+0x3c>
	} else {
		mDevice->writeRegister( DolbyDecoder_STA310::MUTE, 0 );
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6858      	ldr	r0, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3318      	adds	r3, #24
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2114      	movs	r1, #20
 8001f72:	4798      	blx	r3
	}

	mMuted = enable;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	725a      	strb	r2, [r3, #9]
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_ZN19DolbyDecoder_STA3104playEb>:

void
DolbyDecoder_STA310::play( bool enable ) {
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <_ZN19DolbyDecoder_STA3104playEb+0x28>
		mDevice->writeRegister( DolbyDecoder_STA310::PLAY, 1 );
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6858      	ldr	r0, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3318      	adds	r3, #24
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2113      	movs	r1, #19
 8001fa6:	4798      	blx	r3
 8001fa8:	e009      	b.n	8001fbe <_ZN19DolbyDecoder_STA3104playEb+0x3c>
	} else {
		mDevice->writeRegister( DolbyDecoder_STA310::PLAY, 0 );
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6858      	ldr	r0, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3318      	adds	r3, #24
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2113      	movs	r1, #19
 8001fbc:	4798      	blx	r3
	}

	mPlaying = enable;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	78fa      	ldrb	r2, [r7, #3]
 8001fc2:	72da      	strb	r2, [r3, #11]
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <_ZN19DolbyDecoder_STA3103runEv>:

void
DolbyDecoder_STA310::run() {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	if ( !mRunning ) {
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7a9b      	ldrb	r3, [r3, #10]
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <_ZN19DolbyDecoder_STA3103runEv+0x30>
		mDevice->writeRegister( DolbyDecoder_STA310::RUN, 1 );
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6858      	ldr	r0, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	3318      	adds	r3, #24
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2172      	movs	r1, #114	; 0x72
 8001ff4:	4798      	blx	r3
		mRunning = true;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	729a      	strb	r2, [r3, #10]

		// We are now running, the only way to stop is to do a reset of the chip
	}
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>:

void
DolbyDecoder_STA310::enableAudioPLL() {
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	mDevice->writeRegister( DolbyDecoder_STA310::ENABLE_PLL, 1 );
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6858      	ldr	r0, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3318      	adds	r3, #24
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2201      	movs	r2, #1
 800201c:	21b5      	movs	r1, #181	; 0xb5
 800201e:	4798      	blx	r3
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <_ZN19DolbyDecoder_STA31010initializeEv>:

void
DolbyDecoder_STA310::initialize() {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( DECODER_RESET_GPIO_Port, DECODER_RESET_Pin, GPIO_PIN_SET );
 8002030:	2201      	movs	r2, #1
 8002032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002036:	4839      	ldr	r0, [pc, #228]	; (800211c <_ZN19DolbyDecoder_STA31010initializeEv+0xf4>)
 8002038:	f002 faf5 	bl	8004626 <HAL_GPIO_WritePin>
	osDelay( 500 );
 800203c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002040:	f005 ff1e 	bl	8007e80 <osDelay>

	softReset();
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f9e0 	bl	800240a <_ZN19DolbyDecoder_STA3109softResetEv>

	if ( mInitialized ) {
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7a1b      	ldrb	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d05f      	beq.n	8002112 <_ZN19DolbyDecoder_STA31010initializeEv+0xea>
		// perform startup routine
		mIdent = mDevice->readRegister( DolbyDecoder_STA310::IDENT );
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	331c      	adds	r3, #28
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2101      	movs	r1, #1
 8002062:	4610      	mov	r0, r2
 8002064:	4798      	blx	r3
 8002066:	4603      	mov	r3, r0
 8002068:	b2da      	uxtb	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	741a      	strb	r2, [r3, #16]
		mSoftwareVersion = mDevice->readRegister( DolbyDecoder_STA310::SOFTVER );
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	331c      	adds	r3, #28
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2171      	movs	r1, #113	; 0x71
 800207e:	4610      	mov	r0, r2
 8002080:	4798      	blx	r3
 8002082:	4603      	mov	r3, r0
 8002084:	b2da      	uxtb	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	745a      	strb	r2, [r3, #17]

		// Enable the AUDIO PLL
		configureAudioPLL();
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f9b4 	bl	80023f8 <_ZN19DolbyDecoder_STA31017configureAudioPLLEv>
		enableAudioPLL();
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ffb7 	bl	8002004 <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>
		configureInterrupts();
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f876 	bl	8002188 <_ZN19DolbyDecoder_STA31019configureInterruptsEv>
		configureSync();
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f88f 	bl	80021c0 <_ZN19DolbyDecoder_STA31013configureSyncEv>
		configurePCMOUT();
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f83c 	bl	8002120 <_ZN19DolbyDecoder_STA31015configurePCMOUTEv>
		configureSPDIF();
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f913 	bl	80022d4 <_ZN19DolbyDecoder_STA31014configureSPDIFEv>
		configureDecoder();
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8c0 	bl	8002234 <_ZN19DolbyDecoder_STA31016configureDecoderEv>
		configureAC3();
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f947 	bl	8002348 <_ZN19DolbyDecoder_STA31012configureAC3Ev>

		//write_host_reg (0x4E,20); ..... write_host_reg (0x63,20); ..... write_host_reg (0x67,0);

		// Let's start the clocks
		// First, mute the output
		mute();
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3310      	adds	r3, #16
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2101      	movs	r1, #1
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3

		mDevice->writeRegister( 0x4e, 0 );
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6858      	ldr	r0, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3318      	adds	r3, #24
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	214e      	movs	r1, #78	; 0x4e
 80020da:	4798      	blx	r3
		mDevice->writeRegister( 0x63, 0 );
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6858      	ldr	r0, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3318      	adds	r3, #24
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	2163      	movs	r1, #99	; 0x63
 80020ee:	4798      	blx	r3
		mDevice->writeRegister( 0x67, 0 );
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6858      	ldr	r0, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3318      	adds	r3, #24
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2200      	movs	r2, #0
 8002100:	2167      	movs	r1, #103	; 0x67
 8002102:	4798      	blx	r3

		mute();
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3310      	adds	r3, #16
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2101      	movs	r1, #1
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	4798      	blx	r3
	//	run();

		// To start actual decoding and DAC playing, we need to run play().  But we need to configure the DAC first
	//	play();
	}
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40011000 	.word	0x40011000

08002120 <_ZN19DolbyDecoder_STA31015configurePCMOUTEv>:

void
DolbyDecoder_STA310::configurePCMOUT() {
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	// Set SPDIF configuration register
	mDevice->writeRegister( DolbyDecoder_STA310::SPDIF_CONF, 1 );
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6858      	ldr	r0, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3318      	adds	r3, #24
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2201      	movs	r2, #1
 8002138:	2160      	movs	r1, #96	; 0x60
 800213a:	4798      	blx	r3

	// Set PCM clock divider to support 384*Fs as 32 bits //
	mDevice->writeRegister( DolbyDecoder_STA310::PCM_DIV, 1 );
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6858      	ldr	r0, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3318      	adds	r3, #24
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2201      	movs	r2, #1
 800214c:	2154      	movs	r1, #84	; 0x54
 800214e:	4798      	blx	r3
	//mDevice->writeRegister( DolbyDecoder_STA310::PCM_DIV, 2 );

	// Set for 24 bit data ??
	int SONY = 8;
 8002150:	2308      	movs	r3, #8
 8002152:	617b      	str	r3, [r7, #20]
	int I2S = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]

	int BIT24 = 3;
 8002158:	2303      	movs	r3, #3
 800215a:	60fb      	str	r3, [r7, #12]
	int RPAD = 32;
 800215c:	2320      	movs	r3, #32
 800215e:	60bb      	str	r3, [r7, #8]
	mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, BIT24 | RPAD );
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6858      	ldr	r0, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3318      	adds	r3, #24
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	b251      	sxtb	r1, r2
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	b252      	sxtb	r2, r2
 8002176:	430a      	orrs	r2, r1
 8002178:	b252      	sxtb	r2, r2
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	2155      	movs	r1, #85	; 0x55
 800217e:	4798      	blx	r3
	//mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 3 );
	//mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 35 + 8 );
	//mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 35 );
	//mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 3 );
	//mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 3 );
}
 8002180:	bf00      	nop
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_ZN19DolbyDecoder_STA31019configureInterruptsEv>:

void
DolbyDecoder_STA310::configureInterrupts() {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	mDevice->writeRegister( DolbyDecoder_STA310::INT1, DolbyDecoder_STA310::ERR | DolbyDecoder_STA310::SFR );
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6858      	ldr	r0, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3318      	adds	r3, #24
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	220c      	movs	r2, #12
 80021a0:	2107      	movs	r1, #7
 80021a2:	4798      	blx	r3
	mDevice->writeRegister( DolbyDecoder_STA310::INT2, DolbyDecoder_STA310::RST | DolbyDecoder_STA310::LCK );
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6858      	ldr	r0, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	3318      	adds	r3, #24
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2230      	movs	r2, #48	; 0x30
 80021b4:	2108      	movs	r1, #8
 80021b6:	4798      	blx	r3
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_ZN19DolbyDecoder_STA31013configureSyncEv>:

void
DolbyDecoder_STA310::configureSync() {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	// Only 1 packet needed to synchronize stream
	mDevice->writeRegister( DolbyDecoder_STA310::PACKET_LOCK, 0 );
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6858      	ldr	r0, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3318      	adds	r3, #24
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2200      	movs	r2, #0
 80021d8:	214f      	movs	r1, #79	; 0x4f
 80021da:	4798      	blx	r3

	// Only 1 packet for synchronization lock
	mDevice->writeRegister( DolbyDecoder_STA310::SYNC_LOCK, 0 );
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6858      	ldr	r0, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3318      	adds	r3, #24
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2200      	movs	r2, #0
 80021ec:	2153      	movs	r1, #83	; 0x53
 80021ee:	4798      	blx	r3

	// Disable only decoding one particular audio stream (i.e decode them all)
	mDevice->writeRegister( DolbyDecoder_STA310::ID_EN, 0 );
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6858      	ldr	r0, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3318      	adds	r3, #24
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2200      	movs	r2, #0
 8002200:	2150      	movs	r1, #80	; 0x50
 8002202:	4798      	blx	r3

	// Should be ignored if the ID_EN is set to 0, but also set ID of channel to 0
	mDevice->writeRegister( DolbyDecoder_STA310::ID, 0 );
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6858      	ldr	r0, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3318      	adds	r3, #24
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2200      	movs	r2, #0
 8002214:	2151      	movs	r1, #81	; 0x51
 8002216:	4798      	blx	r3

	// Should be ignored if the ID_EN is set to 0, but also set ID extended to 0
	mDevice->writeRegister( DolbyDecoder_STA310::ID_EXT, 0 );
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6858      	ldr	r0, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	3318      	adds	r3, #24
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2200      	movs	r2, #0
 8002228:	2152      	movs	r1, #82	; 0x52
 800222a:	4798      	blx	r3

}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <_ZN19DolbyDecoder_STA31016configureDecoderEv>:

void
DolbyDecoder_STA310::configureDecoder() {
 8002234:	b5b0      	push	{r4, r5, r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	// Set for SPDIF data format
	mDevice->writeRegister( DolbyDecoder_STA310::STREAM_SEL, 5 );
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6858      	ldr	r0, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3318      	adds	r3, #24
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2205      	movs	r2, #5
 800224c:	214c      	movs	r1, #76	; 0x4c
 800224e:	4798      	blx	r3

	// Set for Dolby Digital
	mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, 0 );
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6858      	ldr	r0, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3318      	adds	r3, #24
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	214d      	movs	r1, #77	; 0x4d
 8002262:	4798      	blx	r3
	//mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, 0 );

	// Beep
	//mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, 7 );

	if ( mEventHandler ) {
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d02d      	beq.n	80022c8 <_ZN19DolbyDecoder_STA31016configureDecoderEv+0x94>
		mEventHandler->onAlgorithmChange( std::string( "AC3" ) );
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68dd      	ldr	r5, [r3, #12]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	330c      	adds	r3, #12
 8002278:	681c      	ldr	r4, [r3, #0]
 800227a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227e:	4618      	mov	r0, r3
 8002280:	f008 fa0f 	bl	800a6a2 <_ZNSaIcEC1Ev>
 8002284:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	4910      	ldr	r1, [pc, #64]	; (80022d0 <_ZN19DolbyDecoder_STA31016configureDecoderEv+0x9c>)
 800228e:	4618      	mov	r0, r3
 8002290:	f008 faf2 	bl	800a878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	4619      	mov	r1, r3
 800229a:	4628      	mov	r0, r5
 800229c:	47a0      	blx	r4
 800229e:	f107 030c 	add.w	r3, r7, #12
 80022a2:	4618      	mov	r0, r3
 80022a4:	f008 fa73 	bl	800a78e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80022a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ac:	4618      	mov	r0, r3
 80022ae:	f008 f9f9 	bl	800a6a4 <_ZNSaIcED1Ev>
		mEventHandler->onSamplingRateChange( 48000 );
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3308      	adds	r3, #8
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f64b 3180 	movw	r1, #48000	; 0xbb80
 80022c4:	4610      	mov	r0, r2
 80022c6:	4798      	blx	r3
	}
}
 80022c8:	bf00      	nop
 80022ca:	3728      	adds	r7, #40	; 0x28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bdb0      	pop	{r4, r5, r7, pc}
 80022d0:	0800b48c 	.word	0x0800b48c

080022d4 <_ZN19DolbyDecoder_STA31014configureSPDIFEv>:

void
DolbyDecoder_STA310::configureSPDIF() {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	// Configure the use of the SPDIF input and serial
	mDevice->writeRegister( DolbyDecoder_STA310::SIN_SETUP, 11 );
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6858      	ldr	r0, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3318      	adds	r3, #24
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	220b      	movs	r2, #11
 80022ec:	210c      	movs	r1, #12
 80022ee:	4798      	blx	r3

	// Must be set to 2 for SPDIF
	mDevice->writeRegister( DolbyDecoder_STA310::CAN_SETUP, 0 );
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6858      	ldr	r0, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3318      	adds	r3, #24
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2200      	movs	r2, #0
 8002300:	210d      	movs	r1, #13
 8002302:	4798      	blx	r3
	//mDevice->writeRegister( DolbyDecoder_STA310::CAN_SETUP, 0 );

	// Set up the PLL PCMCLK, PCMCLK FROM SPDIF, SYS CLOCK FROM PLL/2
	mDevice->writeRegister( DolbyDecoder_STA310::PLL_CTRL, 30 );
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6858      	ldr	r0, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3318      	adds	r3, #24
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	221e      	movs	r2, #30
 8002314:	2112      	movs	r1, #18
 8002316:	4798      	blx	r3
	// 11 110 = PLL/2 - SPDIF
	// 32 + 16 + 8 + 4


	// Enable auto detection on the stream
	mDevice->writeRegister( DolbyDecoder_STA310::AUTODETECT_ENA, 1 );
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6858      	ldr	r0, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3318      	adds	r3, #24
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2201      	movs	r2, #1
 8002328:	21e0      	movs	r1, #224	; 0xe0
 800232a:	4798      	blx	r3

	// Set SPDIF auto-detection sensitivity
	mDevice->writeRegister( DolbyDecoder_STA310::AUTODETECT_SENS, 0 );
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6858      	ldr	r0, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3318      	adds	r3, #24
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2200      	movs	r2, #0
 800233c:	21e1      	movs	r1, #225	; 0xe1
 800233e:	4798      	blx	r3
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <_ZN19DolbyDecoder_STA31012configureAC3Ev>:

void
DolbyDecoder_STA310::configureAC3() {
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	// Enable LFE
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DECODE_LFE, 1 );
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6858      	ldr	r0, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3318      	adds	r3, #24
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2201      	movs	r2, #1
 8002360:	2168      	movs	r1, #104	; 0x68
 8002362:	4798      	blx	r3

	// Configure for line out or spreakers
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_COMP_MOD, 2 );
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6858      	ldr	r0, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3318      	adds	r3, #24
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2202      	movs	r2, #2
 8002374:	2169      	movs	r1, #105	; 0x69
 8002376:	4798      	blx	r3

	// Full dynamic range for loud sounds
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_HDR, 0 );
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6858      	ldr	r0, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	3318      	adds	r3, #24
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	216a      	movs	r1, #106	; 0x6a
 800238a:	4798      	blx	r3

	// Don't boost low signals
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_LDR, 0 );
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6858      	ldr	r0, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3318      	adds	r3, #24
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2200      	movs	r2, #0
 800239c:	216b      	movs	r1, #107	; 0x6b
 800239e:	4798      	blx	r3

	// Mute audio output if stream errors are detected
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_RPC, 0 );
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6858      	ldr	r0, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3318      	adds	r3, #24
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2200      	movs	r2, #0
 80023b0:	216c      	movs	r1, #108	; 0x6c
 80023b2:	4798      	blx	r3

	// Karaoke aware
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_KARAOKE, 0 );
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6858      	ldr	r0, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3318      	adds	r3, #24
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2200      	movs	r2, #0
 80023c4:	216d      	movs	r1, #109	; 0x6d
 80023c6:	4798      	blx	r3

	// Output dual mode streams as stereo
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DUALMODE, 0 );
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6858      	ldr	r0, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3318      	adds	r3, #24
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	216e      	movs	r1, #110	; 0x6e
 80023da:	4798      	blx	r3

	// Set for a 5.1 downmix - this is useful to change if certain speakers are missing
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DOWNMIX, 7 );
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6858      	ldr	r0, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3318      	adds	r3, #24
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2207      	movs	r2, #7
 80023ec:	216f      	movs	r1, #111	; 0x6f
 80023ee:	4798      	blx	r3
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <_ZN19DolbyDecoder_STA31017configureAudioPLLEv>:

void
DolbyDecoder_STA310::configureAudioPLL() {
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	// Our DAC supports 384*FS, so nothing to do here
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <_ZN19DolbyDecoder_STA3109softResetEv>:

void
DolbyDecoder_STA310::softReset() {
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
	mInitialized = false;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	721a      	strb	r2, [r3, #8]

	// Perform soft mute on incoming framers
	mDevice->writeRegister( DolbyDecoder_STA310::SOFT_MUTE, 1 );
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6858      	ldr	r0, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3318      	adds	r3, #24
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2201      	movs	r2, #1
 8002428:	2173      	movs	r1, #115	; 0x73
 800242a:	4798      	blx	r3

	// Perform soft reset
	mDevice->writeRegister( DolbyDecoder_STA310::SOFT_RESET, 1 );
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6858      	ldr	r0, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	3318      	adds	r3, #24
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2201      	movs	r2, #1
 800243c:	2110      	movs	r1, #16
 800243e:	4798      	blx	r3

	// Write magical breakpoint register
	mDevice->writeRegister( DolbyDecoder_STA310::BREAKPOINT, 8 );
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6858      	ldr	r0, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3318      	adds	r3, #24
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2208      	movs	r2, #8
 8002450:	212b      	movs	r1, #43	; 0x2b
 8002452:	4798      	blx	r3

	// Write clock command
	mDevice->writeRegister( DolbyDecoder_STA310::CLOCK_CMD, 0 );
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6858      	ldr	r0, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3318      	adds	r3, #24
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2200      	movs	r2, #0
 8002464:	213a      	movs	r1, #58	; 0x3a
 8002466:	4798      	blx	r3

	int attempts = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
	while ( attempts < 20 && !mInitialized ) {
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b13      	cmp	r3, #19
 8002470:	dc1d      	bgt.n	80024ae <_ZN19DolbyDecoder_STA3109softResetEv+0xa4>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	7a1b      	ldrb	r3, [r3, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d119      	bne.n	80024ae <_ZN19DolbyDecoder_STA3109softResetEv+0xa4>
		// We need to check for the device to say it's ready
		I2C_RESULT result = mDevice->readRegister( 0xff );
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	331c      	adds	r3, #28
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	21ff      	movs	r1, #255	; 0xff
 800248a:	4610      	mov	r0, r2
 800248c:	4798      	blx	r3
 800248e:	4603      	mov	r3, r0
 8002490:	827b      	strh	r3, [r7, #18]
		if ( result == 1 ) {
 8002492:	8a7b      	ldrh	r3, [r7, #18]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d103      	bne.n	80024a0 <_ZN19DolbyDecoder_STA3109softResetEv+0x96>
			// Device is ready
			mInitialized = true;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	721a      	strb	r2, [r3, #8]
 800249e:	e7e5      	b.n	800246c <_ZN19DolbyDecoder_STA3109softResetEv+0x62>
		} else {
			attempts++;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3301      	adds	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
			// if it's not ready, let's wait 5ms and try again
			osDelay( 10 );
 80024a6:	200a      	movs	r0, #10
 80024a8:	f005 fcea 	bl	8007e80 <osDelay>
	while ( attempts < 20 && !mInitialized ) {
 80024ac:	e7de      	b.n	800246c <_ZN19DolbyDecoder_STA3109softResetEv+0x62>
		}
	}

	if ( !mInitialized ) {
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7a1b      	ldrb	r3, [r3, #8]
 80024b2:	f083 0301 	eor.w	r3, r3, #1
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <_ZN19DolbyDecoder_STA3109softResetEv+0xb6>
		// this is an error condition we should deal with
		int i;
		i = 10;
 80024bc:	230a      	movs	r3, #10
 80024be:	60fb      	str	r3, [r7, #12]
	}
}
 80024c0:	bf00      	nop
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_ZN19DolbyDecoder_STA31017checkForInterruptEv>:

void
DolbyDecoder_STA310::checkForInterrupt() {
 80024c8:	b5b0      	push	{r4, r5, r7, lr}
 80024ca:	b09e      	sub	sp, #120	; 0x78
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	if ( !HAL_GPIO_ReadPin ( DECODER_IRQ_GPIO_Port, DECODER_IRQ_Pin ) ) {
 80024d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024d4:	4890      	ldr	r0, [pc, #576]	; (8002718 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x250>)
 80024d6:	f002 f88f 	bl	80045f8 <HAL_GPIO_ReadPin>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf0c      	ite	eq
 80024e0:	2301      	moveq	r3, #1
 80024e2:	2300      	movne	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 81e4 	beq.w	80028b4 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3ec>
		// IRQ
		int i;
		i = 1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	677b      	str	r3, [r7, #116]	; 0x74
		I2C_RESULT int1 = mDevice->readRegister( DolbyDecoder_STA310::INT1_RES );
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	331c      	adds	r3, #28
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2109      	movs	r1, #9
 8002500:	4610      	mov	r0, r2
 8002502:	4798      	blx	r3
 8002504:	4603      	mov	r3, r0
 8002506:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		I2C_RESULT int2 = mDevice->readRegister( DolbyDecoder_STA310::INT2_RES );
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	331c      	adds	r3, #28
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	210a      	movs	r1, #10
 800251a:	4610      	mov	r0, r2
 800251c:	4798      	blx	r3
 800251e:	4603      	mov	r3, r0
 8002520:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		if ( int1 & ERR ) {
 8002524:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00e      	beq.n	800254e <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x86>
			// SYN
			I2C_RESULT errorReg = mDevice->readRegister( DolbyDecoder_STA310::ERROR );
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	331c      	adds	r3, #28
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	210f      	movs	r1, #15
 8002540:	4610      	mov	r0, r2
 8002542:	4798      	blx	r3
 8002544:	4603      	mov	r3, r0
 8002546:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

			i = 3;
 800254a:	2303      	movs	r3, #3
 800254c:	677b      	str	r3, [r7, #116]	; 0x74
		}
		if ( int1 & HDR ) {
 800254e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d028      	beq.n	80025ac <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0xe4>
			 I2C_RESULT ac3Status = mDevice->readRegister( DolbyDecoder_STA310::AC3_STATUS_1 );
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	331c      	adds	r3, #28
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2177      	movs	r1, #119	; 0x77
 800256a:	4610      	mov	r0, r2
 800256c:	4798      	blx	r3
 800256e:	4603      	mov	r3, r0
 8002570:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			 I2C_RESULT head3 = mDevice->readRegister( DolbyDecoder_STA310::HEAD_3 );
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	331c      	adds	r3, #28
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2143      	movs	r1, #67	; 0x43
 8002584:	4610      	mov	r0, r2
 8002586:	4798      	blx	r3
 8002588:	4603      	mov	r3, r0
 800258a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			 I2C_RESULT head4 = mDevice->readRegister( DolbyDecoder_STA310::HEAD_4 );
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	331c      	adds	r3, #28
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2142      	movs	r1, #66	; 0x42
 800259e:	4610      	mov	r0, r2
 80025a0:	4798      	blx	r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

			 i = 2;
 80025a8:	2302      	movs	r3, #2
 80025aa:	677b      	str	r3, [r7, #116]	; 0x74
		}
		if ( int1 & SFR ) {
 80025ac:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00e      	beq.n	80025d6 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x10e>
			I2C_RESULT freq = mDevice->readRegister( DolbyDecoder_STA310::FREQ );
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	331c      	adds	r3, #28
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2105      	movs	r1, #5
 80025c8:	4610      	mov	r0, r2
 80025ca:	4798      	blx	r3
 80025cc:	4603      	mov	r3, r0
 80025ce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			i = 1;
 80025d2:	2301      	movs	r3, #1
 80025d4:	677b      	str	r3, [r7, #116]	; 0x74
		}

		if ( ( int2 & LCK ) > 0 || ( int2 & RST ) > 0 ) {
 80025d6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b00      	cmp	r3, #0
 80025e0:	dc06      	bgt.n	80025f0 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x128>
 80025e2:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f340 8160 	ble.w	80028b0 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3e8>
			 i = 3;
 80025f0:	2303      	movs	r3, #3
 80025f2:	677b      	str	r3, [r7, #116]	; 0x74
			 mRunning = false;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	729a      	strb	r2, [r3, #10]

			 I2C_RESULT decodeSel = mDevice->readRegister( DolbyDecoder_STA310::DECODE_SEL );
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	331c      	adds	r3, #28
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	214d      	movs	r1, #77	; 0x4d
 800260a:	4610      	mov	r0, r2
 800260c:	4798      	blx	r3
 800260e:	4603      	mov	r3, r0
 8002610:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			 I2C_RESULT streamSel = mDevice->readRegister( DolbyDecoder_STA310::STREAM_SEL );
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	331c      	adds	r3, #28
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	214c      	movs	r1, #76	; 0x4c
 8002624:	4610      	mov	r0, r2
 8002626:	4798      	blx	r3
 8002628:	4603      	mov	r3, r0
 800262a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			 I2C_RESULT freq = mDevice->readRegister( 0x05 );
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	331c      	adds	r3, #28
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2105      	movs	r1, #5
 800263e:	4610      	mov	r0, r2
 8002640:	4798      	blx	r3
 8002642:	4603      	mov	r3, r0
 8002644:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

			 if ( mEventHandler ) {
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d074      	beq.n	800273a <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x272>
				 switch ( freq ) {
 8002650:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002654:	2b10      	cmp	r3, #16
 8002656:	d870      	bhi.n	800273a <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x272>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x198>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	080026a5 	.word	0x080026a5
 8002664:	080026bd 	.word	0x080026bd
 8002668:	080026d5 	.word	0x080026d5
 800266c:	0800273b 	.word	0x0800273b
 8002670:	080026ed 	.word	0x080026ed
 8002674:	08002703 	.word	0x08002703
 8002678:	0800273b 	.word	0x0800273b
 800267c:	0800273b 	.word	0x0800273b
 8002680:	0800273b 	.word	0x0800273b
 8002684:	0800273b 	.word	0x0800273b
 8002688:	0800273b 	.word	0x0800273b
 800268c:	0800273b 	.word	0x0800273b
 8002690:	0800273b 	.word	0x0800273b
 8002694:	0800273b 	.word	0x0800273b
 8002698:	0800273b 	.word	0x0800273b
 800269c:	0800273b 	.word	0x0800273b
 80026a0:	08002725 	.word	0x08002725
				 	 case 0:
				 		 mEventHandler->onSamplingRateChange( 48000 );
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3308      	adds	r3, #8
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f64b 3180 	movw	r1, #48000	; 0xbb80
 80026b6:	4610      	mov	r0, r2
 80026b8:	4798      	blx	r3
				 		 break;
 80026ba:	e03e      	b.n	800273a <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x272>
				 	 case 1:
				 		 mEventHandler->onSamplingRateChange( 44100 );
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3308      	adds	r3, #8
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f64a 4144 	movw	r1, #44100	; 0xac44
 80026ce:	4610      	mov	r0, r2
 80026d0:	4798      	blx	r3
				 		 break;
 80026d2:	e032      	b.n	800273a <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x272>
				 	 case 2:
				 		 mEventHandler->onSamplingRateChange( 32000 );
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3308      	adds	r3, #8
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 80026e6:	4610      	mov	r0, r2
 80026e8:	4798      	blx	r3
				 		 break;
 80026ea:	e026      	b.n	800273a <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x272>
				 	 case 4:
				 		 mEventHandler->onSamplingRateChange( 96000 );
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3308      	adds	r3, #8
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4908      	ldr	r1, [pc, #32]	; (800271c <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x254>)
 80026fc:	4610      	mov	r0, r2
 80026fe:	4798      	blx	r3
				 		 break;
 8002700:	e01b      	b.n	800273a <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x272>
				 	 case 5:
				 		 mEventHandler->onSamplingRateChange( 88200 );
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3308      	adds	r3, #8
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4903      	ldr	r1, [pc, #12]	; (8002720 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x258>)
 8002712:	4610      	mov	r0, r2
 8002714:	4798      	blx	r3
				 		 break;
 8002716:	e010      	b.n	800273a <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x272>
 8002718:	40011000 	.word	0x40011000
 800271c:	00017700 	.word	0x00017700
 8002720:	00015888 	.word	0x00015888
				 	 case 16:
				 		 mEventHandler->onSamplingRateChange( 192000 );
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3308      	adds	r3, #8
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4962      	ldr	r1, [pc, #392]	; (80028bc <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3f4>)
 8002734:	4610      	mov	r0, r2
 8002736:	4798      	blx	r3
				 		 break;
 8002738:	bf00      	nop
				 }
			}

			softReset();
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fe65 	bl	800240a <_ZN19DolbyDecoder_STA3109softResetEv>

			if ( !mInitialized ) {
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7a1b      	ldrb	r3, [r3, #8]
 8002744:	f083 0301 	eor.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x28a>
				int a;
				a = 5;
 800274e:	2305      	movs	r3, #5
 8002750:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			configureInterrupts();
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff fd18 	bl	8002188 <_ZN19DolbyDecoder_STA31019configureInterruptsEv>

			//mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, decodeSel );
			//mDevice->writeRegister( DolbyDecoder_STA310::STREAM_SEL, streamSel );

			enableAudioPLL();
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff fc53 	bl	8002004 <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>

			if ( streamSel == 5 && decodeSel == 0 ) {
 800275e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002762:	2b05      	cmp	r3, #5
 8002764:	d12e      	bne.n	80027c4 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x2fc>
 8002766:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800276a:	2b00      	cmp	r3, #0
 800276c:	d12a      	bne.n	80027c4 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x2fc>
				// this is a dolby digital stream
				if ( mEventHandler ) {
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d022      	beq.n	80027bc <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x2f4>
					mEventHandler->onAlgorithmChange( std::string( "AC3" ) );
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68dd      	ldr	r5, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	681c      	ldr	r4, [r3, #0]
 8002784:	f107 0320 	add.w	r3, r7, #32
 8002788:	4618      	mov	r0, r3
 800278a:	f007 ff8a 	bl	800a6a2 <_ZNSaIcEC1Ev>
 800278e:	f107 0220 	add.w	r2, r7, #32
 8002792:	f107 0308 	add.w	r3, r7, #8
 8002796:	494a      	ldr	r1, [pc, #296]	; (80028c0 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3f8>)
 8002798:	4618      	mov	r0, r3
 800279a:	f008 f86d 	bl	800a878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800279e:	f107 0308 	add.w	r3, r7, #8
 80027a2:	4619      	mov	r1, r3
 80027a4:	4628      	mov	r0, r5
 80027a6:	47a0      	blx	r4
 80027a8:	f107 0308 	add.w	r3, r7, #8
 80027ac:	4618      	mov	r0, r3
 80027ae:	f007 ffee 	bl	800a78e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80027b2:	f107 0320 	add.w	r3, r7, #32
 80027b6:	4618      	mov	r0, r3
 80027b8:	f007 ff74 	bl	800a6a4 <_ZNSaIcED1Ev>
				}

				configureAC3();
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff fdc3 	bl	8002348 <_ZN19DolbyDecoder_STA31012configureAC3Ev>
 80027c2:	e061      	b.n	8002888 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3c0>
			} else if ( streamSel == 3 && decodeSel == 6 ) {
 80027c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d12e      	bne.n	800282a <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x362>
 80027cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80027d0:	2b06      	cmp	r3, #6
 80027d2:	d12a      	bne.n	800282a <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x362>
				// This is a DTS stream
				if ( mEventHandler ) {
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d022      	beq.n	8002822 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x35a>
					mEventHandler->onAlgorithmChange( std::string( "DTS" ) );
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68dd      	ldr	r5, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
 80027e8:	681c      	ldr	r4, [r3, #0]
 80027ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027ee:	4618      	mov	r0, r3
 80027f0:	f007 ff57 	bl	800a6a2 <_ZNSaIcEC1Ev>
 80027f4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80027f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027fc:	4931      	ldr	r1, [pc, #196]	; (80028c4 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3fc>)
 80027fe:	4618      	mov	r0, r3
 8002800:	f008 f83a 	bl	800a878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002808:	4619      	mov	r1, r3
 800280a:	4628      	mov	r0, r5
 800280c:	47a0      	blx	r4
 800280e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002812:	4618      	mov	r0, r3
 8002814:	f007 ffbb 	bl	800a78e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002818:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800281c:	4618      	mov	r0, r3
 800281e:	f007 ff41 	bl	800a6a4 <_ZNSaIcED1Ev>
				}

				configureAC3();
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff fd90 	bl	8002348 <_ZN19DolbyDecoder_STA31012configureAC3Ev>
 8002828:	e02e      	b.n	8002888 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3c0>
			} else if ( streamSel == 3 && decodeSel == 3 ) {
 800282a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800282e:	2b03      	cmp	r3, #3
 8002830:	d12a      	bne.n	8002888 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3c0>
 8002832:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002836:	2b03      	cmp	r3, #3
 8002838:	d126      	bne.n	8002888 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3c0>
				// This is PCM
				if ( mEventHandler ) {
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d022      	beq.n	8002888 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3c0>
					mEventHandler->onAlgorithmChange( std::string( "PCM" ) );
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68dd      	ldr	r5, [r3, #12]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	330c      	adds	r3, #12
 800284e:	681c      	ldr	r4, [r3, #0]
 8002850:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002854:	4618      	mov	r0, r3
 8002856:	f007 ff24 	bl	800a6a2 <_ZNSaIcEC1Ev>
 800285a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800285e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002862:	4919      	ldr	r1, [pc, #100]	; (80028c8 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x400>)
 8002864:	4618      	mov	r0, r3
 8002866:	f008 f807 	bl	800a878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800286a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800286e:	4619      	mov	r1, r3
 8002870:	4628      	mov	r0, r5
 8002872:	47a0      	blx	r4
 8002874:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002878:	4618      	mov	r0, r3
 800287a:	f007 ff88 	bl	800a78e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800287e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002882:	4618      	mov	r0, r3
 8002884:	f007 ff0e 	bl	800a6a4 <_ZNSaIcED1Ev>
				}
			}

			mute( false );
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3310      	adds	r3, #16
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2100      	movs	r1, #0
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
			run();
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	3318      	adds	r3, #24
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
			play();
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3314      	adds	r3, #20
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2101      	movs	r1, #1
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
		}
		i = 2;
 80028b0:	2302      	movs	r3, #2
 80028b2:	677b      	str	r3, [r7, #116]	; 0x74
	}
}
 80028b4:	bf00      	nop
 80028b6:	3778      	adds	r7, #120	; 0x78
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bdb0      	pop	{r4, r5, r7, pc}
 80028bc:	0002ee00 	.word	0x0002ee00
 80028c0:	0800b48c 	.word	0x0800b48c
 80028c4:	0800b490 	.word	0x0800b490
 80028c8:	0800b494 	.word	0x0800b494

080028cc <_ZN19DolbyDecoder_STA31011checkFormatEv>:

void
DolbyDecoder_STA310::checkFormat() {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	 I2C_RESULT decodeSel = mDevice->readRegister( DolbyDecoder_STA310::DECODE_SEL );
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	331c      	adds	r3, #28
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	214d      	movs	r1, #77	; 0x4d
 80028e4:	4610      	mov	r0, r2
 80028e6:	4798      	blx	r3
 80028e8:	4603      	mov	r3, r0
 80028ea:	81fb      	strh	r3, [r7, #14]
	 I2C_RESULT streamSel = mDevice->readRegister( DolbyDecoder_STA310::STREAM_SEL );
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	331c      	adds	r3, #28
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	214c      	movs	r1, #76	; 0x4c
 80028fc:	4610      	mov	r0, r2
 80028fe:	4798      	blx	r3
 8002900:	4603      	mov	r3, r0
 8002902:	81bb      	strh	r3, [r7, #12]
	// I2C_RESULT dolbyStatus1 = mDevice->readRegister( DolbyDecoder_STA310::DOLBY_STATUS_1 );
	// I2C_RESULT ac3Status = mDevice->readRegister( DolbyDecoder_STA310::AC3_STATUS_1 );
	 I2C_RESULT head3 = mDevice->readRegister( DolbyDecoder_STA310::HEAD_3 );
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	331c      	adds	r3, #28
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2143      	movs	r1, #67	; 0x43
 8002914:	4610      	mov	r0, r2
 8002916:	4798      	blx	r3
 8002918:	4603      	mov	r3, r0
 800291a:	817b      	strh	r3, [r7, #10]
	 I2C_RESULT freq = mDevice->readRegister( 0x05 );
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	331c      	adds	r3, #28
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2105      	movs	r1, #5
 800292c:	4610      	mov	r0, r2
 800292e:	4798      	blx	r3
 8002930:	4603      	mov	r3, r0
 8002932:	813b      	strh	r3, [r7, #8]
	// I2C_RESULT spdif_status = mDevice->readRegister( 0x61 );
	// I2C_RESULT spdif_status2 = mDevice->readRegister( 0x7f );
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <_ZNK7Encoder12getLastValueEv>:
public:
	Encoder();
	virtual ~Encoder();

	virtual ENCODER_VALUE checkEncoder( uint32_t value );
	virtual ENCODER_VALUE getLastValue() const { return mLastTimerValue; }
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
	...

08002954 <_ZN7EncoderC1Ev>:
 *      Author: duane
 */

#include "Encoder.h"

Encoder::Encoder() : mLastTimerValue( 0 ) {
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	4a05      	ldr	r2, [pc, #20]	; (8002974 <_ZN7EncoderC1Ev+0x20>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	605a      	str	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	0800b63c 	.word	0x0800b63c

08002978 <_ZN7EncoderD1Ev>:

Encoder::~Encoder() {
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <_ZN7EncoderD1Ev+0x1c>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	0800b63c 	.word	0x0800b63c

08002998 <_ZN7EncoderD0Ev>:
Encoder::~Encoder() {
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
}
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ffe9 	bl	8002978 <_ZN7EncoderD1Ev>
 80029a6:	2108      	movs	r1, #8
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f007 fe64 	bl	800a676 <_ZdlPvj>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_ZN7Encoder12checkEncoderEm>:

ENCODER_VALUE
Encoder::checkEncoder( uint32_t value ) {
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
	if ( mLastTimerValue < 50 && value > 65500 ) {
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b31      	cmp	r3, #49	; 0x31
 80029c8:	d809      	bhi.n	80029de <_ZN7Encoder12checkEncoderEm+0x26>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d904      	bls.n	80029de <_ZN7Encoder12checkEncoderEm+0x26>
		// the value rolled backwards from 0 up to 64000, so this is a nudge down
		mLastTimerValue = value;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	605a      	str	r2, [r3, #4]
		return ENCODER_DECREASE;
 80029da:	2301      	movs	r3, #1
 80029dc:	e02e      	b.n	8002a3c <_ZN7Encoder12checkEncoderEm+0x84>
	} else if ( mLastTimerValue > 65500 && value < 50 ) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d907      	bls.n	80029fa <_ZN7Encoder12checkEncoderEm+0x42>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b31      	cmp	r3, #49	; 0x31
 80029ee:	d804      	bhi.n	80029fa <_ZN7Encoder12checkEncoderEm+0x42>
		// the value rolled over the top, back to 0, so this is an increase
		mLastTimerValue = value;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	605a      	str	r2, [r3, #4]
		return ENCODER_INCREASE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e020      	b.n	8002a3c <_ZN7Encoder12checkEncoderEm+0x84>
	} else if ( value > mLastTimerValue && ( value - mLastTimerValue ) > 3 ) {
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d90a      	bls.n	8002a1a <_ZN7Encoder12checkEncoderEm+0x62>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d904      	bls.n	8002a1a <_ZN7Encoder12checkEncoderEm+0x62>
		mLastTimerValue = value;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	605a      	str	r2, [r3, #4]
		// increase
		return ENCODER_INCREASE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e010      	b.n	8002a3c <_ZN7Encoder12checkEncoderEm+0x84>
	} else if ( value < mLastTimerValue && ( mLastTimerValue - value ) > 3  ) {
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d20a      	bcs.n	8002a3a <_ZN7Encoder12checkEncoderEm+0x82>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d904      	bls.n	8002a3a <_ZN7Encoder12checkEncoderEm+0x82>
		mLastTimerValue = value;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	605a      	str	r2, [r3, #4]
		return ENCODER_DECREASE;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <_ZN7Encoder12checkEncoderEm+0x84>
	} else {
		return ENCODER_NOCHANGE;
 8002a3a:	2302      	movs	r3, #2
	}
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
	...

08002a48 <_ZN3I2CC1ERKS_>:
class I2C {
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
 8002a52:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <_ZN3I2CC1ERKS_+0x3c>)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	1d10      	adds	r0, r2, #4
 8002a5e:	3304      	adds	r3, #4
 8002a60:	2254      	movs	r2, #84	; 0x54
 8002a62:	4619      	mov	r1, r3
 8002a64:	f007 ffb2 	bl	800a9cc <memcpy>
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	f102 0458 	add.w	r4, r2, #88	; 0x58
 8002a70:	3358      	adds	r3, #88	; 0x58
 8002a72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd90      	pop	{r4, r7, pc}
 8002a82:	bf00      	nop
 8002a84:	0800b654 	.word	0x0800b654

08002a88 <_ZN10I2C_DeviceC1E3I2Ch>:
	I2C mBus;
	I2C_ADDR mAddr;
public:
	I2C_Device( I2C bus ) : mBus( bus ), mAddr( 0 ) {}
	I2C_Device( I2C_ADDR addr );
	I2C_Device( I2C bus, I2C_ADDR addr ) : mBus( bus), mAddr( addr ) {}
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	4613      	mov	r3, r2
 8002a94:	71fb      	strb	r3, [r7, #7]
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <_ZN10I2C_DeviceC1E3I2Ch+0x34>)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ffd0 	bl	8002a48 <_ZN3I2CC1ERKS_>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	79fa      	ldrb	r2, [r7, #7]
 8002aac:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	0800b664 	.word	0x0800b664

08002ac0 <_ZN3I2CC1E17I2C_HandleTypeDef>:
#include "I2CDevice.h"
#include <memory>

#define I2C_ERROR -1

I2C::I2C( I2C_HandleTypeDef bus ) : mI2C( bus ) {
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	f107 0014 	add.w	r0, r7, #20
 8002ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002ad2:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <_ZN3I2CC1E17I2C_HandleTypeDef+0x48>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3304      	adds	r3, #4
 8002adc:	f107 0114 	add.w	r1, r7, #20
 8002ae0:	2254      	movs	r2, #84	; 0x54
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f007 ff72 	bl	800a9cc <memcpy>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3358      	adds	r3, #88	; 0x58
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub

}
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b02:	b004      	add	sp, #16
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	0800b654 	.word	0x0800b654

08002b0c <_ZN3I2CD1Ev>:

I2C::~I2C() {
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <_ZN3I2CD1Ev+0x1c>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	0800b654 	.word	0x0800b654

08002b2c <_ZN3I2CD0Ev>:
I2C::~I2C() {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
}
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ffe9 	bl	8002b0c <_ZN3I2CD1Ev>
 8002b3a:	2168      	movs	r1, #104	; 0x68
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f007 fd9a 	bl	800a676 <_ZdlPvj>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_ZN3I2C8readByteEh>:

uint8_t
I2C::readByte( I2C_ADDR addr ) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	70fb      	strb	r3, [r7, #3]
	int ret = HAL_I2C_Master_Receive( &mI2C, addr, mBuffer, 1, HAL_MAX_DELAY );
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	1d18      	adds	r0, r3, #4
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	b299      	uxth	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8002b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f001 ffb5 	bl	8004adc <HAL_I2C_Master_Receive>
 8002b72:	4603      	mov	r3, r0
 8002b74:	60fb      	str	r3, [r7, #12]
	if ( ret == HAL_OK ) {
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d103      	bne.n	8002b84 <_ZN3I2C8readByteEh+0x38>
		return mBuffer[ 0 ];
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b82:	e000      	b.n	8002b86 <_ZN3I2C8readByteEh+0x3a>
	} else {
		return 0;
 8002b84:	2300      	movs	r3, #0
	}
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <_ZN3I2C9writeByteEhh>:

bool
I2C::writeByte( I2C_ADDR addr, uint8_t data ) {
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af02      	add	r7, sp, #8
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	460b      	mov	r3, r1
 8002b98:	70fb      	strb	r3, [r7, #3]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	70bb      	strb	r3, [r7, #2]
	int ret = HAL_I2C_Master_Transmit( &mI2C, addr, &data, 1, HAL_MAX_DELAY );
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	1d18      	adds	r0, r3, #4
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	b299      	uxth	r1, r3
 8002ba6:	1cba      	adds	r2, r7, #2
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f001 fe96 	bl	80048e0 <HAL_I2C_Master_Transmit>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	60fb      	str	r3, [r7, #12]
	return ( ret == HAL_OK );
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf0c      	ite	eq
 8002bbe:	2301      	moveq	r3, #1
 8002bc0:	2300      	movne	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <_ZN3I2C9writeDataEhPhh>:

bool
I2C::writeData( I2C_ADDR addr, uint8_t *data, uint8_t size ) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	460b      	mov	r3, r1
 8002bda:	72fb      	strb	r3, [r7, #11]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	72bb      	strb	r3, [r7, #10]
	int ret = HAL_I2C_Master_Transmit( &mI2C, addr, data, size, HAL_MAX_DELAY );
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1d18      	adds	r0, r3, #4
 8002be4:	7afb      	ldrb	r3, [r7, #11]
 8002be6:	b299      	uxth	r1, r3
 8002be8:	7abb      	ldrb	r3, [r7, #10]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bf0:	9200      	str	r2, [sp, #0]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	f001 fe74 	bl	80048e0 <HAL_I2C_Master_Transmit>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	617b      	str	r3, [r7, #20]
	return ( ret == HAL_OK );
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <_ZN3I2C13writeRegisterEhhh>:

bool
I2C::writeRegister( I2C_ADDR addr, uint8_t reg, uint8_t value ) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af04      	add	r7, sp, #16
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	4608      	mov	r0, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	70fb      	strb	r3, [r7, #3]
 8002c22:	460b      	mov	r3, r1
 8002c24:	70bb      	strb	r3, [r7, #2]
 8002c26:	4613      	mov	r3, r2
 8002c28:	707b      	strb	r3, [r7, #1]
	int ret =  HAL_I2C_Mem_Write( &mI2C, addr, reg, 1, &value, sizeof( value ), HAL_MAX_DELAY );
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	1d18      	adds	r0, r3, #4
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	b299      	uxth	r1, r3
 8002c32:	78bb      	ldrb	r3, [r7, #2]
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c3a:	9302      	str	r3, [sp, #8]
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	1c7b      	adds	r3, r7, #1
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2301      	movs	r3, #1
 8002c46:	f002 f9a9 	bl	8004f9c <HAL_I2C_Mem_Write>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	60fb      	str	r3, [r7, #12]
	return ( ret == HAL_OK );
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <_ZN3I2C12readRegisterEhh>:

I2C_RESULT
I2C::readRegister( I2C_ADDR addr, uint8_t reg ) {
 8002c62:	b590      	push	{r4, r7, lr}
 8002c64:	b089      	sub	sp, #36	; 0x24
 8002c66:	af04      	add	r7, sp, #16
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	70fb      	strb	r3, [r7, #3]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	70bb      	strb	r3, [r7, #2]
	int ret =  HAL_I2C_Mem_Read( &mI2C, addr, reg, 1, mBuffer, 1, HAL_MAX_DELAY );
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	1d18      	adds	r0, r3, #4
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	b299      	uxth	r1, r3
 8002c7a:	78bb      	ldrb	r3, [r7, #2]
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3358      	adds	r3, #88	; 0x58
 8002c82:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002c86:	9402      	str	r4, [sp, #8]
 8002c88:	2401      	movs	r4, #1
 8002c8a:	9401      	str	r4, [sp, #4]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f002 fa7e 	bl	8005190 <HAL_I2C_Mem_Read>
 8002c94:	4603      	mov	r3, r0
 8002c96:	60fb      	str	r3, [r7, #12]
	if ( ret == HAL_OK ) {
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <_ZN3I2C12readRegisterEhh+0x46>
		return mBuffer[0];
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	e001      	b.n	8002cac <_ZN3I2C12readRegisterEhh+0x4a>
	} else {
		return I2C_ERROR;
 8002ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd90      	pop	{r4, r7, pc}

08002cb4 <_ZN3I2C14readRegister16Ehh>:

I2C_RESULT
I2C::readRegister16( I2C_ADDR addr, uint8_t reg ) {
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af04      	add	r7, sp, #16
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	70bb      	strb	r3, [r7, #2]
	int ret =  HAL_I2C_Mem_Read( &mI2C, addr, reg, 1, mBuffer, 2, HAL_MAX_DELAY );
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	1d18      	adds	r0, r3, #4
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	b299      	uxth	r1, r3
 8002ccc:	78bb      	ldrb	r3, [r7, #2]
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3358      	adds	r3, #88	; 0x58
 8002cd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002cd8:	9402      	str	r4, [sp, #8]
 8002cda:	2402      	movs	r4, #2
 8002cdc:	9401      	str	r4, [sp, #4]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f002 fa55 	bl	8005190 <HAL_I2C_Mem_Read>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	60fb      	str	r3, [r7, #12]
	if ( ret == HAL_OK ) {
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10f      	bne.n	8002d10 <_ZN3I2C14readRegister16Ehh+0x5c>
		uint16_t result = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	817b      	strh	r3, [r7, #10]
		result = ( (int16_t) mBuffer[0] ) << 8 | mBuffer[1];
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	b21a      	sxth	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002d04:	b21b      	sxth	r3, r3
 8002d06:	4313      	orrs	r3, r2
 8002d08:	b21b      	sxth	r3, r3
 8002d0a:	817b      	strh	r3, [r7, #10]
		return result;
 8002d0c:	897b      	ldrh	r3, [r7, #10]
 8002d0e:	e001      	b.n	8002d14 <_ZN3I2C14readRegister16Ehh+0x60>
	} else {
		return I2C_ERROR;
 8002d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd90      	pop	{r4, r7, pc}

08002d1c <_ZN3I2C10makeDeviceEh>:

I2C_Device *
I2C::makeDevice( I2C_ADDR addr ) {
 8002d1c:	b5b0      	push	{r4, r5, r7, lr}
 8002d1e:	b0ae      	sub	sp, #184	; 0xb8
 8002d20:	af12      	add	r7, sp, #72	; 0x48
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
	return new I2C_Device( mI2C, addr );
 8002d28:	687c      	ldr	r4, [r7, #4]
 8002d2a:	f107 0508 	add.w	r5, r7, #8
 8002d2e:	4668      	mov	r0, sp
 8002d30:	f104 0310 	add.w	r3, r4, #16
 8002d34:	2248      	movs	r2, #72	; 0x48
 8002d36:	4619      	mov	r1, r3
 8002d38:	f007 fe48 	bl	800a9cc <memcpy>
 8002d3c:	1d23      	adds	r3, r4, #4
 8002d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d40:	4628      	mov	r0, r5
 8002d42:	f7ff febd 	bl	8002ac0 <_ZN3I2CC1E17I2C_HandleTypeDef>
 8002d46:	f107 0408 	add.w	r4, r7, #8
 8002d4a:	2070      	movs	r0, #112	; 0x70
 8002d4c:	f007 fc95 	bl	800a67a <_Znwj>
 8002d50:	4603      	mov	r3, r0
 8002d52:	461d      	mov	r5, r3
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	461a      	mov	r2, r3
 8002d58:	4621      	mov	r1, r4
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	f7ff fe94 	bl	8002a88 <_ZN10I2C_DeviceC1E3I2Ch>
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fed1 	bl	8002b0c <_ZN3I2CD1Ev>
 8002d6a:	462b      	mov	r3, r5
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3770      	adds	r7, #112	; 0x70
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bdb0      	pop	{r4, r5, r7, pc}

08002d74 <_ZN10I2C_Device7setAddrEh>:

	virtual ~I2C_Device();

	virtual void setAddr( I2C_ADDR addr ) { mAddr = addr; }
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
	...

08002d94 <_ZN10I2C_DeviceD1Ev>:
I2C_Device::I2C_Device( I2C_ADDR addr ) : mAddr( addr ) {
	// TODO Auto-generated constructor stub

}

I2C_Device::~I2C_Device() {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <_ZN10I2C_DeviceD1Ev+0x24>)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3304      	adds	r3, #4
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff feb0 	bl	8002b0c <_ZN3I2CD1Ev>
	// TODO Auto-generated destructor stub
}
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	0800b664 	.word	0x0800b664

08002dbc <_ZN10I2C_DeviceD0Ev>:
I2C_Device::~I2C_Device() {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
}
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ffe5 	bl	8002d94 <_ZN10I2C_DeviceD1Ev>
 8002dca:	2170      	movs	r1, #112	; 0x70
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f007 fc52 	bl	800a676 <_ZdlPvj>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <_ZN10I2C_Device9writeByteEh>:

bool
I2C_Device::writeByte( uint8_t data ) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	70fb      	strb	r3, [r7, #3]
	return mBus.writeByte( mAddr, data );
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	1d18      	adds	r0, r3, #4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7ff feca 	bl	8002b8e <_ZN3I2C9writeByteEhh>
 8002dfa:	4603      	mov	r3, r0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <_ZN10I2C_Device13writeRegisterEhh>:

bool
I2C_Device::writeRegister( uint8_t reg, uint8_t value ) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	70fb      	strb	r3, [r7, #3]
 8002e10:	4613      	mov	r3, r2
 8002e12:	70bb      	strb	r3, [r7, #2]
	return mBus.writeRegister( mAddr, reg, value );
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	1d18      	adds	r0, r3, #4
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8002e1e:	78bb      	ldrb	r3, [r7, #2]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	f7ff fef5 	bl	8002c10 <_ZN3I2C13writeRegisterEhhh>
 8002e26:	4603      	mov	r3, r0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <_ZN10I2C_Device9writeDataEPhh>:

bool
I2C_Device::writeData( uint8_t *data, uint8_t size ) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	71fb      	strb	r3, [r7, #7]
	return mBus.writeData( mAddr, data, size );
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1d18      	adds	r0, r3, #4
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	f7ff febe 	bl	8002bcc <_ZN3I2C9writeDataEhPhh>
 8002e50:	4603      	mov	r3, r0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <_ZN10I2C_Device12readRegisterEh>:

I2C_RESULT
I2C_Device::readRegister( uint8_t reg ) {
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	70fb      	strb	r3, [r7, #3]
	return mBus.readRegister( mAddr, reg );
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	1d18      	adds	r0, r3, #4
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	4619      	mov	r1, r3
 8002e74:	f7ff fef5 	bl	8002c62 <_ZN3I2C12readRegisterEhh>
 8002e78:	4603      	mov	r3, r0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <_ZN10I2C_Device14readRegister16Eh>:

I2C_RESULT
I2C_Device::readRegister16( uint8_t reg ) {
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	70fb      	strb	r3, [r7, #3]
	return mBus.readRegister16( mAddr, reg );
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	1d18      	adds	r0, r3, #4
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f7ff ff0a 	bl	8002cb4 <_ZN3I2C14readRegister16Ehh>
 8002ea0:	4603      	mov	r3, r0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <_ZN10I2C_Device8readByteEv>:

uint8_t
I2C_Device::readByte() {
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
	return mBus.readByte( mAddr );
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	1d1a      	adds	r2, r3, #4
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	f7ff fe44 	bl	8002b4c <_ZN3I2C8readByteEh>
 8002ec4:	4603      	mov	r3, r0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <_ZN3LCD11sendCommandEh>:

#define LCD_DELAY 1


void
LCD::sendCommand( uint8_t command ) {
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (command&0xF0);
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	f023 030f 	bic.w	r3, r3, #15
 8002ee0:	73fb      	strb	r3, [r7, #15]
	data_l = ((command<<4)&0xF0);
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;	// en=1, rs=0
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	f043 030c 	orr.w	r3, r3, #12
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;	// en=0, rs=0
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	f043 0308 	orr.w	r3, r3, #8
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;	// en=1, rs=0
 8002efc:	7bbb      	ldrb	r3, [r7, #14]
 8002efe:	f043 030c 	orr.w	r3, r3, #12
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;	// en=0, rs=0
 8002f06:	7bbb      	ldrb	r3, [r7, #14]
 8002f08:	f043 0308 	orr.w	r3, r3, #8
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	72fb      	strb	r3, [r7, #11]

	mLCD->writeData( data_t, 4 );
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6858      	ldr	r0, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3314      	adds	r3, #20
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f107 0108 	add.w	r1, r7, #8
 8002f22:	2204      	movs	r2, #4
 8002f24:	4798      	blx	r3
	osDelay( LCD_DELAY );
 8002f26:	2001      	movs	r0, #1
 8002f28:	f004 ffaa 	bl	8007e80 <osDelay>
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <_ZN3LCD15enableBacklightEb>:

void
LCD::enableBacklight( bool enable  ) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
	if ( enable ) {
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <_ZN3LCD15enableBacklightEb+0x32>
		value = 0x08;
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	73fb      	strb	r3, [r7, #15]
		mLCD->writeData( &value, 1 );
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6858      	ldr	r0, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3314      	adds	r3, #20
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f107 010f 	add.w	r1, r7, #15
 8002f60:	2201      	movs	r2, #1
 8002f62:	4798      	blx	r3
	} else {
		mLCD->writeData( &value, 1 );
	}
}
 8002f64:	e00a      	b.n	8002f7c <_ZN3LCD15enableBacklightEb+0x48>
		mLCD->writeData( &value, 1 );
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6858      	ldr	r0, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	3314      	adds	r3, #20
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f107 010f 	add.w	r1, r7, #15
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4798      	blx	r3
}
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <_ZN3LCD9setCursorEhh>:
	sendCommand( 0x01 );
	osDelay( LCD_DELAY );
}

void
LCD::setCursor( uint8_t x, uint8_t y ) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	70fb      	strb	r3, [r7, #3]
 8002f90:	4613      	mov	r3, r2
 8002f92:	70bb      	strb	r3, [r7, #2]
	int i = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
	switch ( y ) {
 8002f98:	78bb      	ldrb	r3, [r7, #2]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d81e      	bhi.n	8002fdc <_ZN3LCD9setCursorEhh+0x58>
 8002f9e:	a201      	add	r2, pc, #4	; (adr r2, 8002fa4 <_ZN3LCD9setCursorEhh+0x20>)
 8002fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa4:	08002fb5 	.word	0x08002fb5
 8002fa8:	08002fbf 	.word	0x08002fbf
 8002fac:	08002fc9 	.word	0x08002fc9
 8002fb0:	08002fd3 	.word	0x08002fd3
		case 0:
			sendCommand( 0x80 );
 8002fb4:	2180      	movs	r1, #128	; 0x80
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ff89 	bl	8002ece <_ZN3LCD11sendCommandEh>
			break;
 8002fbc:	e00e      	b.n	8002fdc <_ZN3LCD9setCursorEhh+0x58>
		case 1:
			sendCommand( 0xC0 );
 8002fbe:	21c0      	movs	r1, #192	; 0xc0
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff ff84 	bl	8002ece <_ZN3LCD11sendCommandEh>
			break;
 8002fc6:	e009      	b.n	8002fdc <_ZN3LCD9setCursorEhh+0x58>
		case 2:
			sendCommand( 0x94 );
 8002fc8:	2194      	movs	r1, #148	; 0x94
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff ff7f 	bl	8002ece <_ZN3LCD11sendCommandEh>
			break;
 8002fd0:	e004      	b.n	8002fdc <_ZN3LCD9setCursorEhh+0x58>
		case 3:
			sendCommand( 0xd4 );
 8002fd2:	21d4      	movs	r1, #212	; 0xd4
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ff7a 	bl	8002ece <_ZN3LCD11sendCommandEh>
			break;
 8002fda:	bf00      	nop
	}

	for( i = 0; i < x; i++ ) {
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	da07      	bge.n	8002ff8 <_ZN3LCD9setCursorEhh+0x74>
		sendCommand( 0x14 );
 8002fe8:	2114      	movs	r1, #20
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff ff6f 	bl	8002ece <_ZN3LCD11sendCommandEh>
	for( i = 0; i < x; i++ ) {
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	e7f3      	b.n	8002fe0 <_ZN3LCD9setCursorEhh+0x5c>
	}
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_ZN3LCD11writeStringEPc>:
//	sendCommand( 0x20 );
	osDelay( 10 );
}

void
LCD::writeString( char *string ) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
	while ( *string ) {
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <_ZN3LCD11writeStringEPc+0x24>
		sendData( *string++ );
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	603a      	str	r2, [r7, #0]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	4619      	mov	r1, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f805 	bl	800302c <_ZN3LCD8sendDataEc>
	while ( *string ) {
 8003022:	e7f2      	b.n	800300a <_ZN3LCD11writeStringEPc+0xa>
	}
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <_ZN3LCD8sendDataEc>:

void
LCD::sendData( char data ) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = ( data & 0xF0 );
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	f023 030f 	bic.w	r3, r3, #15
 800303e:	73fb      	strb	r3, [r7, #15]
	data_l = ( ( data << 4 ) & 0xF0);
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;	// en=1, rs=0
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	f043 030d 	orr.w	r3, r3, #13
 800304c:	b2db      	uxtb	r3, r3
 800304e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;	// en=0, rs=0
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	f043 0309 	orr.w	r3, r3, #9
 8003056:	b2db      	uxtb	r3, r3
 8003058:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;	// en=1, rs=0
 800305a:	7bbb      	ldrb	r3, [r7, #14]
 800305c:	f043 030d 	orr.w	r3, r3, #13
 8003060:	b2db      	uxtb	r3, r3
 8003062:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;	// en=0, rs=0
 8003064:	7bbb      	ldrb	r3, [r7, #14]
 8003066:	f043 0309 	orr.w	r3, r3, #9
 800306a:	b2db      	uxtb	r3, r3
 800306c:	72fb      	strb	r3, [r7, #11]

	mLCD->writeData( data_t, 4 );
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6858      	ldr	r0, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3314      	adds	r3, #20
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f107 0108 	add.w	r1, r7, #8
 8003080:	2204      	movs	r2, #4
 8003082:	4798      	blx	r3
	osDelay( LCD_DELAY );
 8003084:	2001      	movs	r0, #1
 8003086:	f004 fefb 	bl	8007e80 <osDelay>
}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <_ZN3LCDC1EP10I2C_Device>:

}
 *
 */

LCD::LCD( I2C_Device *lcd ) : mLCD( lcd ), mCount( 0 ) {
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	4a07      	ldr	r2, [pc, #28]	; (80030bc <_ZN3LCDC1EP10I2C_Device+0x28>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	609a      	str	r2, [r3, #8]
	// TODO Auto-generated constructor stub

}
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4618      	mov	r0, r3
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	0800b690 	.word	0x0800b690

080030c0 <_ZN3LCDD1Ev>:

LCD::~LCD() {
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	4a04      	ldr	r2, [pc, #16]	; (80030dc <_ZN3LCDD1Ev+0x1c>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	0800b690 	.word	0x0800b690

080030e0 <_ZN3LCDD0Ev>:
LCD::~LCD() {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
}
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ffe9 	bl	80030c0 <_ZN3LCDD1Ev>
 80030ee:	210c      	movs	r1, #12
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f007 fac0 	bl	800a676 <_ZdlPvj>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <_ZN3LCD10initializeEv>:
	sprintf( s, "Count %5d         ", mCount++ );
	writeString( s );
}

void
LCD::initialize() {
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	osDelay( 1000 );
 8003108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800310c:	f004 feb8 	bl	8007e80 <osDelay>

	sendCommand( 0x30 );
 8003110:	2130      	movs	r1, #48	; 0x30
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff fedb 	bl	8002ece <_ZN3LCD11sendCommandEh>
	osDelay( 10 );
 8003118:	200a      	movs	r0, #10
 800311a:	f004 feb1 	bl	8007e80 <osDelay>
	sendCommand( 0x30 );
 800311e:	2130      	movs	r1, #48	; 0x30
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff fed4 	bl	8002ece <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 8003126:	2005      	movs	r0, #5
 8003128:	f004 feaa 	bl	8007e80 <osDelay>
	sendCommand( 0x30 );
 800312c:	2130      	movs	r1, #48	; 0x30
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fecd 	bl	8002ece <_ZN3LCD11sendCommandEh>
	osDelay( 10 );
 8003134:	200a      	movs	r0, #10
 8003136:	f004 fea3 	bl	8007e80 <osDelay>
	sendCommand( 0x20 );
 800313a:	2120      	movs	r1, #32
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff fec6 	bl	8002ece <_ZN3LCD11sendCommandEh>
	osDelay( 10 );
 8003142:	200a      	movs	r0, #10
 8003144:	f004 fe9c 	bl	8007e80 <osDelay>


	enableBacklight( false );
 8003148:	2100      	movs	r1, #0
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fef2 	bl	8002f34 <_ZN3LCD15enableBacklightEb>

	osDelay( 250 );
 8003150:	20fa      	movs	r0, #250	; 0xfa
 8003152:	f004 fe95 	bl	8007e80 <osDelay>

	sendCommand( 0x28 );
 8003156:	2128      	movs	r1, #40	; 0x28
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff feb8 	bl	8002ece <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 800315e:	2005      	movs	r0, #5
 8003160:	f004 fe8e 	bl	8007e80 <osDelay>
	sendCommand( 0x08 );
 8003164:	2108      	movs	r1, #8
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff feb1 	bl	8002ece <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 800316c:	2005      	movs	r0, #5
 800316e:	f004 fe87 	bl	8007e80 <osDelay>
	sendCommand( 0x01 );
 8003172:	2101      	movs	r1, #1
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff feaa 	bl	8002ece <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 800317a:	2005      	movs	r0, #5
 800317c:	f004 fe80 	bl	8007e80 <osDelay>

	sendCommand( 0x06 );
 8003180:	2106      	movs	r1, #6
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff fea3 	bl	8002ece <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 8003188:	2005      	movs	r0, #5
 800318a:	f004 fe79 	bl	8007e80 <osDelay>
	sendCommand( 0x0c );
 800318e:	210c      	movs	r1, #12
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fe9c 	bl	8002ece <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 8003196:	2005      	movs	r0, #5
 8003198:	f004 fe72 	bl	8007e80 <osDelay>
	sendCommand( 0x01 );
 800319c:	2101      	movs	r1, #1
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff fe95 	bl	8002ece <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 80031a4:	2005      	movs	r0, #5
 80031a6:	f004 fe6b 	bl	8007e80 <osDelay>

	osDelay( 250 );
 80031aa:	20fa      	movs	r0, #250	; 0xfa
 80031ac:	f004 fe68 	bl	8007e80 <osDelay>

	enableBacklight( true );
 80031b0:	2101      	movs	r1, #1
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff febe 	bl	8002f34 <_ZN3LCD15enableBacklightEb>
	lcd_send_cmd (0x20);  // 4bit mode
	HAL_Delay(10);
 *
 *
 */
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <_ZN8RunnableC1EP9Amplifier>:
 */

#include "Runnable.h"
#include "Amplifier.h"

Runnable::Runnable( Amplifier *amp ) : mAmplifier( amp ) {
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
 80031ca:	4a06      	ldr	r2, [pc, #24]	; (80031e4 <_ZN8RunnableC1EP9Amplifier+0x24>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	605a      	str	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	0800b6a4 	.word	0x0800b6a4

080031e8 <_ZN8RunnableD1Ev>:

Runnable::~Runnable() {
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	4a04      	ldr	r2, [pc, #16]	; (8003204 <_ZN8RunnableD1Ev+0x1c>)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	0800b6a4 	.word	0x0800b6a4

08003208 <_ZN2UIC1EP9Amplifier>:

#include "UI.h"
#include "main.h"
#include "cmsis_os.h"

UI::UI( Amplifier *amp ) : Runnable( amp ) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6839      	ldr	r1, [r7, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ffd2 	bl	80031c0 <_ZN8RunnableC1EP9Amplifier>
 800321c:	4a03      	ldr	r2, [pc, #12]	; (800322c <_ZN2UIC1EP9Amplifier+0x24>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	0800b6b8 	.word	0x0800b6b8

08003230 <_ZN2UID1Ev>:

UI::~UI() {
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	4a05      	ldr	r2, [pc, #20]	; (8003250 <_ZN2UID1Ev+0x20>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ffd1 	bl	80031e8 <_ZN8RunnableD1Ev>
	// TODO Auto-generated destructor stub
}
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	0800b6b8 	.word	0x0800b6b8

08003254 <_ZN2UID0Ev>:
UI::~UI() {
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
}
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ffe7 	bl	8003230 <_ZN2UID1Ev>
 8003262:	2108      	movs	r1, #8
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f007 fa06 	bl	800a676 <_ZdlPvj>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <_ZN2UI3runEv>:

void UI::run() {
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	for(;;) {
		osDelay(1);
 800327c:	2001      	movs	r0, #1
 800327e:	f004 fdff 	bl	8007e80 <osDelay>
 8003282:	e7fb      	b.n	800327c <_ZN2UI3runEv+0x8>

08003284 <_ZN9Amplifier8getAudioEv>:
	Amplifier();
	virtual ~Amplifier();

	UI &getUI() { return mUI; }
	Display &getDisplay() { return mDisplay; }
	Audio &getAudio() { return mAudio; }
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	333c      	adds	r3, #60	; 0x3c
 8003290:	4618      	mov	r0, r3
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
	...

0800329c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032a0:	f000 fea6 	bl	8003ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032a4:	f000 f832 	bl	800330c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032a8:	f000 fa8e 	bl	80037c8 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80032ac:	f000 f926 	bl	80034fc <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 80032b0:	f000 f960 	bl	8003574 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 80032b4:	f000 f99a 	bl	80035ec <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80032b8:	f000 f9f6 	bl	80036a8 <_ZL12MX_TIM4_Initv>
  MX_USART3_UART_Init();
 80032bc:	f000 fa56 	bl	800376c <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 80032c0:	f000 f88e 	bl	80033e0 <_ZL12MX_I2C1_Initv>
  MX_RTC_Init();
 80032c4:	f000 f8c0 	bl	8003448 <_ZL11MX_RTC_Initv>
  // The main amplifier class

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80032c8:	f004 fcc8 	bl	8007c5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80032cc:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <main+0x58>)
 80032ce:	2100      	movs	r1, #0
 80032d0:	4809      	ldr	r0, [pc, #36]	; (80032f8 <main+0x5c>)
 80032d2:	f004 fd29 	bl	8007d28 <osThreadNew>
 80032d6:	4603      	mov	r3, r0
 80032d8:	4a08      	ldr	r2, [pc, #32]	; (80032fc <main+0x60>)
 80032da:	6013      	str	r3, [r2, #0]

  /* creation of audio */
  audioHandle = osThreadNew(startAudio, NULL, &audio_attributes);
 80032dc:	4a08      	ldr	r2, [pc, #32]	; (8003300 <main+0x64>)
 80032de:	2100      	movs	r1, #0
 80032e0:	4808      	ldr	r0, [pc, #32]	; (8003304 <main+0x68>)
 80032e2:	f004 fd21 	bl	8007d28 <osThreadNew>
 80032e6:	4603      	mov	r3, r0
 80032e8:	4a07      	ldr	r2, [pc, #28]	; (8003308 <main+0x6c>)
 80032ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80032ec:	f004 fce8 	bl	8007cc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80032f0:	e7fe      	b.n	80032f0 <main+0x54>
 80032f2:	bf00      	nop
 80032f4:	0800b6c4 	.word	0x0800b6c4
 80032f8:	08003981 	.word	0x08003981
 80032fc:	20000284 	.word	0x20000284
 8003300:	0800b6e8 	.word	0x0800b6e8
 8003304:	080039b9 	.word	0x080039b9
 8003308:	20000288 	.word	0x20000288

0800330c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b096      	sub	sp, #88	; 0x58
 8003310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003316:	2228      	movs	r2, #40	; 0x28
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f007 fb7e 	bl	800aa1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003320:	f107 031c 	add.w	r3, r7, #28
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	60da      	str	r2, [r3, #12]
 800333c:	611a      	str	r2, [r3, #16]
 800333e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003340:	2306      	movs	r3, #6
 8003342:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003344:	2301      	movs	r3, #1
 8003346:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003348:	2301      	movs	r3, #1
 800334a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800334c:	2310      	movs	r3, #16
 800334e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003350:	2302      	movs	r3, #2
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003354:	2300      	movs	r3, #0
 8003356:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8003358:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800335c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800335e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003362:	4618      	mov	r0, r3
 8003364:	f002 fe32 	bl	8005fcc <HAL_RCC_OscConfig>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	bf14      	ite	ne
 800336e:	2301      	movne	r3, #1
 8003370:	2300      	moveq	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8003378:	f000 fb32 	bl	80039e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800337c:	230f      	movs	r3, #15
 800337e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003380:	2302      	movs	r3, #2
 8003382:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003384:	2300      	movs	r3, #0
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800338e:	2300      	movs	r3, #0
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003392:	f107 031c 	add.w	r3, r7, #28
 8003396:	2101      	movs	r1, #1
 8003398:	4618      	mov	r0, r3
 800339a:	f003 f899 	bl	80064d0 <HAL_RCC_ClockConfig>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80033ae:	f000 fb17 	bl	80039e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80033b2:	2301      	movs	r3, #1
 80033b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80033b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ba:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033bc:	1d3b      	adds	r3, r7, #4
 80033be:	4618      	mov	r0, r3
 80033c0:	f003 fa20 	bl	8006804 <HAL_RCCEx_PeriphCLKConfig>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	bf14      	ite	ne
 80033ca:	2301      	movne	r3, #1
 80033cc:	2300      	moveq	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 80033d4:	f000 fb04 	bl	80039e0 <Error_Handler>
  }
}
 80033d8:	bf00      	nop
 80033da:	3758      	adds	r7, #88	; 0x58
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033e4:	4b15      	ldr	r3, [pc, #84]	; (800343c <_ZL12MX_I2C1_Initv+0x5c>)
 80033e6:	4a16      	ldr	r2, [pc, #88]	; (8003440 <_ZL12MX_I2C1_Initv+0x60>)
 80033e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <_ZL12MX_I2C1_Initv+0x5c>)
 80033ec:	4a15      	ldr	r2, [pc, #84]	; (8003444 <_ZL12MX_I2C1_Initv+0x64>)
 80033ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <_ZL12MX_I2C1_Initv+0x5c>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <_ZL12MX_I2C1_Initv+0x5c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <_ZL12MX_I2C1_Initv+0x5c>)
 80033fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003402:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <_ZL12MX_I2C1_Initv+0x5c>)
 8003406:	2200      	movs	r2, #0
 8003408:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <_ZL12MX_I2C1_Initv+0x5c>)
 800340c:	2200      	movs	r2, #0
 800340e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <_ZL12MX_I2C1_Initv+0x5c>)
 8003412:	2200      	movs	r2, #0
 8003414:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003416:	4b09      	ldr	r3, [pc, #36]	; (800343c <_ZL12MX_I2C1_Initv+0x5c>)
 8003418:	2200      	movs	r2, #0
 800341a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800341c:	4807      	ldr	r0, [pc, #28]	; (800343c <_ZL12MX_I2C1_Initv+0x5c>)
 800341e:	f001 f91b 	bl	8004658 <HAL_I2C_Init>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8003432:	f000 fad5 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000098 	.word	0x20000098
 8003440:	40005400 	.word	0x40005400
 8003444:	000186a0 	.word	0x000186a0

08003448 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800344e:	1d3b      	adds	r3, r7, #4
 8003450:	2100      	movs	r1, #0
 8003452:	460a      	mov	r2, r1
 8003454:	801a      	strh	r2, [r3, #0]
 8003456:	460a      	mov	r2, r1
 8003458:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800345a:	2300      	movs	r3, #0
 800345c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800345e:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <_ZL11MX_RTC_Initv+0xac>)
 8003460:	4a25      	ldr	r2, [pc, #148]	; (80034f8 <_ZL11MX_RTC_Initv+0xb0>)
 8003462:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8003464:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <_ZL11MX_RTC_Initv+0xac>)
 8003466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800346a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800346c:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <_ZL11MX_RTC_Initv+0xac>)
 800346e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003472:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003474:	481f      	ldr	r0, [pc, #124]	; (80034f4 <_ZL11MX_RTC_Initv+0xac>)
 8003476:	f003 fb61 	bl	8006b3c <HAL_RTC_Init>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <_ZL11MX_RTC_Initv+0x46>
  {
    Error_Handler();
 800348a:	f000 faa9 	bl	80039e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800348e:	2300      	movs	r3, #0
 8003490:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003492:	2300      	movs	r3, #0
 8003494:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003496:	2300      	movs	r3, #0
 8003498:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800349a:	1d3b      	adds	r3, r7, #4
 800349c:	2201      	movs	r2, #1
 800349e:	4619      	mov	r1, r3
 80034a0:	4814      	ldr	r0, [pc, #80]	; (80034f4 <_ZL11MX_RTC_Initv+0xac>)
 80034a2:	f003 fbe1 	bl	8006c68 <HAL_RTC_SetTime>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf14      	ite	ne
 80034ac:	2301      	movne	r3, #1
 80034ae:	2300      	moveq	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <_ZL11MX_RTC_Initv+0x72>
  {
    Error_Handler();
 80034b6:	f000 fa93 	bl	80039e0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80034ba:	2301      	movs	r3, #1
 80034bc:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80034be:	2301      	movs	r3, #1
 80034c0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80034c2:	2301      	movs	r3, #1
 80034c4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80034ca:	463b      	mov	r3, r7
 80034cc:	2201      	movs	r2, #1
 80034ce:	4619      	mov	r1, r3
 80034d0:	4808      	ldr	r0, [pc, #32]	; (80034f4 <_ZL11MX_RTC_Initv+0xac>)
 80034d2:	f003 fc61 	bl	8006d98 <HAL_RTC_SetDate>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf14      	ite	ne
 80034dc:	2301      	movne	r3, #1
 80034de:	2300      	moveq	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <_ZL11MX_RTC_Initv+0xa2>
  {
    Error_Handler();
 80034e6:	f000 fa7b 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200000ec 	.word	0x200000ec
 80034f8:	40002800 	.word	0x40002800

080034fc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003500:	4b1a      	ldr	r3, [pc, #104]	; (800356c <_ZL12MX_SPI1_Initv+0x70>)
 8003502:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <_ZL12MX_SPI1_Initv+0x74>)
 8003504:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003506:	4b19      	ldr	r3, [pc, #100]	; (800356c <_ZL12MX_SPI1_Initv+0x70>)
 8003508:	f44f 7282 	mov.w	r2, #260	; 0x104
 800350c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800350e:	4b17      	ldr	r3, [pc, #92]	; (800356c <_ZL12MX_SPI1_Initv+0x70>)
 8003510:	2200      	movs	r2, #0
 8003512:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003514:	4b15      	ldr	r3, [pc, #84]	; (800356c <_ZL12MX_SPI1_Initv+0x70>)
 8003516:	2200      	movs	r2, #0
 8003518:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800351a:	4b14      	ldr	r3, [pc, #80]	; (800356c <_ZL12MX_SPI1_Initv+0x70>)
 800351c:	2200      	movs	r2, #0
 800351e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <_ZL12MX_SPI1_Initv+0x70>)
 8003522:	2200      	movs	r2, #0
 8003524:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <_ZL12MX_SPI1_Initv+0x70>)
 8003528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800352c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800352e:	4b0f      	ldr	r3, [pc, #60]	; (800356c <_ZL12MX_SPI1_Initv+0x70>)
 8003530:	2208      	movs	r2, #8
 8003532:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003534:	4b0d      	ldr	r3, [pc, #52]	; (800356c <_ZL12MX_SPI1_Initv+0x70>)
 8003536:	2200      	movs	r2, #0
 8003538:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800353a:	4b0c      	ldr	r3, [pc, #48]	; (800356c <_ZL12MX_SPI1_Initv+0x70>)
 800353c:	2200      	movs	r2, #0
 800353e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003540:	4b0a      	ldr	r3, [pc, #40]	; (800356c <_ZL12MX_SPI1_Initv+0x70>)
 8003542:	2200      	movs	r2, #0
 8003544:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <_ZL12MX_SPI1_Initv+0x70>)
 8003548:	220a      	movs	r2, #10
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800354c:	4807      	ldr	r0, [pc, #28]	; (800356c <_ZL12MX_SPI1_Initv+0x70>)
 800354e:	f003 fe83 	bl	8007258 <HAL_SPI_Init>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	bf14      	ite	ne
 8003558:	2301      	movne	r3, #1
 800355a:	2300      	moveq	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8003562:	f000 fa3d 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000100 	.word	0x20000100
 8003570:	40013000 	.word	0x40013000

08003574 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003578:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <_ZL12MX_SPI2_Initv+0x70>)
 800357a:	4a1b      	ldr	r2, [pc, #108]	; (80035e8 <_ZL12MX_SPI2_Initv+0x74>)
 800357c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800357e:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <_ZL12MX_SPI2_Initv+0x70>)
 8003580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003584:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003586:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <_ZL12MX_SPI2_Initv+0x70>)
 8003588:	2200      	movs	r2, #0
 800358a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800358c:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <_ZL12MX_SPI2_Initv+0x70>)
 800358e:	2200      	movs	r2, #0
 8003590:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003592:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <_ZL12MX_SPI2_Initv+0x70>)
 8003594:	2200      	movs	r2, #0
 8003596:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <_ZL12MX_SPI2_Initv+0x70>)
 800359a:	2200      	movs	r2, #0
 800359c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <_ZL12MX_SPI2_Initv+0x70>)
 80035a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035a6:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <_ZL12MX_SPI2_Initv+0x70>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035ac:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <_ZL12MX_SPI2_Initv+0x70>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80035b2:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <_ZL12MX_SPI2_Initv+0x70>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <_ZL12MX_SPI2_Initv+0x70>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <_ZL12MX_SPI2_Initv+0x70>)
 80035c0:	220a      	movs	r2, #10
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80035c4:	4807      	ldr	r0, [pc, #28]	; (80035e4 <_ZL12MX_SPI2_Initv+0x70>)
 80035c6:	f003 fe47 	bl	8007258 <HAL_SPI_Init>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 80035da:	f000 fa01 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000158 	.word	0x20000158
 80035e8:	40003800 	.word	0x40003800

080035ec <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08c      	sub	sp, #48	; 0x30
 80035f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035f2:	f107 030c 	add.w	r3, r7, #12
 80035f6:	2224      	movs	r2, #36	; 0x24
 80035f8:	2100      	movs	r1, #0
 80035fa:	4618      	mov	r0, r3
 80035fc:	f007 fa0e 	bl	800aa1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003600:	1d3b      	adds	r3, r7, #4
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003608:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <_ZL12MX_TIM3_Initv+0xb4>)
 800360a:	4a26      	ldr	r2, [pc, #152]	; (80036a4 <_ZL12MX_TIM3_Initv+0xb8>)
 800360c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800360e:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <_ZL12MX_TIM3_Initv+0xb4>)
 8003610:	2200      	movs	r2, #0
 8003612:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003614:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <_ZL12MX_TIM3_Initv+0xb4>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800361a:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <_ZL12MX_TIM3_Initv+0xb4>)
 800361c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003620:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003622:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <_ZL12MX_TIM3_Initv+0xb4>)
 8003624:	2200      	movs	r2, #0
 8003626:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <_ZL12MX_TIM3_Initv+0xb4>)
 800362a:	2200      	movs	r2, #0
 800362c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800362e:	2301      	movs	r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003636:	2301      	movs	r3, #1
 8003638:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003642:	2300      	movs	r3, #0
 8003644:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003646:	2301      	movs	r3, #1
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800364a:	2300      	movs	r3, #0
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003652:	f107 030c 	add.w	r3, r7, #12
 8003656:	4619      	mov	r1, r3
 8003658:	4811      	ldr	r0, [pc, #68]	; (80036a0 <_ZL12MX_TIM3_Initv+0xb4>)
 800365a:	f003 fe81 	bl	8007360 <HAL_TIM_Encoder_Init>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800366e:	f000 f9b7 	bl	80039e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800367a:	1d3b      	adds	r3, r7, #4
 800367c:	4619      	mov	r1, r3
 800367e:	4808      	ldr	r0, [pc, #32]	; (80036a0 <_ZL12MX_TIM3_Initv+0xb4>)
 8003680:	f004 f992 	bl	80079a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8003694:	f000 f9a4 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003698:	bf00      	nop
 800369a:	3730      	adds	r7, #48	; 0x30
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	200001b0 	.word	0x200001b0
 80036a4:	40000400 	.word	0x40000400

080036a8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08c      	sub	sp, #48	; 0x30
 80036ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036ae:	f107 030c 	add.w	r3, r7, #12
 80036b2:	2224      	movs	r2, #36	; 0x24
 80036b4:	2100      	movs	r1, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	f007 f9b0 	bl	800aa1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80036c4:	4b27      	ldr	r3, [pc, #156]	; (8003764 <_ZL12MX_TIM4_Initv+0xbc>)
 80036c6:	4a28      	ldr	r2, [pc, #160]	; (8003768 <_ZL12MX_TIM4_Initv+0xc0>)
 80036c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80036ca:	4b26      	ldr	r3, [pc, #152]	; (8003764 <_ZL12MX_TIM4_Initv+0xbc>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <_ZL12MX_TIM4_Initv+0xbc>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80036d6:	4b23      	ldr	r3, [pc, #140]	; (8003764 <_ZL12MX_TIM4_Initv+0xbc>)
 80036d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036de:	4b21      	ldr	r3, [pc, #132]	; (8003764 <_ZL12MX_TIM4_Initv+0xbc>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036e4:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <_ZL12MX_TIM4_Initv+0xbc>)
 80036e6:	2280      	movs	r2, #128	; 0x80
 80036e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036ea:	2303      	movs	r3, #3
 80036ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036f2:	2301      	movs	r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80036fa:	2305      	movs	r3, #5
 80036fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036fe:	2300      	movs	r3, #0
 8003700:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003702:	2301      	movs	r3, #1
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003706:	2300      	movs	r3, #0
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 800370a:	2305      	movs	r3, #5
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800370e:	f107 030c 	add.w	r3, r7, #12
 8003712:	4619      	mov	r1, r3
 8003714:	4813      	ldr	r0, [pc, #76]	; (8003764 <_ZL12MX_TIM4_Initv+0xbc>)
 8003716:	f003 fe23 	bl	8007360 <HAL_TIM_Encoder_Init>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 800372a:	f000 f959 	bl	80039e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800372e:	2300      	movs	r3, #0
 8003730:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003732:	2300      	movs	r3, #0
 8003734:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003736:	1d3b      	adds	r3, r7, #4
 8003738:	4619      	mov	r1, r3
 800373a:	480a      	ldr	r0, [pc, #40]	; (8003764 <_ZL12MX_TIM4_Initv+0xbc>)
 800373c:	f004 f934 	bl	80079a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	bf14      	ite	ne
 8003746:	2301      	movne	r3, #1
 8003748:	2300      	moveq	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8003750:	f000 f946 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

	// Star the volume control timer
	HAL_TIM_Encoder_Start_IT( &htim4, TIM_CHANNEL_ALL );
 8003754:	213c      	movs	r1, #60	; 0x3c
 8003756:	4803      	ldr	r0, [pc, #12]	; (8003764 <_ZL12MX_TIM4_Initv+0xbc>)
 8003758:	f003 fea4 	bl	80074a4 <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END TIM4_Init 2 */

}
 800375c:	bf00      	nop
 800375e:	3730      	adds	r7, #48	; 0x30
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200001f8 	.word	0x200001f8
 8003768:	40000800 	.word	0x40000800

0800376c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003772:	4a14      	ldr	r2, [pc, #80]	; (80037c4 <_ZL19MX_USART3_UART_Initv+0x58>)
 8003774:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003776:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800377c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003780:	2200      	movs	r2, #0
 8003782:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003786:	2200      	movs	r2, #0
 8003788:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800378a:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800378c:	2200      	movs	r2, #0
 800378e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003792:	220c      	movs	r2, #12
 8003794:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003798:	2200      	movs	r2, #0
 800379a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800379e:	2200      	movs	r2, #0
 80037a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037a2:	4807      	ldr	r0, [pc, #28]	; (80037c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80037a4:	f004 f97e 	bl	8007aa4 <HAL_UART_Init>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bf14      	ite	ne
 80037ae:	2301      	movne	r3, #1
 80037b0:	2300      	moveq	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80037b8:	f000 f912 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80037bc:	bf00      	nop
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000240 	.word	0x20000240
 80037c4:	40004800 	.word	0x40004800

080037c8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ce:	f107 0318 	add.w	r3, r7, #24
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	605a      	str	r2, [r3, #4]
 80037d8:	609a      	str	r2, [r3, #8]
 80037da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037dc:	4b62      	ldr	r3, [pc, #392]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	4a61      	ldr	r2, [pc, #388]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 80037e2:	f043 0310 	orr.w	r3, r3, #16
 80037e6:	6193      	str	r3, [r2, #24]
 80037e8:	4b5f      	ldr	r3, [pc, #380]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f4:	4b5c      	ldr	r3, [pc, #368]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	4a5b      	ldr	r2, [pc, #364]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 80037fa:	f043 0304 	orr.w	r3, r3, #4
 80037fe:	6193      	str	r3, [r2, #24]
 8003800:	4b59      	ldr	r3, [pc, #356]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800380c:	4b56      	ldr	r3, [pc, #344]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	4a55      	ldr	r2, [pc, #340]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 8003812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003816:	6193      	str	r3, [r2, #24]
 8003818:	4b53      	ldr	r3, [pc, #332]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003824:	4b50      	ldr	r3, [pc, #320]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	4a4f      	ldr	r2, [pc, #316]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 800382a:	f043 0308 	orr.w	r3, r3, #8
 800382e:	6193      	str	r3, [r2, #24]
 8003830:	4b4d      	ldr	r3, [pc, #308]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800383c:	4b4a      	ldr	r3, [pc, #296]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	4a49      	ldr	r2, [pc, #292]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 8003842:	f043 0320 	orr.w	r3, r3, #32
 8003846:	6193      	str	r3, [r2, #24]
 8003848:	4b47      	ldr	r3, [pc, #284]	; (8003968 <_ZL12MX_GPIO_Initv+0x1a0>)
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_MUTE_Pin|DECODER_RESET_Pin, GPIO_PIN_RESET);
 8003854:	2200      	movs	r2, #0
 8003856:	f44f 6181 	mov.w	r1, #1032	; 0x408
 800385a:	4844      	ldr	r0, [pc, #272]	; (800396c <_ZL12MX_GPIO_Initv+0x1a4>)
 800385c:	f000 fee3 	bl	8004626 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 8003860:	2200      	movs	r2, #0
 8003862:	f248 011f 	movw	r1, #32799	; 0x801f
 8003866:	4842      	ldr	r0, [pc, #264]	; (8003970 <_ZL12MX_GPIO_Initv+0x1a8>)
 8003868:	f000 fedd 	bl	8004626 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|USB_PULLUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 800386c:	2200      	movs	r2, #0
 800386e:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 8003872:	4840      	ldr	r0, [pc, #256]	; (8003974 <_ZL12MX_GPIO_Initv+0x1ac>)
 8003874:	f000 fed7 	bl	8004626 <HAL_GPIO_WritePin>
                          |LED_POWER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_INPUT_6CH_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
 8003878:	2200      	movs	r2, #0
 800387a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800387e:	483e      	ldr	r0, [pc, #248]	; (8003978 <_ZL12MX_GPIO_Initv+0x1b0>)
 8003880:	f000 fed1 	bl	8004626 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_MUTE_Pin DECODER_RESET_Pin */
  GPIO_InitStruct.Pin = LED_MUTE_Pin|DECODER_RESET_Pin;
 8003884:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8003888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800388a:	2301      	movs	r3, #1
 800388c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003892:	2302      	movs	r3, #2
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003896:	f107 0318 	add.w	r3, r7, #24
 800389a:	4619      	mov	r1, r3
 800389c:	4833      	ldr	r0, [pc, #204]	; (800396c <_ZL12MX_GPIO_Initv+0x1a4>)
 800389e:	f000 fd17 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PCM_Pin LED_DOLBY_Pin PA2 LED_MUTEA3_Pin
                           PA4 USB_PULLUP_Pin */
  GPIO_InitStruct.Pin = LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 80038a2:	f248 031f 	movw	r3, #32799	; 0x801f
 80038a6:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|USB_PULLUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a8:	2301      	movs	r3, #1
 80038aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b0:	2302      	movs	r3, #2
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b4:	f107 0318 	add.w	r3, r7, #24
 80038b8:	4619      	mov	r1, r3
 80038ba:	482d      	ldr	r0, [pc, #180]	; (8003970 <_ZL12MX_GPIO_Initv+0x1a8>)
 80038bc:	f000 fd08 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SETTING_BATTERY_Pin DECODER_IRQ_Pin */
  GPIO_InitStruct.Pin = SETTING_BATTERY_Pin|DECODER_IRQ_Pin;
 80038c0:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80038c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ce:	f107 0318 	add.w	r3, r7, #24
 80038d2:	4619      	mov	r1, r3
 80038d4:	4825      	ldr	r0, [pc, #148]	; (800396c <_ZL12MX_GPIO_Initv+0x1a4>)
 80038d6:	f000 fcfb 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_1_Pin LED_INPUT_2_Pin LED_INPUT_3_Pin LED_INPUT_4_Pin
                           LED_POWER_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 80038da:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 80038de:	61bb      	str	r3, [r7, #24]
                          |LED_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038e0:	2301      	movs	r3, #1
 80038e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e8:	2302      	movs	r3, #2
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038ec:	f107 0318 	add.w	r3, r7, #24
 80038f0:	4619      	mov	r1, r3
 80038f2:	4820      	ldr	r0, [pc, #128]	; (8003974 <_ZL12MX_GPIO_Initv+0x1ac>)
 80038f4:	f000 fcec 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_POWER_Pin */
  GPIO_InitStruct.Pin = BUTTON_POWER_Pin;
 80038f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_POWER_GPIO_Port, &GPIO_InitStruct);
 8003906:	f107 0318 	add.w	r3, r7, #24
 800390a:	4619      	mov	r1, r3
 800390c:	4819      	ldr	r0, [pc, #100]	; (8003974 <_ZL12MX_GPIO_Initv+0x1ac>)
 800390e:	f000 fcdf 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_6CH_Pin LED_RUN_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_6CH_Pin|LED_RUN_Pin;
 8003912:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003918:	2301      	movs	r3, #1
 800391a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391c:	2300      	movs	r3, #0
 800391e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003920:	2302      	movs	r3, #2
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003924:	f107 0318 	add.w	r3, r7, #24
 8003928:	4619      	mov	r1, r3
 800392a:	4813      	ldr	r0, [pc, #76]	; (8003978 <_ZL12MX_GPIO_Initv+0x1b0>)
 800392c:	f000 fcd0 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_VOLUME_Pin BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_VOLUME_Pin|BUTTON_INPUT_Pin;
 8003930:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8003934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800393a:	2301      	movs	r3, #1
 800393c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800393e:	f107 0318 	add.w	r3, r7, #24
 8003942:	4619      	mov	r1, r3
 8003944:	480d      	ldr	r0, [pc, #52]	; (800397c <_ZL12MX_GPIO_Initv+0x1b4>)
 8003946:	f000 fcc3 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = PWM_BACKLIGHT_Pin;
 800394a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800394e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003950:	2303      	movs	r3, #3
 8003952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWM_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8003954:	f107 0318 	add.w	r3, r7, #24
 8003958:	4619      	mov	r1, r3
 800395a:	4807      	ldr	r0, [pc, #28]	; (8003978 <_ZL12MX_GPIO_Initv+0x1b0>)
 800395c:	f000 fcb8 	bl	80042d0 <HAL_GPIO_Init>

}
 8003960:	bf00      	nop
 8003962:	3728      	adds	r7, #40	; 0x28
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	40011000 	.word	0x40011000
 8003970:	40010800 	.word	0x40010800
 8003974:	40011800 	.word	0x40011800
 8003978:	40010c00 	.word	0x40010c00
 800397c:	40011400 	.word	0x40011400

08003980 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b095      	sub	sp, #84	; 0x54
 8003984:	af12      	add	r7, sp, #72	; 0x48
 8003986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	amplifier.initialize( hi2c1 );
 8003988:	4c09      	ldr	r4, [pc, #36]	; (80039b0 <_Z16StartDefaultTaskPv+0x30>)
 800398a:	4668      	mov	r0, sp
 800398c:	f104 030c 	add.w	r3, r4, #12
 8003990:	2248      	movs	r2, #72	; 0x48
 8003992:	4619      	mov	r1, r3
 8003994:	f007 f81a 	bl	800a9cc <memcpy>
 8003998:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800399c:	4805      	ldr	r0, [pc, #20]	; (80039b4 <_Z16StartDefaultTaskPv+0x34>)
 800399e:	f7fd fcdd 	bl	800135c <_ZN9Amplifier10initializeE17I2C_HandleTypeDef>

	amplifier.run();
 80039a2:	4804      	ldr	r0, [pc, #16]	; (80039b4 <_Z16StartDefaultTaskPv+0x34>)
 80039a4:	f7fd fd6e 	bl	8001484 <_ZN9Amplifier3runEv>
  /* USER CODE END 5 */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd90      	pop	{r4, r7, pc}
 80039b0:	20000098 	.word	0x20000098
 80039b4:	2000028c 	.word	0x2000028c

080039b8 <_Z10startAudioPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAudio */
void startAudio(void *argument)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAudio */
  /* Infinite loop */
	amplifier.getAudio().run();
 80039c0:	4806      	ldr	r0, [pc, #24]	; (80039dc <_Z10startAudioPv+0x24>)
 80039c2:	f7ff fc5f 	bl	8003284 <_ZN9Amplifier8getAudioEv>
 80039c6:	4603      	mov	r3, r0
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	3208      	adds	r2, #8
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	4790      	blx	r2
  /* USER CODE END startAudio */
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	2000028c 	.word	0x2000028c

080039e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039e4:	b672      	cpsid	i
}
 80039e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039e8:	e7fe      	b.n	80039e8 <Error_Handler+0x8>
	...

080039ec <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d10c      	bne.n	8003a16 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d107      	bne.n	8003a16 <_Z41__static_initialization_and_destruction_0ii+0x2a>
Amplifier amplifier;
 8003a06:	4806      	ldr	r0, [pc, #24]	; (8003a20 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003a08:	f7fd fbfe 	bl	8001208 <_ZN9AmplifierC1Ev>
 8003a0c:	4a05      	ldr	r2, [pc, #20]	; (8003a24 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003a0e:	4906      	ldr	r1, [pc, #24]	; (8003a28 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003a10:	4803      	ldr	r0, [pc, #12]	; (8003a20 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003a12:	f006 fe2b 	bl	800a66c <__aeabi_atexit>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	2000028c 	.word	0x2000028c
 8003a24:	20000000 	.word	0x20000000
 8003a28:	0800128d 	.word	0x0800128d

08003a2c <_GLOBAL__sub_I_hi2c1>:
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a34:	2001      	movs	r0, #1
 8003a36:	f7ff ffd9 	bl	80039ec <_Z41__static_initialization_and_destruction_0ii>
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a42:	4b18      	ldr	r3, [pc, #96]	; (8003aa4 <HAL_MspInit+0x68>)
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <HAL_MspInit+0x68>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	6193      	str	r3, [r2, #24]
 8003a4e:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <HAL_MspInit+0x68>)
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_MspInit+0x68>)
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	4a11      	ldr	r2, [pc, #68]	; (8003aa4 <HAL_MspInit+0x68>)
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a64:	61d3      	str	r3, [r2, #28]
 8003a66:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <HAL_MspInit+0x68>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a72:	2200      	movs	r2, #0
 8003a74:	210f      	movs	r1, #15
 8003a76:	f06f 0001 	mvn.w	r0, #1
 8003a7a:	f000 fbf2 	bl	8004262 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <HAL_MspInit+0x6c>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <HAL_MspInit+0x6c>)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40010000 	.word	0x40010000

08003aac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab4:	f107 0310 	add.w	r3, r7, #16
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <HAL_I2C_MspInit+0x70>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d123      	bne.n	8003b14 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003acc:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <HAL_I2C_MspInit+0x74>)
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <HAL_I2C_MspInit+0x74>)
 8003ad2:	f043 0308 	orr.w	r3, r3, #8
 8003ad6:	6193      	str	r3, [r2, #24]
 8003ad8:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <HAL_I2C_MspInit+0x74>)
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ae4:	23c0      	movs	r3, #192	; 0xc0
 8003ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ae8:	2312      	movs	r3, #18
 8003aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003aec:	2303      	movs	r3, #3
 8003aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af0:	f107 0310 	add.w	r3, r7, #16
 8003af4:	4619      	mov	r1, r3
 8003af6:	480b      	ldr	r0, [pc, #44]	; (8003b24 <HAL_I2C_MspInit+0x78>)
 8003af8:	f000 fbea 	bl	80042d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003afc:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <HAL_I2C_MspInit+0x74>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	4a07      	ldr	r2, [pc, #28]	; (8003b20 <HAL_I2C_MspInit+0x74>)
 8003b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b06:	61d3      	str	r3, [r2, #28]
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_I2C_MspInit+0x74>)
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b14:	bf00      	nop
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40005400 	.word	0x40005400
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40010c00 	.word	0x40010c00

08003b28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <HAL_RTC_MspInit+0x3c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d110      	bne.n	8003b5c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003b3a:	f002 fa3b 	bl	8005fb4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <HAL_RTC_MspInit+0x40>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <HAL_RTC_MspInit+0x40>)
 8003b44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b48:	61d3      	str	r3, [r2, #28]
 8003b4a:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <HAL_RTC_MspInit+0x40>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RTC_MspInit+0x44>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40002800 	.word	0x40002800
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	4242043c 	.word	0x4242043c

08003b70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b78:	f107 0318 	add.w	r3, r7, #24
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <HAL_SPI_MspInit+0xf8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d130      	bne.n	8003bf2 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b90:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <HAL_SPI_MspInit+0xfc>)
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	4a35      	ldr	r2, [pc, #212]	; (8003c6c <HAL_SPI_MspInit+0xfc>)
 8003b96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b9a:	6193      	str	r3, [r2, #24]
 8003b9c:	4b33      	ldr	r3, [pc, #204]	; (8003c6c <HAL_SPI_MspInit+0xfc>)
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba8:	4b30      	ldr	r3, [pc, #192]	; (8003c6c <HAL_SPI_MspInit+0xfc>)
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	4a2f      	ldr	r2, [pc, #188]	; (8003c6c <HAL_SPI_MspInit+0xfc>)
 8003bae:	f043 0304 	orr.w	r3, r3, #4
 8003bb2:	6193      	str	r3, [r2, #24]
 8003bb4:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <HAL_SPI_MspInit+0xfc>)
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003bc0:	23a0      	movs	r3, #160	; 0xa0
 8003bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bcc:	f107 0318 	add.w	r3, r7, #24
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4827      	ldr	r0, [pc, #156]	; (8003c70 <HAL_SPI_MspInit+0x100>)
 8003bd4:	f000 fb7c 	bl	80042d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003bd8:	2340      	movs	r3, #64	; 0x40
 8003bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be4:	f107 0318 	add.w	r3, r7, #24
 8003be8:	4619      	mov	r1, r3
 8003bea:	4821      	ldr	r0, [pc, #132]	; (8003c70 <HAL_SPI_MspInit+0x100>)
 8003bec:	f000 fb70 	bl	80042d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003bf0:	e036      	b.n	8003c60 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1f      	ldr	r2, [pc, #124]	; (8003c74 <HAL_SPI_MspInit+0x104>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d131      	bne.n	8003c60 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_SPI_MspInit+0xfc>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <HAL_SPI_MspInit+0xfc>)
 8003c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c06:	61d3      	str	r3, [r2, #28]
 8003c08:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <HAL_SPI_MspInit+0xfc>)
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c14:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_SPI_MspInit+0xfc>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <HAL_SPI_MspInit+0xfc>)
 8003c1a:	f043 0308 	orr.w	r3, r3, #8
 8003c1e:	6193      	str	r3, [r2, #24]
 8003c20:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <HAL_SPI_MspInit+0xfc>)
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003c2c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c32:	2302      	movs	r3, #2
 8003c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c36:	2303      	movs	r3, #3
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c3a:	f107 0318 	add.w	r3, r7, #24
 8003c3e:	4619      	mov	r1, r3
 8003c40:	480d      	ldr	r0, [pc, #52]	; (8003c78 <HAL_SPI_MspInit+0x108>)
 8003c42:	f000 fb45 	bl	80042d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c54:	f107 0318 	add.w	r3, r7, #24
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4807      	ldr	r0, [pc, #28]	; (8003c78 <HAL_SPI_MspInit+0x108>)
 8003c5c:	f000 fb38 	bl	80042d0 <HAL_GPIO_Init>
}
 8003c60:	bf00      	nop
 8003c62:	3728      	adds	r7, #40	; 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40013000 	.word	0x40013000
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40010800 	.word	0x40010800
 8003c74:	40003800 	.word	0x40003800
 8003c78:	40010c00 	.word	0x40010c00

08003c7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08c      	sub	sp, #48	; 0x30
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c84:	f107 0318 	add.w	r3, r7, #24
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a43      	ldr	r2, [pc, #268]	; (8003da4 <HAL_TIM_Encoder_MspInit+0x128>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d13e      	bne.n	8003d1a <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c9c:	4b42      	ldr	r3, [pc, #264]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4a41      	ldr	r2, [pc, #260]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003ca2:	f043 0302 	orr.w	r3, r3, #2
 8003ca6:	61d3      	str	r3, [r2, #28]
 8003ca8:	4b3f      	ldr	r3, [pc, #252]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb4:	4b3c      	ldr	r3, [pc, #240]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	4a3b      	ldr	r2, [pc, #236]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003cba:	f043 0310 	orr.w	r3, r3, #16
 8003cbe:	6193      	str	r3, [r2, #24]
 8003cc0:	4b39      	ldr	r3, [pc, #228]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ccc:	23c0      	movs	r3, #192	; 0xc0
 8003cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cd8:	f107 0318 	add.w	r3, r7, #24
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4833      	ldr	r0, [pc, #204]	; (8003dac <HAL_TIM_Encoder_MspInit+0x130>)
 8003ce0:	f000 faf6 	bl	80042d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003ce4:	4b32      	ldr	r3, [pc, #200]	; (8003db0 <HAL_TIM_Encoder_MspInit+0x134>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d02:	4a2b      	ldr	r2, [pc, #172]	; (8003db0 <HAL_TIM_Encoder_MspInit+0x134>)
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2105      	movs	r1, #5
 8003d0c:	201d      	movs	r0, #29
 8003d0e:	f000 faa8 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d12:	201d      	movs	r0, #29
 8003d14:	f000 fac1 	bl	800429a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d18:	e03f      	b.n	8003d9a <HAL_TIM_Encoder_MspInit+0x11e>
  else if(htim_encoder->Instance==TIM4)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a25      	ldr	r2, [pc, #148]	; (8003db4 <HAL_TIM_Encoder_MspInit+0x138>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d13a      	bne.n	8003d9a <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d24:	4b20      	ldr	r3, [pc, #128]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	4a1f      	ldr	r2, [pc, #124]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d2a:	f043 0304 	orr.w	r3, r3, #4
 8003d2e:	61d3      	str	r3, [r2, #28]
 8003d30:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d3c:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d42:	f043 0320 	orr.w	r3, r3, #32
 8003d46:	6193      	str	r3, [r2, #24]
 8003d48:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003d54:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d62:	f107 0318 	add.w	r3, r7, #24
 8003d66:	4619      	mov	r1, r3
 8003d68:	4813      	ldr	r0, [pc, #76]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8003d6a:	f000 fab1 	bl	80042d0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <HAL_TIM_Encoder_MspInit+0x134>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d84:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <HAL_TIM_Encoder_MspInit+0x134>)
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2105      	movs	r1, #5
 8003d8e:	201e      	movs	r0, #30
 8003d90:	f000 fa67 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003d94:	201e      	movs	r0, #30
 8003d96:	f000 fa80 	bl	800429a <HAL_NVIC_EnableIRQ>
}
 8003d9a:	bf00      	nop
 8003d9c:	3730      	adds	r7, #48	; 0x30
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40011000 	.word	0x40011000
 8003db0:	40010000 	.word	0x40010000
 8003db4:	40000800 	.word	0x40000800
 8003db8:	40011400 	.word	0x40011400

08003dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a25      	ldr	r2, [pc, #148]	; (8003e6c <HAL_UART_MspInit+0xb0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d143      	bne.n	8003e64 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ddc:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <HAL_UART_MspInit+0xb4>)
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	4a23      	ldr	r2, [pc, #140]	; (8003e70 <HAL_UART_MspInit+0xb4>)
 8003de2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003de6:	61d3      	str	r3, [r2, #28]
 8003de8:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <HAL_UART_MspInit+0xb4>)
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003df4:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <HAL_UART_MspInit+0xb4>)
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	4a1d      	ldr	r2, [pc, #116]	; (8003e70 <HAL_UART_MspInit+0xb4>)
 8003dfa:	f043 0320 	orr.w	r3, r3, #32
 8003dfe:	6193      	str	r3, [r2, #24]
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <HAL_UART_MspInit+0xb4>)
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e12:	2302      	movs	r3, #2
 8003e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e16:	2303      	movs	r3, #3
 8003e18:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e1a:	f107 0314 	add.w	r3, r7, #20
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4814      	ldr	r0, [pc, #80]	; (8003e74 <HAL_UART_MspInit+0xb8>)
 8003e22:	f000 fa55 	bl	80042d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	4619      	mov	r1, r3
 8003e3a:	480e      	ldr	r0, [pc, #56]	; (8003e74 <HAL_UART_MspInit+0xb8>)
 8003e3c:	f000 fa48 	bl	80042d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_ENABLE();
 8003e40:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <HAL_UART_MspInit+0xbc>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	4a06      	ldr	r2, [pc, #24]	; (8003e78 <HAL_UART_MspInit+0xbc>)
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003e64:	bf00      	nop
 8003e66:	3728      	adds	r7, #40	; 0x28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40004800 	.word	0x40004800
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40011400 	.word	0x40011400
 8003e78:	40010000 	.word	0x40010000

08003e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e80:	e7fe      	b.n	8003e80 <NMI_Handler+0x4>

08003e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e82:	b480      	push	{r7}
 8003e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e86:	e7fe      	b.n	8003e86 <HardFault_Handler+0x4>

08003e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e8c:	e7fe      	b.n	8003e8c <MemManage_Handler+0x4>

08003e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e92:	e7fe      	b.n	8003e92 <BusFault_Handler+0x4>

08003e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e98:	e7fe      	b.n	8003e98 <UsageFault_Handler+0x4>

08003e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr

08003ea6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eaa:	f000 f8e7 	bl	800407c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003eae:	f005 fc23 	bl	80096f8 <xTaskGetSchedulerState>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d001      	beq.n	8003ebc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003eb8:	f006 f97e 	bl	800a1b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ec4:	4802      	ldr	r0, [pc, #8]	; (8003ed0 <TIM3_IRQHandler+0x10>)
 8003ec6:	f003 fb9b 	bl	8007600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	200001b0 	.word	0x200001b0

08003ed4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ed8:	4802      	ldr	r0, [pc, #8]	; (8003ee4 <TIM4_IRQHandler+0x10>)
 8003eda:	f003 fb91 	bl	8007600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	200001f8 	.word	0x200001f8

08003ee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
	return 1;
 8003eec:	2301      	movs	r3, #1
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <_kill>:

int _kill(int pid, int sig)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f00:	f006 fd0a 	bl	800a918 <__errno>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2216      	movs	r2, #22
 8003f08:	601a      	str	r2, [r3, #0]
	return -1;
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <_exit>:

void _exit (int status)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ffe7 	bl	8003ef6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f28:	e7fe      	b.n	8003f28 <_exit+0x12>
	...

08003f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f34:	4a14      	ldr	r2, [pc, #80]	; (8003f88 <_sbrk+0x5c>)
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <_sbrk+0x60>)
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f40:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <_sbrk+0x64>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <_sbrk+0x64>)
 8003f4a:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <_sbrk+0x68>)
 8003f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f4e:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <_sbrk+0x64>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4413      	add	r3, r2
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d207      	bcs.n	8003f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f5c:	f006 fcdc 	bl	800a918 <__errno>
 8003f60:	4603      	mov	r3, r0
 8003f62:	220c      	movs	r2, #12
 8003f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f6a:	e009      	b.n	8003f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f6c:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <_sbrk+0x64>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f72:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <_sbrk+0x64>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <_sbrk+0x64>)
 8003f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20010000 	.word	0x20010000
 8003f8c:	00000400 	.word	0x00000400
 8003f90:	2000037c 	.word	0x2000037c
 8003f94:	20003ac8 	.word	0x20003ac8

08003f98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fa4:	480c      	ldr	r0, [pc, #48]	; (8003fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fa6:	490d      	ldr	r1, [pc, #52]	; (8003fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fa8:	4a0d      	ldr	r2, [pc, #52]	; (8003fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fac:	e002      	b.n	8003fb4 <LoopCopyDataInit>

08003fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fb2:	3304      	adds	r3, #4

08003fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fb8:	d3f9      	bcc.n	8003fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fba:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fbc:	4c0a      	ldr	r4, [pc, #40]	; (8003fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fc0:	e001      	b.n	8003fc6 <LoopFillZerobss>

08003fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fc4:	3204      	adds	r2, #4

08003fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fc8:	d3fb      	bcc.n	8003fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003fca:	f7ff ffe5 	bl	8003f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fce:	f006 fca9 	bl	800a924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003fd2:	f7ff f963 	bl	800329c <main>
  bx lr
 8003fd6:	4770      	bx	lr
  ldr r0, =_sdata
 8003fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fdc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003fe0:	0800b98c 	.word	0x0800b98c
  ldr r2, =_sbss
 8003fe4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003fe8:	20003ac8 	.word	0x20003ac8

08003fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003fec:	e7fe      	b.n	8003fec <ADC1_2_IRQHandler>
	...

08003ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ff4:	4b08      	ldr	r3, [pc, #32]	; (8004018 <HAL_Init+0x28>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a07      	ldr	r2, [pc, #28]	; (8004018 <HAL_Init+0x28>)
 8003ffa:	f043 0310 	orr.w	r3, r3, #16
 8003ffe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004000:	2003      	movs	r0, #3
 8004002:	f000 f923 	bl	800424c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004006:	200f      	movs	r0, #15
 8004008:	f000 f808 	bl	800401c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800400c:	f7ff fd16 	bl	8003a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40022000 	.word	0x40022000

0800401c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004024:	4b12      	ldr	r3, [pc, #72]	; (8004070 <HAL_InitTick+0x54>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4b12      	ldr	r3, [pc, #72]	; (8004074 <HAL_InitTick+0x58>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	4619      	mov	r1, r3
 800402e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004032:	fbb3 f3f1 	udiv	r3, r3, r1
 8004036:	fbb2 f3f3 	udiv	r3, r2, r3
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f93b 	bl	80042b6 <HAL_SYSTICK_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e00e      	b.n	8004068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b0f      	cmp	r3, #15
 800404e:	d80a      	bhi.n	8004066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004050:	2200      	movs	r2, #0
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004058:	f000 f903 	bl	8004262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800405c:	4a06      	ldr	r2, [pc, #24]	; (8004078 <HAL_InitTick+0x5c>)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	e000      	b.n	8004068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000004 	.word	0x20000004
 8004074:	2000000c 	.word	0x2000000c
 8004078:	20000008 	.word	0x20000008

0800407c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_IncTick+0x1c>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_IncTick+0x20>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4413      	add	r3, r2
 800408c:	4a03      	ldr	r2, [pc, #12]	; (800409c <HAL_IncTick+0x20>)
 800408e:	6013      	str	r3, [r2, #0]
}
 8004090:	bf00      	nop
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr
 8004098:	2000000c 	.word	0x2000000c
 800409c:	20000380 	.word	0x20000380

080040a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return uwTick;
 80040a4:	4b02      	ldr	r3, [pc, #8]	; (80040b0 <HAL_GetTick+0x10>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr
 80040b0:	20000380 	.word	0x20000380

080040b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <__NVIC_SetPriorityGrouping+0x44>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040d0:	4013      	ands	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040e6:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <__NVIC_SetPriorityGrouping+0x44>)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	60d3      	str	r3, [r2, #12]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	e000ed00 	.word	0xe000ed00

080040fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <__NVIC_GetPriorityGrouping+0x18>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	f003 0307 	and.w	r3, r3, #7
}
 800410a:	4618      	mov	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	2b00      	cmp	r3, #0
 8004128:	db0b      	blt.n	8004142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	f003 021f 	and.w	r2, r3, #31
 8004130:	4906      	ldr	r1, [pc, #24]	; (800414c <__NVIC_EnableIRQ+0x34>)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2001      	movs	r0, #1
 800413a:	fa00 f202 	lsl.w	r2, r0, r2
 800413e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	e000e100 	.word	0xe000e100

08004150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	6039      	str	r1, [r7, #0]
 800415a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800415c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004160:	2b00      	cmp	r3, #0
 8004162:	db0a      	blt.n	800417a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	b2da      	uxtb	r2, r3
 8004168:	490c      	ldr	r1, [pc, #48]	; (800419c <__NVIC_SetPriority+0x4c>)
 800416a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416e:	0112      	lsls	r2, r2, #4
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	440b      	add	r3, r1
 8004174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004178:	e00a      	b.n	8004190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4908      	ldr	r1, [pc, #32]	; (80041a0 <__NVIC_SetPriority+0x50>)
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	3b04      	subs	r3, #4
 8004188:	0112      	lsls	r2, r2, #4
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	440b      	add	r3, r1
 800418e:	761a      	strb	r2, [r3, #24]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	e000e100 	.word	0xe000e100
 80041a0:	e000ed00 	.word	0xe000ed00

080041a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b089      	sub	sp, #36	; 0x24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f1c3 0307 	rsb	r3, r3, #7
 80041be:	2b04      	cmp	r3, #4
 80041c0:	bf28      	it	cs
 80041c2:	2304      	movcs	r3, #4
 80041c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3304      	adds	r3, #4
 80041ca:	2b06      	cmp	r3, #6
 80041cc:	d902      	bls.n	80041d4 <NVIC_EncodePriority+0x30>
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3b03      	subs	r3, #3
 80041d2:	e000      	b.n	80041d6 <NVIC_EncodePriority+0x32>
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43da      	mvns	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	401a      	ands	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	fa01 f303 	lsl.w	r3, r1, r3
 80041f6:	43d9      	mvns	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041fc:	4313      	orrs	r3, r2
         );
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3724      	adds	r7, #36	; 0x24
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr

08004208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3b01      	subs	r3, #1
 8004214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004218:	d301      	bcc.n	800421e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800421a:	2301      	movs	r3, #1
 800421c:	e00f      	b.n	800423e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800421e:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <SysTick_Config+0x40>)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3b01      	subs	r3, #1
 8004224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004226:	210f      	movs	r1, #15
 8004228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800422c:	f7ff ff90 	bl	8004150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <SysTick_Config+0x40>)
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004236:	4b04      	ldr	r3, [pc, #16]	; (8004248 <SysTick_Config+0x40>)
 8004238:	2207      	movs	r2, #7
 800423a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	e000e010 	.word	0xe000e010

0800424c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ff2d 	bl	80040b4 <__NVIC_SetPriorityGrouping>
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004262:	b580      	push	{r7, lr}
 8004264:	b086      	sub	sp, #24
 8004266:	af00      	add	r7, sp, #0
 8004268:	4603      	mov	r3, r0
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	607a      	str	r2, [r7, #4]
 800426e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004274:	f7ff ff42 	bl	80040fc <__NVIC_GetPriorityGrouping>
 8004278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	6978      	ldr	r0, [r7, #20]
 8004280:	f7ff ff90 	bl	80041a4 <NVIC_EncodePriority>
 8004284:	4602      	mov	r2, r0
 8004286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff5f 	bl	8004150 <__NVIC_SetPriority>
}
 8004292:	bf00      	nop
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	4603      	mov	r3, r0
 80042a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff ff35 	bl	8004118 <__NVIC_EnableIRQ>
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ffa2 	bl	8004208 <SysTick_Config>
 80042c4:	4603      	mov	r3, r0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b08b      	sub	sp, #44	; 0x2c
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042da:	2300      	movs	r3, #0
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042de:	2300      	movs	r3, #0
 80042e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042e2:	e179      	b.n	80045d8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80042e4:	2201      	movs	r2, #1
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	f040 8168 	bne.w	80045d2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	4a96      	ldr	r2, [pc, #600]	; (8004560 <HAL_GPIO_Init+0x290>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d05e      	beq.n	80043ca <HAL_GPIO_Init+0xfa>
 800430c:	4a94      	ldr	r2, [pc, #592]	; (8004560 <HAL_GPIO_Init+0x290>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d875      	bhi.n	80043fe <HAL_GPIO_Init+0x12e>
 8004312:	4a94      	ldr	r2, [pc, #592]	; (8004564 <HAL_GPIO_Init+0x294>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d058      	beq.n	80043ca <HAL_GPIO_Init+0xfa>
 8004318:	4a92      	ldr	r2, [pc, #584]	; (8004564 <HAL_GPIO_Init+0x294>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d86f      	bhi.n	80043fe <HAL_GPIO_Init+0x12e>
 800431e:	4a92      	ldr	r2, [pc, #584]	; (8004568 <HAL_GPIO_Init+0x298>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d052      	beq.n	80043ca <HAL_GPIO_Init+0xfa>
 8004324:	4a90      	ldr	r2, [pc, #576]	; (8004568 <HAL_GPIO_Init+0x298>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d869      	bhi.n	80043fe <HAL_GPIO_Init+0x12e>
 800432a:	4a90      	ldr	r2, [pc, #576]	; (800456c <HAL_GPIO_Init+0x29c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d04c      	beq.n	80043ca <HAL_GPIO_Init+0xfa>
 8004330:	4a8e      	ldr	r2, [pc, #568]	; (800456c <HAL_GPIO_Init+0x29c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d863      	bhi.n	80043fe <HAL_GPIO_Init+0x12e>
 8004336:	4a8e      	ldr	r2, [pc, #568]	; (8004570 <HAL_GPIO_Init+0x2a0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d046      	beq.n	80043ca <HAL_GPIO_Init+0xfa>
 800433c:	4a8c      	ldr	r2, [pc, #560]	; (8004570 <HAL_GPIO_Init+0x2a0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d85d      	bhi.n	80043fe <HAL_GPIO_Init+0x12e>
 8004342:	2b12      	cmp	r3, #18
 8004344:	d82a      	bhi.n	800439c <HAL_GPIO_Init+0xcc>
 8004346:	2b12      	cmp	r3, #18
 8004348:	d859      	bhi.n	80043fe <HAL_GPIO_Init+0x12e>
 800434a:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <HAL_GPIO_Init+0x80>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	080043cb 	.word	0x080043cb
 8004354:	080043a5 	.word	0x080043a5
 8004358:	080043b7 	.word	0x080043b7
 800435c:	080043f9 	.word	0x080043f9
 8004360:	080043ff 	.word	0x080043ff
 8004364:	080043ff 	.word	0x080043ff
 8004368:	080043ff 	.word	0x080043ff
 800436c:	080043ff 	.word	0x080043ff
 8004370:	080043ff 	.word	0x080043ff
 8004374:	080043ff 	.word	0x080043ff
 8004378:	080043ff 	.word	0x080043ff
 800437c:	080043ff 	.word	0x080043ff
 8004380:	080043ff 	.word	0x080043ff
 8004384:	080043ff 	.word	0x080043ff
 8004388:	080043ff 	.word	0x080043ff
 800438c:	080043ff 	.word	0x080043ff
 8004390:	080043ff 	.word	0x080043ff
 8004394:	080043ad 	.word	0x080043ad
 8004398:	080043c1 	.word	0x080043c1
 800439c:	4a75      	ldr	r2, [pc, #468]	; (8004574 <HAL_GPIO_Init+0x2a4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80043a2:	e02c      	b.n	80043fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	623b      	str	r3, [r7, #32]
          break;
 80043aa:	e029      	b.n	8004400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	3304      	adds	r3, #4
 80043b2:	623b      	str	r3, [r7, #32]
          break;
 80043b4:	e024      	b.n	8004400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	3308      	adds	r3, #8
 80043bc:	623b      	str	r3, [r7, #32]
          break;
 80043be:	e01f      	b.n	8004400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	330c      	adds	r3, #12
 80043c6:	623b      	str	r3, [r7, #32]
          break;
 80043c8:	e01a      	b.n	8004400 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80043d2:	2304      	movs	r3, #4
 80043d4:	623b      	str	r3, [r7, #32]
          break;
 80043d6:	e013      	b.n	8004400 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d105      	bne.n	80043ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043e0:	2308      	movs	r3, #8
 80043e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	611a      	str	r2, [r3, #16]
          break;
 80043ea:	e009      	b.n	8004400 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043ec:	2308      	movs	r3, #8
 80043ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	615a      	str	r2, [r3, #20]
          break;
 80043f6:	e003      	b.n	8004400 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80043f8:	2300      	movs	r3, #0
 80043fa:	623b      	str	r3, [r7, #32]
          break;
 80043fc:	e000      	b.n	8004400 <HAL_GPIO_Init+0x130>
          break;
 80043fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	2bff      	cmp	r3, #255	; 0xff
 8004404:	d801      	bhi.n	800440a <HAL_GPIO_Init+0x13a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	e001      	b.n	800440e <HAL_GPIO_Init+0x13e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3304      	adds	r3, #4
 800440e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2bff      	cmp	r3, #255	; 0xff
 8004414:	d802      	bhi.n	800441c <HAL_GPIO_Init+0x14c>
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	e002      	b.n	8004422 <HAL_GPIO_Init+0x152>
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	3b08      	subs	r3, #8
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	210f      	movs	r1, #15
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	fa01 f303 	lsl.w	r3, r1, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	401a      	ands	r2, r3
 8004434:	6a39      	ldr	r1, [r7, #32]
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	fa01 f303 	lsl.w	r3, r1, r3
 800443c:	431a      	orrs	r2, r3
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80c1 	beq.w	80045d2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004450:	4b49      	ldr	r3, [pc, #292]	; (8004578 <HAL_GPIO_Init+0x2a8>)
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	4a48      	ldr	r2, [pc, #288]	; (8004578 <HAL_GPIO_Init+0x2a8>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6193      	str	r3, [r2, #24]
 800445c:	4b46      	ldr	r3, [pc, #280]	; (8004578 <HAL_GPIO_Init+0x2a8>)
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004468:	4a44      	ldr	r2, [pc, #272]	; (800457c <HAL_GPIO_Init+0x2ac>)
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	089b      	lsrs	r3, r3, #2
 800446e:	3302      	adds	r3, #2
 8004470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004474:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	220f      	movs	r2, #15
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4013      	ands	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a3c      	ldr	r2, [pc, #240]	; (8004580 <HAL_GPIO_Init+0x2b0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d01f      	beq.n	80044d4 <HAL_GPIO_Init+0x204>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a3b      	ldr	r2, [pc, #236]	; (8004584 <HAL_GPIO_Init+0x2b4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d019      	beq.n	80044d0 <HAL_GPIO_Init+0x200>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3a      	ldr	r2, [pc, #232]	; (8004588 <HAL_GPIO_Init+0x2b8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d013      	beq.n	80044cc <HAL_GPIO_Init+0x1fc>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a39      	ldr	r2, [pc, #228]	; (800458c <HAL_GPIO_Init+0x2bc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00d      	beq.n	80044c8 <HAL_GPIO_Init+0x1f8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a38      	ldr	r2, [pc, #224]	; (8004590 <HAL_GPIO_Init+0x2c0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d007      	beq.n	80044c4 <HAL_GPIO_Init+0x1f4>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a37      	ldr	r2, [pc, #220]	; (8004594 <HAL_GPIO_Init+0x2c4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d101      	bne.n	80044c0 <HAL_GPIO_Init+0x1f0>
 80044bc:	2305      	movs	r3, #5
 80044be:	e00a      	b.n	80044d6 <HAL_GPIO_Init+0x206>
 80044c0:	2306      	movs	r3, #6
 80044c2:	e008      	b.n	80044d6 <HAL_GPIO_Init+0x206>
 80044c4:	2304      	movs	r3, #4
 80044c6:	e006      	b.n	80044d6 <HAL_GPIO_Init+0x206>
 80044c8:	2303      	movs	r3, #3
 80044ca:	e004      	b.n	80044d6 <HAL_GPIO_Init+0x206>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e002      	b.n	80044d6 <HAL_GPIO_Init+0x206>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_GPIO_Init+0x206>
 80044d4:	2300      	movs	r3, #0
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	f002 0203 	and.w	r2, r2, #3
 80044dc:	0092      	lsls	r2, r2, #2
 80044de:	4093      	lsls	r3, r2
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80044e6:	4925      	ldr	r1, [pc, #148]	; (800457c <HAL_GPIO_Init+0x2ac>)
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	089b      	lsrs	r3, r3, #2
 80044ec:	3302      	adds	r3, #2
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d006      	beq.n	800450e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004500:	4b25      	ldr	r3, [pc, #148]	; (8004598 <HAL_GPIO_Init+0x2c8>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4924      	ldr	r1, [pc, #144]	; (8004598 <HAL_GPIO_Init+0x2c8>)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]
 800450c:	e006      	b.n	800451c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800450e:	4b22      	ldr	r3, [pc, #136]	; (8004598 <HAL_GPIO_Init+0x2c8>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	43db      	mvns	r3, r3
 8004516:	4920      	ldr	r1, [pc, #128]	; (8004598 <HAL_GPIO_Init+0x2c8>)
 8004518:	4013      	ands	r3, r2
 800451a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d006      	beq.n	8004536 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004528:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_GPIO_Init+0x2c8>)
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	491a      	ldr	r1, [pc, #104]	; (8004598 <HAL_GPIO_Init+0x2c8>)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	4313      	orrs	r3, r2
 8004532:	604b      	str	r3, [r1, #4]
 8004534:	e006      	b.n	8004544 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004536:	4b18      	ldr	r3, [pc, #96]	; (8004598 <HAL_GPIO_Init+0x2c8>)
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	43db      	mvns	r3, r3
 800453e:	4916      	ldr	r1, [pc, #88]	; (8004598 <HAL_GPIO_Init+0x2c8>)
 8004540:	4013      	ands	r3, r2
 8004542:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d025      	beq.n	800459c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004550:	4b11      	ldr	r3, [pc, #68]	; (8004598 <HAL_GPIO_Init+0x2c8>)
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	4910      	ldr	r1, [pc, #64]	; (8004598 <HAL_GPIO_Init+0x2c8>)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	4313      	orrs	r3, r2
 800455a:	608b      	str	r3, [r1, #8]
 800455c:	e025      	b.n	80045aa <HAL_GPIO_Init+0x2da>
 800455e:	bf00      	nop
 8004560:	10320000 	.word	0x10320000
 8004564:	10310000 	.word	0x10310000
 8004568:	10220000 	.word	0x10220000
 800456c:	10210000 	.word	0x10210000
 8004570:	10120000 	.word	0x10120000
 8004574:	10110000 	.word	0x10110000
 8004578:	40021000 	.word	0x40021000
 800457c:	40010000 	.word	0x40010000
 8004580:	40010800 	.word	0x40010800
 8004584:	40010c00 	.word	0x40010c00
 8004588:	40011000 	.word	0x40011000
 800458c:	40011400 	.word	0x40011400
 8004590:	40011800 	.word	0x40011800
 8004594:	40011c00 	.word	0x40011c00
 8004598:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800459c:	4b15      	ldr	r3, [pc, #84]	; (80045f4 <HAL_GPIO_Init+0x324>)
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	43db      	mvns	r3, r3
 80045a4:	4913      	ldr	r1, [pc, #76]	; (80045f4 <HAL_GPIO_Init+0x324>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d006      	beq.n	80045c4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80045b6:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <HAL_GPIO_Init+0x324>)
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	490e      	ldr	r1, [pc, #56]	; (80045f4 <HAL_GPIO_Init+0x324>)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60cb      	str	r3, [r1, #12]
 80045c2:	e006      	b.n	80045d2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <HAL_GPIO_Init+0x324>)
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	43db      	mvns	r3, r3
 80045cc:	4909      	ldr	r1, [pc, #36]	; (80045f4 <HAL_GPIO_Init+0x324>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	3301      	adds	r3, #1
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	fa22 f303 	lsr.w	r3, r2, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f47f ae7e 	bne.w	80042e4 <HAL_GPIO_Init+0x14>
  }
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	372c      	adds	r7, #44	; 0x2c
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	40010400 	.word	0x40010400

080045f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	887b      	ldrh	r3, [r7, #2]
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
 8004614:	e001      	b.n	800461a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004616:	2300      	movs	r3, #0
 8004618:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800461a:	7bfb      	ldrb	r3, [r7, #15]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	460b      	mov	r3, r1
 8004630:	807b      	strh	r3, [r7, #2]
 8004632:	4613      	mov	r3, r2
 8004634:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004636:	787b      	ldrb	r3, [r7, #1]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800463c:	887a      	ldrh	r2, [r7, #2]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004642:	e003      	b.n	800464c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004644:	887b      	ldrh	r3, [r7, #2]
 8004646:	041a      	lsls	r2, r3, #16
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	611a      	str	r2, [r3, #16]
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr
	...

08004658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e12b      	b.n	80048c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff fa14 	bl	8003aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2224      	movs	r2, #36	; 0x24
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046bc:	f002 f85c 	bl	8006778 <HAL_RCC_GetPCLK1Freq>
 80046c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	4a81      	ldr	r2, [pc, #516]	; (80048cc <HAL_I2C_Init+0x274>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d807      	bhi.n	80046dc <HAL_I2C_Init+0x84>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a80      	ldr	r2, [pc, #512]	; (80048d0 <HAL_I2C_Init+0x278>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	bf94      	ite	ls
 80046d4:	2301      	movls	r3, #1
 80046d6:	2300      	movhi	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e006      	b.n	80046ea <HAL_I2C_Init+0x92>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4a7d      	ldr	r2, [pc, #500]	; (80048d4 <HAL_I2C_Init+0x27c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	bf94      	ite	ls
 80046e4:	2301      	movls	r3, #1
 80046e6:	2300      	movhi	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e0e7      	b.n	80048c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4a78      	ldr	r2, [pc, #480]	; (80048d8 <HAL_I2C_Init+0x280>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	0c9b      	lsrs	r3, r3, #18
 80046fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4a6a      	ldr	r2, [pc, #424]	; (80048cc <HAL_I2C_Init+0x274>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d802      	bhi.n	800472c <HAL_I2C_Init+0xd4>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	3301      	adds	r3, #1
 800472a:	e009      	b.n	8004740 <HAL_I2C_Init+0xe8>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	4a69      	ldr	r2, [pc, #420]	; (80048dc <HAL_I2C_Init+0x284>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	099b      	lsrs	r3, r3, #6
 800473e:	3301      	adds	r3, #1
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	430b      	orrs	r3, r1
 8004746:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004752:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	495c      	ldr	r1, [pc, #368]	; (80048cc <HAL_I2C_Init+0x274>)
 800475c:	428b      	cmp	r3, r1
 800475e:	d819      	bhi.n	8004794 <HAL_I2C_Init+0x13c>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	1e59      	subs	r1, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	fbb1 f3f3 	udiv	r3, r1, r3
 800476e:	1c59      	adds	r1, r3, #1
 8004770:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004774:	400b      	ands	r3, r1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_I2C_Init+0x138>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1e59      	subs	r1, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	fbb1 f3f3 	udiv	r3, r1, r3
 8004788:	3301      	adds	r3, #1
 800478a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800478e:	e051      	b.n	8004834 <HAL_I2C_Init+0x1dc>
 8004790:	2304      	movs	r3, #4
 8004792:	e04f      	b.n	8004834 <HAL_I2C_Init+0x1dc>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d111      	bne.n	80047c0 <HAL_I2C_Init+0x168>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	1e58      	subs	r0, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6859      	ldr	r1, [r3, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	440b      	add	r3, r1
 80047aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ae:	3301      	adds	r3, #1
 80047b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e012      	b.n	80047e6 <HAL_I2C_Init+0x18e>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1e58      	subs	r0, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6859      	ldr	r1, [r3, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	0099      	lsls	r1, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d6:	3301      	adds	r3, #1
 80047d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_Init+0x196>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e022      	b.n	8004834 <HAL_I2C_Init+0x1dc>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10e      	bne.n	8004814 <HAL_I2C_Init+0x1bc>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1e58      	subs	r0, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6859      	ldr	r1, [r3, #4]
 80047fe:	460b      	mov	r3, r1
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	440b      	add	r3, r1
 8004804:	fbb0 f3f3 	udiv	r3, r0, r3
 8004808:	3301      	adds	r3, #1
 800480a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800480e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004812:	e00f      	b.n	8004834 <HAL_I2C_Init+0x1dc>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1e58      	subs	r0, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	0099      	lsls	r1, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	fbb0 f3f3 	udiv	r3, r0, r3
 800482a:	3301      	adds	r3, #1
 800482c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004830:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	6809      	ldr	r1, [r1, #0]
 8004838:	4313      	orrs	r3, r2
 800483a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69da      	ldr	r2, [r3, #28]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004862:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6911      	ldr	r1, [r2, #16]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68d2      	ldr	r2, [r2, #12]
 800486e:	4311      	orrs	r1, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6812      	ldr	r2, [r2, #0]
 8004874:	430b      	orrs	r3, r1
 8004876:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	000186a0 	.word	0x000186a0
 80048d0:	001e847f 	.word	0x001e847f
 80048d4:	003d08ff 	.word	0x003d08ff
 80048d8:	431bde83 	.word	0x431bde83
 80048dc:	10624dd3 	.word	0x10624dd3

080048e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	461a      	mov	r2, r3
 80048ec:	460b      	mov	r3, r1
 80048ee:	817b      	strh	r3, [r7, #10]
 80048f0:	4613      	mov	r3, r2
 80048f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048f4:	f7ff fbd4 	bl	80040a0 <HAL_GetTick>
 80048f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b20      	cmp	r3, #32
 8004904:	f040 80e0 	bne.w	8004ac8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	2319      	movs	r3, #25
 800490e:	2201      	movs	r2, #1
 8004910:	4970      	ldr	r1, [pc, #448]	; (8004ad4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f001 f972 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800491e:	2302      	movs	r3, #2
 8004920:	e0d3      	b.n	8004aca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_I2C_Master_Transmit+0x50>
 800492c:	2302      	movs	r3, #2
 800492e:	e0cc      	b.n	8004aca <HAL_I2C_Master_Transmit+0x1ea>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b01      	cmp	r3, #1
 8004944:	d007      	beq.n	8004956 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0201 	orr.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004964:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2221      	movs	r2, #33	; 0x21
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2210      	movs	r2, #16
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	893a      	ldrh	r2, [r7, #8]
 8004986:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4a50      	ldr	r2, [pc, #320]	; (8004ad8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004996:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004998:	8979      	ldrh	r1, [r7, #10]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	6a3a      	ldr	r2, [r7, #32]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fe5e 	bl	8005660 <I2C_MasterRequestWrite>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e08d      	b.n	8004aca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049c4:	e066      	b.n	8004a94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	6a39      	ldr	r1, [r7, #32]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f001 f9ec 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00d      	beq.n	80049f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d107      	bne.n	80049ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e06b      	b.n	8004aca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d11b      	bne.n	8004a68 <HAL_I2C_Master_Transmit+0x188>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d017      	beq.n	8004a68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	781a      	ldrb	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	6a39      	ldr	r1, [r7, #32]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f001 f9dc 	bl	8005e2a <I2C_WaitOnBTFFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00d      	beq.n	8004a94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d107      	bne.n	8004a90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e01a      	b.n	8004aca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d194      	bne.n	80049c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e000      	b.n	8004aca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ac8:	2302      	movs	r3, #2
  }
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	00100002 	.word	0x00100002
 8004ad8:	ffff0000 	.word	0xffff0000

08004adc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08c      	sub	sp, #48	; 0x30
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	460b      	mov	r3, r1
 8004aea:	817b      	strh	r3, [r7, #10]
 8004aec:	4613      	mov	r3, r2
 8004aee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004af4:	f7ff fad4 	bl	80040a0 <HAL_GetTick>
 8004af8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	f040 823f 	bne.w	8004f86 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	2319      	movs	r3, #25
 8004b0e:	2201      	movs	r2, #1
 8004b10:	497f      	ldr	r1, [pc, #508]	; (8004d10 <HAL_I2C_Master_Receive+0x234>)
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f001 f872 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e232      	b.n	8004f88 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_I2C_Master_Receive+0x54>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e22b      	b.n	8004f88 <HAL_I2C_Master_Receive+0x4ac>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d007      	beq.n	8004b56 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0201 	orr.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2222      	movs	r2, #34	; 0x22
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2210      	movs	r2, #16
 8004b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	893a      	ldrh	r2, [r7, #8]
 8004b86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4a5f      	ldr	r2, [pc, #380]	; (8004d14 <HAL_I2C_Master_Receive+0x238>)
 8004b96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b98:	8979      	ldrh	r1, [r7, #10]
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fde0 	bl	8005764 <I2C_MasterRequestRead>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e1ec      	b.n	8004f88 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d113      	bne.n	8004bde <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	e1c0      	b.n	8004f60 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d11e      	bne.n	8004c24 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bf6:	b672      	cpsid	i
}
 8004bf8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c20:	b662      	cpsie	i
}
 8004c22:	e035      	b.n	8004c90 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d11e      	bne.n	8004c6a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c3c:	b672      	cpsid	i
}
 8004c3e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c66:	b662      	cpsie	i
}
 8004c68:	e012      	b.n	8004c90 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004c90:	e166      	b.n	8004f60 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	f200 811f 	bhi.w	8004eda <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d123      	bne.n	8004cec <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f001 f8ff 	bl	8005eac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e167      	b.n	8004f88 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691a      	ldr	r2, [r3, #16]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cea:	e139      	b.n	8004f60 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d152      	bne.n	8004d9a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	4906      	ldr	r1, [pc, #24]	; (8004d18 <HAL_I2C_Master_Receive+0x23c>)
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 ff7c 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d008      	beq.n	8004d1c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e13c      	b.n	8004f88 <HAL_I2C_Master_Receive+0x4ac>
 8004d0e:	bf00      	nop
 8004d10:	00100002 	.word	0x00100002
 8004d14:	ffff0000 	.word	0xffff0000
 8004d18:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004d1c:	b672      	cpsid	i
}
 8004d1e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d62:	b662      	cpsie	i
}
 8004d64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d98:	e0e2      	b.n	8004f60 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	2200      	movs	r2, #0
 8004da2:	497b      	ldr	r1, [pc, #492]	; (8004f90 <HAL_I2C_Master_Receive+0x4b4>)
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 ff29 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0e9      	b.n	8004f88 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004dc4:	b672      	cpsid	i
}
 8004dc6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004dfa:	4b66      	ldr	r3, [pc, #408]	; (8004f94 <HAL_I2C_Master_Receive+0x4b8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	08db      	lsrs	r3, r3, #3
 8004e00:	4a65      	ldr	r2, [pc, #404]	; (8004f98 <HAL_I2C_Master_Receive+0x4bc>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	0a1a      	lsrs	r2, r3, #8
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	00da      	lsls	r2, r3, #3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d118      	bne.n	8004e52 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f043 0220 	orr.w	r2, r3, #32
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004e42:	b662      	cpsie	i
}
 8004e44:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e09a      	b.n	8004f88 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d1d9      	bne.n	8004e14 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ea2:	b662      	cpsie	i
}
 8004ea4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ed8:	e042      	b.n	8004f60 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004edc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 ffe4 	bl	8005eac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e04c      	b.n	8004f88 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d118      	bne.n	8004f60 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f47f ae94 	bne.w	8004c92 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	e000      	b.n	8004f88 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8004f86:	2302      	movs	r3, #2
  }
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3728      	adds	r7, #40	; 0x28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	00010004 	.word	0x00010004
 8004f94:	20000004 	.word	0x20000004
 8004f98:	14f8b589 	.word	0x14f8b589

08004f9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4603      	mov	r3, r0
 8004fac:	817b      	strh	r3, [r7, #10]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	813b      	strh	r3, [r7, #8]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fb6:	f7ff f873 	bl	80040a0 <HAL_GetTick>
 8004fba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	f040 80d9 	bne.w	800517c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	2319      	movs	r3, #25
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	496d      	ldr	r1, [pc, #436]	; (8005188 <HAL_I2C_Mem_Write+0x1ec>)
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 fe11 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e0cc      	b.n	800517e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_I2C_Mem_Write+0x56>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e0c5      	b.n	800517e <HAL_I2C_Mem_Write+0x1e2>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b01      	cmp	r3, #1
 8005006:	d007      	beq.n	8005018 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005026:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2221      	movs	r2, #33	; 0x21
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2240      	movs	r2, #64	; 0x40
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a3a      	ldr	r2, [r7, #32]
 8005042:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005048:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4a4d      	ldr	r2, [pc, #308]	; (800518c <HAL_I2C_Mem_Write+0x1f0>)
 8005058:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800505a:	88f8      	ldrh	r0, [r7, #6]
 800505c:	893a      	ldrh	r2, [r7, #8]
 800505e:	8979      	ldrh	r1, [r7, #10]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	9301      	str	r3, [sp, #4]
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	4603      	mov	r3, r0
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fc48 	bl	8005900 <I2C_RequestMemoryWrite>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d052      	beq.n	800511c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e081      	b.n	800517e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 fe92 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00d      	beq.n	80050a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	2b04      	cmp	r3, #4
 8005090:	d107      	bne.n	80050a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e06b      	b.n	800517e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	781a      	ldrb	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d11b      	bne.n	800511c <HAL_I2C_Mem_Write+0x180>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d017      	beq.n	800511c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	781a      	ldrb	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1aa      	bne.n	800507a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 fe7e 	bl	8005e2a <I2C_WaitOnBTFFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00d      	beq.n	8005150 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	2b04      	cmp	r3, #4
 800513a:	d107      	bne.n	800514c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e016      	b.n	800517e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	e000      	b.n	800517e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800517c:	2302      	movs	r3, #2
  }
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	00100002 	.word	0x00100002
 800518c:	ffff0000 	.word	0xffff0000

08005190 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08c      	sub	sp, #48	; 0x30
 8005194:	af02      	add	r7, sp, #8
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	4608      	mov	r0, r1
 800519a:	4611      	mov	r1, r2
 800519c:	461a      	mov	r2, r3
 800519e:	4603      	mov	r3, r0
 80051a0:	817b      	strh	r3, [r7, #10]
 80051a2:	460b      	mov	r3, r1
 80051a4:	813b      	strh	r3, [r7, #8]
 80051a6:	4613      	mov	r3, r2
 80051a8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051ae:	f7fe ff77 	bl	80040a0 <HAL_GetTick>
 80051b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b20      	cmp	r3, #32
 80051be:	f040 8244 	bne.w	800564a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	2319      	movs	r3, #25
 80051c8:	2201      	movs	r2, #1
 80051ca:	4982      	ldr	r1, [pc, #520]	; (80053d4 <HAL_I2C_Mem_Read+0x244>)
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 fd15 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80051d8:	2302      	movs	r3, #2
 80051da:	e237      	b.n	800564c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_I2C_Mem_Read+0x5a>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e230      	b.n	800564c <HAL_I2C_Mem_Read+0x4bc>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d007      	beq.n	8005210 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800521e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2222      	movs	r2, #34	; 0x22
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2240      	movs	r2, #64	; 0x40
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005240:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4a62      	ldr	r2, [pc, #392]	; (80053d8 <HAL_I2C_Mem_Read+0x248>)
 8005250:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005252:	88f8      	ldrh	r0, [r7, #6]
 8005254:	893a      	ldrh	r2, [r7, #8]
 8005256:	8979      	ldrh	r1, [r7, #10]
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	9301      	str	r3, [sp, #4]
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	4603      	mov	r3, r0
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 fbe2 	bl	8005a2c <I2C_RequestMemoryRead>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e1ec      	b.n	800564c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	d113      	bne.n	80052a2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e1c0      	b.n	8005624 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d11e      	bne.n	80052e8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80052ba:	b672      	cpsid	i
}
 80052bc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052be:	2300      	movs	r3, #0
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80052e4:	b662      	cpsie	i
}
 80052e6:	e035      	b.n	8005354 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d11e      	bne.n	800532e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005300:	b672      	cpsid	i
}
 8005302:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005328:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800532a:	b662      	cpsie	i
}
 800532c:	e012      	b.n	8005354 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800533c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005354:	e166      	b.n	8005624 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535a:	2b03      	cmp	r3, #3
 800535c:	f200 811f 	bhi.w	800559e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005364:	2b01      	cmp	r3, #1
 8005366:	d123      	bne.n	80053b0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800536a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 fd9d 	bl	8005eac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e167      	b.n	800564c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053ae:	e139      	b.n	8005624 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d152      	bne.n	800545e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	2200      	movs	r2, #0
 80053c0:	4906      	ldr	r1, [pc, #24]	; (80053dc <HAL_I2C_Mem_Read+0x24c>)
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 fc1a 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e13c      	b.n	800564c <HAL_I2C_Mem_Read+0x4bc>
 80053d2:	bf00      	nop
 80053d4:	00100002 	.word	0x00100002
 80053d8:	ffff0000 	.word	0xffff0000
 80053dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80053e0:	b672      	cpsid	i
}
 80053e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005426:	b662      	cpsie	i
}
 8005428:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005446:	3b01      	subs	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800545c:	e0e2      	b.n	8005624 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	2200      	movs	r2, #0
 8005466:	497b      	ldr	r1, [pc, #492]	; (8005654 <HAL_I2C_Mem_Read+0x4c4>)
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 fbc7 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0e9      	b.n	800564c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005486:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005488:	b672      	cpsid	i
}
 800548a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80054be:	4b66      	ldr	r3, [pc, #408]	; (8005658 <HAL_I2C_Mem_Read+0x4c8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	08db      	lsrs	r3, r3, #3
 80054c4:	4a65      	ldr	r2, [pc, #404]	; (800565c <HAL_I2C_Mem_Read+0x4cc>)
 80054c6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ca:	0a1a      	lsrs	r2, r3, #8
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	00da      	lsls	r2, r3, #3
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	3b01      	subs	r3, #1
 80054dc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d118      	bne.n	8005516 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f043 0220 	orr.w	r2, r3, #32
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005506:	b662      	cpsie	i
}
 8005508:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e09a      	b.n	800564c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b04      	cmp	r3, #4
 8005522:	d1d9      	bne.n	80054d8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005532:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005566:	b662      	cpsie	i
}
 8005568:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005586:	3b01      	subs	r3, #1
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800559c:	e042      	b.n	8005624 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800559e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 fc82 	bl	8005eac <I2C_WaitOnRXNEFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e04c      	b.n	800564c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d118      	bne.n	8005624 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560e:	3b01      	subs	r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005628:	2b00      	cmp	r3, #0
 800562a:	f47f ae94 	bne.w	8005356 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	e000      	b.n	800564c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800564a:	2302      	movs	r3, #2
  }
}
 800564c:	4618      	mov	r0, r3
 800564e:	3728      	adds	r7, #40	; 0x28
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	00010004 	.word	0x00010004
 8005658:	20000004 	.word	0x20000004
 800565c:	14f8b589 	.word	0x14f8b589

08005660 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af02      	add	r7, sp, #8
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	460b      	mov	r3, r1
 800566e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b08      	cmp	r3, #8
 800567a:	d006      	beq.n	800568a <I2C_MasterRequestWrite+0x2a>
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d003      	beq.n	800568a <I2C_MasterRequestWrite+0x2a>
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005688:	d108      	bne.n	800569c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	e00b      	b.n	80056b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	2b12      	cmp	r3, #18
 80056a2:	d107      	bne.n	80056b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fa9b 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00d      	beq.n	80056e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056da:	d103      	bne.n	80056e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e035      	b.n	8005754 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f0:	d108      	bne.n	8005704 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056f2:	897b      	ldrh	r3, [r7, #10]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005700:	611a      	str	r2, [r3, #16]
 8005702:	e01b      	b.n	800573c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005704:	897b      	ldrh	r3, [r7, #10]
 8005706:	11db      	asrs	r3, r3, #7
 8005708:	b2db      	uxtb	r3, r3
 800570a:	f003 0306 	and.w	r3, r3, #6
 800570e:	b2db      	uxtb	r3, r3
 8005710:	f063 030f 	orn	r3, r3, #15
 8005714:	b2da      	uxtb	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	490e      	ldr	r1, [pc, #56]	; (800575c <I2C_MasterRequestWrite+0xfc>)
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 fac1 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e010      	b.n	8005754 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005732:	897b      	ldrh	r3, [r7, #10]
 8005734:	b2da      	uxtb	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	4907      	ldr	r1, [pc, #28]	; (8005760 <I2C_MasterRequestWrite+0x100>)
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 fab1 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	00010008 	.word	0x00010008
 8005760:	00010002 	.word	0x00010002

08005764 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	607a      	str	r2, [r7, #4]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	460b      	mov	r3, r1
 8005772:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005788:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b08      	cmp	r3, #8
 800578e:	d006      	beq.n	800579e <I2C_MasterRequestRead+0x3a>
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d003      	beq.n	800579e <I2C_MasterRequestRead+0x3a>
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800579c:	d108      	bne.n	80057b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	e00b      	b.n	80057c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b4:	2b11      	cmp	r3, #17
 80057b6:	d107      	bne.n	80057c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 fa11 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00d      	beq.n	80057fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ee:	d103      	bne.n	80057f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e079      	b.n	80058f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005804:	d108      	bne.n	8005818 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005806:	897b      	ldrh	r3, [r7, #10]
 8005808:	b2db      	uxtb	r3, r3
 800580a:	f043 0301 	orr.w	r3, r3, #1
 800580e:	b2da      	uxtb	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	611a      	str	r2, [r3, #16]
 8005816:	e05f      	b.n	80058d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005818:	897b      	ldrh	r3, [r7, #10]
 800581a:	11db      	asrs	r3, r3, #7
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f003 0306 	and.w	r3, r3, #6
 8005822:	b2db      	uxtb	r3, r3
 8005824:	f063 030f 	orn	r3, r3, #15
 8005828:	b2da      	uxtb	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	4930      	ldr	r1, [pc, #192]	; (80058f8 <I2C_MasterRequestRead+0x194>)
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fa37 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e054      	b.n	80058f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005846:	897b      	ldrh	r3, [r7, #10]
 8005848:	b2da      	uxtb	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	4929      	ldr	r1, [pc, #164]	; (80058fc <I2C_MasterRequestRead+0x198>)
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fa27 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e044      	b.n	80058f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005866:	2300      	movs	r3, #0
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800588a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 f9af 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00d      	beq.n	80058c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b2:	d103      	bne.n	80058bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e017      	b.n	80058f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80058c0:	897b      	ldrh	r3, [r7, #10]
 80058c2:	11db      	asrs	r3, r3, #7
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	f003 0306 	and.w	r3, r3, #6
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	f063 030e 	orn	r3, r3, #14
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	4907      	ldr	r1, [pc, #28]	; (80058fc <I2C_MasterRequestRead+0x198>)
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f9e3 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	00010008 	.word	0x00010008
 80058fc:	00010002 	.word	0x00010002

08005900 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	4608      	mov	r0, r1
 800590a:	4611      	mov	r1, r2
 800590c:	461a      	mov	r2, r3
 800590e:	4603      	mov	r3, r0
 8005910:	817b      	strh	r3, [r7, #10]
 8005912:	460b      	mov	r3, r1
 8005914:	813b      	strh	r3, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005928:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	2200      	movs	r2, #0
 8005932:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f960 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00d      	beq.n	800595e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005950:	d103      	bne.n	800595a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005958:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e05f      	b.n	8005a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800595e:	897b      	ldrh	r3, [r7, #10]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	461a      	mov	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800596c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	6a3a      	ldr	r2, [r7, #32]
 8005972:	492d      	ldr	r1, [pc, #180]	; (8005a28 <I2C_RequestMemoryWrite+0x128>)
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f998 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e04c      	b.n	8005a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800599a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599c:	6a39      	ldr	r1, [r7, #32]
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fa02 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00d      	beq.n	80059c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d107      	bne.n	80059c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e02b      	b.n	8005a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d105      	bne.n	80059d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059cc:	893b      	ldrh	r3, [r7, #8]
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	611a      	str	r2, [r3, #16]
 80059d6:	e021      	b.n	8005a1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059d8:	893b      	ldrh	r3, [r7, #8]
 80059da:	0a1b      	lsrs	r3, r3, #8
 80059dc:	b29b      	uxth	r3, r3
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e8:	6a39      	ldr	r1, [r7, #32]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 f9dc 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00d      	beq.n	8005a12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d107      	bne.n	8005a0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e005      	b.n	8005a1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a12:	893b      	ldrh	r3, [r7, #8]
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	00010002 	.word	0x00010002

08005a2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	817b      	strh	r3, [r7, #10]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	813b      	strh	r3, [r7, #8]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f8c2 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8c:	d103      	bne.n	8005a96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e0aa      	b.n	8005bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a9a:	897b      	ldrh	r3, [r7, #10]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005aa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	6a3a      	ldr	r2, [r7, #32]
 8005aae:	4952      	ldr	r1, [pc, #328]	; (8005bf8 <I2C_RequestMemoryRead+0x1cc>)
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 f8fa 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e097      	b.n	8005bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad8:	6a39      	ldr	r1, [r7, #32]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f964 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00d      	beq.n	8005b02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d107      	bne.n	8005afe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005afc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e076      	b.n	8005bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d105      	bne.n	8005b14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b08:	893b      	ldrh	r3, [r7, #8]
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	611a      	str	r2, [r3, #16]
 8005b12:	e021      	b.n	8005b58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b14:	893b      	ldrh	r3, [r7, #8]
 8005b16:	0a1b      	lsrs	r3, r3, #8
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b24:	6a39      	ldr	r1, [r7, #32]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 f93e 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00d      	beq.n	8005b4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d107      	bne.n	8005b4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e050      	b.n	8005bf0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b4e:	893b      	ldrh	r3, [r7, #8]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5a:	6a39      	ldr	r1, [r7, #32]
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f923 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00d      	beq.n	8005b84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d107      	bne.n	8005b80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e035      	b.n	8005bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f82b 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00d      	beq.n	8005bc8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bba:	d103      	bne.n	8005bc4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e013      	b.n	8005bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bc8:	897b      	ldrh	r3, [r7, #10]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	6a3a      	ldr	r2, [r7, #32]
 8005bdc:	4906      	ldr	r1, [pc, #24]	; (8005bf8 <I2C_RequestMemoryRead+0x1cc>)
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f863 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	00010002 	.word	0x00010002

08005bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c0c:	e025      	b.n	8005c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c14:	d021      	beq.n	8005c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c16:	f7fe fa43 	bl	80040a0 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d302      	bcc.n	8005c2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d116      	bne.n	8005c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f043 0220 	orr.w	r2, r3, #32
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e023      	b.n	8005ca2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d10d      	bne.n	8005c80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	43da      	mvns	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bf0c      	ite	eq
 8005c76:	2301      	moveq	r3, #1
 8005c78:	2300      	movne	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	e00c      	b.n	8005c9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	43da      	mvns	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bf0c      	ite	eq
 8005c92:	2301      	moveq	r3, #1
 8005c94:	2300      	movne	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d0b6      	beq.n	8005c0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cb8:	e051      	b.n	8005d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc8:	d123      	bne.n	8005d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ce2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	f043 0204 	orr.w	r2, r3, #4
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e046      	b.n	8005da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d18:	d021      	beq.n	8005d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1a:	f7fe f9c1 	bl	80040a0 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d116      	bne.n	8005d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	f043 0220 	orr.w	r2, r3, #32
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e020      	b.n	8005da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d10c      	bne.n	8005d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	43da      	mvns	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4013      	ands	r3, r2
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bf14      	ite	ne
 8005d7a:	2301      	movne	r3, #1
 8005d7c:	2300      	moveq	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	e00b      	b.n	8005d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	43da      	mvns	r2, r3
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bf14      	ite	ne
 8005d94:	2301      	movne	r3, #1
 8005d96:	2300      	moveq	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d18d      	bne.n	8005cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005db4:	e02d      	b.n	8005e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f8ce 	bl	8005f58 <I2C_IsAcknowledgeFailed>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e02d      	b.n	8005e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dcc:	d021      	beq.n	8005e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dce:	f7fe f967 	bl	80040a0 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d302      	bcc.n	8005de4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d116      	bne.n	8005e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f043 0220 	orr.w	r2, r3, #32
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e007      	b.n	8005e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1c:	2b80      	cmp	r3, #128	; 0x80
 8005e1e:	d1ca      	bne.n	8005db6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e36:	e02d      	b.n	8005e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f88d 	bl	8005f58 <I2C_IsAcknowledgeFailed>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e02d      	b.n	8005ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e4e:	d021      	beq.n	8005e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e50:	f7fe f926 	bl	80040a0 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d302      	bcc.n	8005e66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d116      	bne.n	8005e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	f043 0220 	orr.w	r2, r3, #32
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e007      	b.n	8005ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d1ca      	bne.n	8005e38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005eb8:	e042      	b.n	8005f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d119      	bne.n	8005efc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0210 	mvn.w	r2, #16
 8005ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e029      	b.n	8005f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efc:	f7fe f8d0 	bl	80040a0 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d302      	bcc.n	8005f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d116      	bne.n	8005f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	f043 0220 	orr.w	r2, r3, #32
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e007      	b.n	8005f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d1b5      	bne.n	8005eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f6e:	d11b      	bne.n	8005fa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	f043 0204 	orr.w	r2, r3, #4
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005fb8:	4b03      	ldr	r3, [pc, #12]	; (8005fc8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005fba:	2201      	movs	r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]
}
 8005fbe:	bf00      	nop
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	420e0020 	.word	0x420e0020

08005fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e272      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8087 	beq.w	80060fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fec:	4b92      	ldr	r3, [pc, #584]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f003 030c 	and.w	r3, r3, #12
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d00c      	beq.n	8006012 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ff8:	4b8f      	ldr	r3, [pc, #572]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f003 030c 	and.w	r3, r3, #12
 8006000:	2b08      	cmp	r3, #8
 8006002:	d112      	bne.n	800602a <HAL_RCC_OscConfig+0x5e>
 8006004:	4b8c      	ldr	r3, [pc, #560]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800600c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006010:	d10b      	bne.n	800602a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006012:	4b89      	ldr	r3, [pc, #548]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d06c      	beq.n	80060f8 <HAL_RCC_OscConfig+0x12c>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d168      	bne.n	80060f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e24c      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006032:	d106      	bne.n	8006042 <HAL_RCC_OscConfig+0x76>
 8006034:	4b80      	ldr	r3, [pc, #512]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a7f      	ldr	r2, [pc, #508]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 800603a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	e02e      	b.n	80060a0 <HAL_RCC_OscConfig+0xd4>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10c      	bne.n	8006064 <HAL_RCC_OscConfig+0x98>
 800604a:	4b7b      	ldr	r3, [pc, #492]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a7a      	ldr	r2, [pc, #488]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	4b78      	ldr	r3, [pc, #480]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a77      	ldr	r2, [pc, #476]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 800605c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	e01d      	b.n	80060a0 <HAL_RCC_OscConfig+0xd4>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800606c:	d10c      	bne.n	8006088 <HAL_RCC_OscConfig+0xbc>
 800606e:	4b72      	ldr	r3, [pc, #456]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a71      	ldr	r2, [pc, #452]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	4b6f      	ldr	r3, [pc, #444]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a6e      	ldr	r2, [pc, #440]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	e00b      	b.n	80060a0 <HAL_RCC_OscConfig+0xd4>
 8006088:	4b6b      	ldr	r3, [pc, #428]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a6a      	ldr	r2, [pc, #424]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 800608e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	4b68      	ldr	r3, [pc, #416]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a67      	ldr	r2, [pc, #412]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 800609a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800609e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d013      	beq.n	80060d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a8:	f7fd fffa 	bl	80040a0 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b0:	f7fd fff6 	bl	80040a0 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b64      	cmp	r3, #100	; 0x64
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e200      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060c2:	4b5d      	ldr	r3, [pc, #372]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0f0      	beq.n	80060b0 <HAL_RCC_OscConfig+0xe4>
 80060ce:	e014      	b.n	80060fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d0:	f7fd ffe6 	bl	80040a0 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060d8:	f7fd ffe2 	bl	80040a0 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b64      	cmp	r3, #100	; 0x64
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e1ec      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ea:	4b53      	ldr	r3, [pc, #332]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f0      	bne.n	80060d8 <HAL_RCC_OscConfig+0x10c>
 80060f6:	e000      	b.n	80060fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d063      	beq.n	80061ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006106:	4b4c      	ldr	r3, [pc, #304]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f003 030c 	and.w	r3, r3, #12
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00b      	beq.n	800612a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006112:	4b49      	ldr	r3, [pc, #292]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f003 030c 	and.w	r3, r3, #12
 800611a:	2b08      	cmp	r3, #8
 800611c:	d11c      	bne.n	8006158 <HAL_RCC_OscConfig+0x18c>
 800611e:	4b46      	ldr	r3, [pc, #280]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d116      	bne.n	8006158 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800612a:	4b43      	ldr	r3, [pc, #268]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d005      	beq.n	8006142 <HAL_RCC_OscConfig+0x176>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d001      	beq.n	8006142 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e1c0      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006142:	4b3d      	ldr	r3, [pc, #244]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4939      	ldr	r1, [pc, #228]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006152:	4313      	orrs	r3, r2
 8006154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006156:	e03a      	b.n	80061ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d020      	beq.n	80061a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006160:	4b36      	ldr	r3, [pc, #216]	; (800623c <HAL_RCC_OscConfig+0x270>)
 8006162:	2201      	movs	r2, #1
 8006164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006166:	f7fd ff9b 	bl	80040a0 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800616c:	e008      	b.n	8006180 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800616e:	f7fd ff97 	bl	80040a0 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e1a1      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006180:	4b2d      	ldr	r3, [pc, #180]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0f0      	beq.n	800616e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800618c:	4b2a      	ldr	r3, [pc, #168]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	4927      	ldr	r1, [pc, #156]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 800619c:	4313      	orrs	r3, r2
 800619e:	600b      	str	r3, [r1, #0]
 80061a0:	e015      	b.n	80061ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061a2:	4b26      	ldr	r3, [pc, #152]	; (800623c <HAL_RCC_OscConfig+0x270>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a8:	f7fd ff7a 	bl	80040a0 <HAL_GetTick>
 80061ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061b0:	f7fd ff76 	bl	80040a0 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e180      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061c2:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f0      	bne.n	80061b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d03a      	beq.n	8006250 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d019      	beq.n	8006216 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061e2:	4b17      	ldr	r3, [pc, #92]	; (8006240 <HAL_RCC_OscConfig+0x274>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061e8:	f7fd ff5a 	bl	80040a0 <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061f0:	f7fd ff56 	bl	80040a0 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e160      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006202:	4b0d      	ldr	r3, [pc, #52]	; (8006238 <HAL_RCC_OscConfig+0x26c>)
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0f0      	beq.n	80061f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800620e:	2001      	movs	r0, #1
 8006210:	f000 fada 	bl	80067c8 <RCC_Delay>
 8006214:	e01c      	b.n	8006250 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006216:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <HAL_RCC_OscConfig+0x274>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800621c:	f7fd ff40 	bl	80040a0 <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006222:	e00f      	b.n	8006244 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006224:	f7fd ff3c 	bl	80040a0 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d908      	bls.n	8006244 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e146      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
 8006236:	bf00      	nop
 8006238:	40021000 	.word	0x40021000
 800623c:	42420000 	.word	0x42420000
 8006240:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006244:	4b92      	ldr	r3, [pc, #584]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e9      	bne.n	8006224 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80a6 	beq.w	80063aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800625e:	2300      	movs	r3, #0
 8006260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006262:	4b8b      	ldr	r3, [pc, #556]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10d      	bne.n	800628a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800626e:	4b88      	ldr	r3, [pc, #544]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	4a87      	ldr	r2, [pc, #540]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 8006274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006278:	61d3      	str	r3, [r2, #28]
 800627a:	4b85      	ldr	r3, [pc, #532]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006282:	60bb      	str	r3, [r7, #8]
 8006284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006286:	2301      	movs	r3, #1
 8006288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800628a:	4b82      	ldr	r3, [pc, #520]	; (8006494 <HAL_RCC_OscConfig+0x4c8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006292:	2b00      	cmp	r3, #0
 8006294:	d118      	bne.n	80062c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006296:	4b7f      	ldr	r3, [pc, #508]	; (8006494 <HAL_RCC_OscConfig+0x4c8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a7e      	ldr	r2, [pc, #504]	; (8006494 <HAL_RCC_OscConfig+0x4c8>)
 800629c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062a2:	f7fd fefd 	bl	80040a0 <HAL_GetTick>
 80062a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a8:	e008      	b.n	80062bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062aa:	f7fd fef9 	bl	80040a0 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b64      	cmp	r3, #100	; 0x64
 80062b6:	d901      	bls.n	80062bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e103      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062bc:	4b75      	ldr	r3, [pc, #468]	; (8006494 <HAL_RCC_OscConfig+0x4c8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0f0      	beq.n	80062aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d106      	bne.n	80062de <HAL_RCC_OscConfig+0x312>
 80062d0:	4b6f      	ldr	r3, [pc, #444]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	4a6e      	ldr	r2, [pc, #440]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	6213      	str	r3, [r2, #32]
 80062dc:	e02d      	b.n	800633a <HAL_RCC_OscConfig+0x36e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10c      	bne.n	8006300 <HAL_RCC_OscConfig+0x334>
 80062e6:	4b6a      	ldr	r3, [pc, #424]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	4a69      	ldr	r2, [pc, #420]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 80062ec:	f023 0301 	bic.w	r3, r3, #1
 80062f0:	6213      	str	r3, [r2, #32]
 80062f2:	4b67      	ldr	r3, [pc, #412]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	4a66      	ldr	r2, [pc, #408]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 80062f8:	f023 0304 	bic.w	r3, r3, #4
 80062fc:	6213      	str	r3, [r2, #32]
 80062fe:	e01c      	b.n	800633a <HAL_RCC_OscConfig+0x36e>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b05      	cmp	r3, #5
 8006306:	d10c      	bne.n	8006322 <HAL_RCC_OscConfig+0x356>
 8006308:	4b61      	ldr	r3, [pc, #388]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	4a60      	ldr	r2, [pc, #384]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 800630e:	f043 0304 	orr.w	r3, r3, #4
 8006312:	6213      	str	r3, [r2, #32]
 8006314:	4b5e      	ldr	r3, [pc, #376]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	4a5d      	ldr	r2, [pc, #372]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 800631a:	f043 0301 	orr.w	r3, r3, #1
 800631e:	6213      	str	r3, [r2, #32]
 8006320:	e00b      	b.n	800633a <HAL_RCC_OscConfig+0x36e>
 8006322:	4b5b      	ldr	r3, [pc, #364]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	4a5a      	ldr	r2, [pc, #360]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 8006328:	f023 0301 	bic.w	r3, r3, #1
 800632c:	6213      	str	r3, [r2, #32]
 800632e:	4b58      	ldr	r3, [pc, #352]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	4a57      	ldr	r2, [pc, #348]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 8006334:	f023 0304 	bic.w	r3, r3, #4
 8006338:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d015      	beq.n	800636e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006342:	f7fd fead 	bl	80040a0 <HAL_GetTick>
 8006346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006348:	e00a      	b.n	8006360 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800634a:	f7fd fea9 	bl	80040a0 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	f241 3288 	movw	r2, #5000	; 0x1388
 8006358:	4293      	cmp	r3, r2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e0b1      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006360:	4b4b      	ldr	r3, [pc, #300]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0ee      	beq.n	800634a <HAL_RCC_OscConfig+0x37e>
 800636c:	e014      	b.n	8006398 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800636e:	f7fd fe97 	bl	80040a0 <HAL_GetTick>
 8006372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006374:	e00a      	b.n	800638c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006376:	f7fd fe93 	bl	80040a0 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	f241 3288 	movw	r2, #5000	; 0x1388
 8006384:	4293      	cmp	r3, r2
 8006386:	d901      	bls.n	800638c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e09b      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800638c:	4b40      	ldr	r3, [pc, #256]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1ee      	bne.n	8006376 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d105      	bne.n	80063aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800639e:	4b3c      	ldr	r3, [pc, #240]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	4a3b      	ldr	r2, [pc, #236]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 80063a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8087 	beq.w	80064c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063b4:	4b36      	ldr	r3, [pc, #216]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f003 030c 	and.w	r3, r3, #12
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d061      	beq.n	8006484 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d146      	bne.n	8006456 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c8:	4b33      	ldr	r3, [pc, #204]	; (8006498 <HAL_RCC_OscConfig+0x4cc>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ce:	f7fd fe67 	bl	80040a0 <HAL_GetTick>
 80063d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063d4:	e008      	b.n	80063e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d6:	f7fd fe63 	bl	80040a0 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d901      	bls.n	80063e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e06d      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063e8:	4b29      	ldr	r3, [pc, #164]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1f0      	bne.n	80063d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fc:	d108      	bne.n	8006410 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80063fe:	4b24      	ldr	r3, [pc, #144]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	4921      	ldr	r1, [pc, #132]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 800640c:	4313      	orrs	r3, r2
 800640e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006410:	4b1f      	ldr	r3, [pc, #124]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a19      	ldr	r1, [r3, #32]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	430b      	orrs	r3, r1
 8006422:	491b      	ldr	r1, [pc, #108]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 8006424:	4313      	orrs	r3, r2
 8006426:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006428:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <HAL_RCC_OscConfig+0x4cc>)
 800642a:	2201      	movs	r2, #1
 800642c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642e:	f7fd fe37 	bl	80040a0 <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006436:	f7fd fe33 	bl	80040a0 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e03d      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006448:	4b11      	ldr	r3, [pc, #68]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCC_OscConfig+0x46a>
 8006454:	e035      	b.n	80064c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006456:	4b10      	ldr	r3, [pc, #64]	; (8006498 <HAL_RCC_OscConfig+0x4cc>)
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800645c:	f7fd fe20 	bl	80040a0 <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006464:	f7fd fe1c 	bl	80040a0 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e026      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006476:	4b06      	ldr	r3, [pc, #24]	; (8006490 <HAL_RCC_OscConfig+0x4c4>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f0      	bne.n	8006464 <HAL_RCC_OscConfig+0x498>
 8006482:	e01e      	b.n	80064c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d107      	bne.n	800649c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e019      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
 8006490:	40021000 	.word	0x40021000
 8006494:	40007000 	.word	0x40007000
 8006498:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800649c:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <HAL_RCC_OscConfig+0x500>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d106      	bne.n	80064be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d001      	beq.n	80064c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	40021000 	.word	0x40021000

080064d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0d0      	b.n	8006686 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064e4:	4b6a      	ldr	r3, [pc, #424]	; (8006690 <HAL_RCC_ClockConfig+0x1c0>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d910      	bls.n	8006514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064f2:	4b67      	ldr	r3, [pc, #412]	; (8006690 <HAL_RCC_ClockConfig+0x1c0>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f023 0207 	bic.w	r2, r3, #7
 80064fa:	4965      	ldr	r1, [pc, #404]	; (8006690 <HAL_RCC_ClockConfig+0x1c0>)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	4313      	orrs	r3, r2
 8006500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006502:	4b63      	ldr	r3, [pc, #396]	; (8006690 <HAL_RCC_ClockConfig+0x1c0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d001      	beq.n	8006514 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e0b8      	b.n	8006686 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d020      	beq.n	8006562 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800652c:	4b59      	ldr	r3, [pc, #356]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	4a58      	ldr	r2, [pc, #352]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 8006532:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006536:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006544:	4b53      	ldr	r3, [pc, #332]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	4a52      	ldr	r2, [pc, #328]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 800654a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800654e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006550:	4b50      	ldr	r3, [pc, #320]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	494d      	ldr	r1, [pc, #308]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 800655e:	4313      	orrs	r3, r2
 8006560:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d040      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d107      	bne.n	8006586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006576:	4b47      	ldr	r3, [pc, #284]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d115      	bne.n	80065ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e07f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d107      	bne.n	800659e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800658e:	4b41      	ldr	r3, [pc, #260]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e073      	b.n	8006686 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800659e:	4b3d      	ldr	r3, [pc, #244]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e06b      	b.n	8006686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ae:	4b39      	ldr	r3, [pc, #228]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f023 0203 	bic.w	r2, r3, #3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	4936      	ldr	r1, [pc, #216]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065c0:	f7fd fd6e 	bl	80040a0 <HAL_GetTick>
 80065c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c6:	e00a      	b.n	80065de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c8:	f7fd fd6a 	bl	80040a0 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e053      	b.n	8006686 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065de:	4b2d      	ldr	r3, [pc, #180]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f003 020c 	and.w	r2, r3, #12
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d1eb      	bne.n	80065c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065f0:	4b27      	ldr	r3, [pc, #156]	; (8006690 <HAL_RCC_ClockConfig+0x1c0>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d210      	bcs.n	8006620 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065fe:	4b24      	ldr	r3, [pc, #144]	; (8006690 <HAL_RCC_ClockConfig+0x1c0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f023 0207 	bic.w	r2, r3, #7
 8006606:	4922      	ldr	r1, [pc, #136]	; (8006690 <HAL_RCC_ClockConfig+0x1c0>)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	4313      	orrs	r3, r2
 800660c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800660e:	4b20      	ldr	r3, [pc, #128]	; (8006690 <HAL_RCC_ClockConfig+0x1c0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d001      	beq.n	8006620 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e032      	b.n	8006686 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800662c:	4b19      	ldr	r3, [pc, #100]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4916      	ldr	r1, [pc, #88]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 800663a:	4313      	orrs	r3, r2
 800663c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d009      	beq.n	800665e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800664a:	4b12      	ldr	r3, [pc, #72]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	490e      	ldr	r1, [pc, #56]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 800665a:	4313      	orrs	r3, r2
 800665c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800665e:	f000 f821 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 8006662:	4602      	mov	r2, r0
 8006664:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	091b      	lsrs	r3, r3, #4
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	490a      	ldr	r1, [pc, #40]	; (8006698 <HAL_RCC_ClockConfig+0x1c8>)
 8006670:	5ccb      	ldrb	r3, [r1, r3]
 8006672:	fa22 f303 	lsr.w	r3, r2, r3
 8006676:	4a09      	ldr	r2, [pc, #36]	; (800669c <HAL_RCC_ClockConfig+0x1cc>)
 8006678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800667a:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <HAL_RCC_ClockConfig+0x1d0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fd fccc 	bl	800401c <HAL_InitTick>

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40022000 	.word	0x40022000
 8006694:	40021000 	.word	0x40021000
 8006698:	0800b70c 	.word	0x0800b70c
 800669c:	20000004 	.word	0x20000004
 80066a0:	20000008 	.word	0x20000008

080066a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066a4:	b490      	push	{r4, r7}
 80066a6:	b08a      	sub	sp, #40	; 0x28
 80066a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80066aa:	4b29      	ldr	r3, [pc, #164]	; (8006750 <HAL_RCC_GetSysClockFreq+0xac>)
 80066ac:	1d3c      	adds	r4, r7, #4
 80066ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80066b4:	f240 2301 	movw	r3, #513	; 0x201
 80066b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	2300      	movs	r3, #0
 80066c0:	61bb      	str	r3, [r7, #24]
 80066c2:	2300      	movs	r3, #0
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
 80066c6:	2300      	movs	r3, #0
 80066c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80066ce:	4b21      	ldr	r3, [pc, #132]	; (8006754 <HAL_RCC_GetSysClockFreq+0xb0>)
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f003 030c 	and.w	r3, r3, #12
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d002      	beq.n	80066e4 <HAL_RCC_GetSysClockFreq+0x40>
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d003      	beq.n	80066ea <HAL_RCC_GetSysClockFreq+0x46>
 80066e2:	e02b      	b.n	800673c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80066e4:	4b1c      	ldr	r3, [pc, #112]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb4>)
 80066e6:	623b      	str	r3, [r7, #32]
      break;
 80066e8:	e02b      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	0c9b      	lsrs	r3, r3, #18
 80066ee:	f003 030f 	and.w	r3, r3, #15
 80066f2:	3328      	adds	r3, #40	; 0x28
 80066f4:	443b      	add	r3, r7
 80066f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80066fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d012      	beq.n	800672c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006706:	4b13      	ldr	r3, [pc, #76]	; (8006754 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	0c5b      	lsrs	r3, r3, #17
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	3328      	adds	r3, #40	; 0x28
 8006712:	443b      	add	r3, r7
 8006714:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006718:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	4a0e      	ldr	r2, [pc, #56]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb4>)
 800671e:	fb03 f202 	mul.w	r2, r3, r2
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	fbb2 f3f3 	udiv	r3, r2, r3
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
 800672a:	e004      	b.n	8006736 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	4a0b      	ldr	r2, [pc, #44]	; (800675c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006730:	fb02 f303 	mul.w	r3, r2, r3
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	623b      	str	r3, [r7, #32]
      break;
 800673a:	e002      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800673c:	4b08      	ldr	r3, [pc, #32]	; (8006760 <HAL_RCC_GetSysClockFreq+0xbc>)
 800673e:	623b      	str	r3, [r7, #32]
      break;
 8006740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006742:	6a3b      	ldr	r3, [r7, #32]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3728      	adds	r7, #40	; 0x28
 8006748:	46bd      	mov	sp, r7
 800674a:	bc90      	pop	{r4, r7}
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	0800b4ac 	.word	0x0800b4ac
 8006754:	40021000 	.word	0x40021000
 8006758:	00f42400 	.word	0x00f42400
 800675c:	003d0900 	.word	0x003d0900
 8006760:	007a1200 	.word	0x007a1200

08006764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006768:	4b02      	ldr	r3, [pc, #8]	; (8006774 <HAL_RCC_GetHCLKFreq+0x10>)
 800676a:	681b      	ldr	r3, [r3, #0]
}
 800676c:	4618      	mov	r0, r3
 800676e:	46bd      	mov	sp, r7
 8006770:	bc80      	pop	{r7}
 8006772:	4770      	bx	lr
 8006774:	20000004 	.word	0x20000004

08006778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800677c:	f7ff fff2 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 8006780:	4602      	mov	r2, r0
 8006782:	4b05      	ldr	r3, [pc, #20]	; (8006798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	0a1b      	lsrs	r3, r3, #8
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	4903      	ldr	r1, [pc, #12]	; (800679c <HAL_RCC_GetPCLK1Freq+0x24>)
 800678e:	5ccb      	ldrb	r3, [r1, r3]
 8006790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006794:	4618      	mov	r0, r3
 8006796:	bd80      	pop	{r7, pc}
 8006798:	40021000 	.word	0x40021000
 800679c:	0800b71c 	.word	0x0800b71c

080067a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067a4:	f7ff ffde 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 80067a8:	4602      	mov	r2, r0
 80067aa:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	0adb      	lsrs	r3, r3, #11
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	4903      	ldr	r1, [pc, #12]	; (80067c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067b6:	5ccb      	ldrb	r3, [r1, r3]
 80067b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067bc:	4618      	mov	r0, r3
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40021000 	.word	0x40021000
 80067c4:	0800b71c 	.word	0x0800b71c

080067c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80067d0:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <RCC_Delay+0x34>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a0a      	ldr	r2, [pc, #40]	; (8006800 <RCC_Delay+0x38>)
 80067d6:	fba2 2303 	umull	r2, r3, r2, r3
 80067da:	0a5b      	lsrs	r3, r3, #9
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	fb02 f303 	mul.w	r3, r2, r3
 80067e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80067e4:	bf00      	nop
  }
  while (Delay --);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	1e5a      	subs	r2, r3, #1
 80067ea:	60fa      	str	r2, [r7, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1f9      	bne.n	80067e4 <RCC_Delay+0x1c>
}
 80067f0:	bf00      	nop
 80067f2:	bf00      	nop
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bc80      	pop	{r7}
 80067fa:	4770      	bx	lr
 80067fc:	20000004 	.word	0x20000004
 8006800:	10624dd3 	.word	0x10624dd3

08006804 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d07d      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006820:	2300      	movs	r3, #0
 8006822:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006824:	4b4f      	ldr	r3, [pc, #316]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10d      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006830:	4b4c      	ldr	r3, [pc, #304]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	4a4b      	ldr	r2, [pc, #300]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800683a:	61d3      	str	r3, [r2, #28]
 800683c:	4b49      	ldr	r3, [pc, #292]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006844:	60bb      	str	r3, [r7, #8]
 8006846:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006848:	2301      	movs	r3, #1
 800684a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800684c:	4b46      	ldr	r3, [pc, #280]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d118      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006858:	4b43      	ldr	r3, [pc, #268]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a42      	ldr	r2, [pc, #264]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800685e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006862:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006864:	f7fd fc1c 	bl	80040a0 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800686a:	e008      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686c:	f7fd fc18 	bl	80040a0 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b64      	cmp	r3, #100	; 0x64
 8006878:	d901      	bls.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e06d      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800687e:	4b3a      	ldr	r3, [pc, #232]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800688a:	4b36      	ldr	r3, [pc, #216]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006892:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d02e      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d027      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068a8:	4b2e      	ldr	r3, [pc, #184]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068b2:	4b2e      	ldr	r3, [pc, #184]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80068b4:	2201      	movs	r2, #1
 80068b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068b8:	4b2c      	ldr	r3, [pc, #176]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80068be:	4a29      	ldr	r2, [pc, #164]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d014      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ce:	f7fd fbe7 	bl	80040a0 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068d4:	e00a      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d6:	f7fd fbe3 	bl	80040a0 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d901      	bls.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e036      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ec:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0ee      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068f8:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	4917      	ldr	r1, [pc, #92]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006906:	4313      	orrs	r3, r2
 8006908:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800690a:	7dfb      	ldrb	r3, [r7, #23]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d105      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006910:	4b14      	ldr	r3, [pc, #80]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	4a13      	ldr	r2, [pc, #76]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800691a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d008      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006928:	4b0e      	ldr	r3, [pc, #56]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	490b      	ldr	r1, [pc, #44]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006936:	4313      	orrs	r3, r2
 8006938:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0310 	and.w	r3, r3, #16
 8006942:	2b00      	cmp	r3, #0
 8006944:	d008      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006946:	4b07      	ldr	r3, [pc, #28]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	4904      	ldr	r1, [pc, #16]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006954:	4313      	orrs	r3, r2
 8006956:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	40021000 	.word	0x40021000
 8006968:	40007000 	.word	0x40007000
 800696c:	42420440 	.word	0x42420440

08006970 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006970:	b590      	push	{r4, r7, lr}
 8006972:	b08d      	sub	sp, #52	; 0x34
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006978:	4b6a      	ldr	r3, [pc, #424]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800697a:	f107 040c 	add.w	r4, r7, #12
 800697e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006984:	f240 2301 	movw	r3, #513	; 0x201
 8006988:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
 800698e:	2300      	movs	r3, #0
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006992:	2300      	movs	r3, #0
 8006994:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	2300      	movs	r3, #0
 800699c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	2b0f      	cmp	r3, #15
 80069a4:	f200 80b3 	bhi.w	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80069a8:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80069aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ae:	bf00      	nop
 80069b0:	08006a8f 	.word	0x08006a8f
 80069b4:	08006af3 	.word	0x08006af3
 80069b8:	08006b0f 	.word	0x08006b0f
 80069bc:	08006a7f 	.word	0x08006a7f
 80069c0:	08006b0f 	.word	0x08006b0f
 80069c4:	08006b0f 	.word	0x08006b0f
 80069c8:	08006b0f 	.word	0x08006b0f
 80069cc:	08006a87 	.word	0x08006a87
 80069d0:	08006b0f 	.word	0x08006b0f
 80069d4:	08006b0f 	.word	0x08006b0f
 80069d8:	08006b0f 	.word	0x08006b0f
 80069dc:	08006b0f 	.word	0x08006b0f
 80069e0:	08006b0f 	.word	0x08006b0f
 80069e4:	08006b0f 	.word	0x08006b0f
 80069e8:	08006b0f 	.word	0x08006b0f
 80069ec:	080069f1 	.word	0x080069f1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80069f0:	4b4d      	ldr	r3, [pc, #308]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80069f6:	4b4c      	ldr	r3, [pc, #304]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 8087 	beq.w	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	0c9b      	lsrs	r3, r3, #18
 8006a08:	f003 030f 	and.w	r3, r3, #15
 8006a0c:	3330      	adds	r3, #48	; 0x30
 8006a0e:	443b      	add	r3, r7
 8006a10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006a14:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d017      	beq.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a20:	4b41      	ldr	r3, [pc, #260]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	0c5b      	lsrs	r3, r3, #17
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	3330      	adds	r3, #48	; 0x30
 8006a2c:	443b      	add	r3, r7
 8006a2e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00d      	beq.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006a3e:	4a3b      	ldr	r2, [pc, #236]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	fb02 f303 	mul.w	r3, r2, r3
 8006a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a4e:	e004      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	4a37      	ldr	r2, [pc, #220]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8006a54:	fb02 f303 	mul.w	r3, r2, r3
 8006a58:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006a5a:	4b33      	ldr	r3, [pc, #204]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a66:	d102      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8006a6c:	e051      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = (pllclk * 2) / 3;
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	4a30      	ldr	r2, [pc, #192]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8006a74:	fba2 2303 	umull	r2, r3, r2, r3
 8006a78:	085b      	lsrs	r3, r3, #1
 8006a7a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006a7c:	e049      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006a7e:	f7ff fe11 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 8006a82:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006a84:	e048      	b.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006a86:	f7ff fe0d 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 8006a8a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006a8c:	e044      	b.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8006a8e:	4b26      	ldr	r3, [pc, #152]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9e:	d108      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8006aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab0:	e01e      	b.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006abc:	d109      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8006abe:	4b1a      	ldr	r3, [pc, #104]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8006aca:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad0:	e00e      	b.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006adc:	d11b      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8006ade:	4b12      	ldr	r3, [pc, #72]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d015      	beq.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
      {
        frequency = HSE_VALUE / 128U;
 8006aea:	4b13      	ldr	r3, [pc, #76]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8006aec:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8006aee:	e012      	b.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8006af0:	e011      	b.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006af2:	f7ff fe55 	bl	80067a0 <HAL_RCC_GetPCLK2Freq>
 8006af6:	4602      	mov	r2, r0
 8006af8:	4b0b      	ldr	r3, [pc, #44]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	0b9b      	lsrs	r3, r3, #14
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	3301      	adds	r3, #1
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006b0c:	e004      	b.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    default:
    {
      break;
 8006b0e:	bf00      	nop
 8006b10:	e002      	b.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      break;
 8006b12:	bf00      	nop
 8006b14:	e000      	b.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      break;
 8006b16:	bf00      	nop
    }
  }
  return (frequency);
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3734      	adds	r7, #52	; 0x34
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd90      	pop	{r4, r7, pc}
 8006b22:	bf00      	nop
 8006b24:	0800b4bc 	.word	0x0800b4bc
 8006b28:	40021000 	.word	0x40021000
 8006b2c:	00f42400 	.word	0x00f42400
 8006b30:	003d0900 	.word	0x003d0900
 8006b34:	aaaaaaab 	.word	0xaaaaaaab
 8006b38:	0001e848 	.word	0x0001e848

08006b3c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e084      	b.n	8006c5c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	7c5b      	ldrb	r3, [r3, #17]
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d105      	bne.n	8006b68 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fc ffe0 	bl	8003b28 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f9c8 	bl	8006f04 <HAL_RTC_WaitForSynchro>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d004      	beq.n	8006b84 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e06b      	b.n	8006c5c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fa81 	bl	800708c <RTC_EnterInitMode>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2204      	movs	r2, #4
 8006b94:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e060      	b.n	8006c5c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0207 	bic.w	r2, r2, #7
 8006ba8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d005      	beq.n	8006bbe <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006bb2:	4b2c      	ldr	r3, [pc, #176]	; (8006c64 <HAL_RTC_Init+0x128>)
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	4a2b      	ldr	r2, [pc, #172]	; (8006c64 <HAL_RTC_Init+0x128>)
 8006bb8:	f023 0301 	bic.w	r3, r3, #1
 8006bbc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006bbe:	4b29      	ldr	r3, [pc, #164]	; (8006c64 <HAL_RTC_Init+0x128>)
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	4926      	ldr	r1, [pc, #152]	; (8006c64 <HAL_RTC_Init+0x128>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bd8:	d003      	beq.n	8006be2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	e00e      	b.n	8006c00 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006be2:	2001      	movs	r0, #1
 8006be4:	f7ff fec4 	bl	8006970 <HAL_RCCEx_GetPeriphCLKFreq>
 8006be8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d104      	bne.n	8006bfa <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2204      	movs	r2, #4
 8006bf4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e030      	b.n	8006c5c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f023 010f 	bic.w	r1, r3, #15
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	0c1a      	lsrs	r2, r3, #16
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	0c1b      	lsrs	r3, r3, #16
 8006c1e:	041b      	lsls	r3, r3, #16
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	b291      	uxth	r1, r2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6812      	ldr	r2, [r2, #0]
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fa55 	bl	80070dc <RTC_ExitInitMode>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d004      	beq.n	8006c42 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2204      	movs	r2, #4
 8006c3c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e00c      	b.n	8006c5c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
  }
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	40006c00 	.word	0x40006c00

08006c68 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c68:	b590      	push	{r4, r7, lr}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <HAL_RTC_SetTime+0x20>
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e080      	b.n	8006d8e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	7c1b      	ldrb	r3, [r3, #16]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_RTC_SetTime+0x30>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e07a      	b.n	8006d8e <HAL_RTC_SetTime+0x126>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d113      	bne.n	8006cd2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006cb4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	1a5b      	subs	r3, r3, r1
 8006cc4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006cc6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006ccc:	4413      	add	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	e01e      	b.n	8006d10 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fa28 	bl	800712c <RTC_Bcd2ToByte>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006ce4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	785b      	ldrb	r3, [r3, #1]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 fa1d 	bl	800712c <RTC_Bcd2ToByte>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006cfe:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	789b      	ldrb	r3, [r3, #2]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fa11 	bl	800712c <RTC_Bcd2ToByte>
 8006d0a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006d0c:	4423      	add	r3, r4
 8006d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006d10:	6979      	ldr	r1, [r7, #20]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f953 	bl	8006fbe <RTC_WriteTimeCounter>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d007      	beq.n	8006d2e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2204      	movs	r2, #4
 8006d22:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e02f      	b.n	8006d8e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0205 	bic.w	r2, r2, #5
 8006d3c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f964 	bl	800700c <RTC_ReadAlarmCounter>
 8006d44:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d4c:	d018      	beq.n	8006d80 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d214      	bcs.n	8006d80 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006d5c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006d60:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006d62:	6939      	ldr	r1, [r7, #16]
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 f96a 	bl	800703e <RTC_WriteAlarmCounter>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d007      	beq.n	8006d80 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2204      	movs	r2, #4
 8006d74:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e006      	b.n	8006d8e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2201      	movs	r2, #1
 8006d84:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
  }
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd90      	pop	{r4, r7, pc}
	...

08006d98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61fb      	str	r3, [r7, #28]
 8006da8:	2300      	movs	r3, #0
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	2300      	movs	r3, #0
 8006dae:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <HAL_RTC_SetDate+0x24>
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e097      	b.n	8006ef0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	7c1b      	ldrb	r3, [r3, #16]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_RTC_SetDate+0x34>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e091      	b.n	8006ef0 <HAL_RTC_SetDate+0x158>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10c      	bne.n	8006df8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	78da      	ldrb	r2, [r3, #3]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	785a      	ldrb	r2, [r3, #1]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	789a      	ldrb	r2, [r3, #2]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	739a      	strb	r2, [r3, #14]
 8006df6:	e01a      	b.n	8006e2e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	78db      	ldrb	r3, [r3, #3]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 f995 	bl	800712c <RTC_Bcd2ToByte>
 8006e02:	4603      	mov	r3, r0
 8006e04:	461a      	mov	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f98c 	bl	800712c <RTC_Bcd2ToByte>
 8006e14:	4603      	mov	r3, r0
 8006e16:	461a      	mov	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	789b      	ldrb	r3, [r3, #2]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 f983 	bl	800712c <RTC_Bcd2ToByte>
 8006e26:	4603      	mov	r3, r0
 8006e28:	461a      	mov	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	7bdb      	ldrb	r3, [r3, #15]
 8006e32:	4618      	mov	r0, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	7b59      	ldrb	r1, [r3, #13]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	7b9b      	ldrb	r3, [r3, #14]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f000 f993 	bl	8007168 <RTC_WeekDayNum>
 8006e42:	4603      	mov	r3, r0
 8006e44:	461a      	mov	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	7b1a      	ldrb	r2, [r3, #12]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f883 	bl	8006f5e <RTC_ReadTimeCounter>
 8006e58:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	4a26      	ldr	r2, [pc, #152]	; (8006ef8 <HAL_RTC_SetDate+0x160>)
 8006e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e62:	0adb      	lsrs	r3, r3, #11
 8006e64:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b18      	cmp	r3, #24
 8006e6a:	d93a      	bls.n	8006ee2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	4a23      	ldr	r2, [pc, #140]	; (8006efc <HAL_RTC_SetDate+0x164>)
 8006e70:	fba2 2303 	umull	r2, r3, r2, r3
 8006e74:	091b      	lsrs	r3, r3, #4
 8006e76:	4a22      	ldr	r2, [pc, #136]	; (8006f00 <HAL_RTC_SetDate+0x168>)
 8006e78:	fb02 f303 	mul.w	r3, r2, r3
 8006e7c:	69fa      	ldr	r2, [r7, #28]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006e82:	69f9      	ldr	r1, [r7, #28]
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 f89a 	bl	8006fbe <RTC_WriteTimeCounter>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d007      	beq.n	8006ea0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2204      	movs	r2, #4
 8006e94:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e027      	b.n	8006ef0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 f8b3 	bl	800700c <RTC_ReadAlarmCounter>
 8006ea6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eae:	d018      	beq.n	8006ee2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d214      	bcs.n	8006ee2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006ebe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006ec2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006ec4:	69b9      	ldr	r1, [r7, #24]
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 f8b9 	bl	800703e <RTC_WriteAlarmCounter>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d007      	beq.n	8006ee2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2204      	movs	r2, #4
 8006ed6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e006      	b.n	8006ef0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3720      	adds	r7, #32
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	91a2b3c5 	.word	0x91a2b3c5
 8006efc:	aaaaaaab 	.word	0xaaaaaaab
 8006f00:	00015180 	.word	0x00015180

08006f04 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e01d      	b.n	8006f56 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0208 	bic.w	r2, r2, #8
 8006f28:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006f2a:	f7fd f8b9 	bl	80040a0 <HAL_GetTick>
 8006f2e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006f30:	e009      	b.n	8006f46 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006f32:	f7fd f8b5 	bl	80040a0 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f40:	d901      	bls.n	8006f46 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e007      	b.n	8006f56 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0ee      	beq.n	8006f32 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b087      	sub	sp, #28
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	827b      	strh	r3, [r7, #18]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	823b      	strh	r3, [r7, #16]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006f8e:	8a7a      	ldrh	r2, [r7, #18]
 8006f90:	8a3b      	ldrh	r3, [r7, #16]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d008      	beq.n	8006fa8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006f96:	8a3b      	ldrh	r3, [r7, #16]
 8006f98:	041a      	lsls	r2, r3, #16
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	e004      	b.n	8006fb2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006fa8:	8a7b      	ldrh	r3, [r7, #18]
 8006faa:	041a      	lsls	r2, r3, #16
 8006fac:	89fb      	ldrh	r3, [r7, #14]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8006fb2:	697b      	ldr	r3, [r7, #20]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bc80      	pop	{r7}
 8006fbc:	4770      	bx	lr

08006fbe <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f85d 	bl	800708c <RTC_EnterInitMode>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	73fb      	strb	r3, [r7, #15]
 8006fdc:	e011      	b.n	8007002 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	0c12      	lsrs	r2, r2, #16
 8006fe6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	b292      	uxth	r2, r2
 8006ff0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f872 	bl	80070dc <RTC_ExitInitMode>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007002:	7bfb      	ldrb	r3, [r7, #15]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	81fb      	strh	r3, [r7, #14]
 8007018:	2300      	movs	r3, #0
 800701a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800702c:	89fb      	ldrh	r3, [r7, #14]
 800702e:	041a      	lsls	r2, r3, #16
 8007030:	89bb      	ldrh	r3, [r7, #12]
 8007032:	4313      	orrs	r3, r2
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	bc80      	pop	{r7}
 800703c:	4770      	bx	lr

0800703e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f81d 	bl	800708c <RTC_EnterInitMode>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	73fb      	strb	r3, [r7, #15]
 800705c:	e011      	b.n	8007082 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	0c12      	lsrs	r2, r2, #16
 8007066:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	b292      	uxth	r2, r2
 8007070:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f832 	bl	80070dc <RTC_ExitInitMode>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007082:	7bfb      	ldrb	r3, [r7, #15]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007098:	f7fd f802 	bl	80040a0 <HAL_GetTick>
 800709c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800709e:	e009      	b.n	80070b4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80070a0:	f7fc fffe 	bl	80040a0 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070ae:	d901      	bls.n	80070b4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e00f      	b.n	80070d4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0ee      	beq.n	80070a0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f042 0210 	orr.w	r2, r2, #16
 80070d0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0210 	bic.w	r2, r2, #16
 80070f6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80070f8:	f7fc ffd2 	bl	80040a0 <HAL_GetTick>
 80070fc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80070fe:	e009      	b.n	8007114 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007100:	f7fc ffce 	bl	80040a0 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800710e:	d901      	bls.n	8007114 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e007      	b.n	8007124 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0ee      	beq.n	8007100 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800713a:	79fb      	ldrb	r3, [r7, #7]
 800713c:	091b      	lsrs	r3, r3, #4
 800713e:	b2db      	uxtb	r3, r3
 8007140:	461a      	mov	r2, r3
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	f003 030f 	and.w	r3, r3, #15
 8007152:	b2da      	uxtb	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	b2db      	uxtb	r3, r3
 8007158:	4413      	add	r3, r2
 800715a:	b2db      	uxtb	r3, r3
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr
	...

08007168 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
 8007174:	4613      	mov	r3, r2
 8007176:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60bb      	str	r3, [r7, #8]
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007186:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d82d      	bhi.n	80071ea <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800718e:	78fa      	ldrb	r2, [r7, #3]
 8007190:	4613      	mov	r3, r2
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	4413      	add	r3, r2
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	1a9b      	subs	r3, r3, r2
 800719a:	4a2c      	ldr	r2, [pc, #176]	; (800724c <RTC_WeekDayNum+0xe4>)
 800719c:	fba2 2303 	umull	r2, r3, r2, r3
 80071a0:	085a      	lsrs	r2, r3, #1
 80071a2:	78bb      	ldrb	r3, [r7, #2]
 80071a4:	441a      	add	r2, r3
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	441a      	add	r2, r3
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	089b      	lsrs	r3, r3, #2
 80071b0:	441a      	add	r2, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	4926      	ldr	r1, [pc, #152]	; (8007250 <RTC_WeekDayNum+0xe8>)
 80071b8:	fba1 1303 	umull	r1, r3, r1, r3
 80071bc:	095b      	lsrs	r3, r3, #5
 80071be:	1ad2      	subs	r2, r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	4922      	ldr	r1, [pc, #136]	; (8007250 <RTC_WeekDayNum+0xe8>)
 80071c6:	fba1 1303 	umull	r1, r3, r1, r3
 80071ca:	09db      	lsrs	r3, r3, #7
 80071cc:	4413      	add	r3, r2
 80071ce:	1d1a      	adds	r2, r3, #4
 80071d0:	4b20      	ldr	r3, [pc, #128]	; (8007254 <RTC_WeekDayNum+0xec>)
 80071d2:	fba3 1302 	umull	r1, r3, r3, r2
 80071d6:	1ad1      	subs	r1, r2, r3
 80071d8:	0849      	lsrs	r1, r1, #1
 80071da:	440b      	add	r3, r1
 80071dc:	0899      	lsrs	r1, r3, #2
 80071de:	460b      	mov	r3, r1
 80071e0:	00db      	lsls	r3, r3, #3
 80071e2:	1a5b      	subs	r3, r3, r1
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	e029      	b.n	800723e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80071ea:	78fa      	ldrb	r2, [r7, #3]
 80071ec:	4613      	mov	r3, r2
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	4413      	add	r3, r2
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	1a9b      	subs	r3, r3, r2
 80071f6:	4a15      	ldr	r2, [pc, #84]	; (800724c <RTC_WeekDayNum+0xe4>)
 80071f8:	fba2 2303 	umull	r2, r3, r2, r3
 80071fc:	085a      	lsrs	r2, r3, #1
 80071fe:	78bb      	ldrb	r3, [r7, #2]
 8007200:	441a      	add	r2, r3
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	441a      	add	r2, r3
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	089b      	lsrs	r3, r3, #2
 800720a:	441a      	add	r2, r3
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	4910      	ldr	r1, [pc, #64]	; (8007250 <RTC_WeekDayNum+0xe8>)
 8007210:	fba1 1303 	umull	r1, r3, r1, r3
 8007214:	095b      	lsrs	r3, r3, #5
 8007216:	1ad2      	subs	r2, r2, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	490d      	ldr	r1, [pc, #52]	; (8007250 <RTC_WeekDayNum+0xe8>)
 800721c:	fba1 1303 	umull	r1, r3, r1, r3
 8007220:	09db      	lsrs	r3, r3, #7
 8007222:	4413      	add	r3, r2
 8007224:	1c9a      	adds	r2, r3, #2
 8007226:	4b0b      	ldr	r3, [pc, #44]	; (8007254 <RTC_WeekDayNum+0xec>)
 8007228:	fba3 1302 	umull	r1, r3, r3, r2
 800722c:	1ad1      	subs	r1, r2, r3
 800722e:	0849      	lsrs	r1, r1, #1
 8007230:	440b      	add	r3, r1
 8007232:	0899      	lsrs	r1, r3, #2
 8007234:	460b      	mov	r3, r1
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	1a5b      	subs	r3, r3, r1
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	b2db      	uxtb	r3, r3
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr
 800724c:	38e38e39 	.word	0x38e38e39
 8007250:	51eb851f 	.word	0x51eb851f
 8007254:	24924925 	.word	0x24924925

08007258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e076      	b.n	8007358 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	2b00      	cmp	r3, #0
 8007270:	d108      	bne.n	8007284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800727a:	d009      	beq.n	8007290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	61da      	str	r2, [r3, #28]
 8007282:	e005      	b.n	8007290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7fc fc60 	bl	8003b70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072d8:	431a      	orrs	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e2:	431a      	orrs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	431a      	orrs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	431a      	orrs	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007300:	431a      	orrs	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800730a:	431a      	orrs	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007314:	ea42 0103 	orr.w	r1, r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	0c1a      	lsrs	r2, r3, #16
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f002 0204 	and.w	r2, r2, #4
 8007336:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	69da      	ldr	r2, [r3, #28]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007346:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e093      	b.n	800749c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d106      	bne.n	800738e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7fc fc77 	bl	8003c7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2202      	movs	r2, #2
 8007392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6812      	ldr	r2, [r2, #0]
 80073a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073a4:	f023 0307 	bic.w	r3, r3, #7
 80073a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4619      	mov	r1, r3
 80073b4:	4610      	mov	r0, r2
 80073b6:	f000 fa59 	bl	800786c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	4313      	orrs	r3, r2
 80073da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e2:	f023 0303 	bic.w	r3, r3, #3
 80073e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	4313      	orrs	r3, r2
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007400:	f023 030c 	bic.w	r3, r3, #12
 8007404:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800740c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007410:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	021b      	lsls	r3, r3, #8
 800741c:	4313      	orrs	r3, r2
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	011a      	lsls	r2, r3, #4
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	031b      	lsls	r3, r3, #12
 8007430:	4313      	orrs	r3, r2
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	4313      	orrs	r3, r2
 8007436:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800743e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	011b      	lsls	r3, r3, #4
 800744a:	4313      	orrs	r3, r2
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d110      	bne.n	80074f6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d102      	bne.n	80074e0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80074da:	7b7b      	ldrb	r3, [r7, #13]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d001      	beq.n	80074e4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e089      	b.n	80075f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074f4:	e031      	b.n	800755a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d110      	bne.n	800751e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d102      	bne.n	8007508 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007502:	7b3b      	ldrb	r3, [r7, #12]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d001      	beq.n	800750c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e075      	b.n	80075f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800751c:	e01d      	b.n	800755a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d108      	bne.n	8007536 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d105      	bne.n	8007536 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800752a:	7b7b      	ldrb	r3, [r7, #13]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d102      	bne.n	8007536 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007530:	7b3b      	ldrb	r3, [r7, #12]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d001      	beq.n	800753a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e05e      	b.n	80075f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2202      	movs	r2, #2
 800753e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2202      	movs	r2, #2
 800754e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2202      	movs	r2, #2
 8007556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2b04      	cmp	r3, #4
 8007564:	d010      	beq.n	8007588 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007566:	e01f      	b.n	80075a8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2201      	movs	r2, #1
 800756e:	2100      	movs	r1, #0
 8007570:	4618      	mov	r0, r3
 8007572:	f000 f9f5 	bl	8007960 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0202 	orr.w	r2, r2, #2
 8007584:	60da      	str	r2, [r3, #12]
      break;
 8007586:	e02e      	b.n	80075e6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2201      	movs	r2, #1
 800758e:	2104      	movs	r1, #4
 8007590:	4618      	mov	r0, r3
 8007592:	f000 f9e5 	bl	8007960 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68da      	ldr	r2, [r3, #12]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f042 0204 	orr.w	r2, r2, #4
 80075a4:	60da      	str	r2, [r3, #12]
      break;
 80075a6:	e01e      	b.n	80075e6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2201      	movs	r2, #1
 80075ae:	2100      	movs	r1, #0
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 f9d5 	bl	8007960 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2201      	movs	r2, #1
 80075bc:	2104      	movs	r1, #4
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 f9ce 	bl	8007960 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f042 0202 	orr.w	r2, r2, #2
 80075d2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0204 	orr.w	r2, r2, #4
 80075e2:	60da      	str	r2, [r3, #12]
      break;
 80075e4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f042 0201 	orr.w	r2, r2, #1
 80075f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b02      	cmp	r3, #2
 8007614:	d122      	bne.n	800765c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b02      	cmp	r3, #2
 8007622:	d11b      	bne.n	800765c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f06f 0202 	mvn.w	r2, #2
 800762c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	f003 0303 	and.w	r3, r3, #3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f8f6 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 8007648:	e005      	b.n	8007656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f8e9 	bl	8007822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f8f8 	bl	8007846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	2b04      	cmp	r3, #4
 8007668:	d122      	bne.n	80076b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f003 0304 	and.w	r3, r3, #4
 8007674:	2b04      	cmp	r3, #4
 8007676:	d11b      	bne.n	80076b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f06f 0204 	mvn.w	r2, #4
 8007680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2202      	movs	r2, #2
 8007686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f8cc 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 800769c:	e005      	b.n	80076aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f8bf 	bl	8007822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f8ce 	bl	8007846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	f003 0308 	and.w	r3, r3, #8
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	d122      	bne.n	8007704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f003 0308 	and.w	r3, r3, #8
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d11b      	bne.n	8007704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f06f 0208 	mvn.w	r2, #8
 80076d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2204      	movs	r2, #4
 80076da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	f003 0303 	and.w	r3, r3, #3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f8a2 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 80076f0:	e005      	b.n	80076fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f895 	bl	8007822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f8a4 	bl	8007846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	f003 0310 	and.w	r3, r3, #16
 800770e:	2b10      	cmp	r3, #16
 8007710:	d122      	bne.n	8007758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	f003 0310 	and.w	r3, r3, #16
 800771c:	2b10      	cmp	r3, #16
 800771e:	d11b      	bne.n	8007758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f06f 0210 	mvn.w	r2, #16
 8007728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2208      	movs	r2, #8
 800772e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f878 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 8007744:	e005      	b.n	8007752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f86b 	bl	8007822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f87a 	bl	8007846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b01      	cmp	r3, #1
 8007764:	d10e      	bne.n	8007784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b01      	cmp	r3, #1
 8007772:	d107      	bne.n	8007784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f06f 0201 	mvn.w	r2, #1
 800777c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f846 	bl	8007810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778e:	2b80      	cmp	r3, #128	; 0x80
 8007790:	d10e      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779c:	2b80      	cmp	r3, #128	; 0x80
 800779e:	d107      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f971 	bl	8007a92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ba:	2b40      	cmp	r3, #64	; 0x40
 80077bc:	d10e      	bne.n	80077dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c8:	2b40      	cmp	r3, #64	; 0x40
 80077ca:	d107      	bne.n	80077dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f83e 	bl	8007858 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d10e      	bne.n	8007808 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f003 0320 	and.w	r3, r3, #32
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	d107      	bne.n	8007808 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f06f 0220 	mvn.w	r2, #32
 8007800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f93c 	bl	8007a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr

08007822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	bc80      	pop	{r7}
 8007832:	4770      	bx	lr

08007834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	bc80      	pop	{r7}
 8007844:	4770      	bx	lr

08007846 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800784e:	bf00      	nop
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	bc80      	pop	{r7}
 8007856:	4770      	bx	lr

08007858 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	bc80      	pop	{r7}
 8007868:	4770      	bx	lr
	...

0800786c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a33      	ldr	r2, [pc, #204]	; (800794c <TIM_Base_SetConfig+0xe0>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d013      	beq.n	80078ac <TIM_Base_SetConfig+0x40>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a32      	ldr	r2, [pc, #200]	; (8007950 <TIM_Base_SetConfig+0xe4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d00f      	beq.n	80078ac <TIM_Base_SetConfig+0x40>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007892:	d00b      	beq.n	80078ac <TIM_Base_SetConfig+0x40>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a2f      	ldr	r2, [pc, #188]	; (8007954 <TIM_Base_SetConfig+0xe8>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d007      	beq.n	80078ac <TIM_Base_SetConfig+0x40>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a2e      	ldr	r2, [pc, #184]	; (8007958 <TIM_Base_SetConfig+0xec>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d003      	beq.n	80078ac <TIM_Base_SetConfig+0x40>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a2d      	ldr	r2, [pc, #180]	; (800795c <TIM_Base_SetConfig+0xf0>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d108      	bne.n	80078be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a22      	ldr	r2, [pc, #136]	; (800794c <TIM_Base_SetConfig+0xe0>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d013      	beq.n	80078ee <TIM_Base_SetConfig+0x82>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a21      	ldr	r2, [pc, #132]	; (8007950 <TIM_Base_SetConfig+0xe4>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00f      	beq.n	80078ee <TIM_Base_SetConfig+0x82>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d4:	d00b      	beq.n	80078ee <TIM_Base_SetConfig+0x82>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a1e      	ldr	r2, [pc, #120]	; (8007954 <TIM_Base_SetConfig+0xe8>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d007      	beq.n	80078ee <TIM_Base_SetConfig+0x82>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a1d      	ldr	r2, [pc, #116]	; (8007958 <TIM_Base_SetConfig+0xec>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d003      	beq.n	80078ee <TIM_Base_SetConfig+0x82>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a1c      	ldr	r2, [pc, #112]	; (800795c <TIM_Base_SetConfig+0xf0>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d108      	bne.n	8007900 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a09      	ldr	r2, [pc, #36]	; (800794c <TIM_Base_SetConfig+0xe0>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d003      	beq.n	8007934 <TIM_Base_SetConfig+0xc8>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a08      	ldr	r2, [pc, #32]	; (8007950 <TIM_Base_SetConfig+0xe4>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d103      	bne.n	800793c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	691a      	ldr	r2, [r3, #16]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	615a      	str	r2, [r3, #20]
}
 8007942:	bf00      	nop
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	bc80      	pop	{r7}
 800794a:	4770      	bx	lr
 800794c:	40012c00 	.word	0x40012c00
 8007950:	40013400 	.word	0x40013400
 8007954:	40000400 	.word	0x40000400
 8007958:	40000800 	.word	0x40000800
 800795c:	40000c00 	.word	0x40000c00

08007960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f003 031f 	and.w	r3, r3, #31
 8007972:	2201      	movs	r2, #1
 8007974:	fa02 f303 	lsl.w	r3, r2, r3
 8007978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a1a      	ldr	r2, [r3, #32]
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	43db      	mvns	r3, r3
 8007982:	401a      	ands	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6a1a      	ldr	r2, [r3, #32]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f003 031f 	and.w	r3, r3, #31
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	fa01 f303 	lsl.w	r3, r1, r3
 8007998:	431a      	orrs	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	621a      	str	r2, [r3, #32]
}
 800799e:	bf00      	nop
 80079a0:	371c      	adds	r7, #28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc80      	pop	{r7}
 80079a6:	4770      	bx	lr

080079a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d101      	bne.n	80079c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079bc:	2302      	movs	r3, #2
 80079be:	e050      	b.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1b      	ldr	r2, [pc, #108]	; (8007a6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d018      	beq.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a19      	ldr	r2, [pc, #100]	; (8007a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d013      	beq.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a16:	d00e      	beq.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a15      	ldr	r2, [pc, #84]	; (8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d009      	beq.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a14      	ldr	r2, [pc, #80]	; (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d004      	beq.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a12      	ldr	r2, [pc, #72]	; (8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d10c      	bne.n	8007a50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bc80      	pop	{r7}
 8007a6a:	4770      	bx	lr
 8007a6c:	40012c00 	.word	0x40012c00
 8007a70:	40013400 	.word	0x40013400
 8007a74:	40000400 	.word	0x40000400
 8007a78:	40000800 	.word	0x40000800
 8007a7c:	40000c00 	.word	0x40000c00

08007a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bc80      	pop	{r7}
 8007a90:	4770      	bx	lr

08007a92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bc80      	pop	{r7}
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e03f      	b.n	8007b36 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d106      	bne.n	8007ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7fc f976 	bl	8003dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2224      	movs	r2, #36	; 0x24
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f829 	bl	8007b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	691a      	ldr	r2, [r3, #16]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	695a      	ldr	r2, [r3, #20]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	689a      	ldr	r2, [r3, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007b7a:	f023 030c 	bic.w	r3, r3, #12
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	6812      	ldr	r2, [r2, #0]
 8007b82:	68b9      	ldr	r1, [r7, #8]
 8007b84:	430b      	orrs	r3, r1
 8007b86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	699a      	ldr	r2, [r3, #24]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a2c      	ldr	r2, [pc, #176]	; (8007c54 <UART_SetConfig+0x114>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d103      	bne.n	8007bb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007ba8:	f7fe fdfa 	bl	80067a0 <HAL_RCC_GetPCLK2Freq>
 8007bac:	60f8      	str	r0, [r7, #12]
 8007bae:	e002      	b.n	8007bb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007bb0:	f7fe fde2 	bl	8006778 <HAL_RCC_GetPCLK1Freq>
 8007bb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009a      	lsls	r2, r3, #2
 8007bc0:	441a      	add	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bcc:	4a22      	ldr	r2, [pc, #136]	; (8007c58 <UART_SetConfig+0x118>)
 8007bce:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd2:	095b      	lsrs	r3, r3, #5
 8007bd4:	0119      	lsls	r1, r3, #4
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009a      	lsls	r2, r3, #2
 8007be0:	441a      	add	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bec:	4b1a      	ldr	r3, [pc, #104]	; (8007c58 <UART_SetConfig+0x118>)
 8007bee:	fba3 0302 	umull	r0, r3, r3, r2
 8007bf2:	095b      	lsrs	r3, r3, #5
 8007bf4:	2064      	movs	r0, #100	; 0x64
 8007bf6:	fb00 f303 	mul.w	r3, r0, r3
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	011b      	lsls	r3, r3, #4
 8007bfe:	3332      	adds	r3, #50	; 0x32
 8007c00:	4a15      	ldr	r2, [pc, #84]	; (8007c58 <UART_SetConfig+0x118>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	095b      	lsrs	r3, r3, #5
 8007c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c0c:	4419      	add	r1, r3
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009a      	lsls	r2, r3, #2
 8007c18:	441a      	add	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c24:	4b0c      	ldr	r3, [pc, #48]	; (8007c58 <UART_SetConfig+0x118>)
 8007c26:	fba3 0302 	umull	r0, r3, r3, r2
 8007c2a:	095b      	lsrs	r3, r3, #5
 8007c2c:	2064      	movs	r0, #100	; 0x64
 8007c2e:	fb00 f303 	mul.w	r3, r0, r3
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	3332      	adds	r3, #50	; 0x32
 8007c38:	4a07      	ldr	r2, [pc, #28]	; (8007c58 <UART_SetConfig+0x118>)
 8007c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3e:	095b      	lsrs	r3, r3, #5
 8007c40:	f003 020f 	and.w	r2, r3, #15
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	440a      	add	r2, r1
 8007c4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007c4c:	bf00      	nop
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	40013800 	.word	0x40013800
 8007c58:	51eb851f 	.word	0x51eb851f

08007c5c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c62:	f3ef 8305 	mrs	r3, IPSR
 8007c66:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10f      	bne.n	8007c8e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c72:	607b      	str	r3, [r7, #4]
  return(result);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d109      	bne.n	8007c8e <osKernelInitialize+0x32>
 8007c7a:	4b10      	ldr	r3, [pc, #64]	; (8007cbc <osKernelInitialize+0x60>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d109      	bne.n	8007c96 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c82:	f3ef 8311 	mrs	r3, BASEPRI
 8007c86:	603b      	str	r3, [r7, #0]
  return(result);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007c8e:	f06f 0305 	mvn.w	r3, #5
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	e00c      	b.n	8007cb0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c96:	4b09      	ldr	r3, [pc, #36]	; (8007cbc <osKernelInitialize+0x60>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d105      	bne.n	8007caa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007c9e:	4b07      	ldr	r3, [pc, #28]	; (8007cbc <osKernelInitialize+0x60>)
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	e002      	b.n	8007cb0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr
 8007cbc:	20000384 	.word	0x20000384

08007cc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cc6:	f3ef 8305 	mrs	r3, IPSR
 8007cca:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ccc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10f      	bne.n	8007cf2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8007cd6:	607b      	str	r3, [r7, #4]
  return(result);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d109      	bne.n	8007cf2 <osKernelStart+0x32>
 8007cde:	4b11      	ldr	r3, [pc, #68]	; (8007d24 <osKernelStart+0x64>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d109      	bne.n	8007cfa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ce6:	f3ef 8311 	mrs	r3, BASEPRI
 8007cea:	603b      	str	r3, [r7, #0]
  return(result);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <osKernelStart+0x3a>
    stat = osErrorISR;
 8007cf2:	f06f 0305 	mvn.w	r3, #5
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	e00e      	b.n	8007d18 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007cfa:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <osKernelStart+0x64>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d107      	bne.n	8007d12 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007d02:	4b08      	ldr	r3, [pc, #32]	; (8007d24 <osKernelStart+0x64>)
 8007d04:	2202      	movs	r2, #2
 8007d06:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007d08:	f001 f894 	bl	8008e34 <vTaskStartScheduler>
      stat = osOK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	e002      	b.n	8007d18 <osKernelStart+0x58>
    } else {
      stat = osError;
 8007d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007d18:	68fb      	ldr	r3, [r7, #12]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20000384 	.word	0x20000384

08007d28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b092      	sub	sp, #72	; 0x48
 8007d2c:	af04      	add	r7, sp, #16
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d34:	2300      	movs	r3, #0
 8007d36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d38:	f3ef 8305 	mrs	r3, IPSR
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f040 8095 	bne.w	8007e70 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d46:	f3ef 8310 	mrs	r3, PRIMASK
 8007d4a:	623b      	str	r3, [r7, #32]
  return(result);
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f040 808e 	bne.w	8007e70 <osThreadNew+0x148>
 8007d54:	4b49      	ldr	r3, [pc, #292]	; (8007e7c <osThreadNew+0x154>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d106      	bne.n	8007d6a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d5c:	f3ef 8311 	mrs	r3, BASEPRI
 8007d60:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f040 8083 	bne.w	8007e70 <osThreadNew+0x148>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d07f      	beq.n	8007e70 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 8007d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d74:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007d76:	2318      	movs	r3, #24
 8007d78:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007d7e:	f107 031b 	add.w	r3, r7, #27
 8007d82:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d88:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d045      	beq.n	8007e1c <osThreadNew+0xf4>
      if (attr->name != NULL) {
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <osThreadNew+0x76>
        name = attr->name;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d008      	beq.n	8007dc4 <osThreadNew+0x9c>
 8007db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db4:	2b38      	cmp	r3, #56	; 0x38
 8007db6:	d805      	bhi.n	8007dc4 <osThreadNew+0x9c>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f003 0301 	and.w	r3, r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <osThreadNew+0xa0>
        return (NULL);
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	e054      	b.n	8007e72 <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	089b      	lsrs	r3, r3, #2
 8007dd6:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00e      	beq.n	8007dfe <osThreadNew+0xd6>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	2bbb      	cmp	r3, #187	; 0xbb
 8007de6:	d90a      	bls.n	8007dfe <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d006      	beq.n	8007dfe <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <osThreadNew+0xd6>
        mem = 1;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dfc:	e010      	b.n	8007e20 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10c      	bne.n	8007e20 <osThreadNew+0xf8>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d108      	bne.n	8007e20 <osThreadNew+0xf8>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d104      	bne.n	8007e20 <osThreadNew+0xf8>
          mem = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e1a:	e001      	b.n	8007e20 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d110      	bne.n	8007e48 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e2e:	9202      	str	r2, [sp, #8]
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fe15 	bl	8008a6c <xTaskCreateStatic>
 8007e42:	4603      	mov	r3, r0
 8007e44:	617b      	str	r3, [r7, #20]
 8007e46:	e013      	b.n	8007e70 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d110      	bne.n	8007e70 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	f107 0314 	add.w	r3, r7, #20
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 fe5f 	bl	8008b24 <xTaskCreate>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d001      	beq.n	8007e70 <osThreadNew+0x148>
          hTask = NULL;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e70:	697b      	ldr	r3, [r7, #20]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3738      	adds	r7, #56	; 0x38
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000384 	.word	0x20000384

08007e80 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e88:	f3ef 8305 	mrs	r3, IPSR
 8007e8c:	613b      	str	r3, [r7, #16]
  return(result);
 8007e8e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10f      	bne.n	8007eb4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e94:	f3ef 8310 	mrs	r3, PRIMASK
 8007e98:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d109      	bne.n	8007eb4 <osDelay+0x34>
 8007ea0:	4b0d      	ldr	r3, [pc, #52]	; (8007ed8 <osDelay+0x58>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d109      	bne.n	8007ebc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ea8:	f3ef 8311 	mrs	r3, BASEPRI
 8007eac:	60bb      	str	r3, [r7, #8]
  return(result);
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <osDelay+0x3c>
    stat = osErrorISR;
 8007eb4:	f06f 0305 	mvn.w	r3, #5
 8007eb8:	617b      	str	r3, [r7, #20]
 8007eba:	e007      	b.n	8007ecc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <osDelay+0x4c>
      vTaskDelay(ticks);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 ff80 	bl	8008dcc <vTaskDelay>
    }
  }

  return (stat);
 8007ecc:	697b      	ldr	r3, [r7, #20]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20000384 	.word	0x20000384

08007edc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4a07      	ldr	r2, [pc, #28]	; (8007f08 <vApplicationGetIdleTaskMemory+0x2c>)
 8007eec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	4a06      	ldr	r2, [pc, #24]	; (8007f0c <vApplicationGetIdleTaskMemory+0x30>)
 8007ef2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007efa:	601a      	str	r2, [r3, #0]
}
 8007efc:	bf00      	nop
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	20000388 	.word	0x20000388
 8007f0c:	20000444 	.word	0x20000444

08007f10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4a07      	ldr	r2, [pc, #28]	; (8007f3c <vApplicationGetTimerTaskMemory+0x2c>)
 8007f20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	4a06      	ldr	r2, [pc, #24]	; (8007f40 <vApplicationGetTimerTaskMemory+0x30>)
 8007f26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f2e:	601a      	str	r2, [r3, #0]
}
 8007f30:	bf00      	nop
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc80      	pop	{r7}
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	20000844 	.word	0x20000844
 8007f40:	20000900 	.word	0x20000900

08007f44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f103 0208 	add.w	r2, r3, #8
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f103 0208 	add.w	r2, r3, #8
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f103 0208 	add.w	r2, r3, #8
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	4770      	bx	lr

08007f82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bc80      	pop	{r7}
 8007f98:	4770      	bx	lr

08007f9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b085      	sub	sp, #20
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	601a      	str	r2, [r3, #0]
}
 8007fd6:	bf00      	nop
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bc80      	pop	{r7}
 8007fde:	4770      	bx	lr

08007fe0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ff6:	d103      	bne.n	8008000 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	60fb      	str	r3, [r7, #12]
 8007ffe:	e00c      	b.n	800801a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3308      	adds	r3, #8
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	e002      	b.n	800800e <vListInsert+0x2e>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	60fb      	str	r3, [r7, #12]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	429a      	cmp	r2, r3
 8008018:	d2f6      	bcs.n	8008008 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	601a      	str	r2, [r3, #0]
}
 8008046:	bf00      	nop
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	bc80      	pop	{r7}
 800804e:	4770      	bx	lr

08008050 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6892      	ldr	r2, [r2, #8]
 8008066:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6852      	ldr	r2, [r2, #4]
 8008070:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	429a      	cmp	r2, r3
 800807a:	d103      	bne.n	8008084 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689a      	ldr	r2, [r3, #8]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	1e5a      	subs	r2, r3, #1
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr
	...

080080a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10a      	bne.n	80080ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080ca:	bf00      	nop
 80080cc:	e7fe      	b.n	80080cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80080ce:	f001 fff5 	bl	800a0bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080da:	68f9      	ldr	r1, [r7, #12]
 80080dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080de:	fb01 f303 	mul.w	r3, r1, r3
 80080e2:	441a      	add	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fe:	3b01      	subs	r3, #1
 8008100:	68f9      	ldr	r1, [r7, #12]
 8008102:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008104:	fb01 f303 	mul.w	r3, r1, r3
 8008108:	441a      	add	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	22ff      	movs	r2, #255	; 0xff
 8008112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	22ff      	movs	r2, #255	; 0xff
 800811a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d114      	bne.n	800814e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01a      	beq.n	8008162 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3310      	adds	r3, #16
 8008130:	4618      	mov	r0, r3
 8008132:	f001 f91b 	bl	800936c <xTaskRemoveFromEventList>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d012      	beq.n	8008162 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800813c:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <xQueueGenericReset+0xcc>)
 800813e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	e009      	b.n	8008162 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3310      	adds	r3, #16
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff fef6 	bl	8007f44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3324      	adds	r3, #36	; 0x24
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff fef1 	bl	8007f44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008162:	f001 ffdb 	bl	800a11c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008166:	2301      	movs	r3, #1
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	e000ed04 	.word	0xe000ed04

08008174 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008174:	b580      	push	{r7, lr}
 8008176:	b08e      	sub	sp, #56	; 0x38
 8008178:	af02      	add	r7, sp, #8
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
 8008180:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10a      	bne.n	800819e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800819a:	bf00      	nop
 800819c:	e7fe      	b.n	800819c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081b6:	bf00      	nop
 80081b8:	e7fe      	b.n	80081b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <xQueueGenericCreateStatic+0x52>
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <xQueueGenericCreateStatic+0x56>
 80081c6:	2301      	movs	r3, #1
 80081c8:	e000      	b.n	80081cc <xQueueGenericCreateStatic+0x58>
 80081ca:	2300      	movs	r3, #0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10a      	bne.n	80081e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	623b      	str	r3, [r7, #32]
}
 80081e2:	bf00      	nop
 80081e4:	e7fe      	b.n	80081e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d102      	bne.n	80081f2 <xQueueGenericCreateStatic+0x7e>
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <xQueueGenericCreateStatic+0x82>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e000      	b.n	80081f8 <xQueueGenericCreateStatic+0x84>
 80081f6:	2300      	movs	r3, #0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10a      	bne.n	8008212 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	61fb      	str	r3, [r7, #28]
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008212:	2350      	movs	r3, #80	; 0x50
 8008214:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b50      	cmp	r3, #80	; 0x50
 800821a:	d00a      	beq.n	8008232 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	61bb      	str	r3, [r7, #24]
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00d      	beq.n	8008258 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008244:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	4613      	mov	r3, r2
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	68b9      	ldr	r1, [r7, #8]
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 f805 	bl	8008262 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800825a:	4618      	mov	r0, r3
 800825c:	3730      	adds	r7, #48	; 0x30
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	607a      	str	r2, [r7, #4]
 800826e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d103      	bne.n	800827e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	e002      	b.n	8008284 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008290:	2101      	movs	r1, #1
 8008292:	69b8      	ldr	r0, [r7, #24]
 8008294:	f7ff ff06 	bl	80080a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	78fa      	ldrb	r2, [r7, #3]
 800829c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80082a0:	bf00      	nop
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08e      	sub	sp, #56	; 0x38
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80082b6:	2300      	movs	r3, #0
 80082b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80082be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10a      	bne.n	80082da <xQueueGenericSend+0x32>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d103      	bne.n	80082e8 <xQueueGenericSend+0x40>
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <xQueueGenericSend+0x44>
 80082e8:	2301      	movs	r3, #1
 80082ea:	e000      	b.n	80082ee <xQueueGenericSend+0x46>
 80082ec:	2300      	movs	r3, #0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <xQueueGenericSend+0x60>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008304:	bf00      	nop
 8008306:	e7fe      	b.n	8008306 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b02      	cmp	r3, #2
 800830c:	d103      	bne.n	8008316 <xQueueGenericSend+0x6e>
 800830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008312:	2b01      	cmp	r3, #1
 8008314:	d101      	bne.n	800831a <xQueueGenericSend+0x72>
 8008316:	2301      	movs	r3, #1
 8008318:	e000      	b.n	800831c <xQueueGenericSend+0x74>
 800831a:	2300      	movs	r3, #0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10a      	bne.n	8008336 <xQueueGenericSend+0x8e>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	623b      	str	r3, [r7, #32]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008336:	f001 f9df 	bl	80096f8 <xTaskGetSchedulerState>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d102      	bne.n	8008346 <xQueueGenericSend+0x9e>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <xQueueGenericSend+0xa2>
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <xQueueGenericSend+0xa4>
 800834a:	2300      	movs	r3, #0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <xQueueGenericSend+0xbe>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	61fb      	str	r3, [r7, #28]
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008366:	f001 fea9 	bl	800a0bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008372:	429a      	cmp	r2, r3
 8008374:	d302      	bcc.n	800837c <xQueueGenericSend+0xd4>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b02      	cmp	r3, #2
 800837a:	d129      	bne.n	80083d0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	68b9      	ldr	r1, [r7, #8]
 8008380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008382:	f000 fa07 	bl	8008794 <prvCopyDataToQueue>
 8008386:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	2b00      	cmp	r3, #0
 800838e:	d010      	beq.n	80083b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008392:	3324      	adds	r3, #36	; 0x24
 8008394:	4618      	mov	r0, r3
 8008396:	f000 ffe9 	bl	800936c <xTaskRemoveFromEventList>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d013      	beq.n	80083c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80083a0:	4b3f      	ldr	r3, [pc, #252]	; (80084a0 <xQueueGenericSend+0x1f8>)
 80083a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	e00a      	b.n	80083c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80083b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d007      	beq.n	80083c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80083b8:	4b39      	ldr	r3, [pc, #228]	; (80084a0 <xQueueGenericSend+0x1f8>)
 80083ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80083c8:	f001 fea8 	bl	800a11c <vPortExitCritical>
				return pdPASS;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e063      	b.n	8008498 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d103      	bne.n	80083de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083d6:	f001 fea1 	bl	800a11c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	e05c      	b.n	8008498 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d106      	bne.n	80083f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083e4:	f107 0314 	add.w	r3, r7, #20
 80083e8:	4618      	mov	r0, r3
 80083ea:	f001 f823 	bl	8009434 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083ee:	2301      	movs	r3, #1
 80083f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083f2:	f001 fe93 	bl	800a11c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083f6:	f000 fd8d 	bl	8008f14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083fa:	f001 fe5f 	bl	800a0bc <vPortEnterCritical>
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008404:	b25b      	sxtb	r3, r3
 8008406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800840a:	d103      	bne.n	8008414 <xQueueGenericSend+0x16c>
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800841a:	b25b      	sxtb	r3, r3
 800841c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008420:	d103      	bne.n	800842a <xQueueGenericSend+0x182>
 8008422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800842a:	f001 fe77 	bl	800a11c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800842e:	1d3a      	adds	r2, r7, #4
 8008430:	f107 0314 	add.w	r3, r7, #20
 8008434:	4611      	mov	r1, r2
 8008436:	4618      	mov	r0, r3
 8008438:	f001 f812 	bl	8009460 <xTaskCheckForTimeOut>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d124      	bne.n	800848c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008444:	f000 fa9e 	bl	8008984 <prvIsQueueFull>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d018      	beq.n	8008480 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	3310      	adds	r3, #16
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f000 ff38 	bl	80092cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800845c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800845e:	f000 fa29 	bl	80088b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008462:	f000 fd65 	bl	8008f30 <xTaskResumeAll>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	f47f af7c 	bne.w	8008366 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800846e:	4b0c      	ldr	r3, [pc, #48]	; (80084a0 <xQueueGenericSend+0x1f8>)
 8008470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008474:	601a      	str	r2, [r3, #0]
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	e772      	b.n	8008366 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008482:	f000 fa17 	bl	80088b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008486:	f000 fd53 	bl	8008f30 <xTaskResumeAll>
 800848a:	e76c      	b.n	8008366 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800848c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800848e:	f000 fa11 	bl	80088b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008492:	f000 fd4d 	bl	8008f30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008496:	2300      	movs	r3, #0
		}
	}
}
 8008498:	4618      	mov	r0, r3
 800849a:	3738      	adds	r7, #56	; 0x38
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	e000ed04 	.word	0xe000ed04

080084a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08e      	sub	sp, #56	; 0x38
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10a      	bne.n	80084d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d103      	bne.n	80084e0 <xQueueGenericSendFromISR+0x3c>
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <xQueueGenericSendFromISR+0x40>
 80084e0:	2301      	movs	r3, #1
 80084e2:	e000      	b.n	80084e6 <xQueueGenericSendFromISR+0x42>
 80084e4:	2300      	movs	r3, #0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10a      	bne.n	8008500 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	623b      	str	r3, [r7, #32]
}
 80084fc:	bf00      	nop
 80084fe:	e7fe      	b.n	80084fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b02      	cmp	r3, #2
 8008504:	d103      	bne.n	800850e <xQueueGenericSendFromISR+0x6a>
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850a:	2b01      	cmp	r3, #1
 800850c:	d101      	bne.n	8008512 <xQueueGenericSendFromISR+0x6e>
 800850e:	2301      	movs	r3, #1
 8008510:	e000      	b.n	8008514 <xQueueGenericSendFromISR+0x70>
 8008512:	2300      	movs	r3, #0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10a      	bne.n	800852e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	61fb      	str	r3, [r7, #28]
}
 800852a:	bf00      	nop
 800852c:	e7fe      	b.n	800852c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800852e:	f001 fe87 	bl	800a240 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008532:	f3ef 8211 	mrs	r2, BASEPRI
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	61ba      	str	r2, [r7, #24]
 8008548:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800854a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800854c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008556:	429a      	cmp	r2, r3
 8008558:	d302      	bcc.n	8008560 <xQueueGenericSendFromISR+0xbc>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b02      	cmp	r3, #2
 800855e:	d12c      	bne.n	80085ba <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008570:	f000 f910 	bl	8008794 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008574:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800857c:	d112      	bne.n	80085a4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008582:	2b00      	cmp	r3, #0
 8008584:	d016      	beq.n	80085b4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	3324      	adds	r3, #36	; 0x24
 800858a:	4618      	mov	r0, r3
 800858c:	f000 feee 	bl	800936c <xTaskRemoveFromEventList>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00e      	beq.n	80085b4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00b      	beq.n	80085b4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	e007      	b.n	80085b4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085a8:	3301      	adds	r3, #1
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	b25a      	sxtb	r2, r3
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80085b4:	2301      	movs	r3, #1
 80085b6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80085b8:	e001      	b.n	80085be <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085ba:	2300      	movs	r3, #0
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
 80085be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3738      	adds	r7, #56	; 0x38
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08c      	sub	sp, #48	; 0x30
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085e0:	2300      	movs	r3, #0
 80085e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10a      	bne.n	8008604 <xQueueReceive+0x30>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	623b      	str	r3, [r7, #32]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d103      	bne.n	8008612 <xQueueReceive+0x3e>
 800860a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <xQueueReceive+0x42>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <xQueueReceive+0x44>
 8008616:	2300      	movs	r3, #0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <xQueueReceive+0x5e>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	61fb      	str	r3, [r7, #28]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008632:	f001 f861 	bl	80096f8 <xTaskGetSchedulerState>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d102      	bne.n	8008642 <xQueueReceive+0x6e>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <xQueueReceive+0x72>
 8008642:	2301      	movs	r3, #1
 8008644:	e000      	b.n	8008648 <xQueueReceive+0x74>
 8008646:	2300      	movs	r3, #0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10a      	bne.n	8008662 <xQueueReceive+0x8e>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	61bb      	str	r3, [r7, #24]
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008662:	f001 fd2b 	bl	800a0bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	2b00      	cmp	r3, #0
 8008670:	d01f      	beq.n	80086b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008672:	68b9      	ldr	r1, [r7, #8]
 8008674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008676:	f000 f8f7 	bl	8008868 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	1e5a      	subs	r2, r3, #1
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00f      	beq.n	80086aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	3310      	adds	r3, #16
 800868e:	4618      	mov	r0, r3
 8008690:	f000 fe6c 	bl	800936c <xTaskRemoveFromEventList>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d007      	beq.n	80086aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800869a:	4b3d      	ldr	r3, [pc, #244]	; (8008790 <xQueueReceive+0x1bc>)
 800869c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086aa:	f001 fd37 	bl	800a11c <vPortExitCritical>
				return pdPASS;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e069      	b.n	8008786 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d103      	bne.n	80086c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086b8:	f001 fd30 	bl	800a11c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086bc:	2300      	movs	r3, #0
 80086be:	e062      	b.n	8008786 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d106      	bne.n	80086d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086c6:	f107 0310 	add.w	r3, r7, #16
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 feb2 	bl	8009434 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086d0:	2301      	movs	r3, #1
 80086d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086d4:	f001 fd22 	bl	800a11c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086d8:	f000 fc1c 	bl	8008f14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086dc:	f001 fcee 	bl	800a0bc <vPortEnterCritical>
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086e6:	b25b      	sxtb	r3, r3
 80086e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ec:	d103      	bne.n	80086f6 <xQueueReceive+0x122>
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086fc:	b25b      	sxtb	r3, r3
 80086fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008702:	d103      	bne.n	800870c <xQueueReceive+0x138>
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800870c:	f001 fd06 	bl	800a11c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008710:	1d3a      	adds	r2, r7, #4
 8008712:	f107 0310 	add.w	r3, r7, #16
 8008716:	4611      	mov	r1, r2
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fea1 	bl	8009460 <xTaskCheckForTimeOut>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d123      	bne.n	800876c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008726:	f000 f917 	bl	8008958 <prvIsQueueEmpty>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d017      	beq.n	8008760 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008732:	3324      	adds	r3, #36	; 0x24
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	4611      	mov	r1, r2
 8008738:	4618      	mov	r0, r3
 800873a:	f000 fdc7 	bl	80092cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800873e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008740:	f000 f8b8 	bl	80088b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008744:	f000 fbf4 	bl	8008f30 <xTaskResumeAll>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d189      	bne.n	8008662 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800874e:	4b10      	ldr	r3, [pc, #64]	; (8008790 <xQueueReceive+0x1bc>)
 8008750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	e780      	b.n	8008662 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008762:	f000 f8a7 	bl	80088b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008766:	f000 fbe3 	bl	8008f30 <xTaskResumeAll>
 800876a:	e77a      	b.n	8008662 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800876c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800876e:	f000 f8a1 	bl	80088b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008772:	f000 fbdd 	bl	8008f30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008778:	f000 f8ee 	bl	8008958 <prvIsQueueEmpty>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	f43f af6f 	beq.w	8008662 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008784:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008786:	4618      	mov	r0, r3
 8008788:	3730      	adds	r7, #48	; 0x30
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	e000ed04 	.word	0xe000ed04

08008794 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087a0:	2300      	movs	r3, #0
 80087a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10d      	bne.n	80087ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d14d      	bne.n	8008856 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 ffb8 	bl	8009734 <xTaskPriorityDisinherit>
 80087c4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	605a      	str	r2, [r3, #4]
 80087cc:	e043      	b.n	8008856 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d119      	bne.n	8008808 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6898      	ldr	r0, [r3, #8]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087dc:	461a      	mov	r2, r3
 80087de:	68b9      	ldr	r1, [r7, #8]
 80087e0:	f002 f8f4 	bl	800a9cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ec:	441a      	add	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d32b      	bcc.n	8008856 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	609a      	str	r2, [r3, #8]
 8008806:	e026      	b.n	8008856 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	68d8      	ldr	r0, [r3, #12]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008810:	461a      	mov	r2, r3
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	f002 f8da 	bl	800a9cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	68da      	ldr	r2, [r3, #12]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008820:	425b      	negs	r3, r3
 8008822:	441a      	add	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	429a      	cmp	r2, r3
 8008832:	d207      	bcs.n	8008844 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883c:	425b      	negs	r3, r3
 800883e:	441a      	add	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b02      	cmp	r3, #2
 8008848:	d105      	bne.n	8008856 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	3b01      	subs	r3, #1
 8008854:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800885e:	697b      	ldr	r3, [r7, #20]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	2b00      	cmp	r3, #0
 8008878:	d018      	beq.n	80088ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68da      	ldr	r2, [r3, #12]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008882:	441a      	add	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	429a      	cmp	r2, r3
 8008892:	d303      	bcc.n	800889c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68d9      	ldr	r1, [r3, #12]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a4:	461a      	mov	r2, r3
 80088a6:	6838      	ldr	r0, [r7, #0]
 80088a8:	f002 f890 	bl	800a9cc <memcpy>
	}
}
 80088ac:	bf00      	nop
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088bc:	f001 fbfe 	bl	800a0bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088c8:	e011      	b.n	80088ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d012      	beq.n	80088f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	3324      	adds	r3, #36	; 0x24
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fd48 	bl	800936c <xTaskRemoveFromEventList>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088e2:	f000 fe1f 	bl	8009524 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
 80088e8:	3b01      	subs	r3, #1
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	dce9      	bgt.n	80088ca <prvUnlockQueue+0x16>
 80088f6:	e000      	b.n	80088fa <prvUnlockQueue+0x46>
					break;
 80088f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	22ff      	movs	r2, #255	; 0xff
 80088fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008902:	f001 fc0b 	bl	800a11c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008906:	f001 fbd9 	bl	800a0bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008910:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008912:	e011      	b.n	8008938 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d012      	beq.n	8008942 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3310      	adds	r3, #16
 8008920:	4618      	mov	r0, r3
 8008922:	f000 fd23 	bl	800936c <xTaskRemoveFromEventList>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800892c:	f000 fdfa 	bl	8009524 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	3b01      	subs	r3, #1
 8008934:	b2db      	uxtb	r3, r3
 8008936:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800893c:	2b00      	cmp	r3, #0
 800893e:	dce9      	bgt.n	8008914 <prvUnlockQueue+0x60>
 8008940:	e000      	b.n	8008944 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008942:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	22ff      	movs	r2, #255	; 0xff
 8008948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800894c:	f001 fbe6 	bl	800a11c <vPortExitCritical>
}
 8008950:	bf00      	nop
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008960:	f001 fbac 	bl	800a0bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008968:	2b00      	cmp	r3, #0
 800896a:	d102      	bne.n	8008972 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800896c:	2301      	movs	r3, #1
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	e001      	b.n	8008976 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008972:	2300      	movs	r3, #0
 8008974:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008976:	f001 fbd1 	bl	800a11c <vPortExitCritical>

	return xReturn;
 800897a:	68fb      	ldr	r3, [r7, #12]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800898c:	f001 fb96 	bl	800a0bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008998:	429a      	cmp	r2, r3
 800899a:	d102      	bne.n	80089a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800899c:	2301      	movs	r3, #1
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	e001      	b.n	80089a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089a2:	2300      	movs	r3, #0
 80089a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089a6:	f001 fbb9 	bl	800a11c <vPortExitCritical>

	return xReturn;
 80089aa:	68fb      	ldr	r3, [r7, #12]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089be:	2300      	movs	r3, #0
 80089c0:	60fb      	str	r3, [r7, #12]
 80089c2:	e014      	b.n	80089ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089c4:	4a0e      	ldr	r2, [pc, #56]	; (8008a00 <vQueueAddToRegistry+0x4c>)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10b      	bne.n	80089e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089d0:	490b      	ldr	r1, [pc, #44]	; (8008a00 <vQueueAddToRegistry+0x4c>)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089da:	4a09      	ldr	r2, [pc, #36]	; (8008a00 <vQueueAddToRegistry+0x4c>)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	00db      	lsls	r3, r3, #3
 80089e0:	4413      	add	r3, r2
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089e6:	e006      	b.n	80089f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3301      	adds	r3, #1
 80089ec:	60fb      	str	r3, [r7, #12]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b07      	cmp	r3, #7
 80089f2:	d9e7      	bls.n	80089c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bc80      	pop	{r7}
 80089fe:	4770      	bx	lr
 8008a00:	20001100 	.word	0x20001100

08008a04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a14:	f001 fb52 	bl	800a0bc <vPortEnterCritical>
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a1e:	b25b      	sxtb	r3, r3
 8008a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a24:	d103      	bne.n	8008a2e <vQueueWaitForMessageRestricted+0x2a>
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a34:	b25b      	sxtb	r3, r3
 8008a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a3a:	d103      	bne.n	8008a44 <vQueueWaitForMessageRestricted+0x40>
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a44:	f001 fb6a 	bl	800a11c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d106      	bne.n	8008a5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	3324      	adds	r3, #36	; 0x24
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	68b9      	ldr	r1, [r7, #8]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fc5b 	bl	8009314 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a5e:	6978      	ldr	r0, [r7, #20]
 8008a60:	f7ff ff28 	bl	80088b4 <prvUnlockQueue>
	}
 8008a64:	bf00      	nop
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08e      	sub	sp, #56	; 0x38
 8008a70:	af04      	add	r7, sp, #16
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
 8008a78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10a      	bne.n	8008a96 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	623b      	str	r3, [r7, #32]
}
 8008a92:	bf00      	nop
 8008a94:	e7fe      	b.n	8008a94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10a      	bne.n	8008ab2 <xTaskCreateStatic+0x46>
	__asm volatile
 8008a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	61fb      	str	r3, [r7, #28]
}
 8008aae:	bf00      	nop
 8008ab0:	e7fe      	b.n	8008ab0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ab2:	23bc      	movs	r3, #188	; 0xbc
 8008ab4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	2bbc      	cmp	r3, #188	; 0xbc
 8008aba:	d00a      	beq.n	8008ad2 <xTaskCreateStatic+0x66>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	61bb      	str	r3, [r7, #24]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d01e      	beq.n	8008b16 <xTaskCreateStatic+0xaa>
 8008ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d01b      	beq.n	8008b16 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ae6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	2202      	movs	r2, #2
 8008aec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008af0:	2300      	movs	r3, #0
 8008af2:	9303      	str	r3, [sp, #12]
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	9302      	str	r3, [sp, #8]
 8008af8:	f107 0314 	add.w	r3, r7, #20
 8008afc:	9301      	str	r3, [sp, #4]
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	68b9      	ldr	r1, [r7, #8]
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 f851 	bl	8008bb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b10:	f000 f8ec 	bl	8008cec <prvAddNewTaskToReadyList>
 8008b14:	e001      	b.n	8008b1a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008b16:	2300      	movs	r3, #0
 8008b18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b1a:	697b      	ldr	r3, [r7, #20]
	}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3728      	adds	r7, #40	; 0x28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b08c      	sub	sp, #48	; 0x30
 8008b28:	af04      	add	r7, sp, #16
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	603b      	str	r3, [r7, #0]
 8008b30:	4613      	mov	r3, r2
 8008b32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b34:	88fb      	ldrh	r3, [r7, #6]
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f001 fbbf 	bl	800a2bc <pvPortMalloc>
 8008b3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00e      	beq.n	8008b64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008b46:	20bc      	movs	r0, #188	; 0xbc
 8008b48:	f001 fbb8 	bl	800a2bc <pvPortMalloc>
 8008b4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d003      	beq.n	8008b5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	631a      	str	r2, [r3, #48]	; 0x30
 8008b5a:	e005      	b.n	8008b68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b5c:	6978      	ldr	r0, [r7, #20]
 8008b5e:	f001 fc71 	bl	800a444 <vPortFree>
 8008b62:	e001      	b.n	8008b68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b64:	2300      	movs	r3, #0
 8008b66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d017      	beq.n	8008b9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b76:	88fa      	ldrh	r2, [r7, #6]
 8008b78:	2300      	movs	r3, #0
 8008b7a:	9303      	str	r3, [sp, #12]
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	9302      	str	r3, [sp, #8]
 8008b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	68b9      	ldr	r1, [r7, #8]
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f000 f80f 	bl	8008bb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b92:	69f8      	ldr	r0, [r7, #28]
 8008b94:	f000 f8aa 	bl	8008cec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	61bb      	str	r3, [r7, #24]
 8008b9c:	e002      	b.n	8008ba4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ba2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ba4:	69bb      	ldr	r3, [r7, #24]
	}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3720      	adds	r7, #32
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
	...

08008bb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	21a5      	movs	r1, #165	; 0xa5
 8008bca:	f001 ff27 	bl	800aa1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	f023 0307 	bic.w	r3, r3, #7
 8008be6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	f003 0307 	and.w	r3, r3, #7
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00a      	beq.n	8008c08 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	617b      	str	r3, [r7, #20]
}
 8008c04:	bf00      	nop
 8008c06:	e7fe      	b.n	8008c06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c08:	2300      	movs	r3, #0
 8008c0a:	61fb      	str	r3, [r7, #28]
 8008c0c:	e012      	b.n	8008c34 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	4413      	add	r3, r2
 8008c14:	7819      	ldrb	r1, [r3, #0]
 8008c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	3334      	adds	r3, #52	; 0x34
 8008c1e:	460a      	mov	r2, r1
 8008c20:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	4413      	add	r3, r2
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d006      	beq.n	8008c3c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	3301      	adds	r3, #1
 8008c32:	61fb      	str	r3, [r7, #28]
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	2b0f      	cmp	r3, #15
 8008c38:	d9e9      	bls.n	8008c0e <prvInitialiseNewTask+0x5e>
 8008c3a:	e000      	b.n	8008c3e <prvInitialiseNewTask+0x8e>
		{
			break;
 8008c3c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	2b37      	cmp	r3, #55	; 0x37
 8008c4a:	d901      	bls.n	8008c50 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c4c:	2337      	movs	r3, #55	; 0x37
 8008c4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5e:	2200      	movs	r2, #0
 8008c60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	3304      	adds	r3, #4
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff f98b 	bl	8007f82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	3318      	adds	r3, #24
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7ff f986 	bl	8007f82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	3354      	adds	r3, #84	; 0x54
 8008ca0:	2260      	movs	r2, #96	; 0x60
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f001 feb9 	bl	800aa1c <memset>
 8008caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cac:	4a0c      	ldr	r2, [pc, #48]	; (8008ce0 <prvInitialiseNewTask+0x130>)
 8008cae:	659a      	str	r2, [r3, #88]	; 0x58
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb2:	4a0c      	ldr	r2, [pc, #48]	; (8008ce4 <prvInitialiseNewTask+0x134>)
 8008cb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb8:	4a0b      	ldr	r2, [pc, #44]	; (8008ce8 <prvInitialiseNewTask+0x138>)
 8008cba:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	68f9      	ldr	r1, [r7, #12]
 8008cc0:	69b8      	ldr	r0, [r7, #24]
 8008cc2:	f001 f90b 	bl	8009edc <pxPortInitialiseStack>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cd8:	bf00      	nop
 8008cda:	3720      	adds	r7, #32
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	0800b788 	.word	0x0800b788
 8008ce4:	0800b7a8 	.word	0x0800b7a8
 8008ce8:	0800b768 	.word	0x0800b768

08008cec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cf4:	f001 f9e2 	bl	800a0bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cf8:	4b2d      	ldr	r3, [pc, #180]	; (8008db0 <prvAddNewTaskToReadyList+0xc4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	4a2c      	ldr	r2, [pc, #176]	; (8008db0 <prvAddNewTaskToReadyList+0xc4>)
 8008d00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d02:	4b2c      	ldr	r3, [pc, #176]	; (8008db4 <prvAddNewTaskToReadyList+0xc8>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d109      	bne.n	8008d1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d0a:	4a2a      	ldr	r2, [pc, #168]	; (8008db4 <prvAddNewTaskToReadyList+0xc8>)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d10:	4b27      	ldr	r3, [pc, #156]	; (8008db0 <prvAddNewTaskToReadyList+0xc4>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d110      	bne.n	8008d3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d18:	f000 fc28 	bl	800956c <prvInitialiseTaskLists>
 8008d1c:	e00d      	b.n	8008d3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d1e:	4b26      	ldr	r3, [pc, #152]	; (8008db8 <prvAddNewTaskToReadyList+0xcc>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d109      	bne.n	8008d3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d26:	4b23      	ldr	r3, [pc, #140]	; (8008db4 <prvAddNewTaskToReadyList+0xc8>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d802      	bhi.n	8008d3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d34:	4a1f      	ldr	r2, [pc, #124]	; (8008db4 <prvAddNewTaskToReadyList+0xc8>)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d3a:	4b20      	ldr	r3, [pc, #128]	; (8008dbc <prvAddNewTaskToReadyList+0xd0>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	4a1e      	ldr	r2, [pc, #120]	; (8008dbc <prvAddNewTaskToReadyList+0xd0>)
 8008d42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d44:	4b1d      	ldr	r3, [pc, #116]	; (8008dbc <prvAddNewTaskToReadyList+0xd0>)
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d50:	4b1b      	ldr	r3, [pc, #108]	; (8008dc0 <prvAddNewTaskToReadyList+0xd4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d903      	bls.n	8008d60 <prvAddNewTaskToReadyList+0x74>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	4a18      	ldr	r2, [pc, #96]	; (8008dc0 <prvAddNewTaskToReadyList+0xd4>)
 8008d5e:	6013      	str	r3, [r2, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d64:	4613      	mov	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4a15      	ldr	r2, [pc, #84]	; (8008dc4 <prvAddNewTaskToReadyList+0xd8>)
 8008d6e:	441a      	add	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3304      	adds	r3, #4
 8008d74:	4619      	mov	r1, r3
 8008d76:	4610      	mov	r0, r2
 8008d78:	f7ff f90f 	bl	8007f9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d7c:	f001 f9ce 	bl	800a11c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d80:	4b0d      	ldr	r3, [pc, #52]	; (8008db8 <prvAddNewTaskToReadyList+0xcc>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00e      	beq.n	8008da6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d88:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <prvAddNewTaskToReadyList+0xc8>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d207      	bcs.n	8008da6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d96:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <prvAddNewTaskToReadyList+0xdc>)
 8008d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d9c:	601a      	str	r2, [r3, #0]
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008da6:	bf00      	nop
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20001614 	.word	0x20001614
 8008db4:	20001140 	.word	0x20001140
 8008db8:	20001620 	.word	0x20001620
 8008dbc:	20001630 	.word	0x20001630
 8008dc0:	2000161c 	.word	0x2000161c
 8008dc4:	20001144 	.word	0x20001144
 8008dc8:	e000ed04 	.word	0xe000ed04

08008dcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d017      	beq.n	8008e0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008dde:	4b13      	ldr	r3, [pc, #76]	; (8008e2c <vTaskDelay+0x60>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00a      	beq.n	8008dfc <vTaskDelay+0x30>
	__asm volatile
 8008de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dea:	f383 8811 	msr	BASEPRI, r3
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	60bb      	str	r3, [r7, #8]
}
 8008df8:	bf00      	nop
 8008dfa:	e7fe      	b.n	8008dfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008dfc:	f000 f88a 	bl	8008f14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e00:	2100      	movs	r1, #0
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fd04 	bl	8009810 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e08:	f000 f892 	bl	8008f30 <xTaskResumeAll>
 8008e0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d107      	bne.n	8008e24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008e14:	4b06      	ldr	r3, [pc, #24]	; (8008e30 <vTaskDelay+0x64>)
 8008e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e24:	bf00      	nop
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	2000163c 	.word	0x2000163c
 8008e30:	e000ed04 	.word	0xe000ed04

08008e34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08a      	sub	sp, #40	; 0x28
 8008e38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e42:	463a      	mov	r2, r7
 8008e44:	1d39      	adds	r1, r7, #4
 8008e46:	f107 0308 	add.w	r3, r7, #8
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff f846 	bl	8007edc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	9202      	str	r2, [sp, #8]
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	2300      	movs	r3, #0
 8008e60:	460a      	mov	r2, r1
 8008e62:	4924      	ldr	r1, [pc, #144]	; (8008ef4 <vTaskStartScheduler+0xc0>)
 8008e64:	4824      	ldr	r0, [pc, #144]	; (8008ef8 <vTaskStartScheduler+0xc4>)
 8008e66:	f7ff fe01 	bl	8008a6c <xTaskCreateStatic>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	4a23      	ldr	r2, [pc, #140]	; (8008efc <vTaskStartScheduler+0xc8>)
 8008e6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e70:	4b22      	ldr	r3, [pc, #136]	; (8008efc <vTaskStartScheduler+0xc8>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	617b      	str	r3, [r7, #20]
 8008e7c:	e001      	b.n	8008e82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d102      	bne.n	8008e8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e88:	f000 fd16 	bl	80098b8 <xTimerCreateTimerTask>
 8008e8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d11b      	bne.n	8008ecc <vTaskStartScheduler+0x98>
	__asm volatile
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	613b      	str	r3, [r7, #16]
}
 8008ea6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ea8:	4b15      	ldr	r3, [pc, #84]	; (8008f00 <vTaskStartScheduler+0xcc>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3354      	adds	r3, #84	; 0x54
 8008eae:	4a15      	ldr	r2, [pc, #84]	; (8008f04 <vTaskStartScheduler+0xd0>)
 8008eb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008eb2:	4b15      	ldr	r3, [pc, #84]	; (8008f08 <vTaskStartScheduler+0xd4>)
 8008eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008eba:	4b14      	ldr	r3, [pc, #80]	; (8008f0c <vTaskStartScheduler+0xd8>)
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008ec0:	4b13      	ldr	r3, [pc, #76]	; (8008f10 <vTaskStartScheduler+0xdc>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ec6:	f001 f887 	bl	8009fd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008eca:	e00e      	b.n	8008eea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ed2:	d10a      	bne.n	8008eea <vTaskStartScheduler+0xb6>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	60fb      	str	r3, [r7, #12]
}
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <vTaskStartScheduler+0xb4>
}
 8008eea:	bf00      	nop
 8008eec:	3718      	adds	r7, #24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	0800b4cc 	.word	0x0800b4cc
 8008ef8:	0800953d 	.word	0x0800953d
 8008efc:	20001638 	.word	0x20001638
 8008f00:	20001140 	.word	0x20001140
 8008f04:	20000018 	.word	0x20000018
 8008f08:	20001634 	.word	0x20001634
 8008f0c:	20001620 	.word	0x20001620
 8008f10:	20001618 	.word	0x20001618

08008f14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f14:	b480      	push	{r7}
 8008f16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008f18:	4b04      	ldr	r3, [pc, #16]	; (8008f2c <vTaskSuspendAll+0x18>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	4a03      	ldr	r2, [pc, #12]	; (8008f2c <vTaskSuspendAll+0x18>)
 8008f20:	6013      	str	r3, [r2, #0]
}
 8008f22:	bf00      	nop
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bc80      	pop	{r7}
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	2000163c 	.word	0x2000163c

08008f30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f3e:	4b42      	ldr	r3, [pc, #264]	; (8009048 <xTaskResumeAll+0x118>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10a      	bne.n	8008f5c <xTaskResumeAll+0x2c>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	603b      	str	r3, [r7, #0]
}
 8008f58:	bf00      	nop
 8008f5a:	e7fe      	b.n	8008f5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f5c:	f001 f8ae 	bl	800a0bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f60:	4b39      	ldr	r3, [pc, #228]	; (8009048 <xTaskResumeAll+0x118>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	4a38      	ldr	r2, [pc, #224]	; (8009048 <xTaskResumeAll+0x118>)
 8008f68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f6a:	4b37      	ldr	r3, [pc, #220]	; (8009048 <xTaskResumeAll+0x118>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d162      	bne.n	8009038 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f72:	4b36      	ldr	r3, [pc, #216]	; (800904c <xTaskResumeAll+0x11c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d05e      	beq.n	8009038 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f7a:	e02f      	b.n	8008fdc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008f7c:	4b34      	ldr	r3, [pc, #208]	; (8009050 <xTaskResumeAll+0x120>)
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	3318      	adds	r3, #24
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7ff f861 	bl	8008050 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3304      	adds	r3, #4
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7ff f85c 	bl	8008050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f9c:	4b2d      	ldr	r3, [pc, #180]	; (8009054 <xTaskResumeAll+0x124>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d903      	bls.n	8008fac <xTaskResumeAll+0x7c>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	4a2a      	ldr	r2, [pc, #168]	; (8009054 <xTaskResumeAll+0x124>)
 8008faa:	6013      	str	r3, [r2, #0]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4a27      	ldr	r2, [pc, #156]	; (8009058 <xTaskResumeAll+0x128>)
 8008fba:	441a      	add	r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	f7fe ffe9 	bl	8007f9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fcc:	4b23      	ldr	r3, [pc, #140]	; (800905c <xTaskResumeAll+0x12c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d302      	bcc.n	8008fdc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008fd6:	4b22      	ldr	r3, [pc, #136]	; (8009060 <xTaskResumeAll+0x130>)
 8008fd8:	2201      	movs	r2, #1
 8008fda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fdc:	4b1c      	ldr	r3, [pc, #112]	; (8009050 <xTaskResumeAll+0x120>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1cb      	bne.n	8008f7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008fea:	f000 fb61 	bl	80096b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008fee:	4b1d      	ldr	r3, [pc, #116]	; (8009064 <xTaskResumeAll+0x134>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d010      	beq.n	800901c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ffa:	f000 f845 	bl	8009088 <xTaskIncrementTick>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009004:	4b16      	ldr	r3, [pc, #88]	; (8009060 <xTaskResumeAll+0x130>)
 8009006:	2201      	movs	r2, #1
 8009008:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3b01      	subs	r3, #1
 800900e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1f1      	bne.n	8008ffa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009016:	4b13      	ldr	r3, [pc, #76]	; (8009064 <xTaskResumeAll+0x134>)
 8009018:	2200      	movs	r2, #0
 800901a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800901c:	4b10      	ldr	r3, [pc, #64]	; (8009060 <xTaskResumeAll+0x130>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d009      	beq.n	8009038 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009024:	2301      	movs	r3, #1
 8009026:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009028:	4b0f      	ldr	r3, [pc, #60]	; (8009068 <xTaskResumeAll+0x138>)
 800902a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800902e:	601a      	str	r2, [r3, #0]
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009038:	f001 f870 	bl	800a11c <vPortExitCritical>

	return xAlreadyYielded;
 800903c:	68bb      	ldr	r3, [r7, #8]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	2000163c 	.word	0x2000163c
 800904c:	20001614 	.word	0x20001614
 8009050:	200015d4 	.word	0x200015d4
 8009054:	2000161c 	.word	0x2000161c
 8009058:	20001144 	.word	0x20001144
 800905c:	20001140 	.word	0x20001140
 8009060:	20001628 	.word	0x20001628
 8009064:	20001624 	.word	0x20001624
 8009068:	e000ed04 	.word	0xe000ed04

0800906c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009072:	4b04      	ldr	r3, [pc, #16]	; (8009084 <xTaskGetTickCount+0x18>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009078:	687b      	ldr	r3, [r7, #4]
}
 800907a:	4618      	mov	r0, r3
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	bc80      	pop	{r7}
 8009082:	4770      	bx	lr
 8009084:	20001618 	.word	0x20001618

08009088 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800908e:	2300      	movs	r3, #0
 8009090:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009092:	4b51      	ldr	r3, [pc, #324]	; (80091d8 <xTaskIncrementTick+0x150>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	f040 808e 	bne.w	80091b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800909c:	4b4f      	ldr	r3, [pc, #316]	; (80091dc <xTaskIncrementTick+0x154>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3301      	adds	r3, #1
 80090a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090a4:	4a4d      	ldr	r2, [pc, #308]	; (80091dc <xTaskIncrementTick+0x154>)
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d120      	bne.n	80090f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80090b0:	4b4b      	ldr	r3, [pc, #300]	; (80091e0 <xTaskIncrementTick+0x158>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00a      	beq.n	80090d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	603b      	str	r3, [r7, #0]
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <xTaskIncrementTick+0x46>
 80090d0:	4b43      	ldr	r3, [pc, #268]	; (80091e0 <xTaskIncrementTick+0x158>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	4b43      	ldr	r3, [pc, #268]	; (80091e4 <xTaskIncrementTick+0x15c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a41      	ldr	r2, [pc, #260]	; (80091e0 <xTaskIncrementTick+0x158>)
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	4a41      	ldr	r2, [pc, #260]	; (80091e4 <xTaskIncrementTick+0x15c>)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6013      	str	r3, [r2, #0]
 80090e4:	4b40      	ldr	r3, [pc, #256]	; (80091e8 <xTaskIncrementTick+0x160>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3301      	adds	r3, #1
 80090ea:	4a3f      	ldr	r2, [pc, #252]	; (80091e8 <xTaskIncrementTick+0x160>)
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	f000 fadf 	bl	80096b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090f2:	4b3e      	ldr	r3, [pc, #248]	; (80091ec <xTaskIncrementTick+0x164>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d34e      	bcc.n	800919a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090fc:	4b38      	ldr	r3, [pc, #224]	; (80091e0 <xTaskIncrementTick+0x158>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <xTaskIncrementTick+0x82>
 8009106:	2301      	movs	r3, #1
 8009108:	e000      	b.n	800910c <xTaskIncrementTick+0x84>
 800910a:	2300      	movs	r3, #0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d004      	beq.n	800911a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009110:	4b36      	ldr	r3, [pc, #216]	; (80091ec <xTaskIncrementTick+0x164>)
 8009112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009116:	601a      	str	r2, [r3, #0]
					break;
 8009118:	e03f      	b.n	800919a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800911a:	4b31      	ldr	r3, [pc, #196]	; (80091e0 <xTaskIncrementTick+0x158>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	429a      	cmp	r2, r3
 8009130:	d203      	bcs.n	800913a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009132:	4a2e      	ldr	r2, [pc, #184]	; (80091ec <xTaskIncrementTick+0x164>)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6013      	str	r3, [r2, #0]
						break;
 8009138:	e02f      	b.n	800919a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	3304      	adds	r3, #4
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe ff86 	bl	8008050 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009148:	2b00      	cmp	r3, #0
 800914a:	d004      	beq.n	8009156 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	3318      	adds	r3, #24
 8009150:	4618      	mov	r0, r3
 8009152:	f7fe ff7d 	bl	8008050 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915a:	4b25      	ldr	r3, [pc, #148]	; (80091f0 <xTaskIncrementTick+0x168>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	429a      	cmp	r2, r3
 8009160:	d903      	bls.n	800916a <xTaskIncrementTick+0xe2>
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009166:	4a22      	ldr	r2, [pc, #136]	; (80091f0 <xTaskIncrementTick+0x168>)
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916e:	4613      	mov	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4a1f      	ldr	r2, [pc, #124]	; (80091f4 <xTaskIncrementTick+0x16c>)
 8009178:	441a      	add	r2, r3
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	3304      	adds	r3, #4
 800917e:	4619      	mov	r1, r3
 8009180:	4610      	mov	r0, r2
 8009182:	f7fe ff0a 	bl	8007f9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918a:	4b1b      	ldr	r3, [pc, #108]	; (80091f8 <xTaskIncrementTick+0x170>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009190:	429a      	cmp	r2, r3
 8009192:	d3b3      	bcc.n	80090fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009194:	2301      	movs	r3, #1
 8009196:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009198:	e7b0      	b.n	80090fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800919a:	4b17      	ldr	r3, [pc, #92]	; (80091f8 <xTaskIncrementTick+0x170>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a0:	4914      	ldr	r1, [pc, #80]	; (80091f4 <xTaskIncrementTick+0x16c>)
 80091a2:	4613      	mov	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	440b      	add	r3, r1
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d907      	bls.n	80091c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80091b2:	2301      	movs	r3, #1
 80091b4:	617b      	str	r3, [r7, #20]
 80091b6:	e004      	b.n	80091c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80091b8:	4b10      	ldr	r3, [pc, #64]	; (80091fc <xTaskIncrementTick+0x174>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3301      	adds	r3, #1
 80091be:	4a0f      	ldr	r2, [pc, #60]	; (80091fc <xTaskIncrementTick+0x174>)
 80091c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80091c2:	4b0f      	ldr	r3, [pc, #60]	; (8009200 <xTaskIncrementTick+0x178>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80091ca:	2301      	movs	r3, #1
 80091cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80091ce:	697b      	ldr	r3, [r7, #20]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3718      	adds	r7, #24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	2000163c 	.word	0x2000163c
 80091dc:	20001618 	.word	0x20001618
 80091e0:	200015cc 	.word	0x200015cc
 80091e4:	200015d0 	.word	0x200015d0
 80091e8:	2000162c 	.word	0x2000162c
 80091ec:	20001634 	.word	0x20001634
 80091f0:	2000161c 	.word	0x2000161c
 80091f4:	20001144 	.word	0x20001144
 80091f8:	20001140 	.word	0x20001140
 80091fc:	20001624 	.word	0x20001624
 8009200:	20001628 	.word	0x20001628

08009204 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800920a:	4b2a      	ldr	r3, [pc, #168]	; (80092b4 <vTaskSwitchContext+0xb0>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009212:	4b29      	ldr	r3, [pc, #164]	; (80092b8 <vTaskSwitchContext+0xb4>)
 8009214:	2201      	movs	r2, #1
 8009216:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009218:	e046      	b.n	80092a8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800921a:	4b27      	ldr	r3, [pc, #156]	; (80092b8 <vTaskSwitchContext+0xb4>)
 800921c:	2200      	movs	r2, #0
 800921e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009220:	4b26      	ldr	r3, [pc, #152]	; (80092bc <vTaskSwitchContext+0xb8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	e010      	b.n	800924a <vTaskSwitchContext+0x46>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10a      	bne.n	8009244 <vTaskSwitchContext+0x40>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	607b      	str	r3, [r7, #4]
}
 8009240:	bf00      	nop
 8009242:	e7fe      	b.n	8009242 <vTaskSwitchContext+0x3e>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	3b01      	subs	r3, #1
 8009248:	60fb      	str	r3, [r7, #12]
 800924a:	491d      	ldr	r1, [pc, #116]	; (80092c0 <vTaskSwitchContext+0xbc>)
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	4613      	mov	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	440b      	add	r3, r1
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d0e4      	beq.n	8009228 <vTaskSwitchContext+0x24>
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	4613      	mov	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4a15      	ldr	r2, [pc, #84]	; (80092c0 <vTaskSwitchContext+0xbc>)
 800926a:	4413      	add	r3, r2
 800926c:	60bb      	str	r3, [r7, #8]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	605a      	str	r2, [r3, #4]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	3308      	adds	r3, #8
 8009280:	429a      	cmp	r2, r3
 8009282:	d104      	bne.n	800928e <vTaskSwitchContext+0x8a>
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	605a      	str	r2, [r3, #4]
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	4a0b      	ldr	r2, [pc, #44]	; (80092c4 <vTaskSwitchContext+0xc0>)
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	4a08      	ldr	r2, [pc, #32]	; (80092bc <vTaskSwitchContext+0xb8>)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800929e:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <vTaskSwitchContext+0xc0>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	3354      	adds	r3, #84	; 0x54
 80092a4:	4a08      	ldr	r2, [pc, #32]	; (80092c8 <vTaskSwitchContext+0xc4>)
 80092a6:	6013      	str	r3, [r2, #0]
}
 80092a8:	bf00      	nop
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bc80      	pop	{r7}
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	2000163c 	.word	0x2000163c
 80092b8:	20001628 	.word	0x20001628
 80092bc:	2000161c 	.word	0x2000161c
 80092c0:	20001144 	.word	0x20001144
 80092c4:	20001140 	.word	0x20001140
 80092c8:	20000018 	.word	0x20000018

080092cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10a      	bne.n	80092f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80092dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	60fb      	str	r3, [r7, #12]
}
 80092ee:	bf00      	nop
 80092f0:	e7fe      	b.n	80092f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092f2:	4b07      	ldr	r3, [pc, #28]	; (8009310 <vTaskPlaceOnEventList+0x44>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3318      	adds	r3, #24
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7fe fe70 	bl	8007fe0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009300:	2101      	movs	r1, #1
 8009302:	6838      	ldr	r0, [r7, #0]
 8009304:	f000 fa84 	bl	8009810 <prvAddCurrentTaskToDelayedList>
}
 8009308:	bf00      	nop
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	20001140 	.word	0x20001140

08009314 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10a      	bne.n	800933c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	617b      	str	r3, [r7, #20]
}
 8009338:	bf00      	nop
 800933a:	e7fe      	b.n	800933a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800933c:	4b0a      	ldr	r3, [pc, #40]	; (8009368 <vTaskPlaceOnEventListRestricted+0x54>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3318      	adds	r3, #24
 8009342:	4619      	mov	r1, r3
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f7fe fe28 	bl	8007f9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009354:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009356:	6879      	ldr	r1, [r7, #4]
 8009358:	68b8      	ldr	r0, [r7, #8]
 800935a:	f000 fa59 	bl	8009810 <prvAddCurrentTaskToDelayedList>
	}
 800935e:	bf00      	nop
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	20001140 	.word	0x20001140

0800936c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10a      	bne.n	8009398 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	60fb      	str	r3, [r7, #12]
}
 8009394:	bf00      	nop
 8009396:	e7fe      	b.n	8009396 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	3318      	adds	r3, #24
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe fe57 	bl	8008050 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093a2:	4b1e      	ldr	r3, [pc, #120]	; (800941c <xTaskRemoveFromEventList+0xb0>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d11d      	bne.n	80093e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	3304      	adds	r3, #4
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe fe4e 	bl	8008050 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b8:	4b19      	ldr	r3, [pc, #100]	; (8009420 <xTaskRemoveFromEventList+0xb4>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d903      	bls.n	80093c8 <xTaskRemoveFromEventList+0x5c>
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c4:	4a16      	ldr	r2, [pc, #88]	; (8009420 <xTaskRemoveFromEventList+0xb4>)
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093cc:	4613      	mov	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4a13      	ldr	r2, [pc, #76]	; (8009424 <xTaskRemoveFromEventList+0xb8>)
 80093d6:	441a      	add	r2, r3
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	3304      	adds	r3, #4
 80093dc:	4619      	mov	r1, r3
 80093de:	4610      	mov	r0, r2
 80093e0:	f7fe fddb 	bl	8007f9a <vListInsertEnd>
 80093e4:	e005      	b.n	80093f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	3318      	adds	r3, #24
 80093ea:	4619      	mov	r1, r3
 80093ec:	480e      	ldr	r0, [pc, #56]	; (8009428 <xTaskRemoveFromEventList+0xbc>)
 80093ee:	f7fe fdd4 	bl	8007f9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f6:	4b0d      	ldr	r3, [pc, #52]	; (800942c <xTaskRemoveFromEventList+0xc0>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d905      	bls.n	800940c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009400:	2301      	movs	r3, #1
 8009402:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009404:	4b0a      	ldr	r3, [pc, #40]	; (8009430 <xTaskRemoveFromEventList+0xc4>)
 8009406:	2201      	movs	r2, #1
 8009408:	601a      	str	r2, [r3, #0]
 800940a:	e001      	b.n	8009410 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800940c:	2300      	movs	r3, #0
 800940e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009410:	697b      	ldr	r3, [r7, #20]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	2000163c 	.word	0x2000163c
 8009420:	2000161c 	.word	0x2000161c
 8009424:	20001144 	.word	0x20001144
 8009428:	200015d4 	.word	0x200015d4
 800942c:	20001140 	.word	0x20001140
 8009430:	20001628 	.word	0x20001628

08009434 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800943c:	4b06      	ldr	r3, [pc, #24]	; (8009458 <vTaskInternalSetTimeOutState+0x24>)
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009444:	4b05      	ldr	r3, [pc, #20]	; (800945c <vTaskInternalSetTimeOutState+0x28>)
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	605a      	str	r2, [r3, #4]
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	bc80      	pop	{r7}
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	2000162c 	.word	0x2000162c
 800945c:	20001618 	.word	0x20001618

08009460 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b088      	sub	sp, #32
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10a      	bne.n	8009486 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	613b      	str	r3, [r7, #16]
}
 8009482:	bf00      	nop
 8009484:	e7fe      	b.n	8009484 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10a      	bne.n	80094a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	60fb      	str	r3, [r7, #12]
}
 800949e:	bf00      	nop
 80094a0:	e7fe      	b.n	80094a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80094a2:	f000 fe0b 	bl	800a0bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094a6:	4b1d      	ldr	r3, [pc, #116]	; (800951c <xTaskCheckForTimeOut+0xbc>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	69ba      	ldr	r2, [r7, #24]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094be:	d102      	bne.n	80094c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094c0:	2300      	movs	r3, #0
 80094c2:	61fb      	str	r3, [r7, #28]
 80094c4:	e023      	b.n	800950e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	4b15      	ldr	r3, [pc, #84]	; (8009520 <xTaskCheckForTimeOut+0xc0>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d007      	beq.n	80094e2 <xTaskCheckForTimeOut+0x82>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	69ba      	ldr	r2, [r7, #24]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d302      	bcc.n	80094e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80094dc:	2301      	movs	r3, #1
 80094de:	61fb      	str	r3, [r7, #28]
 80094e0:	e015      	b.n	800950e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d20b      	bcs.n	8009504 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	1ad2      	subs	r2, r2, r3
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7ff ff9b 	bl	8009434 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094fe:	2300      	movs	r3, #0
 8009500:	61fb      	str	r3, [r7, #28]
 8009502:	e004      	b.n	800950e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800950a:	2301      	movs	r3, #1
 800950c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800950e:	f000 fe05 	bl	800a11c <vPortExitCritical>

	return xReturn;
 8009512:	69fb      	ldr	r3, [r7, #28]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3720      	adds	r7, #32
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	20001618 	.word	0x20001618
 8009520:	2000162c 	.word	0x2000162c

08009524 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009524:	b480      	push	{r7}
 8009526:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009528:	4b03      	ldr	r3, [pc, #12]	; (8009538 <vTaskMissedYield+0x14>)
 800952a:	2201      	movs	r2, #1
 800952c:	601a      	str	r2, [r3, #0]
}
 800952e:	bf00      	nop
 8009530:	46bd      	mov	sp, r7
 8009532:	bc80      	pop	{r7}
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	20001628 	.word	0x20001628

0800953c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009544:	f000 f852 	bl	80095ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009548:	4b06      	ldr	r3, [pc, #24]	; (8009564 <prvIdleTask+0x28>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d9f9      	bls.n	8009544 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009550:	4b05      	ldr	r3, [pc, #20]	; (8009568 <prvIdleTask+0x2c>)
 8009552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009556:	601a      	str	r2, [r3, #0]
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009560:	e7f0      	b.n	8009544 <prvIdleTask+0x8>
 8009562:	bf00      	nop
 8009564:	20001144 	.word	0x20001144
 8009568:	e000ed04 	.word	0xe000ed04

0800956c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009572:	2300      	movs	r3, #0
 8009574:	607b      	str	r3, [r7, #4]
 8009576:	e00c      	b.n	8009592 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	4613      	mov	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4a12      	ldr	r2, [pc, #72]	; (80095cc <prvInitialiseTaskLists+0x60>)
 8009584:	4413      	add	r3, r2
 8009586:	4618      	mov	r0, r3
 8009588:	f7fe fcdc 	bl	8007f44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3301      	adds	r3, #1
 8009590:	607b      	str	r3, [r7, #4]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2b37      	cmp	r3, #55	; 0x37
 8009596:	d9ef      	bls.n	8009578 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009598:	480d      	ldr	r0, [pc, #52]	; (80095d0 <prvInitialiseTaskLists+0x64>)
 800959a:	f7fe fcd3 	bl	8007f44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800959e:	480d      	ldr	r0, [pc, #52]	; (80095d4 <prvInitialiseTaskLists+0x68>)
 80095a0:	f7fe fcd0 	bl	8007f44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095a4:	480c      	ldr	r0, [pc, #48]	; (80095d8 <prvInitialiseTaskLists+0x6c>)
 80095a6:	f7fe fccd 	bl	8007f44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095aa:	480c      	ldr	r0, [pc, #48]	; (80095dc <prvInitialiseTaskLists+0x70>)
 80095ac:	f7fe fcca 	bl	8007f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80095b0:	480b      	ldr	r0, [pc, #44]	; (80095e0 <prvInitialiseTaskLists+0x74>)
 80095b2:	f7fe fcc7 	bl	8007f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095b6:	4b0b      	ldr	r3, [pc, #44]	; (80095e4 <prvInitialiseTaskLists+0x78>)
 80095b8:	4a05      	ldr	r2, [pc, #20]	; (80095d0 <prvInitialiseTaskLists+0x64>)
 80095ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80095bc:	4b0a      	ldr	r3, [pc, #40]	; (80095e8 <prvInitialiseTaskLists+0x7c>)
 80095be:	4a05      	ldr	r2, [pc, #20]	; (80095d4 <prvInitialiseTaskLists+0x68>)
 80095c0:	601a      	str	r2, [r3, #0]
}
 80095c2:	bf00      	nop
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20001144 	.word	0x20001144
 80095d0:	200015a4 	.word	0x200015a4
 80095d4:	200015b8 	.word	0x200015b8
 80095d8:	200015d4 	.word	0x200015d4
 80095dc:	200015e8 	.word	0x200015e8
 80095e0:	20001600 	.word	0x20001600
 80095e4:	200015cc 	.word	0x200015cc
 80095e8:	200015d0 	.word	0x200015d0

080095ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095f2:	e019      	b.n	8009628 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095f4:	f000 fd62 	bl	800a0bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80095f8:	4b10      	ldr	r3, [pc, #64]	; (800963c <prvCheckTasksWaitingTermination+0x50>)
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	3304      	adds	r3, #4
 8009604:	4618      	mov	r0, r3
 8009606:	f7fe fd23 	bl	8008050 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800960a:	4b0d      	ldr	r3, [pc, #52]	; (8009640 <prvCheckTasksWaitingTermination+0x54>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3b01      	subs	r3, #1
 8009610:	4a0b      	ldr	r2, [pc, #44]	; (8009640 <prvCheckTasksWaitingTermination+0x54>)
 8009612:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009614:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <prvCheckTasksWaitingTermination+0x58>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3b01      	subs	r3, #1
 800961a:	4a0a      	ldr	r2, [pc, #40]	; (8009644 <prvCheckTasksWaitingTermination+0x58>)
 800961c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800961e:	f000 fd7d 	bl	800a11c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f810 	bl	8009648 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009628:	4b06      	ldr	r3, [pc, #24]	; (8009644 <prvCheckTasksWaitingTermination+0x58>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1e1      	bne.n	80095f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009630:	bf00      	nop
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	200015e8 	.word	0x200015e8
 8009640:	20001614 	.word	0x20001614
 8009644:	200015fc 	.word	0x200015fc

08009648 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3354      	adds	r3, #84	; 0x54
 8009654:	4618      	mov	r0, r3
 8009656:	f001 fad3 	bl	800ac00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009660:	2b00      	cmp	r3, #0
 8009662:	d108      	bne.n	8009676 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009668:	4618      	mov	r0, r3
 800966a:	f000 feeb 	bl	800a444 <vPortFree>
				vPortFree( pxTCB );
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fee8 	bl	800a444 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009674:	e018      	b.n	80096a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800967c:	2b01      	cmp	r3, #1
 800967e:	d103      	bne.n	8009688 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fedf 	bl	800a444 <vPortFree>
	}
 8009686:	e00f      	b.n	80096a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800968e:	2b02      	cmp	r3, #2
 8009690:	d00a      	beq.n	80096a8 <prvDeleteTCB+0x60>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	60fb      	str	r3, [r7, #12]
}
 80096a4:	bf00      	nop
 80096a6:	e7fe      	b.n	80096a6 <prvDeleteTCB+0x5e>
	}
 80096a8:	bf00      	nop
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096b6:	4b0e      	ldr	r3, [pc, #56]	; (80096f0 <prvResetNextTaskUnblockTime+0x40>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <prvResetNextTaskUnblockTime+0x14>
 80096c0:	2301      	movs	r3, #1
 80096c2:	e000      	b.n	80096c6 <prvResetNextTaskUnblockTime+0x16>
 80096c4:	2300      	movs	r3, #0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096ca:	4b0a      	ldr	r3, [pc, #40]	; (80096f4 <prvResetNextTaskUnblockTime+0x44>)
 80096cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096d2:	e008      	b.n	80096e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80096d4:	4b06      	ldr	r3, [pc, #24]	; (80096f0 <prvResetNextTaskUnblockTime+0x40>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	4a04      	ldr	r2, [pc, #16]	; (80096f4 <prvResetNextTaskUnblockTime+0x44>)
 80096e4:	6013      	str	r3, [r2, #0]
}
 80096e6:	bf00      	nop
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bc80      	pop	{r7}
 80096ee:	4770      	bx	lr
 80096f0:	200015cc 	.word	0x200015cc
 80096f4:	20001634 	.word	0x20001634

080096f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096fe:	4b0b      	ldr	r3, [pc, #44]	; (800972c <xTaskGetSchedulerState+0x34>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d102      	bne.n	800970c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009706:	2301      	movs	r3, #1
 8009708:	607b      	str	r3, [r7, #4]
 800970a:	e008      	b.n	800971e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800970c:	4b08      	ldr	r3, [pc, #32]	; (8009730 <xTaskGetSchedulerState+0x38>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d102      	bne.n	800971a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009714:	2302      	movs	r3, #2
 8009716:	607b      	str	r3, [r7, #4]
 8009718:	e001      	b.n	800971e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800971a:	2300      	movs	r3, #0
 800971c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800971e:	687b      	ldr	r3, [r7, #4]
	}
 8009720:	4618      	mov	r0, r3
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	bc80      	pop	{r7}
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20001620 	.word	0x20001620
 8009730:	2000163c 	.word	0x2000163c

08009734 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009740:	2300      	movs	r3, #0
 8009742:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d056      	beq.n	80097f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800974a:	4b2e      	ldr	r3, [pc, #184]	; (8009804 <xTaskPriorityDisinherit+0xd0>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	429a      	cmp	r2, r3
 8009752:	d00a      	beq.n	800976a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	60fb      	str	r3, [r7, #12]
}
 8009766:	bf00      	nop
 8009768:	e7fe      	b.n	8009768 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10a      	bne.n	8009788 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	60bb      	str	r3, [r7, #8]
}
 8009784:	bf00      	nop
 8009786:	e7fe      	b.n	8009786 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800978c:	1e5a      	subs	r2, r3, #1
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800979a:	429a      	cmp	r2, r3
 800979c:	d02c      	beq.n	80097f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d128      	bne.n	80097f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	3304      	adds	r3, #4
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fe fc50 	bl	8008050 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c8:	4b0f      	ldr	r3, [pc, #60]	; (8009808 <xTaskPriorityDisinherit+0xd4>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d903      	bls.n	80097d8 <xTaskPriorityDisinherit+0xa4>
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d4:	4a0c      	ldr	r2, [pc, #48]	; (8009808 <xTaskPriorityDisinherit+0xd4>)
 80097d6:	6013      	str	r3, [r2, #0]
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097dc:	4613      	mov	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4a09      	ldr	r2, [pc, #36]	; (800980c <xTaskPriorityDisinherit+0xd8>)
 80097e6:	441a      	add	r2, r3
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	3304      	adds	r3, #4
 80097ec:	4619      	mov	r1, r3
 80097ee:	4610      	mov	r0, r2
 80097f0:	f7fe fbd3 	bl	8007f9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80097f4:	2301      	movs	r3, #1
 80097f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097f8:	697b      	ldr	r3, [r7, #20]
	}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	20001140 	.word	0x20001140
 8009808:	2000161c 	.word	0x2000161c
 800980c:	20001144 	.word	0x20001144

08009810 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800981a:	4b21      	ldr	r3, [pc, #132]	; (80098a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009820:	4b20      	ldr	r3, [pc, #128]	; (80098a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	3304      	adds	r3, #4
 8009826:	4618      	mov	r0, r3
 8009828:	f7fe fc12 	bl	8008050 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009832:	d10a      	bne.n	800984a <prvAddCurrentTaskToDelayedList+0x3a>
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d007      	beq.n	800984a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800983a:	4b1a      	ldr	r3, [pc, #104]	; (80098a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3304      	adds	r3, #4
 8009840:	4619      	mov	r1, r3
 8009842:	4819      	ldr	r0, [pc, #100]	; (80098a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009844:	f7fe fba9 	bl	8007f9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009848:	e026      	b.n	8009898 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4413      	add	r3, r2
 8009850:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009852:	4b14      	ldr	r3, [pc, #80]	; (80098a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	429a      	cmp	r2, r3
 8009860:	d209      	bcs.n	8009876 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009862:	4b12      	ldr	r3, [pc, #72]	; (80098ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	4b0f      	ldr	r3, [pc, #60]	; (80098a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3304      	adds	r3, #4
 800986c:	4619      	mov	r1, r3
 800986e:	4610      	mov	r0, r2
 8009870:	f7fe fbb6 	bl	8007fe0 <vListInsert>
}
 8009874:	e010      	b.n	8009898 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009876:	4b0e      	ldr	r3, [pc, #56]	; (80098b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3304      	adds	r3, #4
 8009880:	4619      	mov	r1, r3
 8009882:	4610      	mov	r0, r2
 8009884:	f7fe fbac 	bl	8007fe0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009888:	4b0a      	ldr	r3, [pc, #40]	; (80098b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	429a      	cmp	r2, r3
 8009890:	d202      	bcs.n	8009898 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009892:	4a08      	ldr	r2, [pc, #32]	; (80098b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	6013      	str	r3, [r2, #0]
}
 8009898:	bf00      	nop
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	20001618 	.word	0x20001618
 80098a4:	20001140 	.word	0x20001140
 80098a8:	20001600 	.word	0x20001600
 80098ac:	200015d0 	.word	0x200015d0
 80098b0:	200015cc 	.word	0x200015cc
 80098b4:	20001634 	.word	0x20001634

080098b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08a      	sub	sp, #40	; 0x28
 80098bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80098be:	2300      	movs	r3, #0
 80098c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80098c2:	f000 facb 	bl	8009e5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80098c6:	4b1c      	ldr	r3, [pc, #112]	; (8009938 <xTimerCreateTimerTask+0x80>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d021      	beq.n	8009912 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80098ce:	2300      	movs	r3, #0
 80098d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80098d6:	1d3a      	adds	r2, r7, #4
 80098d8:	f107 0108 	add.w	r1, r7, #8
 80098dc:	f107 030c 	add.w	r3, r7, #12
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe fb15 	bl	8007f10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098e6:	6879      	ldr	r1, [r7, #4]
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	9202      	str	r2, [sp, #8]
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	2302      	movs	r3, #2
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	2300      	movs	r3, #0
 80098f6:	460a      	mov	r2, r1
 80098f8:	4910      	ldr	r1, [pc, #64]	; (800993c <xTimerCreateTimerTask+0x84>)
 80098fa:	4811      	ldr	r0, [pc, #68]	; (8009940 <xTimerCreateTimerTask+0x88>)
 80098fc:	f7ff f8b6 	bl	8008a6c <xTaskCreateStatic>
 8009900:	4603      	mov	r3, r0
 8009902:	4a10      	ldr	r2, [pc, #64]	; (8009944 <xTimerCreateTimerTask+0x8c>)
 8009904:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009906:	4b0f      	ldr	r3, [pc, #60]	; (8009944 <xTimerCreateTimerTask+0x8c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800990e:	2301      	movs	r3, #1
 8009910:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10a      	bne.n	800992e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	613b      	str	r3, [r7, #16]
}
 800992a:	bf00      	nop
 800992c:	e7fe      	b.n	800992c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800992e:	697b      	ldr	r3, [r7, #20]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	20001670 	.word	0x20001670
 800993c:	0800b4d4 	.word	0x0800b4d4
 8009940:	08009a65 	.word	0x08009a65
 8009944:	20001674 	.word	0x20001674

08009948 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08a      	sub	sp, #40	; 0x28
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009956:	2300      	movs	r3, #0
 8009958:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10a      	bne.n	8009976 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	623b      	str	r3, [r7, #32]
}
 8009972:	bf00      	nop
 8009974:	e7fe      	b.n	8009974 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009976:	4b1a      	ldr	r3, [pc, #104]	; (80099e0 <xTimerGenericCommand+0x98>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d02a      	beq.n	80099d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2b05      	cmp	r3, #5
 800998e:	dc18      	bgt.n	80099c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009990:	f7ff feb2 	bl	80096f8 <xTaskGetSchedulerState>
 8009994:	4603      	mov	r3, r0
 8009996:	2b02      	cmp	r3, #2
 8009998:	d109      	bne.n	80099ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800999a:	4b11      	ldr	r3, [pc, #68]	; (80099e0 <xTimerGenericCommand+0x98>)
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	f107 0110 	add.w	r1, r7, #16
 80099a2:	2300      	movs	r3, #0
 80099a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099a6:	f7fe fc7f 	bl	80082a8 <xQueueGenericSend>
 80099aa:	6278      	str	r0, [r7, #36]	; 0x24
 80099ac:	e012      	b.n	80099d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80099ae:	4b0c      	ldr	r3, [pc, #48]	; (80099e0 <xTimerGenericCommand+0x98>)
 80099b0:	6818      	ldr	r0, [r3, #0]
 80099b2:	f107 0110 	add.w	r1, r7, #16
 80099b6:	2300      	movs	r3, #0
 80099b8:	2200      	movs	r2, #0
 80099ba:	f7fe fc75 	bl	80082a8 <xQueueGenericSend>
 80099be:	6278      	str	r0, [r7, #36]	; 0x24
 80099c0:	e008      	b.n	80099d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80099c2:	4b07      	ldr	r3, [pc, #28]	; (80099e0 <xTimerGenericCommand+0x98>)
 80099c4:	6818      	ldr	r0, [r3, #0]
 80099c6:	f107 0110 	add.w	r1, r7, #16
 80099ca:	2300      	movs	r3, #0
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	f7fe fd69 	bl	80084a4 <xQueueGenericSendFromISR>
 80099d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3728      	adds	r7, #40	; 0x28
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	20001670 	.word	0x20001670

080099e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b088      	sub	sp, #32
 80099e8:	af02      	add	r7, sp, #8
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099ee:	4b1c      	ldr	r3, [pc, #112]	; (8009a60 <prvProcessExpiredTimer+0x7c>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	3304      	adds	r3, #4
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fe fb27 	bl	8008050 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d122      	bne.n	8009a50 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	699a      	ldr	r2, [r3, #24]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	18d1      	adds	r1, r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	6978      	ldr	r0, [r7, #20]
 8009a18:	f000 f8c8 	bl	8009bac <prvInsertTimerInActiveList>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d016      	beq.n	8009a50 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a22:	2300      	movs	r3, #0
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	2300      	movs	r3, #0
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	6978      	ldr	r0, [r7, #20]
 8009a2e:	f7ff ff8b 	bl	8009948 <xTimerGenericCommand>
 8009a32:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10a      	bne.n	8009a50 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	60fb      	str	r3, [r7, #12]
}
 8009a4c:	bf00      	nop
 8009a4e:	e7fe      	b.n	8009a4e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a54:	6978      	ldr	r0, [r7, #20]
 8009a56:	4798      	blx	r3
}
 8009a58:	bf00      	nop
 8009a5a:	3718      	adds	r7, #24
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	20001668 	.word	0x20001668

08009a64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a6c:	f107 0308 	add.w	r3, r7, #8
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 f857 	bl	8009b24 <prvGetNextExpireTime>
 8009a76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f000 f803 	bl	8009a88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a82:	f000 f8d5 	bl	8009c30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a86:	e7f1      	b.n	8009a6c <prvTimerTask+0x8>

08009a88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a92:	f7ff fa3f 	bl	8008f14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a96:	f107 0308 	add.w	r3, r7, #8
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 f866 	bl	8009b6c <prvSampleTimeNow>
 8009aa0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d130      	bne.n	8009b0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10a      	bne.n	8009ac4 <prvProcessTimerOrBlockTask+0x3c>
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d806      	bhi.n	8009ac4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009ab6:	f7ff fa3b 	bl	8008f30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009aba:	68f9      	ldr	r1, [r7, #12]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff ff91 	bl	80099e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ac2:	e024      	b.n	8009b0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d008      	beq.n	8009adc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009aca:	4b13      	ldr	r3, [pc, #76]	; (8009b18 <prvProcessTimerOrBlockTask+0x90>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	bf0c      	ite	eq
 8009ad4:	2301      	moveq	r3, #1
 8009ad6:	2300      	movne	r3, #0
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009adc:	4b0f      	ldr	r3, [pc, #60]	; (8009b1c <prvProcessTimerOrBlockTask+0x94>)
 8009ade:	6818      	ldr	r0, [r3, #0]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	4619      	mov	r1, r3
 8009aea:	f7fe ff8b 	bl	8008a04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009aee:	f7ff fa1f 	bl	8008f30 <xTaskResumeAll>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10a      	bne.n	8009b0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009af8:	4b09      	ldr	r3, [pc, #36]	; (8009b20 <prvProcessTimerOrBlockTask+0x98>)
 8009afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009afe:	601a      	str	r2, [r3, #0]
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	f3bf 8f6f 	isb	sy
}
 8009b08:	e001      	b.n	8009b0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b0a:	f7ff fa11 	bl	8008f30 <xTaskResumeAll>
}
 8009b0e:	bf00      	nop
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	2000166c 	.word	0x2000166c
 8009b1c:	20001670 	.word	0x20001670
 8009b20:	e000ed04 	.word	0xe000ed04

08009b24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b24:	b480      	push	{r7}
 8009b26:	b085      	sub	sp, #20
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b2c:	4b0e      	ldr	r3, [pc, #56]	; (8009b68 <prvGetNextExpireTime+0x44>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	bf0c      	ite	eq
 8009b36:	2301      	moveq	r3, #1
 8009b38:	2300      	movne	r3, #0
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d105      	bne.n	8009b56 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b4a:	4b07      	ldr	r3, [pc, #28]	; (8009b68 <prvGetNextExpireTime+0x44>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	60fb      	str	r3, [r7, #12]
 8009b54:	e001      	b.n	8009b5a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b56:	2300      	movs	r3, #0
 8009b58:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bc80      	pop	{r7}
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	20001668 	.word	0x20001668

08009b6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b74:	f7ff fa7a 	bl	800906c <xTaskGetTickCount>
 8009b78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ba8 <prvSampleTimeNow+0x3c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d205      	bcs.n	8009b90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b84:	f000 f908 	bl	8009d98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	e002      	b.n	8009b96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b96:	4a04      	ldr	r2, [pc, #16]	; (8009ba8 <prvSampleTimeNow+0x3c>)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20001678 	.word	0x20001678

08009bac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d812      	bhi.n	8009bf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	1ad2      	subs	r2, r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d302      	bcc.n	8009be6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009be0:	2301      	movs	r3, #1
 8009be2:	617b      	str	r3, [r7, #20]
 8009be4:	e01b      	b.n	8009c1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009be6:	4b10      	ldr	r3, [pc, #64]	; (8009c28 <prvInsertTimerInActiveList+0x7c>)
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3304      	adds	r3, #4
 8009bee:	4619      	mov	r1, r3
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	f7fe f9f5 	bl	8007fe0 <vListInsert>
 8009bf6:	e012      	b.n	8009c1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d206      	bcs.n	8009c0e <prvInsertTimerInActiveList+0x62>
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d302      	bcc.n	8009c0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	617b      	str	r3, [r7, #20]
 8009c0c:	e007      	b.n	8009c1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c0e:	4b07      	ldr	r3, [pc, #28]	; (8009c2c <prvInsertTimerInActiveList+0x80>)
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3304      	adds	r3, #4
 8009c16:	4619      	mov	r1, r3
 8009c18:	4610      	mov	r0, r2
 8009c1a:	f7fe f9e1 	bl	8007fe0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c1e:	697b      	ldr	r3, [r7, #20]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3718      	adds	r7, #24
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	2000166c 	.word	0x2000166c
 8009c2c:	20001668 	.word	0x20001668

08009c30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b08e      	sub	sp, #56	; 0x38
 8009c34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c36:	e09d      	b.n	8009d74 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	da18      	bge.n	8009c70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c3e:	1d3b      	adds	r3, r7, #4
 8009c40:	3304      	adds	r3, #4
 8009c42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10a      	bne.n	8009c60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	61fb      	str	r3, [r7, #28]
}
 8009c5c:	bf00      	nop
 8009c5e:	e7fe      	b.n	8009c5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c66:	6850      	ldr	r0, [r2, #4]
 8009c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c6a:	6892      	ldr	r2, [r2, #8]
 8009c6c:	4611      	mov	r1, r2
 8009c6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	db7d      	blt.n	8009d72 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d004      	beq.n	8009c8c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c84:	3304      	adds	r3, #4
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe f9e2 	bl	8008050 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c8c:	463b      	mov	r3, r7
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7ff ff6c 	bl	8009b6c <prvSampleTimeNow>
 8009c94:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b09      	cmp	r3, #9
 8009c9a:	d86b      	bhi.n	8009d74 <prvProcessReceivedCommands+0x144>
 8009c9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <prvProcessReceivedCommands+0x74>)
 8009c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca2:	bf00      	nop
 8009ca4:	08009ccd 	.word	0x08009ccd
 8009ca8:	08009ccd 	.word	0x08009ccd
 8009cac:	08009ccd 	.word	0x08009ccd
 8009cb0:	08009d75 	.word	0x08009d75
 8009cb4:	08009d29 	.word	0x08009d29
 8009cb8:	08009d61 	.word	0x08009d61
 8009cbc:	08009ccd 	.word	0x08009ccd
 8009cc0:	08009ccd 	.word	0x08009ccd
 8009cc4:	08009d75 	.word	0x08009d75
 8009cc8:	08009d29 	.word	0x08009d29
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd0:	699b      	ldr	r3, [r3, #24]
 8009cd2:	18d1      	adds	r1, r2, r3
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cda:	f7ff ff67 	bl	8009bac <prvInsertTimerInActiveList>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d047      	beq.n	8009d74 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cee:	69db      	ldr	r3, [r3, #28]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d13f      	bne.n	8009d74 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	441a      	add	r2, r3
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	2300      	movs	r3, #0
 8009d02:	2100      	movs	r1, #0
 8009d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d06:	f7ff fe1f 	bl	8009948 <xTimerGenericCommand>
 8009d0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d130      	bne.n	8009d74 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	61bb      	str	r3, [r7, #24]
}
 8009d24:	bf00      	nop
 8009d26:	e7fe      	b.n	8009d26 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10a      	bne.n	8009d4c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8009d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	617b      	str	r3, [r7, #20]
}
 8009d48:	bf00      	nop
 8009d4a:	e7fe      	b.n	8009d4a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4e:	699a      	ldr	r2, [r3, #24]
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	18d1      	adds	r1, r2, r3
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d5a:	f7ff ff27 	bl	8009bac <prvInsertTimerInActiveList>
					break;
 8009d5e:	e009      	b.n	8009d74 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d104      	bne.n	8009d74 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8009d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d6c:	f000 fb6a 	bl	800a444 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d70:	e000      	b.n	8009d74 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009d72:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d74:	4b07      	ldr	r3, [pc, #28]	; (8009d94 <prvProcessReceivedCommands+0x164>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	1d39      	adds	r1, r7, #4
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fe fc29 	bl	80085d4 <xQueueReceive>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f47f af57 	bne.w	8009c38 <prvProcessReceivedCommands+0x8>
	}
}
 8009d8a:	bf00      	nop
 8009d8c:	bf00      	nop
 8009d8e:	3730      	adds	r7, #48	; 0x30
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	20001670 	.word	0x20001670

08009d98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b088      	sub	sp, #32
 8009d9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d9e:	e045      	b.n	8009e2c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009da0:	4b2c      	ldr	r3, [pc, #176]	; (8009e54 <prvSwitchTimerLists+0xbc>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009daa:	4b2a      	ldr	r3, [pc, #168]	; (8009e54 <prvSwitchTimerLists+0xbc>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3304      	adds	r3, #4
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fe f949 	bl	8008050 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	69db      	ldr	r3, [r3, #28]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d12e      	bne.n	8009e2c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	693a      	ldr	r2, [r7, #16]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d90e      	bls.n	8009dfe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dec:	4b19      	ldr	r3, [pc, #100]	; (8009e54 <prvSwitchTimerLists+0xbc>)
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	3304      	adds	r3, #4
 8009df4:	4619      	mov	r1, r3
 8009df6:	4610      	mov	r0, r2
 8009df8:	f7fe f8f2 	bl	8007fe0 <vListInsert>
 8009dfc:	e016      	b.n	8009e2c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009dfe:	2300      	movs	r3, #0
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	2300      	movs	r3, #0
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	2100      	movs	r1, #0
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f7ff fd9d 	bl	8009948 <xTimerGenericCommand>
 8009e0e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10a      	bne.n	8009e2c <prvSwitchTimerLists+0x94>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	603b      	str	r3, [r7, #0]
}
 8009e28:	bf00      	nop
 8009e2a:	e7fe      	b.n	8009e2a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e2c:	4b09      	ldr	r3, [pc, #36]	; (8009e54 <prvSwitchTimerLists+0xbc>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1b4      	bne.n	8009da0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e36:	4b07      	ldr	r3, [pc, #28]	; (8009e54 <prvSwitchTimerLists+0xbc>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e3c:	4b06      	ldr	r3, [pc, #24]	; (8009e58 <prvSwitchTimerLists+0xc0>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a04      	ldr	r2, [pc, #16]	; (8009e54 <prvSwitchTimerLists+0xbc>)
 8009e42:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e44:	4a04      	ldr	r2, [pc, #16]	; (8009e58 <prvSwitchTimerLists+0xc0>)
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	6013      	str	r3, [r2, #0]
}
 8009e4a:	bf00      	nop
 8009e4c:	3718      	adds	r7, #24
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20001668 	.word	0x20001668
 8009e58:	2000166c 	.word	0x2000166c

08009e5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e62:	f000 f92b 	bl	800a0bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e66:	4b15      	ldr	r3, [pc, #84]	; (8009ebc <prvCheckForValidListAndQueue+0x60>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d120      	bne.n	8009eb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e6e:	4814      	ldr	r0, [pc, #80]	; (8009ec0 <prvCheckForValidListAndQueue+0x64>)
 8009e70:	f7fe f868 	bl	8007f44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e74:	4813      	ldr	r0, [pc, #76]	; (8009ec4 <prvCheckForValidListAndQueue+0x68>)
 8009e76:	f7fe f865 	bl	8007f44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e7a:	4b13      	ldr	r3, [pc, #76]	; (8009ec8 <prvCheckForValidListAndQueue+0x6c>)
 8009e7c:	4a10      	ldr	r2, [pc, #64]	; (8009ec0 <prvCheckForValidListAndQueue+0x64>)
 8009e7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e80:	4b12      	ldr	r3, [pc, #72]	; (8009ecc <prvCheckForValidListAndQueue+0x70>)
 8009e82:	4a10      	ldr	r2, [pc, #64]	; (8009ec4 <prvCheckForValidListAndQueue+0x68>)
 8009e84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e86:	2300      	movs	r3, #0
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	4b11      	ldr	r3, [pc, #68]	; (8009ed0 <prvCheckForValidListAndQueue+0x74>)
 8009e8c:	4a11      	ldr	r2, [pc, #68]	; (8009ed4 <prvCheckForValidListAndQueue+0x78>)
 8009e8e:	2110      	movs	r1, #16
 8009e90:	200a      	movs	r0, #10
 8009e92:	f7fe f96f 	bl	8008174 <xQueueGenericCreateStatic>
 8009e96:	4603      	mov	r3, r0
 8009e98:	4a08      	ldr	r2, [pc, #32]	; (8009ebc <prvCheckForValidListAndQueue+0x60>)
 8009e9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e9c:	4b07      	ldr	r3, [pc, #28]	; (8009ebc <prvCheckForValidListAndQueue+0x60>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d005      	beq.n	8009eb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ea4:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <prvCheckForValidListAndQueue+0x60>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	490b      	ldr	r1, [pc, #44]	; (8009ed8 <prvCheckForValidListAndQueue+0x7c>)
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fe fd82 	bl	80089b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009eb0:	f000 f934 	bl	800a11c <vPortExitCritical>
}
 8009eb4:	bf00      	nop
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20001670 	.word	0x20001670
 8009ec0:	20001640 	.word	0x20001640
 8009ec4:	20001654 	.word	0x20001654
 8009ec8:	20001668 	.word	0x20001668
 8009ecc:	2000166c 	.word	0x2000166c
 8009ed0:	2000171c 	.word	0x2000171c
 8009ed4:	2000167c 	.word	0x2000167c
 8009ed8:	0800b4dc 	.word	0x0800b4dc

08009edc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3b04      	subs	r3, #4
 8009eec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	3b04      	subs	r3, #4
 8009efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	f023 0201 	bic.w	r2, r3, #1
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3b04      	subs	r3, #4
 8009f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f0c:	4a08      	ldr	r2, [pc, #32]	; (8009f30 <pxPortInitialiseStack+0x54>)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3b14      	subs	r3, #20
 8009f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3b20      	subs	r3, #32
 8009f22:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f24:	68fb      	ldr	r3, [r7, #12]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bc80      	pop	{r7}
 8009f2e:	4770      	bx	lr
 8009f30:	08009f35 	.word	0x08009f35

08009f34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f3e:	4b12      	ldr	r3, [pc, #72]	; (8009f88 <prvTaskExitError+0x54>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f46:	d00a      	beq.n	8009f5e <prvTaskExitError+0x2a>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	60fb      	str	r3, [r7, #12]
}
 8009f5a:	bf00      	nop
 8009f5c:	e7fe      	b.n	8009f5c <prvTaskExitError+0x28>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	60bb      	str	r3, [r7, #8]
}
 8009f70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f72:	bf00      	nop
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0fc      	beq.n	8009f74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f7a:	bf00      	nop
 8009f7c:	bf00      	nop
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bc80      	pop	{r7}
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	20000010 	.word	0x20000010
 8009f8c:	00000000 	.word	0x00000000

08009f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f90:	4b07      	ldr	r3, [pc, #28]	; (8009fb0 <pxCurrentTCBConst2>)
 8009f92:	6819      	ldr	r1, [r3, #0]
 8009f94:	6808      	ldr	r0, [r1, #0]
 8009f96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009f9a:	f380 8809 	msr	PSP, r0
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f04f 0000 	mov.w	r0, #0
 8009fa6:	f380 8811 	msr	BASEPRI, r0
 8009faa:	f04e 0e0d 	orr.w	lr, lr, #13
 8009fae:	4770      	bx	lr

08009fb0 <pxCurrentTCBConst2>:
 8009fb0:	20001140 	.word	0x20001140
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop

08009fb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009fb8:	4806      	ldr	r0, [pc, #24]	; (8009fd4 <prvPortStartFirstTask+0x1c>)
 8009fba:	6800      	ldr	r0, [r0, #0]
 8009fbc:	6800      	ldr	r0, [r0, #0]
 8009fbe:	f380 8808 	msr	MSP, r0
 8009fc2:	b662      	cpsie	i
 8009fc4:	b661      	cpsie	f
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	df00      	svc	0
 8009fd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009fd2:	bf00      	nop
 8009fd4:	e000ed08 	.word	0xe000ed08

08009fd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009fde:	4b32      	ldr	r3, [pc, #200]	; (800a0a8 <xPortStartScheduler+0xd0>)
 8009fe0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	22ff      	movs	r2, #255	; 0xff
 8009fee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ff8:	78fb      	ldrb	r3, [r7, #3]
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a000:	b2da      	uxtb	r2, r3
 800a002:	4b2a      	ldr	r3, [pc, #168]	; (800a0ac <xPortStartScheduler+0xd4>)
 800a004:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a006:	4b2a      	ldr	r3, [pc, #168]	; (800a0b0 <xPortStartScheduler+0xd8>)
 800a008:	2207      	movs	r2, #7
 800a00a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a00c:	e009      	b.n	800a022 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a00e:	4b28      	ldr	r3, [pc, #160]	; (800a0b0 <xPortStartScheduler+0xd8>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	3b01      	subs	r3, #1
 800a014:	4a26      	ldr	r2, [pc, #152]	; (800a0b0 <xPortStartScheduler+0xd8>)
 800a016:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a018:	78fb      	ldrb	r3, [r7, #3]
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	005b      	lsls	r3, r3, #1
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a022:	78fb      	ldrb	r3, [r7, #3]
 800a024:	b2db      	uxtb	r3, r3
 800a026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a02a:	2b80      	cmp	r3, #128	; 0x80
 800a02c:	d0ef      	beq.n	800a00e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a02e:	4b20      	ldr	r3, [pc, #128]	; (800a0b0 <xPortStartScheduler+0xd8>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f1c3 0307 	rsb	r3, r3, #7
 800a036:	2b04      	cmp	r3, #4
 800a038:	d00a      	beq.n	800a050 <xPortStartScheduler+0x78>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	60bb      	str	r3, [r7, #8]
}
 800a04c:	bf00      	nop
 800a04e:	e7fe      	b.n	800a04e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a050:	4b17      	ldr	r3, [pc, #92]	; (800a0b0 <xPortStartScheduler+0xd8>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	021b      	lsls	r3, r3, #8
 800a056:	4a16      	ldr	r2, [pc, #88]	; (800a0b0 <xPortStartScheduler+0xd8>)
 800a058:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a05a:	4b15      	ldr	r3, [pc, #84]	; (800a0b0 <xPortStartScheduler+0xd8>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a062:	4a13      	ldr	r2, [pc, #76]	; (800a0b0 <xPortStartScheduler+0xd8>)
 800a064:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a06e:	4b11      	ldr	r3, [pc, #68]	; (800a0b4 <xPortStartScheduler+0xdc>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a10      	ldr	r2, [pc, #64]	; (800a0b4 <xPortStartScheduler+0xdc>)
 800a074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a078:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a07a:	4b0e      	ldr	r3, [pc, #56]	; (800a0b4 <xPortStartScheduler+0xdc>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a0d      	ldr	r2, [pc, #52]	; (800a0b4 <xPortStartScheduler+0xdc>)
 800a080:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a084:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a086:	f000 f8b9 	bl	800a1fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a08a:	4b0b      	ldr	r3, [pc, #44]	; (800a0b8 <xPortStartScheduler+0xe0>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a090:	f7ff ff92 	bl	8009fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a094:	f7ff f8b6 	bl	8009204 <vTaskSwitchContext>
	prvTaskExitError();
 800a098:	f7ff ff4c 	bl	8009f34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	e000e400 	.word	0xe000e400
 800a0ac:	2000176c 	.word	0x2000176c
 800a0b0:	20001770 	.word	0x20001770
 800a0b4:	e000ed20 	.word	0xe000ed20
 800a0b8:	20000010 	.word	0x20000010

0800a0bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	607b      	str	r3, [r7, #4]
}
 800a0d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0d6:	4b0f      	ldr	r3, [pc, #60]	; (800a114 <vPortEnterCritical+0x58>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	4a0d      	ldr	r2, [pc, #52]	; (800a114 <vPortEnterCritical+0x58>)
 800a0de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0e0:	4b0c      	ldr	r3, [pc, #48]	; (800a114 <vPortEnterCritical+0x58>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d10f      	bne.n	800a108 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0e8:	4b0b      	ldr	r3, [pc, #44]	; (800a118 <vPortEnterCritical+0x5c>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00a      	beq.n	800a108 <vPortEnterCritical+0x4c>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	603b      	str	r3, [r7, #0]
}
 800a104:	bf00      	nop
 800a106:	e7fe      	b.n	800a106 <vPortEnterCritical+0x4a>
	}
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bc80      	pop	{r7}
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	20000010 	.word	0x20000010
 800a118:	e000ed04 	.word	0xe000ed04

0800a11c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a122:	4b11      	ldr	r3, [pc, #68]	; (800a168 <vPortExitCritical+0x4c>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10a      	bne.n	800a140 <vPortExitCritical+0x24>
	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	607b      	str	r3, [r7, #4]
}
 800a13c:	bf00      	nop
 800a13e:	e7fe      	b.n	800a13e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a140:	4b09      	ldr	r3, [pc, #36]	; (800a168 <vPortExitCritical+0x4c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	3b01      	subs	r3, #1
 800a146:	4a08      	ldr	r2, [pc, #32]	; (800a168 <vPortExitCritical+0x4c>)
 800a148:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a14a:	4b07      	ldr	r3, [pc, #28]	; (800a168 <vPortExitCritical+0x4c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d105      	bne.n	800a15e <vPortExitCritical+0x42>
 800a152:	2300      	movs	r3, #0
 800a154:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	f383 8811 	msr	BASEPRI, r3
}
 800a15c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a15e:	bf00      	nop
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	bc80      	pop	{r7}
 800a166:	4770      	bx	lr
 800a168:	20000010 	.word	0x20000010
 800a16c:	00000000 	.word	0x00000000

0800a170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a170:	f3ef 8009 	mrs	r0, PSP
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	4b0d      	ldr	r3, [pc, #52]	; (800a1b0 <pxCurrentTCBConst>)
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a180:	6010      	str	r0, [r2, #0]
 800a182:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a186:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a18a:	f380 8811 	msr	BASEPRI, r0
 800a18e:	f7ff f839 	bl	8009204 <vTaskSwitchContext>
 800a192:	f04f 0000 	mov.w	r0, #0
 800a196:	f380 8811 	msr	BASEPRI, r0
 800a19a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a19e:	6819      	ldr	r1, [r3, #0]
 800a1a0:	6808      	ldr	r0, [r1, #0]
 800a1a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a1a6:	f380 8809 	msr	PSP, r0
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	4770      	bx	lr

0800a1b0 <pxCurrentTCBConst>:
 800a1b0:	20001140 	.word	0x20001140
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop

0800a1b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	607b      	str	r3, [r7, #4]
}
 800a1d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1d2:	f7fe ff59 	bl	8009088 <xTaskIncrementTick>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d003      	beq.n	800a1e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1dc:	4b06      	ldr	r3, [pc, #24]	; (800a1f8 <xPortSysTickHandler+0x40>)
 800a1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1e2:	601a      	str	r2, [r3, #0]
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	f383 8811 	msr	BASEPRI, r3
}
 800a1ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1f0:	bf00      	nop
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	e000ed04 	.word	0xe000ed04

0800a1fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a200:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <vPortSetupTimerInterrupt+0x30>)
 800a202:	2200      	movs	r2, #0
 800a204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a206:	4b0a      	ldr	r3, [pc, #40]	; (800a230 <vPortSetupTimerInterrupt+0x34>)
 800a208:	2200      	movs	r2, #0
 800a20a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a20c:	4b09      	ldr	r3, [pc, #36]	; (800a234 <vPortSetupTimerInterrupt+0x38>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a09      	ldr	r2, [pc, #36]	; (800a238 <vPortSetupTimerInterrupt+0x3c>)
 800a212:	fba2 2303 	umull	r2, r3, r2, r3
 800a216:	099b      	lsrs	r3, r3, #6
 800a218:	4a08      	ldr	r2, [pc, #32]	; (800a23c <vPortSetupTimerInterrupt+0x40>)
 800a21a:	3b01      	subs	r3, #1
 800a21c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a21e:	4b03      	ldr	r3, [pc, #12]	; (800a22c <vPortSetupTimerInterrupt+0x30>)
 800a220:	2207      	movs	r2, #7
 800a222:	601a      	str	r2, [r3, #0]
}
 800a224:	bf00      	nop
 800a226:	46bd      	mov	sp, r7
 800a228:	bc80      	pop	{r7}
 800a22a:	4770      	bx	lr
 800a22c:	e000e010 	.word	0xe000e010
 800a230:	e000e018 	.word	0xe000e018
 800a234:	20000004 	.word	0x20000004
 800a238:	10624dd3 	.word	0x10624dd3
 800a23c:	e000e014 	.word	0xe000e014

0800a240 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a246:	f3ef 8305 	mrs	r3, IPSR
 800a24a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2b0f      	cmp	r3, #15
 800a250:	d914      	bls.n	800a27c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a252:	4a16      	ldr	r2, [pc, #88]	; (800a2ac <vPortValidateInterruptPriority+0x6c>)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	4413      	add	r3, r2
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a25c:	4b14      	ldr	r3, [pc, #80]	; (800a2b0 <vPortValidateInterruptPriority+0x70>)
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	7afa      	ldrb	r2, [r7, #11]
 800a262:	429a      	cmp	r2, r3
 800a264:	d20a      	bcs.n	800a27c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	607b      	str	r3, [r7, #4]
}
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a27c:	4b0d      	ldr	r3, [pc, #52]	; (800a2b4 <vPortValidateInterruptPriority+0x74>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a284:	4b0c      	ldr	r3, [pc, #48]	; (800a2b8 <vPortValidateInterruptPriority+0x78>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d90a      	bls.n	800a2a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a290:	f383 8811 	msr	BASEPRI, r3
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	603b      	str	r3, [r7, #0]
}
 800a29e:	bf00      	nop
 800a2a0:	e7fe      	b.n	800a2a0 <vPortValidateInterruptPriority+0x60>
	}
 800a2a2:	bf00      	nop
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bc80      	pop	{r7}
 800a2aa:	4770      	bx	lr
 800a2ac:	e000e3f0 	.word	0xe000e3f0
 800a2b0:	2000176c 	.word	0x2000176c
 800a2b4:	e000ed0c 	.word	0xe000ed0c
 800a2b8:	20001770 	.word	0x20001770

0800a2bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08a      	sub	sp, #40	; 0x28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2c8:	f7fe fe24 	bl	8008f14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2cc:	4b58      	ldr	r3, [pc, #352]	; (800a430 <pvPortMalloc+0x174>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2d4:	f000 f910 	bl	800a4f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2d8:	4b56      	ldr	r3, [pc, #344]	; (800a434 <pvPortMalloc+0x178>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4013      	ands	r3, r2
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f040 808e 	bne.w	800a402 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d01d      	beq.n	800a328 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a2ec:	2208      	movs	r2, #8
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f003 0307 	and.w	r3, r3, #7
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d014      	beq.n	800a328 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f023 0307 	bic.w	r3, r3, #7
 800a304:	3308      	adds	r3, #8
 800a306:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f003 0307 	and.w	r3, r3, #7
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00a      	beq.n	800a328 <pvPortMalloc+0x6c>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	617b      	str	r3, [r7, #20]
}
 800a324:	bf00      	nop
 800a326:	e7fe      	b.n	800a326 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d069      	beq.n	800a402 <pvPortMalloc+0x146>
 800a32e:	4b42      	ldr	r3, [pc, #264]	; (800a438 <pvPortMalloc+0x17c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	429a      	cmp	r2, r3
 800a336:	d864      	bhi.n	800a402 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a338:	4b40      	ldr	r3, [pc, #256]	; (800a43c <pvPortMalloc+0x180>)
 800a33a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a33c:	4b3f      	ldr	r3, [pc, #252]	; (800a43c <pvPortMalloc+0x180>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a342:	e004      	b.n	800a34e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	429a      	cmp	r2, r3
 800a356:	d903      	bls.n	800a360 <pvPortMalloc+0xa4>
 800a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1f1      	bne.n	800a344 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a360:	4b33      	ldr	r3, [pc, #204]	; (800a430 <pvPortMalloc+0x174>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a366:	429a      	cmp	r2, r3
 800a368:	d04b      	beq.n	800a402 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2208      	movs	r2, #8
 800a370:	4413      	add	r3, r2
 800a372:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	685a      	ldr	r2, [r3, #4]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	1ad2      	subs	r2, r2, r3
 800a384:	2308      	movs	r3, #8
 800a386:	005b      	lsls	r3, r3, #1
 800a388:	429a      	cmp	r2, r3
 800a38a:	d91f      	bls.n	800a3cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4413      	add	r3, r2
 800a392:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	f003 0307 	and.w	r3, r3, #7
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00a      	beq.n	800a3b4 <pvPortMalloc+0xf8>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	613b      	str	r3, [r7, #16]
}
 800a3b0:	bf00      	nop
 800a3b2:	e7fe      	b.n	800a3b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	1ad2      	subs	r2, r2, r3
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3c6:	69b8      	ldr	r0, [r7, #24]
 800a3c8:	f000 f8f8 	bl	800a5bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3cc:	4b1a      	ldr	r3, [pc, #104]	; (800a438 <pvPortMalloc+0x17c>)
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	4a18      	ldr	r2, [pc, #96]	; (800a438 <pvPortMalloc+0x17c>)
 800a3d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3da:	4b17      	ldr	r3, [pc, #92]	; (800a438 <pvPortMalloc+0x17c>)
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	4b18      	ldr	r3, [pc, #96]	; (800a440 <pvPortMalloc+0x184>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d203      	bcs.n	800a3ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3e6:	4b14      	ldr	r3, [pc, #80]	; (800a438 <pvPortMalloc+0x17c>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a15      	ldr	r2, [pc, #84]	; (800a440 <pvPortMalloc+0x184>)
 800a3ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	685a      	ldr	r2, [r3, #4]
 800a3f2:	4b10      	ldr	r3, [pc, #64]	; (800a434 <pvPortMalloc+0x178>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	431a      	orrs	r2, r3
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a402:	f7fe fd95 	bl	8008f30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	f003 0307 	and.w	r3, r3, #7
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00a      	beq.n	800a426 <pvPortMalloc+0x16a>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	60fb      	str	r3, [r7, #12]
}
 800a422:	bf00      	nop
 800a424:	e7fe      	b.n	800a424 <pvPortMalloc+0x168>
	return pvReturn;
 800a426:	69fb      	ldr	r3, [r7, #28]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3728      	adds	r7, #40	; 0x28
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	20003aa4 	.word	0x20003aa4
 800a434:	20003ab0 	.word	0x20003ab0
 800a438:	20003aa8 	.word	0x20003aa8
 800a43c:	20003a9c 	.word	0x20003a9c
 800a440:	20003aac 	.word	0x20003aac

0800a444 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d048      	beq.n	800a4e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a456:	2308      	movs	r3, #8
 800a458:	425b      	negs	r3, r3
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	4413      	add	r3, r2
 800a45e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	685a      	ldr	r2, [r3, #4]
 800a468:	4b21      	ldr	r3, [pc, #132]	; (800a4f0 <vPortFree+0xac>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4013      	ands	r3, r2
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10a      	bne.n	800a488 <vPortFree+0x44>
	__asm volatile
 800a472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a476:	f383 8811 	msr	BASEPRI, r3
 800a47a:	f3bf 8f6f 	isb	sy
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	60fb      	str	r3, [r7, #12]
}
 800a484:	bf00      	nop
 800a486:	e7fe      	b.n	800a486 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00a      	beq.n	800a4a6 <vPortFree+0x62>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	60bb      	str	r3, [r7, #8]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	685a      	ldr	r2, [r3, #4]
 800a4aa:	4b11      	ldr	r3, [pc, #68]	; (800a4f0 <vPortFree+0xac>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d019      	beq.n	800a4e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d115      	bne.n	800a4e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	685a      	ldr	r2, [r3, #4]
 800a4c0:	4b0b      	ldr	r3, [pc, #44]	; (800a4f0 <vPortFree+0xac>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	43db      	mvns	r3, r3
 800a4c6:	401a      	ands	r2, r3
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4cc:	f7fe fd22 	bl	8008f14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	685a      	ldr	r2, [r3, #4]
 800a4d4:	4b07      	ldr	r3, [pc, #28]	; (800a4f4 <vPortFree+0xb0>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4413      	add	r3, r2
 800a4da:	4a06      	ldr	r2, [pc, #24]	; (800a4f4 <vPortFree+0xb0>)
 800a4dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4de:	6938      	ldr	r0, [r7, #16]
 800a4e0:	f000 f86c 	bl	800a5bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a4e4:	f7fe fd24 	bl	8008f30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4e8:	bf00      	nop
 800a4ea:	3718      	adds	r7, #24
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	20003ab0 	.word	0x20003ab0
 800a4f4:	20003aa8 	.word	0x20003aa8

0800a4f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4fe:	f242 3328 	movw	r3, #9000	; 0x2328
 800a502:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a504:	4b27      	ldr	r3, [pc, #156]	; (800a5a4 <prvHeapInit+0xac>)
 800a506:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f003 0307 	and.w	r3, r3, #7
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00c      	beq.n	800a52c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3307      	adds	r3, #7
 800a516:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f023 0307 	bic.w	r3, r3, #7
 800a51e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	4a1f      	ldr	r2, [pc, #124]	; (800a5a4 <prvHeapInit+0xac>)
 800a528:	4413      	add	r3, r2
 800a52a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a530:	4a1d      	ldr	r2, [pc, #116]	; (800a5a8 <prvHeapInit+0xb0>)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a536:	4b1c      	ldr	r3, [pc, #112]	; (800a5a8 <prvHeapInit+0xb0>)
 800a538:	2200      	movs	r2, #0
 800a53a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	4413      	add	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a544:	2208      	movs	r2, #8
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	1a9b      	subs	r3, r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f023 0307 	bic.w	r3, r3, #7
 800a552:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	4a15      	ldr	r2, [pc, #84]	; (800a5ac <prvHeapInit+0xb4>)
 800a558:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a55a:	4b14      	ldr	r3, [pc, #80]	; (800a5ac <prvHeapInit+0xb4>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2200      	movs	r2, #0
 800a560:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a562:	4b12      	ldr	r3, [pc, #72]	; (800a5ac <prvHeapInit+0xb4>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2200      	movs	r2, #0
 800a568:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	1ad2      	subs	r2, r2, r3
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a578:	4b0c      	ldr	r3, [pc, #48]	; (800a5ac <prvHeapInit+0xb4>)
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	4a0a      	ldr	r2, [pc, #40]	; (800a5b0 <prvHeapInit+0xb8>)
 800a586:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	4a09      	ldr	r2, [pc, #36]	; (800a5b4 <prvHeapInit+0xbc>)
 800a58e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a590:	4b09      	ldr	r3, [pc, #36]	; (800a5b8 <prvHeapInit+0xc0>)
 800a592:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a596:	601a      	str	r2, [r3, #0]
}
 800a598:	bf00      	nop
 800a59a:	3714      	adds	r7, #20
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bc80      	pop	{r7}
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	20001774 	.word	0x20001774
 800a5a8:	20003a9c 	.word	0x20003a9c
 800a5ac:	20003aa4 	.word	0x20003aa4
 800a5b0:	20003aac 	.word	0x20003aac
 800a5b4:	20003aa8 	.word	0x20003aa8
 800a5b8:	20003ab0 	.word	0x20003ab0

0800a5bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5c4:	4b27      	ldr	r3, [pc, #156]	; (800a664 <prvInsertBlockIntoFreeList+0xa8>)
 800a5c6:	60fb      	str	r3, [r7, #12]
 800a5c8:	e002      	b.n	800a5d0 <prvInsertBlockIntoFreeList+0x14>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	60fb      	str	r3, [r7, #12]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d8f7      	bhi.n	800a5ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d108      	bne.n	800a5fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	685a      	ldr	r2, [r3, #4]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	441a      	add	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	441a      	add	r2, r3
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d118      	bne.n	800a644 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	4b14      	ldr	r3, [pc, #80]	; (800a668 <prvInsertBlockIntoFreeList+0xac>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d00d      	beq.n	800a63a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685a      	ldr	r2, [r3, #4]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	441a      	add	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	601a      	str	r2, [r3, #0]
 800a638:	e008      	b.n	800a64c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a63a:	4b0b      	ldr	r3, [pc, #44]	; (800a668 <prvInsertBlockIntoFreeList+0xac>)
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	e003      	b.n	800a64c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	429a      	cmp	r2, r3
 800a652:	d002      	beq.n	800a65a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a65a:	bf00      	nop
 800a65c:	3714      	adds	r7, #20
 800a65e:	46bd      	mov	sp, r7
 800a660:	bc80      	pop	{r7}
 800a662:	4770      	bx	lr
 800a664:	20003a9c 	.word	0x20003a9c
 800a668:	20003aa4 	.word	0x20003aa4

0800a66c <__aeabi_atexit>:
 800a66c:	460b      	mov	r3, r1
 800a66e:	4601      	mov	r1, r0
 800a670:	4618      	mov	r0, r3
 800a672:	f000 b943 	b.w	800a8fc <__cxa_atexit>

0800a676 <_ZdlPvj>:
 800a676:	f000 b914 	b.w	800a8a2 <_ZdlPv>

0800a67a <_Znwj>:
 800a67a:	2801      	cmp	r0, #1
 800a67c:	bf38      	it	cc
 800a67e:	2001      	movcc	r0, #1
 800a680:	b510      	push	{r4, lr}
 800a682:	4604      	mov	r4, r0
 800a684:	4620      	mov	r0, r4
 800a686:	f000 f973 	bl	800a970 <malloc>
 800a68a:	b930      	cbnz	r0, 800a69a <_Znwj+0x20>
 800a68c:	f000 f91e 	bl	800a8cc <_ZSt15get_new_handlerv>
 800a690:	b908      	cbnz	r0, 800a696 <_Znwj+0x1c>
 800a692:	f000 f92c 	bl	800a8ee <abort>
 800a696:	4780      	blx	r0
 800a698:	e7f4      	b.n	800a684 <_Znwj+0xa>
 800a69a:	bd10      	pop	{r4, pc}

0800a69c <__cxa_pure_virtual>:
 800a69c:	b508      	push	{r3, lr}
 800a69e:	f000 f90f 	bl	800a8c0 <_ZSt9terminatev>

0800a6a2 <_ZNSaIcEC1Ev>:
 800a6a2:	4770      	bx	lr

0800a6a4 <_ZNSaIcED1Ev>:
 800a6a4:	4770      	bx	lr

0800a6a6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800a6a6:	b10a      	cbz	r2, 800a6ac <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800a6a8:	f000 b990 	b.w	800a9cc <memcpy>
 800a6ac:	4770      	bx	lr

0800a6ae <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800a6ae:	b10a      	cbz	r2, 800a6b4 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800a6b0:	f000 b97c 	b.w	800a9ac <memcmp>
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	4770      	bx	lr

0800a6b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800a6b8:	b508      	push	{r3, lr}
 800a6ba:	680b      	ldr	r3, [r1, #0]
 800a6bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6c0:	d302      	bcc.n	800a6c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800a6c2:	480d      	ldr	r0, [pc, #52]	; (800a6f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800a6c4:	f000 f910 	bl	800a8e8 <_ZSt20__throw_length_errorPKc>
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d90b      	bls.n	800a6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a6cc:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800a6d0:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800a6d4:	d206      	bcs.n	800a6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a6d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a6da:	bf2a      	itet	cs
 800a6dc:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800a6e0:	6008      	strcc	r0, [r1, #0]
 800a6e2:	600b      	strcs	r3, [r1, #0]
 800a6e4:	6808      	ldr	r0, [r1, #0]
 800a6e6:	3001      	adds	r0, #1
 800a6e8:	d501      	bpl.n	800a6ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800a6ea:	f000 f8f7 	bl	800a8dc <_ZSt17__throw_bad_allocv>
 800a6ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a6f2:	f7ff bfc2 	b.w	800a67a <_Znwj>
 800a6f6:	bf00      	nop
 800a6f8:	0800b724 	.word	0x0800b724

0800a6fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	f853 0b08 	ldr.w	r0, [r3], #8
 800a702:	4298      	cmp	r0, r3
 800a704:	d001      	beq.n	800a70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800a706:	f000 b8cc 	b.w	800a8a2 <_ZdlPv>
 800a70a:	4770      	bx	lr

0800a70c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800a70c:	2a01      	cmp	r2, #1
 800a70e:	b410      	push	{r4}
 800a710:	d103      	bne.n	800a71a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 800a712:	780a      	ldrb	r2, [r1, #0]
 800a714:	bc10      	pop	{r4}
 800a716:	7002      	strb	r2, [r0, #0]
 800a718:	4770      	bx	lr
 800a71a:	bc10      	pop	{r4}
 800a71c:	f7ff bfc3 	b.w	800a6a6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800a720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800a720:	b508      	push	{r3, lr}
 800a722:	1a52      	subs	r2, r2, r1
 800a724:	f7ff fff2 	bl	800a70c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a728:	bd08      	pop	{r3, pc}

0800a72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800a72a:	b508      	push	{r3, lr}
 800a72c:	1a52      	subs	r2, r2, r1
 800a72e:	f7ff ffed 	bl	800a70c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a732:	bd08      	pop	{r3, pc}

0800a734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800a734:	4288      	cmp	r0, r1
 800a736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a738:	4604      	mov	r4, r0
 800a73a:	460e      	mov	r6, r1
 800a73c:	d01e      	beq.n	800a77c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 800a73e:	4603      	mov	r3, r0
 800a740:	f853 2b08 	ldr.w	r2, [r3], #8
 800a744:	684d      	ldr	r5, [r1, #4]
 800a746:	429a      	cmp	r2, r3
 800a748:	bf0c      	ite	eq
 800a74a:	220f      	moveq	r2, #15
 800a74c:	6882      	ldrne	r2, [r0, #8]
 800a74e:	42aa      	cmp	r2, r5
 800a750:	d20a      	bcs.n	800a768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 800a752:	a901      	add	r1, sp, #4
 800a754:	9501      	str	r5, [sp, #4]
 800a756:	f7ff ffaf 	bl	800a6b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a75a:	4607      	mov	r7, r0
 800a75c:	4620      	mov	r0, r4
 800a75e:	f7ff ffcd 	bl	800a6fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a762:	9b01      	ldr	r3, [sp, #4]
 800a764:	6027      	str	r7, [r4, #0]
 800a766:	60a3      	str	r3, [r4, #8]
 800a768:	b125      	cbz	r5, 800a774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 800a76a:	462a      	mov	r2, r5
 800a76c:	6831      	ldr	r1, [r6, #0]
 800a76e:	6820      	ldr	r0, [r4, #0]
 800a770:	f7ff ffcc 	bl	800a70c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a774:	2200      	movs	r2, #0
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	6065      	str	r5, [r4, #4]
 800a77a:	555a      	strb	r2, [r3, r5]
 800a77c:	b003      	add	sp, #12
 800a77e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800a780:	f100 0208 	add.w	r2, r0, #8
 800a784:	6002      	str	r2, [r0, #0]
 800a786:	2200      	movs	r2, #0
 800a788:	6042      	str	r2, [r0, #4]
 800a78a:	7202      	strb	r2, [r0, #8]
 800a78c:	4770      	bx	lr

0800a78e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800a78e:	b510      	push	{r4, lr}
 800a790:	4604      	mov	r4, r0
 800a792:	f7ff ffb3 	bl	800a6fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a796:	4620      	mov	r0, r4
 800a798:	bd10      	pop	{r4, pc}

0800a79a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800a79a:	b510      	push	{r4, lr}
 800a79c:	4604      	mov	r4, r0
 800a79e:	f7ff ffc9 	bl	800a734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	bd10      	pop	{r4, pc}

0800a7a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800a7a6:	6840      	ldr	r0, [r0, #4]
 800a7a8:	4770      	bx	lr

0800a7aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800a7aa:	6800      	ldr	r0, [r0, #0]
 800a7ac:	4770      	bx	lr

0800a7ae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 800a7ae:	b538      	push	{r3, r4, r5, lr}
 800a7b0:	6845      	ldr	r5, [r0, #4]
 800a7b2:	684c      	ldr	r4, [r1, #4]
 800a7b4:	462a      	mov	r2, r5
 800a7b6:	42a5      	cmp	r5, r4
 800a7b8:	bf28      	it	cs
 800a7ba:	4622      	movcs	r2, r4
 800a7bc:	6809      	ldr	r1, [r1, #0]
 800a7be:	6800      	ldr	r0, [r0, #0]
 800a7c0:	f7ff ff75 	bl	800a6ae <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800a7c4:	b900      	cbnz	r0, 800a7c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 800a7c6:	1b28      	subs	r0, r5, r4
 800a7c8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a7cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800a7cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	4616      	mov	r6, r2
 800a7d2:	460d      	mov	r5, r1
 800a7d4:	b919      	cbnz	r1, 800a7de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800a7d6:	b112      	cbz	r2, 800a7de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800a7d8:	480d      	ldr	r0, [pc, #52]	; (800a810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800a7da:	f000 f882 	bl	800a8e2 <_ZSt19__throw_logic_errorPKc>
 800a7de:	1b73      	subs	r3, r6, r5
 800a7e0:	2b0f      	cmp	r3, #15
 800a7e2:	9301      	str	r3, [sp, #4]
 800a7e4:	d907      	bls.n	800a7f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	a901      	add	r1, sp, #4
 800a7ec:	f7ff ff64 	bl	800a6b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a7f0:	9b01      	ldr	r3, [sp, #4]
 800a7f2:	6020      	str	r0, [r4, #0]
 800a7f4:	60a3      	str	r3, [r4, #8]
 800a7f6:	4632      	mov	r2, r6
 800a7f8:	4629      	mov	r1, r5
 800a7fa:	6820      	ldr	r0, [r4, #0]
 800a7fc:	f7ff ff90 	bl	800a720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800a800:	2100      	movs	r1, #0
 800a802:	9b01      	ldr	r3, [sp, #4]
 800a804:	6822      	ldr	r2, [r4, #0]
 800a806:	6063      	str	r3, [r4, #4]
 800a808:	54d1      	strb	r1, [r2, r3]
 800a80a:	b002      	add	sp, #8
 800a80c:	bd70      	pop	{r4, r5, r6, pc}
 800a80e:	bf00      	nop
 800a810:	0800b73c 	.word	0x0800b73c

0800a814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800a814:	b510      	push	{r4, lr}
 800a816:	4604      	mov	r4, r0
 800a818:	f100 0208 	add.w	r2, r0, #8
 800a81c:	6002      	str	r2, [r0, #0]
 800a81e:	e9d1 1200 	ldrd	r1, r2, [r1]
 800a822:	f04f 0300 	mov.w	r3, #0
 800a826:	440a      	add	r2, r1
 800a828:	f7ff ffd0 	bl	800a7cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800a82c:	4620      	mov	r0, r4
 800a82e:	bd10      	pop	{r4, pc}

0800a830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800a830:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a832:	4604      	mov	r4, r0
 800a834:	4616      	mov	r6, r2
 800a836:	460d      	mov	r5, r1
 800a838:	b919      	cbnz	r1, 800a842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a83a:	b112      	cbz	r2, 800a842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a83c:	480d      	ldr	r0, [pc, #52]	; (800a874 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800a83e:	f000 f850 	bl	800a8e2 <_ZSt19__throw_logic_errorPKc>
 800a842:	1b73      	subs	r3, r6, r5
 800a844:	2b0f      	cmp	r3, #15
 800a846:	9301      	str	r3, [sp, #4]
 800a848:	d907      	bls.n	800a85a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800a84a:	2200      	movs	r2, #0
 800a84c:	4620      	mov	r0, r4
 800a84e:	a901      	add	r1, sp, #4
 800a850:	f7ff ff32 	bl	800a6b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	6020      	str	r0, [r4, #0]
 800a858:	60a3      	str	r3, [r4, #8]
 800a85a:	4632      	mov	r2, r6
 800a85c:	4629      	mov	r1, r5
 800a85e:	6820      	ldr	r0, [r4, #0]
 800a860:	f7ff ff63 	bl	800a72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800a864:	2100      	movs	r1, #0
 800a866:	9b01      	ldr	r3, [sp, #4]
 800a868:	6822      	ldr	r2, [r4, #0]
 800a86a:	6063      	str	r3, [r4, #4]
 800a86c:	54d1      	strb	r1, [r2, r3]
 800a86e:	b002      	add	sp, #8
 800a870:	bd70      	pop	{r4, r5, r6, pc}
 800a872:	bf00      	nop
 800a874:	0800b73c 	.word	0x0800b73c

0800a878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	f100 0308 	add.w	r3, r0, #8
 800a87e:	4604      	mov	r4, r0
 800a880:	460d      	mov	r5, r1
 800a882:	6003      	str	r3, [r0, #0]
 800a884:	b159      	cbz	r1, 800a89e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800a886:	4608      	mov	r0, r1
 800a888:	f7f5 fcd2 	bl	8000230 <strlen>
 800a88c:	182a      	adds	r2, r5, r0
 800a88e:	4620      	mov	r0, r4
 800a890:	f04f 0300 	mov.w	r3, #0
 800a894:	4629      	mov	r1, r5
 800a896:	f7ff ffcb 	bl	800a830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800a89a:	4620      	mov	r0, r4
 800a89c:	bd38      	pop	{r3, r4, r5, pc}
 800a89e:	2201      	movs	r2, #1
 800a8a0:	e7f5      	b.n	800a88e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800a8a2 <_ZdlPv>:
 800a8a2:	f000 b86d 	b.w	800a980 <free>

0800a8a6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a8a6:	b508      	push	{r3, lr}
 800a8a8:	4780      	blx	r0
 800a8aa:	f000 f820 	bl	800a8ee <abort>
	...

0800a8b0 <_ZSt13get_terminatev>:
 800a8b0:	4b02      	ldr	r3, [pc, #8]	; (800a8bc <_ZSt13get_terminatev+0xc>)
 800a8b2:	6818      	ldr	r0, [r3, #0]
 800a8b4:	f3bf 8f5b 	dmb	ish
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	20000014 	.word	0x20000014

0800a8c0 <_ZSt9terminatev>:
 800a8c0:	b508      	push	{r3, lr}
 800a8c2:	f7ff fff5 	bl	800a8b0 <_ZSt13get_terminatev>
 800a8c6:	f7ff ffee 	bl	800a8a6 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800a8cc <_ZSt15get_new_handlerv>:
 800a8cc:	4b02      	ldr	r3, [pc, #8]	; (800a8d8 <_ZSt15get_new_handlerv+0xc>)
 800a8ce:	6818      	ldr	r0, [r3, #0]
 800a8d0:	f3bf 8f5b 	dmb	ish
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	20003ab4 	.word	0x20003ab4

0800a8dc <_ZSt17__throw_bad_allocv>:
 800a8dc:	b508      	push	{r3, lr}
 800a8de:	f000 f806 	bl	800a8ee <abort>

0800a8e2 <_ZSt19__throw_logic_errorPKc>:
 800a8e2:	b508      	push	{r3, lr}
 800a8e4:	f000 f803 	bl	800a8ee <abort>

0800a8e8 <_ZSt20__throw_length_errorPKc>:
 800a8e8:	b508      	push	{r3, lr}
 800a8ea:	f000 f800 	bl	800a8ee <abort>

0800a8ee <abort>:
 800a8ee:	2006      	movs	r0, #6
 800a8f0:	b508      	push	{r3, lr}
 800a8f2:	f000 fa19 	bl	800ad28 <raise>
 800a8f6:	2001      	movs	r0, #1
 800a8f8:	f7f9 fb0d 	bl	8003f16 <_exit>

0800a8fc <__cxa_atexit>:
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	4604      	mov	r4, r0
 800a900:	4804      	ldr	r0, [pc, #16]	; (800a914 <__cxa_atexit+0x18>)
 800a902:	4613      	mov	r3, r2
 800a904:	b120      	cbz	r0, 800a910 <__cxa_atexit+0x14>
 800a906:	460a      	mov	r2, r1
 800a908:	2002      	movs	r0, #2
 800a90a:	4621      	mov	r1, r4
 800a90c:	f3af 8000 	nop.w
 800a910:	bd10      	pop	{r4, pc}
 800a912:	bf00      	nop
 800a914:	00000000 	.word	0x00000000

0800a918 <__errno>:
 800a918:	4b01      	ldr	r3, [pc, #4]	; (800a920 <__errno+0x8>)
 800a91a:	6818      	ldr	r0, [r3, #0]
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	20000018 	.word	0x20000018

0800a924 <__libc_init_array>:
 800a924:	b570      	push	{r4, r5, r6, lr}
 800a926:	2600      	movs	r6, #0
 800a928:	4d0c      	ldr	r5, [pc, #48]	; (800a95c <__libc_init_array+0x38>)
 800a92a:	4c0d      	ldr	r4, [pc, #52]	; (800a960 <__libc_init_array+0x3c>)
 800a92c:	1b64      	subs	r4, r4, r5
 800a92e:	10a4      	asrs	r4, r4, #2
 800a930:	42a6      	cmp	r6, r4
 800a932:	d109      	bne.n	800a948 <__libc_init_array+0x24>
 800a934:	f000 fd6a 	bl	800b40c <_init>
 800a938:	2600      	movs	r6, #0
 800a93a:	4d0a      	ldr	r5, [pc, #40]	; (800a964 <__libc_init_array+0x40>)
 800a93c:	4c0a      	ldr	r4, [pc, #40]	; (800a968 <__libc_init_array+0x44>)
 800a93e:	1b64      	subs	r4, r4, r5
 800a940:	10a4      	asrs	r4, r4, #2
 800a942:	42a6      	cmp	r6, r4
 800a944:	d105      	bne.n	800a952 <__libc_init_array+0x2e>
 800a946:	bd70      	pop	{r4, r5, r6, pc}
 800a948:	f855 3b04 	ldr.w	r3, [r5], #4
 800a94c:	4798      	blx	r3
 800a94e:	3601      	adds	r6, #1
 800a950:	e7ee      	b.n	800a930 <__libc_init_array+0xc>
 800a952:	f855 3b04 	ldr.w	r3, [r5], #4
 800a956:	4798      	blx	r3
 800a958:	3601      	adds	r6, #1
 800a95a:	e7f2      	b.n	800a942 <__libc_init_array+0x1e>
 800a95c:	0800b980 	.word	0x0800b980
 800a960:	0800b980 	.word	0x0800b980
 800a964:	0800b980 	.word	0x0800b980
 800a968:	0800b988 	.word	0x0800b988

0800a96c <__retarget_lock_acquire_recursive>:
 800a96c:	4770      	bx	lr

0800a96e <__retarget_lock_release_recursive>:
 800a96e:	4770      	bx	lr

0800a970 <malloc>:
 800a970:	4b02      	ldr	r3, [pc, #8]	; (800a97c <malloc+0xc>)
 800a972:	4601      	mov	r1, r0
 800a974:	6818      	ldr	r0, [r3, #0]
 800a976:	f000 b8c1 	b.w	800aafc <_malloc_r>
 800a97a:	bf00      	nop
 800a97c:	20000018 	.word	0x20000018

0800a980 <free>:
 800a980:	4b02      	ldr	r3, [pc, #8]	; (800a98c <free+0xc>)
 800a982:	4601      	mov	r1, r0
 800a984:	6818      	ldr	r0, [r3, #0]
 800a986:	f000 b851 	b.w	800aa2c <_free_r>
 800a98a:	bf00      	nop
 800a98c:	20000018 	.word	0x20000018

0800a990 <memchr>:
 800a990:	4603      	mov	r3, r0
 800a992:	b510      	push	{r4, lr}
 800a994:	b2c9      	uxtb	r1, r1
 800a996:	4402      	add	r2, r0
 800a998:	4293      	cmp	r3, r2
 800a99a:	4618      	mov	r0, r3
 800a99c:	d101      	bne.n	800a9a2 <memchr+0x12>
 800a99e:	2000      	movs	r0, #0
 800a9a0:	e003      	b.n	800a9aa <memchr+0x1a>
 800a9a2:	7804      	ldrb	r4, [r0, #0]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	428c      	cmp	r4, r1
 800a9a8:	d1f6      	bne.n	800a998 <memchr+0x8>
 800a9aa:	bd10      	pop	{r4, pc}

0800a9ac <memcmp>:
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	3901      	subs	r1, #1
 800a9b0:	4402      	add	r2, r0
 800a9b2:	4290      	cmp	r0, r2
 800a9b4:	d101      	bne.n	800a9ba <memcmp+0xe>
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	e005      	b.n	800a9c6 <memcmp+0x1a>
 800a9ba:	7803      	ldrb	r3, [r0, #0]
 800a9bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a9c0:	42a3      	cmp	r3, r4
 800a9c2:	d001      	beq.n	800a9c8 <memcmp+0x1c>
 800a9c4:	1b18      	subs	r0, r3, r4
 800a9c6:	bd10      	pop	{r4, pc}
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	e7f2      	b.n	800a9b2 <memcmp+0x6>

0800a9cc <memcpy>:
 800a9cc:	440a      	add	r2, r1
 800a9ce:	4291      	cmp	r1, r2
 800a9d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a9d4:	d100      	bne.n	800a9d8 <memcpy+0xc>
 800a9d6:	4770      	bx	lr
 800a9d8:	b510      	push	{r4, lr}
 800a9da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9de:	4291      	cmp	r1, r2
 800a9e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9e4:	d1f9      	bne.n	800a9da <memcpy+0xe>
 800a9e6:	bd10      	pop	{r4, pc}

0800a9e8 <memmove>:
 800a9e8:	4288      	cmp	r0, r1
 800a9ea:	b510      	push	{r4, lr}
 800a9ec:	eb01 0402 	add.w	r4, r1, r2
 800a9f0:	d902      	bls.n	800a9f8 <memmove+0x10>
 800a9f2:	4284      	cmp	r4, r0
 800a9f4:	4623      	mov	r3, r4
 800a9f6:	d807      	bhi.n	800aa08 <memmove+0x20>
 800a9f8:	1e43      	subs	r3, r0, #1
 800a9fa:	42a1      	cmp	r1, r4
 800a9fc:	d008      	beq.n	800aa10 <memmove+0x28>
 800a9fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa06:	e7f8      	b.n	800a9fa <memmove+0x12>
 800aa08:	4601      	mov	r1, r0
 800aa0a:	4402      	add	r2, r0
 800aa0c:	428a      	cmp	r2, r1
 800aa0e:	d100      	bne.n	800aa12 <memmove+0x2a>
 800aa10:	bd10      	pop	{r4, pc}
 800aa12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa1a:	e7f7      	b.n	800aa0c <memmove+0x24>

0800aa1c <memset>:
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	4402      	add	r2, r0
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d100      	bne.n	800aa26 <memset+0xa>
 800aa24:	4770      	bx	lr
 800aa26:	f803 1b01 	strb.w	r1, [r3], #1
 800aa2a:	e7f9      	b.n	800aa20 <memset+0x4>

0800aa2c <_free_r>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	4605      	mov	r5, r0
 800aa30:	2900      	cmp	r1, #0
 800aa32:	d040      	beq.n	800aab6 <_free_r+0x8a>
 800aa34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa38:	1f0c      	subs	r4, r1, #4
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	bfb8      	it	lt
 800aa3e:	18e4      	addlt	r4, r4, r3
 800aa40:	f000 f9ae 	bl	800ada0 <__malloc_lock>
 800aa44:	4a1c      	ldr	r2, [pc, #112]	; (800aab8 <_free_r+0x8c>)
 800aa46:	6813      	ldr	r3, [r2, #0]
 800aa48:	b933      	cbnz	r3, 800aa58 <_free_r+0x2c>
 800aa4a:	6063      	str	r3, [r4, #4]
 800aa4c:	6014      	str	r4, [r2, #0]
 800aa4e:	4628      	mov	r0, r5
 800aa50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa54:	f000 b9aa 	b.w	800adac <__malloc_unlock>
 800aa58:	42a3      	cmp	r3, r4
 800aa5a:	d908      	bls.n	800aa6e <_free_r+0x42>
 800aa5c:	6820      	ldr	r0, [r4, #0]
 800aa5e:	1821      	adds	r1, r4, r0
 800aa60:	428b      	cmp	r3, r1
 800aa62:	bf01      	itttt	eq
 800aa64:	6819      	ldreq	r1, [r3, #0]
 800aa66:	685b      	ldreq	r3, [r3, #4]
 800aa68:	1809      	addeq	r1, r1, r0
 800aa6a:	6021      	streq	r1, [r4, #0]
 800aa6c:	e7ed      	b.n	800aa4a <_free_r+0x1e>
 800aa6e:	461a      	mov	r2, r3
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	b10b      	cbz	r3, 800aa78 <_free_r+0x4c>
 800aa74:	42a3      	cmp	r3, r4
 800aa76:	d9fa      	bls.n	800aa6e <_free_r+0x42>
 800aa78:	6811      	ldr	r1, [r2, #0]
 800aa7a:	1850      	adds	r0, r2, r1
 800aa7c:	42a0      	cmp	r0, r4
 800aa7e:	d10b      	bne.n	800aa98 <_free_r+0x6c>
 800aa80:	6820      	ldr	r0, [r4, #0]
 800aa82:	4401      	add	r1, r0
 800aa84:	1850      	adds	r0, r2, r1
 800aa86:	4283      	cmp	r3, r0
 800aa88:	6011      	str	r1, [r2, #0]
 800aa8a:	d1e0      	bne.n	800aa4e <_free_r+0x22>
 800aa8c:	6818      	ldr	r0, [r3, #0]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	4401      	add	r1, r0
 800aa92:	6011      	str	r1, [r2, #0]
 800aa94:	6053      	str	r3, [r2, #4]
 800aa96:	e7da      	b.n	800aa4e <_free_r+0x22>
 800aa98:	d902      	bls.n	800aaa0 <_free_r+0x74>
 800aa9a:	230c      	movs	r3, #12
 800aa9c:	602b      	str	r3, [r5, #0]
 800aa9e:	e7d6      	b.n	800aa4e <_free_r+0x22>
 800aaa0:	6820      	ldr	r0, [r4, #0]
 800aaa2:	1821      	adds	r1, r4, r0
 800aaa4:	428b      	cmp	r3, r1
 800aaa6:	bf01      	itttt	eq
 800aaa8:	6819      	ldreq	r1, [r3, #0]
 800aaaa:	685b      	ldreq	r3, [r3, #4]
 800aaac:	1809      	addeq	r1, r1, r0
 800aaae:	6021      	streq	r1, [r4, #0]
 800aab0:	6063      	str	r3, [r4, #4]
 800aab2:	6054      	str	r4, [r2, #4]
 800aab4:	e7cb      	b.n	800aa4e <_free_r+0x22>
 800aab6:	bd38      	pop	{r3, r4, r5, pc}
 800aab8:	20003abc 	.word	0x20003abc

0800aabc <sbrk_aligned>:
 800aabc:	b570      	push	{r4, r5, r6, lr}
 800aabe:	4e0e      	ldr	r6, [pc, #56]	; (800aaf8 <sbrk_aligned+0x3c>)
 800aac0:	460c      	mov	r4, r1
 800aac2:	6831      	ldr	r1, [r6, #0]
 800aac4:	4605      	mov	r5, r0
 800aac6:	b911      	cbnz	r1, 800aace <sbrk_aligned+0x12>
 800aac8:	f000 f8f6 	bl	800acb8 <_sbrk_r>
 800aacc:	6030      	str	r0, [r6, #0]
 800aace:	4621      	mov	r1, r4
 800aad0:	4628      	mov	r0, r5
 800aad2:	f000 f8f1 	bl	800acb8 <_sbrk_r>
 800aad6:	1c43      	adds	r3, r0, #1
 800aad8:	d00a      	beq.n	800aaf0 <sbrk_aligned+0x34>
 800aada:	1cc4      	adds	r4, r0, #3
 800aadc:	f024 0403 	bic.w	r4, r4, #3
 800aae0:	42a0      	cmp	r0, r4
 800aae2:	d007      	beq.n	800aaf4 <sbrk_aligned+0x38>
 800aae4:	1a21      	subs	r1, r4, r0
 800aae6:	4628      	mov	r0, r5
 800aae8:	f000 f8e6 	bl	800acb8 <_sbrk_r>
 800aaec:	3001      	adds	r0, #1
 800aaee:	d101      	bne.n	800aaf4 <sbrk_aligned+0x38>
 800aaf0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	bd70      	pop	{r4, r5, r6, pc}
 800aaf8:	20003ac0 	.word	0x20003ac0

0800aafc <_malloc_r>:
 800aafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab00:	1ccd      	adds	r5, r1, #3
 800ab02:	f025 0503 	bic.w	r5, r5, #3
 800ab06:	3508      	adds	r5, #8
 800ab08:	2d0c      	cmp	r5, #12
 800ab0a:	bf38      	it	cc
 800ab0c:	250c      	movcc	r5, #12
 800ab0e:	2d00      	cmp	r5, #0
 800ab10:	4607      	mov	r7, r0
 800ab12:	db01      	blt.n	800ab18 <_malloc_r+0x1c>
 800ab14:	42a9      	cmp	r1, r5
 800ab16:	d905      	bls.n	800ab24 <_malloc_r+0x28>
 800ab18:	230c      	movs	r3, #12
 800ab1a:	2600      	movs	r6, #0
 800ab1c:	603b      	str	r3, [r7, #0]
 800ab1e:	4630      	mov	r0, r6
 800ab20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab24:	4e2e      	ldr	r6, [pc, #184]	; (800abe0 <_malloc_r+0xe4>)
 800ab26:	f000 f93b 	bl	800ada0 <__malloc_lock>
 800ab2a:	6833      	ldr	r3, [r6, #0]
 800ab2c:	461c      	mov	r4, r3
 800ab2e:	bb34      	cbnz	r4, 800ab7e <_malloc_r+0x82>
 800ab30:	4629      	mov	r1, r5
 800ab32:	4638      	mov	r0, r7
 800ab34:	f7ff ffc2 	bl	800aabc <sbrk_aligned>
 800ab38:	1c43      	adds	r3, r0, #1
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	d14d      	bne.n	800abda <_malloc_r+0xde>
 800ab3e:	6834      	ldr	r4, [r6, #0]
 800ab40:	4626      	mov	r6, r4
 800ab42:	2e00      	cmp	r6, #0
 800ab44:	d140      	bne.n	800abc8 <_malloc_r+0xcc>
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	4631      	mov	r1, r6
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	eb04 0803 	add.w	r8, r4, r3
 800ab50:	f000 f8b2 	bl	800acb8 <_sbrk_r>
 800ab54:	4580      	cmp	r8, r0
 800ab56:	d13a      	bne.n	800abce <_malloc_r+0xd2>
 800ab58:	6821      	ldr	r1, [r4, #0]
 800ab5a:	3503      	adds	r5, #3
 800ab5c:	1a6d      	subs	r5, r5, r1
 800ab5e:	f025 0503 	bic.w	r5, r5, #3
 800ab62:	3508      	adds	r5, #8
 800ab64:	2d0c      	cmp	r5, #12
 800ab66:	bf38      	it	cc
 800ab68:	250c      	movcc	r5, #12
 800ab6a:	4638      	mov	r0, r7
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	f7ff ffa5 	bl	800aabc <sbrk_aligned>
 800ab72:	3001      	adds	r0, #1
 800ab74:	d02b      	beq.n	800abce <_malloc_r+0xd2>
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	442b      	add	r3, r5
 800ab7a:	6023      	str	r3, [r4, #0]
 800ab7c:	e00e      	b.n	800ab9c <_malloc_r+0xa0>
 800ab7e:	6822      	ldr	r2, [r4, #0]
 800ab80:	1b52      	subs	r2, r2, r5
 800ab82:	d41e      	bmi.n	800abc2 <_malloc_r+0xc6>
 800ab84:	2a0b      	cmp	r2, #11
 800ab86:	d916      	bls.n	800abb6 <_malloc_r+0xba>
 800ab88:	1961      	adds	r1, r4, r5
 800ab8a:	42a3      	cmp	r3, r4
 800ab8c:	6025      	str	r5, [r4, #0]
 800ab8e:	bf18      	it	ne
 800ab90:	6059      	strne	r1, [r3, #4]
 800ab92:	6863      	ldr	r3, [r4, #4]
 800ab94:	bf08      	it	eq
 800ab96:	6031      	streq	r1, [r6, #0]
 800ab98:	5162      	str	r2, [r4, r5]
 800ab9a:	604b      	str	r3, [r1, #4]
 800ab9c:	4638      	mov	r0, r7
 800ab9e:	f104 060b 	add.w	r6, r4, #11
 800aba2:	f000 f903 	bl	800adac <__malloc_unlock>
 800aba6:	f026 0607 	bic.w	r6, r6, #7
 800abaa:	1d23      	adds	r3, r4, #4
 800abac:	1af2      	subs	r2, r6, r3
 800abae:	d0b6      	beq.n	800ab1e <_malloc_r+0x22>
 800abb0:	1b9b      	subs	r3, r3, r6
 800abb2:	50a3      	str	r3, [r4, r2]
 800abb4:	e7b3      	b.n	800ab1e <_malloc_r+0x22>
 800abb6:	6862      	ldr	r2, [r4, #4]
 800abb8:	42a3      	cmp	r3, r4
 800abba:	bf0c      	ite	eq
 800abbc:	6032      	streq	r2, [r6, #0]
 800abbe:	605a      	strne	r2, [r3, #4]
 800abc0:	e7ec      	b.n	800ab9c <_malloc_r+0xa0>
 800abc2:	4623      	mov	r3, r4
 800abc4:	6864      	ldr	r4, [r4, #4]
 800abc6:	e7b2      	b.n	800ab2e <_malloc_r+0x32>
 800abc8:	4634      	mov	r4, r6
 800abca:	6876      	ldr	r6, [r6, #4]
 800abcc:	e7b9      	b.n	800ab42 <_malloc_r+0x46>
 800abce:	230c      	movs	r3, #12
 800abd0:	4638      	mov	r0, r7
 800abd2:	603b      	str	r3, [r7, #0]
 800abd4:	f000 f8ea 	bl	800adac <__malloc_unlock>
 800abd8:	e7a1      	b.n	800ab1e <_malloc_r+0x22>
 800abda:	6025      	str	r5, [r4, #0]
 800abdc:	e7de      	b.n	800ab9c <_malloc_r+0xa0>
 800abde:	bf00      	nop
 800abe0:	20003abc 	.word	0x20003abc

0800abe4 <cleanup_glue>:
 800abe4:	b538      	push	{r3, r4, r5, lr}
 800abe6:	460c      	mov	r4, r1
 800abe8:	6809      	ldr	r1, [r1, #0]
 800abea:	4605      	mov	r5, r0
 800abec:	b109      	cbz	r1, 800abf2 <cleanup_glue+0xe>
 800abee:	f7ff fff9 	bl	800abe4 <cleanup_glue>
 800abf2:	4621      	mov	r1, r4
 800abf4:	4628      	mov	r0, r5
 800abf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abfa:	f7ff bf17 	b.w	800aa2c <_free_r>
	...

0800ac00 <_reclaim_reent>:
 800ac00:	4b2c      	ldr	r3, [pc, #176]	; (800acb4 <_reclaim_reent+0xb4>)
 800ac02:	b570      	push	{r4, r5, r6, lr}
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4604      	mov	r4, r0
 800ac08:	4283      	cmp	r3, r0
 800ac0a:	d051      	beq.n	800acb0 <_reclaim_reent+0xb0>
 800ac0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ac0e:	b143      	cbz	r3, 800ac22 <_reclaim_reent+0x22>
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d14a      	bne.n	800acac <_reclaim_reent+0xac>
 800ac16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac18:	6819      	ldr	r1, [r3, #0]
 800ac1a:	b111      	cbz	r1, 800ac22 <_reclaim_reent+0x22>
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f7ff ff05 	bl	800aa2c <_free_r>
 800ac22:	6961      	ldr	r1, [r4, #20]
 800ac24:	b111      	cbz	r1, 800ac2c <_reclaim_reent+0x2c>
 800ac26:	4620      	mov	r0, r4
 800ac28:	f7ff ff00 	bl	800aa2c <_free_r>
 800ac2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ac2e:	b111      	cbz	r1, 800ac36 <_reclaim_reent+0x36>
 800ac30:	4620      	mov	r0, r4
 800ac32:	f7ff fefb 	bl	800aa2c <_free_r>
 800ac36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ac38:	b111      	cbz	r1, 800ac40 <_reclaim_reent+0x40>
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f7ff fef6 	bl	800aa2c <_free_r>
 800ac40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ac42:	b111      	cbz	r1, 800ac4a <_reclaim_reent+0x4a>
 800ac44:	4620      	mov	r0, r4
 800ac46:	f7ff fef1 	bl	800aa2c <_free_r>
 800ac4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ac4c:	b111      	cbz	r1, 800ac54 <_reclaim_reent+0x54>
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f7ff feec 	bl	800aa2c <_free_r>
 800ac54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ac56:	b111      	cbz	r1, 800ac5e <_reclaim_reent+0x5e>
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f7ff fee7 	bl	800aa2c <_free_r>
 800ac5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ac60:	b111      	cbz	r1, 800ac68 <_reclaim_reent+0x68>
 800ac62:	4620      	mov	r0, r4
 800ac64:	f7ff fee2 	bl	800aa2c <_free_r>
 800ac68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac6a:	b111      	cbz	r1, 800ac72 <_reclaim_reent+0x72>
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f7ff fedd 	bl	800aa2c <_free_r>
 800ac72:	69a3      	ldr	r3, [r4, #24]
 800ac74:	b1e3      	cbz	r3, 800acb0 <_reclaim_reent+0xb0>
 800ac76:	4620      	mov	r0, r4
 800ac78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac7a:	4798      	blx	r3
 800ac7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ac7e:	b1b9      	cbz	r1, 800acb0 <_reclaim_reent+0xb0>
 800ac80:	4620      	mov	r0, r4
 800ac82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac86:	f7ff bfad 	b.w	800abe4 <cleanup_glue>
 800ac8a:	5949      	ldr	r1, [r1, r5]
 800ac8c:	b941      	cbnz	r1, 800aca0 <_reclaim_reent+0xa0>
 800ac8e:	3504      	adds	r5, #4
 800ac90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac92:	2d80      	cmp	r5, #128	; 0x80
 800ac94:	68d9      	ldr	r1, [r3, #12]
 800ac96:	d1f8      	bne.n	800ac8a <_reclaim_reent+0x8a>
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f7ff fec7 	bl	800aa2c <_free_r>
 800ac9e:	e7ba      	b.n	800ac16 <_reclaim_reent+0x16>
 800aca0:	680e      	ldr	r6, [r1, #0]
 800aca2:	4620      	mov	r0, r4
 800aca4:	f7ff fec2 	bl	800aa2c <_free_r>
 800aca8:	4631      	mov	r1, r6
 800acaa:	e7ef      	b.n	800ac8c <_reclaim_reent+0x8c>
 800acac:	2500      	movs	r5, #0
 800acae:	e7ef      	b.n	800ac90 <_reclaim_reent+0x90>
 800acb0:	bd70      	pop	{r4, r5, r6, pc}
 800acb2:	bf00      	nop
 800acb4:	20000018 	.word	0x20000018

0800acb8 <_sbrk_r>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	2300      	movs	r3, #0
 800acbc:	4d05      	ldr	r5, [pc, #20]	; (800acd4 <_sbrk_r+0x1c>)
 800acbe:	4604      	mov	r4, r0
 800acc0:	4608      	mov	r0, r1
 800acc2:	602b      	str	r3, [r5, #0]
 800acc4:	f7f9 f932 	bl	8003f2c <_sbrk>
 800acc8:	1c43      	adds	r3, r0, #1
 800acca:	d102      	bne.n	800acd2 <_sbrk_r+0x1a>
 800accc:	682b      	ldr	r3, [r5, #0]
 800acce:	b103      	cbz	r3, 800acd2 <_sbrk_r+0x1a>
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	bd38      	pop	{r3, r4, r5, pc}
 800acd4:	20003ac4 	.word	0x20003ac4

0800acd8 <_raise_r>:
 800acd8:	291f      	cmp	r1, #31
 800acda:	b538      	push	{r3, r4, r5, lr}
 800acdc:	4604      	mov	r4, r0
 800acde:	460d      	mov	r5, r1
 800ace0:	d904      	bls.n	800acec <_raise_r+0x14>
 800ace2:	2316      	movs	r3, #22
 800ace4:	6003      	str	r3, [r0, #0]
 800ace6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800acee:	b112      	cbz	r2, 800acf6 <_raise_r+0x1e>
 800acf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acf4:	b94b      	cbnz	r3, 800ad0a <_raise_r+0x32>
 800acf6:	4620      	mov	r0, r4
 800acf8:	f000 f830 	bl	800ad5c <_getpid_r>
 800acfc:	462a      	mov	r2, r5
 800acfe:	4601      	mov	r1, r0
 800ad00:	4620      	mov	r0, r4
 800ad02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad06:	f000 b817 	b.w	800ad38 <_kill_r>
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d00a      	beq.n	800ad24 <_raise_r+0x4c>
 800ad0e:	1c59      	adds	r1, r3, #1
 800ad10:	d103      	bne.n	800ad1a <_raise_r+0x42>
 800ad12:	2316      	movs	r3, #22
 800ad14:	6003      	str	r3, [r0, #0]
 800ad16:	2001      	movs	r0, #1
 800ad18:	e7e7      	b.n	800acea <_raise_r+0x12>
 800ad1a:	2400      	movs	r4, #0
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad22:	4798      	blx	r3
 800ad24:	2000      	movs	r0, #0
 800ad26:	e7e0      	b.n	800acea <_raise_r+0x12>

0800ad28 <raise>:
 800ad28:	4b02      	ldr	r3, [pc, #8]	; (800ad34 <raise+0xc>)
 800ad2a:	4601      	mov	r1, r0
 800ad2c:	6818      	ldr	r0, [r3, #0]
 800ad2e:	f7ff bfd3 	b.w	800acd8 <_raise_r>
 800ad32:	bf00      	nop
 800ad34:	20000018 	.word	0x20000018

0800ad38 <_kill_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	4d06      	ldr	r5, [pc, #24]	; (800ad58 <_kill_r+0x20>)
 800ad3e:	4604      	mov	r4, r0
 800ad40:	4608      	mov	r0, r1
 800ad42:	4611      	mov	r1, r2
 800ad44:	602b      	str	r3, [r5, #0]
 800ad46:	f7f9 f8d6 	bl	8003ef6 <_kill>
 800ad4a:	1c43      	adds	r3, r0, #1
 800ad4c:	d102      	bne.n	800ad54 <_kill_r+0x1c>
 800ad4e:	682b      	ldr	r3, [r5, #0]
 800ad50:	b103      	cbz	r3, 800ad54 <_kill_r+0x1c>
 800ad52:	6023      	str	r3, [r4, #0]
 800ad54:	bd38      	pop	{r3, r4, r5, pc}
 800ad56:	bf00      	nop
 800ad58:	20003ac4 	.word	0x20003ac4

0800ad5c <_getpid_r>:
 800ad5c:	f7f9 b8c4 	b.w	8003ee8 <_getpid>

0800ad60 <siprintf>:
 800ad60:	b40e      	push	{r1, r2, r3}
 800ad62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad66:	b500      	push	{lr}
 800ad68:	b09c      	sub	sp, #112	; 0x70
 800ad6a:	ab1d      	add	r3, sp, #116	; 0x74
 800ad6c:	9002      	str	r0, [sp, #8]
 800ad6e:	9006      	str	r0, [sp, #24]
 800ad70:	9107      	str	r1, [sp, #28]
 800ad72:	9104      	str	r1, [sp, #16]
 800ad74:	4808      	ldr	r0, [pc, #32]	; (800ad98 <siprintf+0x38>)
 800ad76:	4909      	ldr	r1, [pc, #36]	; (800ad9c <siprintf+0x3c>)
 800ad78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad7c:	9105      	str	r1, [sp, #20]
 800ad7e:	6800      	ldr	r0, [r0, #0]
 800ad80:	a902      	add	r1, sp, #8
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	f000 f874 	bl	800ae70 <_svfiprintf_r>
 800ad88:	2200      	movs	r2, #0
 800ad8a:	9b02      	ldr	r3, [sp, #8]
 800ad8c:	701a      	strb	r2, [r3, #0]
 800ad8e:	b01c      	add	sp, #112	; 0x70
 800ad90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad94:	b003      	add	sp, #12
 800ad96:	4770      	bx	lr
 800ad98:	20000018 	.word	0x20000018
 800ad9c:	ffff0208 	.word	0xffff0208

0800ada0 <__malloc_lock>:
 800ada0:	4801      	ldr	r0, [pc, #4]	; (800ada8 <__malloc_lock+0x8>)
 800ada2:	f7ff bde3 	b.w	800a96c <__retarget_lock_acquire_recursive>
 800ada6:	bf00      	nop
 800ada8:	20003ab8 	.word	0x20003ab8

0800adac <__malloc_unlock>:
 800adac:	4801      	ldr	r0, [pc, #4]	; (800adb4 <__malloc_unlock+0x8>)
 800adae:	f7ff bdde 	b.w	800a96e <__retarget_lock_release_recursive>
 800adb2:	bf00      	nop
 800adb4:	20003ab8 	.word	0x20003ab8

0800adb8 <__ssputs_r>:
 800adb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adbc:	688e      	ldr	r6, [r1, #8]
 800adbe:	4682      	mov	sl, r0
 800adc0:	429e      	cmp	r6, r3
 800adc2:	460c      	mov	r4, r1
 800adc4:	4690      	mov	r8, r2
 800adc6:	461f      	mov	r7, r3
 800adc8:	d838      	bhi.n	800ae3c <__ssputs_r+0x84>
 800adca:	898a      	ldrh	r2, [r1, #12]
 800adcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800add0:	d032      	beq.n	800ae38 <__ssputs_r+0x80>
 800add2:	6825      	ldr	r5, [r4, #0]
 800add4:	6909      	ldr	r1, [r1, #16]
 800add6:	3301      	adds	r3, #1
 800add8:	eba5 0901 	sub.w	r9, r5, r1
 800addc:	6965      	ldr	r5, [r4, #20]
 800adde:	444b      	add	r3, r9
 800ade0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ade4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ade8:	106d      	asrs	r5, r5, #1
 800adea:	429d      	cmp	r5, r3
 800adec:	bf38      	it	cc
 800adee:	461d      	movcc	r5, r3
 800adf0:	0553      	lsls	r3, r2, #21
 800adf2:	d531      	bpl.n	800ae58 <__ssputs_r+0xa0>
 800adf4:	4629      	mov	r1, r5
 800adf6:	f7ff fe81 	bl	800aafc <_malloc_r>
 800adfa:	4606      	mov	r6, r0
 800adfc:	b950      	cbnz	r0, 800ae14 <__ssputs_r+0x5c>
 800adfe:	230c      	movs	r3, #12
 800ae00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae04:	f8ca 3000 	str.w	r3, [sl]
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae0e:	81a3      	strh	r3, [r4, #12]
 800ae10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae14:	464a      	mov	r2, r9
 800ae16:	6921      	ldr	r1, [r4, #16]
 800ae18:	f7ff fdd8 	bl	800a9cc <memcpy>
 800ae1c:	89a3      	ldrh	r3, [r4, #12]
 800ae1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae26:	81a3      	strh	r3, [r4, #12]
 800ae28:	6126      	str	r6, [r4, #16]
 800ae2a:	444e      	add	r6, r9
 800ae2c:	6026      	str	r6, [r4, #0]
 800ae2e:	463e      	mov	r6, r7
 800ae30:	6165      	str	r5, [r4, #20]
 800ae32:	eba5 0509 	sub.w	r5, r5, r9
 800ae36:	60a5      	str	r5, [r4, #8]
 800ae38:	42be      	cmp	r6, r7
 800ae3a:	d900      	bls.n	800ae3e <__ssputs_r+0x86>
 800ae3c:	463e      	mov	r6, r7
 800ae3e:	4632      	mov	r2, r6
 800ae40:	4641      	mov	r1, r8
 800ae42:	6820      	ldr	r0, [r4, #0]
 800ae44:	f7ff fdd0 	bl	800a9e8 <memmove>
 800ae48:	68a3      	ldr	r3, [r4, #8]
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	1b9b      	subs	r3, r3, r6
 800ae4e:	60a3      	str	r3, [r4, #8]
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	4433      	add	r3, r6
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	e7db      	b.n	800ae10 <__ssputs_r+0x58>
 800ae58:	462a      	mov	r2, r5
 800ae5a:	f000 fa9f 	bl	800b39c <_realloc_r>
 800ae5e:	4606      	mov	r6, r0
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d1e1      	bne.n	800ae28 <__ssputs_r+0x70>
 800ae64:	4650      	mov	r0, sl
 800ae66:	6921      	ldr	r1, [r4, #16]
 800ae68:	f7ff fde0 	bl	800aa2c <_free_r>
 800ae6c:	e7c7      	b.n	800adfe <__ssputs_r+0x46>
	...

0800ae70 <_svfiprintf_r>:
 800ae70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae74:	4698      	mov	r8, r3
 800ae76:	898b      	ldrh	r3, [r1, #12]
 800ae78:	4607      	mov	r7, r0
 800ae7a:	061b      	lsls	r3, r3, #24
 800ae7c:	460d      	mov	r5, r1
 800ae7e:	4614      	mov	r4, r2
 800ae80:	b09d      	sub	sp, #116	; 0x74
 800ae82:	d50e      	bpl.n	800aea2 <_svfiprintf_r+0x32>
 800ae84:	690b      	ldr	r3, [r1, #16]
 800ae86:	b963      	cbnz	r3, 800aea2 <_svfiprintf_r+0x32>
 800ae88:	2140      	movs	r1, #64	; 0x40
 800ae8a:	f7ff fe37 	bl	800aafc <_malloc_r>
 800ae8e:	6028      	str	r0, [r5, #0]
 800ae90:	6128      	str	r0, [r5, #16]
 800ae92:	b920      	cbnz	r0, 800ae9e <_svfiprintf_r+0x2e>
 800ae94:	230c      	movs	r3, #12
 800ae96:	603b      	str	r3, [r7, #0]
 800ae98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae9c:	e0d1      	b.n	800b042 <_svfiprintf_r+0x1d2>
 800ae9e:	2340      	movs	r3, #64	; 0x40
 800aea0:	616b      	str	r3, [r5, #20]
 800aea2:	2300      	movs	r3, #0
 800aea4:	9309      	str	r3, [sp, #36]	; 0x24
 800aea6:	2320      	movs	r3, #32
 800aea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aeac:	2330      	movs	r3, #48	; 0x30
 800aeae:	f04f 0901 	mov.w	r9, #1
 800aeb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b05c <_svfiprintf_r+0x1ec>
 800aeba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aebe:	4623      	mov	r3, r4
 800aec0:	469a      	mov	sl, r3
 800aec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aec6:	b10a      	cbz	r2, 800aecc <_svfiprintf_r+0x5c>
 800aec8:	2a25      	cmp	r2, #37	; 0x25
 800aeca:	d1f9      	bne.n	800aec0 <_svfiprintf_r+0x50>
 800aecc:	ebba 0b04 	subs.w	fp, sl, r4
 800aed0:	d00b      	beq.n	800aeea <_svfiprintf_r+0x7a>
 800aed2:	465b      	mov	r3, fp
 800aed4:	4622      	mov	r2, r4
 800aed6:	4629      	mov	r1, r5
 800aed8:	4638      	mov	r0, r7
 800aeda:	f7ff ff6d 	bl	800adb8 <__ssputs_r>
 800aede:	3001      	adds	r0, #1
 800aee0:	f000 80aa 	beq.w	800b038 <_svfiprintf_r+0x1c8>
 800aee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aee6:	445a      	add	r2, fp
 800aee8:	9209      	str	r2, [sp, #36]	; 0x24
 800aeea:	f89a 3000 	ldrb.w	r3, [sl]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f000 80a2 	beq.w	800b038 <_svfiprintf_r+0x1c8>
 800aef4:	2300      	movs	r3, #0
 800aef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aefa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aefe:	f10a 0a01 	add.w	sl, sl, #1
 800af02:	9304      	str	r3, [sp, #16]
 800af04:	9307      	str	r3, [sp, #28]
 800af06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af0a:	931a      	str	r3, [sp, #104]	; 0x68
 800af0c:	4654      	mov	r4, sl
 800af0e:	2205      	movs	r2, #5
 800af10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af14:	4851      	ldr	r0, [pc, #324]	; (800b05c <_svfiprintf_r+0x1ec>)
 800af16:	f7ff fd3b 	bl	800a990 <memchr>
 800af1a:	9a04      	ldr	r2, [sp, #16]
 800af1c:	b9d8      	cbnz	r0, 800af56 <_svfiprintf_r+0xe6>
 800af1e:	06d0      	lsls	r0, r2, #27
 800af20:	bf44      	itt	mi
 800af22:	2320      	movmi	r3, #32
 800af24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af28:	0711      	lsls	r1, r2, #28
 800af2a:	bf44      	itt	mi
 800af2c:	232b      	movmi	r3, #43	; 0x2b
 800af2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af32:	f89a 3000 	ldrb.w	r3, [sl]
 800af36:	2b2a      	cmp	r3, #42	; 0x2a
 800af38:	d015      	beq.n	800af66 <_svfiprintf_r+0xf6>
 800af3a:	4654      	mov	r4, sl
 800af3c:	2000      	movs	r0, #0
 800af3e:	f04f 0c0a 	mov.w	ip, #10
 800af42:	9a07      	ldr	r2, [sp, #28]
 800af44:	4621      	mov	r1, r4
 800af46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af4a:	3b30      	subs	r3, #48	; 0x30
 800af4c:	2b09      	cmp	r3, #9
 800af4e:	d94e      	bls.n	800afee <_svfiprintf_r+0x17e>
 800af50:	b1b0      	cbz	r0, 800af80 <_svfiprintf_r+0x110>
 800af52:	9207      	str	r2, [sp, #28]
 800af54:	e014      	b.n	800af80 <_svfiprintf_r+0x110>
 800af56:	eba0 0308 	sub.w	r3, r0, r8
 800af5a:	fa09 f303 	lsl.w	r3, r9, r3
 800af5e:	4313      	orrs	r3, r2
 800af60:	46a2      	mov	sl, r4
 800af62:	9304      	str	r3, [sp, #16]
 800af64:	e7d2      	b.n	800af0c <_svfiprintf_r+0x9c>
 800af66:	9b03      	ldr	r3, [sp, #12]
 800af68:	1d19      	adds	r1, r3, #4
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	9103      	str	r1, [sp, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	bfbb      	ittet	lt
 800af72:	425b      	neglt	r3, r3
 800af74:	f042 0202 	orrlt.w	r2, r2, #2
 800af78:	9307      	strge	r3, [sp, #28]
 800af7a:	9307      	strlt	r3, [sp, #28]
 800af7c:	bfb8      	it	lt
 800af7e:	9204      	strlt	r2, [sp, #16]
 800af80:	7823      	ldrb	r3, [r4, #0]
 800af82:	2b2e      	cmp	r3, #46	; 0x2e
 800af84:	d10c      	bne.n	800afa0 <_svfiprintf_r+0x130>
 800af86:	7863      	ldrb	r3, [r4, #1]
 800af88:	2b2a      	cmp	r3, #42	; 0x2a
 800af8a:	d135      	bne.n	800aff8 <_svfiprintf_r+0x188>
 800af8c:	9b03      	ldr	r3, [sp, #12]
 800af8e:	3402      	adds	r4, #2
 800af90:	1d1a      	adds	r2, r3, #4
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	9203      	str	r2, [sp, #12]
 800af96:	2b00      	cmp	r3, #0
 800af98:	bfb8      	it	lt
 800af9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800af9e:	9305      	str	r3, [sp, #20]
 800afa0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b060 <_svfiprintf_r+0x1f0>
 800afa4:	2203      	movs	r2, #3
 800afa6:	4650      	mov	r0, sl
 800afa8:	7821      	ldrb	r1, [r4, #0]
 800afaa:	f7ff fcf1 	bl	800a990 <memchr>
 800afae:	b140      	cbz	r0, 800afc2 <_svfiprintf_r+0x152>
 800afb0:	2340      	movs	r3, #64	; 0x40
 800afb2:	eba0 000a 	sub.w	r0, r0, sl
 800afb6:	fa03 f000 	lsl.w	r0, r3, r0
 800afba:	9b04      	ldr	r3, [sp, #16]
 800afbc:	3401      	adds	r4, #1
 800afbe:	4303      	orrs	r3, r0
 800afc0:	9304      	str	r3, [sp, #16]
 800afc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc6:	2206      	movs	r2, #6
 800afc8:	4826      	ldr	r0, [pc, #152]	; (800b064 <_svfiprintf_r+0x1f4>)
 800afca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afce:	f7ff fcdf 	bl	800a990 <memchr>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d038      	beq.n	800b048 <_svfiprintf_r+0x1d8>
 800afd6:	4b24      	ldr	r3, [pc, #144]	; (800b068 <_svfiprintf_r+0x1f8>)
 800afd8:	bb1b      	cbnz	r3, 800b022 <_svfiprintf_r+0x1b2>
 800afda:	9b03      	ldr	r3, [sp, #12]
 800afdc:	3307      	adds	r3, #7
 800afde:	f023 0307 	bic.w	r3, r3, #7
 800afe2:	3308      	adds	r3, #8
 800afe4:	9303      	str	r3, [sp, #12]
 800afe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afe8:	4433      	add	r3, r6
 800afea:	9309      	str	r3, [sp, #36]	; 0x24
 800afec:	e767      	b.n	800aebe <_svfiprintf_r+0x4e>
 800afee:	460c      	mov	r4, r1
 800aff0:	2001      	movs	r0, #1
 800aff2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aff6:	e7a5      	b.n	800af44 <_svfiprintf_r+0xd4>
 800aff8:	2300      	movs	r3, #0
 800affa:	f04f 0c0a 	mov.w	ip, #10
 800affe:	4619      	mov	r1, r3
 800b000:	3401      	adds	r4, #1
 800b002:	9305      	str	r3, [sp, #20]
 800b004:	4620      	mov	r0, r4
 800b006:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b00a:	3a30      	subs	r2, #48	; 0x30
 800b00c:	2a09      	cmp	r2, #9
 800b00e:	d903      	bls.n	800b018 <_svfiprintf_r+0x1a8>
 800b010:	2b00      	cmp	r3, #0
 800b012:	d0c5      	beq.n	800afa0 <_svfiprintf_r+0x130>
 800b014:	9105      	str	r1, [sp, #20]
 800b016:	e7c3      	b.n	800afa0 <_svfiprintf_r+0x130>
 800b018:	4604      	mov	r4, r0
 800b01a:	2301      	movs	r3, #1
 800b01c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b020:	e7f0      	b.n	800b004 <_svfiprintf_r+0x194>
 800b022:	ab03      	add	r3, sp, #12
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	462a      	mov	r2, r5
 800b028:	4638      	mov	r0, r7
 800b02a:	4b10      	ldr	r3, [pc, #64]	; (800b06c <_svfiprintf_r+0x1fc>)
 800b02c:	a904      	add	r1, sp, #16
 800b02e:	f3af 8000 	nop.w
 800b032:	1c42      	adds	r2, r0, #1
 800b034:	4606      	mov	r6, r0
 800b036:	d1d6      	bne.n	800afe6 <_svfiprintf_r+0x176>
 800b038:	89ab      	ldrh	r3, [r5, #12]
 800b03a:	065b      	lsls	r3, r3, #25
 800b03c:	f53f af2c 	bmi.w	800ae98 <_svfiprintf_r+0x28>
 800b040:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b042:	b01d      	add	sp, #116	; 0x74
 800b044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b048:	ab03      	add	r3, sp, #12
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	462a      	mov	r2, r5
 800b04e:	4638      	mov	r0, r7
 800b050:	4b06      	ldr	r3, [pc, #24]	; (800b06c <_svfiprintf_r+0x1fc>)
 800b052:	a904      	add	r1, sp, #16
 800b054:	f000 f87c 	bl	800b150 <_printf_i>
 800b058:	e7eb      	b.n	800b032 <_svfiprintf_r+0x1c2>
 800b05a:	bf00      	nop
 800b05c:	0800b7c8 	.word	0x0800b7c8
 800b060:	0800b7ce 	.word	0x0800b7ce
 800b064:	0800b7d2 	.word	0x0800b7d2
 800b068:	00000000 	.word	0x00000000
 800b06c:	0800adb9 	.word	0x0800adb9

0800b070 <_printf_common>:
 800b070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b074:	4616      	mov	r6, r2
 800b076:	4699      	mov	r9, r3
 800b078:	688a      	ldr	r2, [r1, #8]
 800b07a:	690b      	ldr	r3, [r1, #16]
 800b07c:	4607      	mov	r7, r0
 800b07e:	4293      	cmp	r3, r2
 800b080:	bfb8      	it	lt
 800b082:	4613      	movlt	r3, r2
 800b084:	6033      	str	r3, [r6, #0]
 800b086:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b08a:	460c      	mov	r4, r1
 800b08c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b090:	b10a      	cbz	r2, 800b096 <_printf_common+0x26>
 800b092:	3301      	adds	r3, #1
 800b094:	6033      	str	r3, [r6, #0]
 800b096:	6823      	ldr	r3, [r4, #0]
 800b098:	0699      	lsls	r1, r3, #26
 800b09a:	bf42      	ittt	mi
 800b09c:	6833      	ldrmi	r3, [r6, #0]
 800b09e:	3302      	addmi	r3, #2
 800b0a0:	6033      	strmi	r3, [r6, #0]
 800b0a2:	6825      	ldr	r5, [r4, #0]
 800b0a4:	f015 0506 	ands.w	r5, r5, #6
 800b0a8:	d106      	bne.n	800b0b8 <_printf_common+0x48>
 800b0aa:	f104 0a19 	add.w	sl, r4, #25
 800b0ae:	68e3      	ldr	r3, [r4, #12]
 800b0b0:	6832      	ldr	r2, [r6, #0]
 800b0b2:	1a9b      	subs	r3, r3, r2
 800b0b4:	42ab      	cmp	r3, r5
 800b0b6:	dc28      	bgt.n	800b10a <_printf_common+0x9a>
 800b0b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0bc:	1e13      	subs	r3, r2, #0
 800b0be:	6822      	ldr	r2, [r4, #0]
 800b0c0:	bf18      	it	ne
 800b0c2:	2301      	movne	r3, #1
 800b0c4:	0692      	lsls	r2, r2, #26
 800b0c6:	d42d      	bmi.n	800b124 <_printf_common+0xb4>
 800b0c8:	4649      	mov	r1, r9
 800b0ca:	4638      	mov	r0, r7
 800b0cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0d0:	47c0      	blx	r8
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	d020      	beq.n	800b118 <_printf_common+0xa8>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	68e5      	ldr	r5, [r4, #12]
 800b0da:	f003 0306 	and.w	r3, r3, #6
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	bf18      	it	ne
 800b0e2:	2500      	movne	r5, #0
 800b0e4:	6832      	ldr	r2, [r6, #0]
 800b0e6:	f04f 0600 	mov.w	r6, #0
 800b0ea:	68a3      	ldr	r3, [r4, #8]
 800b0ec:	bf08      	it	eq
 800b0ee:	1aad      	subeq	r5, r5, r2
 800b0f0:	6922      	ldr	r2, [r4, #16]
 800b0f2:	bf08      	it	eq
 800b0f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	bfc4      	itt	gt
 800b0fc:	1a9b      	subgt	r3, r3, r2
 800b0fe:	18ed      	addgt	r5, r5, r3
 800b100:	341a      	adds	r4, #26
 800b102:	42b5      	cmp	r5, r6
 800b104:	d11a      	bne.n	800b13c <_printf_common+0xcc>
 800b106:	2000      	movs	r0, #0
 800b108:	e008      	b.n	800b11c <_printf_common+0xac>
 800b10a:	2301      	movs	r3, #1
 800b10c:	4652      	mov	r2, sl
 800b10e:	4649      	mov	r1, r9
 800b110:	4638      	mov	r0, r7
 800b112:	47c0      	blx	r8
 800b114:	3001      	adds	r0, #1
 800b116:	d103      	bne.n	800b120 <_printf_common+0xb0>
 800b118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b120:	3501      	adds	r5, #1
 800b122:	e7c4      	b.n	800b0ae <_printf_common+0x3e>
 800b124:	2030      	movs	r0, #48	; 0x30
 800b126:	18e1      	adds	r1, r4, r3
 800b128:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b12c:	1c5a      	adds	r2, r3, #1
 800b12e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b132:	4422      	add	r2, r4
 800b134:	3302      	adds	r3, #2
 800b136:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b13a:	e7c5      	b.n	800b0c8 <_printf_common+0x58>
 800b13c:	2301      	movs	r3, #1
 800b13e:	4622      	mov	r2, r4
 800b140:	4649      	mov	r1, r9
 800b142:	4638      	mov	r0, r7
 800b144:	47c0      	blx	r8
 800b146:	3001      	adds	r0, #1
 800b148:	d0e6      	beq.n	800b118 <_printf_common+0xa8>
 800b14a:	3601      	adds	r6, #1
 800b14c:	e7d9      	b.n	800b102 <_printf_common+0x92>
	...

0800b150 <_printf_i>:
 800b150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b154:	7e0f      	ldrb	r7, [r1, #24]
 800b156:	4691      	mov	r9, r2
 800b158:	2f78      	cmp	r7, #120	; 0x78
 800b15a:	4680      	mov	r8, r0
 800b15c:	460c      	mov	r4, r1
 800b15e:	469a      	mov	sl, r3
 800b160:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b162:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b166:	d807      	bhi.n	800b178 <_printf_i+0x28>
 800b168:	2f62      	cmp	r7, #98	; 0x62
 800b16a:	d80a      	bhi.n	800b182 <_printf_i+0x32>
 800b16c:	2f00      	cmp	r7, #0
 800b16e:	f000 80d9 	beq.w	800b324 <_printf_i+0x1d4>
 800b172:	2f58      	cmp	r7, #88	; 0x58
 800b174:	f000 80a4 	beq.w	800b2c0 <_printf_i+0x170>
 800b178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b17c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b180:	e03a      	b.n	800b1f8 <_printf_i+0xa8>
 800b182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b186:	2b15      	cmp	r3, #21
 800b188:	d8f6      	bhi.n	800b178 <_printf_i+0x28>
 800b18a:	a101      	add	r1, pc, #4	; (adr r1, 800b190 <_printf_i+0x40>)
 800b18c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b190:	0800b1e9 	.word	0x0800b1e9
 800b194:	0800b1fd 	.word	0x0800b1fd
 800b198:	0800b179 	.word	0x0800b179
 800b19c:	0800b179 	.word	0x0800b179
 800b1a0:	0800b179 	.word	0x0800b179
 800b1a4:	0800b179 	.word	0x0800b179
 800b1a8:	0800b1fd 	.word	0x0800b1fd
 800b1ac:	0800b179 	.word	0x0800b179
 800b1b0:	0800b179 	.word	0x0800b179
 800b1b4:	0800b179 	.word	0x0800b179
 800b1b8:	0800b179 	.word	0x0800b179
 800b1bc:	0800b30b 	.word	0x0800b30b
 800b1c0:	0800b22d 	.word	0x0800b22d
 800b1c4:	0800b2ed 	.word	0x0800b2ed
 800b1c8:	0800b179 	.word	0x0800b179
 800b1cc:	0800b179 	.word	0x0800b179
 800b1d0:	0800b32d 	.word	0x0800b32d
 800b1d4:	0800b179 	.word	0x0800b179
 800b1d8:	0800b22d 	.word	0x0800b22d
 800b1dc:	0800b179 	.word	0x0800b179
 800b1e0:	0800b179 	.word	0x0800b179
 800b1e4:	0800b2f5 	.word	0x0800b2f5
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	1d1a      	adds	r2, r3, #4
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	602a      	str	r2, [r5, #0]
 800b1f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e0a4      	b.n	800b346 <_printf_i+0x1f6>
 800b1fc:	6820      	ldr	r0, [r4, #0]
 800b1fe:	6829      	ldr	r1, [r5, #0]
 800b200:	0606      	lsls	r6, r0, #24
 800b202:	f101 0304 	add.w	r3, r1, #4
 800b206:	d50a      	bpl.n	800b21e <_printf_i+0xce>
 800b208:	680e      	ldr	r6, [r1, #0]
 800b20a:	602b      	str	r3, [r5, #0]
 800b20c:	2e00      	cmp	r6, #0
 800b20e:	da03      	bge.n	800b218 <_printf_i+0xc8>
 800b210:	232d      	movs	r3, #45	; 0x2d
 800b212:	4276      	negs	r6, r6
 800b214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b218:	230a      	movs	r3, #10
 800b21a:	485e      	ldr	r0, [pc, #376]	; (800b394 <_printf_i+0x244>)
 800b21c:	e019      	b.n	800b252 <_printf_i+0x102>
 800b21e:	680e      	ldr	r6, [r1, #0]
 800b220:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b224:	602b      	str	r3, [r5, #0]
 800b226:	bf18      	it	ne
 800b228:	b236      	sxthne	r6, r6
 800b22a:	e7ef      	b.n	800b20c <_printf_i+0xbc>
 800b22c:	682b      	ldr	r3, [r5, #0]
 800b22e:	6820      	ldr	r0, [r4, #0]
 800b230:	1d19      	adds	r1, r3, #4
 800b232:	6029      	str	r1, [r5, #0]
 800b234:	0601      	lsls	r1, r0, #24
 800b236:	d501      	bpl.n	800b23c <_printf_i+0xec>
 800b238:	681e      	ldr	r6, [r3, #0]
 800b23a:	e002      	b.n	800b242 <_printf_i+0xf2>
 800b23c:	0646      	lsls	r6, r0, #25
 800b23e:	d5fb      	bpl.n	800b238 <_printf_i+0xe8>
 800b240:	881e      	ldrh	r6, [r3, #0]
 800b242:	2f6f      	cmp	r7, #111	; 0x6f
 800b244:	bf0c      	ite	eq
 800b246:	2308      	moveq	r3, #8
 800b248:	230a      	movne	r3, #10
 800b24a:	4852      	ldr	r0, [pc, #328]	; (800b394 <_printf_i+0x244>)
 800b24c:	2100      	movs	r1, #0
 800b24e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b252:	6865      	ldr	r5, [r4, #4]
 800b254:	2d00      	cmp	r5, #0
 800b256:	bfa8      	it	ge
 800b258:	6821      	ldrge	r1, [r4, #0]
 800b25a:	60a5      	str	r5, [r4, #8]
 800b25c:	bfa4      	itt	ge
 800b25e:	f021 0104 	bicge.w	r1, r1, #4
 800b262:	6021      	strge	r1, [r4, #0]
 800b264:	b90e      	cbnz	r6, 800b26a <_printf_i+0x11a>
 800b266:	2d00      	cmp	r5, #0
 800b268:	d04d      	beq.n	800b306 <_printf_i+0x1b6>
 800b26a:	4615      	mov	r5, r2
 800b26c:	fbb6 f1f3 	udiv	r1, r6, r3
 800b270:	fb03 6711 	mls	r7, r3, r1, r6
 800b274:	5dc7      	ldrb	r7, [r0, r7]
 800b276:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b27a:	4637      	mov	r7, r6
 800b27c:	42bb      	cmp	r3, r7
 800b27e:	460e      	mov	r6, r1
 800b280:	d9f4      	bls.n	800b26c <_printf_i+0x11c>
 800b282:	2b08      	cmp	r3, #8
 800b284:	d10b      	bne.n	800b29e <_printf_i+0x14e>
 800b286:	6823      	ldr	r3, [r4, #0]
 800b288:	07de      	lsls	r6, r3, #31
 800b28a:	d508      	bpl.n	800b29e <_printf_i+0x14e>
 800b28c:	6923      	ldr	r3, [r4, #16]
 800b28e:	6861      	ldr	r1, [r4, #4]
 800b290:	4299      	cmp	r1, r3
 800b292:	bfde      	ittt	le
 800b294:	2330      	movle	r3, #48	; 0x30
 800b296:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b29a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b29e:	1b52      	subs	r2, r2, r5
 800b2a0:	6122      	str	r2, [r4, #16]
 800b2a2:	464b      	mov	r3, r9
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	f8cd a000 	str.w	sl, [sp]
 800b2ac:	aa03      	add	r2, sp, #12
 800b2ae:	f7ff fedf 	bl	800b070 <_printf_common>
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	d14c      	bne.n	800b350 <_printf_i+0x200>
 800b2b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2ba:	b004      	add	sp, #16
 800b2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c0:	4834      	ldr	r0, [pc, #208]	; (800b394 <_printf_i+0x244>)
 800b2c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b2c6:	6829      	ldr	r1, [r5, #0]
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2ce:	6029      	str	r1, [r5, #0]
 800b2d0:	061d      	lsls	r5, r3, #24
 800b2d2:	d514      	bpl.n	800b2fe <_printf_i+0x1ae>
 800b2d4:	07df      	lsls	r7, r3, #31
 800b2d6:	bf44      	itt	mi
 800b2d8:	f043 0320 	orrmi.w	r3, r3, #32
 800b2dc:	6023      	strmi	r3, [r4, #0]
 800b2de:	b91e      	cbnz	r6, 800b2e8 <_printf_i+0x198>
 800b2e0:	6823      	ldr	r3, [r4, #0]
 800b2e2:	f023 0320 	bic.w	r3, r3, #32
 800b2e6:	6023      	str	r3, [r4, #0]
 800b2e8:	2310      	movs	r3, #16
 800b2ea:	e7af      	b.n	800b24c <_printf_i+0xfc>
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	f043 0320 	orr.w	r3, r3, #32
 800b2f2:	6023      	str	r3, [r4, #0]
 800b2f4:	2378      	movs	r3, #120	; 0x78
 800b2f6:	4828      	ldr	r0, [pc, #160]	; (800b398 <_printf_i+0x248>)
 800b2f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2fc:	e7e3      	b.n	800b2c6 <_printf_i+0x176>
 800b2fe:	0659      	lsls	r1, r3, #25
 800b300:	bf48      	it	mi
 800b302:	b2b6      	uxthmi	r6, r6
 800b304:	e7e6      	b.n	800b2d4 <_printf_i+0x184>
 800b306:	4615      	mov	r5, r2
 800b308:	e7bb      	b.n	800b282 <_printf_i+0x132>
 800b30a:	682b      	ldr	r3, [r5, #0]
 800b30c:	6826      	ldr	r6, [r4, #0]
 800b30e:	1d18      	adds	r0, r3, #4
 800b310:	6961      	ldr	r1, [r4, #20]
 800b312:	6028      	str	r0, [r5, #0]
 800b314:	0635      	lsls	r5, r6, #24
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	d501      	bpl.n	800b31e <_printf_i+0x1ce>
 800b31a:	6019      	str	r1, [r3, #0]
 800b31c:	e002      	b.n	800b324 <_printf_i+0x1d4>
 800b31e:	0670      	lsls	r0, r6, #25
 800b320:	d5fb      	bpl.n	800b31a <_printf_i+0x1ca>
 800b322:	8019      	strh	r1, [r3, #0]
 800b324:	2300      	movs	r3, #0
 800b326:	4615      	mov	r5, r2
 800b328:	6123      	str	r3, [r4, #16]
 800b32a:	e7ba      	b.n	800b2a2 <_printf_i+0x152>
 800b32c:	682b      	ldr	r3, [r5, #0]
 800b32e:	2100      	movs	r1, #0
 800b330:	1d1a      	adds	r2, r3, #4
 800b332:	602a      	str	r2, [r5, #0]
 800b334:	681d      	ldr	r5, [r3, #0]
 800b336:	6862      	ldr	r2, [r4, #4]
 800b338:	4628      	mov	r0, r5
 800b33a:	f7ff fb29 	bl	800a990 <memchr>
 800b33e:	b108      	cbz	r0, 800b344 <_printf_i+0x1f4>
 800b340:	1b40      	subs	r0, r0, r5
 800b342:	6060      	str	r0, [r4, #4]
 800b344:	6863      	ldr	r3, [r4, #4]
 800b346:	6123      	str	r3, [r4, #16]
 800b348:	2300      	movs	r3, #0
 800b34a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b34e:	e7a8      	b.n	800b2a2 <_printf_i+0x152>
 800b350:	462a      	mov	r2, r5
 800b352:	4649      	mov	r1, r9
 800b354:	4640      	mov	r0, r8
 800b356:	6923      	ldr	r3, [r4, #16]
 800b358:	47d0      	blx	sl
 800b35a:	3001      	adds	r0, #1
 800b35c:	d0ab      	beq.n	800b2b6 <_printf_i+0x166>
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	079b      	lsls	r3, r3, #30
 800b362:	d413      	bmi.n	800b38c <_printf_i+0x23c>
 800b364:	68e0      	ldr	r0, [r4, #12]
 800b366:	9b03      	ldr	r3, [sp, #12]
 800b368:	4298      	cmp	r0, r3
 800b36a:	bfb8      	it	lt
 800b36c:	4618      	movlt	r0, r3
 800b36e:	e7a4      	b.n	800b2ba <_printf_i+0x16a>
 800b370:	2301      	movs	r3, #1
 800b372:	4632      	mov	r2, r6
 800b374:	4649      	mov	r1, r9
 800b376:	4640      	mov	r0, r8
 800b378:	47d0      	blx	sl
 800b37a:	3001      	adds	r0, #1
 800b37c:	d09b      	beq.n	800b2b6 <_printf_i+0x166>
 800b37e:	3501      	adds	r5, #1
 800b380:	68e3      	ldr	r3, [r4, #12]
 800b382:	9903      	ldr	r1, [sp, #12]
 800b384:	1a5b      	subs	r3, r3, r1
 800b386:	42ab      	cmp	r3, r5
 800b388:	dcf2      	bgt.n	800b370 <_printf_i+0x220>
 800b38a:	e7eb      	b.n	800b364 <_printf_i+0x214>
 800b38c:	2500      	movs	r5, #0
 800b38e:	f104 0619 	add.w	r6, r4, #25
 800b392:	e7f5      	b.n	800b380 <_printf_i+0x230>
 800b394:	0800b7d9 	.word	0x0800b7d9
 800b398:	0800b7ea 	.word	0x0800b7ea

0800b39c <_realloc_r>:
 800b39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a0:	4680      	mov	r8, r0
 800b3a2:	4614      	mov	r4, r2
 800b3a4:	460e      	mov	r6, r1
 800b3a6:	b921      	cbnz	r1, 800b3b2 <_realloc_r+0x16>
 800b3a8:	4611      	mov	r1, r2
 800b3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ae:	f7ff bba5 	b.w	800aafc <_malloc_r>
 800b3b2:	b92a      	cbnz	r2, 800b3c0 <_realloc_r+0x24>
 800b3b4:	f7ff fb3a 	bl	800aa2c <_free_r>
 800b3b8:	4625      	mov	r5, r4
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c0:	f000 f81b 	bl	800b3fa <_malloc_usable_size_r>
 800b3c4:	4284      	cmp	r4, r0
 800b3c6:	4607      	mov	r7, r0
 800b3c8:	d802      	bhi.n	800b3d0 <_realloc_r+0x34>
 800b3ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b3ce:	d812      	bhi.n	800b3f6 <_realloc_r+0x5a>
 800b3d0:	4621      	mov	r1, r4
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	f7ff fb92 	bl	800aafc <_malloc_r>
 800b3d8:	4605      	mov	r5, r0
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d0ed      	beq.n	800b3ba <_realloc_r+0x1e>
 800b3de:	42bc      	cmp	r4, r7
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	bf28      	it	cs
 800b3e6:	463a      	movcs	r2, r7
 800b3e8:	f7ff faf0 	bl	800a9cc <memcpy>
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4640      	mov	r0, r8
 800b3f0:	f7ff fb1c 	bl	800aa2c <_free_r>
 800b3f4:	e7e1      	b.n	800b3ba <_realloc_r+0x1e>
 800b3f6:	4635      	mov	r5, r6
 800b3f8:	e7df      	b.n	800b3ba <_realloc_r+0x1e>

0800b3fa <_malloc_usable_size_r>:
 800b3fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3fe:	1f18      	subs	r0, r3, #4
 800b400:	2b00      	cmp	r3, #0
 800b402:	bfbc      	itt	lt
 800b404:	580b      	ldrlt	r3, [r1, r0]
 800b406:	18c0      	addlt	r0, r0, r3
 800b408:	4770      	bx	lr
	...

0800b40c <_init>:
 800b40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40e:	bf00      	nop
 800b410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b412:	bc08      	pop	{r3}
 800b414:	469e      	mov	lr, r3
 800b416:	4770      	bx	lr

0800b418 <_fini>:
 800b418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41a:	bf00      	nop
 800b41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b41e:	bc08      	pop	{r3}
 800b420:	469e      	mov	lr, r3
 800b422:	4770      	bx	lr
