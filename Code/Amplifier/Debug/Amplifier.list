
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08008c9c  08008c9c  00018c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000060  08008f98  08008f98  00018f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000108  08008ff8  08008ff8  00018ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009100  08009100  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009100  08009100  00019100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009108  08009108  00019108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800910c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000078  08009184  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08009184  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045795  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007f0c  00000000  00000000  00065836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001870  00000000  00000000  0006d748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d0  00000000  00000000  0006efb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a9f  00000000  00000000  00070688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002461c  00000000  00000000  00095127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1020  00000000  00000000  000b9743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a763  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084c8  00000000  00000000  0016a7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	08008c84 	.word	0x08008c84

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	08008c84 	.word	0x08008c84

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <selfrel_offset31>:
 8000234:	6803      	ldr	r3, [r0, #0]
 8000236:	005a      	lsls	r2, r3, #1
 8000238:	bf4c      	ite	mi
 800023a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800023e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000242:	4418      	add	r0, r3
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop

08000248 <search_EIT_table>:
 8000248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800024c:	b339      	cbz	r1, 800029e <search_EIT_table+0x56>
 800024e:	1e4f      	subs	r7, r1, #1
 8000250:	4604      	mov	r4, r0
 8000252:	4615      	mov	r5, r2
 8000254:	463e      	mov	r6, r7
 8000256:	f04f 0800 	mov.w	r8, #0
 800025a:	eb08 0106 	add.w	r1, r8, r6
 800025e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000262:	1049      	asrs	r1, r1, #1
 8000264:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000268:	4648      	mov	r0, r9
 800026a:	f7ff ffe3 	bl	8000234 <selfrel_offset31>
 800026e:	4603      	mov	r3, r0
 8000270:	00c8      	lsls	r0, r1, #3
 8000272:	3008      	adds	r0, #8
 8000274:	428f      	cmp	r7, r1
 8000276:	4420      	add	r0, r4
 8000278:	d00b      	beq.n	8000292 <search_EIT_table+0x4a>
 800027a:	42ab      	cmp	r3, r5
 800027c:	d80b      	bhi.n	8000296 <search_EIT_table+0x4e>
 800027e:	f7ff ffd9 	bl	8000234 <selfrel_offset31>
 8000282:	3801      	subs	r0, #1
 8000284:	42a8      	cmp	r0, r5
 8000286:	f101 0801 	add.w	r8, r1, #1
 800028a:	d3e6      	bcc.n	800025a <search_EIT_table+0x12>
 800028c:	4648      	mov	r0, r9
 800028e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000292:	42ab      	cmp	r3, r5
 8000294:	d9fa      	bls.n	800028c <search_EIT_table+0x44>
 8000296:	4588      	cmp	r8, r1
 8000298:	d001      	beq.n	800029e <search_EIT_table+0x56>
 800029a:	1e4e      	subs	r6, r1, #1
 800029c:	e7dd      	b.n	800025a <search_EIT_table+0x12>
 800029e:	f04f 0900 	mov.w	r9, #0
 80002a2:	4648      	mov	r0, r9
 80002a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080002a8 <__gnu_unwind_get_pr_addr>:
 80002a8:	2801      	cmp	r0, #1
 80002aa:	d007      	beq.n	80002bc <__gnu_unwind_get_pr_addr+0x14>
 80002ac:	2802      	cmp	r0, #2
 80002ae:	d007      	beq.n	80002c0 <__gnu_unwind_get_pr_addr+0x18>
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <__gnu_unwind_get_pr_addr+0x1c>)
 80002b2:	2800      	cmp	r0, #0
 80002b4:	bf0c      	ite	eq
 80002b6:	4618      	moveq	r0, r3
 80002b8:	2000      	movne	r0, #0
 80002ba:	4770      	bx	lr
 80002bc:	4802      	ldr	r0, [pc, #8]	; (80002c8 <__gnu_unwind_get_pr_addr+0x20>)
 80002be:	4770      	bx	lr
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <__gnu_unwind_get_pr_addr+0x24>)
 80002c2:	4770      	bx	lr
 80002c4:	08000999 	.word	0x08000999
 80002c8:	0800099d 	.word	0x0800099d
 80002cc:	080009a1 	.word	0x080009a1

080002d0 <get_eit_entry>:
 80002d0:	b530      	push	{r4, r5, lr}
 80002d2:	4b24      	ldr	r3, [pc, #144]	; (8000364 <get_eit_entry+0x94>)
 80002d4:	4604      	mov	r4, r0
 80002d6:	b083      	sub	sp, #12
 80002d8:	1e8d      	subs	r5, r1, #2
 80002da:	b33b      	cbz	r3, 800032c <get_eit_entry+0x5c>
 80002dc:	4628      	mov	r0, r5
 80002de:	a901      	add	r1, sp, #4
 80002e0:	f3af 8000 	nop.w
 80002e4:	b1e8      	cbz	r0, 8000322 <get_eit_entry+0x52>
 80002e6:	9901      	ldr	r1, [sp, #4]
 80002e8:	462a      	mov	r2, r5
 80002ea:	f7ff ffad 	bl	8000248 <search_EIT_table>
 80002ee:	4601      	mov	r1, r0
 80002f0:	b1b8      	cbz	r0, 8000322 <get_eit_entry+0x52>
 80002f2:	f7ff ff9f 	bl	8000234 <selfrel_offset31>
 80002f6:	684b      	ldr	r3, [r1, #4]
 80002f8:	64a0      	str	r0, [r4, #72]	; 0x48
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d02e      	beq.n	800035c <get_eit_entry+0x8c>
 80002fe:	2b00      	cmp	r3, #0
 8000300:	db27      	blt.n	8000352 <get_eit_entry+0x82>
 8000302:	1d08      	adds	r0, r1, #4
 8000304:	f7ff ff96 	bl	8000234 <selfrel_offset31>
 8000308:	2300      	movs	r3, #0
 800030a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800030e:	6803      	ldr	r3, [r0, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	db12      	blt.n	800033a <get_eit_entry+0x6a>
 8000314:	f7ff ff8e 	bl	8000234 <selfrel_offset31>
 8000318:	4603      	mov	r3, r0
 800031a:	2000      	movs	r0, #0
 800031c:	6123      	str	r3, [r4, #16]
 800031e:	b003      	add	sp, #12
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	2300      	movs	r3, #0
 8000324:	2009      	movs	r0, #9
 8000326:	6123      	str	r3, [r4, #16]
 8000328:	b003      	add	sp, #12
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <get_eit_entry+0x98>)
 800032e:	490f      	ldr	r1, [pc, #60]	; (800036c <get_eit_entry+0x9c>)
 8000330:	4618      	mov	r0, r3
 8000332:	1ac9      	subs	r1, r1, r3
 8000334:	10c9      	asrs	r1, r1, #3
 8000336:	9101      	str	r1, [sp, #4]
 8000338:	e7d6      	b.n	80002e8 <get_eit_entry+0x18>
 800033a:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800033e:	f7ff ffb3 	bl	80002a8 <__gnu_unwind_get_pr_addr>
 8000342:	2800      	cmp	r0, #0
 8000344:	4603      	mov	r3, r0
 8000346:	bf14      	ite	ne
 8000348:	2000      	movne	r0, #0
 800034a:	2009      	moveq	r0, #9
 800034c:	6123      	str	r3, [r4, #16]
 800034e:	b003      	add	sp, #12
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	2301      	movs	r3, #1
 8000354:	1d08      	adds	r0, r1, #4
 8000356:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800035a:	e7d8      	b.n	800030e <get_eit_entry+0x3e>
 800035c:	2300      	movs	r3, #0
 800035e:	2005      	movs	r0, #5
 8000360:	6123      	str	r3, [r4, #16]
 8000362:	e7dc      	b.n	800031e <get_eit_entry+0x4e>
 8000364:	00000000 	.word	0x00000000
 8000368:	08008ff8 	.word	0x08008ff8
 800036c:	08009100 	.word	0x08009100

08000370 <restore_non_core_regs>:
 8000370:	6803      	ldr	r3, [r0, #0]
 8000372:	b510      	push	{r4, lr}
 8000374:	07da      	lsls	r2, r3, #31
 8000376:	4604      	mov	r4, r0
 8000378:	d406      	bmi.n	8000388 <restore_non_core_regs+0x18>
 800037a:	079b      	lsls	r3, r3, #30
 800037c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000380:	d509      	bpl.n	8000396 <restore_non_core_regs+0x26>
 8000382:	f000 fc5d 	bl	8000c40 <__gnu_Unwind_Restore_VFP_D>
 8000386:	6823      	ldr	r3, [r4, #0]
 8000388:	0759      	lsls	r1, r3, #29
 800038a:	d509      	bpl.n	80003a0 <restore_non_core_regs+0x30>
 800038c:	071a      	lsls	r2, r3, #28
 800038e:	d50e      	bpl.n	80003ae <restore_non_core_regs+0x3e>
 8000390:	06db      	lsls	r3, r3, #27
 8000392:	d513      	bpl.n	80003bc <restore_non_core_regs+0x4c>
 8000394:	bd10      	pop	{r4, pc}
 8000396:	f000 fc4b 	bl	8000c30 <__gnu_Unwind_Restore_VFP>
 800039a:	6823      	ldr	r3, [r4, #0]
 800039c:	0759      	lsls	r1, r3, #29
 800039e:	d4f5      	bmi.n	800038c <restore_non_core_regs+0x1c>
 80003a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80003a4:	f000 fc54 	bl	8000c50 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80003a8:	6823      	ldr	r3, [r4, #0]
 80003aa:	071a      	lsls	r2, r3, #28
 80003ac:	d4f0      	bmi.n	8000390 <restore_non_core_regs+0x20>
 80003ae:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80003b2:	f000 fc55 	bl	8000c60 <__gnu_Unwind_Restore_WMMXD>
 80003b6:	6823      	ldr	r3, [r4, #0]
 80003b8:	06db      	lsls	r3, r3, #27
 80003ba:	d4eb      	bmi.n	8000394 <restore_non_core_regs+0x24>
 80003bc:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80003c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003c4:	f000 bc90 	b.w	8000ce8 <__gnu_Unwind_Restore_WMMXC>

080003c8 <__gnu_unwind_24bit.constprop.0>:
 80003c8:	2009      	movs	r0, #9
 80003ca:	4770      	bx	lr

080003cc <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80003cc:	4603      	mov	r3, r0
 80003ce:	6800      	ldr	r0, [r0, #0]
 80003d0:	b100      	cbz	r0, 80003d4 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80003d2:	4418      	add	r0, r3
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop

080003d8 <_Unwind_DebugHook>:
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop

080003dc <unwind_phase2>:
 80003dc:	b570      	push	{r4, r5, r6, lr}
 80003de:	4604      	mov	r4, r0
 80003e0:	460e      	mov	r6, r1
 80003e2:	4620      	mov	r0, r4
 80003e4:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80003e6:	f7ff ff73 	bl	80002d0 <get_eit_entry>
 80003ea:	4605      	mov	r5, r0
 80003ec:	b998      	cbnz	r0, 8000416 <unwind_phase2+0x3a>
 80003ee:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 80003f2:	4632      	mov	r2, r6
 80003f4:	4621      	mov	r1, r4
 80003f6:	2001      	movs	r0, #1
 80003f8:	6923      	ldr	r3, [r4, #16]
 80003fa:	f8c4 c014 	str.w	ip, [r4, #20]
 80003fe:	4798      	blx	r3
 8000400:	2808      	cmp	r0, #8
 8000402:	d0ee      	beq.n	80003e2 <unwind_phase2+0x6>
 8000404:	2807      	cmp	r0, #7
 8000406:	d106      	bne.n	8000416 <unwind_phase2+0x3a>
 8000408:	4628      	mov	r0, r5
 800040a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800040c:	f7ff ffe4 	bl	80003d8 <_Unwind_DebugHook>
 8000410:	1d30      	adds	r0, r6, #4
 8000412:	f000 fc01 	bl	8000c18 <__restore_core_regs>
 8000416:	f007 ff10 	bl	800823a <abort>
 800041a:	bf00      	nop

0800041c <unwind_phase2_forced>:
 800041c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000420:	f04f 0a00 	mov.w	sl, #0
 8000424:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000428:	f10d 0e0c 	add.w	lr, sp, #12
 800042c:	f101 0c04 	add.w	ip, r1, #4
 8000430:	68c7      	ldr	r7, [r0, #12]
 8000432:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000436:	4606      	mov	r6, r0
 8000438:	4614      	mov	r4, r2
 800043a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800043e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000442:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000446:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800044a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800044e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000452:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000456:	ad02      	add	r5, sp, #8
 8000458:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800045c:	f8c5 a000 	str.w	sl, [r5]
 8000460:	e021      	b.n	80004a6 <unwind_phase2_forced+0x8a>
 8000462:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000464:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000468:	4629      	mov	r1, r5
 800046a:	6173      	str	r3, [r6, #20]
 800046c:	a87a      	add	r0, sp, #488	; 0x1e8
 800046e:	f007 ff51 	bl	8008314 <memcpy>
 8000472:	4631      	mov	r1, r6
 8000474:	4650      	mov	r0, sl
 8000476:	6933      	ldr	r3, [r6, #16]
 8000478:	aa7a      	add	r2, sp, #488	; 0x1e8
 800047a:	4798      	blx	r3
 800047c:	9c88      	ldr	r4, [sp, #544]	; 0x220
 800047e:	4682      	mov	sl, r0
 8000480:	646c      	str	r4, [r5, #68]	; 0x44
 8000482:	4633      	mov	r3, r6
 8000484:	4632      	mov	r2, r6
 8000486:	4649      	mov	r1, r9
 8000488:	2001      	movs	r0, #1
 800048a:	e9cd 5800 	strd	r5, r8, [sp]
 800048e:	47b8      	blx	r7
 8000490:	4604      	mov	r4, r0
 8000492:	b9f0      	cbnz	r0, 80004d2 <unwind_phase2_forced+0xb6>
 8000494:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000498:	4628      	mov	r0, r5
 800049a:	a97a      	add	r1, sp, #488	; 0x1e8
 800049c:	f007 ff3a 	bl	8008314 <memcpy>
 80004a0:	f1ba 0f08 	cmp.w	sl, #8
 80004a4:	d11b      	bne.n	80004de <unwind_phase2_forced+0xc2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004aa:	f7ff ff11 	bl	80002d0 <get_eit_entry>
 80004ae:	f104 0909 	add.w	r9, r4, #9
 80004b2:	fa5f fa89 	uxtb.w	sl, r9
 80004b6:	4604      	mov	r4, r0
 80004b8:	2800      	cmp	r0, #0
 80004ba:	d0d2      	beq.n	8000462 <unwind_phase2_forced+0x46>
 80004bc:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80004be:	4633      	mov	r3, r6
 80004c0:	6469      	str	r1, [r5, #68]	; 0x44
 80004c2:	4632      	mov	r2, r6
 80004c4:	2001      	movs	r0, #1
 80004c6:	e9cd 5800 	strd	r5, r8, [sp]
 80004ca:	f04a 0110 	orr.w	r1, sl, #16
 80004ce:	47b8      	blx	r7
 80004d0:	b100      	cbz	r0, 80004d4 <unwind_phase2_forced+0xb8>
 80004d2:	2409      	movs	r4, #9
 80004d4:	4620      	mov	r0, r4
 80004d6:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	f1ba 0f07 	cmp.w	sl, #7
 80004e2:	d1f6      	bne.n	80004d2 <unwind_phase2_forced+0xb6>
 80004e4:	4620      	mov	r0, r4
 80004e6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004e8:	f7ff ff76 	bl	80003d8 <_Unwind_DebugHook>
 80004ec:	a803      	add	r0, sp, #12
 80004ee:	f000 fb93 	bl	8000c18 <__restore_core_regs>
 80004f2:	bf00      	nop

080004f4 <_Unwind_GetCFA>:
 80004f4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80004f6:	4770      	bx	lr

080004f8 <__gnu_Unwind_RaiseException>:
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80004fe:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000500:	b0f9      	sub	sp, #484	; 0x1e4
 8000502:	640b      	str	r3, [r1, #64]	; 0x40
 8000504:	ac01      	add	r4, sp, #4
 8000506:	f101 0c04 	add.w	ip, r1, #4
 800050a:	460e      	mov	r6, r1
 800050c:	4605      	mov	r5, r0
 800050e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000514:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800051a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000524:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000528:	9700      	str	r7, [sp, #0]
 800052a:	e006      	b.n	800053a <__gnu_Unwind_RaiseException+0x42>
 800052c:	466a      	mov	r2, sp
 800052e:	4629      	mov	r1, r5
 8000530:	692b      	ldr	r3, [r5, #16]
 8000532:	4798      	blx	r3
 8000534:	2808      	cmp	r0, #8
 8000536:	4604      	mov	r4, r0
 8000538:	d108      	bne.n	800054c <__gnu_Unwind_RaiseException+0x54>
 800053a:	4628      	mov	r0, r5
 800053c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800053e:	f7ff fec7 	bl	80002d0 <get_eit_entry>
 8000542:	2800      	cmp	r0, #0
 8000544:	d0f2      	beq.n	800052c <__gnu_Unwind_RaiseException+0x34>
 8000546:	2009      	movs	r0, #9
 8000548:	b079      	add	sp, #484	; 0x1e4
 800054a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800054c:	4668      	mov	r0, sp
 800054e:	f7ff ff0f 	bl	8000370 <restore_non_core_regs>
 8000552:	2c06      	cmp	r4, #6
 8000554:	d1f7      	bne.n	8000546 <__gnu_Unwind_RaiseException+0x4e>
 8000556:	4631      	mov	r1, r6
 8000558:	4628      	mov	r0, r5
 800055a:	f7ff ff3f 	bl	80003dc <unwind_phase2>
 800055e:	bf00      	nop

08000560 <__gnu_Unwind_ForcedUnwind>:
 8000560:	b410      	push	{r4}
 8000562:	4614      	mov	r4, r2
 8000564:	6184      	str	r4, [r0, #24]
 8000566:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000568:	60c1      	str	r1, [r0, #12]
 800056a:	2200      	movs	r2, #0
 800056c:	641c      	str	r4, [r3, #64]	; 0x40
 800056e:	4619      	mov	r1, r3
 8000570:	bc10      	pop	{r4}
 8000572:	e753      	b.n	800041c <unwind_phase2_forced>

08000574 <__gnu_Unwind_Resume>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	6943      	ldr	r3, [r0, #20]
 8000578:	68c6      	ldr	r6, [r0, #12]
 800057a:	640b      	str	r3, [r1, #64]	; 0x40
 800057c:	b9ae      	cbnz	r6, 80005aa <__gnu_Unwind_Resume+0x36>
 800057e:	460a      	mov	r2, r1
 8000580:	6903      	ldr	r3, [r0, #16]
 8000582:	4604      	mov	r4, r0
 8000584:	460d      	mov	r5, r1
 8000586:	4601      	mov	r1, r0
 8000588:	2002      	movs	r0, #2
 800058a:	4798      	blx	r3
 800058c:	2807      	cmp	r0, #7
 800058e:	d005      	beq.n	800059c <__gnu_Unwind_Resume+0x28>
 8000590:	2808      	cmp	r0, #8
 8000592:	d10f      	bne.n	80005b4 <__gnu_Unwind_Resume+0x40>
 8000594:	4629      	mov	r1, r5
 8000596:	4620      	mov	r0, r4
 8000598:	f7ff ff20 	bl	80003dc <unwind_phase2>
 800059c:	4630      	mov	r0, r6
 800059e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80005a0:	f7ff ff1a 	bl	80003d8 <_Unwind_DebugHook>
 80005a4:	1d28      	adds	r0, r5, #4
 80005a6:	f000 fb37 	bl	8000c18 <__restore_core_regs>
 80005aa:	2201      	movs	r2, #1
 80005ac:	f7ff ff36 	bl	800041c <unwind_phase2_forced>
 80005b0:	f007 fe43 	bl	800823a <abort>
 80005b4:	f007 fe41 	bl	800823a <abort>

080005b8 <__gnu_Unwind_Resume_or_Rethrow>:
 80005b8:	68c2      	ldr	r2, [r0, #12]
 80005ba:	b12a      	cbz	r2, 80005c8 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80005bc:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 80005c0:	2200      	movs	r2, #0
 80005c2:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 80005c6:	e729      	b.n	800041c <unwind_phase2_forced>
 80005c8:	e796      	b.n	80004f8 <__gnu_Unwind_RaiseException>
 80005ca:	bf00      	nop

080005cc <_Unwind_Complete>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_Unwind_DeleteException>:
 80005d0:	6883      	ldr	r3, [r0, #8]
 80005d2:	4601      	mov	r1, r0
 80005d4:	b10b      	cbz	r3, 80005da <_Unwind_DeleteException+0xa>
 80005d6:	2001      	movs	r0, #1
 80005d8:	4718      	bx	r3
 80005da:	4770      	bx	lr

080005dc <_Unwind_VRS_Get>:
 80005dc:	2901      	cmp	r1, #1
 80005de:	d012      	beq.n	8000606 <_Unwind_VRS_Get+0x2a>
 80005e0:	d809      	bhi.n	80005f6 <_Unwind_VRS_Get+0x1a>
 80005e2:	b973      	cbnz	r3, 8000602 <_Unwind_VRS_Get+0x26>
 80005e4:	2a0f      	cmp	r2, #15
 80005e6:	d80c      	bhi.n	8000602 <_Unwind_VRS_Get+0x26>
 80005e8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005ec:	6842      	ldr	r2, [r0, #4]
 80005ee:	4618      	mov	r0, r3
 80005f0:	9b00      	ldr	r3, [sp, #0]
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	4770      	bx	lr
 80005f6:	3903      	subs	r1, #3
 80005f8:	2901      	cmp	r1, #1
 80005fa:	bf94      	ite	ls
 80005fc:	2001      	movls	r0, #1
 80005fe:	2002      	movhi	r0, #2
 8000600:	4770      	bx	lr
 8000602:	2002      	movs	r0, #2
 8000604:	4770      	bx	lr
 8000606:	4608      	mov	r0, r1
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <_Unwind_GetGR>:
 800060c:	2300      	movs	r3, #0
 800060e:	b500      	push	{lr}
 8000610:	b085      	sub	sp, #20
 8000612:	460a      	mov	r2, r1
 8000614:	a903      	add	r1, sp, #12
 8000616:	9100      	str	r1, [sp, #0]
 8000618:	4619      	mov	r1, r3
 800061a:	f7ff ffdf 	bl	80005dc <_Unwind_VRS_Get>
 800061e:	9803      	ldr	r0, [sp, #12]
 8000620:	b005      	add	sp, #20
 8000622:	f85d fb04 	ldr.w	pc, [sp], #4
 8000626:	bf00      	nop

08000628 <_Unwind_VRS_Set>:
 8000628:	2901      	cmp	r1, #1
 800062a:	d012      	beq.n	8000652 <_Unwind_VRS_Set+0x2a>
 800062c:	d809      	bhi.n	8000642 <_Unwind_VRS_Set+0x1a>
 800062e:	b973      	cbnz	r3, 800064e <_Unwind_VRS_Set+0x26>
 8000630:	2a0f      	cmp	r2, #15
 8000632:	d80c      	bhi.n	800064e <_Unwind_VRS_Set+0x26>
 8000634:	9900      	ldr	r1, [sp, #0]
 8000636:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800063a:	6809      	ldr	r1, [r1, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	6051      	str	r1, [r2, #4]
 8000640:	4770      	bx	lr
 8000642:	3903      	subs	r1, #3
 8000644:	2901      	cmp	r1, #1
 8000646:	bf94      	ite	ls
 8000648:	2001      	movls	r0, #1
 800064a:	2002      	movhi	r0, #2
 800064c:	4770      	bx	lr
 800064e:	2002      	movs	r0, #2
 8000650:	4770      	bx	lr
 8000652:	4608      	mov	r0, r1
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <_Unwind_SetGR>:
 8000658:	2300      	movs	r3, #0
 800065a:	b510      	push	{r4, lr}
 800065c:	b084      	sub	sp, #16
 800065e:	ac03      	add	r4, sp, #12
 8000660:	9203      	str	r2, [sp, #12]
 8000662:	9400      	str	r4, [sp, #0]
 8000664:	460a      	mov	r2, r1
 8000666:	4619      	mov	r1, r3
 8000668:	f7ff ffde 	bl	8000628 <_Unwind_VRS_Set>
 800066c:	b004      	add	sp, #16
 800066e:	bd10      	pop	{r4, pc}

08000670 <__gnu_Unwind_Backtrace>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000676:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000678:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800067c:	6413      	str	r3, [r2, #64]	; 0x40
 800067e:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8000682:	f102 0c04 	add.w	ip, r2, #4
 8000686:	4605      	mov	r5, r0
 8000688:	460c      	mov	r4, r1
 800068a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800068e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000692:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000696:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800069a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800069e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006a2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80006a6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80006aa:	9616      	str	r6, [sp, #88]	; 0x58
 80006ac:	e012      	b.n	80006d4 <__gnu_Unwind_Backtrace+0x64>
 80006ae:	210c      	movs	r1, #12
 80006b0:	a816      	add	r0, sp, #88	; 0x58
 80006b2:	466a      	mov	r2, sp
 80006b4:	f7ff ffd0 	bl	8000658 <_Unwind_SetGR>
 80006b8:	4621      	mov	r1, r4
 80006ba:	a816      	add	r0, sp, #88	; 0x58
 80006bc:	47a8      	blx	r5
 80006be:	b978      	cbnz	r0, 80006e0 <__gnu_Unwind_Backtrace+0x70>
 80006c0:	4669      	mov	r1, sp
 80006c2:	2008      	movs	r0, #8
 80006c4:	9b04      	ldr	r3, [sp, #16]
 80006c6:	aa16      	add	r2, sp, #88	; 0x58
 80006c8:	4798      	blx	r3
 80006ca:	2805      	cmp	r0, #5
 80006cc:	4606      	mov	r6, r0
 80006ce:	d008      	beq.n	80006e2 <__gnu_Unwind_Backtrace+0x72>
 80006d0:	2809      	cmp	r0, #9
 80006d2:	d005      	beq.n	80006e0 <__gnu_Unwind_Backtrace+0x70>
 80006d4:	4668      	mov	r0, sp
 80006d6:	9926      	ldr	r1, [sp, #152]	; 0x98
 80006d8:	f7ff fdfa 	bl	80002d0 <get_eit_entry>
 80006dc:	2800      	cmp	r0, #0
 80006de:	d0e6      	beq.n	80006ae <__gnu_Unwind_Backtrace+0x3e>
 80006e0:	2609      	movs	r6, #9
 80006e2:	a816      	add	r0, sp, #88	; 0x58
 80006e4:	f7ff fe44 	bl	8000370 <restore_non_core_regs>
 80006e8:	4630      	mov	r0, r6
 80006ea:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80006ee:	bd70      	pop	{r4, r5, r6, pc}

080006f0 <__gnu_unwind_pr_common>:
 80006f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006f4:	461e      	mov	r6, r3
 80006f6:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80006f8:	b089      	sub	sp, #36	; 0x24
 80006fa:	f854 3b04 	ldr.w	r3, [r4], #4
 80006fe:	460d      	mov	r5, r1
 8000700:	4617      	mov	r7, r2
 8000702:	f000 0803 	and.w	r8, r0, #3
 8000706:	9406      	str	r4, [sp, #24]
 8000708:	2e00      	cmp	r6, #0
 800070a:	d079      	beq.n	8000800 <__gnu_unwind_pr_common+0x110>
 800070c:	2202      	movs	r2, #2
 800070e:	f88d 201c 	strb.w	r2, [sp, #28]
 8000712:	0c1a      	lsrs	r2, r3, #16
 8000714:	f88d 201d 	strb.w	r2, [sp, #29]
 8000718:	041b      	lsls	r3, r3, #16
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	9305      	str	r3, [sp, #20]
 800071e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000722:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000724:	f1b8 0f02 	cmp.w	r8, #2
 8000728:	bf08      	it	eq
 800072a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800072c:	f013 0301 	ands.w	r3, r3, #1
 8000730:	d00c      	beq.n	800074c <__gnu_unwind_pr_common+0x5c>
 8000732:	4638      	mov	r0, r7
 8000734:	a905      	add	r1, sp, #20
 8000736:	f000 fb71 	bl	8000e1c <__gnu_unwind_execute>
 800073a:	b918      	cbnz	r0, 8000744 <__gnu_unwind_pr_common+0x54>
 800073c:	2008      	movs	r0, #8
 800073e:	b009      	add	sp, #36	; 0x24
 8000740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000744:	2009      	movs	r0, #9
 8000746:	b009      	add	sp, #36	; 0x24
 8000748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800074c:	f8d4 a000 	ldr.w	sl, [r4]
 8000750:	f1ba 0f00 	cmp.w	sl, #0
 8000754:	d0ed      	beq.n	8000732 <__gnu_unwind_pr_common+0x42>
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	f000 0308 	and.w	r3, r0, #8
 800075c:	9302      	str	r3, [sp, #8]
 800075e:	2e02      	cmp	r6, #2
 8000760:	d04a      	beq.n	80007f8 <__gnu_unwind_pr_common+0x108>
 8000762:	f8b4 a000 	ldrh.w	sl, [r4]
 8000766:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 800076a:	3404      	adds	r4, #4
 800076c:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800076e:	210f      	movs	r1, #15
 8000770:	4638      	mov	r0, r7
 8000772:	f029 0b01 	bic.w	fp, r9, #1
 8000776:	4493      	add	fp, r2
 8000778:	f7ff ff48 	bl	800060c <_Unwind_GetGR>
 800077c:	4583      	cmp	fp, r0
 800077e:	d839      	bhi.n	80007f4 <__gnu_unwind_pr_common+0x104>
 8000780:	f02a 0201 	bic.w	r2, sl, #1
 8000784:	445a      	add	r2, fp
 8000786:	4282      	cmp	r2, r0
 8000788:	bf94      	ite	ls
 800078a:	2000      	movls	r0, #0
 800078c:	2001      	movhi	r0, #1
 800078e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	f00a 0a01 	and.w	sl, sl, #1
 800079a:	ea43 030a 	orr.w	r3, r3, sl
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d049      	beq.n	8000836 <__gnu_unwind_pr_common+0x146>
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d032      	beq.n	800080c <__gnu_unwind_pr_common+0x11c>
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1cc      	bne.n	8000744 <__gnu_unwind_pr_common+0x54>
 80007aa:	f1b8 0f00 	cmp.w	r8, #0
 80007ae:	d002      	beq.n	80007b6 <__gnu_unwind_pr_common+0xc6>
 80007b0:	2800      	cmp	r0, #0
 80007b2:	f040 80ce 	bne.w	8000952 <__gnu_unwind_pr_common+0x262>
 80007b6:	3404      	adds	r4, #4
 80007b8:	f8d4 a000 	ldr.w	sl, [r4]
 80007bc:	f1ba 0f00 	cmp.w	sl, #0
 80007c0:	d1cd      	bne.n	800075e <__gnu_unwind_pr_common+0x6e>
 80007c2:	4638      	mov	r0, r7
 80007c4:	a905      	add	r1, sp, #20
 80007c6:	f000 fb29 	bl	8000e1c <__gnu_unwind_execute>
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d1ba      	bne.n	8000744 <__gnu_unwind_pr_common+0x54>
 80007ce:	9b01      	ldr	r3, [sp, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0b3      	beq.n	800073c <__gnu_unwind_pr_common+0x4c>
 80007d4:	210f      	movs	r1, #15
 80007d6:	4638      	mov	r0, r7
 80007d8:	f7ff ff18 	bl	800060c <_Unwind_GetGR>
 80007dc:	210e      	movs	r1, #14
 80007de:	4602      	mov	r2, r0
 80007e0:	4638      	mov	r0, r7
 80007e2:	f7ff ff39 	bl	8000658 <_Unwind_SetGR>
 80007e6:	4638      	mov	r0, r7
 80007e8:	210f      	movs	r1, #15
 80007ea:	4a6a      	ldr	r2, [pc, #424]	; (8000994 <__gnu_unwind_pr_common+0x2a4>)
 80007ec:	f7ff ff34 	bl	8000658 <_Unwind_SetGR>
 80007f0:	2007      	movs	r0, #7
 80007f2:	e7a8      	b.n	8000746 <__gnu_unwind_pr_common+0x56>
 80007f4:	2000      	movs	r0, #0
 80007f6:	e7ca      	b.n	800078e <__gnu_unwind_pr_common+0x9e>
 80007f8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80007fc:	3408      	adds	r4, #8
 80007fe:	e7b5      	b.n	800076c <__gnu_unwind_pr_common+0x7c>
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	9305      	str	r3, [sp, #20]
 8000804:	2303      	movs	r3, #3
 8000806:	f8ad 301c 	strh.w	r3, [sp, #28]
 800080a:	e78a      	b.n	8000722 <__gnu_unwind_pr_common+0x32>
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000812:	f1b8 0f00 	cmp.w	r8, #0
 8000816:	d145      	bne.n	80008a4 <__gnu_unwind_pr_common+0x1b4>
 8000818:	b128      	cbz	r0, 8000826 <__gnu_unwind_pr_common+0x136>
 800081a:	9a02      	ldr	r2, [sp, #8]
 800081c:	2a00      	cmp	r2, #0
 800081e:	d05c      	beq.n	80008da <__gnu_unwind_pr_common+0x1ea>
 8000820:	f1bb 0f00 	cmp.w	fp, #0
 8000824:	d074      	beq.n	8000910 <__gnu_unwind_pr_common+0x220>
 8000826:	2b00      	cmp	r3, #0
 8000828:	da00      	bge.n	800082c <__gnu_unwind_pr_common+0x13c>
 800082a:	3404      	adds	r4, #4
 800082c:	f10b 0b01 	add.w	fp, fp, #1
 8000830:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000834:	e7c0      	b.n	80007b8 <__gnu_unwind_pr_common+0xc8>
 8000836:	f1b8 0f00 	cmp.w	r8, #0
 800083a:	d119      	bne.n	8000870 <__gnu_unwind_pr_common+0x180>
 800083c:	b1b0      	cbz	r0, 800086c <__gnu_unwind_pr_common+0x17c>
 800083e:	6863      	ldr	r3, [r4, #4]
 8000840:	6822      	ldr	r2, [r4, #0]
 8000842:	1c99      	adds	r1, r3, #2
 8000844:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000848:	f43f af7c 	beq.w	8000744 <__gnu_unwind_pr_common+0x54>
 800084c:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000850:	3301      	adds	r3, #1
 8000852:	9104      	str	r1, [sp, #16]
 8000854:	f000 8091 	beq.w	800097a <__gnu_unwind_pr_common+0x28a>
 8000858:	1d20      	adds	r0, r4, #4
 800085a:	f7ff fdb7 	bl	80003cc <_Unwind_decode_typeinfo_ptr.constprop.0>
 800085e:	ab04      	add	r3, sp, #16
 8000860:	4601      	mov	r1, r0
 8000862:	4628      	mov	r0, r5
 8000864:	f3af 8000 	nop.w
 8000868:	2800      	cmp	r0, #0
 800086a:	d15c      	bne.n	8000926 <__gnu_unwind_pr_common+0x236>
 800086c:	3408      	adds	r4, #8
 800086e:	e7a3      	b.n	80007b8 <__gnu_unwind_pr_common+0xc8>
 8000870:	210d      	movs	r1, #13
 8000872:	4638      	mov	r0, r7
 8000874:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000878:	f7ff fec8 	bl	800060c <_Unwind_GetGR>
 800087c:	4581      	cmp	r9, r0
 800087e:	d1f5      	bne.n	800086c <__gnu_unwind_pr_common+0x17c>
 8000880:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000882:	429c      	cmp	r4, r3
 8000884:	d1f2      	bne.n	800086c <__gnu_unwind_pr_common+0x17c>
 8000886:	4620      	mov	r0, r4
 8000888:	f7ff fcd4 	bl	8000234 <selfrel_offset31>
 800088c:	210f      	movs	r1, #15
 800088e:	4602      	mov	r2, r0
 8000890:	4638      	mov	r0, r7
 8000892:	f7ff fee1 	bl	8000658 <_Unwind_SetGR>
 8000896:	4638      	mov	r0, r7
 8000898:	462a      	mov	r2, r5
 800089a:	2100      	movs	r1, #0
 800089c:	f7ff fedc 	bl	8000658 <_Unwind_SetGR>
 80008a0:	2007      	movs	r0, #7
 80008a2:	e750      	b.n	8000746 <__gnu_unwind_pr_common+0x56>
 80008a4:	210d      	movs	r1, #13
 80008a6:	4638      	mov	r0, r7
 80008a8:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80008ac:	f7ff feae 	bl	800060c <_Unwind_GetGR>
 80008b0:	4581      	cmp	r9, r0
 80008b2:	d001      	beq.n	80008b8 <__gnu_unwind_pr_common+0x1c8>
 80008b4:	6823      	ldr	r3, [r4, #0]
 80008b6:	e7b6      	b.n	8000826 <__gnu_unwind_pr_common+0x136>
 80008b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008ba:	429c      	cmp	r4, r3
 80008bc:	d1fa      	bne.n	80008b4 <__gnu_unwind_pr_common+0x1c4>
 80008be:	2304      	movs	r3, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80008c6:	18e3      	adds	r3, r4, r3
 80008c8:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80008cc:	636b      	str	r3, [r5, #52]	; 0x34
 80008ce:	6823      	ldr	r3, [r4, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db5a      	blt.n	800098a <__gnu_unwind_pr_common+0x29a>
 80008d4:	2301      	movs	r3, #1
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	e7a8      	b.n	800082c <__gnu_unwind_pr_common+0x13c>
 80008da:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80008de:	f8cd 800c 	str.w	r8, [sp, #12]
 80008e2:	4691      	mov	r9, r2
 80008e4:	46b0      	mov	r8, r6
 80008e6:	f104 0a04 	add.w	sl, r4, #4
 80008ea:	461e      	mov	r6, r3
 80008ec:	e00e      	b.n	800090c <__gnu_unwind_pr_common+0x21c>
 80008ee:	4650      	mov	r0, sl
 80008f0:	9604      	str	r6, [sp, #16]
 80008f2:	f7ff fd6b 	bl	80003cc <_Unwind_decode_typeinfo_ptr.constprop.0>
 80008f6:	2200      	movs	r2, #0
 80008f8:	4601      	mov	r1, r0
 80008fa:	ab04      	add	r3, sp, #16
 80008fc:	4628      	mov	r0, r5
 80008fe:	f109 0901 	add.w	r9, r9, #1
 8000902:	f10a 0a04 	add.w	sl, sl, #4
 8000906:	f3af 8000 	nop.w
 800090a:	b9e8      	cbnz	r0, 8000948 <__gnu_unwind_pr_common+0x258>
 800090c:	45d9      	cmp	r9, fp
 800090e:	d1ee      	bne.n	80008ee <__gnu_unwind_pr_common+0x1fe>
 8000910:	210d      	movs	r1, #13
 8000912:	4638      	mov	r0, r7
 8000914:	f7ff fe7a 	bl	800060c <_Unwind_GetGR>
 8000918:	4603      	mov	r3, r0
 800091a:	9a04      	ldr	r2, [sp, #16]
 800091c:	2006      	movs	r0, #6
 800091e:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 8000922:	622b      	str	r3, [r5, #32]
 8000924:	e70f      	b.n	8000746 <__gnu_unwind_pr_common+0x56>
 8000926:	4681      	mov	r9, r0
 8000928:	210d      	movs	r1, #13
 800092a:	4638      	mov	r0, r7
 800092c:	f7ff fe6e 	bl	800060c <_Unwind_GetGR>
 8000930:	f1b9 0f02 	cmp.w	r9, #2
 8000934:	6228      	str	r0, [r5, #32]
 8000936:	d125      	bne.n	8000984 <__gnu_unwind_pr_common+0x294>
 8000938:	462b      	mov	r3, r5
 800093a:	9a04      	ldr	r2, [sp, #16]
 800093c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000940:	626b      	str	r3, [r5, #36]	; 0x24
 8000942:	2006      	movs	r0, #6
 8000944:	62ac      	str	r4, [r5, #40]	; 0x28
 8000946:	e6fe      	b.n	8000746 <__gnu_unwind_pr_common+0x56>
 8000948:	4646      	mov	r6, r8
 800094a:	6823      	ldr	r3, [r4, #0]
 800094c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000950:	e769      	b.n	8000826 <__gnu_unwind_pr_common+0x136>
 8000952:	4620      	mov	r0, r4
 8000954:	f7ff fc6e 	bl	8000234 <selfrel_offset31>
 8000958:	4602      	mov	r2, r0
 800095a:	3404      	adds	r4, #4
 800095c:	63ac      	str	r4, [r5, #56]	; 0x38
 800095e:	4628      	mov	r0, r5
 8000960:	4614      	mov	r4, r2
 8000962:	f3af 8000 	nop.w
 8000966:	2800      	cmp	r0, #0
 8000968:	f43f aeec 	beq.w	8000744 <__gnu_unwind_pr_common+0x54>
 800096c:	4638      	mov	r0, r7
 800096e:	4622      	mov	r2, r4
 8000970:	210f      	movs	r1, #15
 8000972:	f7ff fe71 	bl	8000658 <_Unwind_SetGR>
 8000976:	2007      	movs	r0, #7
 8000978:	e6e5      	b.n	8000746 <__gnu_unwind_pr_common+0x56>
 800097a:	210d      	movs	r1, #13
 800097c:	4638      	mov	r0, r7
 800097e:	f7ff fe45 	bl	800060c <_Unwind_GetGR>
 8000982:	6228      	str	r0, [r5, #32]
 8000984:	9b04      	ldr	r3, [sp, #16]
 8000986:	626b      	str	r3, [r5, #36]	; 0x24
 8000988:	e7db      	b.n	8000942 <__gnu_unwind_pr_common+0x252>
 800098a:	f10b 0001 	add.w	r0, fp, #1
 800098e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000992:	e779      	b.n	8000888 <__gnu_unwind_pr_common+0x198>
 8000994:	00000000 	.word	0x00000000

08000998 <__aeabi_unwind_cpp_pr0>:
 8000998:	2300      	movs	r3, #0
 800099a:	e6a9      	b.n	80006f0 <__gnu_unwind_pr_common>

0800099c <__aeabi_unwind_cpp_pr1>:
 800099c:	2301      	movs	r3, #1
 800099e:	e6a7      	b.n	80006f0 <__gnu_unwind_pr_common>

080009a0 <__aeabi_unwind_cpp_pr2>:
 80009a0:	2302      	movs	r3, #2
 80009a2:	e6a5      	b.n	80006f0 <__gnu_unwind_pr_common>

080009a4 <_Unwind_VRS_Pop>:
 80009a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009a8:	4606      	mov	r6, r0
 80009aa:	4615      	mov	r5, r2
 80009ac:	461c      	mov	r4, r3
 80009ae:	b0c3      	sub	sp, #268	; 0x10c
 80009b0:	2904      	cmp	r1, #4
 80009b2:	f200 80b8 	bhi.w	8000b26 <_Unwind_VRS_Pop+0x182>
 80009b6:	e8df f001 	tbb	[pc, r1]
 80009ba:	569c      	.short	0x569c
 80009bc:	2db6      	.short	0x2db6
 80009be:	03          	.byte	0x03
 80009bf:	00          	.byte	0x00
 80009c0:	2c00      	cmp	r4, #0
 80009c2:	f040 80b0 	bne.w	8000b26 <_Unwind_VRS_Pop+0x182>
 80009c6:	2a10      	cmp	r2, #16
 80009c8:	f200 80ad 	bhi.w	8000b26 <_Unwind_VRS_Pop+0x182>
 80009cc:	6803      	ldr	r3, [r0, #0]
 80009ce:	06d8      	lsls	r0, r3, #27
 80009d0:	f100 80f1 	bmi.w	8000bb6 <_Unwind_VRS_Pop+0x212>
 80009d4:	af20      	add	r7, sp, #128	; 0x80
 80009d6:	4638      	mov	r0, r7
 80009d8:	f000 f990 	bl	8000cfc <__gnu_Unwind_Save_WMMXC>
 80009dc:	2401      	movs	r4, #1
 80009de:	4638      	mov	r0, r7
 80009e0:	2300      	movs	r3, #0
 80009e2:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80009e4:	fa04 f203 	lsl.w	r2, r4, r3
 80009e8:	422a      	tst	r2, r5
 80009ea:	f103 0301 	add.w	r3, r3, #1
 80009ee:	d005      	beq.n	80009fc <_Unwind_VRS_Pop+0x58>
 80009f0:	460a      	mov	r2, r1
 80009f2:	f852 cb04 	ldr.w	ip, [r2], #4
 80009f6:	4611      	mov	r1, r2
 80009f8:	f8c0 c000 	str.w	ip, [r0]
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	f100 0004 	add.w	r0, r0, #4
 8000a02:	d1ef      	bne.n	80009e4 <_Unwind_VRS_Pop+0x40>
 8000a04:	4638      	mov	r0, r7
 8000a06:	63b1      	str	r1, [r6, #56]	; 0x38
 8000a08:	f000 f96e 	bl	8000ce8 <__gnu_Unwind_Restore_WMMXC>
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	b043      	add	sp, #268	; 0x10c
 8000a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a14:	2c03      	cmp	r4, #3
 8000a16:	f040 8086 	bne.w	8000b26 <_Unwind_VRS_Pop+0x182>
 8000a1a:	b294      	uxth	r4, r2
 8000a1c:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000a20:	2b10      	cmp	r3, #16
 8000a22:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000a26:	d87e      	bhi.n	8000b26 <_Unwind_VRS_Pop+0x182>
 8000a28:	6803      	ldr	r3, [r0, #0]
 8000a2a:	071f      	lsls	r7, r3, #28
 8000a2c:	f100 80cb 	bmi.w	8000bc6 <_Unwind_VRS_Pop+0x222>
 8000a30:	af20      	add	r7, sp, #128	; 0x80
 8000a32:	4638      	mov	r0, r7
 8000a34:	f000 f936 	bl	8000ca4 <__gnu_Unwind_Save_WMMXD>
 8000a38:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000a3a:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000a3e:	b154      	cbz	r4, 8000a56 <_Unwind_VRS_Pop+0xb2>
 8000a40:	460b      	mov	r3, r1
 8000a42:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000a46:	1ad0      	subs	r0, r2, r3
 8000a48:	00e4      	lsls	r4, r4, #3
 8000a4a:	581d      	ldr	r5, [r3, r0]
 8000a4c:	f843 5b04 	str.w	r5, [r3], #4
 8000a50:	428b      	cmp	r3, r1
 8000a52:	d1fa      	bne.n	8000a4a <_Unwind_VRS_Pop+0xa6>
 8000a54:	4422      	add	r2, r4
 8000a56:	4638      	mov	r0, r7
 8000a58:	63b2      	str	r2, [r6, #56]	; 0x38
 8000a5a:	f000 f901 	bl	8000c60 <__gnu_Unwind_Restore_WMMXD>
 8000a5e:	2000      	movs	r0, #0
 8000a60:	b043      	add	sp, #268	; 0x10c
 8000a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a66:	2c01      	cmp	r4, #1
 8000a68:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000a6c:	b295      	uxth	r5, r2
 8000a6e:	d056      	beq.n	8000b1e <_Unwind_VRS_Pop+0x17a>
 8000a70:	2c05      	cmp	r4, #5
 8000a72:	d158      	bne.n	8000b26 <_Unwind_VRS_Pop+0x182>
 8000a74:	eb08 0905 	add.w	r9, r8, r5
 8000a78:	f1b9 0f20 	cmp.w	r9, #32
 8000a7c:	d853      	bhi.n	8000b26 <_Unwind_VRS_Pop+0x182>
 8000a7e:	f1b8 0f0f 	cmp.w	r8, #15
 8000a82:	d973      	bls.n	8000b6c <_Unwind_VRS_Pop+0x1c8>
 8000a84:	46a9      	mov	r9, r5
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	f040 8084 	bne.w	8000b94 <_Unwind_VRS_Pop+0x1f0>
 8000a8c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a8e:	b365      	cbz	r5, 8000aea <_Unwind_VRS_Pop+0x146>
 8000a90:	af20      	add	r7, sp, #128	; 0x80
 8000a92:	f04f 0900 	mov.w	r9, #0
 8000a96:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000a9a:	3f04      	subs	r7, #4
 8000a9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000aa0:	f853 1b04 	ldr.w	r1, [r3], #4
 8000aa4:	42ab      	cmp	r3, r5
 8000aa6:	f847 1f04 	str.w	r1, [r7, #4]!
 8000aaa:	d1f9      	bne.n	8000aa0 <_Unwind_VRS_Pop+0xfc>
 8000aac:	f1b9 0f00 	cmp.w	r9, #0
 8000ab0:	d00f      	beq.n	8000ad2 <_Unwind_VRS_Pop+0x12e>
 8000ab2:	466f      	mov	r7, sp
 8000ab4:	4641      	mov	r1, r8
 8000ab6:	2910      	cmp	r1, #16
 8000ab8:	bf38      	it	cc
 8000aba:	2110      	movcc	r1, #16
 8000abc:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000ac0:	3984      	subs	r1, #132	; 0x84
 8000ac2:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000ac6:	f853 0b04 	ldr.w	r0, [r3], #4
 8000aca:	42ab      	cmp	r3, r5
 8000acc:	f841 0f04 	str.w	r0, [r1, #4]!
 8000ad0:	d1f9      	bne.n	8000ac6 <_Unwind_VRS_Pop+0x122>
 8000ad2:	2c01      	cmp	r4, #1
 8000ad4:	d07f      	beq.n	8000bd6 <_Unwind_VRS_Pop+0x232>
 8000ad6:	f1b8 0f0f 	cmp.w	r8, #15
 8000ada:	63b5      	str	r5, [r6, #56]	; 0x38
 8000adc:	d942      	bls.n	8000b64 <_Unwind_VRS_Pop+0x1c0>
 8000ade:	f1b9 0f00 	cmp.w	r9, #0
 8000ae2:	d002      	beq.n	8000aea <_Unwind_VRS_Pop+0x146>
 8000ae4:	4668      	mov	r0, sp
 8000ae6:	f000 f8b3 	bl	8000c50 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000aea:	2000      	movs	r0, #0
 8000aec:	b043      	add	sp, #268	; 0x10c
 8000aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000af2:	b9c4      	cbnz	r4, 8000b26 <_Unwind_VRS_Pop+0x182>
 8000af4:	4623      	mov	r3, r4
 8000af6:	2401      	movs	r4, #1
 8000af8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000afa:	1d37      	adds	r7, r6, #4
 8000afc:	b2a8      	uxth	r0, r5
 8000afe:	fa04 f103 	lsl.w	r1, r4, r3
 8000b02:	4201      	tst	r1, r0
 8000b04:	bf1c      	itt	ne
 8000b06:	f852 1b04 	ldrne.w	r1, [r2], #4
 8000b0a:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	2b10      	cmp	r3, #16
 8000b12:	d1f4      	bne.n	8000afe <_Unwind_VRS_Pop+0x15a>
 8000b14:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000b18:	d1e7      	bne.n	8000aea <_Unwind_VRS_Pop+0x146>
 8000b1a:	63b2      	str	r2, [r6, #56]	; 0x38
 8000b1c:	e004      	b.n	8000b28 <_Unwind_VRS_Pop+0x184>
 8000b1e:	eb08 0305 	add.w	r3, r8, r5
 8000b22:	2b10      	cmp	r3, #16
 8000b24:	d903      	bls.n	8000b2e <_Unwind_VRS_Pop+0x18a>
 8000b26:	2002      	movs	r0, #2
 8000b28:	b043      	add	sp, #268	; 0x10c
 8000b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b2e:	f1b8 0f0f 	cmp.w	r8, #15
 8000b32:	d8f8      	bhi.n	8000b26 <_Unwind_VRS_Pop+0x182>
 8000b34:	6833      	ldr	r3, [r6, #0]
 8000b36:	07da      	lsls	r2, r3, #31
 8000b38:	d506      	bpl.n	8000b48 <_Unwind_VRS_Pop+0x1a4>
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	f023 0303 	bic.w	r3, r3, #3
 8000b40:	f840 3b48 	str.w	r3, [r0], #72
 8000b44:	f000 f878 	bl	8000c38 <__gnu_Unwind_Save_VFP>
 8000b48:	af20      	add	r7, sp, #128	; 0x80
 8000b4a:	4638      	mov	r0, r7
 8000b4c:	f000 f874 	bl	8000c38 <__gnu_Unwind_Save_VFP>
 8000b50:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d19d      	bne.n	8000a92 <_Unwind_VRS_Pop+0xee>
 8000b56:	461d      	mov	r5, r3
 8000b58:	3504      	adds	r5, #4
 8000b5a:	4638      	mov	r0, r7
 8000b5c:	63b5      	str	r5, [r6, #56]	; 0x38
 8000b5e:	f000 f867 	bl	8000c30 <__gnu_Unwind_Restore_VFP>
 8000b62:	e7c2      	b.n	8000aea <_Unwind_VRS_Pop+0x146>
 8000b64:	a820      	add	r0, sp, #128	; 0x80
 8000b66:	f000 f86b 	bl	8000c40 <__gnu_Unwind_Restore_VFP_D>
 8000b6a:	e7b8      	b.n	8000ade <_Unwind_VRS_Pop+0x13a>
 8000b6c:	f1b9 0f10 	cmp.w	r9, #16
 8000b70:	d93f      	bls.n	8000bf2 <_Unwind_VRS_Pop+0x24e>
 8000b72:	f1a9 0910 	sub.w	r9, r9, #16
 8000b76:	6833      	ldr	r3, [r6, #0]
 8000b78:	07d9      	lsls	r1, r3, #31
 8000b7a:	d508      	bpl.n	8000b8e <_Unwind_VRS_Pop+0x1ea>
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	f023 0301 	bic.w	r3, r3, #1
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	f840 3b48 	str.w	r3, [r0], #72
 8000b8a:	f000 f85d 	bl	8000c48 <__gnu_Unwind_Save_VFP_D>
 8000b8e:	f1b9 0f00 	cmp.w	r9, #0
 8000b92:	d031      	beq.n	8000bf8 <_Unwind_VRS_Pop+0x254>
 8000b94:	6833      	ldr	r3, [r6, #0]
 8000b96:	075a      	lsls	r2, r3, #29
 8000b98:	d41f      	bmi.n	8000bda <_Unwind_VRS_Pop+0x236>
 8000b9a:	f1b8 0f0f 	cmp.w	r8, #15
 8000b9e:	d924      	bls.n	8000bea <_Unwind_VRS_Pop+0x246>
 8000ba0:	466f      	mov	r7, sp
 8000ba2:	f1c8 0510 	rsb	r5, r8, #16
 8000ba6:	4638      	mov	r0, r7
 8000ba8:	f000 f856 	bl	8000c58 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bac:	2d00      	cmp	r5, #0
 8000bae:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000bb0:	dd80      	ble.n	8000ab4 <_Unwind_VRS_Pop+0x110>
 8000bb2:	af20      	add	r7, sp, #128	; 0x80
 8000bb4:	e76f      	b.n	8000a96 <_Unwind_VRS_Pop+0xf2>
 8000bb6:	f023 0310 	bic.w	r3, r3, #16
 8000bba:	6033      	str	r3, [r6, #0]
 8000bbc:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000bc0:	f000 f89c 	bl	8000cfc <__gnu_Unwind_Save_WMMXC>
 8000bc4:	e706      	b.n	80009d4 <_Unwind_VRS_Pop+0x30>
 8000bc6:	f023 0308 	bic.w	r3, r3, #8
 8000bca:	6003      	str	r3, [r0, #0]
 8000bcc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000bd0:	f000 f868 	bl	8000ca4 <__gnu_Unwind_Save_WMMXD>
 8000bd4:	e72c      	b.n	8000a30 <_Unwind_VRS_Pop+0x8c>
 8000bd6:	af20      	add	r7, sp, #128	; 0x80
 8000bd8:	e7be      	b.n	8000b58 <_Unwind_VRS_Pop+0x1b4>
 8000bda:	4630      	mov	r0, r6
 8000bdc:	f023 0304 	bic.w	r3, r3, #4
 8000be0:	f840 3bd0 	str.w	r3, [r0], #208
 8000be4:	f000 f838 	bl	8000c58 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000be8:	e7d7      	b.n	8000b9a <_Unwind_VRS_Pop+0x1f6>
 8000bea:	a820      	add	r0, sp, #128	; 0x80
 8000bec:	f000 f82c 	bl	8000c48 <__gnu_Unwind_Save_VFP_D>
 8000bf0:	e7d6      	b.n	8000ba0 <_Unwind_VRS_Pop+0x1fc>
 8000bf2:	f04f 0900 	mov.w	r9, #0
 8000bf6:	e7be      	b.n	8000b76 <_Unwind_VRS_Pop+0x1d2>
 8000bf8:	f1b8 0f0f 	cmp.w	r8, #15
 8000bfc:	f63f af46 	bhi.w	8000a8c <_Unwind_VRS_Pop+0xe8>
 8000c00:	af20      	add	r7, sp, #128	; 0x80
 8000c02:	4638      	mov	r0, r7
 8000c04:	f000 f820 	bl	8000c48 <__gnu_Unwind_Save_VFP_D>
 8000c08:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	f47f af41 	bne.w	8000a92 <_Unwind_VRS_Pop+0xee>
 8000c10:	4638      	mov	r0, r7
 8000c12:	f000 f815 	bl	8000c40 <__gnu_Unwind_Restore_VFP_D>
 8000c16:	e768      	b.n	8000aea <_Unwind_VRS_Pop+0x146>

08000c18 <__restore_core_regs>:
 8000c18:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000c1c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000c20:	469c      	mov	ip, r3
 8000c22:	46a6      	mov	lr, r4
 8000c24:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000c28:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000c2c:	46e5      	mov	sp, ip
 8000c2e:	bd00      	pop	{pc}

08000c30 <__gnu_Unwind_Restore_VFP>:
 8000c30:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__gnu_Unwind_Save_VFP>:
 8000c38:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__gnu_Unwind_Restore_VFP_D>:
 8000c40:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__gnu_Unwind_Save_VFP_D>:
 8000c48:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000c50:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000c58:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <__gnu_Unwind_Restore_WMMXD>:
 8000c60:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c64:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c68:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c6c:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c70:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c74:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c78:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c7c:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c80:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c84:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c88:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c8c:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c90:	ecf0 c102 	ldfp	f4, [r0], #8
 8000c94:	ecf0 d102 	ldfp	f5, [r0], #8
 8000c98:	ecf0 e102 	ldfp	f6, [r0], #8
 8000c9c:	ecf0 f102 	ldfp	f7, [r0], #8
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <__gnu_Unwind_Save_WMMXD>:
 8000ca4:	ece0 0102 	stfe	f0, [r0], #8
 8000ca8:	ece0 1102 	stfe	f1, [r0], #8
 8000cac:	ece0 2102 	stfe	f2, [r0], #8
 8000cb0:	ece0 3102 	stfe	f3, [r0], #8
 8000cb4:	ece0 4102 	stfe	f4, [r0], #8
 8000cb8:	ece0 5102 	stfe	f5, [r0], #8
 8000cbc:	ece0 6102 	stfe	f6, [r0], #8
 8000cc0:	ece0 7102 	stfe	f7, [r0], #8
 8000cc4:	ece0 8102 	stfp	f0, [r0], #8
 8000cc8:	ece0 9102 	stfp	f1, [r0], #8
 8000ccc:	ece0 a102 	stfp	f2, [r0], #8
 8000cd0:	ece0 b102 	stfp	f3, [r0], #8
 8000cd4:	ece0 c102 	stfp	f4, [r0], #8
 8000cd8:	ece0 d102 	stfp	f5, [r0], #8
 8000cdc:	ece0 e102 	stfp	f6, [r0], #8
 8000ce0:	ece0 f102 	stfp	f7, [r0], #8
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__gnu_Unwind_Restore_WMMXC>:
 8000ce8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000cec:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000cf0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000cf4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <__gnu_Unwind_Save_WMMXC>:
 8000cfc:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000d00:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000d04:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000d08:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <_Unwind_RaiseException>:
 8000d10:	46ec      	mov	ip, sp
 8000d12:	b500      	push	{lr}
 8000d14:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d18:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d24:	a901      	add	r1, sp, #4
 8000d26:	f7ff fbe7 	bl	80004f8 <__gnu_Unwind_RaiseException>
 8000d2a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d2e:	b012      	add	sp, #72	; 0x48
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <_Unwind_Resume>:
 8000d34:	46ec      	mov	ip, sp
 8000d36:	b500      	push	{lr}
 8000d38:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d3c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d48:	a901      	add	r1, sp, #4
 8000d4a:	f7ff fc13 	bl	8000574 <__gnu_Unwind_Resume>
 8000d4e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d52:	b012      	add	sp, #72	; 0x48
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <_Unwind_Resume_or_Rethrow>:
 8000d58:	46ec      	mov	ip, sp
 8000d5a:	b500      	push	{lr}
 8000d5c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d60:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d6c:	a901      	add	r1, sp, #4
 8000d6e:	f7ff fc23 	bl	80005b8 <__gnu_Unwind_Resume_or_Rethrow>
 8000d72:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d76:	b012      	add	sp, #72	; 0x48
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <_Unwind_ForcedUnwind>:
 8000d7c:	46ec      	mov	ip, sp
 8000d7e:	b500      	push	{lr}
 8000d80:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d84:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d90:	ab01      	add	r3, sp, #4
 8000d92:	f7ff fbe5 	bl	8000560 <__gnu_Unwind_ForcedUnwind>
 8000d96:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d9a:	b012      	add	sp, #72	; 0x48
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <_Unwind_Backtrace>:
 8000da0:	46ec      	mov	ip, sp
 8000da2:	b500      	push	{lr}
 8000da4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000da8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000db4:	aa01      	add	r2, sp, #4
 8000db6:	f7ff fc5b 	bl	8000670 <__gnu_Unwind_Backtrace>
 8000dba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000dbe:	b012      	add	sp, #72	; 0x48
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <next_unwind_byte>:
 8000dc4:	7a02      	ldrb	r2, [r0, #8]
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	b97a      	cbnz	r2, 8000dea <next_unwind_byte+0x26>
 8000dca:	7a42      	ldrb	r2, [r0, #9]
 8000dcc:	b1a2      	cbz	r2, 8000df8 <next_unwind_byte+0x34>
 8000dce:	f04f 0c03 	mov.w	ip, #3
 8000dd2:	6841      	ldr	r1, [r0, #4]
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	7242      	strb	r2, [r0, #9]
 8000dd8:	6808      	ldr	r0, [r1, #0]
 8000dda:	1d0a      	adds	r2, r1, #4
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	0202      	lsls	r2, r0, #8
 8000de0:	f883 c008 	strb.w	ip, [r3, #8]
 8000de4:	0e00      	lsrs	r0, r0, #24
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	4770      	bx	lr
 8000dea:	6800      	ldr	r0, [r0, #0]
 8000dec:	3a01      	subs	r2, #1
 8000dee:	721a      	strb	r2, [r3, #8]
 8000df0:	0202      	lsls	r2, r0, #8
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	0e00      	lsrs	r0, r0, #24
 8000df6:	4770      	bx	lr
 8000df8:	20b0      	movs	r0, #176	; 0xb0
 8000dfa:	4770      	bx	lr

08000dfc <_Unwind_GetGR.constprop.0>:
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	b500      	push	{lr}
 8000e00:	b085      	sub	sp, #20
 8000e02:	a903      	add	r1, sp, #12
 8000e04:	9100      	str	r1, [sp, #0]
 8000e06:	220c      	movs	r2, #12
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f7ff fbe7 	bl	80005dc <_Unwind_VRS_Get>
 8000e0e:	9803      	ldr	r0, [sp, #12]
 8000e10:	b005      	add	sp, #20
 8000e12:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e16:	bf00      	nop

08000e18 <unwind_UCB_from_context>:
 8000e18:	e7f0      	b.n	8000dfc <_Unwind_GetGR.constprop.0>
 8000e1a:	bf00      	nop

08000e1c <__gnu_unwind_execute>:
 8000e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e20:	f04f 0800 	mov.w	r8, #0
 8000e24:	4605      	mov	r5, r0
 8000e26:	460e      	mov	r6, r1
 8000e28:	b085      	sub	sp, #20
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	f7ff ffca 	bl	8000dc4 <next_unwind_byte>
 8000e30:	28b0      	cmp	r0, #176	; 0xb0
 8000e32:	4604      	mov	r4, r0
 8000e34:	f000 80ba 	beq.w	8000fac <__gnu_unwind_execute+0x190>
 8000e38:	0607      	lsls	r7, r0, #24
 8000e3a:	d520      	bpl.n	8000e7e <__gnu_unwind_execute+0x62>
 8000e3c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000e40:	2b80      	cmp	r3, #128	; 0x80
 8000e42:	d04d      	beq.n	8000ee0 <__gnu_unwind_execute+0xc4>
 8000e44:	2b90      	cmp	r3, #144	; 0x90
 8000e46:	d036      	beq.n	8000eb6 <__gnu_unwind_execute+0x9a>
 8000e48:	2ba0      	cmp	r3, #160	; 0xa0
 8000e4a:	d060      	beq.n	8000f0e <__gnu_unwind_execute+0xf2>
 8000e4c:	2bb0      	cmp	r3, #176	; 0xb0
 8000e4e:	d073      	beq.n	8000f38 <__gnu_unwind_execute+0x11c>
 8000e50:	2bc0      	cmp	r3, #192	; 0xc0
 8000e52:	f000 808a 	beq.w	8000f6a <__gnu_unwind_execute+0x14e>
 8000e56:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e5a:	2bd0      	cmp	r3, #208	; 0xd0
 8000e5c:	d10b      	bne.n	8000e76 <__gnu_unwind_execute+0x5a>
 8000e5e:	f000 0207 	and.w	r2, r0, #7
 8000e62:	3201      	adds	r2, #1
 8000e64:	2305      	movs	r3, #5
 8000e66:	2101      	movs	r1, #1
 8000e68:	4628      	mov	r0, r5
 8000e6a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e6e:	f7ff fd99 	bl	80009a4 <_Unwind_VRS_Pop>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d0d9      	beq.n	8000e2a <__gnu_unwind_execute+0xe>
 8000e76:	2009      	movs	r0, #9
 8000e78:	b005      	add	sp, #20
 8000e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e7e:	0083      	lsls	r3, r0, #2
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	1d1f      	adds	r7, r3, #4
 8000e84:	2300      	movs	r3, #0
 8000e86:	f10d 090c 	add.w	r9, sp, #12
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	220d      	movs	r2, #13
 8000e8e:	4628      	mov	r0, r5
 8000e90:	f8cd 9000 	str.w	r9, [sp]
 8000e94:	f7ff fba2 	bl	80005dc <_Unwind_VRS_Get>
 8000e98:	9b03      	ldr	r3, [sp, #12]
 8000e9a:	0660      	lsls	r0, r4, #25
 8000e9c:	bf4c      	ite	mi
 8000e9e:	1bdf      	submi	r7, r3, r7
 8000ea0:	18ff      	addpl	r7, r7, r3
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	220d      	movs	r2, #13
 8000ea6:	4628      	mov	r0, r5
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f8cd 9000 	str.w	r9, [sp]
 8000eae:	9703      	str	r7, [sp, #12]
 8000eb0:	f7ff fbba 	bl	8000628 <_Unwind_VRS_Set>
 8000eb4:	e7b9      	b.n	8000e2a <__gnu_unwind_execute+0xe>
 8000eb6:	f000 030d 	and.w	r3, r0, #13
 8000eba:	2b0d      	cmp	r3, #13
 8000ebc:	d0db      	beq.n	8000e76 <__gnu_unwind_execute+0x5a>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	af03      	add	r7, sp, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f000 020f 	and.w	r2, r0, #15
 8000ec8:	9700      	str	r7, [sp, #0]
 8000eca:	4628      	mov	r0, r5
 8000ecc:	f7ff fb86 	bl	80005dc <_Unwind_VRS_Get>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	220d      	movs	r2, #13
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	9700      	str	r7, [sp, #0]
 8000eda:	f7ff fba5 	bl	8000628 <_Unwind_VRS_Set>
 8000ede:	e7a4      	b.n	8000e2a <__gnu_unwind_execute+0xe>
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	f7ff ff6f 	bl	8000dc4 <next_unwind_byte>
 8000ee6:	0224      	lsls	r4, r4, #8
 8000ee8:	4320      	orrs	r0, r4
 8000eea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000eee:	d0c2      	beq.n	8000e76 <__gnu_unwind_execute+0x5a>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	0104      	lsls	r4, r0, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4628      	mov	r0, r5
 8000ef8:	b2a2      	uxth	r2, r4
 8000efa:	f7ff fd53 	bl	80009a4 <_Unwind_VRS_Pop>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	d1b9      	bne.n	8000e76 <__gnu_unwind_execute+0x5a>
 8000f02:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000f06:	bf18      	it	ne
 8000f08:	f04f 0801 	movne.w	r8, #1
 8000f0c:	e78d      	b.n	8000e2a <__gnu_unwind_execute+0xe>
 8000f0e:	43c3      	mvns	r3, r0
 8000f10:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	411a      	asrs	r2, r3
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	0701      	lsls	r1, r0, #28
 8000f1e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000f22:	bf48      	it	mi
 8000f24:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000f28:	4628      	mov	r0, r5
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f7ff fd3a 	bl	80009a4 <_Unwind_VRS_Pop>
 8000f30:	2800      	cmp	r0, #0
 8000f32:	f43f af7a 	beq.w	8000e2a <__gnu_unwind_execute+0xe>
 8000f36:	e79e      	b.n	8000e76 <__gnu_unwind_execute+0x5a>
 8000f38:	28b1      	cmp	r0, #177	; 0xb1
 8000f3a:	d03c      	beq.n	8000fb6 <__gnu_unwind_execute+0x19a>
 8000f3c:	28b2      	cmp	r0, #178	; 0xb2
 8000f3e:	f000 80b0 	beq.w	80010a2 <__gnu_unwind_execute+0x286>
 8000f42:	28b3      	cmp	r0, #179	; 0xb3
 8000f44:	d04a      	beq.n	8000fdc <__gnu_unwind_execute+0x1c0>
 8000f46:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000f4a:	2bb4      	cmp	r3, #180	; 0xb4
 8000f4c:	d093      	beq.n	8000e76 <__gnu_unwind_execute+0x5a>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	f000 0207 	and.w	r2, r0, #7
 8000f54:	441a      	add	r2, r3
 8000f56:	4628      	mov	r0, r5
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f5e:	f7ff fd21 	bl	80009a4 <_Unwind_VRS_Pop>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	f43f af61 	beq.w	8000e2a <__gnu_unwind_execute+0xe>
 8000f68:	e785      	b.n	8000e76 <__gnu_unwind_execute+0x5a>
 8000f6a:	28c6      	cmp	r0, #198	; 0xc6
 8000f6c:	d04f      	beq.n	800100e <__gnu_unwind_execute+0x1f2>
 8000f6e:	28c7      	cmp	r0, #199	; 0xc7
 8000f70:	d061      	beq.n	8001036 <__gnu_unwind_execute+0x21a>
 8000f72:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f76:	2bc0      	cmp	r3, #192	; 0xc0
 8000f78:	d070      	beq.n	800105c <__gnu_unwind_execute+0x240>
 8000f7a:	28c8      	cmp	r0, #200	; 0xc8
 8000f7c:	d07c      	beq.n	8001078 <__gnu_unwind_execute+0x25c>
 8000f7e:	28c9      	cmp	r0, #201	; 0xc9
 8000f80:	f47f af79 	bne.w	8000e76 <__gnu_unwind_execute+0x5a>
 8000f84:	4630      	mov	r0, r6
 8000f86:	f7ff ff1d 	bl	8000dc4 <next_unwind_byte>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4628      	mov	r0, r5
 8000f92:	0314      	lsls	r4, r2, #12
 8000f94:	f002 020f 	and.w	r2, r2, #15
 8000f98:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000f9c:	440a      	add	r2, r1
 8000f9e:	4322      	orrs	r2, r4
 8000fa0:	f7ff fd00 	bl	80009a4 <_Unwind_VRS_Pop>
 8000fa4:	2800      	cmp	r0, #0
 8000fa6:	f43f af40 	beq.w	8000e2a <__gnu_unwind_execute+0xe>
 8000faa:	e764      	b.n	8000e76 <__gnu_unwind_execute+0x5a>
 8000fac:	f1b8 0f00 	cmp.w	r8, #0
 8000fb0:	d01c      	beq.n	8000fec <__gnu_unwind_execute+0x1d0>
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	e760      	b.n	8000e78 <__gnu_unwind_execute+0x5c>
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	f7ff ff04 	bl	8000dc4 <next_unwind_byte>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	f43f af59 	beq.w	8000e76 <__gnu_unwind_execute+0x5a>
 8000fc4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fc8:	f47f af55 	bne.w	8000e76 <__gnu_unwind_execute+0x5a>
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4628      	mov	r0, r5
 8000fd0:	f7ff fce8 	bl	80009a4 <_Unwind_VRS_Pop>
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	f43f af28 	beq.w	8000e2a <__gnu_unwind_execute+0xe>
 8000fda:	e74c      	b.n	8000e76 <__gnu_unwind_execute+0x5a>
 8000fdc:	4630      	mov	r0, r6
 8000fde:	f7ff fef1 	bl	8000dc4 <next_unwind_byte>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e7d2      	b.n	8000f92 <__gnu_unwind_execute+0x176>
 8000fec:	ac03      	add	r4, sp, #12
 8000fee:	4643      	mov	r3, r8
 8000ff0:	220e      	movs	r2, #14
 8000ff2:	4641      	mov	r1, r8
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	9400      	str	r4, [sp, #0]
 8000ff8:	f7ff faf0 	bl	80005dc <_Unwind_VRS_Get>
 8000ffc:	4643      	mov	r3, r8
 8000ffe:	220f      	movs	r2, #15
 8001000:	4628      	mov	r0, r5
 8001002:	4641      	mov	r1, r8
 8001004:	9400      	str	r4, [sp, #0]
 8001006:	f7ff fb0f 	bl	8000628 <_Unwind_VRS_Set>
 800100a:	4640      	mov	r0, r8
 800100c:	e734      	b.n	8000e78 <__gnu_unwind_execute+0x5c>
 800100e:	4630      	mov	r0, r6
 8001010:	f7ff fed8 	bl	8000dc4 <next_unwind_byte>
 8001014:	4602      	mov	r2, r0
 8001016:	2303      	movs	r3, #3
 8001018:	0314      	lsls	r4, r2, #12
 800101a:	f002 020f 	and.w	r2, r2, #15
 800101e:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8001022:	3201      	adds	r2, #1
 8001024:	4628      	mov	r0, r5
 8001026:	4619      	mov	r1, r3
 8001028:	4322      	orrs	r2, r4
 800102a:	f7ff fcbb 	bl	80009a4 <_Unwind_VRS_Pop>
 800102e:	2800      	cmp	r0, #0
 8001030:	f43f aefb 	beq.w	8000e2a <__gnu_unwind_execute+0xe>
 8001034:	e71f      	b.n	8000e76 <__gnu_unwind_execute+0x5a>
 8001036:	4630      	mov	r0, r6
 8001038:	f7ff fec4 	bl	8000dc4 <next_unwind_byte>
 800103c:	4602      	mov	r2, r0
 800103e:	2800      	cmp	r0, #0
 8001040:	f43f af19 	beq.w	8000e76 <__gnu_unwind_execute+0x5a>
 8001044:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001048:	f47f af15 	bne.w	8000e76 <__gnu_unwind_execute+0x5a>
 800104c:	2104      	movs	r1, #4
 800104e:	4628      	mov	r0, r5
 8001050:	f7ff fca8 	bl	80009a4 <_Unwind_VRS_Pop>
 8001054:	2800      	cmp	r0, #0
 8001056:	f43f aee8 	beq.w	8000e2a <__gnu_unwind_execute+0xe>
 800105a:	e70c      	b.n	8000e76 <__gnu_unwind_execute+0x5a>
 800105c:	2303      	movs	r3, #3
 800105e:	f000 020f 	and.w	r2, r0, #15
 8001062:	3201      	adds	r2, #1
 8001064:	4628      	mov	r0, r5
 8001066:	4619      	mov	r1, r3
 8001068:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800106c:	f7ff fc9a 	bl	80009a4 <_Unwind_VRS_Pop>
 8001070:	2800      	cmp	r0, #0
 8001072:	f43f aeda 	beq.w	8000e2a <__gnu_unwind_execute+0xe>
 8001076:	e6fe      	b.n	8000e76 <__gnu_unwind_execute+0x5a>
 8001078:	4630      	mov	r0, r6
 800107a:	f7ff fea3 	bl	8000dc4 <next_unwind_byte>
 800107e:	4602      	mov	r2, r0
 8001080:	2101      	movs	r1, #1
 8001082:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8001086:	f002 020f 	and.w	r2, r2, #15
 800108a:	3410      	adds	r4, #16
 800108c:	440a      	add	r2, r1
 800108e:	2305      	movs	r3, #5
 8001090:	4628      	mov	r0, r5
 8001092:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8001096:	f7ff fc85 	bl	80009a4 <_Unwind_VRS_Pop>
 800109a:	2800      	cmp	r0, #0
 800109c:	f43f aec5 	beq.w	8000e2a <__gnu_unwind_execute+0xe>
 80010a0:	e6e9      	b.n	8000e76 <__gnu_unwind_execute+0x5a>
 80010a2:	2300      	movs	r3, #0
 80010a4:	f10d 090c 	add.w	r9, sp, #12
 80010a8:	220d      	movs	r2, #13
 80010aa:	4619      	mov	r1, r3
 80010ac:	4628      	mov	r0, r5
 80010ae:	f8cd 9000 	str.w	r9, [sp]
 80010b2:	f7ff fa93 	bl	80005dc <_Unwind_VRS_Get>
 80010b6:	4630      	mov	r0, r6
 80010b8:	f7ff fe84 	bl	8000dc4 <next_unwind_byte>
 80010bc:	0602      	lsls	r2, r0, #24
 80010be:	f04f 0402 	mov.w	r4, #2
 80010c2:	d50c      	bpl.n	80010de <__gnu_unwind_execute+0x2c2>
 80010c4:	9b03      	ldr	r3, [sp, #12]
 80010c6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80010ca:	40a0      	lsls	r0, r4
 80010cc:	4418      	add	r0, r3
 80010ce:	9003      	str	r0, [sp, #12]
 80010d0:	4630      	mov	r0, r6
 80010d2:	f7ff fe77 	bl	8000dc4 <next_unwind_byte>
 80010d6:	0603      	lsls	r3, r0, #24
 80010d8:	f104 0407 	add.w	r4, r4, #7
 80010dc:	d4f2      	bmi.n	80010c4 <__gnu_unwind_execute+0x2a8>
 80010de:	9b03      	ldr	r3, [sp, #12]
 80010e0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80010e4:	40a2      	lsls	r2, r4
 80010e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010ea:	441a      	add	r2, r3
 80010ec:	2300      	movs	r3, #0
 80010ee:	9203      	str	r2, [sp, #12]
 80010f0:	4628      	mov	r0, r5
 80010f2:	220d      	movs	r2, #13
 80010f4:	4619      	mov	r1, r3
 80010f6:	f8cd 9000 	str.w	r9, [sp]
 80010fa:	f7ff fa95 	bl	8000628 <_Unwind_VRS_Set>
 80010fe:	e694      	b.n	8000e2a <__gnu_unwind_execute+0xe>

08001100 <__gnu_unwind_frame>:
 8001100:	460b      	mov	r3, r1
 8001102:	f04f 0c03 	mov.w	ip, #3
 8001106:	b500      	push	{lr}
 8001108:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800110a:	4618      	mov	r0, r3
 800110c:	6853      	ldr	r3, [r2, #4]
 800110e:	b085      	sub	sp, #20
 8001110:	3208      	adds	r2, #8
 8001112:	9202      	str	r2, [sp, #8]
 8001114:	a901      	add	r1, sp, #4
 8001116:	0e1a      	lsrs	r2, r3, #24
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	f88d c00c 	strb.w	ip, [sp, #12]
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	f88d 200d 	strb.w	r2, [sp, #13]
 8001124:	f7ff fe7a 	bl	8000e1c <__gnu_unwind_execute>
 8001128:	b005      	add	sp, #20
 800112a:	f85d fb04 	ldr.w	pc, [sp], #4
 800112e:	bf00      	nop

08001130 <_Unwind_GetRegionStart>:
 8001130:	b508      	push	{r3, lr}
 8001132:	f7ff fe71 	bl	8000e18 <unwind_UCB_from_context>
 8001136:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001138:	bd08      	pop	{r3, pc}
 800113a:	bf00      	nop

0800113c <_Unwind_GetLanguageSpecificData>:
 800113c:	b508      	push	{r3, lr}
 800113e:	f7ff fe6b 	bl	8000e18 <unwind_UCB_from_context>
 8001142:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001144:	79c3      	ldrb	r3, [r0, #7]
 8001146:	3302      	adds	r3, #2
 8001148:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800114c:	bd08      	pop	{r3, pc}
 800114e:	bf00      	nop

08001150 <_ZN3I2CC1Ev>:
	I2C_HandleTypeDef mI2C;
private:
	uint8_t mBuffer[16] = {0};

public:
	I2C() {}
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <_ZN3I2CC1Ev+0x28>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3358      	adds	r3, #88	; 0x58
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	08008ea8 	.word	0x08008ea8

0800117c <_ZN3I2C10setBusDataE17I2C_HandleTypeDef>:
	I2C( I2C_HandleTypeDef bus );
	virtual ~I2C();

	void setBusData( I2C_HandleTypeDef bus ) { mI2C = bus; }
 800117c:	b084      	sub	sp, #16
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	f107 0014 	add.w	r0, r7, #20
 800118a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3304      	adds	r3, #4
 8001192:	f107 0114 	add.w	r1, r7, #20
 8001196:	2254      	movs	r2, #84	; 0x54
 8001198:	4618      	mov	r0, r3
 800119a:	f007 f8bb 	bl	8008314 <memcpy>
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011a8:	b004      	add	sp, #16
 80011aa:	4770      	bx	lr

080011ac <_ZN7Display6setLCDEP3LCD>:
		SCREEN_MAIN = 0
	};

	Display();
	virtual ~Display();
	void setLCD( LCD *lcd ) { mLCD = lcd; }
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <_ZN5Audio10setDecoderEP12DolbyDecoder>:
	virtual ~Audio();

	virtual void tick();
	virtual void preTick();

	virtual void setDecoder( DolbyDecoder *decoder ) { mDecoder = decoder; }
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <_ZN5Audio6setDACEP6DAC_IC>:
	virtual void setDAC( DAC_IC *dac ) { mDAC = dac; }
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
	...

080011fc <_ZN9AmplifierC1Ev>:
#include "DACPCM1681.h"
#include "DolbyDecoderSTA310.h"
//#include "usbd_cdc_if.h"
#include "Debug.h"

Amplifier::Amplifier() : mAudio( this ), mDAC( 0 ), mDecoder( 0 ), mLastVolumeTimer( 0 ), mCurrentVolume( 50 ), mSamplingFrequency( 0 ) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fcae 	bl	8001b68 <_ZN13DecoderEventsC1Ev>
 800120c:	4a18      	ldr	r2, [pc, #96]	; (8001270 <_ZN9AmplifierC1Ev+0x74>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3304      	adds	r3, #4
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fcc6 	bl	8001ba8 <_ZN7DisplayC1Ev>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3334      	adds	r3, #52	; 0x34
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f976 	bl	8001514 <_ZN5AudioC1EP9Amplifier>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	334c      	adds	r3, #76	; 0x4c
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff8f 	bl	8001150 <_ZN3I2CC1Ev>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2232      	movs	r2, #50	; 0x32
 800124e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	33cc      	adds	r3, #204	; 0xcc
 8001256:	4618      	mov	r0, r3
 8001258:	f006 ff38 	bl	80080cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	// TODO Auto-generated constructor stub
}
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	08008d38 	.word	0x08008d38

08001274 <_ZN9AmplifierD1Ev>:

Amplifier::~Amplifier() {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <_ZN9AmplifierD1Ev+0x48>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	33cc      	adds	r3, #204	; 0xcc
 8001286:	4618      	mov	r0, r3
 8001288:	f006 ff27 	bl	80080da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	334c      	adds	r3, #76	; 0x4c
 8001290:	4618      	mov	r0, r3
 8001292:	f001 fcb1 	bl	8002bf8 <_ZN3I2CD1Ev>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3334      	adds	r3, #52	; 0x34
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f95a 	bl	8001554 <_ZN5AudioD1Ev>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3304      	adds	r3, #4
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 fc9f 	bl	8001be8 <_ZN7DisplayD1Ev>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 fc6b 	bl	8001b88 <_ZN13DecoderEventsD1Ev>
	// TODO Auto-generated destructor stub
}
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	08008d38 	.word	0x08008d38

080012c0 <_ZN9AmplifierD0Ev>:
Amplifier::~Amplifier() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
}
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ffd3 	bl	8001274 <_ZN9AmplifierD1Ev>
 80012ce:	21e8      	movs	r1, #232	; 0xe8
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f006 fe76 	bl	8007fc2 <_ZdlPvj>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZN9Amplifier20onSamplingRateChangeEm>:

void
Amplifier::onSamplingRateChange( uint32_t samplingRate ) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	mDisplay.setSamplingRate( samplingRate );
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3304      	adds	r3, #4
 80012ee:	6839      	ldr	r1, [r7, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fcb4 	bl	8001c5e <_ZN7Display15setSamplingRateEm>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_ZN9Amplifier17onAlgorithmChangeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void
Amplifier::onAlgorithmChange( const std::string &algorithm ) {
 80012fe:	b590      	push	{r4, r7, lr}
 8001300:	b089      	sub	sp, #36	; 0x24
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
	mDisplay.setAlgorithm( algorithm );
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	1d1c      	adds	r4, r3, #4
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f006 ff24 	bl	8008160 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	4619      	mov	r1, r3
 800131e:	4620      	mov	r0, r4
 8001320:	f000 fcb2 	bl	8001c88 <_ZN7Display12setAlgorithmENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	4618      	mov	r0, r3
 800132a:	f006 fed6 	bl	80080da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800132e:	bf00      	nop
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd90      	pop	{r4, r7, pc}

08001336 <_ZN9Amplifier10initializeE17I2C_HandleTypeDef>:

void
Amplifier::initialize( I2C_HandleTypeDef bus ) {
 8001336:	b084      	sub	sp, #16
 8001338:	b5b0      	push	{r4, r5, r7, lr}
 800133a:	b094      	sub	sp, #80	; 0x50
 800133c:	af12      	add	r7, sp, #72	; 0x48
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	f107 001c 	add.w	r0, r7, #28
 8001344:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// Take the I2C bus info and configure our internal I2C bus class
	mBusI2C.setBusData( bus );
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 800134e:	4668      	mov	r0, sp
 8001350:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001354:	2248      	movs	r2, #72	; 0x48
 8001356:	4619      	mov	r1, r3
 8001358:	f006 ffdc 	bl	8008314 <memcpy>
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001362:	4620      	mov	r0, r4
 8001364:	f7ff ff0a 	bl	800117c <_ZN3I2C10setBusDataE17I2C_HandleTypeDef>
	mDAC = new DAC_PCM1681( mBusI2C.makeDevice( 0x4c << 1 ) );
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	334c      	adds	r3, #76	; 0x4c
 800136c:	2198      	movs	r1, #152	; 0x98
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fda0 	bl	8002eb4 <_ZN3I2C10makeDeviceEh>
 8001374:	4605      	mov	r5, r0
 8001376:	2010      	movs	r0, #16
 8001378:	f006 fe25 	bl	8007fc6 <_Znwj>
 800137c:	4603      	mov	r3, r0
 800137e:	461c      	mov	r4, r3
 8001380:	4629      	mov	r1, r5
 8001382:	4620      	mov	r0, r4
 8001384:	f000 fa8a 	bl	800189c <_ZN11DAC_PCM1681C1EP10I2C_Device>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
	//mDecoder = new DolbyDecoder_STA310( mBusI2C.makeDevice( 0x60 << 1 ) );
	mDecoder = new DolbyDecoder_STA310( mBusI2C.makeDevice( 0x5c << 1 ) );
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	334c      	adds	r3, #76	; 0x4c
 8001392:	21b8      	movs	r1, #184	; 0xb8
 8001394:	4618      	mov	r0, r3
 8001396:	f001 fd8d 	bl	8002eb4 <_ZN3I2C10makeDeviceEh>
 800139a:	4605      	mov	r5, r0
 800139c:	2018      	movs	r0, #24
 800139e:	f006 fe12 	bl	8007fc6 <_Znwj>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461c      	mov	r4, r3
 80013a6:	4629      	mov	r1, r5
 80013a8:	4620      	mov	r0, r4
 80013aa:	f000 fd75 	bl	8001e98 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8

	mDecoder->setEventHandler( this );
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3324      	adds	r3, #36	; 0x24
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4610      	mov	r0, r2
 80013ca:	4798      	blx	r3

	// Configure the audio thread
	mAudio.setDecoder( mDecoder );
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80013d8:	4619      	mov	r1, r3
 80013da:	4610      	mov	r0, r2
 80013dc:	f7ff fef3 	bl	80011c6 <_ZN5Audio10setDecoderEP12DolbyDecoder>
	mAudio.setDAC( mDAC );
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80013ec:	4619      	mov	r1, r3
 80013ee:	4610      	mov	r0, r2
 80013f0:	f7ff fef6 	bl	80011e0 <_ZN5Audio6setDACEP6DAC_IC>

	mLCD = new LCD( mBusI2C.makeDevice( LCD_I2C_ADDR ) );
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	334c      	adds	r3, #76	; 0x4c
 80013f8:	214e      	movs	r1, #78	; 0x4e
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 fd5a 	bl	8002eb4 <_ZN3I2C10makeDeviceEh>
 8001400:	4605      	mov	r5, r0
 8001402:	200c      	movs	r0, #12
 8001404:	f006 fddf 	bl	8007fc6 <_Znwj>
 8001408:	4603      	mov	r3, r0
 800140a:	461c      	mov	r4, r3
 800140c:	4629      	mov	r1, r5
 800140e:	4620      	mov	r0, r4
 8001410:	f001 ff02 	bl	8003218 <_ZN3LCDC1EP10I2C_Device>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0
	mDisplay.setLCD( mLCD );
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	1d1a      	adds	r2, r3, #4
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001424:	4619      	mov	r1, r3
 8001426:	4610      	mov	r0, r2
 8001428:	f7ff fec0 	bl	80011ac <_ZN7Display6setLCDEP3LCD>

	mVolumeEncoder = new Encoder();
 800142c:	2008      	movs	r0, #8
 800142e:	f006 fdca 	bl	8007fc6 <_Znwj>
 8001432:	4603      	mov	r3, r0
 8001434:	461c      	mov	r4, r3
 8001436:	4620      	mov	r0, r4
 8001438:	f001 fb28 	bl	8002a8c <_ZN7EncoderC1Ev>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
	mStatusLEDs[ STATUS_MUTE ].setPortAndPin( LED_MUTE_GPIO_Port, LED_MUTE_Pin );
	mStatusLEDs[ STATUS_RUN ].setPortAndPin( LED_RUN_GPIO_Port, LED_RUN_Pin );
	*/


}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800144c:	b004      	add	sp, #16
 800144e:	4770      	bx	lr

08001450 <_ZN9Amplifier7preTickEv>:

void
Amplifier::preTick() {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

	mLCD->initialize();
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3308      	adds	r3, #8
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4610      	mov	r0, r2
 800146c:	4798      	blx	r3

	mDisplay.updateVolume( mCurrentVolume );
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	1d1a      	adds	r2, r3, #4
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001478:	4619      	mov	r1, r3
 800147a:	4610      	mov	r0, r2
 800147c:	f000 fc24 	bl	8001cc8 <_ZN7Display12updateVolumeEi>
	mDisplay.update();
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3304      	adds	r3, #4
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fbd3 	bl	8001c30 <_ZN7Display6updateEv>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <_ZN9Amplifier4tickEv>:

void Amplifier::tick() {
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
		uint32_t currentCount = (uint32_t)TIM4->CNT;
 800149c:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <_ZN9Amplifier4tickEv+0x7c>)
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	60fb      	str	r3, [r7, #12]
		ENCODER_VALUE encoderChange = mVolumeEncoder->checkEncoder( currentCount );
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3308      	adds	r3, #8
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68f9      	ldr	r1, [r7, #12]
 80014b6:	4610      	mov	r0, r2
 80014b8:	4798      	blx	r3
 80014ba:	60b8      	str	r0, [r7, #8]
		if ( encoderChange == Encoder::ENCODER_INCREASE ) {
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d107      	bne.n	80014d2 <_ZN9Amplifier4tickEv+0x3e>
			mCurrentVolume++;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80014d0:	e009      	b.n	80014e6 <_ZN9Amplifier4tickEv+0x52>
		} else if ( encoderChange == Encoder::ENCODER_DECREASE ) {
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d106      	bne.n	80014e6 <_ZN9Amplifier4tickEv+0x52>
			mCurrentVolume--;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80014de:	1e5a      	subs	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		}

		if ( encoderChange != Encoder::ENCODER_NOCHANGE ) {
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d00d      	beq.n	8001508 <_ZN9Amplifier4tickEv+0x74>
			mDisplay.updateVolume( mCurrentVolume );
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	1d1a      	adds	r2, r3, #4
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f000 fbe5 	bl	8001cc8 <_ZN7Display12updateVolumeEi>
			mDisplay.update();
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3304      	adds	r3, #4
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fb94 	bl	8001c30 <_ZN7Display6updateEv>
		}
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40000800 	.word	0x40000800

08001514 <_ZN5AudioC1EP9Amplifier>:
 */

#include "Audio.h"
#include "main.h"

Audio::Audio( Amplifier *amp ) : Runnable( amp ), mDecoder( 0 ), mDAC( 0 ), mHasBeenInitialized( false ), mTick( 0 ) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6839      	ldr	r1, [r7, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f001 ff0e 	bl	8003344 <_ZN8RunnableC1EP9Amplifier>
 8001528:	4a09      	ldr	r2, [pc, #36]	; (8001550 <_ZN5AudioC1EP9Amplifier+0x3c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	741a      	strb	r2, [r3, #16]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
	// TODO Auto-generated constructor stub

}
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	08008d5c 	.word	0x08008d5c

08001554 <_ZN5AudioD1Ev>:

Audio::~Audio() {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_ZN5AudioD1Ev+0x20>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4618      	mov	r0, r3
 8001566:	f001 ff01 	bl	800336c <_ZN8RunnableD1Ev>
	// TODO Auto-generated destructor stub
}
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	08008d5c 	.word	0x08008d5c

08001578 <_ZN5AudioD0Ev>:
Audio::~Audio() {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
}
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ffe7 	bl	8001554 <_ZN5AudioD1Ev>
 8001586:	2118      	movs	r1, #24
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f006 fd1a 	bl	8007fc2 <_ZdlPvj>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_ZN5Audio7preTickEv>:

void
Audio::preTick() {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	if ( !mHasBeenInitialized ) {
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7c1b      	ldrb	r3, [r3, #16]
 80015a4:	f083 0301 	eor.w	r3, r3, #1
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d052      	beq.n	8001654 <_ZN5Audio7preTickEv+0xbc>
		// Let's run the audio init.. we'll put this in the for loop in case for some reason we need to initialize again
		if ( mDAC && mDecoder ) {
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d04e      	beq.n	8001654 <_ZN5Audio7preTickEv+0xbc>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d04a      	beq.n	8001654 <_ZN5Audio7preTickEv+0xbc>
			// We have a valid DAC and a valid decoder.. for now both are required

			// Initialize the Dolby Decoder
			mDecoder->initialize();
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3308      	adds	r3, #8
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4610      	mov	r0, r2
 80015ce:	4798      	blx	r3

			if ( mDecoder->isInitialized() ) {
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	330c      	adds	r3, #12
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4610      	mov	r0, r2
 80015e0:	4798      	blx	r3
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d035      	beq.n	8001654 <_ZN5Audio7preTickEv+0xbc>
				// Let's mute the output on the decoder
				//mDecoder->mute( true );

				// Decoder should be sending a clock signal to the DAC chip, so it should be responsive
				// The datasheet says the DAC needs about 5ms to be responsive, so let's wait 10
				HAL_Delay( 10 );
 80015e8:	200a      	movs	r0, #10
 80015ea:	f002 fdbf 	bl	800416c <HAL_Delay>

				//mDAC->init();

				HAL_Delay( 10 );
 80015ee:	200a      	movs	r0, #10
 80015f0:	f002 fdbc 	bl	800416c <HAL_Delay>

				// Time to unleash the KRAKEN!  Let's start decoding...

				// Now let's pull the Decoder out of the IDLE state

				HAL_Delay( 50 );
 80015f4:	2032      	movs	r0, #50	; 0x32
 80015f6:	f002 fdb9 	bl	800416c <HAL_Delay>

				mDecoder->play();
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3314      	adds	r3, #20
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2101      	movs	r1, #1
 800160a:	4610      	mov	r0, r2
 800160c:	4798      	blx	r3

				HAL_Delay( 50 );
 800160e:	2032      	movs	r0, #50	; 0x32
 8001610:	f002 fdac 	bl	800416c <HAL_Delay>

				mDecoder->mute( false );
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3310      	adds	r3, #16
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2100      	movs	r1, #0
 8001624:	4610      	mov	r0, r2
 8001626:	4798      	blx	r3

				mDecoder->run();
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3318      	adds	r3, #24
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4610      	mov	r0, r2
 8001638:	4798      	blx	r3

				mHasBeenInitialized = true;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	741a      	strb	r2, [r3, #16]

				mDAC->enable( true );
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	3314      	adds	r3, #20
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2101      	movs	r1, #1
 8001650:	4610      	mov	r0, r2
 8001652:	4798      	blx	r3
			}
		}
	}
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <_ZN5Audio4tickEv>:

void
Audio::tick() {
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	// We need to start setting up the audio interfaces
	// First we'll configure the Dolby Decoder
	for(;;) {
		if ( mDecoder && mHasBeenInitialized ) {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d022      	beq.n	80016b2 <_ZN5Audio4tickEv+0x56>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7c1b      	ldrb	r3, [r3, #16]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d01e      	beq.n	80016b2 <_ZN5Audio4tickEv+0x56>
			mDecoder->checkForInterrupt();
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	331c      	adds	r3, #28
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4610      	mov	r0, r2
 8001684:	4798      	blx	r3

			if ( mTick % 5000 == 0 ) {
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <_ZN5Audio4tickEv+0x68>)
 800168c:	fba3 1302 	umull	r1, r3, r3, r2
 8001690:	0b1b      	lsrs	r3, r3, #12
 8001692:	f241 3188 	movw	r1, #5000	; 0x1388
 8001696:	fb01 f303 	mul.w	r3, r1, r3
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d108      	bne.n	80016b2 <_ZN5Audio4tickEv+0x56>
				mDecoder->checkFormat();
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3320      	adds	r3, #32
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4610      	mov	r0, r2
 80016b0:	4798      	blx	r3
			}
		}

		mTick = mTick + 1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	615a      	str	r2, [r3, #20]

		HAL_Delay(1);
 80016bc:	2001      	movs	r0, #1
 80016be:	f002 fd55 	bl	800416c <HAL_Delay>
		if ( mDecoder && mHasBeenInitialized ) {
 80016c2:	e7cf      	b.n	8001664 <_ZN5Audio4tickEv+0x8>
 80016c4:	d1b71759 	.word	0xd1b71759

080016c8 <_ZN5Audio5startEv>:
	}
}

void
Audio::start() {
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
//	mHasBeenInitialized = true;
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <_ZN6DAC_IC9isEnabledEv>:

	// the name for this DAC
	virtual std::string name() = 0;
	virtual void init() = 0;

	virtual bool isEnabled() { return true; }
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	2301      	movs	r3, #1
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <_ZN6DAC_IC6enableEb>:
	virtual void enable( bool state ) {};
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	460b      	mov	r3, r1
 80016f8:	70fb      	strb	r3, [r7, #3]
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <_ZN6DAC_IC14supportsFormatEh>:
	virtual bool supportsFormat( uint8_t format ) { return false; }
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
 8001710:	2300      	movs	r3, #0
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <_ZN6DAC_IC14supportsVolumeEv>:
	virtual bool supportsVolume() { return false; }
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	2300      	movs	r3, #0
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <_ZN6DAC_IC12supportsMuteEv>:
	virtual bool supportsMute() { return false; }
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	2300      	movs	r3, #0
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <_ZN6DAC_IC8channelsEv>:
	virtual int channels() { return 0; }
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	2300      	movs	r3, #0
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <_ZN6DAC_IC16setChannelVolumeEii>:

	// volume is 0 to 63, where 0 is lowest and 63 is highest
	virtual void setChannelVolume( int channel, int volume ) {}
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <_ZN6DAC_IC9setVolumeEi>:

	// sets the volume on all channels
	virtual void setVolume( int volume ) {};
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	6039      	str	r1, [r7, #0]
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <_ZN6DAC_IC11muteChannelEib>:

	virtual void muteChannel( int channel, bool enable ) {}
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	4613      	mov	r3, r2
 800178e:	71fb      	strb	r3, [r7, #7]
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <_ZN6DAC_IC4muteEb>:
	virtual void mute( bool enable ) {}
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	70fb      	strb	r3, [r7, #3]
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <_ZN6DAC_IC9setFormatEh>:

	virtual void setFormat( uint8_t format ) {};
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	70fb      	strb	r3, [r7, #3]
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
	...

080017c8 <_ZN6DAC_ICC1Ev>:
 *      Author: duane
 */

#include "DAC.h"

DAC_IC::DAC_IC() {
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <_ZN6DAC_ICC1Ev+0x1c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	08008d80 	.word	0x08008d80

080017e8 <_ZN6DAC_ICD1Ev>:

DAC_IC::~DAC_IC() {
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <_ZN6DAC_ICD1Ev+0x1c>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	08008d80 	.word	0x08008d80

08001808 <_ZN11DAC_PCM16819isEnabledEv>:
	DAC_PCM1681( I2C_Device *device );
	virtual ~DAC_PCM1681();

	virtual void init();

	virtual bool isEnabled() { return mEnabled; }
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7b5b      	ldrb	r3, [r3, #13]
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf14      	ite	ne
 8001818:	2301      	movne	r3, #1
 800181a:	2300      	moveq	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <_ZN11DAC_PCM168114supportsVolumeEv>:
	virtual void enable( bool state );

	virtual bool supportsFormat( uint8_t format );
	virtual bool supportsVolume() { return true; }
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	2301      	movs	r3, #1
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <_ZN11DAC_PCM168112supportsMuteEv>:
	virtual bool supportsMute() { return true; }
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	2301      	movs	r3, #1
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <_ZN11DAC_PCM16818channelsEv>:
	virtual int channels() { return 8; }
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	2308      	movs	r3, #8
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <_ZN11DAC_PCM16814nameB5cxx11Ev>:

	virtual std::string name() { return "PCM1681"; }
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4618      	mov	r0, r3
 8001874:	f006 fbbb 	bl	8007fee <_ZNSaIcEC1Ev>
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	461a      	mov	r2, r3
 800187e:	4906      	ldr	r1, [pc, #24]	; (8001898 <_ZN11DAC_PCM16814nameB5cxx11Ev+0x34>)
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f006 fc9f 	bl	80081c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4618      	mov	r0, r3
 800188c:	f006 fbb0 	bl	8007ff0 <_ZNSaIcED1Ev>
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	08008c9c 	.word	0x08008c9c

0800189c <_ZN11DAC_PCM1681C1EP10I2C_Device>:
#define PCM1681_REG_ENABLE	8
#define PCM1681_REG_FORMAT	9
#define PCM1681_REG_OVER	12
#define PCM1681_REG_DAMS	13

DAC_PCM1681::DAC_PCM1681( I2C_Device *device ) : mDevice( device ), mEnabled( true ) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff8d 	bl	80017c8 <_ZN6DAC_ICC1Ev>
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <_ZN11DAC_PCM1681C1EP10I2C_Device+0x34>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	735a      	strb	r2, [r3, #13]
	// TODO Auto-generated constructor stub
	mMuteStatus = 0;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	731a      	strb	r2, [r3, #12]
}
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	08008dc4 	.word	0x08008dc4

080018d4 <_ZN11DAC_PCM1681D1Ev>:

DAC_PCM1681::~DAC_PCM1681() {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <_ZN11DAC_PCM1681D1Ev+0x20>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff7f 	bl	80017e8 <_ZN6DAC_ICD1Ev>
	// TODO Auto-generated destructor stub
}
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	08008dc4 	.word	0x08008dc4

080018f8 <_ZN11DAC_PCM1681D0Ev>:
DAC_PCM1681::~DAC_PCM1681() {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
}
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ffe7 	bl	80018d4 <_ZN11DAC_PCM1681D1Ev>
 8001906:	2110      	movs	r1, #16
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f006 fb5a 	bl	8007fc2 <_ZdlPvj>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_ZN11DAC_PCM16816enableEb>:

void
DAC_PCM1681::enable( bool state ) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	70fb      	strb	r3, [r7, #3]
	if ( state ) {
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00a      	beq.n	8001940 <_ZN11DAC_PCM16816enableEb+0x28>
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0 );
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6898      	ldr	r0, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3318      	adds	r3, #24
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2200      	movs	r2, #0
 800193a:	2108      	movs	r1, #8
 800193c:	4798      	blx	r3
 800193e:	e009      	b.n	8001954 <_ZN11DAC_PCM16816enableEb+0x3c>
	} else {
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0xff );
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6898      	ldr	r0, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	3318      	adds	r3, #24
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	22ff      	movs	r2, #255	; 0xff
 8001950:	2108      	movs	r1, #8
 8001952:	4798      	blx	r3
	}

	mEnabled = state;
 8001954:	78fa      	ldrb	r2, [r7, #3]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	735a      	strb	r2, [r3, #13]
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_ZN11DAC_PCM168114supportsFormatEh>:

bool
DAC_PCM1681::supportsFormat( uint8_t format ) {
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	70fb      	strb	r3, [r7, #3]
	return ( format == DAC_IC::FORMAT_SONY || format == DAC_IC::FORMAT_I2S );
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <_ZN11DAC_PCM168114supportsFormatEh+0x18>
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <_ZN11DAC_PCM168114supportsFormatEh+0x1c>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <_ZN11DAC_PCM168114supportsFormatEh+0x1e>
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <_ZN11DAC_PCM16819setFormatEh>:

void
DAC_PCM1681::setFormat( uint8_t format ) {
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
	if ( format == FORMAT_SONY ) {
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_ZN11DAC_PCM16819setFormatEh+0x1c>
		value = 5;
 80019a0:	2305      	movs	r3, #5
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	e004      	b.n	80019b0 <_ZN11DAC_PCM16819setFormatEh+0x26>
	} else if ( format == FORMAT_I2S ) {
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <_ZN11DAC_PCM16819setFormatEh+0x26>
		value = 4;
 80019ac:	2304      	movs	r3, #4
 80019ae:	73fb      	strb	r3, [r7, #15]
	}

	//mDevice->writeRegister( PCM1681_REG_FORMAT, value );
	uint8_t data[2];
	data[0] = PCM1681_REG_FORMAT;
 80019b0:	2309      	movs	r3, #9
 80019b2:	733b      	strb	r3, [r7, #12]
	data[1] = 4;
 80019b4:	2304      	movs	r3, #4
 80019b6:	737b      	strb	r3, [r7, #13]
	//mDevice->writeData( data, 2 );
	mDevice->writeRegister( PCM1681_REG_FORMAT, 4 );
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6898      	ldr	r0, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3318      	adds	r3, #24
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2204      	movs	r2, #4
 80019c8:	2109      	movs	r1, #9
 80019ca:	4798      	blx	r3
	mDevice->writeRegister( PCM1681_REG_OVER, 1 );
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6898      	ldr	r0, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	3318      	adds	r3, #24
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2201      	movs	r2, #1
 80019dc:	210c      	movs	r1, #12
 80019de:	4798      	blx	r3
//	mDevice->writeData( data, 2 );
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_ZN11DAC_PCM16814initEv>:

void
DAC_PCM1681::init() {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	// do setup

	// set digital attenuation range of 0-63db in 0.5db increments
//	mDevice->writeRegister( PCM1681_REG_DAMS, 0 );

	setFormat( FORMAT_SONY );
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3338      	adds	r3, #56	; 0x38
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2100      	movs	r1, #0
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	4798      	blx	r3

	// Let's set a reasonable volume at first
	//setVolume( 127 );
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <_ZN11DAC_PCM168116setChannelVolumeEii>:

void
DAC_PCM1681::setChannelVolume( int channel, int volume ) {
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
	uint8_t reg = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	75fb      	strb	r3, [r7, #23]
	switch( channel ) {
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d820      	bhi.n	8001a60 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
 8001a1e:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <_ZN11DAC_PCM168116setChannelVolumeEii+0x1c>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001a3d 	.word	0x08001a3d
 8001a28:	08001a43 	.word	0x08001a43
 8001a2c:	08001a49 	.word	0x08001a49
 8001a30:	08001a4f 	.word	0x08001a4f
 8001a34:	08001a55 	.word	0x08001a55
 8001a38:	08001a5b 	.word	0x08001a5b
		case FRONT_LEFT:
			reg = 1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	75fb      	strb	r3, [r7, #23]
			break;
 8001a40:	e00e      	b.n	8001a60 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case FRONT_RIGHT:
			reg = 2;
 8001a42:	2302      	movs	r3, #2
 8001a44:	75fb      	strb	r3, [r7, #23]
			break;
 8001a46:	e00b      	b.n	8001a60 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_LEFT:
			reg = 3;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	75fb      	strb	r3, [r7, #23]
			break;
 8001a4c:	e008      	b.n	8001a60 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_RIGHT:
			reg = 4;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	75fb      	strb	r3, [r7, #23]
			break;
 8001a52:	e005      	b.n	8001a60 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case CENTER:
			reg = 5;
 8001a54:	2305      	movs	r3, #5
 8001a56:	75fb      	strb	r3, [r7, #23]
			break;
 8001a58:	e002      	b.n	8001a60 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case SUBWOOFER:
			reg = 6;
 8001a5a:	2306      	movs	r3, #6
 8001a5c:	75fb      	strb	r3, [r7, #23]
			break;
 8001a5e:	bf00      	nop
	}

	// Clamp the volume to the upper limit
	if ( volume > 127 ) {
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b7f      	cmp	r3, #127	; 0x7f
 8001a64:	dd01      	ble.n	8001a6a <_ZN11DAC_PCM168116setChannelVolumeEii+0x62>
		volume = 127;
 8001a66:	237f      	movs	r3, #127	; 0x7f
 8001a68:	607b      	str	r3, [r7, #4]
	}

	uint8_t volumeLevel = volume + 128;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	3b80      	subs	r3, #128	; 0x80
 8001a70:	75bb      	strb	r3, [r7, #22]
//	mDevice->writeRegister( reg, volumeLevel );
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <_ZN11DAC_PCM16819setVolumeEi>:

void
DAC_PCM1681::setVolume( int volume ) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
	setChannelVolume( FRONT_LEFT, volume );
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	3328      	adds	r3, #40	; 0x28
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	2100      	movs	r1, #0
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	4798      	blx	r3
	setChannelVolume( FRONT_RIGHT, volume );
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	3328      	adds	r3, #40	; 0x28
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
	setChannelVolume( REAR_LEFT, volume );
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3328      	adds	r3, #40	; 0x28
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	4798      	blx	r3
	setChannelVolume( REAR_RIGHT, volume );
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	3328      	adds	r3, #40	; 0x28
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	2103      	movs	r1, #3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	4798      	blx	r3
	setChannelVolume( CENTER, volume );
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3328      	adds	r3, #40	; 0x28
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	4798      	blx	r3
	setChannelVolume( SUBWOOFER, volume );
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3328      	adds	r3, #40	; 0x28
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	2105      	movs	r1, #5
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	4798      	blx	r3
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_ZN11DAC_PCM168111muteChannelEib>:

void
DAC_PCM1681::muteChannel( int channel, bool enable ) {
 8001aee:	b480      	push	{r7}
 8001af0:	b087      	sub	sp, #28
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	4613      	mov	r3, r2
 8001afa:	71fb      	strb	r3, [r7, #7]
	uint8_t mask =  ( 1 << ( channel ) );
 8001afc:	2201      	movs	r2, #1
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	75fb      	strb	r3, [r7, #23]
	if ( enable ) {
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <_ZN11DAC_PCM168111muteChannelEib+0x2e>
		// enable the bit representing this channel
		mMuteStatus = mMuteStatus & mask;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	7b1a      	ldrb	r2, [r3, #12]
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	4013      	ands	r3, r2
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	731a      	strb	r2, [r3, #12]
		// disable the bit representing the channel
		mMuteStatus = mMuteStatus & ~mask;
	}

	//mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
}
 8001b1a:	e00b      	b.n	8001b34 <_ZN11DAC_PCM168111muteChannelEib+0x46>
		mMuteStatus = mMuteStatus & ~mask;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	7b1b      	ldrb	r3, [r3, #12]
 8001b20:	b25a      	sxtb	r2, r3
 8001b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	b25b      	sxtb	r3, r3
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	b25b      	sxtb	r3, r3
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	731a      	strb	r2, [r3, #12]
}
 8001b34:	bf00      	nop
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <_ZN11DAC_PCM16814muteEb>:

void
DAC_PCM1681::mute( bool enable ) {
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	460b      	mov	r3, r1
 8001b48:	70fb      	strb	r3, [r7, #3]
	 if ( enable ) {
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <_ZN11DAC_PCM16814muteEb+0x1a>
		 mMuteStatus = 0xff;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	22ff      	movs	r2, #255	; 0xff
 8001b54:	731a      	strb	r2, [r3, #12]
	 } else {
		 mMuteStatus = 0;
	 }

	// mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
}
 8001b56:	e002      	b.n	8001b5e <_ZN11DAC_PCM16814muteEb+0x20>
		 mMuteStatus = 0;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	731a      	strb	r2, [r3, #12]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <_ZN13DecoderEventsC1Ev>:
 *      Author: duane
 */

#include "DecoderEvents.h"

DecoderEvents::DecoderEvents() {
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <_ZN13DecoderEventsC1Ev+0x1c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	08008e08 	.word	0x08008e08

08001b88 <_ZN13DecoderEventsD1Ev>:

DecoderEvents::~DecoderEvents() {
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <_ZN13DecoderEventsD1Ev+0x1c>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	08008e08 	.word	0x08008e08

08001ba8 <_ZN7DisplayC1Ev>:
#include "Display.h"
#include "main.h"
#include <stdio.h>
#include "Debug.h"

Display::Display() : mShouldUpdate( true ), mCurrentScreen( SCREEN_MAIN ), mCurrentVolume( 50 ), mLCD( 0 ) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <_ZN7DisplayC1Ev+0x3c>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	711a      	strb	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2232      	movs	r2, #50	; 0x32
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3318      	adds	r3, #24
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f006 fa7a 	bl	80080cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub

}
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	08008e20 	.word	0x08008e20

08001be8 <_ZN7DisplayD1Ev>:

Display::~Display() {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <_ZN7DisplayD1Ev+0x24>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3318      	adds	r3, #24
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f006 fa6d 	bl	80080da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	// TODO Auto-generated destructor stub
}
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	08008e20 	.word	0x08008e20

08001c10 <_ZN7DisplayD0Ev>:
Display::~Display() {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
}
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ffe5 	bl	8001be8 <_ZN7DisplayD1Ev>
 8001c1e:	2130      	movs	r1, #48	; 0x30
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f006 f9ce 	bl	8007fc2 <_ZdlPvj>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_ZN7Display6updateEv>:

void
Display::update() {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	if ( mShouldUpdate ) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	791b      	ldrb	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00a      	beq.n	8001c56 <_ZN7Display6updateEv+0x26>
		switch( mCurrentScreen ) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d103      	bne.n	8001c50 <_ZN7Display6updateEv+0x20>
			case SCREEN_MAIN:
				updateMainScreen();
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f853 	bl	8001cf4 <_ZN7Display16updateMainScreenEv>
				break;
 8001c4e:	bf00      	nop
		}

		mShouldUpdate = false;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	711a      	strb	r2, [r3, #4]
	}

}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_ZN7Display15setSamplingRateEm>:


void
Display::setSamplingRate( uint32_t samplingRate ) {
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
	// This will happen on another thread, the audio one, so in and out quickly
	if ( samplingRate != mSamplingRate ) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d005      	beq.n	8001c7e <_ZN7Display15setSamplingRateEm+0x20>
		mSamplingRate = samplingRate;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	615a      	str	r2, [r3, #20]
		mShouldUpdate = true;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	711a      	strb	r2, [r3, #4]
	}

}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <_ZN7Display12setAlgorithmENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void
Display::setAlgorithm( const std::string algorithm ) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
	// This will happen on another thread, the audio one, so in and out quickly
	if ( algorithm.compare( mAlgorithm ) != 0 ) {
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3318      	adds	r3, #24
 8001c96:	4619      	mov	r1, r3
 8001c98:	6838      	ldr	r0, [r7, #0]
 8001c9a:	f006 fa2e 	bl	80080fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf14      	ite	ne
 8001ca4:	2301      	movne	r3, #1
 8001ca6:	2300      	moveq	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d008      	beq.n	8001cc0 <_ZN7Display12setAlgorithmENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
		mAlgorithm = algorithm;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3318      	adds	r3, #24
 8001cb2:	6839      	ldr	r1, [r7, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f006 fa16 	bl	80080e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		mShouldUpdate = true;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	711a      	strb	r2, [r3, #4]
	}
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_ZN7Display12updateVolumeEi>:
Display::initialize() {
	DEBUG_STR( "Initializing" );
}

void
Display::updateVolume( int volume ) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	if ( volume != mCurrentVolume ) {
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d002      	beq.n	8001ce2 <_ZN7Display12updateVolumeEi+0x1a>
		//DEBUG_STR( "Adjusting volume" );
		mShouldUpdate = true;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	711a      	strb	r2, [r3, #4]
	}

	mCurrentVolume = volume;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	60da      	str	r2, [r3, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
	...

08001cf4 <_ZN7Display16updateMainScreenEv>:

void
Display::updateMainScreen() {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b094      	sub	sp, #80	; 0x50
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	6078      	str	r0, [r7, #4]
	//DEBUG_STR( "Updating main screen" );

	char s[50];

	mLCD->setCursor( 0, 0 );
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	2200      	movs	r2, #0
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 f9ff 	bl	8003108 <_ZN3LCD9setCursorEhh>
	sprintf( s, "Volume %-3d          ", mCurrentVolume );
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	493f      	ldr	r1, [pc, #252]	; (8001e10 <_ZN7Display16updateMainScreenEv+0x11c>)
 8001d14:	4618      	mov	r0, r3
 8001d16:	f006 fc5d 	bl	80085d4 <siprintf>
	mLCD->writeString( s );
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f107 020c 	add.w	r2, r7, #12
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f001 fa2d 	bl	8003184 <_ZN3LCD11writeStringEPc>

	mLCD->setCursor( 0, 1 );
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f001 f9e8 	bl	8003108 <_ZN3LCD9setCursorEhh>
	sprintf( s, "                     ", mCurrentVolume );
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	4934      	ldr	r1, [pc, #208]	; (8001e14 <_ZN7Display16updateMainScreenEv+0x120>)
 8001d42:	4618      	mov	r0, r3
 8001d44:	f006 fc46 	bl	80085d4 <siprintf>
	mLCD->writeString( s );
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	f107 020c 	add.w	r2, r7, #12
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fa16 	bl	8003184 <_ZN3LCD11writeStringEPc>

	if ( mAlgorithm.length() && mSamplingRate ) {
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3318      	adds	r3, #24
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f006 f9c8 	bl	80080f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <_ZN7Display16updateMainScreenEv+0x80>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <_ZN7Display16updateMainScreenEv+0x80>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <_ZN7Display16updateMainScreenEv+0x82>
 8001d74:	2300      	movs	r3, #0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d030      	beq.n	8001ddc <_ZN7Display16updateMainScreenEv+0xe8>
		mLCD->setCursor( 0, 2 );
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 f9c0 	bl	8003108 <_ZN3LCD9setCursorEhh>
		int intPart = mSamplingRate / 1000;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <_ZN7Display16updateMainScreenEv+0x124>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	099b      	lsrs	r3, r3, #6
 8001d94:	647b      	str	r3, [r7, #68]	; 0x44
		int fracPart = ( mSamplingRate - ( intPart * 1000 ) ) / 100;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001da0:	fb01 f202 	mul.w	r2, r1, r2
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <_ZN7Display16updateMainScreenEv+0x128>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	095b      	lsrs	r3, r3, #5
 8001dae:	643b      	str	r3, [r7, #64]	; 0x40
		sprintf( s, "%-5s        %d.%dkHz", mAlgorithm.c_str(), intPart, fracPart );
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3318      	adds	r3, #24
 8001db4:	4618      	mov	r0, r3
 8001db6:	f006 f99e 	bl	80080f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	f107 000c 	add.w	r0, r7, #12
 8001dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc6:	4916      	ldr	r1, [pc, #88]	; (8001e20 <_ZN7Display16updateMainScreenEv+0x12c>)
 8001dc8:	f006 fc04 	bl	80085d4 <siprintf>
		mLCD->writeString( s );
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f107 020c 	add.w	r2, r7, #12
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 f9d4 	bl	8003184 <_ZN3LCD11writeStringEPc>
	}

	mLCD->setCursor( 0, 3 );
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2203      	movs	r2, #3
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f001 f98f 	bl	8003108 <_ZN3LCD9setCursorEhh>
	sprintf( s, "6-Ch         Digital" );
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	490d      	ldr	r1, [pc, #52]	; (8001e24 <_ZN7Display16updateMainScreenEv+0x130>)
 8001df0:	4618      	mov	r0, r3
 8001df2:	f006 fbef 	bl	80085d4 <siprintf>
	mLCD->writeString( s );
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f107 020c 	add.w	r2, r7, #12
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f001 f9bf 	bl	8003184 <_ZN3LCD11writeStringEPc>
}
 8001e06:	bf00      	nop
 8001e08:	3748      	adds	r7, #72	; 0x48
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	08008ca4 	.word	0x08008ca4
 8001e14:	08008cbc 	.word	0x08008cbc
 8001e18:	10624dd3 	.word	0x10624dd3
 8001e1c:	51eb851f 	.word	0x51eb851f
 8001e20:	08008cd4 	.word	0x08008cd4
 8001e24:	08008cec 	.word	0x08008cec

08001e28 <_ZN12DolbyDecoderC1Ev>:
 *      Author: duane
 */

#include "DolbyDecoder.h"

DolbyDecoder::DolbyDecoder() {
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <_ZN12DolbyDecoderC1Ev+0x1c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	08008e30 	.word	0x08008e30

08001e48 <_ZN12DolbyDecoderD1Ev>:

DolbyDecoder::~DolbyDecoder() {
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <_ZN12DolbyDecoderD1Ev+0x1c>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	08008e30 	.word	0x08008e30

08001e68 <_ZN19DolbyDecoder_STA31015setEventHandlerEP13DecoderEvents>:
	} REGISTERS;

	DolbyDecoder_STA310( I2C_Device *device  );
	virtual ~DolbyDecoder_STA310();

	virtual void setEventHandler( DecoderEvents *handler ) { mEventHandler = handler; }
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <_ZN19DolbyDecoder_STA31013isInitializedEv>:
	virtual void initialize();
	virtual void mute( bool enable = true );
	virtual void run();
	virtual void play( bool enable = true );

	virtual bool isInitialized() { return mInitialized; }
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7a1b      	ldrb	r3, [r3, #8]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device>:
 *      Author: duane
 */

#include "DolbyDecoderSTA310.h"

DolbyDecoder_STA310::DolbyDecoder_STA310( I2C_Device *device ) :
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
	mDevice( device ), mInitialized( false ), mMuted( false ), mRunning( false ), mPlaying( false ), mEventHandler( 0 ), mIdent( 0 ), mSoftwareVersion( 0 ) {
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ffbf 	bl	8001e28 <_ZN12DolbyDecoderC1Ev>
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <_ZN19DolbyDecoder_STA310C1EP10I2C_Device+0x54>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	721a      	strb	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	725a      	strb	r2, [r3, #9]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	729a      	strb	r2, [r3, #10]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	72da      	strb	r2, [r3, #11]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	741a      	strb	r2, [r3, #16]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	745a      	strb	r2, [r3, #17]
	// TODO Auto-generated constructor stub

}
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	08008e60 	.word	0x08008e60

08001ef0 <_ZN19DolbyDecoder_STA310D1Ev>:

DolbyDecoder_STA310::~DolbyDecoder_STA310() {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <_ZN19DolbyDecoder_STA310D1Ev+0x20>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ffa1 	bl	8001e48 <_ZN12DolbyDecoderD1Ev>
	// TODO Auto-generated destructor stub
}
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	08008e60 	.word	0x08008e60

08001f14 <_ZN19DolbyDecoder_STA310D0Ev>:
DolbyDecoder_STA310::~DolbyDecoder_STA310() {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
}
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ffe7 	bl	8001ef0 <_ZN19DolbyDecoder_STA310D1Ev>
 8001f22:	2118      	movs	r1, #24
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f006 f84c 	bl	8007fc2 <_ZdlPvj>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_ZN19DolbyDecoder_STA3104muteEb>:



void
DolbyDecoder_STA310::mute( bool enable ) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00a      	beq.n	8001f5c <_ZN19DolbyDecoder_STA3104muteEb+0x28>
		mDevice->writeRegister( DolbyDecoder_STA310::MUTE, 1 );
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6858      	ldr	r0, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3318      	adds	r3, #24
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2201      	movs	r2, #1
 8001f56:	2114      	movs	r1, #20
 8001f58:	4798      	blx	r3
 8001f5a:	e009      	b.n	8001f70 <_ZN19DolbyDecoder_STA3104muteEb+0x3c>
	} else {
		mDevice->writeRegister( DolbyDecoder_STA310::MUTE, 0 );
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6858      	ldr	r0, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3318      	adds	r3, #24
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2114      	movs	r1, #20
 8001f6e:	4798      	blx	r3
	}

	mMuted = enable;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	725a      	strb	r2, [r3, #9]
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <_ZN19DolbyDecoder_STA3104playEb>:

void
DolbyDecoder_STA310::play( bool enable ) {
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <_ZN19DolbyDecoder_STA3104playEb+0x28>
		mDevice->writeRegister( DolbyDecoder_STA310::PLAY, 1 );
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6858      	ldr	r0, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3318      	adds	r3, #24
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	2113      	movs	r1, #19
 8001fa2:	4798      	blx	r3
 8001fa4:	e009      	b.n	8001fba <_ZN19DolbyDecoder_STA3104playEb+0x3c>
	} else {
		mDevice->writeRegister( DolbyDecoder_STA310::PLAY, 0 );
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6858      	ldr	r0, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3318      	adds	r3, #24
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2113      	movs	r1, #19
 8001fb8:	4798      	blx	r3
	}

	mPlaying = enable;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	72da      	strb	r2, [r3, #11]
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_ZN19DolbyDecoder_STA3103runEv>:

void
DolbyDecoder_STA310::run() {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	if ( !mRunning ) {
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7a9b      	ldrb	r3, [r3, #10]
 8001fd4:	f083 0301 	eor.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00c      	beq.n	8001ff8 <_ZN19DolbyDecoder_STA3103runEv+0x30>
		mDevice->writeRegister( DolbyDecoder_STA310::RUN, 1 );
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6858      	ldr	r0, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3318      	adds	r3, #24
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2201      	movs	r2, #1
 8001fee:	2172      	movs	r1, #114	; 0x72
 8001ff0:	4798      	blx	r3
		mRunning = true;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	729a      	strb	r2, [r3, #10]
		// We are now running, the only way to stop is to do a reset of the chip
	}
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>:

void
DolbyDecoder_STA310::enableAudioPLL() {
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	mDevice->writeRegister( DolbyDecoder_STA310::ENABLE_PLL, 1 );
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6858      	ldr	r0, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3318      	adds	r3, #24
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2201      	movs	r2, #1
 8002018:	21b5      	movs	r1, #181	; 0xb5
 800201a:	4798      	blx	r3
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <_ZN19DolbyDecoder_STA31010initializeEv>:

void
DolbyDecoder_STA310::initialize() {
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( DECODER_RESET_GPIO_Port, DECODER_RESET_Pin, GPIO_PIN_RESET );
 800202c:	2200      	movs	r2, #0
 800202e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002032:	4889      	ldr	r0, [pc, #548]	; (8002258 <_ZN19DolbyDecoder_STA31010initializeEv+0x234>)
 8002034:	f002 fb77 	bl	8004726 <HAL_GPIO_WritePin>
	HAL_Delay( 100 );
 8002038:	2064      	movs	r0, #100	; 0x64
 800203a:	f002 f897 	bl	800416c <HAL_Delay>
	HAL_GPIO_WritePin( DECODER_RESET_GPIO_Port, DECODER_RESET_Pin, GPIO_PIN_SET );
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002044:	4884      	ldr	r0, [pc, #528]	; (8002258 <_ZN19DolbyDecoder_STA31010initializeEv+0x234>)
 8002046:	f002 fb6e 	bl	8004726 <HAL_GPIO_WritePin>
	HAL_Delay( 1000 );
 800204a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800204e:	f002 f88d 	bl	800416c <HAL_Delay>

	softReset();
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa5f 	bl	8002516 <_ZN19DolbyDecoder_STA3109softResetEv>

	if ( mInitialized ) {
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7a1b      	ldrb	r3, [r3, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80f7 	beq.w	8002250 <_ZN19DolbyDecoder_STA31010initializeEv+0x22c>
		// perform startup routine
		mIdent = mDevice->readRegister( DolbyDecoder_STA310::IDENT );
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	331c      	adds	r3, #28
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2101      	movs	r1, #1
 8002072:	4610      	mov	r0, r2
 8002074:	4798      	blx	r3
 8002076:	4603      	mov	r3, r0
 8002078:	b2da      	uxtb	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	741a      	strb	r2, [r3, #16]
		mSoftwareVersion = mDevice->readRegister( DolbyDecoder_STA310::SOFTVER );
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	331c      	adds	r3, #28
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2171      	movs	r1, #113	; 0x71
 800208e:	4610      	mov	r0, r2
 8002090:	4798      	blx	r3
 8002092:	4603      	mov	r3, r0
 8002094:	b2da      	uxtb	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	745a      	strb	r2, [r3, #17]

		// Enable the AUDIO PLL
		enableAudioPLL();
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ffb0 	bl	8002000 <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>
		configureAudioPLL();
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fa2f 	bl	8002504 <_ZN19DolbyDecoder_STA31017configureAudioPLLEv>

		configureInterrupts();
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f907 	bl	80022ba <_ZN19DolbyDecoder_STA31019configureInterruptsEv>
		configureSync();
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f920 	bl	80022f2 <_ZN19DolbyDecoder_STA31013configureSyncEv>
		configurePCMOUT();
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f8d2 	bl	800225c <_ZN19DolbyDecoder_STA31015configurePCMOUTEv>
		configureSPDIF();
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f9a5 	bl	8002408 <_ZN19DolbyDecoder_STA31014configureSPDIFEv>
		configureDecoder();
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f952 	bl	8002368 <_ZN19DolbyDecoder_STA31016configureDecoderEv>
		configureAC3();
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f9c5 	bl	8002454 <_ZN19DolbyDecoder_STA31012configureAC3Ev>

		//write_host_reg (0x4E,20); ..... write_host_reg (0x63,20); ..... write_host_reg (0x67,0);

		mDevice->writeRegister( DolbyDecoder_STA310::OCFG, 64 + 3 );
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6858      	ldr	r0, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3318      	adds	r3, #24
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2243      	movs	r2, #67	; 0x43
 80020da:	2166      	movs	r1, #102	; 0x66
 80020dc:	4798      	blx	r3

		int volume = 20;
 80020de:	2314      	movs	r3, #20
 80020e0:	60fb      	str	r3, [r7, #12]
		mDevice->writeRegister( 0x4e, volume );
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6858      	ldr	r0, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	3318      	adds	r3, #24
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	214e      	movs	r1, #78	; 0x4e
 80020f6:	4798      	blx	r3
		mDevice->writeRegister( 0x63, volume );
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6858      	ldr	r0, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3318      	adds	r3, #24
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	2163      	movs	r1, #99	; 0x63
 800210c:	4798      	blx	r3
		mDevice->writeRegister( 0x67, 0 );
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6858      	ldr	r0, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3318      	adds	r3, #24
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	2167      	movs	r1, #103	; 0x67
 8002120:	4798      	blx	r3

		mute();
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3310      	adds	r3, #16
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2101      	movs	r1, #1
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3

		while ( mDevice->readRegister( 0x67 ) == 4 ) HAL_Delay( 1 );
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	331c      	adds	r3, #28
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2167      	movs	r1, #103	; 0x67
 8002140:	4610      	mov	r0, r2
 8002142:	4798      	blx	r3
 8002144:	4603      	mov	r3, r0
 8002146:	2b04      	cmp	r3, #4
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <_ZN19DolbyDecoder_STA31010initializeEv+0x138>
 8002154:	2001      	movs	r0, #1
 8002156:	f002 f809 	bl	800416c <HAL_Delay>
 800215a:	e7e9      	b.n	8002130 <_ZN19DolbyDecoder_STA31010initializeEv+0x10c>

		mDevice->writeRegister( 0x4e, volume );
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6858      	ldr	r0, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3318      	adds	r3, #24
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	214e      	movs	r1, #78	; 0x4e
 8002170:	4798      	blx	r3
		mDevice->writeRegister( 0x63, volume );
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6858      	ldr	r0, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3318      	adds	r3, #24
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	2163      	movs	r1, #99	; 0x63
 8002186:	4798      	blx	r3
		mDevice->writeRegister( 0x67, 1 );
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6858      	ldr	r0, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3318      	adds	r3, #24
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2201      	movs	r2, #1
 8002198:	2167      	movs	r1, #103	; 0x67
 800219a:	4798      	blx	r3

		mute();
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3310      	adds	r3, #16
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	4798      	blx	r3

		while ( mDevice->readRegister( 0x67 ) == 4 ) HAL_Delay( 1 );
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	331c      	adds	r3, #28
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2167      	movs	r1, #103	; 0x67
 80021ba:	4610      	mov	r0, r2
 80021bc:	4798      	blx	r3
 80021be:	4603      	mov	r3, r0
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	bf0c      	ite	eq
 80021c4:	2301      	moveq	r3, #1
 80021c6:	2300      	movne	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <_ZN19DolbyDecoder_STA31010initializeEv+0x1b2>
 80021ce:	2001      	movs	r0, #1
 80021d0:	f001 ffcc 	bl	800416c <HAL_Delay>
 80021d4:	e7e9      	b.n	80021aa <_ZN19DolbyDecoder_STA31010initializeEv+0x186>

		mDevice->writeRegister( 0x4e, volume );
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6858      	ldr	r0, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3318      	adds	r3, #24
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	214e      	movs	r1, #78	; 0x4e
 80021ea:	4798      	blx	r3
		mDevice->writeRegister( 0x63, volume );
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6858      	ldr	r0, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3318      	adds	r3, #24
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	2163      	movs	r1, #99	; 0x63
 8002200:	4798      	blx	r3
		mDevice->writeRegister( 0x67, 2 );
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6858      	ldr	r0, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3318      	adds	r3, #24
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2202      	movs	r2, #2
 8002212:	2167      	movs	r1, #103	; 0x67
 8002214:	4798      	blx	r3

		while ( mDevice->readRegister( 0x67 ) == 4 ) HAL_Delay( 1 );
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	331c      	adds	r3, #28
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2167      	movs	r1, #103	; 0x67
 8002226:	4610      	mov	r0, r2
 8002228:	4798      	blx	r3
 800222a:	4603      	mov	r3, r0
 800222c:	2b04      	cmp	r3, #4
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <_ZN19DolbyDecoder_STA31010initializeEv+0x21e>
 800223a:	2001      	movs	r0, #1
 800223c:	f001 ff96 	bl	800416c <HAL_Delay>
 8002240:	e7e9      	b.n	8002216 <_ZN19DolbyDecoder_STA31010initializeEv+0x1f2>

		mute();
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3310      	adds	r3, #16
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2101      	movs	r1, #1
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
	//	run();

		// To start actual decoding and DAC playing, we need to run play().  But we need to configure the DAC first
	//	play();
	}
}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40011000 	.word	0x40011000

0800225c <_ZN19DolbyDecoder_STA31015configurePCMOUTEv>:

void
DolbyDecoder_STA310::configurePCMOUT() {
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	// Set SPDIF configuration register
	mDevice->writeRegister( DolbyDecoder_STA310::SPDIF_CONF, 1 );
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6858      	ldr	r0, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3318      	adds	r3, #24
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2201      	movs	r2, #1
 8002274:	2160      	movs	r1, #96	; 0x60
 8002276:	4798      	blx	r3

	// Set PCM clock divider to support 384*Fs as 32 bits //
	mDevice->writeRegister( DolbyDecoder_STA310::PCM_DIV, 1 );
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6858      	ldr	r0, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3318      	adds	r3, #24
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2201      	movs	r2, #1
 8002288:	2154      	movs	r1, #84	; 0x54
 800228a:	4798      	blx	r3
	//mDevice->writeRegister( DolbyDecoder_STA310::PCM_DIV, 2 );

	// Set for 24 bit data ??
	int SONY = 8;
 800228c:	2308      	movs	r3, #8
 800228e:	617b      	str	r3, [r7, #20]
	int I2S = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]

	int BIT24 = 3;
 8002294:	2303      	movs	r3, #3
 8002296:	60fb      	str	r3, [r7, #12]
	int RPAD = 32;
 8002298:	2320      	movs	r3, #32
 800229a:	60bb      	str	r3, [r7, #8]
	mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, BIT24);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6858      	ldr	r0, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3318      	adds	r3, #24
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	2155      	movs	r1, #85	; 0x55
 80022b0:	4798      	blx	r3
	//mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 3 );
	//mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 35 + 8 );
	//mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 35 );
	//mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 3 );
	//mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 3 );
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <_ZN19DolbyDecoder_STA31019configureInterruptsEv>:

void
DolbyDecoder_STA310::configureInterrupts() {
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
	mDevice->writeRegister( DolbyDecoder_STA310::INT1, DolbyDecoder_STA310::ERR | DolbyDecoder_STA310::SFR );
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6858      	ldr	r0, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3318      	adds	r3, #24
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	220c      	movs	r2, #12
 80022d2:	2107      	movs	r1, #7
 80022d4:	4798      	blx	r3
	mDevice->writeRegister( DolbyDecoder_STA310::INT2, DolbyDecoder_STA310::RST | DolbyDecoder_STA310::LCK );
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6858      	ldr	r0, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3318      	adds	r3, #24
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2230      	movs	r2, #48	; 0x30
 80022e6:	2108      	movs	r1, #8
 80022e8:	4798      	blx	r3
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <_ZN19DolbyDecoder_STA31013configureSyncEv>:

void
DolbyDecoder_STA310::configureSync() {
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
	// Only 1 packet needed to synchronize stream
	mDevice->writeRegister( DolbyDecoder_STA310::PACKET_LOCK, 0 );
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6858      	ldr	r0, [r3, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3318      	adds	r3, #24
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2200      	movs	r2, #0
 800230a:	214f      	movs	r1, #79	; 0x4f
 800230c:	4798      	blx	r3

	// Only 1 packet for synchronization lock
	mDevice->writeRegister( DolbyDecoder_STA310::SYNC_LOCK, 0 );
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6858      	ldr	r0, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3318      	adds	r3, #24
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2200      	movs	r2, #0
 800231e:	2153      	movs	r1, #83	; 0x53
 8002320:	4798      	blx	r3

	// Disable only decoding one particular audio stream (i.e decode them all)
	mDevice->writeRegister( DolbyDecoder_STA310::ID_EN, 0 );
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6858      	ldr	r0, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3318      	adds	r3, #24
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	2150      	movs	r1, #80	; 0x50
 8002334:	4798      	blx	r3

	// Should be ignored if the ID_EN is set to 0, but also set ID of channel to 0
	mDevice->writeRegister( DolbyDecoder_STA310::ID, 0 );
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6858      	ldr	r0, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3318      	adds	r3, #24
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2200      	movs	r2, #0
 8002346:	2151      	movs	r1, #81	; 0x51
 8002348:	4798      	blx	r3

	// Should be ignored if the ID_EN is set to 0, but also set ID extended to 0
	mDevice->writeRegister( DolbyDecoder_STA310::ID_EXT, 0 );
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6858      	ldr	r0, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	3318      	adds	r3, #24
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2200      	movs	r2, #0
 800235a:	2152      	movs	r1, #82	; 0x52
 800235c:	4798      	blx	r3

}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <_ZN19DolbyDecoder_STA31016configureDecoderEv>:

void
DolbyDecoder_STA310::configureDecoder() {
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	// Set for SPDIF data format
	mDevice->writeRegister( DolbyDecoder_STA310::STREAM_SEL, 5 );
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6858      	ldr	r0, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3318      	adds	r3, #24
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2205      	movs	r2, #5
 8002380:	214c      	movs	r1, #76	; 0x4c
 8002382:	4798      	blx	r3
	// Set for Dolby Digital
	//mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, 0 );
	//mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, 0 );

	// Beep
	mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, 7 );
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6858      	ldr	r0, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3318      	adds	r3, #24
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2207      	movs	r2, #7
 8002394:	214d      	movs	r1, #77	; 0x4d
 8002396:	4798      	blx	r3

	if ( mEventHandler ) {
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d02d      	beq.n	80023fc <_ZN19DolbyDecoder_STA31016configureDecoderEv+0x94>
		mEventHandler->onAlgorithmChange( std::string( "AC3" ) );
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68dd      	ldr	r5, [r3, #12]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	330c      	adds	r3, #12
 80023ac:	681c      	ldr	r4, [r3, #0]
 80023ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b2:	4618      	mov	r0, r3
 80023b4:	f005 fe1b 	bl	8007fee <_ZNSaIcEC1Ev>
 80023b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80023bc:	f107 030c 	add.w	r3, r7, #12
 80023c0:	4910      	ldr	r1, [pc, #64]	; (8002404 <_ZN19DolbyDecoder_STA31016configureDecoderEv+0x9c>)
 80023c2:	4618      	mov	r0, r3
 80023c4:	f005 fefe 	bl	80081c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	4619      	mov	r1, r3
 80023ce:	4628      	mov	r0, r5
 80023d0:	47a0      	blx	r4
 80023d2:	f107 030c 	add.w	r3, r7, #12
 80023d6:	4618      	mov	r0, r3
 80023d8:	f005 fe7f 	bl	80080da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80023dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e0:	4618      	mov	r0, r3
 80023e2:	f005 fe05 	bl	8007ff0 <_ZNSaIcED1Ev>
		mEventHandler->onSamplingRateChange( 48000 );
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3308      	adds	r3, #8
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f64b 3180 	movw	r1, #48000	; 0xbb80
 80023f8:	4610      	mov	r0, r2
 80023fa:	4798      	blx	r3
	}
}
 80023fc:	bf00      	nop
 80023fe:	3728      	adds	r7, #40	; 0x28
 8002400:	46bd      	mov	sp, r7
 8002402:	bdb0      	pop	{r4, r5, r7, pc}
 8002404:	08008d04 	.word	0x08008d04

08002408 <_ZN19DolbyDecoder_STA31014configureSPDIFEv>:

void
DolbyDecoder_STA310::configureSPDIF() {
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	// Configure the use of the SPDIF input and serial
	mDevice->writeRegister( DolbyDecoder_STA310::SIN_SETUP, 11 );
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6858      	ldr	r0, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	3318      	adds	r3, #24
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	220b      	movs	r2, #11
 8002420:	210c      	movs	r1, #12
 8002422:	4798      	blx	r3

	// Must be set to 2 for SPDIF
	mDevice->writeRegister( DolbyDecoder_STA310::CAN_SETUP, 0 );
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6858      	ldr	r0, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3318      	adds	r3, #24
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	210d      	movs	r1, #13
 8002436:	4798      	blx	r3
	//mDevice->writeRegister( DolbyDecoder_STA310::CAN_SETUP, 0 );

	mDevice->writeRegister( DolbyDecoder_STA310::PLL_CTRL, 30 );
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6858      	ldr	r0, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3318      	adds	r3, #24
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	221e      	movs	r2, #30
 8002448:	2112      	movs	r1, #18
 800244a:	4798      	blx	r3
	// Enable auto detection on the stream
	//mDevice->writeRegister( DolbyDecoder_STA310::AUTODETECT_ENA, 1 );

	// Set SPDIF auto-detection sensitivity
	//mDevice->writeRegister( DolbyDecoder_STA310::AUTODETECT_SENS, 0 );
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_ZN19DolbyDecoder_STA31012configureAC3Ev>:

void
DolbyDecoder_STA310::configureAC3() {
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	// Enable LFE
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DECODE_LFE, 1 );
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6858      	ldr	r0, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3318      	adds	r3, #24
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2201      	movs	r2, #1
 800246c:	2168      	movs	r1, #104	; 0x68
 800246e:	4798      	blx	r3

	// Configure for line out or spreakers
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_COMP_MOD, 2 );
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6858      	ldr	r0, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3318      	adds	r3, #24
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2202      	movs	r2, #2
 8002480:	2169      	movs	r1, #105	; 0x69
 8002482:	4798      	blx	r3

	// Full dynamic range for loud sounds
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_HDR, 255 );
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6858      	ldr	r0, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3318      	adds	r3, #24
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	22ff      	movs	r2, #255	; 0xff
 8002494:	216a      	movs	r1, #106	; 0x6a
 8002496:	4798      	blx	r3

	// Don't boost low signals
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_LDR, 255 );
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6858      	ldr	r0, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3318      	adds	r3, #24
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	22ff      	movs	r2, #255	; 0xff
 80024a8:	216b      	movs	r1, #107	; 0x6b
 80024aa:	4798      	blx	r3

	// Mute audio output if stream errors are detected
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_RPC, 0 );
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6858      	ldr	r0, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3318      	adds	r3, #24
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2200      	movs	r2, #0
 80024bc:	216c      	movs	r1, #108	; 0x6c
 80024be:	4798      	blx	r3

	// Karaoke aware
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_KARAOKE, 0 );
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6858      	ldr	r0, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3318      	adds	r3, #24
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	216d      	movs	r1, #109	; 0x6d
 80024d2:	4798      	blx	r3

	// Output dual mode streams as stereo
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DUALMODE, 0 );
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6858      	ldr	r0, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3318      	adds	r3, #24
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2200      	movs	r2, #0
 80024e4:	216e      	movs	r1, #110	; 0x6e
 80024e6:	4798      	blx	r3

	// Set for a 5.1 downmix - this is useful to change if certain speakers are missing
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DOWNMIX, 7 );
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6858      	ldr	r0, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3318      	adds	r3, #24
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2207      	movs	r2, #7
 80024f8:	216f      	movs	r1, #111	; 0x6f
 80024fa:	4798      	blx	r3
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <_ZN19DolbyDecoder_STA31017configureAudioPLLEv>:

void
DolbyDecoder_STA310::configureAudioPLL() {
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	// Our DAC supports 384*FS, so nothing to do here
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <_ZN19DolbyDecoder_STA3109softResetEv>:

void
DolbyDecoder_STA310::softReset() {
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
	mInitialized = false;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	721a      	strb	r2, [r3, #8]
	mRunning = false;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	729a      	strb	r2, [r3, #10]

	// Perform soft mute on incoming framers
	mDevice->writeRegister( DolbyDecoder_STA310::SOFT_MUTE, 1 );
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6858      	ldr	r0, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3318      	adds	r3, #24
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2201      	movs	r2, #1
 800253a:	2173      	movs	r1, #115	; 0x73
 800253c:	4798      	blx	r3

	// Perform soft reset
	mDevice->writeRegister( DolbyDecoder_STA310::SOFT_RESET, 1 );
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6858      	ldr	r0, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3318      	adds	r3, #24
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	2110      	movs	r1, #16
 8002550:	4798      	blx	r3

	// Write magical breakpoint register
	mDevice->writeRegister( DolbyDecoder_STA310::BREAKPOINT, 8 );
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6858      	ldr	r0, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3318      	adds	r3, #24
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2208      	movs	r2, #8
 8002562:	212b      	movs	r1, #43	; 0x2b
 8002564:	4798      	blx	r3

	// Write clock command
	mDevice->writeRegister( DolbyDecoder_STA310::CLOCK_CMD, 0 );
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6858      	ldr	r0, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3318      	adds	r3, #24
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	213a      	movs	r1, #58	; 0x3a
 8002578:	4798      	blx	r3

	int attempts = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
	while ( attempts < 20 && !mInitialized ) {
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b13      	cmp	r3, #19
 8002582:	dc1d      	bgt.n	80025c0 <_ZN19DolbyDecoder_STA3109softResetEv+0xaa>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	7a1b      	ldrb	r3, [r3, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d119      	bne.n	80025c0 <_ZN19DolbyDecoder_STA3109softResetEv+0xaa>
		// We need to check for the device to say it's ready
		I2C_RESULT result = mDevice->readRegister( 0xff );
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	331c      	adds	r3, #28
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	21ff      	movs	r1, #255	; 0xff
 800259c:	4610      	mov	r0, r2
 800259e:	4798      	blx	r3
 80025a0:	4603      	mov	r3, r0
 80025a2:	827b      	strh	r3, [r7, #18]
		if ( result == 1 ) {
 80025a4:	8a7b      	ldrh	r3, [r7, #18]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d103      	bne.n	80025b2 <_ZN19DolbyDecoder_STA3109softResetEv+0x9c>
			// Device is ready
			mInitialized = true;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	721a      	strb	r2, [r3, #8]
 80025b0:	e7e5      	b.n	800257e <_ZN19DolbyDecoder_STA3109softResetEv+0x68>
		} else {
			attempts++;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
			// if it's not ready, let's wait 5ms and try again
			HAL_Delay( 10 );
 80025b8:	200a      	movs	r0, #10
 80025ba:	f001 fdd7 	bl	800416c <HAL_Delay>
	while ( attempts < 20 && !mInitialized ) {
 80025be:	e7de      	b.n	800257e <_ZN19DolbyDecoder_STA3109softResetEv+0x68>
		}
	}

	if ( !mInitialized ) {
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7a1b      	ldrb	r3, [r3, #8]
 80025c4:	f083 0301 	eor.w	r3, r3, #1
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <_ZN19DolbyDecoder_STA3109softResetEv+0xbc>
		// this is an error condition we should deal with
		int i;
		i = 10;
 80025ce:	230a      	movs	r3, #10
 80025d0:	60fb      	str	r3, [r7, #12]
	}
}
 80025d2:	bf00      	nop
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <_ZN19DolbyDecoder_STA31017checkForInterruptEv>:

void
DolbyDecoder_STA310::checkForInterrupt() {
 80025dc:	b5b0      	push	{r4, r5, r7, lr}
 80025de:	b09e      	sub	sp, #120	; 0x78
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	if ( !HAL_GPIO_ReadPin ( DECODER_IRQ_GPIO_Port, DECODER_IRQ_Pin ) ) {
 80025e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025e8:	4890      	ldr	r0, [pc, #576]	; (800282c <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x250>)
 80025ea:	f002 f885 	bl	80046f8 <HAL_GPIO_ReadPin>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 81ea 	beq.w	80029d4 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3f8>
		// IRQ
		int i;
		i = 1;
 8002600:	2301      	movs	r3, #1
 8002602:	677b      	str	r3, [r7, #116]	; 0x74
		I2C_RESULT int1 = mDevice->readRegister( DolbyDecoder_STA310::INT1_RES );
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	331c      	adds	r3, #28
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2109      	movs	r1, #9
 8002614:	4610      	mov	r0, r2
 8002616:	4798      	blx	r3
 8002618:	4603      	mov	r3, r0
 800261a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		I2C_RESULT int2 = mDevice->readRegister( DolbyDecoder_STA310::INT2_RES );
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	331c      	adds	r3, #28
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	210a      	movs	r1, #10
 800262e:	4610      	mov	r0, r2
 8002630:	4798      	blx	r3
 8002632:	4603      	mov	r3, r0
 8002634:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		if ( int1 & ERR ) {
 8002638:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00e      	beq.n	8002662 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x86>
			// SYN
			I2C_RESULT errorReg = mDevice->readRegister( DolbyDecoder_STA310::ERROR );
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	331c      	adds	r3, #28
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	210f      	movs	r1, #15
 8002654:	4610      	mov	r0, r2
 8002656:	4798      	blx	r3
 8002658:	4603      	mov	r3, r0
 800265a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

			i = 3;
 800265e:	2303      	movs	r3, #3
 8002660:	677b      	str	r3, [r7, #116]	; 0x74
		}
		if ( int1 & HDR ) {
 8002662:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d028      	beq.n	80026c0 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0xe4>
			 I2C_RESULT ac3Status = mDevice->readRegister( DolbyDecoder_STA310::AC3_STATUS_1 );
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	331c      	adds	r3, #28
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2177      	movs	r1, #119	; 0x77
 800267e:	4610      	mov	r0, r2
 8002680:	4798      	blx	r3
 8002682:	4603      	mov	r3, r0
 8002684:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			 I2C_RESULT head3 = mDevice->readRegister( DolbyDecoder_STA310::HEAD_3 );
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	331c      	adds	r3, #28
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2143      	movs	r1, #67	; 0x43
 8002698:	4610      	mov	r0, r2
 800269a:	4798      	blx	r3
 800269c:	4603      	mov	r3, r0
 800269e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			 I2C_RESULT head4 = mDevice->readRegister( DolbyDecoder_STA310::HEAD_4 );
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	331c      	adds	r3, #28
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2142      	movs	r1, #66	; 0x42
 80026b2:	4610      	mov	r0, r2
 80026b4:	4798      	blx	r3
 80026b6:	4603      	mov	r3, r0
 80026b8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

			 i = 2;
 80026bc:	2302      	movs	r3, #2
 80026be:	677b      	str	r3, [r7, #116]	; 0x74
		}
		if ( int1 & SFR ) {
 80026c0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00e      	beq.n	80026ea <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x10e>
			I2C_RESULT freq = mDevice->readRegister( DolbyDecoder_STA310::FREQ );
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	331c      	adds	r3, #28
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2105      	movs	r1, #5
 80026dc:	4610      	mov	r0, r2
 80026de:	4798      	blx	r3
 80026e0:	4603      	mov	r3, r0
 80026e2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			i = 1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	677b      	str	r3, [r7, #116]	; 0x74
		}

		if ( ( int2 & LCK ) > 0 || ( int2 & RST ) > 0 ) {
 80026ea:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	dc06      	bgt.n	8002704 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x128>
 80026f6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f340 8166 	ble.w	80029d0 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3f4>
			 i = 3;
 8002704:	2303      	movs	r3, #3
 8002706:	677b      	str	r3, [r7, #116]	; 0x74
			 mRunning = false;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	729a      	strb	r2, [r3, #10]

			 I2C_RESULT decodeSel = mDevice->readRegister( DolbyDecoder_STA310::DECODE_SEL );
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	331c      	adds	r3, #28
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	214d      	movs	r1, #77	; 0x4d
 800271e:	4610      	mov	r0, r2
 8002720:	4798      	blx	r3
 8002722:	4603      	mov	r3, r0
 8002724:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			 I2C_RESULT streamSel = mDevice->readRegister( DolbyDecoder_STA310::STREAM_SEL );
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	331c      	adds	r3, #28
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	214c      	movs	r1, #76	; 0x4c
 8002738:	4610      	mov	r0, r2
 800273a:	4798      	blx	r3
 800273c:	4603      	mov	r3, r0
 800273e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			 I2C_RESULT freq = mDevice->readRegister( 0x05 );
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	331c      	adds	r3, #28
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2105      	movs	r1, #5
 8002752:	4610      	mov	r0, r2
 8002754:	4798      	blx	r3
 8002756:	4603      	mov	r3, r0
 8002758:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

			 if ( mEventHandler ) {
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d074      	beq.n	800284e <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x272>
				 switch ( freq ) {
 8002764:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002768:	2b10      	cmp	r3, #16
 800276a:	d870      	bhi.n	800284e <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x272>
 800276c:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x198>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	080027b9 	.word	0x080027b9
 8002778:	080027d1 	.word	0x080027d1
 800277c:	080027e9 	.word	0x080027e9
 8002780:	0800284f 	.word	0x0800284f
 8002784:	08002801 	.word	0x08002801
 8002788:	08002817 	.word	0x08002817
 800278c:	0800284f 	.word	0x0800284f
 8002790:	0800284f 	.word	0x0800284f
 8002794:	0800284f 	.word	0x0800284f
 8002798:	0800284f 	.word	0x0800284f
 800279c:	0800284f 	.word	0x0800284f
 80027a0:	0800284f 	.word	0x0800284f
 80027a4:	0800284f 	.word	0x0800284f
 80027a8:	0800284f 	.word	0x0800284f
 80027ac:	0800284f 	.word	0x0800284f
 80027b0:	0800284f 	.word	0x0800284f
 80027b4:	08002839 	.word	0x08002839
				 	 case 0:
				 		 mEventHandler->onSamplingRateChange( 48000 );
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3308      	adds	r3, #8
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f64b 3180 	movw	r1, #48000	; 0xbb80
 80027ca:	4610      	mov	r0, r2
 80027cc:	4798      	blx	r3
				 		 break;
 80027ce:	e03e      	b.n	800284e <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x272>
				 	 case 1:
				 		 mEventHandler->onSamplingRateChange( 44100 );
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3308      	adds	r3, #8
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f64a 4144 	movw	r1, #44100	; 0xac44
 80027e2:	4610      	mov	r0, r2
 80027e4:	4798      	blx	r3
				 		 break;
 80027e6:	e032      	b.n	800284e <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x272>
				 	 case 2:
				 		 mEventHandler->onSamplingRateChange( 32000 );
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3308      	adds	r3, #8
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 80027fa:	4610      	mov	r0, r2
 80027fc:	4798      	blx	r3
				 		 break;
 80027fe:	e026      	b.n	800284e <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x272>
				 	 case 4:
				 		 mEventHandler->onSamplingRateChange( 96000 );
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3308      	adds	r3, #8
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4908      	ldr	r1, [pc, #32]	; (8002830 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x254>)
 8002810:	4610      	mov	r0, r2
 8002812:	4798      	blx	r3
				 		 break;
 8002814:	e01b      	b.n	800284e <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x272>
				 	 case 5:
				 		 mEventHandler->onSamplingRateChange( 88200 );
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	3308      	adds	r3, #8
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4903      	ldr	r1, [pc, #12]	; (8002834 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x258>)
 8002826:	4610      	mov	r0, r2
 8002828:	4798      	blx	r3
				 		 break;
 800282a:	e010      	b.n	800284e <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x272>
 800282c:	40011000 	.word	0x40011000
 8002830:	00017700 	.word	0x00017700
 8002834:	00015888 	.word	0x00015888
				 	 case 16:
				 		 mEventHandler->onSamplingRateChange( 192000 );
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3308      	adds	r3, #8
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4965      	ldr	r1, [pc, #404]	; (80029dc <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x400>)
 8002848:	4610      	mov	r0, r2
 800284a:	4798      	blx	r3
				 		 break;
 800284c:	bf00      	nop
				 }
			}

			softReset();
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff fe61 	bl	8002516 <_ZN19DolbyDecoder_STA3109softResetEv>

			if ( !mInitialized ) {
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7a1b      	ldrb	r3, [r3, #8]
 8002858:	f083 0301 	eor.w	r3, r3, #1
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x28a>
				int a;
				a = 5;
 8002862:	2305      	movs	r3, #5
 8002864:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			configureInterrupts();
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff fd27 	bl	80022ba <_ZN19DolbyDecoder_STA31019configureInterruptsEv>

			//mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, decodeSel );
			//mDevice->writeRegister( DolbyDecoder_STA310::STREAM_SEL, streamSel );

			enableAudioPLL();
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fbc7 	bl	8002000 <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>

			if ( streamSel == 5 && decodeSel == 0 ) {
 8002872:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002876:	2b05      	cmp	r3, #5
 8002878:	d131      	bne.n	80028de <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x302>
 800287a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800287e:	2b00      	cmp	r3, #0
 8002880:	d12d      	bne.n	80028de <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x302>
				// this is a dolby digital stream
				if ( mEventHandler ) {
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d025      	beq.n	80028d6 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x2fa>
					mEventHandler->onAlgorithmChange( std::string( "AC3" ) );
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68dd      	ldr	r5, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	330c      	adds	r3, #12
 8002896:	681c      	ldr	r4, [r3, #0]
 8002898:	f107 0320 	add.w	r3, r7, #32
 800289c:	4618      	mov	r0, r3
 800289e:	f005 fba6 	bl	8007fee <_ZNSaIcEC1Ev>
 80028a2:	f107 0220 	add.w	r2, r7, #32
 80028a6:	f107 0308 	add.w	r3, r7, #8
 80028aa:	494d      	ldr	r1, [pc, #308]	; (80029e0 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x404>)
 80028ac:	4618      	mov	r0, r3
 80028ae:	f005 fc89 	bl	80081c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80028b2:	f107 0308 	add.w	r3, r7, #8
 80028b6:	4619      	mov	r1, r3
 80028b8:	4628      	mov	r0, r5
 80028ba:	47a0      	blx	r4
 80028bc:	f107 0308 	add.w	r3, r7, #8
 80028c0:	4618      	mov	r0, r3
 80028c2:	f005 fc0a 	bl	80080da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80028c6:	f107 0320 	add.w	r3, r7, #32
 80028ca:	4618      	mov	r0, r3
 80028cc:	f005 fb90 	bl	8007ff0 <_ZNSaIcED1Ev>
					configureAC3();
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff fdbf 	bl	8002454 <_ZN19DolbyDecoder_STA31012configureAC3Ev>
				}

				configureAC3();
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff fdbc 	bl	8002454 <_ZN19DolbyDecoder_STA31012configureAC3Ev>
 80028dc:	e064      	b.n	80029a8 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3cc>
			} else if ( streamSel == 3 && decodeSel == 6 ) {
 80028de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d131      	bne.n	800294a <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x36e>
 80028e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d12d      	bne.n	800294a <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x36e>
				// This is a DTS stream
				if ( mEventHandler ) {
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d025      	beq.n	8002942 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x366>
					mEventHandler->onAlgorithmChange( std::string( "DTS" ) );
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68dd      	ldr	r5, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	330c      	adds	r3, #12
 8002902:	681c      	ldr	r4, [r3, #0]
 8002904:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002908:	4618      	mov	r0, r3
 800290a:	f005 fb70 	bl	8007fee <_ZNSaIcEC1Ev>
 800290e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002916:	4933      	ldr	r1, [pc, #204]	; (80029e4 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x408>)
 8002918:	4618      	mov	r0, r3
 800291a:	f005 fc53 	bl	80081c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800291e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002922:	4619      	mov	r1, r3
 8002924:	4628      	mov	r0, r5
 8002926:	47a0      	blx	r4
 8002928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292c:	4618      	mov	r0, r3
 800292e:	f005 fbd4 	bl	80080da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002932:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002936:	4618      	mov	r0, r3
 8002938:	f005 fb5a 	bl	8007ff0 <_ZNSaIcED1Ev>
					configureAC3();
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff fd89 	bl	8002454 <_ZN19DolbyDecoder_STA31012configureAC3Ev>
				}

				configureAC3();
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff fd86 	bl	8002454 <_ZN19DolbyDecoder_STA31012configureAC3Ev>
 8002948:	e02e      	b.n	80029a8 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3cc>
			} else if ( streamSel == 3 && decodeSel == 3 ) {
 800294a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800294e:	2b03      	cmp	r3, #3
 8002950:	d12a      	bne.n	80029a8 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3cc>
 8002952:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002956:	2b03      	cmp	r3, #3
 8002958:	d126      	bne.n	80029a8 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3cc>
				// This is PCM
				if ( mEventHandler ) {
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d022      	beq.n	80029a8 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3cc>
					mEventHandler->onAlgorithmChange( std::string( "PCM" ) );
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68dd      	ldr	r5, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	330c      	adds	r3, #12
 800296e:	681c      	ldr	r4, [r3, #0]
 8002970:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002974:	4618      	mov	r0, r3
 8002976:	f005 fb3a 	bl	8007fee <_ZNSaIcEC1Ev>
 800297a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800297e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002982:	4919      	ldr	r1, [pc, #100]	; (80029e8 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x40c>)
 8002984:	4618      	mov	r0, r3
 8002986:	f005 fc1d 	bl	80081c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800298a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800298e:	4619      	mov	r1, r3
 8002990:	4628      	mov	r0, r5
 8002992:	47a0      	blx	r4
 8002994:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002998:	4618      	mov	r0, r3
 800299a:	f005 fb9e 	bl	80080da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800299e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029a2:	4618      	mov	r0, r3
 80029a4:	f005 fb24 	bl	8007ff0 <_ZNSaIcED1Ev>
				}
			}

			mute( false );
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3310      	adds	r3, #16
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2100      	movs	r1, #0
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
			run();
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3318      	adds	r3, #24
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
			play();
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3314      	adds	r3, #20
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2101      	movs	r1, #1
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4798      	blx	r3
		}
		i = 2;
 80029d0:	2302      	movs	r3, #2
 80029d2:	677b      	str	r3, [r7, #116]	; 0x74
	}
}
 80029d4:	bf00      	nop
 80029d6:	3778      	adds	r7, #120	; 0x78
 80029d8:	46bd      	mov	sp, r7
 80029da:	bdb0      	pop	{r4, r5, r7, pc}
 80029dc:	0002ee00 	.word	0x0002ee00
 80029e0:	08008d04 	.word	0x08008d04
 80029e4:	08008d08 	.word	0x08008d08
 80029e8:	08008d0c 	.word	0x08008d0c

080029ec <_ZN19DolbyDecoder_STA31011checkFormatEv>:

void
DolbyDecoder_STA310::checkFormat() {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	 I2C_RESULT decodeSel = mDevice->readRegister( DolbyDecoder_STA310::DECODE_SEL );
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	331c      	adds	r3, #28
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	214d      	movs	r1, #77	; 0x4d
 8002a04:	4610      	mov	r0, r2
 8002a06:	4798      	blx	r3
 8002a08:	4603      	mov	r3, r0
 8002a0a:	82fb      	strh	r3, [r7, #22]
	 I2C_RESULT streamSel = mDevice->readRegister( DolbyDecoder_STA310::STREAM_SEL );
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	331c      	adds	r3, #28
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	214c      	movs	r1, #76	; 0x4c
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4798      	blx	r3
 8002a20:	4603      	mov	r3, r0
 8002a22:	82bb      	strh	r3, [r7, #20]
	// I2C_RESULT dolbyStatus1 = mDevice->readRegister( DolbyDecoder_STA310::DOLBY_STATUS_1 );
	// I2C_RESULT ac3Status = mDevice->readRegister( DolbyDecoder_STA310::AC3_STATUS_1 );
	 I2C_RESULT head3 = mDevice->readRegister( DolbyDecoder_STA310::HEAD_3 );
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	331c      	adds	r3, #28
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2143      	movs	r1, #67	; 0x43
 8002a34:	4610      	mov	r0, r2
 8002a36:	4798      	blx	r3
 8002a38:	4603      	mov	r3, r0
 8002a3a:	827b      	strh	r3, [r7, #18]
	 I2C_RESULT freq = mDevice->readRegister( 0x05 );
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	331c      	adds	r3, #28
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2105      	movs	r1, #5
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4798      	blx	r3
 8002a50:	4603      	mov	r3, r0
 8002a52:	823b      	strh	r3, [r7, #16]
	 I2C_RESULT spdif_status = mDevice->readRegister( 0x61 );
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	331c      	adds	r3, #28
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2161      	movs	r1, #97	; 0x61
 8002a64:	4610      	mov	r0, r2
 8002a66:	4798      	blx	r3
 8002a68:	4603      	mov	r3, r0
 8002a6a:	81fb      	strh	r3, [r7, #14]
	// I2C_RESULT spdif_status2 = mDevice->readRegister( 0x7f );
}
 8002a6c:	bf00      	nop
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <_ZNK7Encoder12getLastValueEv>:
public:
	Encoder();
	virtual ~Encoder();

	virtual ENCODER_VALUE checkEncoder( uint32_t value );
	virtual ENCODER_VALUE getLastValue() const { return mLastTimerValue; }
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
	...

08002a8c <_ZN7EncoderC1Ev>:
 *      Author: duane
 */

#include "Encoder.h"

Encoder::Encoder() : mLastTimerValue( 0 ) {
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	4a05      	ldr	r2, [pc, #20]	; (8002aac <_ZN7EncoderC1Ev+0x20>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	605a      	str	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	08008e90 	.word	0x08008e90

08002ab0 <_ZN7EncoderD1Ev>:

Encoder::~Encoder() {
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <_ZN7EncoderD1Ev+0x1c>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	08008e90 	.word	0x08008e90

08002ad0 <_ZN7EncoderD0Ev>:
Encoder::~Encoder() {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
}
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ffe9 	bl	8002ab0 <_ZN7EncoderD1Ev>
 8002ade:	2108      	movs	r1, #8
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f005 fa6e 	bl	8007fc2 <_ZdlPvj>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_ZN7Encoder12checkEncoderEm>:

ENCODER_VALUE
Encoder::checkEncoder( uint32_t value ) {
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
	if ( mLastTimerValue < 50 && value > 65500 ) {
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b31      	cmp	r3, #49	; 0x31
 8002b00:	d809      	bhi.n	8002b16 <_ZN7Encoder12checkEncoderEm+0x26>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d904      	bls.n	8002b16 <_ZN7Encoder12checkEncoderEm+0x26>
		// the value rolled backwards from 0 up to 64000, so this is a nudge down
		mLastTimerValue = value;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	605a      	str	r2, [r3, #4]
		return ENCODER_DECREASE;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e02e      	b.n	8002b74 <_ZN7Encoder12checkEncoderEm+0x84>
	} else if ( mLastTimerValue > 65500 && value < 50 ) {
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d907      	bls.n	8002b32 <_ZN7Encoder12checkEncoderEm+0x42>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b31      	cmp	r3, #49	; 0x31
 8002b26:	d804      	bhi.n	8002b32 <_ZN7Encoder12checkEncoderEm+0x42>
		// the value rolled over the top, back to 0, so this is an increase
		mLastTimerValue = value;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
		return ENCODER_INCREASE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e020      	b.n	8002b74 <_ZN7Encoder12checkEncoderEm+0x84>
	} else if ( value > mLastTimerValue && ( value - mLastTimerValue ) > 3 ) {
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d90a      	bls.n	8002b52 <_ZN7Encoder12checkEncoderEm+0x62>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d904      	bls.n	8002b52 <_ZN7Encoder12checkEncoderEm+0x62>
		mLastTimerValue = value;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
		// increase
		return ENCODER_INCREASE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e010      	b.n	8002b74 <_ZN7Encoder12checkEncoderEm+0x84>
	} else if ( value < mLastTimerValue && ( mLastTimerValue - value ) > 3  ) {
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d20a      	bcs.n	8002b72 <_ZN7Encoder12checkEncoderEm+0x82>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d904      	bls.n	8002b72 <_ZN7Encoder12checkEncoderEm+0x82>
		mLastTimerValue = value;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
		return ENCODER_DECREASE;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <_ZN7Encoder12checkEncoderEm+0x84>
	} else {
		return ENCODER_NOCHANGE;
 8002b72:	2302      	movs	r3, #2
	}
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
	...

08002b80 <_ZN3I2CC1ERKS_>:
class I2C {
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <_ZN3I2CC1ERKS_+0x3c>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	1d10      	adds	r0, r2, #4
 8002b96:	3304      	adds	r3, #4
 8002b98:	2254      	movs	r2, #84	; 0x54
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f005 fbba 	bl	8008314 <memcpy>
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f102 0458 	add.w	r4, r2, #88	; 0x58
 8002ba8:	3358      	adds	r3, #88	; 0x58
 8002baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd90      	pop	{r4, r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	08008ea8 	.word	0x08008ea8

08002bc0 <_ZN10I2C_DeviceC1E3I2Ch>:
	I2C mBus;
	I2C_ADDR mAddr;
public:
	I2C_Device( I2C bus ) : mBus( bus ), mAddr( 0 ) {}
	I2C_Device( I2C_ADDR addr );
	I2C_Device( I2C bus, I2C_ADDR addr ) : mBus( bus), mAddr( addr ) {}
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	71fb      	strb	r3, [r7, #7]
 8002bce:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <_ZN10I2C_DeviceC1E3I2Ch+0x34>)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ffd0 	bl	8002b80 <_ZN3I2CC1ERKS_>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	79fa      	ldrb	r2, [r7, #7]
 8002be4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	08008eb8 	.word	0x08008eb8

08002bf8 <_ZN3I2CD1Ev>:
I2C::I2C( I2C_HandleTypeDef bus ) : mI2C( bus ) {
	// TODO Auto-generated constructor stub

}

I2C::~I2C() {
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <_ZN3I2CD1Ev+0x1c>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	08008ea8 	.word	0x08008ea8

08002c18 <_ZN3I2CD0Ev>:
I2C::~I2C() {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
}
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ffe9 	bl	8002bf8 <_ZN3I2CD1Ev>
 8002c26:	2168      	movs	r1, #104	; 0x68
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f005 f9ca 	bl	8007fc2 <_ZdlPvj>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <_ZN3I2C8readByteEh>:

uint8_t
I2C::readByte( I2C_ADDR addr ) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
	int ret = I2C_ERROR;
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c48:	60fb      	str	r3, [r7, #12]
	//if ( xSemaphoreTake( mMutex, I2C_MAX_MUTEX ) ) {
		ret = HAL_I2C_Master_Receive( &mI2C, addr, mBuffer, 1, I2C_MAX_DELAY );
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	1d18      	adds	r0, r3, #4
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	b299      	uxth	r1, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8002c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f001 ffbc 	bl	8004bdc <HAL_I2C_Master_Receive>
 8002c64:	4603      	mov	r3, r0
 8002c66:	60fb      	str	r3, [r7, #12]
	//	xSemaphoreGive( mMutex );
	//}

	if ( ret == HAL_OK ) {
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d103      	bne.n	8002c76 <_ZN3I2C8readByteEh+0x3e>
		return mBuffer[ 0 ];
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c74:	e000      	b.n	8002c78 <_ZN3I2C8readByteEh+0x40>
	} else return I2C_ERROR;
 8002c76:	23ff      	movs	r3, #255	; 0xff
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_ZN3I2C9writeByteEhh>:

bool
I2C::writeByte( I2C_ADDR addr, uint8_t data ) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	70fb      	strb	r3, [r7, #3]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	70bb      	strb	r3, [r7, #2]
	int ret = I2C_ERROR;
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c94:	60fb      	str	r3, [r7, #12]
//	if ( xSemaphoreTake( mMutex, I2C_MAX_MUTEX ) ) {
		ret = HAL_I2C_Master_Transmit( &mI2C, addr, &data, 1, I2C_MAX_DELAY );
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	1d18      	adds	r0, r3, #4
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	b299      	uxth	r1, r3
 8002c9e:	1cba      	adds	r2, r7, #2
 8002ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f001 fe9a 	bl	80049e0 <HAL_I2C_Master_Transmit>
 8002cac:	4603      	mov	r3, r0
 8002cae:	60fb      	str	r3, [r7, #12]
////		xSemaphoreGive( mMutex );
//	}

	return ( ret == HAL_OK );
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2301      	moveq	r3, #1
 8002cb8:	2300      	movne	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <_ZN3I2C9writeDataEhPhh>:

bool
I2C::writeData( I2C_ADDR addr, uint8_t *data, uint8_t size ) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	72fb      	strb	r3, [r7, #11]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	72bb      	strb	r3, [r7, #10]
//	if ( xSemaphoreTake( mMutex, I2C_MAX_MUTEX ) ) {
		int ret = HAL_I2C_Master_Transmit( &mI2C, addr, data, size, I2C_MAX_DELAY );
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1d18      	adds	r0, r3, #4
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	b299      	uxth	r1, r3
 8002ce0:	7abb      	ldrb	r3, [r7, #10]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ce8:	9200      	str	r2, [sp, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	f001 fe78 	bl	80049e0 <HAL_I2C_Master_Transmit>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	617b      	str	r3, [r7, #20]
//		xSemaphoreGive( mMutex );
//	}

	return ( ret == HAL_OK );
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2301      	moveq	r3, #1
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_ZN3I2C13writeRegisterEhhh>:

bool
I2C::writeRegister( I2C_ADDR addr, uint8_t reg, uint8_t value ) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	; 0x28
 8002d0c:	af04      	add	r7, sp, #16
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	461a      	mov	r2, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	70fb      	strb	r3, [r7, #3]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	70bb      	strb	r3, [r7, #2]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	707b      	strb	r3, [r7, #1]
	while(HAL_I2C_IsDeviceReady(&mI2C, addr, 64, HAL_MAX_DELAY)!= HAL_OK);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	1d18      	adds	r0, r3, #4
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	b299      	uxth	r1, r3
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d2e:	2240      	movs	r2, #64	; 0x40
 8002d30:	f002 fd16 	bl	8005760 <HAL_I2C_IsDeviceReady>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bf14      	ite	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	2300      	moveq	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d000      	beq.n	8002d46 <_ZN3I2C13writeRegisterEhhh+0x3e>
 8002d44:	e7ed      	b.n	8002d22 <_ZN3I2C13writeRegisterEhhh+0x1a>

	int ret;
	int tries = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
	while ( true ) {
		ret = HAL_I2C_Mem_Write( &mI2C, addr, reg, 1, &value, sizeof( value ), I2C_MAX_DELAY );
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	1d18      	adds	r0, r3, #4
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	b299      	uxth	r1, r3
 8002d52:	78bb      	ldrb	r3, [r7, #2]
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5a:	9302      	str	r3, [sp, #8]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	1c7b      	adds	r3, r7, #1
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2301      	movs	r3, #1
 8002d66:	f002 f999 	bl	800509c <HAL_I2C_Mem_Write>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	613b      	str	r3, [r7, #16]
		if ( ret != HAL_OK ) {
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d009      	beq.n	8002d88 <_ZN3I2C13writeRegisterEhhh+0x80>
			tries++;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3301      	adds	r3, #1
 8002d78:	617b      	str	r3, [r7, #20]

			HAL_Delay( 250 );
 8002d7a:	20fa      	movs	r0, #250	; 0xfa
 8002d7c:	f001 f9f6 	bl	800416c <HAL_Delay>
		} else {
			break;
		}

		if ( tries > 20 ) {
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2b14      	cmp	r3, #20
 8002d84:	dc02      	bgt.n	8002d8c <_ZN3I2C13writeRegisterEhhh+0x84>
		ret = HAL_I2C_Mem_Write( &mI2C, addr, reg, 1, &value, sizeof( value ), I2C_MAX_DELAY );
 8002d86:	e7e0      	b.n	8002d4a <_ZN3I2C13writeRegisterEhhh+0x42>
			break;
 8002d88:	bf00      	nop
 8002d8a:	e000      	b.n	8002d8e <_ZN3I2C13writeRegisterEhhh+0x86>
				break;
 8002d8c:	bf00      	nop
		}
	}


		if ( ret != HAL_OK ) {
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <_ZN3I2C13writeRegisterEhhh+0x90>
			int a;
			a = 2;
 8002d94:	2302      	movs	r3, #2
 8002d96:	60fb      	str	r3, [r7, #12]

		}

		HAL_Delay( 1 );
 8002d98:	2001      	movs	r0, #1
 8002d9a:	f001 f9e7 	bl	800416c <HAL_Delay>

	return ( ret == HAL_OK );
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <_ZN3I2C12readRegisterEhh>:

I2C_RESULT
I2C::readRegister( I2C_ADDR addr, uint8_t reg ) {
 8002db2:	b590      	push	{r4, r7, lr}
 8002db4:	b089      	sub	sp, #36	; 0x24
 8002db6:	af04      	add	r7, sp, #16
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	70fb      	strb	r3, [r7, #3]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	70bb      	strb	r3, [r7, #2]
	while(HAL_I2C_IsDeviceReady(&mI2C, addr, 64, HAL_MAX_DELAY)!= HAL_OK);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	1d18      	adds	r0, r3, #4
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	b299      	uxth	r1, r3
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dce:	2240      	movs	r2, #64	; 0x40
 8002dd0:	f002 fcc6 	bl	8005760 <HAL_I2C_IsDeviceReady>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	bf14      	ite	ne
 8002dda:	2301      	movne	r3, #1
 8002ddc:	2300      	moveq	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d000      	beq.n	8002de6 <_ZN3I2C12readRegisterEhh+0x34>
 8002de4:	e7ed      	b.n	8002dc2 <_ZN3I2C12readRegisterEhh+0x10>

	int tries = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
	int ret;
	while ( true ) {
		ret =  HAL_I2C_Mem_Read( &mI2C, addr, reg, 1, mBuffer, 1, I2C_MAX_DELAY );
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	1d18      	adds	r0, r3, #4
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	b299      	uxth	r1, r3
 8002df2:	78bb      	ldrb	r3, [r7, #2]
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3358      	adds	r3, #88	; 0x58
 8002dfa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002dfe:	9402      	str	r4, [sp, #8]
 8002e00:	2401      	movs	r4, #1
 8002e02:	9401      	str	r4, [sp, #4]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2301      	movs	r3, #1
 8002e08:	f002 fa42 	bl	8005290 <HAL_I2C_Mem_Read>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	60bb      	str	r3, [r7, #8]

		if ( ret != HAL_OK ) {
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <_ZN3I2C12readRegisterEhh+0x78>
			tries = tries + 1;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
			HAL_Delay( 100 );
 8002e1c:	2064      	movs	r0, #100	; 0x64
 8002e1e:	f001 f9a5 	bl	800416c <HAL_Delay>
		} else {
			break;
		}

		if ( tries > 10 ) {
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b0a      	cmp	r3, #10
 8002e26:	dc02      	bgt.n	8002e2e <_ZN3I2C12readRegisterEhh+0x7c>
		ret =  HAL_I2C_Mem_Read( &mI2C, addr, reg, 1, mBuffer, 1, I2C_MAX_DELAY );
 8002e28:	e7df      	b.n	8002dea <_ZN3I2C12readRegisterEhh+0x38>
			break;
 8002e2a:	bf00      	nop
 8002e2c:	e000      	b.n	8002e30 <_ZN3I2C12readRegisterEhh+0x7e>
			break;
 8002e2e:	bf00      	nop
		}
	}


	if ( ret == HAL_OK ) {
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d104      	bne.n	8002e40 <_ZN3I2C12readRegisterEhh+0x8e>
		return mBuffer[0];
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	e001      	b.n	8002e44 <_ZN3I2C12readRegisterEhh+0x92>
	} else {
		return I2C_ERROR;
 8002e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd90      	pop	{r4, r7, pc}

08002e4c <_ZN3I2C14readRegister16Ehh>:

I2C_RESULT
I2C::readRegister16( I2C_ADDR addr, uint8_t reg ) {
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b089      	sub	sp, #36	; 0x24
 8002e50:	af04      	add	r7, sp, #16
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	70fb      	strb	r3, [r7, #3]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	70bb      	strb	r3, [r7, #2]
	int ret = HAL_I2C_Mem_Read( &mI2C, addr, reg, 1, mBuffer, 2, I2C_MAX_DELAY );
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	1d18      	adds	r0, r3, #4
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	b299      	uxth	r1, r3
 8002e64:	78bb      	ldrb	r3, [r7, #2]
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3358      	adds	r3, #88	; 0x58
 8002e6c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002e70:	9402      	str	r4, [sp, #8]
 8002e72:	2402      	movs	r4, #2
 8002e74:	9401      	str	r4, [sp, #4]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f002 fa09 	bl	8005290 <HAL_I2C_Mem_Read>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	60fb      	str	r3, [r7, #12]

	if ( ret == HAL_OK ) {
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10f      	bne.n	8002ea8 <_ZN3I2C14readRegister16Ehh+0x5c>
		uint16_t result = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	817b      	strh	r3, [r7, #10]
		result = ( (int16_t) mBuffer[0] ) << 8 | mBuffer[1];
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	b21a      	sxth	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002e9c:	b21b      	sxth	r3, r3
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	b21b      	sxth	r3, r3
 8002ea2:	817b      	strh	r3, [r7, #10]
		return result;
 8002ea4:	897b      	ldrh	r3, [r7, #10]
 8002ea6:	e001      	b.n	8002eac <_ZN3I2C14readRegister16Ehh+0x60>
	} else {
		return I2C_ERROR;
 8002ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd90      	pop	{r4, r7, pc}

08002eb4 <_ZN3I2C10makeDeviceEh>:

I2C_Device *
I2C::makeDevice( I2C_ADDR addr ) {
 8002eb4:	b5b0      	push	{r4, r5, r7, lr}
 8002eb6:	b09c      	sub	sp, #112	; 0x70
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
	return new I2C_Device( *this, addr );
 8002ec0:	f107 0308 	add.w	r3, r7, #8
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fe5a 	bl	8002b80 <_ZN3I2CC1ERKS_>
 8002ecc:	f107 0408 	add.w	r4, r7, #8
 8002ed0:	2070      	movs	r0, #112	; 0x70
 8002ed2:	f005 f878 	bl	8007fc6 <_Znwj>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	461d      	mov	r5, r3
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	461a      	mov	r2, r3
 8002ede:	4621      	mov	r1, r4
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	f7ff fe6d 	bl	8002bc0 <_ZN10I2C_DeviceC1E3I2Ch>
 8002ee6:	f107 0308 	add.w	r3, r7, #8
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fe84 	bl	8002bf8 <_ZN3I2CD1Ev>
 8002ef0:	462b      	mov	r3, r5
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3770      	adds	r7, #112	; 0x70
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bdb0      	pop	{r4, r5, r7, pc}

08002efa <_ZN10I2C_Device7setAddrEh>:

	virtual ~I2C_Device();

	virtual void setAddr( I2C_ADDR addr ) { mAddr = addr; }
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	70fb      	strb	r3, [r7, #3]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <_ZN10I2C_DeviceD1Ev>:
I2C_Device::I2C_Device( I2C_ADDR addr ) : mAddr( addr ) {
	// TODO Auto-generated constructor stub

}

I2C_Device::~I2C_Device() {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <_ZN10I2C_DeviceD1Ev+0x24>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fe64 	bl	8002bf8 <_ZN3I2CD1Ev>
	// TODO Auto-generated destructor stub
}
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	08008eb8 	.word	0x08008eb8

08002f40 <_ZN10I2C_DeviceD0Ev>:
I2C_Device::~I2C_Device() {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
}
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ffe5 	bl	8002f18 <_ZN10I2C_DeviceD1Ev>
 8002f4e:	2170      	movs	r1, #112	; 0x70
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f005 f836 	bl	8007fc2 <_ZdlPvj>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <_ZN10I2C_Device9writeByteEh>:

bool
I2C_Device::writeByte( uint8_t data ) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	70fb      	strb	r3, [r7, #3]
	return mBus.writeByte( mAddr, data );
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	1d18      	adds	r0, r3, #4
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f7ff fe81 	bl	8002c80 <_ZN3I2C9writeByteEhh>
 8002f7e:	4603      	mov	r3, r0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <_ZN10I2C_Device13writeRegisterEhh>:

bool
I2C_Device::writeRegister( uint8_t reg, uint8_t value ) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
 8002f94:	4613      	mov	r3, r2
 8002f96:	70bb      	strb	r3, [r7, #2]
	return mBus.writeRegister( mAddr, reg, value );
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	1d18      	adds	r0, r3, #4
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8002fa2:	78bb      	ldrb	r3, [r7, #2]
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	f7ff feaf 	bl	8002d08 <_ZN3I2C13writeRegisterEhhh>
 8002faa:	4603      	mov	r3, r0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_ZN10I2C_Device9writeDataEPhh>:

bool
I2C_Device::writeData( uint8_t *data, uint8_t size ) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	71fb      	strb	r3, [r7, #7]
	return mBus.writeData( mAddr, data, size );
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1d18      	adds	r0, r3, #4
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	f7ff fe78 	bl	8002cc4 <_ZN3I2C9writeDataEhPhh>
 8002fd4:	4603      	mov	r3, r0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <_ZN10I2C_Device12readRegisterEh>:

I2C_RESULT
I2C_Device::readRegister( uint8_t reg ) {
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	70fb      	strb	r3, [r7, #3]
	return mBus.readRegister( mAddr, reg );
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	1d18      	adds	r0, r3, #4
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f7ff fedb 	bl	8002db2 <_ZN3I2C12readRegisterEhh>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <_ZN10I2C_Device14readRegister16Eh>:

I2C_RESULT
I2C_Device::readRegister16( uint8_t reg ) {
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	70fb      	strb	r3, [r7, #3]
	return mBus.readRegister16( mAddr, reg );
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	1d18      	adds	r0, r3, #4
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	4619      	mov	r1, r3
 8003020:	f7ff ff14 	bl	8002e4c <_ZN3I2C14readRegister16Ehh>
 8003024:	4603      	mov	r3, r0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <_ZN10I2C_Device8readByteEv>:

uint8_t
I2C_Device::readByte() {
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
	return mBus.readByte( mAddr );
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	1d1a      	adds	r2, r3, #4
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003040:	4619      	mov	r1, r3
 8003042:	4610      	mov	r0, r2
 8003044:	f7ff fdf8 	bl	8002c38 <_ZN3I2C8readByteEh>
 8003048:	4603      	mov	r3, r0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <_ZN3LCD11sendCommandEh>:

#define LCD_DELAY 2


void
LCD::sendCommand( uint8_t command ) {
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (command&0xF0);
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f023 030f 	bic.w	r3, r3, #15
 8003064:	73fb      	strb	r3, [r7, #15]
	data_l = ((command<<4)&0xF0);
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;	// en=1, rs=0
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	f043 030c 	orr.w	r3, r3, #12
 8003072:	b2db      	uxtb	r3, r3
 8003074:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;	// en=0, rs=0
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	f043 0308 	orr.w	r3, r3, #8
 800307c:	b2db      	uxtb	r3, r3
 800307e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;	// en=1, rs=0
 8003080:	7bbb      	ldrb	r3, [r7, #14]
 8003082:	f043 030c 	orr.w	r3, r3, #12
 8003086:	b2db      	uxtb	r3, r3
 8003088:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;	// en=0, rs=0
 800308a:	7bbb      	ldrb	r3, [r7, #14]
 800308c:	f043 0308 	orr.w	r3, r3, #8
 8003090:	b2db      	uxtb	r3, r3
 8003092:	72fb      	strb	r3, [r7, #11]

	mLCD->writeData( data_t, 4 );
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6858      	ldr	r0, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3314      	adds	r3, #20
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f107 0108 	add.w	r1, r7, #8
 80030a6:	2204      	movs	r2, #4
 80030a8:	4798      	blx	r3
	HAL_Delay( LCD_DELAY );
 80030aa:	2002      	movs	r0, #2
 80030ac:	f001 f85e 	bl	800416c <HAL_Delay>
}
 80030b0:	bf00      	nop
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <_ZN3LCD15enableBacklightEb>:

void
LCD::enableBacklight( bool enable  ) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]
	if ( enable ) {
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00d      	beq.n	80030ea <_ZN3LCD15enableBacklightEb+0x32>
		value = 0x08;
 80030ce:	2308      	movs	r3, #8
 80030d0:	73fb      	strb	r3, [r7, #15]
		mLCD->writeData( &value, 1 );
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6858      	ldr	r0, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3314      	adds	r3, #20
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f107 010f 	add.w	r1, r7, #15
 80030e4:	2201      	movs	r2, #1
 80030e6:	4798      	blx	r3
	} else {
		mLCD->writeData( &value, 1 );
	}
}
 80030e8:	e00a      	b.n	8003100 <_ZN3LCD15enableBacklightEb+0x48>
		mLCD->writeData( &value, 1 );
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6858      	ldr	r0, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3314      	adds	r3, #20
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f107 010f 	add.w	r1, r7, #15
 80030fc:	2201      	movs	r2, #1
 80030fe:	4798      	blx	r3
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <_ZN3LCD9setCursorEhh>:
	sendCommand( 0x01 );
	HAL_Delay( LCD_DELAY );
}

void
LCD::setCursor( uint8_t x, uint8_t y ) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
 8003114:	4613      	mov	r3, r2
 8003116:	70bb      	strb	r3, [r7, #2]
	int i = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
	switch ( y ) {
 800311c:	78bb      	ldrb	r3, [r7, #2]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d81e      	bhi.n	8003160 <_ZN3LCD9setCursorEhh+0x58>
 8003122:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <_ZN3LCD9setCursorEhh+0x20>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	08003139 	.word	0x08003139
 800312c:	08003143 	.word	0x08003143
 8003130:	0800314d 	.word	0x0800314d
 8003134:	08003157 	.word	0x08003157
		case 0:
			sendCommand( 0x80 );
 8003138:	2180      	movs	r1, #128	; 0x80
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ff89 	bl	8003052 <_ZN3LCD11sendCommandEh>
			break;
 8003140:	e00e      	b.n	8003160 <_ZN3LCD9setCursorEhh+0x58>
		case 1:
			sendCommand( 0xC0 );
 8003142:	21c0      	movs	r1, #192	; 0xc0
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ff84 	bl	8003052 <_ZN3LCD11sendCommandEh>
			break;
 800314a:	e009      	b.n	8003160 <_ZN3LCD9setCursorEhh+0x58>
		case 2:
			sendCommand( 0x94 );
 800314c:	2194      	movs	r1, #148	; 0x94
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ff7f 	bl	8003052 <_ZN3LCD11sendCommandEh>
			break;
 8003154:	e004      	b.n	8003160 <_ZN3LCD9setCursorEhh+0x58>
		case 3:
			sendCommand( 0xd4 );
 8003156:	21d4      	movs	r1, #212	; 0xd4
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ff7a 	bl	8003052 <_ZN3LCD11sendCommandEh>
			break;
 800315e:	bf00      	nop
	}

	for( i = 0; i < x; i++ ) {
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	429a      	cmp	r2, r3
 800316a:	da07      	bge.n	800317c <_ZN3LCD9setCursorEhh+0x74>
		sendCommand( 0x14 );
 800316c:	2114      	movs	r1, #20
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ff6f 	bl	8003052 <_ZN3LCD11sendCommandEh>
	for( i = 0; i < x; i++ ) {
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3301      	adds	r3, #1
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	e7f3      	b.n	8003164 <_ZN3LCD9setCursorEhh+0x5c>
	}
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <_ZN3LCD11writeStringEPc>:
//	sendCommand( 0x20 );
	HAL_Delay( 10 );
}

void
LCD::writeString( char *string ) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
	while ( *string ) {
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <_ZN3LCD11writeStringEPc+0x24>
		sendData( *string++ );
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	603a      	str	r2, [r7, #0]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f805 	bl	80031b0 <_ZN3LCD8sendDataEc>
	while ( *string ) {
 80031a6:	e7f2      	b.n	800318e <_ZN3LCD11writeStringEPc+0xa>
	}
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <_ZN3LCD8sendDataEc>:

void
LCD::sendData( char data ) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = ( data & 0xF0 );
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f023 030f 	bic.w	r3, r3, #15
 80031c2:	73fb      	strb	r3, [r7, #15]
	data_l = ( ( data << 4 ) & 0xF0);
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;	// en=1, rs=0
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	f043 030d 	orr.w	r3, r3, #13
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;	// en=0, rs=0
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	f043 0309 	orr.w	r3, r3, #9
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;	// en=1, rs=0
 80031de:	7bbb      	ldrb	r3, [r7, #14]
 80031e0:	f043 030d 	orr.w	r3, r3, #13
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;	// en=0, rs=0
 80031e8:	7bbb      	ldrb	r3, [r7, #14]
 80031ea:	f043 0309 	orr.w	r3, r3, #9
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	72fb      	strb	r3, [r7, #11]

	mLCD->writeData( data_t, 4 );
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6858      	ldr	r0, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3314      	adds	r3, #20
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f107 0108 	add.w	r1, r7, #8
 8003204:	2204      	movs	r2, #4
 8003206:	4798      	blx	r3
	HAL_Delay( LCD_DELAY );
 8003208:	2002      	movs	r0, #2
 800320a:	f000 ffaf 	bl	800416c <HAL_Delay>
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <_ZN3LCDC1EP10I2C_Device>:

}
 *
 */

LCD::LCD( I2C_Device *lcd ) : mLCD( lcd ), mCount( 0 ) {
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	4a07      	ldr	r2, [pc, #28]	; (8003240 <_ZN3LCDC1EP10I2C_Device+0x28>)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
	// TODO Auto-generated constructor stub

}
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4618      	mov	r0, r3
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	08008ee4 	.word	0x08008ee4

08003244 <_ZN3LCDD1Ev>:

LCD::~LCD() {
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	4a04      	ldr	r2, [pc, #16]	; (8003260 <_ZN3LCDD1Ev+0x1c>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	08008ee4 	.word	0x08008ee4

08003264 <_ZN3LCDD0Ev>:
LCD::~LCD() {
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
}
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff ffe9 	bl	8003244 <_ZN3LCDD1Ev>
 8003272:	210c      	movs	r1, #12
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f004 fea4 	bl	8007fc2 <_ZdlPvj>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <_ZN3LCD10initializeEv>:
	sprintf( s, "Count %5d         ", mCount++ );
	writeString( s );
}

void
LCD::initialize() {
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	HAL_Delay( 500 );
 800328c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003290:	f000 ff6c 	bl	800416c <HAL_Delay>

	sendCommand( 0x30 );
 8003294:	2130      	movs	r1, #48	; 0x30
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff fedb 	bl	8003052 <_ZN3LCD11sendCommandEh>
	HAL_Delay( 10 );
 800329c:	200a      	movs	r0, #10
 800329e:	f000 ff65 	bl	800416c <HAL_Delay>
	sendCommand( 0x30 );
 80032a2:	2130      	movs	r1, #48	; 0x30
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff fed4 	bl	8003052 <_ZN3LCD11sendCommandEh>
	HAL_Delay( 5 );
 80032aa:	2005      	movs	r0, #5
 80032ac:	f000 ff5e 	bl	800416c <HAL_Delay>
	sendCommand( 0x30 );
 80032b0:	2130      	movs	r1, #48	; 0x30
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fecd 	bl	8003052 <_ZN3LCD11sendCommandEh>
	HAL_Delay( 10 );
 80032b8:	200a      	movs	r0, #10
 80032ba:	f000 ff57 	bl	800416c <HAL_Delay>
	sendCommand( 0x20 );
 80032be:	2120      	movs	r1, #32
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff fec6 	bl	8003052 <_ZN3LCD11sendCommandEh>
	HAL_Delay( 10 );
 80032c6:	200a      	movs	r0, #10
 80032c8:	f000 ff50 	bl	800416c <HAL_Delay>


	enableBacklight( false );
 80032cc:	2100      	movs	r1, #0
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fef2 	bl	80030b8 <_ZN3LCD15enableBacklightEb>

	HAL_Delay( 250 );
 80032d4:	20fa      	movs	r0, #250	; 0xfa
 80032d6:	f000 ff49 	bl	800416c <HAL_Delay>

	sendCommand( 0x28 );
 80032da:	2128      	movs	r1, #40	; 0x28
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff feb8 	bl	8003052 <_ZN3LCD11sendCommandEh>
	HAL_Delay( 5 );
 80032e2:	2005      	movs	r0, #5
 80032e4:	f000 ff42 	bl	800416c <HAL_Delay>
	sendCommand( 0x08 );
 80032e8:	2108      	movs	r1, #8
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff feb1 	bl	8003052 <_ZN3LCD11sendCommandEh>
	HAL_Delay( 5 );
 80032f0:	2005      	movs	r0, #5
 80032f2:	f000 ff3b 	bl	800416c <HAL_Delay>
	sendCommand( 0x01 );
 80032f6:	2101      	movs	r1, #1
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff feaa 	bl	8003052 <_ZN3LCD11sendCommandEh>
	HAL_Delay( 5 );
 80032fe:	2005      	movs	r0, #5
 8003300:	f000 ff34 	bl	800416c <HAL_Delay>

	sendCommand( 0x06 );
 8003304:	2106      	movs	r1, #6
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff fea3 	bl	8003052 <_ZN3LCD11sendCommandEh>
	HAL_Delay( 5 );
 800330c:	2005      	movs	r0, #5
 800330e:	f000 ff2d 	bl	800416c <HAL_Delay>
	sendCommand( 0x0c );
 8003312:	210c      	movs	r1, #12
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff fe9c 	bl	8003052 <_ZN3LCD11sendCommandEh>
	HAL_Delay( 5 );
 800331a:	2005      	movs	r0, #5
 800331c:	f000 ff26 	bl	800416c <HAL_Delay>
	sendCommand( 0x01 );
 8003320:	2101      	movs	r1, #1
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff fe95 	bl	8003052 <_ZN3LCD11sendCommandEh>
	HAL_Delay( 5 );
 8003328:	2005      	movs	r0, #5
 800332a:	f000 ff1f 	bl	800416c <HAL_Delay>

	HAL_Delay( 250 );
 800332e:	20fa      	movs	r0, #250	; 0xfa
 8003330:	f000 ff1c 	bl	800416c <HAL_Delay>

	enableBacklight( true );
 8003334:	2101      	movs	r1, #1
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff febe 	bl	80030b8 <_ZN3LCD15enableBacklightEb>
	lcd_send_cmd (0x20);  // 4bit mode
	HAL_Delay(10);
 *
 *
 */
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <_ZN8RunnableC1EP9Amplifier>:
 */

#include "Runnable.h"
#include "Amplifier.h"

Runnable::Runnable( Amplifier *amp ) : mAmplifier( amp ) {
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
 800334e:	4a06      	ldr	r2, [pc, #24]	; (8003368 <_ZN8RunnableC1EP9Amplifier+0x24>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	605a      	str	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	08008ef8 	.word	0x08008ef8

0800336c <_ZN8RunnableD1Ev>:

Runnable::~Runnable() {
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	4a04      	ldr	r2, [pc, #16]	; (8003388 <_ZN8RunnableD1Ev+0x1c>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	08008ef8 	.word	0x08008ef8

0800338c <_ZN9Amplifier8getAudioEv>:
public:
	Amplifier();
	virtual ~Amplifier();

	Display &getDisplay() { return mDisplay; }
	Audio &getAudio() { return mAudio; }
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3334      	adds	r3, #52	; 0x34
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr
	...

080033a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b093      	sub	sp, #76	; 0x4c
 80033a8:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033aa:	f000 fe7d 	bl	80040a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033ae:	f000 f83b 	bl	8003428 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033b2:	f000 fa95 	bl	80038e0 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80033b6:	f000 f92d 	bl	8003614 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 80033ba:	f000 f967 	bl	800368c <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 80033be:	f000 f9a1 	bl	8003704 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80033c2:	f000 f9fd 	bl	80037c0 <_ZL12MX_TIM4_Initv>
  MX_USART3_UART_Init();
 80033c6:	f000 fa5d 	bl	8003884 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 80033ca:	f000 f897 	bl	80034fc <_ZL12MX_I2C1_Initv>
  MX_RTC_Init();
 80033ce:	f000 f8c7 	bl	8003560 <_ZL11MX_RTC_Initv>
  /* USER CODE BEGIN 2 */

  // The main amplifier class
  amplifier.initialize( hi2c1 );
 80033d2:	4c13      	ldr	r4, [pc, #76]	; (8003420 <main+0x7c>)
 80033d4:	4668      	mov	r0, sp
 80033d6:	f104 030c 	add.w	r3, r4, #12
 80033da:	2248      	movs	r2, #72	; 0x48
 80033dc:	4619      	mov	r1, r3
 80033de:	f004 ff99 	bl	8008314 <memcpy>
 80033e2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80033e6:	480f      	ldr	r0, [pc, #60]	; (8003424 <main+0x80>)
 80033e8:	f7fd ffa5 	bl	8001336 <_ZN9Amplifier10initializeE17I2C_HandleTypeDef>
  amplifier.preTick();
 80033ec:	480d      	ldr	r0, [pc, #52]	; (8003424 <main+0x80>)
 80033ee:	f7fe f82f 	bl	8001450 <_ZN9Amplifier7preTickEv>
  amplifier.getAudio().preTick();
 80033f2:	480c      	ldr	r0, [pc, #48]	; (8003424 <main+0x80>)
 80033f4:	f7ff ffca 	bl	800338c <_ZN9Amplifier8getAudioEv>
 80033f8:	4603      	mov	r3, r0
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	320c      	adds	r2, #12
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	4790      	blx	r2
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  amplifier.tick();
 8003404:	4807      	ldr	r0, [pc, #28]	; (8003424 <main+0x80>)
 8003406:	f7fe f845 	bl	8001494 <_ZN9Amplifier4tickEv>
	  amplifier.getAudio().tick();
 800340a:	4806      	ldr	r0, [pc, #24]	; (8003424 <main+0x80>)
 800340c:	f7ff ffbe 	bl	800338c <_ZN9Amplifier8getAudioEv>
 8003410:	4603      	mov	r3, r0
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	3208      	adds	r2, #8
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	4790      	blx	r2
	  amplifier.tick();
 800341c:	e7f2      	b.n	8003404 <main+0x60>
 800341e:	bf00      	nop
 8003420:	20000094 	.word	0x20000094
 8003424:	20000280 	.word	0x20000280

08003428 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b096      	sub	sp, #88	; 0x58
 800342c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800342e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003432:	2228      	movs	r2, #40	; 0x28
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f004 ff94 	bl	8008364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800343c:	f107 031c 	add.w	r3, r7, #28
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800344c:	1d3b      	adds	r3, r7, #4
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	605a      	str	r2, [r3, #4]
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	60da      	str	r2, [r3, #12]
 8003458:	611a      	str	r2, [r3, #16]
 800345a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800345c:	2306      	movs	r3, #6
 800345e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003460:	2301      	movs	r3, #1
 8003462:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003464:	2301      	movs	r3, #1
 8003466:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003468:	2310      	movs	r3, #16
 800346a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800346c:	2302      	movs	r3, #2
 800346e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003470:	2300      	movs	r3, #0
 8003472:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8003474:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8003478:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800347a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800347e:	4618      	mov	r0, r3
 8003480:	f002 ff52 	bl	8006328 <HAL_RCC_OscConfig>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	bf14      	ite	ne
 800348a:	2301      	movne	r3, #1
 800348c:	2300      	moveq	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8003494:	f000 fb00 	bl	8003a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003498:	230f      	movs	r3, #15
 800349a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800349c:	2302      	movs	r3, #2
 800349e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034a0:	2300      	movs	r3, #0
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034aa:	2300      	movs	r3, #0
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80034ae:	f107 031c 	add.w	r3, r7, #28
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f003 f9b9 	bl	800682c <HAL_RCC_ClockConfig>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf14      	ite	ne
 80034c0:	2301      	movne	r3, #1
 80034c2:	2300      	moveq	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80034ca:	f000 fae5 	bl	8003a98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80034ce:	2301      	movs	r3, #1
 80034d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80034d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034d6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034d8:	1d3b      	adds	r3, r7, #4
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 fb40 	bl	8006b60 <HAL_RCCEx_PeriphCLKConfig>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 80034f0:	f000 fad2 	bl	8003a98 <Error_Handler>
  }
}
 80034f4:	bf00      	nop
 80034f6:	3758      	adds	r7, #88	; 0x58
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003500:	4b15      	ldr	r3, [pc, #84]	; (8003558 <_ZL12MX_I2C1_Initv+0x5c>)
 8003502:	4a16      	ldr	r2, [pc, #88]	; (800355c <_ZL12MX_I2C1_Initv+0x60>)
 8003504:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8003506:	4b14      	ldr	r3, [pc, #80]	; (8003558 <_ZL12MX_I2C1_Initv+0x5c>)
 8003508:	f24c 3250 	movw	r2, #50000	; 0xc350
 800350c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <_ZL12MX_I2C1_Initv+0x5c>)
 8003510:	2200      	movs	r2, #0
 8003512:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003514:	4b10      	ldr	r3, [pc, #64]	; (8003558 <_ZL12MX_I2C1_Initv+0x5c>)
 8003516:	2200      	movs	r2, #0
 8003518:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <_ZL12MX_I2C1_Initv+0x5c>)
 800351c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003520:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <_ZL12MX_I2C1_Initv+0x5c>)
 8003524:	2200      	movs	r2, #0
 8003526:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <_ZL12MX_I2C1_Initv+0x5c>)
 800352a:	2200      	movs	r2, #0
 800352c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <_ZL12MX_I2C1_Initv+0x5c>)
 8003530:	2200      	movs	r2, #0
 8003532:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <_ZL12MX_I2C1_Initv+0x5c>)
 8003536:	2200      	movs	r2, #0
 8003538:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800353a:	4807      	ldr	r0, [pc, #28]	; (8003558 <_ZL12MX_I2C1_Initv+0x5c>)
 800353c:	f001 f90c 	bl	8004758 <HAL_I2C_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	bf14      	ite	ne
 8003546:	2301      	movne	r3, #1
 8003548:	2300      	moveq	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <_ZL12MX_I2C1_Initv+0x58>
  {
    Error_Handler();
 8003550:	f000 faa2 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003554:	bf00      	nop
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000094 	.word	0x20000094
 800355c:	40005400 	.word	0x40005400

08003560 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	2100      	movs	r1, #0
 800356a:	460a      	mov	r2, r1
 800356c:	801a      	strh	r2, [r3, #0]
 800356e:	460a      	mov	r2, r1
 8003570:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8003572:	2300      	movs	r3, #0
 8003574:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003576:	4b25      	ldr	r3, [pc, #148]	; (800360c <_ZL11MX_RTC_Initv+0xac>)
 8003578:	4a25      	ldr	r2, [pc, #148]	; (8003610 <_ZL11MX_RTC_Initv+0xb0>)
 800357a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800357c:	4b23      	ldr	r3, [pc, #140]	; (800360c <_ZL11MX_RTC_Initv+0xac>)
 800357e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003582:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8003584:	4b21      	ldr	r3, [pc, #132]	; (800360c <_ZL11MX_RTC_Initv+0xac>)
 8003586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800358a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800358c:	481f      	ldr	r0, [pc, #124]	; (800360c <_ZL11MX_RTC_Initv+0xac>)
 800358e:	f003 fc83 	bl	8006e98 <HAL_RTC_Init>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <_ZL11MX_RTC_Initv+0x46>
  {
    Error_Handler();
 80035a2:	f000 fa79 	bl	8003a98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	2201      	movs	r2, #1
 80035b6:	4619      	mov	r1, r3
 80035b8:	4814      	ldr	r0, [pc, #80]	; (800360c <_ZL11MX_RTC_Initv+0xac>)
 80035ba:	f003 fd03 	bl	8006fc4 <HAL_RTC_SetTime>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <_ZL11MX_RTC_Initv+0x72>
  {
    Error_Handler();
 80035ce:	f000 fa63 	bl	8003a98 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80035d2:	2301      	movs	r3, #1
 80035d4:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80035d6:	2301      	movs	r3, #1
 80035d8:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80035da:	2301      	movs	r3, #1
 80035dc:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80035de:	2300      	movs	r3, #0
 80035e0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80035e2:	463b      	mov	r3, r7
 80035e4:	2201      	movs	r2, #1
 80035e6:	4619      	mov	r1, r3
 80035e8:	4808      	ldr	r0, [pc, #32]	; (800360c <_ZL11MX_RTC_Initv+0xac>)
 80035ea:	f003 fd83 	bl	80070f4 <HAL_RTC_SetDate>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <_ZL11MX_RTC_Initv+0xa2>
  {
    Error_Handler();
 80035fe:	f000 fa4b 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200000e8 	.word	0x200000e8
 8003610:	40002800 	.word	0x40002800

08003614 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003618:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <_ZL12MX_SPI1_Initv+0x70>)
 800361a:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <_ZL12MX_SPI1_Initv+0x74>)
 800361c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800361e:	4b19      	ldr	r3, [pc, #100]	; (8003684 <_ZL12MX_SPI1_Initv+0x70>)
 8003620:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003624:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003626:	4b17      	ldr	r3, [pc, #92]	; (8003684 <_ZL12MX_SPI1_Initv+0x70>)
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800362c:	4b15      	ldr	r3, [pc, #84]	; (8003684 <_ZL12MX_SPI1_Initv+0x70>)
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003632:	4b14      	ldr	r3, [pc, #80]	; (8003684 <_ZL12MX_SPI1_Initv+0x70>)
 8003634:	2200      	movs	r2, #0
 8003636:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003638:	4b12      	ldr	r3, [pc, #72]	; (8003684 <_ZL12MX_SPI1_Initv+0x70>)
 800363a:	2200      	movs	r2, #0
 800363c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <_ZL12MX_SPI1_Initv+0x70>)
 8003640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003644:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003646:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <_ZL12MX_SPI1_Initv+0x70>)
 8003648:	2208      	movs	r2, #8
 800364a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800364c:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <_ZL12MX_SPI1_Initv+0x70>)
 800364e:	2200      	movs	r2, #0
 8003650:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <_ZL12MX_SPI1_Initv+0x70>)
 8003654:	2200      	movs	r2, #0
 8003656:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <_ZL12MX_SPI1_Initv+0x70>)
 800365a:	2200      	movs	r2, #0
 800365c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <_ZL12MX_SPI1_Initv+0x70>)
 8003660:	220a      	movs	r2, #10
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003664:	4807      	ldr	r0, [pc, #28]	; (8003684 <_ZL12MX_SPI1_Initv+0x70>)
 8003666:	f003 ffa5 	bl	80075b4 <HAL_SPI_Init>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800367a:	f000 fa0d 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	200000fc 	.word	0x200000fc
 8003688:	40013000 	.word	0x40013000

0800368c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003690:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <_ZL12MX_SPI2_Initv+0x70>)
 8003692:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <_ZL12MX_SPI2_Initv+0x74>)
 8003694:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003696:	4b19      	ldr	r3, [pc, #100]	; (80036fc <_ZL12MX_SPI2_Initv+0x70>)
 8003698:	f44f 7282 	mov.w	r2, #260	; 0x104
 800369c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <_ZL12MX_SPI2_Initv+0x70>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036a4:	4b15      	ldr	r3, [pc, #84]	; (80036fc <_ZL12MX_SPI2_Initv+0x70>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036aa:	4b14      	ldr	r3, [pc, #80]	; (80036fc <_ZL12MX_SPI2_Initv+0x70>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036b0:	4b12      	ldr	r3, [pc, #72]	; (80036fc <_ZL12MX_SPI2_Initv+0x70>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036b6:	4b11      	ldr	r3, [pc, #68]	; (80036fc <_ZL12MX_SPI2_Initv+0x70>)
 80036b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036be:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <_ZL12MX_SPI2_Initv+0x70>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036c4:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <_ZL12MX_SPI2_Initv+0x70>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036ca:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <_ZL12MX_SPI2_Initv+0x70>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036d0:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <_ZL12MX_SPI2_Initv+0x70>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80036d6:	4b09      	ldr	r3, [pc, #36]	; (80036fc <_ZL12MX_SPI2_Initv+0x70>)
 80036d8:	220a      	movs	r2, #10
 80036da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80036dc:	4807      	ldr	r0, [pc, #28]	; (80036fc <_ZL12MX_SPI2_Initv+0x70>)
 80036de:	f003 ff69 	bl	80075b4 <HAL_SPI_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 80036f2:	f000 f9d1 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000154 	.word	0x20000154
 8003700:	40003800 	.word	0x40003800

08003704 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08c      	sub	sp, #48	; 0x30
 8003708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800370a:	f107 030c 	add.w	r3, r7, #12
 800370e:	2224      	movs	r2, #36	; 0x24
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f004 fe26 	bl	8008364 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003718:	1d3b      	adds	r3, r7, #4
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003720:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003722:	4a26      	ldr	r2, [pc, #152]	; (80037bc <_ZL12MX_TIM3_Initv+0xb8>)
 8003724:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003726:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003728:	2200      	movs	r2, #0
 800372a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800372c:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <_ZL12MX_TIM3_Initv+0xb4>)
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003732:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003738:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800373a:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <_ZL12MX_TIM3_Initv+0xb4>)
 800373c:	2200      	movs	r2, #0
 800373e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003740:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003742:	2200      	movs	r2, #0
 8003744:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003746:	2301      	movs	r3, #1
 8003748:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800374e:	2301      	movs	r3, #1
 8003750:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800375a:	2300      	movs	r3, #0
 800375c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800375e:	2301      	movs	r3, #1
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003762:	2300      	movs	r3, #0
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800376a:	f107 030c 	add.w	r3, r7, #12
 800376e:	4619      	mov	r1, r3
 8003770:	4811      	ldr	r0, [pc, #68]	; (80037b8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003772:	f003 ffa3 	bl	80076bc <HAL_TIM_Encoder_Init>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8003786:	f000 f987 	bl	8003a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800378a:	2300      	movs	r3, #0
 800378c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4808      	ldr	r0, [pc, #32]	; (80037b8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003798:	f004 fab4 	bl	8007d04 <HAL_TIMEx_MasterConfigSynchronization>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf14      	ite	ne
 80037a2:	2301      	movne	r3, #1
 80037a4:	2300      	moveq	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 80037ac:	f000 f974 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037b0:	bf00      	nop
 80037b2:	3730      	adds	r7, #48	; 0x30
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	200001ac 	.word	0x200001ac
 80037bc:	40000400 	.word	0x40000400

080037c0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08c      	sub	sp, #48	; 0x30
 80037c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037c6:	f107 030c 	add.w	r3, r7, #12
 80037ca:	2224      	movs	r2, #36	; 0x24
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f004 fdc8 	bl	8008364 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037d4:	1d3b      	adds	r3, r7, #4
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80037dc:	4b27      	ldr	r3, [pc, #156]	; (800387c <_ZL12MX_TIM4_Initv+0xbc>)
 80037de:	4a28      	ldr	r2, [pc, #160]	; (8003880 <_ZL12MX_TIM4_Initv+0xc0>)
 80037e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80037e2:	4b26      	ldr	r3, [pc, #152]	; (800387c <_ZL12MX_TIM4_Initv+0xbc>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <_ZL12MX_TIM4_Initv+0xbc>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80037ee:	4b23      	ldr	r3, [pc, #140]	; (800387c <_ZL12MX_TIM4_Initv+0xbc>)
 80037f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037f6:	4b21      	ldr	r3, [pc, #132]	; (800387c <_ZL12MX_TIM4_Initv+0xbc>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037fc:	4b1f      	ldr	r3, [pc, #124]	; (800387c <_ZL12MX_TIM4_Initv+0xbc>)
 80037fe:	2280      	movs	r2, #128	; 0x80
 8003800:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003802:	2303      	movs	r3, #3
 8003804:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800380a:	2301      	movs	r3, #1
 800380c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8003812:	2305      	movs	r3, #5
 8003814:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003816:	2300      	movs	r3, #0
 8003818:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800381a:	2301      	movs	r3, #1
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800381e:	2300      	movs	r3, #0
 8003820:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8003822:	2305      	movs	r3, #5
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003826:	f107 030c 	add.w	r3, r7, #12
 800382a:	4619      	mov	r1, r3
 800382c:	4813      	ldr	r0, [pc, #76]	; (800387c <_ZL12MX_TIM4_Initv+0xbc>)
 800382e:	f003 ff45 	bl	80076bc <HAL_TIM_Encoder_Init>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8003842:	f000 f929 	bl	8003a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003846:	2300      	movs	r3, #0
 8003848:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800384e:	1d3b      	adds	r3, r7, #4
 8003850:	4619      	mov	r1, r3
 8003852:	480a      	ldr	r0, [pc, #40]	; (800387c <_ZL12MX_TIM4_Initv+0xbc>)
 8003854:	f004 fa56 	bl	8007d04 <HAL_TIMEx_MasterConfigSynchronization>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	bf14      	ite	ne
 800385e:	2301      	movne	r3, #1
 8003860:	2300      	moveq	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8003868:	f000 f916 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

	// Star the volume control timer
	HAL_TIM_Encoder_Start_IT( &htim4, TIM_CHANNEL_ALL );
 800386c:	213c      	movs	r1, #60	; 0x3c
 800386e:	4803      	ldr	r0, [pc, #12]	; (800387c <_ZL12MX_TIM4_Initv+0xbc>)
 8003870:	f003 ffc6 	bl	8007800 <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END TIM4_Init 2 */

}
 8003874:	bf00      	nop
 8003876:	3730      	adds	r7, #48	; 0x30
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	200001f4 	.word	0x200001f4
 8003880:	40000800 	.word	0x40000800

08003884 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003888:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800388a:	4a14      	ldr	r2, [pc, #80]	; (80038dc <_ZL19MX_USART3_UART_Initv+0x58>)
 800388c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003896:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800389c:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800389e:	2200      	movs	r2, #0
 80038a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80038aa:	220c      	movs	r2, #12
 80038ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80038b4:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038ba:	4807      	ldr	r0, [pc, #28]	; (80038d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80038bc:	f004 faa0 	bl	8007e00 <HAL_UART_Init>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf14      	ite	ne
 80038c6:	2301      	movne	r3, #1
 80038c8:	2300      	moveq	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80038d0:	f000 f8e2 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	2000023c 	.word	0x2000023c
 80038dc:	40004800 	.word	0x40004800

080038e0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	; 0x28
 80038e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e6:	f107 0318 	add.w	r3, r7, #24
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	605a      	str	r2, [r3, #4]
 80038f0:	609a      	str	r2, [r3, #8]
 80038f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038f4:	4b62      	ldr	r3, [pc, #392]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	4a61      	ldr	r2, [pc, #388]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 80038fa:	f043 0310 	orr.w	r3, r3, #16
 80038fe:	6193      	str	r3, [r2, #24]
 8003900:	4b5f      	ldr	r3, [pc, #380]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800390c:	4b5c      	ldr	r3, [pc, #368]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	4a5b      	ldr	r2, [pc, #364]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 8003912:	f043 0304 	orr.w	r3, r3, #4
 8003916:	6193      	str	r3, [r2, #24]
 8003918:	4b59      	ldr	r3, [pc, #356]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003924:	4b56      	ldr	r3, [pc, #344]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	4a55      	ldr	r2, [pc, #340]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 800392a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392e:	6193      	str	r3, [r2, #24]
 8003930:	4b53      	ldr	r3, [pc, #332]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800393c:	4b50      	ldr	r3, [pc, #320]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	4a4f      	ldr	r2, [pc, #316]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 8003942:	f043 0308 	orr.w	r3, r3, #8
 8003946:	6193      	str	r3, [r2, #24]
 8003948:	4b4d      	ldr	r3, [pc, #308]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003954:	4b4a      	ldr	r3, [pc, #296]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	4a49      	ldr	r2, [pc, #292]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 800395a:	f043 0320 	orr.w	r3, r3, #32
 800395e:	6193      	str	r3, [r2, #24]
 8003960:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <_ZL12MX_GPIO_Initv+0x1a0>)
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_MUTE_Pin|DECODER_RESET_Pin, GPIO_PIN_RESET);
 800396c:	2200      	movs	r2, #0
 800396e:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8003972:	4844      	ldr	r0, [pc, #272]	; (8003a84 <_ZL12MX_GPIO_Initv+0x1a4>)
 8003974:	f000 fed7 	bl	8004726 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 8003978:	2200      	movs	r2, #0
 800397a:	f248 011f 	movw	r1, #32799	; 0x801f
 800397e:	4842      	ldr	r0, [pc, #264]	; (8003a88 <_ZL12MX_GPIO_Initv+0x1a8>)
 8003980:	f000 fed1 	bl	8004726 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|USB_PULLUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 8003984:	2200      	movs	r2, #0
 8003986:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 800398a:	4840      	ldr	r0, [pc, #256]	; (8003a8c <_ZL12MX_GPIO_Initv+0x1ac>)
 800398c:	f000 fecb 	bl	8004726 <HAL_GPIO_WritePin>
                          |LED_POWER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_INPUT_6CH_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
 8003990:	2200      	movs	r2, #0
 8003992:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003996:	483e      	ldr	r0, [pc, #248]	; (8003a90 <_ZL12MX_GPIO_Initv+0x1b0>)
 8003998:	f000 fec5 	bl	8004726 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_MUTE_Pin DECODER_RESET_Pin */
  GPIO_InitStruct.Pin = LED_MUTE_Pin|DECODER_RESET_Pin;
 800399c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80039a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a2:	2301      	movs	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039aa:	2302      	movs	r3, #2
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ae:	f107 0318 	add.w	r3, r7, #24
 80039b2:	4619      	mov	r1, r3
 80039b4:	4833      	ldr	r0, [pc, #204]	; (8003a84 <_ZL12MX_GPIO_Initv+0x1a4>)
 80039b6:	f000 fd0b 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PCM_Pin LED_DOLBY_Pin PA2 LED_MUTEA3_Pin
                           PA4 USB_PULLUP_Pin */
  GPIO_InitStruct.Pin = LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 80039ba:	f248 031f 	movw	r3, #32799	; 0x801f
 80039be:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|USB_PULLUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039c0:	2301      	movs	r3, #1
 80039c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c8:	2302      	movs	r3, #2
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039cc:	f107 0318 	add.w	r3, r7, #24
 80039d0:	4619      	mov	r1, r3
 80039d2:	482d      	ldr	r0, [pc, #180]	; (8003a88 <_ZL12MX_GPIO_Initv+0x1a8>)
 80039d4:	f000 fcfc 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SETTING_BATTERY_Pin DECODER_IRQ_Pin */
  GPIO_InitStruct.Pin = SETTING_BATTERY_Pin|DECODER_IRQ_Pin;
 80039d8:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80039dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e6:	f107 0318 	add.w	r3, r7, #24
 80039ea:	4619      	mov	r1, r3
 80039ec:	4825      	ldr	r0, [pc, #148]	; (8003a84 <_ZL12MX_GPIO_Initv+0x1a4>)
 80039ee:	f000 fcef 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_1_Pin LED_INPUT_2_Pin LED_INPUT_3_Pin LED_INPUT_4_Pin
                           LED_POWER_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 80039f2:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 80039f6:	61bb      	str	r3, [r7, #24]
                          |LED_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f8:	2301      	movs	r3, #1
 80039fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a00:	2302      	movs	r3, #2
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a04:	f107 0318 	add.w	r3, r7, #24
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4820      	ldr	r0, [pc, #128]	; (8003a8c <_ZL12MX_GPIO_Initv+0x1ac>)
 8003a0c:	f000 fce0 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_POWER_Pin */
  GPIO_InitStruct.Pin = BUTTON_POWER_Pin;
 8003a10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_POWER_GPIO_Port, &GPIO_InitStruct);
 8003a1e:	f107 0318 	add.w	r3, r7, #24
 8003a22:	4619      	mov	r1, r3
 8003a24:	4819      	ldr	r0, [pc, #100]	; (8003a8c <_ZL12MX_GPIO_Initv+0x1ac>)
 8003a26:	f000 fcd3 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_6CH_Pin LED_RUN_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_6CH_Pin|LED_RUN_Pin;
 8003a2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a30:	2301      	movs	r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a3c:	f107 0318 	add.w	r3, r7, #24
 8003a40:	4619      	mov	r1, r3
 8003a42:	4813      	ldr	r0, [pc, #76]	; (8003a90 <_ZL12MX_GPIO_Initv+0x1b0>)
 8003a44:	f000 fcc4 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_VOLUME_Pin BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_VOLUME_Pin|BUTTON_INPUT_Pin;
 8003a48:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8003a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a52:	2301      	movs	r3, #1
 8003a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a56:	f107 0318 	add.w	r3, r7, #24
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	480d      	ldr	r0, [pc, #52]	; (8003a94 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003a5e:	f000 fcb7 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = PWM_BACKLIGHT_Pin;
 8003a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWM_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8003a6c:	f107 0318 	add.w	r3, r7, #24
 8003a70:	4619      	mov	r1, r3
 8003a72:	4807      	ldr	r0, [pc, #28]	; (8003a90 <_ZL12MX_GPIO_Initv+0x1b0>)
 8003a74:	f000 fcac 	bl	80043d0 <HAL_GPIO_Init>

}
 8003a78:	bf00      	nop
 8003a7a:	3728      	adds	r7, #40	; 0x28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40011000 	.word	0x40011000
 8003a88:	40010800 	.word	0x40010800
 8003a8c:	40011800 	.word	0x40011800
 8003a90:	40010c00 	.word	0x40010c00
 8003a94:	40011400 	.word	0x40011400

08003a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a9c:	b672      	cpsid	i
}
 8003a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003aa0:	e7fe      	b.n	8003aa0 <Error_Handler+0x8>
	...

08003aa4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d10c      	bne.n	8003ace <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d107      	bne.n	8003ace <_Z41__static_initialization_and_destruction_0ii+0x2a>
Amplifier amplifier;
 8003abe:	4806      	ldr	r0, [pc, #24]	; (8003ad8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003ac0:	f7fd fb9c 	bl	80011fc <_ZN9AmplifierC1Ev>
 8003ac4:	4a05      	ldr	r2, [pc, #20]	; (8003adc <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003ac6:	4906      	ldr	r1, [pc, #24]	; (8003ae0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003ac8:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003aca:	f004 fa75 	bl	8007fb8 <__aeabi_atexit>
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000280 	.word	0x20000280
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	08001275 	.word	0x08001275

08003ae4 <_GLOBAL__sub_I_hi2c1>:
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003aec:	2001      	movs	r0, #1
 8003aee:	f7ff ffd9 	bl	8003aa4 <_Z41__static_initialization_and_destruction_0ii>
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_MspInit+0x5c>)
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	4a14      	ldr	r2, [pc, #80]	; (8003b50 <HAL_MspInit+0x5c>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	6193      	str	r3, [r2, #24]
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_MspInit+0x5c>)
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	60bb      	str	r3, [r7, #8]
 8003b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b12:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <HAL_MspInit+0x5c>)
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	4a0e      	ldr	r2, [pc, #56]	; (8003b50 <HAL_MspInit+0x5c>)
 8003b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	61d3      	str	r3, [r2, #28]
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <HAL_MspInit+0x5c>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <HAL_MspInit+0x60>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <HAL_MspInit+0x60>)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40010000 	.word	0x40010000

08003b58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b60:	f107 0310 	add.w	r3, r7, #16
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	609a      	str	r2, [r3, #8]
 8003b6c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <HAL_I2C_MspInit+0x70>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d123      	bne.n	8003bc0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <HAL_I2C_MspInit+0x74>)
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	4a13      	ldr	r2, [pc, #76]	; (8003bcc <HAL_I2C_MspInit+0x74>)
 8003b7e:	f043 0308 	orr.w	r3, r3, #8
 8003b82:	6193      	str	r3, [r2, #24]
 8003b84:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <HAL_I2C_MspInit+0x74>)
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b90:	23c0      	movs	r3, #192	; 0xc0
 8003b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b94:	2312      	movs	r3, #18
 8003b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b9c:	f107 0310 	add.w	r3, r7, #16
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	480b      	ldr	r0, [pc, #44]	; (8003bd0 <HAL_I2C_MspInit+0x78>)
 8003ba4:	f000 fc14 	bl	80043d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ba8:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <HAL_I2C_MspInit+0x74>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	4a07      	ldr	r2, [pc, #28]	; (8003bcc <HAL_I2C_MspInit+0x74>)
 8003bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bb2:	61d3      	str	r3, [r2, #28]
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_I2C_MspInit+0x74>)
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003bc0:	bf00      	nop
 8003bc2:	3720      	adds	r7, #32
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40005400 	.word	0x40005400
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40010c00 	.word	0x40010c00

08003bd4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0b      	ldr	r2, [pc, #44]	; (8003c10 <HAL_RTC_MspInit+0x3c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d110      	bne.n	8003c08 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003be6:	f002 fb93 	bl	8006310 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <HAL_RTC_MspInit+0x40>)
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <HAL_RTC_MspInit+0x40>)
 8003bf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bf4:	61d3      	str	r3, [r2, #28]
 8003bf6:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <HAL_RTC_MspInit+0x40>)
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RTC_MspInit+0x44>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40002800 	.word	0x40002800
 8003c14:	40021000 	.word	0x40021000
 8003c18:	4242043c 	.word	0x4242043c

08003c1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	; 0x28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c24:	f107 0318 	add.w	r3, r7, #24
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a37      	ldr	r2, [pc, #220]	; (8003d14 <HAL_SPI_MspInit+0xf8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d130      	bne.n	8003c9e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c3c:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <HAL_SPI_MspInit+0xfc>)
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	4a35      	ldr	r2, [pc, #212]	; (8003d18 <HAL_SPI_MspInit+0xfc>)
 8003c42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c46:	6193      	str	r3, [r2, #24]
 8003c48:	4b33      	ldr	r3, [pc, #204]	; (8003d18 <HAL_SPI_MspInit+0xfc>)
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c54:	4b30      	ldr	r3, [pc, #192]	; (8003d18 <HAL_SPI_MspInit+0xfc>)
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	4a2f      	ldr	r2, [pc, #188]	; (8003d18 <HAL_SPI_MspInit+0xfc>)
 8003c5a:	f043 0304 	orr.w	r3, r3, #4
 8003c5e:	6193      	str	r3, [r2, #24]
 8003c60:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <HAL_SPI_MspInit+0xfc>)
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003c6c:	23a0      	movs	r3, #160	; 0xa0
 8003c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c70:	2302      	movs	r3, #2
 8003c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c74:	2303      	movs	r3, #3
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c78:	f107 0318 	add.w	r3, r7, #24
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4827      	ldr	r0, [pc, #156]	; (8003d1c <HAL_SPI_MspInit+0x100>)
 8003c80:	f000 fba6 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c84:	2340      	movs	r3, #64	; 0x40
 8003c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c90:	f107 0318 	add.w	r3, r7, #24
 8003c94:	4619      	mov	r1, r3
 8003c96:	4821      	ldr	r0, [pc, #132]	; (8003d1c <HAL_SPI_MspInit+0x100>)
 8003c98:	f000 fb9a 	bl	80043d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c9c:	e036      	b.n	8003d0c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <HAL_SPI_MspInit+0x104>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d131      	bne.n	8003d0c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ca8:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <HAL_SPI_MspInit+0xfc>)
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	4a1a      	ldr	r2, [pc, #104]	; (8003d18 <HAL_SPI_MspInit+0xfc>)
 8003cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb2:	61d3      	str	r3, [r2, #28]
 8003cb4:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <HAL_SPI_MspInit+0xfc>)
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc0:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <HAL_SPI_MspInit+0xfc>)
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	4a14      	ldr	r2, [pc, #80]	; (8003d18 <HAL_SPI_MspInit+0xfc>)
 8003cc6:	f043 0308 	orr.w	r3, r3, #8
 8003cca:	6193      	str	r3, [r2, #24]
 8003ccc:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <HAL_SPI_MspInit+0xfc>)
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003cd8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce6:	f107 0318 	add.w	r3, r7, #24
 8003cea:	4619      	mov	r1, r3
 8003cec:	480d      	ldr	r0, [pc, #52]	; (8003d24 <HAL_SPI_MspInit+0x108>)
 8003cee:	f000 fb6f 	bl	80043d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003cf2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d00:	f107 0318 	add.w	r3, r7, #24
 8003d04:	4619      	mov	r1, r3
 8003d06:	4807      	ldr	r0, [pc, #28]	; (8003d24 <HAL_SPI_MspInit+0x108>)
 8003d08:	f000 fb62 	bl	80043d0 <HAL_GPIO_Init>
}
 8003d0c:	bf00      	nop
 8003d0e:	3728      	adds	r7, #40	; 0x28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40013000 	.word	0x40013000
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40010800 	.word	0x40010800
 8003d20:	40003800 	.word	0x40003800
 8003d24:	40010c00 	.word	0x40010c00

08003d28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08c      	sub	sp, #48	; 0x30
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d30:	f107 0318 	add.w	r3, r7, #24
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a43      	ldr	r2, [pc, #268]	; (8003e50 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d13e      	bne.n	8003dc6 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d48:	4b42      	ldr	r3, [pc, #264]	; (8003e54 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	4a41      	ldr	r2, [pc, #260]	; (8003e54 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d4e:	f043 0302 	orr.w	r3, r3, #2
 8003d52:	61d3      	str	r3, [r2, #28]
 8003d54:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d60:	4b3c      	ldr	r3, [pc, #240]	; (8003e54 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	4a3b      	ldr	r2, [pc, #236]	; (8003e54 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d66:	f043 0310 	orr.w	r3, r3, #16
 8003d6a:	6193      	str	r3, [r2, #24]
 8003d6c:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d78:	23c0      	movs	r3, #192	; 0xc0
 8003d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d84:	f107 0318 	add.w	r3, r7, #24
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4833      	ldr	r0, [pc, #204]	; (8003e58 <HAL_TIM_Encoder_MspInit+0x130>)
 8003d8c:	f000 fb20 	bl	80043d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003d90:	4b32      	ldr	r3, [pc, #200]	; (8003e5c <HAL_TIM_Encoder_MspInit+0x134>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dae:	4a2b      	ldr	r2, [pc, #172]	; (8003e5c <HAL_TIM_Encoder_MspInit+0x134>)
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003db4:	2200      	movs	r2, #0
 8003db6:	2100      	movs	r1, #0
 8003db8:	201d      	movs	r0, #29
 8003dba:	f000 fad2 	bl	8004362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003dbe:	201d      	movs	r0, #29
 8003dc0:	f000 faeb 	bl	800439a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003dc4:	e03f      	b.n	8003e46 <HAL_TIM_Encoder_MspInit+0x11e>
  else if(htim_encoder->Instance==TIM4)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a25      	ldr	r2, [pc, #148]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x138>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d13a      	bne.n	8003e46 <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003dd0:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	61d3      	str	r3, [r2, #28]
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003de8:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	4a19      	ldr	r2, [pc, #100]	; (8003e54 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003dee:	f043 0320 	orr.w	r3, r3, #32
 8003df2:	6193      	str	r3, [r2, #24]
 8003df4:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003e00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e0e:	f107 0318 	add.w	r3, r7, #24
 8003e12:	4619      	mov	r1, r3
 8003e14:	4813      	ldr	r0, [pc, #76]	; (8003e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8003e16:	f000 fadb 	bl	80043d0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_TIM_Encoder_MspInit+0x134>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e30:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <HAL_TIM_Encoder_MspInit+0x134>)
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003e36:	2200      	movs	r2, #0
 8003e38:	2100      	movs	r1, #0
 8003e3a:	201e      	movs	r0, #30
 8003e3c:	f000 fa91 	bl	8004362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e40:	201e      	movs	r0, #30
 8003e42:	f000 faaa 	bl	800439a <HAL_NVIC_EnableIRQ>
}
 8003e46:	bf00      	nop
 8003e48:	3730      	adds	r7, #48	; 0x30
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40000400 	.word	0x40000400
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40011000 	.word	0x40011000
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	40000800 	.word	0x40000800
 8003e64:	40011400 	.word	0x40011400

08003e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	; 0x28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e70:	f107 0314 	add.w	r3, r7, #20
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	609a      	str	r2, [r3, #8]
 8003e7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a25      	ldr	r2, [pc, #148]	; (8003f18 <HAL_UART_MspInit+0xb0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d143      	bne.n	8003f10 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e88:	4b24      	ldr	r3, [pc, #144]	; (8003f1c <HAL_UART_MspInit+0xb4>)
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <HAL_UART_MspInit+0xb4>)
 8003e8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e92:	61d3      	str	r3, [r2, #28]
 8003e94:	4b21      	ldr	r3, [pc, #132]	; (8003f1c <HAL_UART_MspInit+0xb4>)
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ea0:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <HAL_UART_MspInit+0xb4>)
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <HAL_UART_MspInit+0xb4>)
 8003ea6:	f043 0320 	orr.w	r3, r3, #32
 8003eaa:	6193      	str	r3, [r2, #24]
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <HAL_UART_MspInit+0xb4>)
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ec6:	f107 0314 	add.w	r3, r7, #20
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4814      	ldr	r0, [pc, #80]	; (8003f20 <HAL_UART_MspInit+0xb8>)
 8003ece:	f000 fa7f 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ee0:	f107 0314 	add.w	r3, r7, #20
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	480e      	ldr	r0, [pc, #56]	; (8003f20 <HAL_UART_MspInit+0xb8>)
 8003ee8:	f000 fa72 	bl	80043d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_ENABLE();
 8003eec:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <HAL_UART_MspInit+0xbc>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0a:	4a06      	ldr	r2, [pc, #24]	; (8003f24 <HAL_UART_MspInit+0xbc>)
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f10:	bf00      	nop
 8003f12:	3728      	adds	r7, #40	; 0x28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40004800 	.word	0x40004800
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40011400 	.word	0x40011400
 8003f24:	40010000 	.word	0x40010000

08003f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f2c:	e7fe      	b.n	8003f2c <NMI_Handler+0x4>

08003f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f32:	e7fe      	b.n	8003f32 <HardFault_Handler+0x4>

08003f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f38:	e7fe      	b.n	8003f38 <MemManage_Handler+0x4>

08003f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f3e:	e7fe      	b.n	8003f3e <BusFault_Handler+0x4>

08003f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f44:	e7fe      	b.n	8003f44 <UsageFault_Handler+0x4>

08003f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f46:	b480      	push	{r7}
 8003f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f52:	b480      	push	{r7}
 8003f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f56:	bf00      	nop
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f6e:	f000 f8e1 	bl	8004134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f7c:	4802      	ldr	r0, [pc, #8]	; (8003f88 <TIM3_IRQHandler+0x10>)
 8003f7e:	f003 fced 	bl	800795c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	200001ac 	.word	0x200001ac

08003f8c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f90:	4802      	ldr	r0, [pc, #8]	; (8003f9c <TIM4_IRQHandler+0x10>)
 8003f92:	f003 fce3 	bl	800795c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	200001f4 	.word	0x200001f4

08003fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
	return 1;
 8003fa4:	2301      	movs	r3, #1
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <_kill>:

int _kill(int pid, int sig)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003fb8:	f004 f954 	bl	8008264 <__errno>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2216      	movs	r2, #22
 8003fc0:	601a      	str	r2, [r3, #0]
	return -1;
 8003fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <_exit>:

void _exit (int status)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003fd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff ffe7 	bl	8003fae <_kill>
	while (1) {}		/* Make sure we hang here */
 8003fe0:	e7fe      	b.n	8003fe0 <_exit+0x12>
	...

08003fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fec:	4a14      	ldr	r2, [pc, #80]	; (8004040 <_sbrk+0x5c>)
 8003fee:	4b15      	ldr	r3, [pc, #84]	; (8004044 <_sbrk+0x60>)
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ff8:	4b13      	ldr	r3, [pc, #76]	; (8004048 <_sbrk+0x64>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d102      	bne.n	8004006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <_sbrk+0x64>)
 8004002:	4a12      	ldr	r2, [pc, #72]	; (800404c <_sbrk+0x68>)
 8004004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <_sbrk+0x64>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	429a      	cmp	r2, r3
 8004012:	d207      	bcs.n	8004024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004014:	f004 f926 	bl	8008264 <__errno>
 8004018:	4603      	mov	r3, r0
 800401a:	220c      	movs	r2, #12
 800401c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800401e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004022:	e009      	b.n	8004038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004024:	4b08      	ldr	r3, [pc, #32]	; (8004048 <_sbrk+0x64>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800402a:	4b07      	ldr	r3, [pc, #28]	; (8004048 <_sbrk+0x64>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	4a05      	ldr	r2, [pc, #20]	; (8004048 <_sbrk+0x64>)
 8004034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004036:	68fb      	ldr	r3, [r7, #12]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20010000 	.word	0x20010000
 8004044:	00000400 	.word	0x00000400
 8004048:	20000368 	.word	0x20000368
 800404c:	20000388 	.word	0x20000388

08004050 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800405c:	480c      	ldr	r0, [pc, #48]	; (8004090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800405e:	490d      	ldr	r1, [pc, #52]	; (8004094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004060:	4a0d      	ldr	r2, [pc, #52]	; (8004098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004064:	e002      	b.n	800406c <LoopCopyDataInit>

08004066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800406a:	3304      	adds	r3, #4

0800406c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800406c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800406e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004070:	d3f9      	bcc.n	8004066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004072:	4a0a      	ldr	r2, [pc, #40]	; (800409c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004074:	4c0a      	ldr	r4, [pc, #40]	; (80040a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004078:	e001      	b.n	800407e <LoopFillZerobss>

0800407a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800407a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800407c:	3204      	adds	r2, #4

0800407e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800407e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004080:	d3fb      	bcc.n	800407a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004082:	f7ff ffe5 	bl	8004050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004086:	f004 f8f3 	bl	8008270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800408a:	f7ff f98b 	bl	80033a4 <main>
  bx lr
 800408e:	4770      	bx	lr
  ldr r0, =_sdata
 8004090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004094:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004098:	0800910c 	.word	0x0800910c
  ldr r2, =_sbss
 800409c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80040a0:	20000384 	.word	0x20000384

080040a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040a4:	e7fe      	b.n	80040a4 <ADC1_2_IRQHandler>
	...

080040a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040ac:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <HAL_Init+0x28>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <HAL_Init+0x28>)
 80040b2:	f043 0310 	orr.w	r3, r3, #16
 80040b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040b8:	2003      	movs	r0, #3
 80040ba:	f000 f947 	bl	800434c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040be:	200f      	movs	r0, #15
 80040c0:	f000 f808 	bl	80040d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040c4:	f7ff fd16 	bl	8003af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40022000 	.word	0x40022000

080040d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040dc:	4b12      	ldr	r3, [pc, #72]	; (8004128 <HAL_InitTick+0x54>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4b12      	ldr	r3, [pc, #72]	; (800412c <HAL_InitTick+0x58>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	4619      	mov	r1, r3
 80040e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f95f 	bl	80043b6 <HAL_SYSTICK_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e00e      	b.n	8004120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b0f      	cmp	r3, #15
 8004106:	d80a      	bhi.n	800411e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004108:	2200      	movs	r2, #0
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004110:	f000 f927 	bl	8004362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004114:	4a06      	ldr	r2, [pc, #24]	; (8004130 <HAL_InitTick+0x5c>)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	e000      	b.n	8004120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000004 	.word	0x20000004
 800412c:	2000000c 	.word	0x2000000c
 8004130:	20000008 	.word	0x20000008

08004134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_IncTick+0x1c>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_IncTick+0x20>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4413      	add	r3, r2
 8004144:	4a03      	ldr	r2, [pc, #12]	; (8004154 <HAL_IncTick+0x20>)
 8004146:	6013      	str	r3, [r2, #0]
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	2000000c 	.word	0x2000000c
 8004154:	2000036c 	.word	0x2000036c

08004158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return uwTick;
 800415c:	4b02      	ldr	r3, [pc, #8]	; (8004168 <HAL_GetTick+0x10>)
 800415e:	681b      	ldr	r3, [r3, #0]
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr
 8004168:	2000036c 	.word	0x2000036c

0800416c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004174:	f7ff fff0 	bl	8004158 <HAL_GetTick>
 8004178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004184:	d005      	beq.n	8004192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004186:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <HAL_Delay+0x44>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4413      	add	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004192:	bf00      	nop
 8004194:	f7ff ffe0 	bl	8004158 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d8f7      	bhi.n	8004194 <HAL_Delay+0x28>
  {
  }
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2000000c 	.word	0x2000000c

080041b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <__NVIC_SetPriorityGrouping+0x44>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041d0:	4013      	ands	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041e6:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <__NVIC_SetPriorityGrouping+0x44>)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	60d3      	str	r3, [r2, #12]
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	e000ed00 	.word	0xe000ed00

080041fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004200:	4b04      	ldr	r3, [pc, #16]	; (8004214 <__NVIC_GetPriorityGrouping+0x18>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	f003 0307 	and.w	r3, r3, #7
}
 800420a:	4618      	mov	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004226:	2b00      	cmp	r3, #0
 8004228:	db0b      	blt.n	8004242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	f003 021f 	and.w	r2, r3, #31
 8004230:	4906      	ldr	r1, [pc, #24]	; (800424c <__NVIC_EnableIRQ+0x34>)
 8004232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	2001      	movs	r0, #1
 800423a:	fa00 f202 	lsl.w	r2, r0, r2
 800423e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr
 800424c:	e000e100 	.word	0xe000e100

08004250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	6039      	str	r1, [r7, #0]
 800425a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004260:	2b00      	cmp	r3, #0
 8004262:	db0a      	blt.n	800427a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	490c      	ldr	r1, [pc, #48]	; (800429c <__NVIC_SetPriority+0x4c>)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	0112      	lsls	r2, r2, #4
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	440b      	add	r3, r1
 8004274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004278:	e00a      	b.n	8004290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	4908      	ldr	r1, [pc, #32]	; (80042a0 <__NVIC_SetPriority+0x50>)
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	3b04      	subs	r3, #4
 8004288:	0112      	lsls	r2, r2, #4
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	440b      	add	r3, r1
 800428e:	761a      	strb	r2, [r3, #24]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	e000e100 	.word	0xe000e100
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b089      	sub	sp, #36	; 0x24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f1c3 0307 	rsb	r3, r3, #7
 80042be:	2b04      	cmp	r3, #4
 80042c0:	bf28      	it	cs
 80042c2:	2304      	movcs	r3, #4
 80042c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3304      	adds	r3, #4
 80042ca:	2b06      	cmp	r3, #6
 80042cc:	d902      	bls.n	80042d4 <NVIC_EncodePriority+0x30>
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	3b03      	subs	r3, #3
 80042d2:	e000      	b.n	80042d6 <NVIC_EncodePriority+0x32>
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43da      	mvns	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	401a      	ands	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	43d9      	mvns	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042fc:	4313      	orrs	r3, r2
         );
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3724      	adds	r7, #36	; 0x24
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr

08004308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3b01      	subs	r3, #1
 8004314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004318:	d301      	bcc.n	800431e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800431a:	2301      	movs	r3, #1
 800431c:	e00f      	b.n	800433e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800431e:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <SysTick_Config+0x40>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3b01      	subs	r3, #1
 8004324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004326:	210f      	movs	r1, #15
 8004328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800432c:	f7ff ff90 	bl	8004250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <SysTick_Config+0x40>)
 8004332:	2200      	movs	r2, #0
 8004334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004336:	4b04      	ldr	r3, [pc, #16]	; (8004348 <SysTick_Config+0x40>)
 8004338:	2207      	movs	r2, #7
 800433a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	e000e010 	.word	0xe000e010

0800434c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff ff2d 	bl	80041b4 <__NVIC_SetPriorityGrouping>
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004362:	b580      	push	{r7, lr}
 8004364:	b086      	sub	sp, #24
 8004366:	af00      	add	r7, sp, #0
 8004368:	4603      	mov	r3, r0
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004374:	f7ff ff42 	bl	80041fc <__NVIC_GetPriorityGrouping>
 8004378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	6978      	ldr	r0, [r7, #20]
 8004380:	f7ff ff90 	bl	80042a4 <NVIC_EncodePriority>
 8004384:	4602      	mov	r2, r0
 8004386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800438a:	4611      	mov	r1, r2
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff ff5f 	bl	8004250 <__NVIC_SetPriority>
}
 8004392:	bf00      	nop
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	4603      	mov	r3, r0
 80043a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff35 	bl	8004218 <__NVIC_EnableIRQ>
}
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff ffa2 	bl	8004308 <SysTick_Config>
 80043c4:	4603      	mov	r3, r0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b08b      	sub	sp, #44	; 0x2c
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043da:	2300      	movs	r3, #0
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80043de:	2300      	movs	r3, #0
 80043e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043e2:	e179      	b.n	80046d8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80043e4:	2201      	movs	r2, #1
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	f040 8168 	bne.w	80046d2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4a96      	ldr	r2, [pc, #600]	; (8004660 <HAL_GPIO_Init+0x290>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d05e      	beq.n	80044ca <HAL_GPIO_Init+0xfa>
 800440c:	4a94      	ldr	r2, [pc, #592]	; (8004660 <HAL_GPIO_Init+0x290>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d875      	bhi.n	80044fe <HAL_GPIO_Init+0x12e>
 8004412:	4a94      	ldr	r2, [pc, #592]	; (8004664 <HAL_GPIO_Init+0x294>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d058      	beq.n	80044ca <HAL_GPIO_Init+0xfa>
 8004418:	4a92      	ldr	r2, [pc, #584]	; (8004664 <HAL_GPIO_Init+0x294>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d86f      	bhi.n	80044fe <HAL_GPIO_Init+0x12e>
 800441e:	4a92      	ldr	r2, [pc, #584]	; (8004668 <HAL_GPIO_Init+0x298>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d052      	beq.n	80044ca <HAL_GPIO_Init+0xfa>
 8004424:	4a90      	ldr	r2, [pc, #576]	; (8004668 <HAL_GPIO_Init+0x298>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d869      	bhi.n	80044fe <HAL_GPIO_Init+0x12e>
 800442a:	4a90      	ldr	r2, [pc, #576]	; (800466c <HAL_GPIO_Init+0x29c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d04c      	beq.n	80044ca <HAL_GPIO_Init+0xfa>
 8004430:	4a8e      	ldr	r2, [pc, #568]	; (800466c <HAL_GPIO_Init+0x29c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d863      	bhi.n	80044fe <HAL_GPIO_Init+0x12e>
 8004436:	4a8e      	ldr	r2, [pc, #568]	; (8004670 <HAL_GPIO_Init+0x2a0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d046      	beq.n	80044ca <HAL_GPIO_Init+0xfa>
 800443c:	4a8c      	ldr	r2, [pc, #560]	; (8004670 <HAL_GPIO_Init+0x2a0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d85d      	bhi.n	80044fe <HAL_GPIO_Init+0x12e>
 8004442:	2b12      	cmp	r3, #18
 8004444:	d82a      	bhi.n	800449c <HAL_GPIO_Init+0xcc>
 8004446:	2b12      	cmp	r3, #18
 8004448:	d859      	bhi.n	80044fe <HAL_GPIO_Init+0x12e>
 800444a:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <HAL_GPIO_Init+0x80>)
 800444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004450:	080044cb 	.word	0x080044cb
 8004454:	080044a5 	.word	0x080044a5
 8004458:	080044b7 	.word	0x080044b7
 800445c:	080044f9 	.word	0x080044f9
 8004460:	080044ff 	.word	0x080044ff
 8004464:	080044ff 	.word	0x080044ff
 8004468:	080044ff 	.word	0x080044ff
 800446c:	080044ff 	.word	0x080044ff
 8004470:	080044ff 	.word	0x080044ff
 8004474:	080044ff 	.word	0x080044ff
 8004478:	080044ff 	.word	0x080044ff
 800447c:	080044ff 	.word	0x080044ff
 8004480:	080044ff 	.word	0x080044ff
 8004484:	080044ff 	.word	0x080044ff
 8004488:	080044ff 	.word	0x080044ff
 800448c:	080044ff 	.word	0x080044ff
 8004490:	080044ff 	.word	0x080044ff
 8004494:	080044ad 	.word	0x080044ad
 8004498:	080044c1 	.word	0x080044c1
 800449c:	4a75      	ldr	r2, [pc, #468]	; (8004674 <HAL_GPIO_Init+0x2a4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044a2:	e02c      	b.n	80044fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	623b      	str	r3, [r7, #32]
          break;
 80044aa:	e029      	b.n	8004500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	3304      	adds	r3, #4
 80044b2:	623b      	str	r3, [r7, #32]
          break;
 80044b4:	e024      	b.n	8004500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	3308      	adds	r3, #8
 80044bc:	623b      	str	r3, [r7, #32]
          break;
 80044be:	e01f      	b.n	8004500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	330c      	adds	r3, #12
 80044c6:	623b      	str	r3, [r7, #32]
          break;
 80044c8:	e01a      	b.n	8004500 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044d2:	2304      	movs	r3, #4
 80044d4:	623b      	str	r3, [r7, #32]
          break;
 80044d6:	e013      	b.n	8004500 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d105      	bne.n	80044ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044e0:	2308      	movs	r3, #8
 80044e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	611a      	str	r2, [r3, #16]
          break;
 80044ea:	e009      	b.n	8004500 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044ec:	2308      	movs	r3, #8
 80044ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	615a      	str	r2, [r3, #20]
          break;
 80044f6:	e003      	b.n	8004500 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80044f8:	2300      	movs	r3, #0
 80044fa:	623b      	str	r3, [r7, #32]
          break;
 80044fc:	e000      	b.n	8004500 <HAL_GPIO_Init+0x130>
          break;
 80044fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2bff      	cmp	r3, #255	; 0xff
 8004504:	d801      	bhi.n	800450a <HAL_GPIO_Init+0x13a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	e001      	b.n	800450e <HAL_GPIO_Init+0x13e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3304      	adds	r3, #4
 800450e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2bff      	cmp	r3, #255	; 0xff
 8004514:	d802      	bhi.n	800451c <HAL_GPIO_Init+0x14c>
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	e002      	b.n	8004522 <HAL_GPIO_Init+0x152>
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	3b08      	subs	r3, #8
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	210f      	movs	r1, #15
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	fa01 f303 	lsl.w	r3, r1, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	401a      	ands	r2, r3
 8004534:	6a39      	ldr	r1, [r7, #32]
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	431a      	orrs	r2, r3
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 80c1 	beq.w	80046d2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004550:	4b49      	ldr	r3, [pc, #292]	; (8004678 <HAL_GPIO_Init+0x2a8>)
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	4a48      	ldr	r2, [pc, #288]	; (8004678 <HAL_GPIO_Init+0x2a8>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	6193      	str	r3, [r2, #24]
 800455c:	4b46      	ldr	r3, [pc, #280]	; (8004678 <HAL_GPIO_Init+0x2a8>)
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004568:	4a44      	ldr	r2, [pc, #272]	; (800467c <HAL_GPIO_Init+0x2ac>)
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	089b      	lsrs	r3, r3, #2
 800456e:	3302      	adds	r3, #2
 8004570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004574:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	220f      	movs	r2, #15
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4013      	ands	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a3c      	ldr	r2, [pc, #240]	; (8004680 <HAL_GPIO_Init+0x2b0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d01f      	beq.n	80045d4 <HAL_GPIO_Init+0x204>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a3b      	ldr	r2, [pc, #236]	; (8004684 <HAL_GPIO_Init+0x2b4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d019      	beq.n	80045d0 <HAL_GPIO_Init+0x200>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a3a      	ldr	r2, [pc, #232]	; (8004688 <HAL_GPIO_Init+0x2b8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d013      	beq.n	80045cc <HAL_GPIO_Init+0x1fc>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a39      	ldr	r2, [pc, #228]	; (800468c <HAL_GPIO_Init+0x2bc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00d      	beq.n	80045c8 <HAL_GPIO_Init+0x1f8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a38      	ldr	r2, [pc, #224]	; (8004690 <HAL_GPIO_Init+0x2c0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <HAL_GPIO_Init+0x1f4>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a37      	ldr	r2, [pc, #220]	; (8004694 <HAL_GPIO_Init+0x2c4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d101      	bne.n	80045c0 <HAL_GPIO_Init+0x1f0>
 80045bc:	2305      	movs	r3, #5
 80045be:	e00a      	b.n	80045d6 <HAL_GPIO_Init+0x206>
 80045c0:	2306      	movs	r3, #6
 80045c2:	e008      	b.n	80045d6 <HAL_GPIO_Init+0x206>
 80045c4:	2304      	movs	r3, #4
 80045c6:	e006      	b.n	80045d6 <HAL_GPIO_Init+0x206>
 80045c8:	2303      	movs	r3, #3
 80045ca:	e004      	b.n	80045d6 <HAL_GPIO_Init+0x206>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e002      	b.n	80045d6 <HAL_GPIO_Init+0x206>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_GPIO_Init+0x206>
 80045d4:	2300      	movs	r3, #0
 80045d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d8:	f002 0203 	and.w	r2, r2, #3
 80045dc:	0092      	lsls	r2, r2, #2
 80045de:	4093      	lsls	r3, r2
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80045e6:	4925      	ldr	r1, [pc, #148]	; (800467c <HAL_GPIO_Init+0x2ac>)
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	089b      	lsrs	r3, r3, #2
 80045ec:	3302      	adds	r3, #2
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d006      	beq.n	800460e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004600:	4b25      	ldr	r3, [pc, #148]	; (8004698 <HAL_GPIO_Init+0x2c8>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4924      	ldr	r1, [pc, #144]	; (8004698 <HAL_GPIO_Init+0x2c8>)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	4313      	orrs	r3, r2
 800460a:	600b      	str	r3, [r1, #0]
 800460c:	e006      	b.n	800461c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800460e:	4b22      	ldr	r3, [pc, #136]	; (8004698 <HAL_GPIO_Init+0x2c8>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	43db      	mvns	r3, r3
 8004616:	4920      	ldr	r1, [pc, #128]	; (8004698 <HAL_GPIO_Init+0x2c8>)
 8004618:	4013      	ands	r3, r2
 800461a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d006      	beq.n	8004636 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004628:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <HAL_GPIO_Init+0x2c8>)
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	491a      	ldr	r1, [pc, #104]	; (8004698 <HAL_GPIO_Init+0x2c8>)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]
 8004634:	e006      	b.n	8004644 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004636:	4b18      	ldr	r3, [pc, #96]	; (8004698 <HAL_GPIO_Init+0x2c8>)
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	43db      	mvns	r3, r3
 800463e:	4916      	ldr	r1, [pc, #88]	; (8004698 <HAL_GPIO_Init+0x2c8>)
 8004640:	4013      	ands	r3, r2
 8004642:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d025      	beq.n	800469c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004650:	4b11      	ldr	r3, [pc, #68]	; (8004698 <HAL_GPIO_Init+0x2c8>)
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	4910      	ldr	r1, [pc, #64]	; (8004698 <HAL_GPIO_Init+0x2c8>)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	4313      	orrs	r3, r2
 800465a:	608b      	str	r3, [r1, #8]
 800465c:	e025      	b.n	80046aa <HAL_GPIO_Init+0x2da>
 800465e:	bf00      	nop
 8004660:	10320000 	.word	0x10320000
 8004664:	10310000 	.word	0x10310000
 8004668:	10220000 	.word	0x10220000
 800466c:	10210000 	.word	0x10210000
 8004670:	10120000 	.word	0x10120000
 8004674:	10110000 	.word	0x10110000
 8004678:	40021000 	.word	0x40021000
 800467c:	40010000 	.word	0x40010000
 8004680:	40010800 	.word	0x40010800
 8004684:	40010c00 	.word	0x40010c00
 8004688:	40011000 	.word	0x40011000
 800468c:	40011400 	.word	0x40011400
 8004690:	40011800 	.word	0x40011800
 8004694:	40011c00 	.word	0x40011c00
 8004698:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800469c:	4b15      	ldr	r3, [pc, #84]	; (80046f4 <HAL_GPIO_Init+0x324>)
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	43db      	mvns	r3, r3
 80046a4:	4913      	ldr	r1, [pc, #76]	; (80046f4 <HAL_GPIO_Init+0x324>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d006      	beq.n	80046c4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046b6:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <HAL_GPIO_Init+0x324>)
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	490e      	ldr	r1, [pc, #56]	; (80046f4 <HAL_GPIO_Init+0x324>)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60cb      	str	r3, [r1, #12]
 80046c2:	e006      	b.n	80046d2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_GPIO_Init+0x324>)
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	43db      	mvns	r3, r3
 80046cc:	4909      	ldr	r1, [pc, #36]	; (80046f4 <HAL_GPIO_Init+0x324>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	3301      	adds	r3, #1
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	fa22 f303 	lsr.w	r3, r2, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f47f ae7e 	bne.w	80043e4 <HAL_GPIO_Init+0x14>
  }
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	372c      	adds	r7, #44	; 0x2c
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr
 80046f4:	40010400 	.word	0x40010400

080046f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	887b      	ldrh	r3, [r7, #2]
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
 8004714:	e001      	b.n	800471a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004716:	2300      	movs	r3, #0
 8004718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800471a:	7bfb      	ldrb	r3, [r7, #15]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr

08004726 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	460b      	mov	r3, r1
 8004730:	807b      	strh	r3, [r7, #2]
 8004732:	4613      	mov	r3, r2
 8004734:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004736:	787b      	ldrb	r3, [r7, #1]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800473c:	887a      	ldrh	r2, [r7, #2]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004742:	e003      	b.n	800474c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004744:	887b      	ldrh	r3, [r7, #2]
 8004746:	041a      	lsls	r2, r3, #16
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	611a      	str	r2, [r3, #16]
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr
	...

08004758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e12b      	b.n	80049c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff f9ea 	bl	8003b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2224      	movs	r2, #36	; 0x24
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047bc:	f002 f98a 	bl	8006ad4 <HAL_RCC_GetPCLK1Freq>
 80047c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4a81      	ldr	r2, [pc, #516]	; (80049cc <HAL_I2C_Init+0x274>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d807      	bhi.n	80047dc <HAL_I2C_Init+0x84>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4a80      	ldr	r2, [pc, #512]	; (80049d0 <HAL_I2C_Init+0x278>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	bf94      	ite	ls
 80047d4:	2301      	movls	r3, #1
 80047d6:	2300      	movhi	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	e006      	b.n	80047ea <HAL_I2C_Init+0x92>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4a7d      	ldr	r2, [pc, #500]	; (80049d4 <HAL_I2C_Init+0x27c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	bf94      	ite	ls
 80047e4:	2301      	movls	r3, #1
 80047e6:	2300      	movhi	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0e7      	b.n	80049c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4a78      	ldr	r2, [pc, #480]	; (80049d8 <HAL_I2C_Init+0x280>)
 80047f6:	fba2 2303 	umull	r2, r3, r2, r3
 80047fa:	0c9b      	lsrs	r3, r3, #18
 80047fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4a6a      	ldr	r2, [pc, #424]	; (80049cc <HAL_I2C_Init+0x274>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d802      	bhi.n	800482c <HAL_I2C_Init+0xd4>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	3301      	adds	r3, #1
 800482a:	e009      	b.n	8004840 <HAL_I2C_Init+0xe8>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004832:	fb02 f303 	mul.w	r3, r2, r3
 8004836:	4a69      	ldr	r2, [pc, #420]	; (80049dc <HAL_I2C_Init+0x284>)
 8004838:	fba2 2303 	umull	r2, r3, r2, r3
 800483c:	099b      	lsrs	r3, r3, #6
 800483e:	3301      	adds	r3, #1
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	430b      	orrs	r3, r1
 8004846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004852:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	495c      	ldr	r1, [pc, #368]	; (80049cc <HAL_I2C_Init+0x274>)
 800485c:	428b      	cmp	r3, r1
 800485e:	d819      	bhi.n	8004894 <HAL_I2C_Init+0x13c>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1e59      	subs	r1, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	fbb1 f3f3 	udiv	r3, r1, r3
 800486e:	1c59      	adds	r1, r3, #1
 8004870:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004874:	400b      	ands	r3, r1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_I2C_Init+0x138>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1e59      	subs	r1, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	fbb1 f3f3 	udiv	r3, r1, r3
 8004888:	3301      	adds	r3, #1
 800488a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488e:	e051      	b.n	8004934 <HAL_I2C_Init+0x1dc>
 8004890:	2304      	movs	r3, #4
 8004892:	e04f      	b.n	8004934 <HAL_I2C_Init+0x1dc>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d111      	bne.n	80048c0 <HAL_I2C_Init+0x168>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1e58      	subs	r0, r3, #1
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6859      	ldr	r1, [r3, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	440b      	add	r3, r1
 80048aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ae:	3301      	adds	r3, #1
 80048b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	bf0c      	ite	eq
 80048b8:	2301      	moveq	r3, #1
 80048ba:	2300      	movne	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	e012      	b.n	80048e6 <HAL_I2C_Init+0x18e>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	1e58      	subs	r0, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6859      	ldr	r1, [r3, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	0099      	lsls	r1, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d6:	3301      	adds	r3, #1
 80048d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf0c      	ite	eq
 80048e0:	2301      	moveq	r3, #1
 80048e2:	2300      	movne	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_I2C_Init+0x196>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e022      	b.n	8004934 <HAL_I2C_Init+0x1dc>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10e      	bne.n	8004914 <HAL_I2C_Init+0x1bc>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1e58      	subs	r0, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6859      	ldr	r1, [r3, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	440b      	add	r3, r1
 8004904:	fbb0 f3f3 	udiv	r3, r0, r3
 8004908:	3301      	adds	r3, #1
 800490a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004912:	e00f      	b.n	8004934 <HAL_I2C_Init+0x1dc>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1e58      	subs	r0, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6859      	ldr	r1, [r3, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	0099      	lsls	r1, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	fbb0 f3f3 	udiv	r3, r0, r3
 800492a:	3301      	adds	r3, #1
 800492c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	6809      	ldr	r1, [r1, #0]
 8004938:	4313      	orrs	r3, r2
 800493a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69da      	ldr	r2, [r3, #28]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004962:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6911      	ldr	r1, [r2, #16]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68d2      	ldr	r2, [r2, #12]
 800496e:	4311      	orrs	r1, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	430b      	orrs	r3, r1
 8004976:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	000186a0 	.word	0x000186a0
 80049d0:	001e847f 	.word	0x001e847f
 80049d4:	003d08ff 	.word	0x003d08ff
 80049d8:	431bde83 	.word	0x431bde83
 80049dc:	10624dd3 	.word	0x10624dd3

080049e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	607a      	str	r2, [r7, #4]
 80049ea:	461a      	mov	r2, r3
 80049ec:	460b      	mov	r3, r1
 80049ee:	817b      	strh	r3, [r7, #10]
 80049f0:	4613      	mov	r3, r2
 80049f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049f4:	f7ff fbb0 	bl	8004158 <HAL_GetTick>
 80049f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	f040 80e0 	bne.w	8004bc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	2319      	movs	r3, #25
 8004a0e:	2201      	movs	r2, #1
 8004a10:	4970      	ldr	r1, [pc, #448]	; (8004bd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f001 faa0 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e0d3      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_I2C_Master_Transmit+0x50>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e0cc      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1ea>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d007      	beq.n	8004a56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2221      	movs	r2, #33	; 0x21
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2210      	movs	r2, #16
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	893a      	ldrh	r2, [r7, #8]
 8004a86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a50      	ldr	r2, [pc, #320]	; (8004bd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004a96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a98:	8979      	ldrh	r1, [r7, #10]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	6a3a      	ldr	r2, [r7, #32]
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 ff8c 	bl	80059bc <I2C_MasterRequestWrite>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e08d      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ac4:	e066      	b.n	8004b94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	6a39      	ldr	r1, [r7, #32]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f001 fb1a 	bl	8006104 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d107      	bne.n	8004aee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e06b      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	781a      	ldrb	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d11b      	bne.n	8004b68 <HAL_I2C_Master_Transmit+0x188>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d017      	beq.n	8004b68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	781a      	ldrb	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	6a39      	ldr	r1, [r7, #32]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f001 fb0a 	bl	8006186 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00d      	beq.n	8004b94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d107      	bne.n	8004b90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e01a      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d194      	bne.n	8004ac6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e000      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004bc8:	2302      	movs	r3, #2
  }
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	00100002 	.word	0x00100002
 8004bd8:	ffff0000 	.word	0xffff0000

08004bdc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	; 0x30
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	461a      	mov	r2, r3
 8004be8:	460b      	mov	r3, r1
 8004bea:	817b      	strh	r3, [r7, #10]
 8004bec:	4613      	mov	r3, r2
 8004bee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bf4:	f7ff fab0 	bl	8004158 <HAL_GetTick>
 8004bf8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	f040 823f 	bne.w	8005086 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	2319      	movs	r3, #25
 8004c0e:	2201      	movs	r2, #1
 8004c10:	497f      	ldr	r1, [pc, #508]	; (8004e10 <HAL_I2C_Master_Receive+0x234>)
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f001 f9a0 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e232      	b.n	8005088 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_I2C_Master_Receive+0x54>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e22b      	b.n	8005088 <HAL_I2C_Master_Receive+0x4ac>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d007      	beq.n	8004c56 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f042 0201 	orr.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2222      	movs	r2, #34	; 0x22
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2210      	movs	r2, #16
 8004c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	893a      	ldrh	r2, [r7, #8]
 8004c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a5f      	ldr	r2, [pc, #380]	; (8004e14 <HAL_I2C_Master_Receive+0x238>)
 8004c96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c98:	8979      	ldrh	r1, [r7, #10]
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 ff0e 	bl	8005ac0 <I2C_MasterRequestRead>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e1ec      	b.n	8005088 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d113      	bne.n	8004cde <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	e1c0      	b.n	8005060 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d11e      	bne.n	8004d24 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cf6:	b672      	cpsid	i
}
 8004cf8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d20:	b662      	cpsie	i
}
 8004d22:	e035      	b.n	8004d90 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d11e      	bne.n	8004d6a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d3c:	b672      	cpsid	i
}
 8004d3e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d66:	b662      	cpsie	i
}
 8004d68:	e012      	b.n	8004d90 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004d90:	e166      	b.n	8005060 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	f200 811f 	bhi.w	8004fda <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d123      	bne.n	8004dec <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f001 fa2d 	bl	8006208 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e167      	b.n	8005088 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dea:	e139      	b.n	8005060 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d152      	bne.n	8004e9a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	4906      	ldr	r1, [pc, #24]	; (8004e18 <HAL_I2C_Master_Receive+0x23c>)
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f001 f8aa 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d008      	beq.n	8004e1c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e13c      	b.n	8005088 <HAL_I2C_Master_Receive+0x4ac>
 8004e0e:	bf00      	nop
 8004e10:	00100002 	.word	0x00100002
 8004e14:	ffff0000 	.word	0xffff0000
 8004e18:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004e1c:	b672      	cpsid	i
}
 8004e1e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004e62:	b662      	cpsie	i
}
 8004e64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e98:	e0e2      	b.n	8005060 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	497b      	ldr	r1, [pc, #492]	; (8005090 <HAL_I2C_Master_Receive+0x4b4>)
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f001 f857 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0e9      	b.n	8005088 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ec4:	b672      	cpsid	i
}
 8004ec6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004efa:	4b66      	ldr	r3, [pc, #408]	; (8005094 <HAL_I2C_Master_Receive+0x4b8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	08db      	lsrs	r3, r3, #3
 8004f00:	4a65      	ldr	r2, [pc, #404]	; (8005098 <HAL_I2C_Master_Receive+0x4bc>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	0a1a      	lsrs	r2, r3, #8
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	00da      	lsls	r2, r3, #3
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d118      	bne.n	8004f52 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f043 0220 	orr.w	r2, r3, #32
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004f42:	b662      	cpsie	i
}
 8004f44:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e09a      	b.n	8005088 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d1d9      	bne.n	8004f14 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004fa2:	b662      	cpsie	i
}
 8004fa4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fd8:	e042      	b.n	8005060 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f001 f912 	bl	8006208 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e04c      	b.n	8005088 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b04      	cmp	r3, #4
 800502c:	d118      	bne.n	8005060 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005064:	2b00      	cmp	r3, #0
 8005066:	f47f ae94 	bne.w	8004d92 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e000      	b.n	8005088 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8005086:	2302      	movs	r3, #2
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3728      	adds	r7, #40	; 0x28
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	00010004 	.word	0x00010004
 8005094:	20000004 	.word	0x20000004
 8005098:	14f8b589 	.word	0x14f8b589

0800509c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	4608      	mov	r0, r1
 80050a6:	4611      	mov	r1, r2
 80050a8:	461a      	mov	r2, r3
 80050aa:	4603      	mov	r3, r0
 80050ac:	817b      	strh	r3, [r7, #10]
 80050ae:	460b      	mov	r3, r1
 80050b0:	813b      	strh	r3, [r7, #8]
 80050b2:	4613      	mov	r3, r2
 80050b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050b6:	f7ff f84f 	bl	8004158 <HAL_GetTick>
 80050ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	f040 80d9 	bne.w	800527c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2319      	movs	r3, #25
 80050d0:	2201      	movs	r2, #1
 80050d2:	496d      	ldr	r1, [pc, #436]	; (8005288 <HAL_I2C_Mem_Write+0x1ec>)
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 ff3f 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80050e0:	2302      	movs	r3, #2
 80050e2:	e0cc      	b.n	800527e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_I2C_Mem_Write+0x56>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e0c5      	b.n	800527e <HAL_I2C_Mem_Write+0x1e2>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b01      	cmp	r3, #1
 8005106:	d007      	beq.n	8005118 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005126:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2221      	movs	r2, #33	; 0x21
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2240      	movs	r2, #64	; 0x40
 8005134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a3a      	ldr	r2, [r7, #32]
 8005142:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005148:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4a4d      	ldr	r2, [pc, #308]	; (800528c <HAL_I2C_Mem_Write+0x1f0>)
 8005158:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800515a:	88f8      	ldrh	r0, [r7, #6]
 800515c:	893a      	ldrh	r2, [r7, #8]
 800515e:	8979      	ldrh	r1, [r7, #10]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	4603      	mov	r3, r0
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fd76 	bl	8005c5c <I2C_RequestMemoryWrite>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d052      	beq.n	800521c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e081      	b.n	800527e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 ffc0 	bl	8006104 <I2C_WaitOnTXEFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00d      	beq.n	80051a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b04      	cmp	r3, #4
 8005190:	d107      	bne.n	80051a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e06b      	b.n	800527e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	781a      	ldrb	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d11b      	bne.n	800521c <HAL_I2C_Mem_Write+0x180>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d017      	beq.n	800521c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	781a      	ldrb	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1aa      	bne.n	800517a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 ffac 	bl	8006186 <I2C_WaitOnBTFFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00d      	beq.n	8005250 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	2b04      	cmp	r3, #4
 800523a:	d107      	bne.n	800524c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e016      	b.n	800527e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800525e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	e000      	b.n	800527e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800527c:	2302      	movs	r3, #2
  }
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	00100002 	.word	0x00100002
 800528c:	ffff0000 	.word	0xffff0000

08005290 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08c      	sub	sp, #48	; 0x30
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	4608      	mov	r0, r1
 800529a:	4611      	mov	r1, r2
 800529c:	461a      	mov	r2, r3
 800529e:	4603      	mov	r3, r0
 80052a0:	817b      	strh	r3, [r7, #10]
 80052a2:	460b      	mov	r3, r1
 80052a4:	813b      	strh	r3, [r7, #8]
 80052a6:	4613      	mov	r3, r2
 80052a8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052ae:	f7fe ff53 	bl	8004158 <HAL_GetTick>
 80052b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b20      	cmp	r3, #32
 80052be:	f040 8244 	bne.w	800574a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	2319      	movs	r3, #25
 80052c8:	2201      	movs	r2, #1
 80052ca:	4982      	ldr	r1, [pc, #520]	; (80054d4 <HAL_I2C_Mem_Read+0x244>)
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fe43 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80052d8:	2302      	movs	r3, #2
 80052da:	e237      	b.n	800574c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_I2C_Mem_Read+0x5a>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e230      	b.n	800574c <HAL_I2C_Mem_Read+0x4bc>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d007      	beq.n	8005310 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800531e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2222      	movs	r2, #34	; 0x22
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2240      	movs	r2, #64	; 0x40
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005340:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4a62      	ldr	r2, [pc, #392]	; (80054d8 <HAL_I2C_Mem_Read+0x248>)
 8005350:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005352:	88f8      	ldrh	r0, [r7, #6]
 8005354:	893a      	ldrh	r2, [r7, #8]
 8005356:	8979      	ldrh	r1, [r7, #10]
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	4603      	mov	r3, r0
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fd10 	bl	8005d88 <I2C_RequestMemoryRead>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e1ec      	b.n	800574c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005376:	2b00      	cmp	r3, #0
 8005378:	d113      	bne.n	80053a2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800537a:	2300      	movs	r3, #0
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	e1c0      	b.n	8005724 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d11e      	bne.n	80053e8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80053ba:	b672      	cpsid	i
}
 80053bc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053be:	2300      	movs	r3, #0
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	61bb      	str	r3, [r7, #24]
 80053d2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80053e4:	b662      	cpsie	i
}
 80053e6:	e035      	b.n	8005454 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d11e      	bne.n	800542e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005400:	b672      	cpsid	i
}
 8005402:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005428:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800542a:	b662      	cpsie	i
}
 800542c:	e012      	b.n	8005454 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800543c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005454:	e166      	b.n	8005724 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545a:	2b03      	cmp	r3, #3
 800545c:	f200 811f 	bhi.w	800569e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005464:	2b01      	cmp	r3, #1
 8005466:	d123      	bne.n	80054b0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fecb 	bl	8006208 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e167      	b.n	800574c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054ae:	e139      	b.n	8005724 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d152      	bne.n	800555e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	2200      	movs	r2, #0
 80054c0:	4906      	ldr	r1, [pc, #24]	; (80054dc <HAL_I2C_Mem_Read+0x24c>)
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 fd48 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d008      	beq.n	80054e0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e13c      	b.n	800574c <HAL_I2C_Mem_Read+0x4bc>
 80054d2:	bf00      	nop
 80054d4:	00100002 	.word	0x00100002
 80054d8:	ffff0000 	.word	0xffff0000
 80054dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80054e0:	b672      	cpsid	i
}
 80054e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005526:	b662      	cpsie	i
}
 8005528:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800555c:	e0e2      	b.n	8005724 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	2200      	movs	r2, #0
 8005566:	497b      	ldr	r1, [pc, #492]	; (8005754 <HAL_I2C_Mem_Read+0x4c4>)
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fcf5 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0e9      	b.n	800574c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005586:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005588:	b672      	cpsid	i
}
 800558a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80055be:	4b66      	ldr	r3, [pc, #408]	; (8005758 <HAL_I2C_Mem_Read+0x4c8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	08db      	lsrs	r3, r3, #3
 80055c4:	4a65      	ldr	r2, [pc, #404]	; (800575c <HAL_I2C_Mem_Read+0x4cc>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	0a1a      	lsrs	r2, r3, #8
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	00da      	lsls	r2, r3, #3
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	3b01      	subs	r3, #1
 80055dc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d118      	bne.n	8005616 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f043 0220 	orr.w	r2, r3, #32
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005606:	b662      	cpsie	i
}
 8005608:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e09a      	b.n	800574c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b04      	cmp	r3, #4
 8005622:	d1d9      	bne.n	80055d8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005666:	b662      	cpsie	i
}
 8005668:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800569c:	e042      	b.n	8005724 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800569e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 fdb0 	bl	8006208 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e04c      	b.n	800574c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f003 0304 	and.w	r3, r3, #4
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d118      	bne.n	8005724 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005728:	2b00      	cmp	r3, #0
 800572a:	f47f ae94 	bne.w	8005456 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	e000      	b.n	800574c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800574a:	2302      	movs	r3, #2
  }
}
 800574c:	4618      	mov	r0, r3
 800574e:	3728      	adds	r7, #40	; 0x28
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	00010004 	.word	0x00010004
 8005758:	20000004 	.word	0x20000004
 800575c:	14f8b589 	.word	0x14f8b589

08005760 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08a      	sub	sp, #40	; 0x28
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	460b      	mov	r3, r1
 800576e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005770:	f7fe fcf2 	bl	8004158 <HAL_GetTick>
 8005774:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005776:	2301      	movs	r3, #1
 8005778:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b20      	cmp	r3, #32
 8005784:	f040 8111 	bne.w	80059aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	2319      	movs	r3, #25
 800578e:	2201      	movs	r2, #1
 8005790:	4988      	ldr	r1, [pc, #544]	; (80059b4 <HAL_I2C_IsDeviceReady+0x254>)
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fbe0 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800579e:	2302      	movs	r3, #2
 80057a0:	e104      	b.n	80059ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_I2C_IsDeviceReady+0x50>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e0fd      	b.n	80059ac <HAL_I2C_IsDeviceReady+0x24c>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d007      	beq.n	80057d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0201 	orr.w	r2, r2, #1
 80057d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2224      	movs	r2, #36	; 0x24
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4a70      	ldr	r2, [pc, #448]	; (80059b8 <HAL_I2C_IsDeviceReady+0x258>)
 80057f8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005808:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2200      	movs	r2, #0
 8005812:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fb9e 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00d      	beq.n	800583e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005830:	d103      	bne.n	800583a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005838:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e0b6      	b.n	80059ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800583e:	897b      	ldrh	r3, [r7, #10]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800584c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800584e:	f7fe fc83 	bl	8004158 <HAL_GetTick>
 8005852:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b02      	cmp	r3, #2
 8005860:	bf0c      	ite	eq
 8005862:	2301      	moveq	r3, #1
 8005864:	2300      	movne	r3, #0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005878:	bf0c      	ite	eq
 800587a:	2301      	moveq	r3, #1
 800587c:	2300      	movne	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005882:	e025      	b.n	80058d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005884:	f7fe fc68 	bl	8004158 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d302      	bcc.n	800589a <HAL_I2C_IsDeviceReady+0x13a>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d103      	bne.n	80058a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	22a0      	movs	r2, #160	; 0xa0
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	bf0c      	ite	eq
 80058b0:	2301      	moveq	r3, #1
 80058b2:	2300      	movne	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c6:	bf0c      	ite	eq
 80058c8:	2301      	moveq	r3, #1
 80058ca:	2300      	movne	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2ba0      	cmp	r3, #160	; 0xa0
 80058da:	d005      	beq.n	80058e8 <HAL_I2C_IsDeviceReady+0x188>
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d102      	bne.n	80058e8 <HAL_I2C_IsDeviceReady+0x188>
 80058e2:	7dbb      	ldrb	r3, [r7, #22]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0cd      	beq.n	8005884 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d129      	bne.n	8005952 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800590e:	2300      	movs	r3, #0
 8005910:	613b      	str	r3, [r7, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	2319      	movs	r3, #25
 800592a:	2201      	movs	r2, #1
 800592c:	4921      	ldr	r1, [pc, #132]	; (80059b4 <HAL_I2C_IsDeviceReady+0x254>)
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fb12 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e036      	b.n	80059ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	e02c      	b.n	80059ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005960:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800596a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	2319      	movs	r3, #25
 8005972:	2201      	movs	r2, #1
 8005974:	490f      	ldr	r1, [pc, #60]	; (80059b4 <HAL_I2C_IsDeviceReady+0x254>)
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 faee 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e012      	b.n	80059ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	3301      	adds	r3, #1
 800598a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	429a      	cmp	r2, r3
 8005992:	f4ff af32 	bcc.w	80057fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80059aa:	2302      	movs	r3, #2
  }
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3720      	adds	r7, #32
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	00100002 	.word	0x00100002
 80059b8:	ffff0000 	.word	0xffff0000

080059bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	607a      	str	r2, [r7, #4]
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	460b      	mov	r3, r1
 80059ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d006      	beq.n	80059e6 <I2C_MasterRequestWrite+0x2a>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d003      	beq.n	80059e6 <I2C_MasterRequestWrite+0x2a>
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059e4:	d108      	bne.n	80059f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	e00b      	b.n	8005a10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fc:	2b12      	cmp	r3, #18
 80059fe:	d107      	bne.n	8005a10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fa9b 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00d      	beq.n	8005a44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a36:	d103      	bne.n	8005a40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e035      	b.n	8005ab0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a4c:	d108      	bne.n	8005a60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a4e:	897b      	ldrh	r3, [r7, #10]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a5c:	611a      	str	r2, [r3, #16]
 8005a5e:	e01b      	b.n	8005a98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a60:	897b      	ldrh	r3, [r7, #10]
 8005a62:	11db      	asrs	r3, r3, #7
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	f003 0306 	and.w	r3, r3, #6
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	f063 030f 	orn	r3, r3, #15
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	490e      	ldr	r1, [pc, #56]	; (8005ab8 <I2C_MasterRequestWrite+0xfc>)
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 fac1 	bl	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e010      	b.n	8005ab0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a8e:	897b      	ldrh	r3, [r7, #10]
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	4907      	ldr	r1, [pc, #28]	; (8005abc <I2C_MasterRequestWrite+0x100>)
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fab1 	bl	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	00010008 	.word	0x00010008
 8005abc:	00010002 	.word	0x00010002

08005ac0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	607a      	str	r2, [r7, #4]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	460b      	mov	r3, r1
 8005ace:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ae4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d006      	beq.n	8005afa <I2C_MasterRequestRead+0x3a>
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d003      	beq.n	8005afa <I2C_MasterRequestRead+0x3a>
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005af8:	d108      	bne.n	8005b0c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	e00b      	b.n	8005b24 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	2b11      	cmp	r3, #17
 8005b12:	d107      	bne.n	8005b24 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 fa11 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00d      	beq.n	8005b58 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4a:	d103      	bne.n	8005b54 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e079      	b.n	8005c4c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b60:	d108      	bne.n	8005b74 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b62:	897b      	ldrh	r3, [r7, #10]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	f043 0301 	orr.w	r3, r3, #1
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	611a      	str	r2, [r3, #16]
 8005b72:	e05f      	b.n	8005c34 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b74:	897b      	ldrh	r3, [r7, #10]
 8005b76:	11db      	asrs	r3, r3, #7
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	f003 0306 	and.w	r3, r3, #6
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f063 030f 	orn	r3, r3, #15
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	4930      	ldr	r1, [pc, #192]	; (8005c54 <I2C_MasterRequestRead+0x194>)
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 fa37 	bl	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e054      	b.n	8005c4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ba2:	897b      	ldrh	r3, [r7, #10]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	4929      	ldr	r1, [pc, #164]	; (8005c58 <I2C_MasterRequestRead+0x198>)
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fa27 	bl	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e044      	b.n	8005c4c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	613b      	str	r3, [r7, #16]
 8005bd6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005be6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f9af 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00d      	beq.n	8005c1c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c0e:	d103      	bne.n	8005c18 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c16:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e017      	b.n	8005c4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005c1c:	897b      	ldrh	r3, [r7, #10]
 8005c1e:	11db      	asrs	r3, r3, #7
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	f003 0306 	and.w	r3, r3, #6
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	f063 030e 	orn	r3, r3, #14
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	4907      	ldr	r1, [pc, #28]	; (8005c58 <I2C_MasterRequestRead+0x198>)
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 f9e3 	bl	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	00010008 	.word	0x00010008
 8005c58:	00010002 	.word	0x00010002

08005c5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	4608      	mov	r0, r1
 8005c66:	4611      	mov	r1, r2
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	817b      	strh	r3, [r7, #10]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	813b      	strh	r3, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 f960 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00d      	beq.n	8005cba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cac:	d103      	bne.n	8005cb6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e05f      	b.n	8005d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cba:	897b      	ldrh	r3, [r7, #10]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	6a3a      	ldr	r2, [r7, #32]
 8005cce:	492d      	ldr	r1, [pc, #180]	; (8005d84 <I2C_RequestMemoryWrite+0x128>)
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f998 	bl	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e04c      	b.n	8005d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf8:	6a39      	ldr	r1, [r7, #32]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 fa02 	bl	8006104 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00d      	beq.n	8005d22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d107      	bne.n	8005d1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e02b      	b.n	8005d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d105      	bne.n	8005d34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d28:	893b      	ldrh	r3, [r7, #8]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	611a      	str	r2, [r3, #16]
 8005d32:	e021      	b.n	8005d78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d34:	893b      	ldrh	r3, [r7, #8]
 8005d36:	0a1b      	lsrs	r3, r3, #8
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d44:	6a39      	ldr	r1, [r7, #32]
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f9dc 	bl	8006104 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00d      	beq.n	8005d6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d107      	bne.n	8005d6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e005      	b.n	8005d7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d6e:	893b      	ldrh	r3, [r7, #8]
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	00010002 	.word	0x00010002

08005d88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	4608      	mov	r0, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	461a      	mov	r2, r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	817b      	strh	r3, [r7, #10]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	813b      	strh	r3, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005db0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f8c2 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00d      	beq.n	8005df6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de8:	d103      	bne.n	8005df2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e0aa      	b.n	8005f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005df6:	897b      	ldrh	r3, [r7, #10]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	6a3a      	ldr	r2, [r7, #32]
 8005e0a:	4952      	ldr	r1, [pc, #328]	; (8005f54 <I2C_RequestMemoryRead+0x1cc>)
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f8fa 	bl	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e097      	b.n	8005f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e34:	6a39      	ldr	r1, [r7, #32]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f964 	bl	8006104 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00d      	beq.n	8005e5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d107      	bne.n	8005e5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e076      	b.n	8005f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d105      	bne.n	8005e70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e64:	893b      	ldrh	r3, [r7, #8]
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	611a      	str	r2, [r3, #16]
 8005e6e:	e021      	b.n	8005eb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e70:	893b      	ldrh	r3, [r7, #8]
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e80:	6a39      	ldr	r1, [r7, #32]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f93e 	bl	8006104 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00d      	beq.n	8005eaa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d107      	bne.n	8005ea6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e050      	b.n	8005f4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eaa:	893b      	ldrh	r3, [r7, #8]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb6:	6a39      	ldr	r1, [r7, #32]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f923 	bl	8006104 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00d      	beq.n	8005ee0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d107      	bne.n	8005edc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e035      	b.n	8005f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f82b 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00d      	beq.n	8005f24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f16:	d103      	bne.n	8005f20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e013      	b.n	8005f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f24:	897b      	ldrh	r3, [r7, #10]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	f043 0301 	orr.w	r3, r3, #1
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	6a3a      	ldr	r2, [r7, #32]
 8005f38:	4906      	ldr	r1, [pc, #24]	; (8005f54 <I2C_RequestMemoryRead+0x1cc>)
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 f863 	bl	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e000      	b.n	8005f4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	00010002 	.word	0x00010002

08005f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f68:	e025      	b.n	8005fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f70:	d021      	beq.n	8005fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f72:	f7fe f8f1 	bl	8004158 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d302      	bcc.n	8005f88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d116      	bne.n	8005fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	f043 0220 	orr.w	r2, r3, #32
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e023      	b.n	8005ffe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	0c1b      	lsrs	r3, r3, #16
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d10d      	bne.n	8005fdc <I2C_WaitOnFlagUntilTimeout+0x84>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	43da      	mvns	r2, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bf0c      	ite	eq
 8005fd2:	2301      	moveq	r3, #1
 8005fd4:	2300      	movne	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	e00c      	b.n	8005ff6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	43da      	mvns	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	bf0c      	ite	eq
 8005fee:	2301      	moveq	r3, #1
 8005ff0:	2300      	movne	r3, #0
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d0b6      	beq.n	8005f6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
 8006012:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006014:	e051      	b.n	80060ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006024:	d123      	bne.n	800606e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006034:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800603e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	f043 0204 	orr.w	r2, r3, #4
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e046      	b.n	80060fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006074:	d021      	beq.n	80060ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006076:	f7fe f86f 	bl	8004158 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	429a      	cmp	r2, r3
 8006084:	d302      	bcc.n	800608c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d116      	bne.n	80060ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f043 0220 	orr.w	r2, r3, #32
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e020      	b.n	80060fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	0c1b      	lsrs	r3, r3, #16
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d10c      	bne.n	80060de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	43da      	mvns	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4013      	ands	r3, r2
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	bf14      	ite	ne
 80060d6:	2301      	movne	r3, #1
 80060d8:	2300      	moveq	r3, #0
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	e00b      	b.n	80060f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	43da      	mvns	r2, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	4013      	ands	r3, r2
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	bf14      	ite	ne
 80060f0:	2301      	movne	r3, #1
 80060f2:	2300      	moveq	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d18d      	bne.n	8006016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006110:	e02d      	b.n	800616e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 f8ce 	bl	80062b4 <I2C_IsAcknowledgeFailed>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e02d      	b.n	800617e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006128:	d021      	beq.n	800616e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612a:	f7fe f815 	bl	8004158 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	429a      	cmp	r2, r3
 8006138:	d302      	bcc.n	8006140 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d116      	bne.n	800616e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f043 0220 	orr.w	r2, r3, #32
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e007      	b.n	800617e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006178:	2b80      	cmp	r3, #128	; 0x80
 800617a:	d1ca      	bne.n	8006112 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006192:	e02d      	b.n	80061f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 f88d 	bl	80062b4 <I2C_IsAcknowledgeFailed>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e02d      	b.n	8006200 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061aa:	d021      	beq.n	80061f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ac:	f7fd ffd4 	bl	8004158 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d302      	bcc.n	80061c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d116      	bne.n	80061f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	f043 0220 	orr.w	r2, r3, #32
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e007      	b.n	8006200 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d1ca      	bne.n	8006194 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006214:	e042      	b.n	800629c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b10      	cmp	r3, #16
 8006222:	d119      	bne.n	8006258 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0210 	mvn.w	r2, #16
 800622c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e029      	b.n	80062ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006258:	f7fd ff7e 	bl	8004158 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	429a      	cmp	r2, r3
 8006266:	d302      	bcc.n	800626e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d116      	bne.n	800629c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	f043 0220 	orr.w	r2, r3, #32
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e007      	b.n	80062ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a6:	2b40      	cmp	r3, #64	; 0x40
 80062a8:	d1b5      	bne.n	8006216 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ca:	d11b      	bne.n	8006304 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2220      	movs	r2, #32
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	f043 0204 	orr.w	r2, r3, #4
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr

08006310 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006314:	4b03      	ldr	r3, [pc, #12]	; (8006324 <HAL_PWR_EnableBkUpAccess+0x14>)
 8006316:	2201      	movs	r2, #1
 8006318:	601a      	str	r2, [r3, #0]
}
 800631a:	bf00      	nop
 800631c:	46bd      	mov	sp, r7
 800631e:	bc80      	pop	{r7}
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	420e0020 	.word	0x420e0020

08006328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e272      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 8087 	beq.w	8006456 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006348:	4b92      	ldr	r3, [pc, #584]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f003 030c 	and.w	r3, r3, #12
 8006350:	2b04      	cmp	r3, #4
 8006352:	d00c      	beq.n	800636e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006354:	4b8f      	ldr	r3, [pc, #572]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f003 030c 	and.w	r3, r3, #12
 800635c:	2b08      	cmp	r3, #8
 800635e:	d112      	bne.n	8006386 <HAL_RCC_OscConfig+0x5e>
 8006360:	4b8c      	ldr	r3, [pc, #560]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800636c:	d10b      	bne.n	8006386 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800636e:	4b89      	ldr	r3, [pc, #548]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d06c      	beq.n	8006454 <HAL_RCC_OscConfig+0x12c>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d168      	bne.n	8006454 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e24c      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638e:	d106      	bne.n	800639e <HAL_RCC_OscConfig+0x76>
 8006390:	4b80      	ldr	r3, [pc, #512]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a7f      	ldr	r2, [pc, #508]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 8006396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	e02e      	b.n	80063fc <HAL_RCC_OscConfig+0xd4>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10c      	bne.n	80063c0 <HAL_RCC_OscConfig+0x98>
 80063a6:	4b7b      	ldr	r3, [pc, #492]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a7a      	ldr	r2, [pc, #488]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80063ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	4b78      	ldr	r3, [pc, #480]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a77      	ldr	r2, [pc, #476]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80063b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	e01d      	b.n	80063fc <HAL_RCC_OscConfig+0xd4>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063c8:	d10c      	bne.n	80063e4 <HAL_RCC_OscConfig+0xbc>
 80063ca:	4b72      	ldr	r3, [pc, #456]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a71      	ldr	r2, [pc, #452]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80063d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	4b6f      	ldr	r3, [pc, #444]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a6e      	ldr	r2, [pc, #440]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80063dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	e00b      	b.n	80063fc <HAL_RCC_OscConfig+0xd4>
 80063e4:	4b6b      	ldr	r3, [pc, #428]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a6a      	ldr	r2, [pc, #424]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80063ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	4b68      	ldr	r3, [pc, #416]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a67      	ldr	r2, [pc, #412]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80063f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d013      	beq.n	800642c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006404:	f7fd fea8 	bl	8004158 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800640c:	f7fd fea4 	bl	8004158 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b64      	cmp	r3, #100	; 0x64
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e200      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800641e:	4b5d      	ldr	r3, [pc, #372]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0f0      	beq.n	800640c <HAL_RCC_OscConfig+0xe4>
 800642a:	e014      	b.n	8006456 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642c:	f7fd fe94 	bl	8004158 <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006434:	f7fd fe90 	bl	8004158 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b64      	cmp	r3, #100	; 0x64
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e1ec      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006446:	4b53      	ldr	r3, [pc, #332]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f0      	bne.n	8006434 <HAL_RCC_OscConfig+0x10c>
 8006452:	e000      	b.n	8006456 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d063      	beq.n	800652a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006462:	4b4c      	ldr	r3, [pc, #304]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f003 030c 	and.w	r3, r3, #12
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00b      	beq.n	8006486 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800646e:	4b49      	ldr	r3, [pc, #292]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f003 030c 	and.w	r3, r3, #12
 8006476:	2b08      	cmp	r3, #8
 8006478:	d11c      	bne.n	80064b4 <HAL_RCC_OscConfig+0x18c>
 800647a:	4b46      	ldr	r3, [pc, #280]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d116      	bne.n	80064b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006486:	4b43      	ldr	r3, [pc, #268]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d005      	beq.n	800649e <HAL_RCC_OscConfig+0x176>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d001      	beq.n	800649e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e1c0      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800649e:	4b3d      	ldr	r3, [pc, #244]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	4939      	ldr	r1, [pc, #228]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064b2:	e03a      	b.n	800652a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d020      	beq.n	80064fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064bc:	4b36      	ldr	r3, [pc, #216]	; (8006598 <HAL_RCC_OscConfig+0x270>)
 80064be:	2201      	movs	r2, #1
 80064c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c2:	f7fd fe49 	bl	8004158 <HAL_GetTick>
 80064c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c8:	e008      	b.n	80064dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ca:	f7fd fe45 	bl	8004158 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d901      	bls.n	80064dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e1a1      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064dc:	4b2d      	ldr	r3, [pc, #180]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0f0      	beq.n	80064ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064e8:	4b2a      	ldr	r3, [pc, #168]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	4927      	ldr	r1, [pc, #156]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	600b      	str	r3, [r1, #0]
 80064fc:	e015      	b.n	800652a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064fe:	4b26      	ldr	r3, [pc, #152]	; (8006598 <HAL_RCC_OscConfig+0x270>)
 8006500:	2200      	movs	r2, #0
 8006502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006504:	f7fd fe28 	bl	8004158 <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800650c:	f7fd fe24 	bl	8004158 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e180      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800651e:	4b1d      	ldr	r3, [pc, #116]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1f0      	bne.n	800650c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d03a      	beq.n	80065ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d019      	beq.n	8006572 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800653e:	4b17      	ldr	r3, [pc, #92]	; (800659c <HAL_RCC_OscConfig+0x274>)
 8006540:	2201      	movs	r2, #1
 8006542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006544:	f7fd fe08 	bl	8004158 <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800654c:	f7fd fe04 	bl	8004158 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e160      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800655e:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <HAL_RCC_OscConfig+0x26c>)
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0f0      	beq.n	800654c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800656a:	2001      	movs	r0, #1
 800656c:	f000 fada 	bl	8006b24 <RCC_Delay>
 8006570:	e01c      	b.n	80065ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006572:	4b0a      	ldr	r3, [pc, #40]	; (800659c <HAL_RCC_OscConfig+0x274>)
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006578:	f7fd fdee 	bl	8004158 <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800657e:	e00f      	b.n	80065a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006580:	f7fd fdea 	bl	8004158 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d908      	bls.n	80065a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e146      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
 8006592:	bf00      	nop
 8006594:	40021000 	.word	0x40021000
 8006598:	42420000 	.word	0x42420000
 800659c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a0:	4b92      	ldr	r3, [pc, #584]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 80065a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e9      	bne.n	8006580 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80a6 	beq.w	8006706 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ba:	2300      	movs	r3, #0
 80065bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065be:	4b8b      	ldr	r3, [pc, #556]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10d      	bne.n	80065e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ca:	4b88      	ldr	r3, [pc, #544]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	4a87      	ldr	r2, [pc, #540]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 80065d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d4:	61d3      	str	r3, [r2, #28]
 80065d6:	4b85      	ldr	r3, [pc, #532]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065de:	60bb      	str	r3, [r7, #8]
 80065e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065e2:	2301      	movs	r3, #1
 80065e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e6:	4b82      	ldr	r3, [pc, #520]	; (80067f0 <HAL_RCC_OscConfig+0x4c8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d118      	bne.n	8006624 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065f2:	4b7f      	ldr	r3, [pc, #508]	; (80067f0 <HAL_RCC_OscConfig+0x4c8>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a7e      	ldr	r2, [pc, #504]	; (80067f0 <HAL_RCC_OscConfig+0x4c8>)
 80065f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065fe:	f7fd fdab 	bl	8004158 <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006606:	f7fd fda7 	bl	8004158 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b64      	cmp	r3, #100	; 0x64
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e103      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006618:	4b75      	ldr	r3, [pc, #468]	; (80067f0 <HAL_RCC_OscConfig+0x4c8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0f0      	beq.n	8006606 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d106      	bne.n	800663a <HAL_RCC_OscConfig+0x312>
 800662c:	4b6f      	ldr	r3, [pc, #444]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	4a6e      	ldr	r2, [pc, #440]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006632:	f043 0301 	orr.w	r3, r3, #1
 8006636:	6213      	str	r3, [r2, #32]
 8006638:	e02d      	b.n	8006696 <HAL_RCC_OscConfig+0x36e>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10c      	bne.n	800665c <HAL_RCC_OscConfig+0x334>
 8006642:	4b6a      	ldr	r3, [pc, #424]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	4a69      	ldr	r2, [pc, #420]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	6213      	str	r3, [r2, #32]
 800664e:	4b67      	ldr	r3, [pc, #412]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	4a66      	ldr	r2, [pc, #408]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006654:	f023 0304 	bic.w	r3, r3, #4
 8006658:	6213      	str	r3, [r2, #32]
 800665a:	e01c      	b.n	8006696 <HAL_RCC_OscConfig+0x36e>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	2b05      	cmp	r3, #5
 8006662:	d10c      	bne.n	800667e <HAL_RCC_OscConfig+0x356>
 8006664:	4b61      	ldr	r3, [pc, #388]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	4a60      	ldr	r2, [pc, #384]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 800666a:	f043 0304 	orr.w	r3, r3, #4
 800666e:	6213      	str	r3, [r2, #32]
 8006670:	4b5e      	ldr	r3, [pc, #376]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	4a5d      	ldr	r2, [pc, #372]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006676:	f043 0301 	orr.w	r3, r3, #1
 800667a:	6213      	str	r3, [r2, #32]
 800667c:	e00b      	b.n	8006696 <HAL_RCC_OscConfig+0x36e>
 800667e:	4b5b      	ldr	r3, [pc, #364]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	4a5a      	ldr	r2, [pc, #360]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006684:	f023 0301 	bic.w	r3, r3, #1
 8006688:	6213      	str	r3, [r2, #32]
 800668a:	4b58      	ldr	r3, [pc, #352]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	4a57      	ldr	r2, [pc, #348]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006690:	f023 0304 	bic.w	r3, r3, #4
 8006694:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d015      	beq.n	80066ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800669e:	f7fd fd5b 	bl	8004158 <HAL_GetTick>
 80066a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a4:	e00a      	b.n	80066bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066a6:	f7fd fd57 	bl	8004158 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e0b1      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066bc:	4b4b      	ldr	r3, [pc, #300]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0ee      	beq.n	80066a6 <HAL_RCC_OscConfig+0x37e>
 80066c8:	e014      	b.n	80066f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ca:	f7fd fd45 	bl	8004158 <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066d0:	e00a      	b.n	80066e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066d2:	f7fd fd41 	bl	8004158 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e09b      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e8:	4b40      	ldr	r3, [pc, #256]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1ee      	bne.n	80066d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d105      	bne.n	8006706 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066fa:	4b3c      	ldr	r3, [pc, #240]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	4a3b      	ldr	r2, [pc, #236]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006704:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 8087 	beq.w	800681e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006710:	4b36      	ldr	r3, [pc, #216]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f003 030c 	and.w	r3, r3, #12
 8006718:	2b08      	cmp	r3, #8
 800671a:	d061      	beq.n	80067e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	2b02      	cmp	r3, #2
 8006722:	d146      	bne.n	80067b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006724:	4b33      	ldr	r3, [pc, #204]	; (80067f4 <HAL_RCC_OscConfig+0x4cc>)
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800672a:	f7fd fd15 	bl	8004158 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006732:	f7fd fd11 	bl	8004158 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e06d      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006744:	4b29      	ldr	r3, [pc, #164]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f0      	bne.n	8006732 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006758:	d108      	bne.n	800676c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800675a:	4b24      	ldr	r3, [pc, #144]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	4921      	ldr	r1, [pc, #132]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006768:	4313      	orrs	r3, r2
 800676a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800676c:	4b1f      	ldr	r3, [pc, #124]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a19      	ldr	r1, [r3, #32]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	430b      	orrs	r3, r1
 800677e:	491b      	ldr	r1, [pc, #108]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 8006780:	4313      	orrs	r3, r2
 8006782:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006784:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <HAL_RCC_OscConfig+0x4cc>)
 8006786:	2201      	movs	r2, #1
 8006788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800678a:	f7fd fce5 	bl	8004158 <HAL_GetTick>
 800678e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006790:	e008      	b.n	80067a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006792:	f7fd fce1 	bl	8004158 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e03d      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067a4:	4b11      	ldr	r3, [pc, #68]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0f0      	beq.n	8006792 <HAL_RCC_OscConfig+0x46a>
 80067b0:	e035      	b.n	800681e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b2:	4b10      	ldr	r3, [pc, #64]	; (80067f4 <HAL_RCC_OscConfig+0x4cc>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b8:	f7fd fcce 	bl	8004158 <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c0:	f7fd fcca 	bl	8004158 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e026      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067d2:	4b06      	ldr	r3, [pc, #24]	; (80067ec <HAL_RCC_OscConfig+0x4c4>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f0      	bne.n	80067c0 <HAL_RCC_OscConfig+0x498>
 80067de:	e01e      	b.n	800681e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d107      	bne.n	80067f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e019      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
 80067ec:	40021000 	.word	0x40021000
 80067f0:	40007000 	.word	0x40007000
 80067f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80067f8:	4b0b      	ldr	r3, [pc, #44]	; (8006828 <HAL_RCC_OscConfig+0x500>)
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	429a      	cmp	r2, r3
 800680a:	d106      	bne.n	800681a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006816:	429a      	cmp	r2, r3
 8006818:	d001      	beq.n	800681e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e000      	b.n	8006820 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40021000 	.word	0x40021000

0800682c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e0d0      	b.n	80069e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006840:	4b6a      	ldr	r3, [pc, #424]	; (80069ec <HAL_RCC_ClockConfig+0x1c0>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0307 	and.w	r3, r3, #7
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d910      	bls.n	8006870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800684e:	4b67      	ldr	r3, [pc, #412]	; (80069ec <HAL_RCC_ClockConfig+0x1c0>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f023 0207 	bic.w	r2, r3, #7
 8006856:	4965      	ldr	r1, [pc, #404]	; (80069ec <HAL_RCC_ClockConfig+0x1c0>)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	4313      	orrs	r3, r2
 800685c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800685e:	4b63      	ldr	r3, [pc, #396]	; (80069ec <HAL_RCC_ClockConfig+0x1c0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	429a      	cmp	r2, r3
 800686a:	d001      	beq.n	8006870 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e0b8      	b.n	80069e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d020      	beq.n	80068be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006888:	4b59      	ldr	r3, [pc, #356]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	4a58      	ldr	r2, [pc, #352]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 800688e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006892:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0308 	and.w	r3, r3, #8
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068a0:	4b53      	ldr	r3, [pc, #332]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	4a52      	ldr	r2, [pc, #328]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 80068a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80068aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068ac:	4b50      	ldr	r3, [pc, #320]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	494d      	ldr	r1, [pc, #308]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d040      	beq.n	800694c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d107      	bne.n	80068e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d2:	4b47      	ldr	r3, [pc, #284]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d115      	bne.n	800690a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e07f      	b.n	80069e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d107      	bne.n	80068fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ea:	4b41      	ldr	r3, [pc, #260]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d109      	bne.n	800690a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e073      	b.n	80069e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068fa:	4b3d      	ldr	r3, [pc, #244]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e06b      	b.n	80069e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800690a:	4b39      	ldr	r3, [pc, #228]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f023 0203 	bic.w	r2, r3, #3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	4936      	ldr	r1, [pc, #216]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006918:	4313      	orrs	r3, r2
 800691a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800691c:	f7fd fc1c 	bl	8004158 <HAL_GetTick>
 8006920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006922:	e00a      	b.n	800693a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006924:	f7fd fc18 	bl	8004158 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006932:	4293      	cmp	r3, r2
 8006934:	d901      	bls.n	800693a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e053      	b.n	80069e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800693a:	4b2d      	ldr	r3, [pc, #180]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f003 020c 	and.w	r2, r3, #12
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	429a      	cmp	r2, r3
 800694a:	d1eb      	bne.n	8006924 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800694c:	4b27      	ldr	r3, [pc, #156]	; (80069ec <HAL_RCC_ClockConfig+0x1c0>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d210      	bcs.n	800697c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800695a:	4b24      	ldr	r3, [pc, #144]	; (80069ec <HAL_RCC_ClockConfig+0x1c0>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f023 0207 	bic.w	r2, r3, #7
 8006962:	4922      	ldr	r1, [pc, #136]	; (80069ec <HAL_RCC_ClockConfig+0x1c0>)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	4313      	orrs	r3, r2
 8006968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800696a:	4b20      	ldr	r3, [pc, #128]	; (80069ec <HAL_RCC_ClockConfig+0x1c0>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	429a      	cmp	r2, r3
 8006976:	d001      	beq.n	800697c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e032      	b.n	80069e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d008      	beq.n	800699a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006988:	4b19      	ldr	r3, [pc, #100]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	4916      	ldr	r1, [pc, #88]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006996:	4313      	orrs	r3, r2
 8006998:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0308 	and.w	r3, r3, #8
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d009      	beq.n	80069ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069a6:	4b12      	ldr	r3, [pc, #72]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	490e      	ldr	r1, [pc, #56]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069ba:	f000 f821 	bl	8006a00 <HAL_RCC_GetSysClockFreq>
 80069be:	4602      	mov	r2, r0
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <HAL_RCC_ClockConfig+0x1c4>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	091b      	lsrs	r3, r3, #4
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	490a      	ldr	r1, [pc, #40]	; (80069f4 <HAL_RCC_ClockConfig+0x1c8>)
 80069cc:	5ccb      	ldrb	r3, [r1, r3]
 80069ce:	fa22 f303 	lsr.w	r3, r2, r3
 80069d2:	4a09      	ldr	r2, [pc, #36]	; (80069f8 <HAL_RCC_ClockConfig+0x1cc>)
 80069d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069d6:	4b09      	ldr	r3, [pc, #36]	; (80069fc <HAL_RCC_ClockConfig+0x1d0>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fd fb7a 	bl	80040d4 <HAL_InitTick>

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40022000 	.word	0x40022000
 80069f0:	40021000 	.word	0x40021000
 80069f4:	08008f08 	.word	0x08008f08
 80069f8:	20000004 	.word	0x20000004
 80069fc:	20000008 	.word	0x20000008

08006a00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a00:	b490      	push	{r4, r7}
 8006a02:	b08a      	sub	sp, #40	; 0x28
 8006a04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a06:	4b29      	ldr	r3, [pc, #164]	; (8006aac <HAL_RCC_GetSysClockFreq+0xac>)
 8006a08:	1d3c      	adds	r4, r7, #4
 8006a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a10:	f240 2301 	movw	r3, #513	; 0x201
 8006a14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
 8006a22:	2300      	movs	r3, #0
 8006a24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a2a:	4b21      	ldr	r3, [pc, #132]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	f003 030c 	and.w	r3, r3, #12
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d002      	beq.n	8006a40 <HAL_RCC_GetSysClockFreq+0x40>
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	d003      	beq.n	8006a46 <HAL_RCC_GetSysClockFreq+0x46>
 8006a3e:	e02b      	b.n	8006a98 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a40:	4b1c      	ldr	r3, [pc, #112]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a42:	623b      	str	r3, [r7, #32]
      break;
 8006a44:	e02b      	b.n	8006a9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	0c9b      	lsrs	r3, r3, #18
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	3328      	adds	r3, #40	; 0x28
 8006a50:	443b      	add	r3, r7
 8006a52:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006a56:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d012      	beq.n	8006a88 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a62:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	0c5b      	lsrs	r3, r3, #17
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	3328      	adds	r3, #40	; 0x28
 8006a6e:	443b      	add	r3, r7
 8006a70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	4a0e      	ldr	r2, [pc, #56]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a7a:	fb03 f202 	mul.w	r2, r3, r2
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24
 8006a86:	e004      	b.n	8006a92 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	4a0b      	ldr	r2, [pc, #44]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a8c:	fb02 f303 	mul.w	r3, r2, r3
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	623b      	str	r3, [r7, #32]
      break;
 8006a96:	e002      	b.n	8006a9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a98:	4b08      	ldr	r3, [pc, #32]	; (8006abc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a9a:	623b      	str	r3, [r7, #32]
      break;
 8006a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3728      	adds	r7, #40	; 0x28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc90      	pop	{r4, r7}
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	08008d10 	.word	0x08008d10
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	00f42400 	.word	0x00f42400
 8006ab8:	003d0900 	.word	0x003d0900
 8006abc:	007a1200 	.word	0x007a1200

08006ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ac4:	4b02      	ldr	r3, [pc, #8]	; (8006ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr
 8006ad0:	20000004 	.word	0x20000004

08006ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ad8:	f7ff fff2 	bl	8006ac0 <HAL_RCC_GetHCLKFreq>
 8006adc:	4602      	mov	r2, r0
 8006ade:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	0a1b      	lsrs	r3, r3, #8
 8006ae4:	f003 0307 	and.w	r3, r3, #7
 8006ae8:	4903      	ldr	r1, [pc, #12]	; (8006af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aea:	5ccb      	ldrb	r3, [r1, r3]
 8006aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	40021000 	.word	0x40021000
 8006af8:	08008f18 	.word	0x08008f18

08006afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b00:	f7ff ffde 	bl	8006ac0 <HAL_RCC_GetHCLKFreq>
 8006b04:	4602      	mov	r2, r0
 8006b06:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	0adb      	lsrs	r3, r3, #11
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	4903      	ldr	r1, [pc, #12]	; (8006b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b12:	5ccb      	ldrb	r3, [r1, r3]
 8006b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	08008f18 	.word	0x08008f18

08006b24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <RCC_Delay+0x34>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a0a      	ldr	r2, [pc, #40]	; (8006b5c <RCC_Delay+0x38>)
 8006b32:	fba2 2303 	umull	r2, r3, r2, r3
 8006b36:	0a5b      	lsrs	r3, r3, #9
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b40:	bf00      	nop
  }
  while (Delay --);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	1e5a      	subs	r2, r3, #1
 8006b46:	60fa      	str	r2, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f9      	bne.n	8006b40 <RCC_Delay+0x1c>
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr
 8006b58:	20000004 	.word	0x20000004
 8006b5c:	10624dd3 	.word	0x10624dd3

08006b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	613b      	str	r3, [r7, #16]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d07d      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b80:	4b4f      	ldr	r3, [pc, #316]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10d      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b8c:	4b4c      	ldr	r3, [pc, #304]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	4a4b      	ldr	r2, [pc, #300]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b96:	61d3      	str	r3, [r2, #28]
 8006b98:	4b49      	ldr	r3, [pc, #292]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba8:	4b46      	ldr	r3, [pc, #280]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d118      	bne.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bb4:	4b43      	ldr	r3, [pc, #268]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a42      	ldr	r2, [pc, #264]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bc0:	f7fd faca 	bl	8004158 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc6:	e008      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bc8:	f7fd fac6 	bl	8004158 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b64      	cmp	r3, #100	; 0x64
 8006bd4:	d901      	bls.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e06d      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bda:	4b3a      	ldr	r3, [pc, #232]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0f0      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006be6:	4b36      	ldr	r3, [pc, #216]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d02e      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d027      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c04:	4b2e      	ldr	r3, [pc, #184]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c0e:	4b2e      	ldr	r3, [pc, #184]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c10:	2201      	movs	r2, #1
 8006c12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c14:	4b2c      	ldr	r3, [pc, #176]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c1a:	4a29      	ldr	r2, [pc, #164]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d014      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2a:	f7fd fa95 	bl	8004158 <HAL_GetTick>
 8006c2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c30:	e00a      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c32:	f7fd fa91 	bl	8004158 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e036      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c48:	4b1d      	ldr	r3, [pc, #116]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0ee      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c54:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	4917      	ldr	r1, [pc, #92]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d105      	bne.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c6c:	4b14      	ldr	r3, [pc, #80]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	4a13      	ldr	r2, [pc, #76]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d008      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c84:	4b0e      	ldr	r3, [pc, #56]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	490b      	ldr	r1, [pc, #44]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d008      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ca2:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	4904      	ldr	r1, [pc, #16]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	40007000 	.word	0x40007000
 8006cc8:	42420440 	.word	0x42420440

08006ccc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ccc:	b590      	push	{r4, r7, lr}
 8006cce:	b08d      	sub	sp, #52	; 0x34
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006cd4:	4b6a      	ldr	r3, [pc, #424]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8006cd6:	f107 040c 	add.w	r4, r7, #12
 8006cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006ce0:	f240 2301 	movw	r3, #513	; 0x201
 8006ce4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cea:	2300      	movs	r3, #0
 8006cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cee:	2300      	movs	r3, #0
 8006cf0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	2b0f      	cmp	r3, #15
 8006d00:	f200 80b3 	bhi.w	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8006d04:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006deb 	.word	0x08006deb
 8006d10:	08006e4f 	.word	0x08006e4f
 8006d14:	08006e6b 	.word	0x08006e6b
 8006d18:	08006ddb 	.word	0x08006ddb
 8006d1c:	08006e6b 	.word	0x08006e6b
 8006d20:	08006e6b 	.word	0x08006e6b
 8006d24:	08006e6b 	.word	0x08006e6b
 8006d28:	08006de3 	.word	0x08006de3
 8006d2c:	08006e6b 	.word	0x08006e6b
 8006d30:	08006e6b 	.word	0x08006e6b
 8006d34:	08006e6b 	.word	0x08006e6b
 8006d38:	08006e6b 	.word	0x08006e6b
 8006d3c:	08006e6b 	.word	0x08006e6b
 8006d40:	08006e6b 	.word	0x08006e6b
 8006d44:	08006e6b 	.word	0x08006e6b
 8006d48:	08006d4d 	.word	0x08006d4d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006d4c:	4b4d      	ldr	r3, [pc, #308]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006d52:	4b4c      	ldr	r3, [pc, #304]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 8087 	beq.w	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	0c9b      	lsrs	r3, r3, #18
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	3330      	adds	r3, #48	; 0x30
 8006d6a:	443b      	add	r3, r7
 8006d6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006d70:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d017      	beq.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d7c:	4b41      	ldr	r3, [pc, #260]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	0c5b      	lsrs	r3, r3, #17
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	3330      	adds	r3, #48	; 0x30
 8006d88:	443b      	add	r3, r7
 8006d8a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00d      	beq.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006d9a:	4a3b      	ldr	r2, [pc, #236]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	fb02 f303 	mul.w	r3, r2, r3
 8006da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006daa:	e004      	b.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	4a37      	ldr	r2, [pc, #220]	; (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8006db0:	fb02 f303 	mul.w	r3, r2, r3
 8006db4:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006db6:	4b33      	ldr	r3, [pc, #204]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dc2:	d102      	bne.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8006dc8:	e051      	b.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = (pllclk * 2) / 3;
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	4a30      	ldr	r2, [pc, #192]	; (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8006dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd4:	085b      	lsrs	r3, r3, #1
 8006dd6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006dd8:	e049      	b.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006dda:	f7ff fe11 	bl	8006a00 <HAL_RCC_GetSysClockFreq>
 8006dde:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006de0:	e048      	b.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006de2:	f7ff fe0d 	bl	8006a00 <HAL_RCC_GetSysClockFreq>
 8006de6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006de8:	e044      	b.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8006dea:	4b26      	ldr	r3, [pc, #152]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dfa:	d108      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8006e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e0c:	e01e      	b.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x180>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e18:	d109      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8006e1a:	4b1a      	ldr	r3, [pc, #104]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8006e26:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e2c:	e00e      	b.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x180>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e38:	d11b      	bne.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8006e3a:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d015      	beq.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
      {
        frequency = HSE_VALUE / 128U;
 8006e46:	4b13      	ldr	r3, [pc, #76]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8006e48:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8006e4a:	e012      	b.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8006e4c:	e011      	b.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006e4e:	f7ff fe55 	bl	8006afc <HAL_RCC_GetPCLK2Freq>
 8006e52:	4602      	mov	r2, r0
 8006e54:	4b0b      	ldr	r3, [pc, #44]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	0b9b      	lsrs	r3, r3, #14
 8006e5a:	f003 0303 	and.w	r3, r3, #3
 8006e5e:	3301      	adds	r3, #1
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006e68:	e004      	b.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    default:
    {
      break;
 8006e6a:	bf00      	nop
 8006e6c:	e002      	b.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      break;
 8006e6e:	bf00      	nop
 8006e70:	e000      	b.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      break;
 8006e72:	bf00      	nop
    }
  }
  return (frequency);
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3734      	adds	r7, #52	; 0x34
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd90      	pop	{r4, r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	08008d20 	.word	0x08008d20
 8006e84:	40021000 	.word	0x40021000
 8006e88:	00f42400 	.word	0x00f42400
 8006e8c:	003d0900 	.word	0x003d0900
 8006e90:	aaaaaaab 	.word	0xaaaaaaab
 8006e94:	0001e848 	.word	0x0001e848

08006e98 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e084      	b.n	8006fb8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7c5b      	ldrb	r3, [r3, #17]
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d105      	bne.n	8006ec4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7fc fe88 	bl	8003bd4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f9c8 	bl	8007260 <HAL_RTC_WaitForSynchro>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2204      	movs	r2, #4
 8006eda:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e06b      	b.n	8006fb8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fa81 	bl	80073e8 <RTC_EnterInitMode>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d004      	beq.n	8006ef6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2204      	movs	r2, #4
 8006ef0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e060      	b.n	8006fb8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0207 	bic.w	r2, r2, #7
 8006f04:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d005      	beq.n	8006f1a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006f0e:	4b2c      	ldr	r3, [pc, #176]	; (8006fc0 <HAL_RTC_Init+0x128>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	4a2b      	ldr	r2, [pc, #172]	; (8006fc0 <HAL_RTC_Init+0x128>)
 8006f14:	f023 0301 	bic.w	r3, r3, #1
 8006f18:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006f1a:	4b29      	ldr	r3, [pc, #164]	; (8006fc0 <HAL_RTC_Init+0x128>)
 8006f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	4926      	ldr	r1, [pc, #152]	; (8006fc0 <HAL_RTC_Init+0x128>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f34:	d003      	beq.n	8006f3e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	e00e      	b.n	8006f5c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006f3e:	2001      	movs	r0, #1
 8006f40:	f7ff fec4 	bl	8006ccc <HAL_RCCEx_GetPeriphCLKFreq>
 8006f44:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d104      	bne.n	8006f56 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e030      	b.n	8006fb8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f023 010f 	bic.w	r1, r3, #15
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	0c1a      	lsrs	r2, r3, #16
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	0c1b      	lsrs	r3, r3, #16
 8006f7a:	041b      	lsls	r3, r3, #16
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	b291      	uxth	r1, r2
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6812      	ldr	r2, [r2, #0]
 8006f84:	430b      	orrs	r3, r1
 8006f86:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fa55 	bl	8007438 <RTC_ExitInitMode>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d004      	beq.n	8006f9e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2204      	movs	r2, #4
 8006f98:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e00c      	b.n	8006fb8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
  }
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	40006c00 	.word	0x40006c00

08006fc4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006fc4:	b590      	push	{r4, r7, lr}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <HAL_RTC_SetTime+0x20>
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e080      	b.n	80070ea <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	7c1b      	ldrb	r3, [r3, #16]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d101      	bne.n	8006ff4 <HAL_RTC_SetTime+0x30>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	e07a      	b.n	80070ea <HAL_RTC_SetTime+0x126>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d113      	bne.n	800702e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007010:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	785b      	ldrb	r3, [r3, #1]
 8007018:	4619      	mov	r1, r3
 800701a:	460b      	mov	r3, r1
 800701c:	011b      	lsls	r3, r3, #4
 800701e:	1a5b      	subs	r3, r3, r1
 8007020:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007022:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007028:	4413      	add	r3, r2
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	e01e      	b.n	800706c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 fa28 	bl	8007488 <RTC_Bcd2ToByte>
 8007038:	4603      	mov	r3, r0
 800703a:	461a      	mov	r2, r3
 800703c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007040:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	785b      	ldrb	r3, [r3, #1]
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fa1d 	bl	8007488 <RTC_Bcd2ToByte>
 800704e:	4603      	mov	r3, r0
 8007050:	461a      	mov	r2, r3
 8007052:	4613      	mov	r3, r2
 8007054:	011b      	lsls	r3, r3, #4
 8007056:	1a9b      	subs	r3, r3, r2
 8007058:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800705a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	789b      	ldrb	r3, [r3, #2]
 8007060:	4618      	mov	r0, r3
 8007062:	f000 fa11 	bl	8007488 <RTC_Bcd2ToByte>
 8007066:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007068:	4423      	add	r3, r4
 800706a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800706c:	6979      	ldr	r1, [r7, #20]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 f953 	bl	800731a <RTC_WriteTimeCounter>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d007      	beq.n	800708a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2204      	movs	r2, #4
 800707e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e02f      	b.n	80070ea <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0205 	bic.w	r2, r2, #5
 8007098:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 f964 	bl	8007368 <RTC_ReadAlarmCounter>
 80070a0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070a8:	d018      	beq.n	80070dc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d214      	bcs.n	80070dc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80070b8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80070bc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80070be:	6939      	ldr	r1, [r7, #16]
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f96a 	bl	800739a <RTC_WriteAlarmCounter>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2204      	movs	r2, #4
 80070d0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e006      	b.n	80070ea <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80070e8:	2300      	movs	r3, #0
  }
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	371c      	adds	r7, #28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd90      	pop	{r4, r7, pc}
	...

080070f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	61fb      	str	r3, [r7, #28]
 8007104:	2300      	movs	r3, #0
 8007106:	61bb      	str	r3, [r7, #24]
 8007108:	2300      	movs	r3, #0
 800710a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <HAL_RTC_SetDate+0x24>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e097      	b.n	800724c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	7c1b      	ldrb	r3, [r3, #16]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_RTC_SetDate+0x34>
 8007124:	2302      	movs	r3, #2
 8007126:	e091      	b.n	800724c <HAL_RTC_SetDate+0x158>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2201      	movs	r2, #1
 800712c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2202      	movs	r2, #2
 8007132:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10c      	bne.n	8007154 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	78da      	ldrb	r2, [r3, #3]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	785a      	ldrb	r2, [r3, #1]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	789a      	ldrb	r2, [r3, #2]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	739a      	strb	r2, [r3, #14]
 8007152:	e01a      	b.n	800718a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	78db      	ldrb	r3, [r3, #3]
 8007158:	4618      	mov	r0, r3
 800715a:	f000 f995 	bl	8007488 <RTC_Bcd2ToByte>
 800715e:	4603      	mov	r3, r0
 8007160:	461a      	mov	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	785b      	ldrb	r3, [r3, #1]
 800716a:	4618      	mov	r0, r3
 800716c:	f000 f98c 	bl	8007488 <RTC_Bcd2ToByte>
 8007170:	4603      	mov	r3, r0
 8007172:	461a      	mov	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	789b      	ldrb	r3, [r3, #2]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 f983 	bl	8007488 <RTC_Bcd2ToByte>
 8007182:	4603      	mov	r3, r0
 8007184:	461a      	mov	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	7bdb      	ldrb	r3, [r3, #15]
 800718e:	4618      	mov	r0, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	7b59      	ldrb	r1, [r3, #13]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	7b9b      	ldrb	r3, [r3, #14]
 8007198:	461a      	mov	r2, r3
 800719a:	f000 f993 	bl	80074c4 <RTC_WeekDayNum>
 800719e:	4603      	mov	r3, r0
 80071a0:	461a      	mov	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	7b1a      	ldrb	r2, [r3, #12]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 f883 	bl	80072ba <RTC_ReadTimeCounter>
 80071b4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4a26      	ldr	r2, [pc, #152]	; (8007254 <HAL_RTC_SetDate+0x160>)
 80071ba:	fba2 2303 	umull	r2, r3, r2, r3
 80071be:	0adb      	lsrs	r3, r3, #11
 80071c0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2b18      	cmp	r3, #24
 80071c6:	d93a      	bls.n	800723e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	4a23      	ldr	r2, [pc, #140]	; (8007258 <HAL_RTC_SetDate+0x164>)
 80071cc:	fba2 2303 	umull	r2, r3, r2, r3
 80071d0:	091b      	lsrs	r3, r3, #4
 80071d2:	4a22      	ldr	r2, [pc, #136]	; (800725c <HAL_RTC_SetDate+0x168>)
 80071d4:	fb02 f303 	mul.w	r3, r2, r3
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80071de:	69f9      	ldr	r1, [r7, #28]
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 f89a 	bl	800731a <RTC_WriteTimeCounter>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2204      	movs	r2, #4
 80071f0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e027      	b.n	800724c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 f8b3 	bl	8007368 <RTC_ReadAlarmCounter>
 8007202:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800720a:	d018      	beq.n	800723e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	429a      	cmp	r2, r3
 8007212:	d214      	bcs.n	800723e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800721a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800721e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007220:	69b9      	ldr	r1, [r7, #24]
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 f8b9 	bl	800739a <RTC_WriteAlarmCounter>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d007      	beq.n	800723e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2204      	movs	r2, #4
 8007232:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e006      	b.n	800724c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3720      	adds	r7, #32
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	91a2b3c5 	.word	0x91a2b3c5
 8007258:	aaaaaaab 	.word	0xaaaaaaab
 800725c:	00015180 	.word	0x00015180

08007260 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e01d      	b.n	80072b2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 0208 	bic.w	r2, r2, #8
 8007284:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007286:	f7fc ff67 	bl	8004158 <HAL_GetTick>
 800728a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800728c:	e009      	b.n	80072a2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800728e:	f7fc ff63 	bl	8004158 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800729c:	d901      	bls.n	80072a2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e007      	b.n	80072b2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0ee      	beq.n	800728e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b087      	sub	sp, #28
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	827b      	strh	r3, [r7, #18]
 80072c6:	2300      	movs	r3, #0
 80072c8:	823b      	strh	r3, [r7, #16]
 80072ca:	2300      	movs	r3, #0
 80072cc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80072ea:	8a7a      	ldrh	r2, [r7, #18]
 80072ec:	8a3b      	ldrh	r3, [r7, #16]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d008      	beq.n	8007304 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80072f2:	8a3b      	ldrh	r3, [r7, #16]
 80072f4:	041a      	lsls	r2, r3, #16
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	4313      	orrs	r3, r2
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	e004      	b.n	800730e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007304:	8a7b      	ldrh	r3, [r7, #18]
 8007306:	041a      	lsls	r2, r3, #16
 8007308:	89fb      	ldrh	r3, [r7, #14]
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800730e:	697b      	ldr	r3, [r7, #20]
}
 8007310:	4618      	mov	r0, r3
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	bc80      	pop	{r7}
 8007318:	4770      	bx	lr

0800731a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f85d 	bl	80073e8 <RTC_EnterInitMode>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	73fb      	strb	r3, [r7, #15]
 8007338:	e011      	b.n	800735e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	0c12      	lsrs	r2, r2, #16
 8007342:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	b292      	uxth	r2, r2
 800734c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f872 	bl	8007438 <RTC_ExitInitMode>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800735e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	81fb      	strh	r3, [r7, #14]
 8007374:	2300      	movs	r3, #0
 8007376:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8007388:	89fb      	ldrh	r3, [r7, #14]
 800738a:	041a      	lsls	r2, r3, #16
 800738c:	89bb      	ldrh	r3, [r7, #12]
 800738e:	4313      	orrs	r3, r2
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	bc80      	pop	{r7}
 8007398:	4770      	bx	lr

0800739a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f81d 	bl	80073e8 <RTC_EnterInitMode>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	73fb      	strb	r3, [r7, #15]
 80073b8:	e011      	b.n	80073de <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	0c12      	lsrs	r2, r2, #16
 80073c2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	b292      	uxth	r2, r2
 80073cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f832 	bl	8007438 <RTC_ExitInitMode>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80073de:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80073f4:	f7fc feb0 	bl	8004158 <HAL_GetTick>
 80073f8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80073fa:	e009      	b.n	8007410 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80073fc:	f7fc feac 	bl	8004158 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800740a:	d901      	bls.n	8007410 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e00f      	b.n	8007430 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f003 0320 	and.w	r3, r3, #32
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0ee      	beq.n	80073fc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f042 0210 	orr.w	r2, r2, #16
 800742c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0210 	bic.w	r2, r2, #16
 8007452:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007454:	f7fc fe80 	bl	8004158 <HAL_GetTick>
 8007458:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800745a:	e009      	b.n	8007470 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800745c:	f7fc fe7c 	bl	8004158 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800746a:	d901      	bls.n	8007470 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e007      	b.n	8007480 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0ee      	beq.n	800745c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8007496:	79fb      	ldrb	r3, [r7, #7]
 8007498:	091b      	lsrs	r3, r3, #4
 800749a:	b2db      	uxtb	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	4613      	mov	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	f003 030f 	and.w	r3, r3, #15
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	4413      	add	r3, r2
 80074b6:	b2db      	uxtb	r3, r3
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	bc80      	pop	{r7}
 80074c0:	4770      	bx	lr
	...

080074c4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70fb      	strb	r3, [r7, #3]
 80074d0:	4613      	mov	r3, r2
 80074d2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60bb      	str	r3, [r7, #8]
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80074e2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d82d      	bhi.n	8007546 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80074ea:	78fa      	ldrb	r2, [r7, #3]
 80074ec:	4613      	mov	r3, r2
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	4413      	add	r3, r2
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	4a2c      	ldr	r2, [pc, #176]	; (80075a8 <RTC_WeekDayNum+0xe4>)
 80074f8:	fba2 2303 	umull	r2, r3, r2, r3
 80074fc:	085a      	lsrs	r2, r3, #1
 80074fe:	78bb      	ldrb	r3, [r7, #2]
 8007500:	441a      	add	r2, r3
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	441a      	add	r2, r3
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	3b01      	subs	r3, #1
 800750a:	089b      	lsrs	r3, r3, #2
 800750c:	441a      	add	r2, r3
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	3b01      	subs	r3, #1
 8007512:	4926      	ldr	r1, [pc, #152]	; (80075ac <RTC_WeekDayNum+0xe8>)
 8007514:	fba1 1303 	umull	r1, r3, r1, r3
 8007518:	095b      	lsrs	r3, r3, #5
 800751a:	1ad2      	subs	r2, r2, r3
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	3b01      	subs	r3, #1
 8007520:	4922      	ldr	r1, [pc, #136]	; (80075ac <RTC_WeekDayNum+0xe8>)
 8007522:	fba1 1303 	umull	r1, r3, r1, r3
 8007526:	09db      	lsrs	r3, r3, #7
 8007528:	4413      	add	r3, r2
 800752a:	1d1a      	adds	r2, r3, #4
 800752c:	4b20      	ldr	r3, [pc, #128]	; (80075b0 <RTC_WeekDayNum+0xec>)
 800752e:	fba3 1302 	umull	r1, r3, r3, r2
 8007532:	1ad1      	subs	r1, r2, r3
 8007534:	0849      	lsrs	r1, r1, #1
 8007536:	440b      	add	r3, r1
 8007538:	0899      	lsrs	r1, r3, #2
 800753a:	460b      	mov	r3, r1
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	1a5b      	subs	r3, r3, r1
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e029      	b.n	800759a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007546:	78fa      	ldrb	r2, [r7, #3]
 8007548:	4613      	mov	r3, r2
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	4413      	add	r3, r2
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	1a9b      	subs	r3, r3, r2
 8007552:	4a15      	ldr	r2, [pc, #84]	; (80075a8 <RTC_WeekDayNum+0xe4>)
 8007554:	fba2 2303 	umull	r2, r3, r2, r3
 8007558:	085a      	lsrs	r2, r3, #1
 800755a:	78bb      	ldrb	r3, [r7, #2]
 800755c:	441a      	add	r2, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	441a      	add	r2, r3
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	089b      	lsrs	r3, r3, #2
 8007566:	441a      	add	r2, r3
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	4910      	ldr	r1, [pc, #64]	; (80075ac <RTC_WeekDayNum+0xe8>)
 800756c:	fba1 1303 	umull	r1, r3, r1, r3
 8007570:	095b      	lsrs	r3, r3, #5
 8007572:	1ad2      	subs	r2, r2, r3
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	490d      	ldr	r1, [pc, #52]	; (80075ac <RTC_WeekDayNum+0xe8>)
 8007578:	fba1 1303 	umull	r1, r3, r1, r3
 800757c:	09db      	lsrs	r3, r3, #7
 800757e:	4413      	add	r3, r2
 8007580:	1c9a      	adds	r2, r3, #2
 8007582:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <RTC_WeekDayNum+0xec>)
 8007584:	fba3 1302 	umull	r1, r3, r3, r2
 8007588:	1ad1      	subs	r1, r2, r3
 800758a:	0849      	lsrs	r1, r1, #1
 800758c:	440b      	add	r3, r1
 800758e:	0899      	lsrs	r1, r3, #2
 8007590:	460b      	mov	r3, r1
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	1a5b      	subs	r3, r3, r1
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	b2db      	uxtb	r3, r3
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr
 80075a8:	38e38e39 	.word	0x38e38e39
 80075ac:	51eb851f 	.word	0x51eb851f
 80075b0:	24924925 	.word	0x24924925

080075b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e076      	b.n	80076b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d108      	bne.n	80075e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075d6:	d009      	beq.n	80075ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	61da      	str	r2, [r3, #28]
 80075de:	e005      	b.n	80075ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fc fb08 	bl	8003c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007622:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800765c:	431a      	orrs	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007670:	ea42 0103 	orr.w	r1, r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	0c1a      	lsrs	r2, r3, #16
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f002 0204 	and.w	r2, r2, #4
 8007692:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69da      	ldr	r2, [r3, #28]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e093      	b.n	80077f8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d106      	bne.n	80076ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7fc fb1f 	bl	8003d28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2202      	movs	r2, #2
 80076ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	6812      	ldr	r2, [r2, #0]
 80076fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007700:	f023 0307 	bic.w	r3, r3, #7
 8007704:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3304      	adds	r3, #4
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f000 fa59 	bl	8007bc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	4313      	orrs	r3, r2
 8007736:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800773e:	f023 0303 	bic.w	r3, r3, #3
 8007742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	021b      	lsls	r3, r3, #8
 800774e:	4313      	orrs	r3, r2
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	4313      	orrs	r3, r2
 8007754:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800775c:	f023 030c 	bic.w	r3, r3, #12
 8007760:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007768:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800776c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	4313      	orrs	r3, r2
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	4313      	orrs	r3, r2
 800777e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	011a      	lsls	r2, r3, #4
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	031b      	lsls	r3, r3, #12
 800778c:	4313      	orrs	r3, r2
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4313      	orrs	r3, r2
 8007792:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800779a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	4313      	orrs	r3, r2
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007810:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007818:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007820:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007828:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d110      	bne.n	8007852 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d102      	bne.n	800783c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007836:	7b7b      	ldrb	r3, [r7, #13]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d001      	beq.n	8007840 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e089      	b.n	8007954 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007850:	e031      	b.n	80078b6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b04      	cmp	r3, #4
 8007856:	d110      	bne.n	800787a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d102      	bne.n	8007864 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800785e:	7b3b      	ldrb	r3, [r7, #12]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d001      	beq.n	8007868 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e075      	b.n	8007954 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007878:	e01d      	b.n	80078b6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d108      	bne.n	8007892 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d105      	bne.n	8007892 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007886:	7b7b      	ldrb	r3, [r7, #13]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d102      	bne.n	8007892 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800788c:	7b3b      	ldrb	r3, [r7, #12]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d001      	beq.n	8007896 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e05e      	b.n	8007954 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2202      	movs	r2, #2
 800789a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2202      	movs	r2, #2
 80078a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2202      	movs	r2, #2
 80078aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2202      	movs	r2, #2
 80078b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d010      	beq.n	80078e4 <HAL_TIM_Encoder_Start_IT+0xe4>
 80078c2:	e01f      	b.n	8007904 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2201      	movs	r2, #1
 80078ca:	2100      	movs	r1, #0
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 f9f5 	bl	8007cbc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68da      	ldr	r2, [r3, #12]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f042 0202 	orr.w	r2, r2, #2
 80078e0:	60da      	str	r2, [r3, #12]
      break;
 80078e2:	e02e      	b.n	8007942 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2201      	movs	r2, #1
 80078ea:	2104      	movs	r1, #4
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 f9e5 	bl	8007cbc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f042 0204 	orr.w	r2, r2, #4
 8007900:	60da      	str	r2, [r3, #12]
      break;
 8007902:	e01e      	b.n	8007942 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2201      	movs	r2, #1
 800790a:	2100      	movs	r1, #0
 800790c:	4618      	mov	r0, r3
 800790e:	f000 f9d5 	bl	8007cbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2201      	movs	r2, #1
 8007918:	2104      	movs	r1, #4
 800791a:	4618      	mov	r0, r3
 800791c:	f000 f9ce 	bl	8007cbc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0202 	orr.w	r2, r2, #2
 800792e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68da      	ldr	r2, [r3, #12]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0204 	orr.w	r2, r2, #4
 800793e:	60da      	str	r2, [r3, #12]
      break;
 8007940:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f042 0201 	orr.w	r2, r2, #1
 8007950:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b02      	cmp	r3, #2
 8007970:	d122      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b02      	cmp	r3, #2
 800797e:	d11b      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f06f 0202 	mvn.w	r2, #2
 8007988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	f003 0303 	and.w	r3, r3, #3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f8f6 	bl	8007b90 <HAL_TIM_IC_CaptureCallback>
 80079a4:	e005      	b.n	80079b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f8e9 	bl	8007b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f8f8 	bl	8007ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f003 0304 	and.w	r3, r3, #4
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d122      	bne.n	8007a0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d11b      	bne.n	8007a0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f06f 0204 	mvn.w	r2, #4
 80079dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2202      	movs	r2, #2
 80079e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f8cc 	bl	8007b90 <HAL_TIM_IC_CaptureCallback>
 80079f8:	e005      	b.n	8007a06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f8bf 	bl	8007b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f8ce 	bl	8007ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	2b08      	cmp	r3, #8
 8007a18:	d122      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f003 0308 	and.w	r3, r3, #8
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d11b      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f06f 0208 	mvn.w	r2, #8
 8007a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2204      	movs	r2, #4
 8007a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f8a2 	bl	8007b90 <HAL_TIM_IC_CaptureCallback>
 8007a4c:	e005      	b.n	8007a5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f895 	bl	8007b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f8a4 	bl	8007ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f003 0310 	and.w	r3, r3, #16
 8007a6a:	2b10      	cmp	r3, #16
 8007a6c:	d122      	bne.n	8007ab4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f003 0310 	and.w	r3, r3, #16
 8007a78:	2b10      	cmp	r3, #16
 8007a7a:	d11b      	bne.n	8007ab4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f06f 0210 	mvn.w	r2, #16
 8007a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2208      	movs	r2, #8
 8007a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f878 	bl	8007b90 <HAL_TIM_IC_CaptureCallback>
 8007aa0:	e005      	b.n	8007aae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f86b 	bl	8007b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f87a 	bl	8007ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d10e      	bne.n	8007ae0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d107      	bne.n	8007ae0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f06f 0201 	mvn.w	r2, #1
 8007ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f846 	bl	8007b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aea:	2b80      	cmp	r3, #128	; 0x80
 8007aec:	d10e      	bne.n	8007b0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af8:	2b80      	cmp	r3, #128	; 0x80
 8007afa:	d107      	bne.n	8007b0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f971 	bl	8007dee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b16:	2b40      	cmp	r3, #64	; 0x40
 8007b18:	d10e      	bne.n	8007b38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b24:	2b40      	cmp	r3, #64	; 0x40
 8007b26:	d107      	bne.n	8007b38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f83e 	bl	8007bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f003 0320 	and.w	r3, r3, #32
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	d10e      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f003 0320 	and.w	r3, r3, #32
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d107      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f06f 0220 	mvn.w	r2, #32
 8007b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f93c 	bl	8007ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bc80      	pop	{r7}
 8007b7c:	4770      	bx	lr

08007b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b083      	sub	sp, #12
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bc80      	pop	{r7}
 8007b8e:	4770      	bx	lr

08007b90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bc80      	pop	{r7}
 8007ba0:	4770      	bx	lr

08007ba2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b083      	sub	sp, #12
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bc80      	pop	{r7}
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bc80      	pop	{r7}
 8007bc4:	4770      	bx	lr
	...

08007bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a33      	ldr	r2, [pc, #204]	; (8007ca8 <TIM_Base_SetConfig+0xe0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d013      	beq.n	8007c08 <TIM_Base_SetConfig+0x40>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a32      	ldr	r2, [pc, #200]	; (8007cac <TIM_Base_SetConfig+0xe4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00f      	beq.n	8007c08 <TIM_Base_SetConfig+0x40>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bee:	d00b      	beq.n	8007c08 <TIM_Base_SetConfig+0x40>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a2f      	ldr	r2, [pc, #188]	; (8007cb0 <TIM_Base_SetConfig+0xe8>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d007      	beq.n	8007c08 <TIM_Base_SetConfig+0x40>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a2e      	ldr	r2, [pc, #184]	; (8007cb4 <TIM_Base_SetConfig+0xec>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d003      	beq.n	8007c08 <TIM_Base_SetConfig+0x40>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a2d      	ldr	r2, [pc, #180]	; (8007cb8 <TIM_Base_SetConfig+0xf0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d108      	bne.n	8007c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a22      	ldr	r2, [pc, #136]	; (8007ca8 <TIM_Base_SetConfig+0xe0>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d013      	beq.n	8007c4a <TIM_Base_SetConfig+0x82>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a21      	ldr	r2, [pc, #132]	; (8007cac <TIM_Base_SetConfig+0xe4>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00f      	beq.n	8007c4a <TIM_Base_SetConfig+0x82>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c30:	d00b      	beq.n	8007c4a <TIM_Base_SetConfig+0x82>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a1e      	ldr	r2, [pc, #120]	; (8007cb0 <TIM_Base_SetConfig+0xe8>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d007      	beq.n	8007c4a <TIM_Base_SetConfig+0x82>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a1d      	ldr	r2, [pc, #116]	; (8007cb4 <TIM_Base_SetConfig+0xec>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d003      	beq.n	8007c4a <TIM_Base_SetConfig+0x82>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a1c      	ldr	r2, [pc, #112]	; (8007cb8 <TIM_Base_SetConfig+0xf0>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d108      	bne.n	8007c5c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a09      	ldr	r2, [pc, #36]	; (8007ca8 <TIM_Base_SetConfig+0xe0>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d003      	beq.n	8007c90 <TIM_Base_SetConfig+0xc8>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a08      	ldr	r2, [pc, #32]	; (8007cac <TIM_Base_SetConfig+0xe4>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d103      	bne.n	8007c98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	691a      	ldr	r2, [r3, #16]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	615a      	str	r2, [r3, #20]
}
 8007c9e:	bf00      	nop
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bc80      	pop	{r7}
 8007ca6:	4770      	bx	lr
 8007ca8:	40012c00 	.word	0x40012c00
 8007cac:	40013400 	.word	0x40013400
 8007cb0:	40000400 	.word	0x40000400
 8007cb4:	40000800 	.word	0x40000800
 8007cb8:	40000c00 	.word	0x40000c00

08007cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	f003 031f 	and.w	r3, r3, #31
 8007cce:	2201      	movs	r2, #1
 8007cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1a      	ldr	r2, [r3, #32]
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	43db      	mvns	r3, r3
 8007cde:	401a      	ands	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a1a      	ldr	r2, [r3, #32]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f003 031f 	and.w	r3, r3, #31
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	621a      	str	r2, [r3, #32]
}
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bc80      	pop	{r7}
 8007d02:	4770      	bx	lr

08007d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e050      	b.n	8007dbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a1b      	ldr	r2, [pc, #108]	; (8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d018      	beq.n	8007d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a19      	ldr	r2, [pc, #100]	; (8007dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d013      	beq.n	8007d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d72:	d00e      	beq.n	8007d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a15      	ldr	r2, [pc, #84]	; (8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d009      	beq.n	8007d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a14      	ldr	r2, [pc, #80]	; (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d004      	beq.n	8007d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a12      	ldr	r2, [pc, #72]	; (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d10c      	bne.n	8007dac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bc80      	pop	{r7}
 8007dc6:	4770      	bx	lr
 8007dc8:	40012c00 	.word	0x40012c00
 8007dcc:	40013400 	.word	0x40013400
 8007dd0:	40000400 	.word	0x40000400
 8007dd4:	40000800 	.word	0x40000800
 8007dd8:	40000c00 	.word	0x40000c00

08007ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bc80      	pop	{r7}
 8007dec:	4770      	bx	lr

08007dee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bc80      	pop	{r7}
 8007dfe:	4770      	bx	lr

08007e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e03f      	b.n	8007e92 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d106      	bne.n	8007e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7fc f81e 	bl	8003e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2224      	movs	r2, #36	; 0x24
 8007e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f829 	bl	8007e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	691a      	ldr	r2, [r3, #16]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	695a      	ldr	r2, [r3, #20]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68da      	ldr	r2, [r3, #12]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2220      	movs	r2, #32
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007ed6:	f023 030c 	bic.w	r3, r3, #12
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	68b9      	ldr	r1, [r7, #8]
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	699a      	ldr	r2, [r3, #24]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a2c      	ldr	r2, [pc, #176]	; (8007fb0 <UART_SetConfig+0x114>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d103      	bne.n	8007f0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007f04:	f7fe fdfa 	bl	8006afc <HAL_RCC_GetPCLK2Freq>
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	e002      	b.n	8007f12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007f0c:	f7fe fde2 	bl	8006ad4 <HAL_RCC_GetPCLK1Freq>
 8007f10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009a      	lsls	r2, r3, #2
 8007f1c:	441a      	add	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f28:	4a22      	ldr	r2, [pc, #136]	; (8007fb4 <UART_SetConfig+0x118>)
 8007f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f2e:	095b      	lsrs	r3, r3, #5
 8007f30:	0119      	lsls	r1, r3, #4
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009a      	lsls	r2, r3, #2
 8007f3c:	441a      	add	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f48:	4b1a      	ldr	r3, [pc, #104]	; (8007fb4 <UART_SetConfig+0x118>)
 8007f4a:	fba3 0302 	umull	r0, r3, r3, r2
 8007f4e:	095b      	lsrs	r3, r3, #5
 8007f50:	2064      	movs	r0, #100	; 0x64
 8007f52:	fb00 f303 	mul.w	r3, r0, r3
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	011b      	lsls	r3, r3, #4
 8007f5a:	3332      	adds	r3, #50	; 0x32
 8007f5c:	4a15      	ldr	r2, [pc, #84]	; (8007fb4 <UART_SetConfig+0x118>)
 8007f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f62:	095b      	lsrs	r3, r3, #5
 8007f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f68:	4419      	add	r1, r3
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	009a      	lsls	r2, r3, #2
 8007f74:	441a      	add	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f80:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <UART_SetConfig+0x118>)
 8007f82:	fba3 0302 	umull	r0, r3, r3, r2
 8007f86:	095b      	lsrs	r3, r3, #5
 8007f88:	2064      	movs	r0, #100	; 0x64
 8007f8a:	fb00 f303 	mul.w	r3, r0, r3
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	011b      	lsls	r3, r3, #4
 8007f92:	3332      	adds	r3, #50	; 0x32
 8007f94:	4a07      	ldr	r2, [pc, #28]	; (8007fb4 <UART_SetConfig+0x118>)
 8007f96:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9a:	095b      	lsrs	r3, r3, #5
 8007f9c:	f003 020f 	and.w	r2, r3, #15
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007fa8:	bf00      	nop
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	40013800 	.word	0x40013800
 8007fb4:	51eb851f 	.word	0x51eb851f

08007fb8 <__aeabi_atexit>:
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4601      	mov	r1, r0
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 b943 	b.w	8008248 <__cxa_atexit>

08007fc2 <_ZdlPvj>:
 8007fc2:	f000 b914 	b.w	80081ee <_ZdlPv>

08007fc6 <_Znwj>:
 8007fc6:	2801      	cmp	r0, #1
 8007fc8:	bf38      	it	cc
 8007fca:	2001      	movcc	r0, #1
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f000 f971 	bl	80082b8 <malloc>
 8007fd6:	b930      	cbnz	r0, 8007fe6 <_Znwj+0x20>
 8007fd8:	f000 f91e 	bl	8008218 <_ZSt15get_new_handlerv>
 8007fdc:	b908      	cbnz	r0, 8007fe2 <_Znwj+0x1c>
 8007fde:	f000 f92c 	bl	800823a <abort>
 8007fe2:	4780      	blx	r0
 8007fe4:	e7f4      	b.n	8007fd0 <_Znwj+0xa>
 8007fe6:	bd10      	pop	{r4, pc}

08007fe8 <__cxa_pure_virtual>:
 8007fe8:	b508      	push	{r3, lr}
 8007fea:	f000 f90f 	bl	800820c <_ZSt9terminatev>

08007fee <_ZNSaIcEC1Ev>:
 8007fee:	4770      	bx	lr

08007ff0 <_ZNSaIcED1Ev>:
 8007ff0:	4770      	bx	lr

08007ff2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8007ff2:	b10a      	cbz	r2, 8007ff8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8007ff4:	f000 b98e 	b.w	8008314 <memcpy>
 8007ff8:	4770      	bx	lr

08007ffa <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8007ffa:	b10a      	cbz	r2, 8008000 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8007ffc:	f000 b97a 	b.w	80082f4 <memcmp>
 8008000:	4610      	mov	r0, r2
 8008002:	4770      	bx	lr

08008004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8008004:	b508      	push	{r3, lr}
 8008006:	680b      	ldr	r3, [r1, #0]
 8008008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800800c:	d302      	bcc.n	8008014 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800800e:	480d      	ldr	r0, [pc, #52]	; (8008044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8008010:	f000 f910 	bl	8008234 <_ZSt20__throw_length_errorPKc>
 8008014:	4293      	cmp	r3, r2
 8008016:	d90b      	bls.n	8008030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008018:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800801c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8008020:	d206      	bcs.n	8008030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008022:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008026:	bf2a      	itet	cs
 8008028:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800802c:	6008      	strcc	r0, [r1, #0]
 800802e:	600b      	strcs	r3, [r1, #0]
 8008030:	6808      	ldr	r0, [r1, #0]
 8008032:	3001      	adds	r0, #1
 8008034:	d501      	bpl.n	800803a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8008036:	f000 f8f7 	bl	8008228 <_ZSt17__throw_bad_allocv>
 800803a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800803e:	f7ff bfc2 	b.w	8007fc6 <_Znwj>
 8008042:	bf00      	nop
 8008044:	08008f20 	.word	0x08008f20

08008048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008048:	4603      	mov	r3, r0
 800804a:	f853 0b08 	ldr.w	r0, [r3], #8
 800804e:	4298      	cmp	r0, r3
 8008050:	d001      	beq.n	8008056 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8008052:	f000 b8cc 	b.w	80081ee <_ZdlPv>
 8008056:	4770      	bx	lr

08008058 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8008058:	2a01      	cmp	r2, #1
 800805a:	b410      	push	{r4}
 800805c:	d103      	bne.n	8008066 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 800805e:	780a      	ldrb	r2, [r1, #0]
 8008060:	bc10      	pop	{r4}
 8008062:	7002      	strb	r2, [r0, #0]
 8008064:	4770      	bx	lr
 8008066:	bc10      	pop	{r4}
 8008068:	f7ff bfc3 	b.w	8007ff2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800806c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800806c:	b508      	push	{r3, lr}
 800806e:	1a52      	subs	r2, r2, r1
 8008070:	f7ff fff2 	bl	8008058 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008074:	bd08      	pop	{r3, pc}

08008076 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8008076:	b508      	push	{r3, lr}
 8008078:	1a52      	subs	r2, r2, r1
 800807a:	f7ff ffed 	bl	8008058 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800807e:	bd08      	pop	{r3, pc}

08008080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8008080:	4288      	cmp	r0, r1
 8008082:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008084:	4604      	mov	r4, r0
 8008086:	460e      	mov	r6, r1
 8008088:	d01e      	beq.n	80080c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 800808a:	4603      	mov	r3, r0
 800808c:	f853 2b08 	ldr.w	r2, [r3], #8
 8008090:	684d      	ldr	r5, [r1, #4]
 8008092:	429a      	cmp	r2, r3
 8008094:	bf0c      	ite	eq
 8008096:	220f      	moveq	r2, #15
 8008098:	6882      	ldrne	r2, [r0, #8]
 800809a:	42aa      	cmp	r2, r5
 800809c:	d20a      	bcs.n	80080b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 800809e:	a901      	add	r1, sp, #4
 80080a0:	9501      	str	r5, [sp, #4]
 80080a2:	f7ff ffaf 	bl	8008004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80080a6:	4607      	mov	r7, r0
 80080a8:	4620      	mov	r0, r4
 80080aa:	f7ff ffcd 	bl	8008048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	6027      	str	r7, [r4, #0]
 80080b2:	60a3      	str	r3, [r4, #8]
 80080b4:	b125      	cbz	r5, 80080c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 80080b6:	462a      	mov	r2, r5
 80080b8:	6831      	ldr	r1, [r6, #0]
 80080ba:	6820      	ldr	r0, [r4, #0]
 80080bc:	f7ff ffcc 	bl	8008058 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80080c0:	2200      	movs	r2, #0
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	6065      	str	r5, [r4, #4]
 80080c6:	555a      	strb	r2, [r3, r5]
 80080c8:	b003      	add	sp, #12
 80080ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80080cc:	f100 0208 	add.w	r2, r0, #8
 80080d0:	6002      	str	r2, [r0, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	6042      	str	r2, [r0, #4]
 80080d6:	7202      	strb	r2, [r0, #8]
 80080d8:	4770      	bx	lr

080080da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80080da:	b510      	push	{r4, lr}
 80080dc:	4604      	mov	r4, r0
 80080de:	f7ff ffb3 	bl	8008048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80080e2:	4620      	mov	r0, r4
 80080e4:	bd10      	pop	{r4, pc}

080080e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 80080e6:	b510      	push	{r4, lr}
 80080e8:	4604      	mov	r4, r0
 80080ea:	f7ff ffc9 	bl	8008080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80080ee:	4620      	mov	r0, r4
 80080f0:	bd10      	pop	{r4, pc}

080080f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 80080f2:	6840      	ldr	r0, [r0, #4]
 80080f4:	4770      	bx	lr

080080f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80080f6:	6800      	ldr	r0, [r0, #0]
 80080f8:	4770      	bx	lr

080080fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 80080fa:	b538      	push	{r3, r4, r5, lr}
 80080fc:	6845      	ldr	r5, [r0, #4]
 80080fe:	684c      	ldr	r4, [r1, #4]
 8008100:	462a      	mov	r2, r5
 8008102:	42a5      	cmp	r5, r4
 8008104:	bf28      	it	cs
 8008106:	4622      	movcs	r2, r4
 8008108:	6809      	ldr	r1, [r1, #0]
 800810a:	6800      	ldr	r0, [r0, #0]
 800810c:	f7ff ff75 	bl	8007ffa <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8008110:	b900      	cbnz	r0, 8008114 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 8008112:	1b28      	subs	r0, r5, r4
 8008114:	bd38      	pop	{r3, r4, r5, pc}
	...

08008118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8008118:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800811a:	4604      	mov	r4, r0
 800811c:	4616      	mov	r6, r2
 800811e:	460d      	mov	r5, r1
 8008120:	b919      	cbnz	r1, 800812a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8008122:	b112      	cbz	r2, 800812a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8008124:	480d      	ldr	r0, [pc, #52]	; (800815c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8008126:	f000 f882 	bl	800822e <_ZSt19__throw_logic_errorPKc>
 800812a:	1b73      	subs	r3, r6, r5
 800812c:	2b0f      	cmp	r3, #15
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	d907      	bls.n	8008142 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8008132:	2200      	movs	r2, #0
 8008134:	4620      	mov	r0, r4
 8008136:	a901      	add	r1, sp, #4
 8008138:	f7ff ff64 	bl	8008004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800813c:	9b01      	ldr	r3, [sp, #4]
 800813e:	6020      	str	r0, [r4, #0]
 8008140:	60a3      	str	r3, [r4, #8]
 8008142:	4632      	mov	r2, r6
 8008144:	4629      	mov	r1, r5
 8008146:	6820      	ldr	r0, [r4, #0]
 8008148:	f7ff ff90 	bl	800806c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800814c:	2100      	movs	r1, #0
 800814e:	9b01      	ldr	r3, [sp, #4]
 8008150:	6822      	ldr	r2, [r4, #0]
 8008152:	6063      	str	r3, [r4, #4]
 8008154:	54d1      	strb	r1, [r2, r3]
 8008156:	b002      	add	sp, #8
 8008158:	bd70      	pop	{r4, r5, r6, pc}
 800815a:	bf00      	nop
 800815c:	08008f38 	.word	0x08008f38

08008160 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8008160:	b510      	push	{r4, lr}
 8008162:	4604      	mov	r4, r0
 8008164:	f100 0208 	add.w	r2, r0, #8
 8008168:	6002      	str	r2, [r0, #0]
 800816a:	e9d1 1200 	ldrd	r1, r2, [r1]
 800816e:	f04f 0300 	mov.w	r3, #0
 8008172:	440a      	add	r2, r1
 8008174:	f7ff ffd0 	bl	8008118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8008178:	4620      	mov	r0, r4
 800817a:	bd10      	pop	{r4, pc}

0800817c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800817c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800817e:	4604      	mov	r4, r0
 8008180:	4616      	mov	r6, r2
 8008182:	460d      	mov	r5, r1
 8008184:	b919      	cbnz	r1, 800818e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8008186:	b112      	cbz	r2, 800818e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8008188:	480d      	ldr	r0, [pc, #52]	; (80081c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800818a:	f000 f850 	bl	800822e <_ZSt19__throw_logic_errorPKc>
 800818e:	1b73      	subs	r3, r6, r5
 8008190:	2b0f      	cmp	r3, #15
 8008192:	9301      	str	r3, [sp, #4]
 8008194:	d907      	bls.n	80081a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8008196:	2200      	movs	r2, #0
 8008198:	4620      	mov	r0, r4
 800819a:	a901      	add	r1, sp, #4
 800819c:	f7ff ff32 	bl	8008004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80081a0:	9b01      	ldr	r3, [sp, #4]
 80081a2:	6020      	str	r0, [r4, #0]
 80081a4:	60a3      	str	r3, [r4, #8]
 80081a6:	4632      	mov	r2, r6
 80081a8:	4629      	mov	r1, r5
 80081aa:	6820      	ldr	r0, [r4, #0]
 80081ac:	f7ff ff63 	bl	8008076 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80081b0:	2100      	movs	r1, #0
 80081b2:	9b01      	ldr	r3, [sp, #4]
 80081b4:	6822      	ldr	r2, [r4, #0]
 80081b6:	6063      	str	r3, [r4, #4]
 80081b8:	54d1      	strb	r1, [r2, r3]
 80081ba:	b002      	add	sp, #8
 80081bc:	bd70      	pop	{r4, r5, r6, pc}
 80081be:	bf00      	nop
 80081c0:	08008f38 	.word	0x08008f38

080081c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	f100 0308 	add.w	r3, r0, #8
 80081ca:	4604      	mov	r4, r0
 80081cc:	460d      	mov	r5, r1
 80081ce:	6003      	str	r3, [r0, #0]
 80081d0:	b159      	cbz	r1, 80081ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80081d2:	4608      	mov	r0, r1
 80081d4:	f7f8 f826 	bl	8000224 <strlen>
 80081d8:	182a      	adds	r2, r5, r0
 80081da:	4620      	mov	r0, r4
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	4629      	mov	r1, r5
 80081e2:	f7ff ffcb 	bl	800817c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80081e6:	4620      	mov	r0, r4
 80081e8:	bd38      	pop	{r3, r4, r5, pc}
 80081ea:	2201      	movs	r2, #1
 80081ec:	e7f5      	b.n	80081da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080081ee <_ZdlPv>:
 80081ee:	f000 b86b 	b.w	80082c8 <free>

080081f2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80081f2:	b508      	push	{r3, lr}
 80081f4:	4780      	blx	r0
 80081f6:	f000 f820 	bl	800823a <abort>
	...

080081fc <_ZSt13get_terminatev>:
 80081fc:	4b02      	ldr	r3, [pc, #8]	; (8008208 <_ZSt13get_terminatev+0xc>)
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	f3bf 8f5b 	dmb	ish
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	20000010 	.word	0x20000010

0800820c <_ZSt9terminatev>:
 800820c:	b508      	push	{r3, lr}
 800820e:	f7ff fff5 	bl	80081fc <_ZSt13get_terminatev>
 8008212:	f7ff ffee 	bl	80081f2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08008218 <_ZSt15get_new_handlerv>:
 8008218:	4b02      	ldr	r3, [pc, #8]	; (8008224 <_ZSt15get_new_handlerv+0xc>)
 800821a:	6818      	ldr	r0, [r3, #0]
 800821c:	f3bf 8f5b 	dmb	ish
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20000370 	.word	0x20000370

08008228 <_ZSt17__throw_bad_allocv>:
 8008228:	b508      	push	{r3, lr}
 800822a:	f000 f806 	bl	800823a <abort>

0800822e <_ZSt19__throw_logic_errorPKc>:
 800822e:	b508      	push	{r3, lr}
 8008230:	f000 f803 	bl	800823a <abort>

08008234 <_ZSt20__throw_length_errorPKc>:
 8008234:	b508      	push	{r3, lr}
 8008236:	f000 f800 	bl	800823a <abort>

0800823a <abort>:
 800823a:	2006      	movs	r0, #6
 800823c:	b508      	push	{r3, lr}
 800823e:	f000 f9ad 	bl	800859c <raise>
 8008242:	2001      	movs	r0, #1
 8008244:	f7fb fec3 	bl	8003fce <_exit>

08008248 <__cxa_atexit>:
 8008248:	b510      	push	{r4, lr}
 800824a:	4604      	mov	r4, r0
 800824c:	4804      	ldr	r0, [pc, #16]	; (8008260 <__cxa_atexit+0x18>)
 800824e:	4613      	mov	r3, r2
 8008250:	b120      	cbz	r0, 800825c <__cxa_atexit+0x14>
 8008252:	460a      	mov	r2, r1
 8008254:	2002      	movs	r0, #2
 8008256:	4621      	mov	r1, r4
 8008258:	f3af 8000 	nop.w
 800825c:	bd10      	pop	{r4, pc}
 800825e:	bf00      	nop
 8008260:	00000000 	.word	0x00000000

08008264 <__errno>:
 8008264:	4b01      	ldr	r3, [pc, #4]	; (800826c <__errno+0x8>)
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	20000014 	.word	0x20000014

08008270 <__libc_init_array>:
 8008270:	b570      	push	{r4, r5, r6, lr}
 8008272:	2600      	movs	r6, #0
 8008274:	4d0c      	ldr	r5, [pc, #48]	; (80082a8 <__libc_init_array+0x38>)
 8008276:	4c0d      	ldr	r4, [pc, #52]	; (80082ac <__libc_init_array+0x3c>)
 8008278:	1b64      	subs	r4, r4, r5
 800827a:	10a4      	asrs	r4, r4, #2
 800827c:	42a6      	cmp	r6, r4
 800827e:	d109      	bne.n	8008294 <__libc_init_array+0x24>
 8008280:	f000 fd00 	bl	8008c84 <_init>
 8008284:	2600      	movs	r6, #0
 8008286:	4d0a      	ldr	r5, [pc, #40]	; (80082b0 <__libc_init_array+0x40>)
 8008288:	4c0a      	ldr	r4, [pc, #40]	; (80082b4 <__libc_init_array+0x44>)
 800828a:	1b64      	subs	r4, r4, r5
 800828c:	10a4      	asrs	r4, r4, #2
 800828e:	42a6      	cmp	r6, r4
 8008290:	d105      	bne.n	800829e <__libc_init_array+0x2e>
 8008292:	bd70      	pop	{r4, r5, r6, pc}
 8008294:	f855 3b04 	ldr.w	r3, [r5], #4
 8008298:	4798      	blx	r3
 800829a:	3601      	adds	r6, #1
 800829c:	e7ee      	b.n	800827c <__libc_init_array+0xc>
 800829e:	f855 3b04 	ldr.w	r3, [r5], #4
 80082a2:	4798      	blx	r3
 80082a4:	3601      	adds	r6, #1
 80082a6:	e7f2      	b.n	800828e <__libc_init_array+0x1e>
 80082a8:	08009100 	.word	0x08009100
 80082ac:	08009100 	.word	0x08009100
 80082b0:	08009100 	.word	0x08009100
 80082b4:	08009108 	.word	0x08009108

080082b8 <malloc>:
 80082b8:	4b02      	ldr	r3, [pc, #8]	; (80082c4 <malloc+0xc>)
 80082ba:	4601      	mov	r1, r0
 80082bc:	6818      	ldr	r0, [r3, #0]
 80082be:	f000 b8c1 	b.w	8008444 <_malloc_r>
 80082c2:	bf00      	nop
 80082c4:	20000014 	.word	0x20000014

080082c8 <free>:
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <free+0xc>)
 80082ca:	4601      	mov	r1, r0
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	f000 b851 	b.w	8008374 <_free_r>
 80082d2:	bf00      	nop
 80082d4:	20000014 	.word	0x20000014

080082d8 <memchr>:
 80082d8:	4603      	mov	r3, r0
 80082da:	b510      	push	{r4, lr}
 80082dc:	b2c9      	uxtb	r1, r1
 80082de:	4402      	add	r2, r0
 80082e0:	4293      	cmp	r3, r2
 80082e2:	4618      	mov	r0, r3
 80082e4:	d101      	bne.n	80082ea <memchr+0x12>
 80082e6:	2000      	movs	r0, #0
 80082e8:	e003      	b.n	80082f2 <memchr+0x1a>
 80082ea:	7804      	ldrb	r4, [r0, #0]
 80082ec:	3301      	adds	r3, #1
 80082ee:	428c      	cmp	r4, r1
 80082f0:	d1f6      	bne.n	80082e0 <memchr+0x8>
 80082f2:	bd10      	pop	{r4, pc}

080082f4 <memcmp>:
 80082f4:	b510      	push	{r4, lr}
 80082f6:	3901      	subs	r1, #1
 80082f8:	4402      	add	r2, r0
 80082fa:	4290      	cmp	r0, r2
 80082fc:	d101      	bne.n	8008302 <memcmp+0xe>
 80082fe:	2000      	movs	r0, #0
 8008300:	e005      	b.n	800830e <memcmp+0x1a>
 8008302:	7803      	ldrb	r3, [r0, #0]
 8008304:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008308:	42a3      	cmp	r3, r4
 800830a:	d001      	beq.n	8008310 <memcmp+0x1c>
 800830c:	1b18      	subs	r0, r3, r4
 800830e:	bd10      	pop	{r4, pc}
 8008310:	3001      	adds	r0, #1
 8008312:	e7f2      	b.n	80082fa <memcmp+0x6>

08008314 <memcpy>:
 8008314:	440a      	add	r2, r1
 8008316:	4291      	cmp	r1, r2
 8008318:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800831c:	d100      	bne.n	8008320 <memcpy+0xc>
 800831e:	4770      	bx	lr
 8008320:	b510      	push	{r4, lr}
 8008322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008326:	4291      	cmp	r1, r2
 8008328:	f803 4f01 	strb.w	r4, [r3, #1]!
 800832c:	d1f9      	bne.n	8008322 <memcpy+0xe>
 800832e:	bd10      	pop	{r4, pc}

08008330 <memmove>:
 8008330:	4288      	cmp	r0, r1
 8008332:	b510      	push	{r4, lr}
 8008334:	eb01 0402 	add.w	r4, r1, r2
 8008338:	d902      	bls.n	8008340 <memmove+0x10>
 800833a:	4284      	cmp	r4, r0
 800833c:	4623      	mov	r3, r4
 800833e:	d807      	bhi.n	8008350 <memmove+0x20>
 8008340:	1e43      	subs	r3, r0, #1
 8008342:	42a1      	cmp	r1, r4
 8008344:	d008      	beq.n	8008358 <memmove+0x28>
 8008346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800834a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800834e:	e7f8      	b.n	8008342 <memmove+0x12>
 8008350:	4601      	mov	r1, r0
 8008352:	4402      	add	r2, r0
 8008354:	428a      	cmp	r2, r1
 8008356:	d100      	bne.n	800835a <memmove+0x2a>
 8008358:	bd10      	pop	{r4, pc}
 800835a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800835e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008362:	e7f7      	b.n	8008354 <memmove+0x24>

08008364 <memset>:
 8008364:	4603      	mov	r3, r0
 8008366:	4402      	add	r2, r0
 8008368:	4293      	cmp	r3, r2
 800836a:	d100      	bne.n	800836e <memset+0xa>
 800836c:	4770      	bx	lr
 800836e:	f803 1b01 	strb.w	r1, [r3], #1
 8008372:	e7f9      	b.n	8008368 <memset+0x4>

08008374 <_free_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4605      	mov	r5, r0
 8008378:	2900      	cmp	r1, #0
 800837a:	d040      	beq.n	80083fe <_free_r+0x8a>
 800837c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008380:	1f0c      	subs	r4, r1, #4
 8008382:	2b00      	cmp	r3, #0
 8008384:	bfb8      	it	lt
 8008386:	18e4      	addlt	r4, r4, r3
 8008388:	f000 f944 	bl	8008614 <__malloc_lock>
 800838c:	4a1c      	ldr	r2, [pc, #112]	; (8008400 <_free_r+0x8c>)
 800838e:	6813      	ldr	r3, [r2, #0]
 8008390:	b933      	cbnz	r3, 80083a0 <_free_r+0x2c>
 8008392:	6063      	str	r3, [r4, #4]
 8008394:	6014      	str	r4, [r2, #0]
 8008396:	4628      	mov	r0, r5
 8008398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800839c:	f000 b940 	b.w	8008620 <__malloc_unlock>
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	d908      	bls.n	80083b6 <_free_r+0x42>
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	1821      	adds	r1, r4, r0
 80083a8:	428b      	cmp	r3, r1
 80083aa:	bf01      	itttt	eq
 80083ac:	6819      	ldreq	r1, [r3, #0]
 80083ae:	685b      	ldreq	r3, [r3, #4]
 80083b0:	1809      	addeq	r1, r1, r0
 80083b2:	6021      	streq	r1, [r4, #0]
 80083b4:	e7ed      	b.n	8008392 <_free_r+0x1e>
 80083b6:	461a      	mov	r2, r3
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	b10b      	cbz	r3, 80083c0 <_free_r+0x4c>
 80083bc:	42a3      	cmp	r3, r4
 80083be:	d9fa      	bls.n	80083b6 <_free_r+0x42>
 80083c0:	6811      	ldr	r1, [r2, #0]
 80083c2:	1850      	adds	r0, r2, r1
 80083c4:	42a0      	cmp	r0, r4
 80083c6:	d10b      	bne.n	80083e0 <_free_r+0x6c>
 80083c8:	6820      	ldr	r0, [r4, #0]
 80083ca:	4401      	add	r1, r0
 80083cc:	1850      	adds	r0, r2, r1
 80083ce:	4283      	cmp	r3, r0
 80083d0:	6011      	str	r1, [r2, #0]
 80083d2:	d1e0      	bne.n	8008396 <_free_r+0x22>
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	4401      	add	r1, r0
 80083da:	6011      	str	r1, [r2, #0]
 80083dc:	6053      	str	r3, [r2, #4]
 80083de:	e7da      	b.n	8008396 <_free_r+0x22>
 80083e0:	d902      	bls.n	80083e8 <_free_r+0x74>
 80083e2:	230c      	movs	r3, #12
 80083e4:	602b      	str	r3, [r5, #0]
 80083e6:	e7d6      	b.n	8008396 <_free_r+0x22>
 80083e8:	6820      	ldr	r0, [r4, #0]
 80083ea:	1821      	adds	r1, r4, r0
 80083ec:	428b      	cmp	r3, r1
 80083ee:	bf01      	itttt	eq
 80083f0:	6819      	ldreq	r1, [r3, #0]
 80083f2:	685b      	ldreq	r3, [r3, #4]
 80083f4:	1809      	addeq	r1, r1, r0
 80083f6:	6021      	streq	r1, [r4, #0]
 80083f8:	6063      	str	r3, [r4, #4]
 80083fa:	6054      	str	r4, [r2, #4]
 80083fc:	e7cb      	b.n	8008396 <_free_r+0x22>
 80083fe:	bd38      	pop	{r3, r4, r5, pc}
 8008400:	20000374 	.word	0x20000374

08008404 <sbrk_aligned>:
 8008404:	b570      	push	{r4, r5, r6, lr}
 8008406:	4e0e      	ldr	r6, [pc, #56]	; (8008440 <sbrk_aligned+0x3c>)
 8008408:	460c      	mov	r4, r1
 800840a:	6831      	ldr	r1, [r6, #0]
 800840c:	4605      	mov	r5, r0
 800840e:	b911      	cbnz	r1, 8008416 <sbrk_aligned+0x12>
 8008410:	f000 f88c 	bl	800852c <_sbrk_r>
 8008414:	6030      	str	r0, [r6, #0]
 8008416:	4621      	mov	r1, r4
 8008418:	4628      	mov	r0, r5
 800841a:	f000 f887 	bl	800852c <_sbrk_r>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	d00a      	beq.n	8008438 <sbrk_aligned+0x34>
 8008422:	1cc4      	adds	r4, r0, #3
 8008424:	f024 0403 	bic.w	r4, r4, #3
 8008428:	42a0      	cmp	r0, r4
 800842a:	d007      	beq.n	800843c <sbrk_aligned+0x38>
 800842c:	1a21      	subs	r1, r4, r0
 800842e:	4628      	mov	r0, r5
 8008430:	f000 f87c 	bl	800852c <_sbrk_r>
 8008434:	3001      	adds	r0, #1
 8008436:	d101      	bne.n	800843c <sbrk_aligned+0x38>
 8008438:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800843c:	4620      	mov	r0, r4
 800843e:	bd70      	pop	{r4, r5, r6, pc}
 8008440:	20000378 	.word	0x20000378

08008444 <_malloc_r>:
 8008444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008448:	1ccd      	adds	r5, r1, #3
 800844a:	f025 0503 	bic.w	r5, r5, #3
 800844e:	3508      	adds	r5, #8
 8008450:	2d0c      	cmp	r5, #12
 8008452:	bf38      	it	cc
 8008454:	250c      	movcc	r5, #12
 8008456:	2d00      	cmp	r5, #0
 8008458:	4607      	mov	r7, r0
 800845a:	db01      	blt.n	8008460 <_malloc_r+0x1c>
 800845c:	42a9      	cmp	r1, r5
 800845e:	d905      	bls.n	800846c <_malloc_r+0x28>
 8008460:	230c      	movs	r3, #12
 8008462:	2600      	movs	r6, #0
 8008464:	603b      	str	r3, [r7, #0]
 8008466:	4630      	mov	r0, r6
 8008468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800846c:	4e2e      	ldr	r6, [pc, #184]	; (8008528 <_malloc_r+0xe4>)
 800846e:	f000 f8d1 	bl	8008614 <__malloc_lock>
 8008472:	6833      	ldr	r3, [r6, #0]
 8008474:	461c      	mov	r4, r3
 8008476:	bb34      	cbnz	r4, 80084c6 <_malloc_r+0x82>
 8008478:	4629      	mov	r1, r5
 800847a:	4638      	mov	r0, r7
 800847c:	f7ff ffc2 	bl	8008404 <sbrk_aligned>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	4604      	mov	r4, r0
 8008484:	d14d      	bne.n	8008522 <_malloc_r+0xde>
 8008486:	6834      	ldr	r4, [r6, #0]
 8008488:	4626      	mov	r6, r4
 800848a:	2e00      	cmp	r6, #0
 800848c:	d140      	bne.n	8008510 <_malloc_r+0xcc>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	4631      	mov	r1, r6
 8008492:	4638      	mov	r0, r7
 8008494:	eb04 0803 	add.w	r8, r4, r3
 8008498:	f000 f848 	bl	800852c <_sbrk_r>
 800849c:	4580      	cmp	r8, r0
 800849e:	d13a      	bne.n	8008516 <_malloc_r+0xd2>
 80084a0:	6821      	ldr	r1, [r4, #0]
 80084a2:	3503      	adds	r5, #3
 80084a4:	1a6d      	subs	r5, r5, r1
 80084a6:	f025 0503 	bic.w	r5, r5, #3
 80084aa:	3508      	adds	r5, #8
 80084ac:	2d0c      	cmp	r5, #12
 80084ae:	bf38      	it	cc
 80084b0:	250c      	movcc	r5, #12
 80084b2:	4638      	mov	r0, r7
 80084b4:	4629      	mov	r1, r5
 80084b6:	f7ff ffa5 	bl	8008404 <sbrk_aligned>
 80084ba:	3001      	adds	r0, #1
 80084bc:	d02b      	beq.n	8008516 <_malloc_r+0xd2>
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	442b      	add	r3, r5
 80084c2:	6023      	str	r3, [r4, #0]
 80084c4:	e00e      	b.n	80084e4 <_malloc_r+0xa0>
 80084c6:	6822      	ldr	r2, [r4, #0]
 80084c8:	1b52      	subs	r2, r2, r5
 80084ca:	d41e      	bmi.n	800850a <_malloc_r+0xc6>
 80084cc:	2a0b      	cmp	r2, #11
 80084ce:	d916      	bls.n	80084fe <_malloc_r+0xba>
 80084d0:	1961      	adds	r1, r4, r5
 80084d2:	42a3      	cmp	r3, r4
 80084d4:	6025      	str	r5, [r4, #0]
 80084d6:	bf18      	it	ne
 80084d8:	6059      	strne	r1, [r3, #4]
 80084da:	6863      	ldr	r3, [r4, #4]
 80084dc:	bf08      	it	eq
 80084de:	6031      	streq	r1, [r6, #0]
 80084e0:	5162      	str	r2, [r4, r5]
 80084e2:	604b      	str	r3, [r1, #4]
 80084e4:	4638      	mov	r0, r7
 80084e6:	f104 060b 	add.w	r6, r4, #11
 80084ea:	f000 f899 	bl	8008620 <__malloc_unlock>
 80084ee:	f026 0607 	bic.w	r6, r6, #7
 80084f2:	1d23      	adds	r3, r4, #4
 80084f4:	1af2      	subs	r2, r6, r3
 80084f6:	d0b6      	beq.n	8008466 <_malloc_r+0x22>
 80084f8:	1b9b      	subs	r3, r3, r6
 80084fa:	50a3      	str	r3, [r4, r2]
 80084fc:	e7b3      	b.n	8008466 <_malloc_r+0x22>
 80084fe:	6862      	ldr	r2, [r4, #4]
 8008500:	42a3      	cmp	r3, r4
 8008502:	bf0c      	ite	eq
 8008504:	6032      	streq	r2, [r6, #0]
 8008506:	605a      	strne	r2, [r3, #4]
 8008508:	e7ec      	b.n	80084e4 <_malloc_r+0xa0>
 800850a:	4623      	mov	r3, r4
 800850c:	6864      	ldr	r4, [r4, #4]
 800850e:	e7b2      	b.n	8008476 <_malloc_r+0x32>
 8008510:	4634      	mov	r4, r6
 8008512:	6876      	ldr	r6, [r6, #4]
 8008514:	e7b9      	b.n	800848a <_malloc_r+0x46>
 8008516:	230c      	movs	r3, #12
 8008518:	4638      	mov	r0, r7
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	f000 f880 	bl	8008620 <__malloc_unlock>
 8008520:	e7a1      	b.n	8008466 <_malloc_r+0x22>
 8008522:	6025      	str	r5, [r4, #0]
 8008524:	e7de      	b.n	80084e4 <_malloc_r+0xa0>
 8008526:	bf00      	nop
 8008528:	20000374 	.word	0x20000374

0800852c <_sbrk_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	2300      	movs	r3, #0
 8008530:	4d05      	ldr	r5, [pc, #20]	; (8008548 <_sbrk_r+0x1c>)
 8008532:	4604      	mov	r4, r0
 8008534:	4608      	mov	r0, r1
 8008536:	602b      	str	r3, [r5, #0]
 8008538:	f7fb fd54 	bl	8003fe4 <_sbrk>
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d102      	bne.n	8008546 <_sbrk_r+0x1a>
 8008540:	682b      	ldr	r3, [r5, #0]
 8008542:	b103      	cbz	r3, 8008546 <_sbrk_r+0x1a>
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	bd38      	pop	{r3, r4, r5, pc}
 8008548:	2000037c 	.word	0x2000037c

0800854c <_raise_r>:
 800854c:	291f      	cmp	r1, #31
 800854e:	b538      	push	{r3, r4, r5, lr}
 8008550:	4604      	mov	r4, r0
 8008552:	460d      	mov	r5, r1
 8008554:	d904      	bls.n	8008560 <_raise_r+0x14>
 8008556:	2316      	movs	r3, #22
 8008558:	6003      	str	r3, [r0, #0]
 800855a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008562:	b112      	cbz	r2, 800856a <_raise_r+0x1e>
 8008564:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008568:	b94b      	cbnz	r3, 800857e <_raise_r+0x32>
 800856a:	4620      	mov	r0, r4
 800856c:	f000 f830 	bl	80085d0 <_getpid_r>
 8008570:	462a      	mov	r2, r5
 8008572:	4601      	mov	r1, r0
 8008574:	4620      	mov	r0, r4
 8008576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800857a:	f000 b817 	b.w	80085ac <_kill_r>
 800857e:	2b01      	cmp	r3, #1
 8008580:	d00a      	beq.n	8008598 <_raise_r+0x4c>
 8008582:	1c59      	adds	r1, r3, #1
 8008584:	d103      	bne.n	800858e <_raise_r+0x42>
 8008586:	2316      	movs	r3, #22
 8008588:	6003      	str	r3, [r0, #0]
 800858a:	2001      	movs	r0, #1
 800858c:	e7e7      	b.n	800855e <_raise_r+0x12>
 800858e:	2400      	movs	r4, #0
 8008590:	4628      	mov	r0, r5
 8008592:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008596:	4798      	blx	r3
 8008598:	2000      	movs	r0, #0
 800859a:	e7e0      	b.n	800855e <_raise_r+0x12>

0800859c <raise>:
 800859c:	4b02      	ldr	r3, [pc, #8]	; (80085a8 <raise+0xc>)
 800859e:	4601      	mov	r1, r0
 80085a0:	6818      	ldr	r0, [r3, #0]
 80085a2:	f7ff bfd3 	b.w	800854c <_raise_r>
 80085a6:	bf00      	nop
 80085a8:	20000014 	.word	0x20000014

080085ac <_kill_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	2300      	movs	r3, #0
 80085b0:	4d06      	ldr	r5, [pc, #24]	; (80085cc <_kill_r+0x20>)
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	602b      	str	r3, [r5, #0]
 80085ba:	f7fb fcf8 	bl	8003fae <_kill>
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	d102      	bne.n	80085c8 <_kill_r+0x1c>
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	b103      	cbz	r3, 80085c8 <_kill_r+0x1c>
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	bd38      	pop	{r3, r4, r5, pc}
 80085ca:	bf00      	nop
 80085cc:	2000037c 	.word	0x2000037c

080085d0 <_getpid_r>:
 80085d0:	f7fb bce6 	b.w	8003fa0 <_getpid>

080085d4 <siprintf>:
 80085d4:	b40e      	push	{r1, r2, r3}
 80085d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085da:	b500      	push	{lr}
 80085dc:	b09c      	sub	sp, #112	; 0x70
 80085de:	ab1d      	add	r3, sp, #116	; 0x74
 80085e0:	9002      	str	r0, [sp, #8]
 80085e2:	9006      	str	r0, [sp, #24]
 80085e4:	9107      	str	r1, [sp, #28]
 80085e6:	9104      	str	r1, [sp, #16]
 80085e8:	4808      	ldr	r0, [pc, #32]	; (800860c <siprintf+0x38>)
 80085ea:	4909      	ldr	r1, [pc, #36]	; (8008610 <siprintf+0x3c>)
 80085ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f0:	9105      	str	r1, [sp, #20]
 80085f2:	6800      	ldr	r0, [r0, #0]
 80085f4:	a902      	add	r1, sp, #8
 80085f6:	9301      	str	r3, [sp, #4]
 80085f8:	f000 f874 	bl	80086e4 <_svfiprintf_r>
 80085fc:	2200      	movs	r2, #0
 80085fe:	9b02      	ldr	r3, [sp, #8]
 8008600:	701a      	strb	r2, [r3, #0]
 8008602:	b01c      	add	sp, #112	; 0x70
 8008604:	f85d eb04 	ldr.w	lr, [sp], #4
 8008608:	b003      	add	sp, #12
 800860a:	4770      	bx	lr
 800860c:	20000014 	.word	0x20000014
 8008610:	ffff0208 	.word	0xffff0208

08008614 <__malloc_lock>:
 8008614:	4801      	ldr	r0, [pc, #4]	; (800861c <__malloc_lock+0x8>)
 8008616:	f000 bafb 	b.w	8008c10 <__retarget_lock_acquire_recursive>
 800861a:	bf00      	nop
 800861c:	20000380 	.word	0x20000380

08008620 <__malloc_unlock>:
 8008620:	4801      	ldr	r0, [pc, #4]	; (8008628 <__malloc_unlock+0x8>)
 8008622:	f000 baf6 	b.w	8008c12 <__retarget_lock_release_recursive>
 8008626:	bf00      	nop
 8008628:	20000380 	.word	0x20000380

0800862c <__ssputs_r>:
 800862c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008630:	688e      	ldr	r6, [r1, #8]
 8008632:	4682      	mov	sl, r0
 8008634:	429e      	cmp	r6, r3
 8008636:	460c      	mov	r4, r1
 8008638:	4690      	mov	r8, r2
 800863a:	461f      	mov	r7, r3
 800863c:	d838      	bhi.n	80086b0 <__ssputs_r+0x84>
 800863e:	898a      	ldrh	r2, [r1, #12]
 8008640:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008644:	d032      	beq.n	80086ac <__ssputs_r+0x80>
 8008646:	6825      	ldr	r5, [r4, #0]
 8008648:	6909      	ldr	r1, [r1, #16]
 800864a:	3301      	adds	r3, #1
 800864c:	eba5 0901 	sub.w	r9, r5, r1
 8008650:	6965      	ldr	r5, [r4, #20]
 8008652:	444b      	add	r3, r9
 8008654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008658:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800865c:	106d      	asrs	r5, r5, #1
 800865e:	429d      	cmp	r5, r3
 8008660:	bf38      	it	cc
 8008662:	461d      	movcc	r5, r3
 8008664:	0553      	lsls	r3, r2, #21
 8008666:	d531      	bpl.n	80086cc <__ssputs_r+0xa0>
 8008668:	4629      	mov	r1, r5
 800866a:	f7ff feeb 	bl	8008444 <_malloc_r>
 800866e:	4606      	mov	r6, r0
 8008670:	b950      	cbnz	r0, 8008688 <__ssputs_r+0x5c>
 8008672:	230c      	movs	r3, #12
 8008674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008678:	f8ca 3000 	str.w	r3, [sl]
 800867c:	89a3      	ldrh	r3, [r4, #12]
 800867e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008682:	81a3      	strh	r3, [r4, #12]
 8008684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008688:	464a      	mov	r2, r9
 800868a:	6921      	ldr	r1, [r4, #16]
 800868c:	f7ff fe42 	bl	8008314 <memcpy>
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	6126      	str	r6, [r4, #16]
 800869e:	444e      	add	r6, r9
 80086a0:	6026      	str	r6, [r4, #0]
 80086a2:	463e      	mov	r6, r7
 80086a4:	6165      	str	r5, [r4, #20]
 80086a6:	eba5 0509 	sub.w	r5, r5, r9
 80086aa:	60a5      	str	r5, [r4, #8]
 80086ac:	42be      	cmp	r6, r7
 80086ae:	d900      	bls.n	80086b2 <__ssputs_r+0x86>
 80086b0:	463e      	mov	r6, r7
 80086b2:	4632      	mov	r2, r6
 80086b4:	4641      	mov	r1, r8
 80086b6:	6820      	ldr	r0, [r4, #0]
 80086b8:	f7ff fe3a 	bl	8008330 <memmove>
 80086bc:	68a3      	ldr	r3, [r4, #8]
 80086be:	2000      	movs	r0, #0
 80086c0:	1b9b      	subs	r3, r3, r6
 80086c2:	60a3      	str	r3, [r4, #8]
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	4433      	add	r3, r6
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	e7db      	b.n	8008684 <__ssputs_r+0x58>
 80086cc:	462a      	mov	r2, r5
 80086ce:	f000 faa1 	bl	8008c14 <_realloc_r>
 80086d2:	4606      	mov	r6, r0
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d1e1      	bne.n	800869c <__ssputs_r+0x70>
 80086d8:	4650      	mov	r0, sl
 80086da:	6921      	ldr	r1, [r4, #16]
 80086dc:	f7ff fe4a 	bl	8008374 <_free_r>
 80086e0:	e7c7      	b.n	8008672 <__ssputs_r+0x46>
	...

080086e4 <_svfiprintf_r>:
 80086e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e8:	4698      	mov	r8, r3
 80086ea:	898b      	ldrh	r3, [r1, #12]
 80086ec:	4607      	mov	r7, r0
 80086ee:	061b      	lsls	r3, r3, #24
 80086f0:	460d      	mov	r5, r1
 80086f2:	4614      	mov	r4, r2
 80086f4:	b09d      	sub	sp, #116	; 0x74
 80086f6:	d50e      	bpl.n	8008716 <_svfiprintf_r+0x32>
 80086f8:	690b      	ldr	r3, [r1, #16]
 80086fa:	b963      	cbnz	r3, 8008716 <_svfiprintf_r+0x32>
 80086fc:	2140      	movs	r1, #64	; 0x40
 80086fe:	f7ff fea1 	bl	8008444 <_malloc_r>
 8008702:	6028      	str	r0, [r5, #0]
 8008704:	6128      	str	r0, [r5, #16]
 8008706:	b920      	cbnz	r0, 8008712 <_svfiprintf_r+0x2e>
 8008708:	230c      	movs	r3, #12
 800870a:	603b      	str	r3, [r7, #0]
 800870c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008710:	e0d1      	b.n	80088b6 <_svfiprintf_r+0x1d2>
 8008712:	2340      	movs	r3, #64	; 0x40
 8008714:	616b      	str	r3, [r5, #20]
 8008716:	2300      	movs	r3, #0
 8008718:	9309      	str	r3, [sp, #36]	; 0x24
 800871a:	2320      	movs	r3, #32
 800871c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008720:	2330      	movs	r3, #48	; 0x30
 8008722:	f04f 0901 	mov.w	r9, #1
 8008726:	f8cd 800c 	str.w	r8, [sp, #12]
 800872a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80088d0 <_svfiprintf_r+0x1ec>
 800872e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008732:	4623      	mov	r3, r4
 8008734:	469a      	mov	sl, r3
 8008736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800873a:	b10a      	cbz	r2, 8008740 <_svfiprintf_r+0x5c>
 800873c:	2a25      	cmp	r2, #37	; 0x25
 800873e:	d1f9      	bne.n	8008734 <_svfiprintf_r+0x50>
 8008740:	ebba 0b04 	subs.w	fp, sl, r4
 8008744:	d00b      	beq.n	800875e <_svfiprintf_r+0x7a>
 8008746:	465b      	mov	r3, fp
 8008748:	4622      	mov	r2, r4
 800874a:	4629      	mov	r1, r5
 800874c:	4638      	mov	r0, r7
 800874e:	f7ff ff6d 	bl	800862c <__ssputs_r>
 8008752:	3001      	adds	r0, #1
 8008754:	f000 80aa 	beq.w	80088ac <_svfiprintf_r+0x1c8>
 8008758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800875a:	445a      	add	r2, fp
 800875c:	9209      	str	r2, [sp, #36]	; 0x24
 800875e:	f89a 3000 	ldrb.w	r3, [sl]
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 80a2 	beq.w	80088ac <_svfiprintf_r+0x1c8>
 8008768:	2300      	movs	r3, #0
 800876a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800876e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008772:	f10a 0a01 	add.w	sl, sl, #1
 8008776:	9304      	str	r3, [sp, #16]
 8008778:	9307      	str	r3, [sp, #28]
 800877a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800877e:	931a      	str	r3, [sp, #104]	; 0x68
 8008780:	4654      	mov	r4, sl
 8008782:	2205      	movs	r2, #5
 8008784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008788:	4851      	ldr	r0, [pc, #324]	; (80088d0 <_svfiprintf_r+0x1ec>)
 800878a:	f7ff fda5 	bl	80082d8 <memchr>
 800878e:	9a04      	ldr	r2, [sp, #16]
 8008790:	b9d8      	cbnz	r0, 80087ca <_svfiprintf_r+0xe6>
 8008792:	06d0      	lsls	r0, r2, #27
 8008794:	bf44      	itt	mi
 8008796:	2320      	movmi	r3, #32
 8008798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800879c:	0711      	lsls	r1, r2, #28
 800879e:	bf44      	itt	mi
 80087a0:	232b      	movmi	r3, #43	; 0x2b
 80087a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087a6:	f89a 3000 	ldrb.w	r3, [sl]
 80087aa:	2b2a      	cmp	r3, #42	; 0x2a
 80087ac:	d015      	beq.n	80087da <_svfiprintf_r+0xf6>
 80087ae:	4654      	mov	r4, sl
 80087b0:	2000      	movs	r0, #0
 80087b2:	f04f 0c0a 	mov.w	ip, #10
 80087b6:	9a07      	ldr	r2, [sp, #28]
 80087b8:	4621      	mov	r1, r4
 80087ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087be:	3b30      	subs	r3, #48	; 0x30
 80087c0:	2b09      	cmp	r3, #9
 80087c2:	d94e      	bls.n	8008862 <_svfiprintf_r+0x17e>
 80087c4:	b1b0      	cbz	r0, 80087f4 <_svfiprintf_r+0x110>
 80087c6:	9207      	str	r2, [sp, #28]
 80087c8:	e014      	b.n	80087f4 <_svfiprintf_r+0x110>
 80087ca:	eba0 0308 	sub.w	r3, r0, r8
 80087ce:	fa09 f303 	lsl.w	r3, r9, r3
 80087d2:	4313      	orrs	r3, r2
 80087d4:	46a2      	mov	sl, r4
 80087d6:	9304      	str	r3, [sp, #16]
 80087d8:	e7d2      	b.n	8008780 <_svfiprintf_r+0x9c>
 80087da:	9b03      	ldr	r3, [sp, #12]
 80087dc:	1d19      	adds	r1, r3, #4
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	9103      	str	r1, [sp, #12]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	bfbb      	ittet	lt
 80087e6:	425b      	neglt	r3, r3
 80087e8:	f042 0202 	orrlt.w	r2, r2, #2
 80087ec:	9307      	strge	r3, [sp, #28]
 80087ee:	9307      	strlt	r3, [sp, #28]
 80087f0:	bfb8      	it	lt
 80087f2:	9204      	strlt	r2, [sp, #16]
 80087f4:	7823      	ldrb	r3, [r4, #0]
 80087f6:	2b2e      	cmp	r3, #46	; 0x2e
 80087f8:	d10c      	bne.n	8008814 <_svfiprintf_r+0x130>
 80087fa:	7863      	ldrb	r3, [r4, #1]
 80087fc:	2b2a      	cmp	r3, #42	; 0x2a
 80087fe:	d135      	bne.n	800886c <_svfiprintf_r+0x188>
 8008800:	9b03      	ldr	r3, [sp, #12]
 8008802:	3402      	adds	r4, #2
 8008804:	1d1a      	adds	r2, r3, #4
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	9203      	str	r2, [sp, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	bfb8      	it	lt
 800880e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008812:	9305      	str	r3, [sp, #20]
 8008814:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80088d4 <_svfiprintf_r+0x1f0>
 8008818:	2203      	movs	r2, #3
 800881a:	4650      	mov	r0, sl
 800881c:	7821      	ldrb	r1, [r4, #0]
 800881e:	f7ff fd5b 	bl	80082d8 <memchr>
 8008822:	b140      	cbz	r0, 8008836 <_svfiprintf_r+0x152>
 8008824:	2340      	movs	r3, #64	; 0x40
 8008826:	eba0 000a 	sub.w	r0, r0, sl
 800882a:	fa03 f000 	lsl.w	r0, r3, r0
 800882e:	9b04      	ldr	r3, [sp, #16]
 8008830:	3401      	adds	r4, #1
 8008832:	4303      	orrs	r3, r0
 8008834:	9304      	str	r3, [sp, #16]
 8008836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800883a:	2206      	movs	r2, #6
 800883c:	4826      	ldr	r0, [pc, #152]	; (80088d8 <_svfiprintf_r+0x1f4>)
 800883e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008842:	f7ff fd49 	bl	80082d8 <memchr>
 8008846:	2800      	cmp	r0, #0
 8008848:	d038      	beq.n	80088bc <_svfiprintf_r+0x1d8>
 800884a:	4b24      	ldr	r3, [pc, #144]	; (80088dc <_svfiprintf_r+0x1f8>)
 800884c:	bb1b      	cbnz	r3, 8008896 <_svfiprintf_r+0x1b2>
 800884e:	9b03      	ldr	r3, [sp, #12]
 8008850:	3307      	adds	r3, #7
 8008852:	f023 0307 	bic.w	r3, r3, #7
 8008856:	3308      	adds	r3, #8
 8008858:	9303      	str	r3, [sp, #12]
 800885a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800885c:	4433      	add	r3, r6
 800885e:	9309      	str	r3, [sp, #36]	; 0x24
 8008860:	e767      	b.n	8008732 <_svfiprintf_r+0x4e>
 8008862:	460c      	mov	r4, r1
 8008864:	2001      	movs	r0, #1
 8008866:	fb0c 3202 	mla	r2, ip, r2, r3
 800886a:	e7a5      	b.n	80087b8 <_svfiprintf_r+0xd4>
 800886c:	2300      	movs	r3, #0
 800886e:	f04f 0c0a 	mov.w	ip, #10
 8008872:	4619      	mov	r1, r3
 8008874:	3401      	adds	r4, #1
 8008876:	9305      	str	r3, [sp, #20]
 8008878:	4620      	mov	r0, r4
 800887a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800887e:	3a30      	subs	r2, #48	; 0x30
 8008880:	2a09      	cmp	r2, #9
 8008882:	d903      	bls.n	800888c <_svfiprintf_r+0x1a8>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0c5      	beq.n	8008814 <_svfiprintf_r+0x130>
 8008888:	9105      	str	r1, [sp, #20]
 800888a:	e7c3      	b.n	8008814 <_svfiprintf_r+0x130>
 800888c:	4604      	mov	r4, r0
 800888e:	2301      	movs	r3, #1
 8008890:	fb0c 2101 	mla	r1, ip, r1, r2
 8008894:	e7f0      	b.n	8008878 <_svfiprintf_r+0x194>
 8008896:	ab03      	add	r3, sp, #12
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	462a      	mov	r2, r5
 800889c:	4638      	mov	r0, r7
 800889e:	4b10      	ldr	r3, [pc, #64]	; (80088e0 <_svfiprintf_r+0x1fc>)
 80088a0:	a904      	add	r1, sp, #16
 80088a2:	f3af 8000 	nop.w
 80088a6:	1c42      	adds	r2, r0, #1
 80088a8:	4606      	mov	r6, r0
 80088aa:	d1d6      	bne.n	800885a <_svfiprintf_r+0x176>
 80088ac:	89ab      	ldrh	r3, [r5, #12]
 80088ae:	065b      	lsls	r3, r3, #25
 80088b0:	f53f af2c 	bmi.w	800870c <_svfiprintf_r+0x28>
 80088b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088b6:	b01d      	add	sp, #116	; 0x74
 80088b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088bc:	ab03      	add	r3, sp, #12
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	462a      	mov	r2, r5
 80088c2:	4638      	mov	r0, r7
 80088c4:	4b06      	ldr	r3, [pc, #24]	; (80088e0 <_svfiprintf_r+0x1fc>)
 80088c6:	a904      	add	r1, sp, #16
 80088c8:	f000 f87c 	bl	80089c4 <_printf_i>
 80088cc:	e7eb      	b.n	80088a6 <_svfiprintf_r+0x1c2>
 80088ce:	bf00      	nop
 80088d0:	08008f62 	.word	0x08008f62
 80088d4:	08008f68 	.word	0x08008f68
 80088d8:	08008f6c 	.word	0x08008f6c
 80088dc:	00000000 	.word	0x00000000
 80088e0:	0800862d 	.word	0x0800862d

080088e4 <_printf_common>:
 80088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	4616      	mov	r6, r2
 80088ea:	4699      	mov	r9, r3
 80088ec:	688a      	ldr	r2, [r1, #8]
 80088ee:	690b      	ldr	r3, [r1, #16]
 80088f0:	4607      	mov	r7, r0
 80088f2:	4293      	cmp	r3, r2
 80088f4:	bfb8      	it	lt
 80088f6:	4613      	movlt	r3, r2
 80088f8:	6033      	str	r3, [r6, #0]
 80088fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088fe:	460c      	mov	r4, r1
 8008900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008904:	b10a      	cbz	r2, 800890a <_printf_common+0x26>
 8008906:	3301      	adds	r3, #1
 8008908:	6033      	str	r3, [r6, #0]
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	0699      	lsls	r1, r3, #26
 800890e:	bf42      	ittt	mi
 8008910:	6833      	ldrmi	r3, [r6, #0]
 8008912:	3302      	addmi	r3, #2
 8008914:	6033      	strmi	r3, [r6, #0]
 8008916:	6825      	ldr	r5, [r4, #0]
 8008918:	f015 0506 	ands.w	r5, r5, #6
 800891c:	d106      	bne.n	800892c <_printf_common+0x48>
 800891e:	f104 0a19 	add.w	sl, r4, #25
 8008922:	68e3      	ldr	r3, [r4, #12]
 8008924:	6832      	ldr	r2, [r6, #0]
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	42ab      	cmp	r3, r5
 800892a:	dc28      	bgt.n	800897e <_printf_common+0x9a>
 800892c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008930:	1e13      	subs	r3, r2, #0
 8008932:	6822      	ldr	r2, [r4, #0]
 8008934:	bf18      	it	ne
 8008936:	2301      	movne	r3, #1
 8008938:	0692      	lsls	r2, r2, #26
 800893a:	d42d      	bmi.n	8008998 <_printf_common+0xb4>
 800893c:	4649      	mov	r1, r9
 800893e:	4638      	mov	r0, r7
 8008940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008944:	47c0      	blx	r8
 8008946:	3001      	adds	r0, #1
 8008948:	d020      	beq.n	800898c <_printf_common+0xa8>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	68e5      	ldr	r5, [r4, #12]
 800894e:	f003 0306 	and.w	r3, r3, #6
 8008952:	2b04      	cmp	r3, #4
 8008954:	bf18      	it	ne
 8008956:	2500      	movne	r5, #0
 8008958:	6832      	ldr	r2, [r6, #0]
 800895a:	f04f 0600 	mov.w	r6, #0
 800895e:	68a3      	ldr	r3, [r4, #8]
 8008960:	bf08      	it	eq
 8008962:	1aad      	subeq	r5, r5, r2
 8008964:	6922      	ldr	r2, [r4, #16]
 8008966:	bf08      	it	eq
 8008968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800896c:	4293      	cmp	r3, r2
 800896e:	bfc4      	itt	gt
 8008970:	1a9b      	subgt	r3, r3, r2
 8008972:	18ed      	addgt	r5, r5, r3
 8008974:	341a      	adds	r4, #26
 8008976:	42b5      	cmp	r5, r6
 8008978:	d11a      	bne.n	80089b0 <_printf_common+0xcc>
 800897a:	2000      	movs	r0, #0
 800897c:	e008      	b.n	8008990 <_printf_common+0xac>
 800897e:	2301      	movs	r3, #1
 8008980:	4652      	mov	r2, sl
 8008982:	4649      	mov	r1, r9
 8008984:	4638      	mov	r0, r7
 8008986:	47c0      	blx	r8
 8008988:	3001      	adds	r0, #1
 800898a:	d103      	bne.n	8008994 <_printf_common+0xb0>
 800898c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008994:	3501      	adds	r5, #1
 8008996:	e7c4      	b.n	8008922 <_printf_common+0x3e>
 8008998:	2030      	movs	r0, #48	; 0x30
 800899a:	18e1      	adds	r1, r4, r3
 800899c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089a0:	1c5a      	adds	r2, r3, #1
 80089a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089a6:	4422      	add	r2, r4
 80089a8:	3302      	adds	r3, #2
 80089aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089ae:	e7c5      	b.n	800893c <_printf_common+0x58>
 80089b0:	2301      	movs	r3, #1
 80089b2:	4622      	mov	r2, r4
 80089b4:	4649      	mov	r1, r9
 80089b6:	4638      	mov	r0, r7
 80089b8:	47c0      	blx	r8
 80089ba:	3001      	adds	r0, #1
 80089bc:	d0e6      	beq.n	800898c <_printf_common+0xa8>
 80089be:	3601      	adds	r6, #1
 80089c0:	e7d9      	b.n	8008976 <_printf_common+0x92>
	...

080089c4 <_printf_i>:
 80089c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089c8:	7e0f      	ldrb	r7, [r1, #24]
 80089ca:	4691      	mov	r9, r2
 80089cc:	2f78      	cmp	r7, #120	; 0x78
 80089ce:	4680      	mov	r8, r0
 80089d0:	460c      	mov	r4, r1
 80089d2:	469a      	mov	sl, r3
 80089d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80089da:	d807      	bhi.n	80089ec <_printf_i+0x28>
 80089dc:	2f62      	cmp	r7, #98	; 0x62
 80089de:	d80a      	bhi.n	80089f6 <_printf_i+0x32>
 80089e0:	2f00      	cmp	r7, #0
 80089e2:	f000 80d9 	beq.w	8008b98 <_printf_i+0x1d4>
 80089e6:	2f58      	cmp	r7, #88	; 0x58
 80089e8:	f000 80a4 	beq.w	8008b34 <_printf_i+0x170>
 80089ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089f4:	e03a      	b.n	8008a6c <_printf_i+0xa8>
 80089f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089fa:	2b15      	cmp	r3, #21
 80089fc:	d8f6      	bhi.n	80089ec <_printf_i+0x28>
 80089fe:	a101      	add	r1, pc, #4	; (adr r1, 8008a04 <_printf_i+0x40>)
 8008a00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a04:	08008a5d 	.word	0x08008a5d
 8008a08:	08008a71 	.word	0x08008a71
 8008a0c:	080089ed 	.word	0x080089ed
 8008a10:	080089ed 	.word	0x080089ed
 8008a14:	080089ed 	.word	0x080089ed
 8008a18:	080089ed 	.word	0x080089ed
 8008a1c:	08008a71 	.word	0x08008a71
 8008a20:	080089ed 	.word	0x080089ed
 8008a24:	080089ed 	.word	0x080089ed
 8008a28:	080089ed 	.word	0x080089ed
 8008a2c:	080089ed 	.word	0x080089ed
 8008a30:	08008b7f 	.word	0x08008b7f
 8008a34:	08008aa1 	.word	0x08008aa1
 8008a38:	08008b61 	.word	0x08008b61
 8008a3c:	080089ed 	.word	0x080089ed
 8008a40:	080089ed 	.word	0x080089ed
 8008a44:	08008ba1 	.word	0x08008ba1
 8008a48:	080089ed 	.word	0x080089ed
 8008a4c:	08008aa1 	.word	0x08008aa1
 8008a50:	080089ed 	.word	0x080089ed
 8008a54:	080089ed 	.word	0x080089ed
 8008a58:	08008b69 	.word	0x08008b69
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	1d1a      	adds	r2, r3, #4
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	602a      	str	r2, [r5, #0]
 8008a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e0a4      	b.n	8008bba <_printf_i+0x1f6>
 8008a70:	6820      	ldr	r0, [r4, #0]
 8008a72:	6829      	ldr	r1, [r5, #0]
 8008a74:	0606      	lsls	r6, r0, #24
 8008a76:	f101 0304 	add.w	r3, r1, #4
 8008a7a:	d50a      	bpl.n	8008a92 <_printf_i+0xce>
 8008a7c:	680e      	ldr	r6, [r1, #0]
 8008a7e:	602b      	str	r3, [r5, #0]
 8008a80:	2e00      	cmp	r6, #0
 8008a82:	da03      	bge.n	8008a8c <_printf_i+0xc8>
 8008a84:	232d      	movs	r3, #45	; 0x2d
 8008a86:	4276      	negs	r6, r6
 8008a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a8c:	230a      	movs	r3, #10
 8008a8e:	485e      	ldr	r0, [pc, #376]	; (8008c08 <_printf_i+0x244>)
 8008a90:	e019      	b.n	8008ac6 <_printf_i+0x102>
 8008a92:	680e      	ldr	r6, [r1, #0]
 8008a94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a98:	602b      	str	r3, [r5, #0]
 8008a9a:	bf18      	it	ne
 8008a9c:	b236      	sxthne	r6, r6
 8008a9e:	e7ef      	b.n	8008a80 <_printf_i+0xbc>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	6820      	ldr	r0, [r4, #0]
 8008aa4:	1d19      	adds	r1, r3, #4
 8008aa6:	6029      	str	r1, [r5, #0]
 8008aa8:	0601      	lsls	r1, r0, #24
 8008aaa:	d501      	bpl.n	8008ab0 <_printf_i+0xec>
 8008aac:	681e      	ldr	r6, [r3, #0]
 8008aae:	e002      	b.n	8008ab6 <_printf_i+0xf2>
 8008ab0:	0646      	lsls	r6, r0, #25
 8008ab2:	d5fb      	bpl.n	8008aac <_printf_i+0xe8>
 8008ab4:	881e      	ldrh	r6, [r3, #0]
 8008ab6:	2f6f      	cmp	r7, #111	; 0x6f
 8008ab8:	bf0c      	ite	eq
 8008aba:	2308      	moveq	r3, #8
 8008abc:	230a      	movne	r3, #10
 8008abe:	4852      	ldr	r0, [pc, #328]	; (8008c08 <_printf_i+0x244>)
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ac6:	6865      	ldr	r5, [r4, #4]
 8008ac8:	2d00      	cmp	r5, #0
 8008aca:	bfa8      	it	ge
 8008acc:	6821      	ldrge	r1, [r4, #0]
 8008ace:	60a5      	str	r5, [r4, #8]
 8008ad0:	bfa4      	itt	ge
 8008ad2:	f021 0104 	bicge.w	r1, r1, #4
 8008ad6:	6021      	strge	r1, [r4, #0]
 8008ad8:	b90e      	cbnz	r6, 8008ade <_printf_i+0x11a>
 8008ada:	2d00      	cmp	r5, #0
 8008adc:	d04d      	beq.n	8008b7a <_printf_i+0x1b6>
 8008ade:	4615      	mov	r5, r2
 8008ae0:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ae4:	fb03 6711 	mls	r7, r3, r1, r6
 8008ae8:	5dc7      	ldrb	r7, [r0, r7]
 8008aea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008aee:	4637      	mov	r7, r6
 8008af0:	42bb      	cmp	r3, r7
 8008af2:	460e      	mov	r6, r1
 8008af4:	d9f4      	bls.n	8008ae0 <_printf_i+0x11c>
 8008af6:	2b08      	cmp	r3, #8
 8008af8:	d10b      	bne.n	8008b12 <_printf_i+0x14e>
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	07de      	lsls	r6, r3, #31
 8008afe:	d508      	bpl.n	8008b12 <_printf_i+0x14e>
 8008b00:	6923      	ldr	r3, [r4, #16]
 8008b02:	6861      	ldr	r1, [r4, #4]
 8008b04:	4299      	cmp	r1, r3
 8008b06:	bfde      	ittt	le
 8008b08:	2330      	movle	r3, #48	; 0x30
 8008b0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b0e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008b12:	1b52      	subs	r2, r2, r5
 8008b14:	6122      	str	r2, [r4, #16]
 8008b16:	464b      	mov	r3, r9
 8008b18:	4621      	mov	r1, r4
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	f8cd a000 	str.w	sl, [sp]
 8008b20:	aa03      	add	r2, sp, #12
 8008b22:	f7ff fedf 	bl	80088e4 <_printf_common>
 8008b26:	3001      	adds	r0, #1
 8008b28:	d14c      	bne.n	8008bc4 <_printf_i+0x200>
 8008b2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b2e:	b004      	add	sp, #16
 8008b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b34:	4834      	ldr	r0, [pc, #208]	; (8008c08 <_printf_i+0x244>)
 8008b36:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008b3a:	6829      	ldr	r1, [r5, #0]
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b42:	6029      	str	r1, [r5, #0]
 8008b44:	061d      	lsls	r5, r3, #24
 8008b46:	d514      	bpl.n	8008b72 <_printf_i+0x1ae>
 8008b48:	07df      	lsls	r7, r3, #31
 8008b4a:	bf44      	itt	mi
 8008b4c:	f043 0320 	orrmi.w	r3, r3, #32
 8008b50:	6023      	strmi	r3, [r4, #0]
 8008b52:	b91e      	cbnz	r6, 8008b5c <_printf_i+0x198>
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	f023 0320 	bic.w	r3, r3, #32
 8008b5a:	6023      	str	r3, [r4, #0]
 8008b5c:	2310      	movs	r3, #16
 8008b5e:	e7af      	b.n	8008ac0 <_printf_i+0xfc>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	f043 0320 	orr.w	r3, r3, #32
 8008b66:	6023      	str	r3, [r4, #0]
 8008b68:	2378      	movs	r3, #120	; 0x78
 8008b6a:	4828      	ldr	r0, [pc, #160]	; (8008c0c <_printf_i+0x248>)
 8008b6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b70:	e7e3      	b.n	8008b3a <_printf_i+0x176>
 8008b72:	0659      	lsls	r1, r3, #25
 8008b74:	bf48      	it	mi
 8008b76:	b2b6      	uxthmi	r6, r6
 8008b78:	e7e6      	b.n	8008b48 <_printf_i+0x184>
 8008b7a:	4615      	mov	r5, r2
 8008b7c:	e7bb      	b.n	8008af6 <_printf_i+0x132>
 8008b7e:	682b      	ldr	r3, [r5, #0]
 8008b80:	6826      	ldr	r6, [r4, #0]
 8008b82:	1d18      	adds	r0, r3, #4
 8008b84:	6961      	ldr	r1, [r4, #20]
 8008b86:	6028      	str	r0, [r5, #0]
 8008b88:	0635      	lsls	r5, r6, #24
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	d501      	bpl.n	8008b92 <_printf_i+0x1ce>
 8008b8e:	6019      	str	r1, [r3, #0]
 8008b90:	e002      	b.n	8008b98 <_printf_i+0x1d4>
 8008b92:	0670      	lsls	r0, r6, #25
 8008b94:	d5fb      	bpl.n	8008b8e <_printf_i+0x1ca>
 8008b96:	8019      	strh	r1, [r3, #0]
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4615      	mov	r5, r2
 8008b9c:	6123      	str	r3, [r4, #16]
 8008b9e:	e7ba      	b.n	8008b16 <_printf_i+0x152>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	1d1a      	adds	r2, r3, #4
 8008ba6:	602a      	str	r2, [r5, #0]
 8008ba8:	681d      	ldr	r5, [r3, #0]
 8008baa:	6862      	ldr	r2, [r4, #4]
 8008bac:	4628      	mov	r0, r5
 8008bae:	f7ff fb93 	bl	80082d8 <memchr>
 8008bb2:	b108      	cbz	r0, 8008bb8 <_printf_i+0x1f4>
 8008bb4:	1b40      	subs	r0, r0, r5
 8008bb6:	6060      	str	r0, [r4, #4]
 8008bb8:	6863      	ldr	r3, [r4, #4]
 8008bba:	6123      	str	r3, [r4, #16]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bc2:	e7a8      	b.n	8008b16 <_printf_i+0x152>
 8008bc4:	462a      	mov	r2, r5
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	4640      	mov	r0, r8
 8008bca:	6923      	ldr	r3, [r4, #16]
 8008bcc:	47d0      	blx	sl
 8008bce:	3001      	adds	r0, #1
 8008bd0:	d0ab      	beq.n	8008b2a <_printf_i+0x166>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	079b      	lsls	r3, r3, #30
 8008bd6:	d413      	bmi.n	8008c00 <_printf_i+0x23c>
 8008bd8:	68e0      	ldr	r0, [r4, #12]
 8008bda:	9b03      	ldr	r3, [sp, #12]
 8008bdc:	4298      	cmp	r0, r3
 8008bde:	bfb8      	it	lt
 8008be0:	4618      	movlt	r0, r3
 8008be2:	e7a4      	b.n	8008b2e <_printf_i+0x16a>
 8008be4:	2301      	movs	r3, #1
 8008be6:	4632      	mov	r2, r6
 8008be8:	4649      	mov	r1, r9
 8008bea:	4640      	mov	r0, r8
 8008bec:	47d0      	blx	sl
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d09b      	beq.n	8008b2a <_printf_i+0x166>
 8008bf2:	3501      	adds	r5, #1
 8008bf4:	68e3      	ldr	r3, [r4, #12]
 8008bf6:	9903      	ldr	r1, [sp, #12]
 8008bf8:	1a5b      	subs	r3, r3, r1
 8008bfa:	42ab      	cmp	r3, r5
 8008bfc:	dcf2      	bgt.n	8008be4 <_printf_i+0x220>
 8008bfe:	e7eb      	b.n	8008bd8 <_printf_i+0x214>
 8008c00:	2500      	movs	r5, #0
 8008c02:	f104 0619 	add.w	r6, r4, #25
 8008c06:	e7f5      	b.n	8008bf4 <_printf_i+0x230>
 8008c08:	08008f73 	.word	0x08008f73
 8008c0c:	08008f84 	.word	0x08008f84

08008c10 <__retarget_lock_acquire_recursive>:
 8008c10:	4770      	bx	lr

08008c12 <__retarget_lock_release_recursive>:
 8008c12:	4770      	bx	lr

08008c14 <_realloc_r>:
 8008c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c18:	4680      	mov	r8, r0
 8008c1a:	4614      	mov	r4, r2
 8008c1c:	460e      	mov	r6, r1
 8008c1e:	b921      	cbnz	r1, 8008c2a <_realloc_r+0x16>
 8008c20:	4611      	mov	r1, r2
 8008c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c26:	f7ff bc0d 	b.w	8008444 <_malloc_r>
 8008c2a:	b92a      	cbnz	r2, 8008c38 <_realloc_r+0x24>
 8008c2c:	f7ff fba2 	bl	8008374 <_free_r>
 8008c30:	4625      	mov	r5, r4
 8008c32:	4628      	mov	r0, r5
 8008c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c38:	f000 f81b 	bl	8008c72 <_malloc_usable_size_r>
 8008c3c:	4284      	cmp	r4, r0
 8008c3e:	4607      	mov	r7, r0
 8008c40:	d802      	bhi.n	8008c48 <_realloc_r+0x34>
 8008c42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c46:	d812      	bhi.n	8008c6e <_realloc_r+0x5a>
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4640      	mov	r0, r8
 8008c4c:	f7ff fbfa 	bl	8008444 <_malloc_r>
 8008c50:	4605      	mov	r5, r0
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d0ed      	beq.n	8008c32 <_realloc_r+0x1e>
 8008c56:	42bc      	cmp	r4, r7
 8008c58:	4622      	mov	r2, r4
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	bf28      	it	cs
 8008c5e:	463a      	movcs	r2, r7
 8008c60:	f7ff fb58 	bl	8008314 <memcpy>
 8008c64:	4631      	mov	r1, r6
 8008c66:	4640      	mov	r0, r8
 8008c68:	f7ff fb84 	bl	8008374 <_free_r>
 8008c6c:	e7e1      	b.n	8008c32 <_realloc_r+0x1e>
 8008c6e:	4635      	mov	r5, r6
 8008c70:	e7df      	b.n	8008c32 <_realloc_r+0x1e>

08008c72 <_malloc_usable_size_r>:
 8008c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c76:	1f18      	subs	r0, r3, #4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	bfbc      	itt	lt
 8008c7c:	580b      	ldrlt	r3, [r1, r0]
 8008c7e:	18c0      	addlt	r0, r0, r3
 8008c80:	4770      	bx	lr
	...

08008c84 <_init>:
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	bf00      	nop
 8008c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8a:	bc08      	pop	{r3}
 8008c8c:	469e      	mov	lr, r3
 8008c8e:	4770      	bx	lr

08008c90 <_fini>:
 8008c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c92:	bf00      	nop
 8008c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c96:	bc08      	pop	{r3}
 8008c98:	469e      	mov	lr, r3
 8008c9a:	4770      	bx	lr
