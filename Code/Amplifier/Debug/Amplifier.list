
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000982c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08009a1c  08009a1c  00019a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009abc  08009abc  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009abc  08009abc  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009abc  08009abc  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009abc  08009abc  00019abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ac0  08009ac0  00019ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08009ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022ec  20000180  08009c44  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000246c  08009c44  0002246c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019885  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000410b  00000000  00000000  00039a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  0003db40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  0003f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e8ac  00000000  00000000  00040a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be06  00000000  00000000  0005f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7607  00000000  00000000  0007b0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122701  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006514  00000000  00000000  00122754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000180 	.word	0x20000180
 800020c:	00000000 	.word	0x00000000
 8000210:	08009a04 	.word	0x08009a04

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000184 	.word	0x20000184
 800022c:	08009a04 	.word	0x08009a04

08000230 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	4a06      	ldr	r2, [pc, #24]	; (8000258 <vApplicationGetIdleTaskMemory+0x28>)
 8000240:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	4a05      	ldr	r2, [pc, #20]	; (800025c <vApplicationGetIdleTaskMemory+0x2c>)
 8000246:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2280      	movs	r2, #128	; 0x80
 800024c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	2000019c 	.word	0x2000019c
 800025c:	200001f0 	.word	0x200001f0

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b5b0      	push	{r4, r5, r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fc93 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f825 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 f9bd 	bl	80005ec <MX_GPIO_Init>
  MX_SPI1_Init();
 8000272:	f000 f87d 	bl	8000370 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000276:	f000 f8b1 	bl	80003dc <MX_SPI2_Init>
  MX_TIM3_Init();
 800027a:	f000 f8e5 	bl	8000448 <MX_TIM3_Init>
  MX_TIM4_Init();
 800027e:	f000 f937 	bl	80004f0 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000282:	f000 f989 	bl	8000598 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000286:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <main+0x50>)
 8000288:	1d3c      	adds	r4, r7, #4
 800028a:	461d      	mov	r5, r3
 800028c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000290:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000294:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f007 fd38 	bl	8007d12 <osThreadCreate>
 80002a2:	4603      	mov	r3, r0
 80002a4:	4a03      	ldr	r2, [pc, #12]	; (80002b4 <main+0x54>)
 80002a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002a8:	f007 fd2c 	bl	8007d04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ac:	e7fe      	b.n	80002ac <main+0x4c>
 80002ae:	bf00      	nop
 80002b0:	08009a28 	.word	0x08009a28
 80002b4:	20000574 	.word	0x20000574

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b096      	sub	sp, #88	; 0x58
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002c2:	2228      	movs	r2, #40	; 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f009 fb94 	bl	80099f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	f107 031c 	add.w	r3, r7, #28
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]
 80002ea:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ec:	2301      	movs	r3, #1
 80002ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000306:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000308:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800030c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000312:	4618      	mov	r0, r3
 8000314:	f002 fc1c 	bl	8002b50 <HAL_RCC_OscConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800031e:	f000 fa3b 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	230f      	movs	r3, #15
 8000324:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	2302      	movs	r3, #2
 8000328:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000332:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000338:	f107 031c 	add.w	r3, r7, #28
 800033c:	2102      	movs	r1, #2
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fe88 	bl	8003054 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800034a:	f000 fa25 	bl	8000798 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800034e:	2310      	movs	r3, #16
 8000350:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000352:	2300      	movs	r3, #0
 8000354:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f003 f813 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000364:	f000 fa18 	bl	8000798 <Error_Handler>
  }
}
 8000368:	bf00      	nop
 800036a:	3758      	adds	r7, #88	; 0x58
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <MX_SPI1_Init+0x64>)
 8000376:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <MX_SPI1_Init+0x68>)
 8000378:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <MX_SPI1_Init+0x64>)
 800037c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000380:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_SPI1_Init+0x64>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_SPI1_Init+0x64>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_SPI1_Init+0x64>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_SPI1_Init+0x64>)
 8000396:	2200      	movs	r2, #0
 8000398:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <MX_SPI1_Init+0x64>)
 800039c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b4:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003bc:	220a      	movs	r2, #10
 80003be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003c2:	f003 f895 	bl	80034f0 <HAL_SPI_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003cc:	f000 f9e4 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200003f0 	.word	0x200003f0
 80003d8:	40013000 	.word	0x40013000

080003dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003e0:	4b17      	ldr	r3, [pc, #92]	; (8000440 <MX_SPI2_Init+0x64>)
 80003e2:	4a18      	ldr	r2, [pc, #96]	; (8000444 <MX_SPI2_Init+0x68>)
 80003e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003e6:	4b16      	ldr	r3, [pc, #88]	; (8000440 <MX_SPI2_Init+0x64>)
 80003e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003ee:	4b14      	ldr	r3, [pc, #80]	; (8000440 <MX_SPI2_Init+0x64>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <MX_SPI2_Init+0x64>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003fa:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_SPI2_Init+0x64>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_SPI2_Init+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_SPI2_Init+0x64>)
 8000408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800040c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_SPI2_Init+0x64>)
 8000410:	2200      	movs	r2, #0
 8000412:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000414:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <MX_SPI2_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_SPI2_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <MX_SPI2_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_SPI2_Init+0x64>)
 8000428:	220a      	movs	r2, #10
 800042a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <MX_SPI2_Init+0x64>)
 800042e:	f003 f85f 	bl	80034f0 <HAL_SPI_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000438:	f000 f9ae 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000448 	.word	0x20000448
 8000444:	40003800 	.word	0x40003800

08000448 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08c      	sub	sp, #48	; 0x30
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800044e:	f107 030c 	add.w	r3, r7, #12
 8000452:	2224      	movs	r2, #36	; 0x24
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f009 facc 	bl	80099f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000464:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <MX_TIM3_Init+0xa0>)
 8000466:	4a21      	ldr	r2, [pc, #132]	; (80004ec <MX_TIM3_Init+0xa4>)
 8000468:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800046a:	4b1f      	ldr	r3, [pc, #124]	; (80004e8 <MX_TIM3_Init+0xa0>)
 800046c:	2200      	movs	r2, #0
 800046e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000470:	4b1d      	ldr	r3, [pc, #116]	; (80004e8 <MX_TIM3_Init+0xa0>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000476:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <MX_TIM3_Init+0xa0>)
 8000478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800047c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <MX_TIM3_Init+0xa0>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_TIM3_Init+0xa0>)
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800048a:	2301      	movs	r3, #1
 800048c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800048e:	2300      	movs	r3, #0
 8000490:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000492:	2301      	movs	r3, #1
 8000494:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004a2:	2301      	movs	r3, #1
 80004a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	4619      	mov	r1, r3
 80004b4:	480c      	ldr	r0, [pc, #48]	; (80004e8 <MX_TIM3_Init+0xa0>)
 80004b6:	f003 f89f 	bl	80035f8 <HAL_TIM_Encoder_Init>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80004c0:	f000 f96a 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c4:	2300      	movs	r3, #0
 80004c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	4619      	mov	r1, r3
 80004d0:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_TIM3_Init+0xa0>)
 80004d2:	f003 f9ad 	bl	8003830 <HAL_TIMEx_MasterConfigSynchronization>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80004dc:	f000 f95c 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004e0:	bf00      	nop
 80004e2:	3730      	adds	r7, #48	; 0x30
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	200004a0 	.word	0x200004a0
 80004ec:	40000400 	.word	0x40000400

080004f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08c      	sub	sp, #48	; 0x30
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	2224      	movs	r2, #36	; 0x24
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f009 fa78 	bl	80099f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800050c:	4b20      	ldr	r3, [pc, #128]	; (8000590 <MX_TIM4_Init+0xa0>)
 800050e:	4a21      	ldr	r2, [pc, #132]	; (8000594 <MX_TIM4_Init+0xa4>)
 8000510:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000512:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <MX_TIM4_Init+0xa0>)
 8000514:	2200      	movs	r2, #0
 8000516:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000518:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <MX_TIM4_Init+0xa0>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <MX_TIM4_Init+0xa0>)
 8000520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000524:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_TIM4_Init+0xa0>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_TIM4_Init+0xa0>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000532:	2301      	movs	r3, #1
 8000534:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800053a:	2301      	movs	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800054a:	2301      	movs	r3, #1
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	4619      	mov	r1, r3
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <MX_TIM4_Init+0xa0>)
 800055e:	f003 f84b 	bl	80035f8 <HAL_TIM_Encoder_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000568:	f000 f916 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	4619      	mov	r1, r3
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_TIM4_Init+0xa0>)
 800057a:	f003 f959 	bl	8003830 <HAL_TIMEx_MasterConfigSynchronization>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000584:	f000 f908 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	3730      	adds	r7, #48	; 0x30
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200004e8 	.word	0x200004e8
 8000594:	40000800 	.word	0x40000800

08000598 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_USART3_UART_Init+0x4c>)
 800059e:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <MX_USART3_UART_Init+0x50>)
 80005a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <MX_USART3_UART_Init+0x4c>)
 80005a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_USART3_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_USART3_UART_Init+0x4c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <MX_USART3_UART_Init+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_USART3_UART_Init+0x4c>)
 80005be:	220c      	movs	r2, #12
 80005c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <MX_USART3_UART_Init+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_USART3_UART_Init+0x4c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_USART3_UART_Init+0x4c>)
 80005d0:	f003 f99a 	bl	8003908 <HAL_UART_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80005da:	f000 f8dd 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000530 	.word	0x20000530
 80005e8:	40004800 	.word	0x40004800

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0318 	add.w	r3, r7, #24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000600:	4b5a      	ldr	r3, [pc, #360]	; (800076c <MX_GPIO_Init+0x180>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a59      	ldr	r2, [pc, #356]	; (800076c <MX_GPIO_Init+0x180>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b57      	ldr	r3, [pc, #348]	; (800076c <MX_GPIO_Init+0x180>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0310 	and.w	r3, r3, #16
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b54      	ldr	r3, [pc, #336]	; (800076c <MX_GPIO_Init+0x180>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a53      	ldr	r2, [pc, #332]	; (800076c <MX_GPIO_Init+0x180>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b51      	ldr	r3, [pc, #324]	; (800076c <MX_GPIO_Init+0x180>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000630:	4b4e      	ldr	r3, [pc, #312]	; (800076c <MX_GPIO_Init+0x180>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a4d      	ldr	r2, [pc, #308]	; (800076c <MX_GPIO_Init+0x180>)
 8000636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b4b      	ldr	r3, [pc, #300]	; (800076c <MX_GPIO_Init+0x180>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	4b48      	ldr	r3, [pc, #288]	; (800076c <MX_GPIO_Init+0x180>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a47      	ldr	r2, [pc, #284]	; (800076c <MX_GPIO_Init+0x180>)
 800064e:	f043 0308 	orr.w	r3, r3, #8
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b45      	ldr	r3, [pc, #276]	; (800076c <MX_GPIO_Init+0x180>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0308 	and.w	r3, r3, #8
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000660:	4b42      	ldr	r3, [pc, #264]	; (800076c <MX_GPIO_Init+0x180>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a41      	ldr	r2, [pc, #260]	; (800076c <MX_GPIO_Init+0x180>)
 8000666:	f043 0320 	orr.w	r3, r3, #32
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b3f      	ldr	r3, [pc, #252]	; (800076c <MX_GPIO_Init+0x180>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0320 	and.w	r3, r3, #32
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2108      	movs	r1, #8
 800067c:	483c      	ldr	r0, [pc, #240]	; (8000770 <MX_GPIO_Init+0x184>)
 800067e:	f000 fd8b 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 8000682:	2200      	movs	r2, #0
 8000684:	211f      	movs	r1, #31
 8000686:	483b      	ldr	r0, [pc, #236]	; (8000774 <MX_GPIO_Init+0x188>)
 8000688:	f000 fd86 	bl	8001198 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 8000692:	4839      	ldr	r0, [pc, #228]	; (8000778 <MX_GPIO_Init+0x18c>)
 8000694:	f000 fd80 	bl	8001198 <HAL_GPIO_WritePin>
                          |LED_POWER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_5CH_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800069e:	4837      	ldr	r0, [pc, #220]	; (800077c <MX_GPIO_Init+0x190>)
 80006a0:	f000 fd7a 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_MUTE_Pin */
  GPIO_InitStruct.Pin = LED_MUTE_Pin;
 80006a4:	2308      	movs	r3, #8
 80006a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2302      	movs	r3, #2
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_MUTE_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 0318 	add.w	r3, r7, #24
 80006b8:	4619      	mov	r1, r3
 80006ba:	482d      	ldr	r0, [pc, #180]	; (8000770 <MX_GPIO_Init+0x184>)
 80006bc:	f000 fbd8 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PCM_Pin LED_DOLBY_Pin PA2 LED_MUTEA3_Pin
                           PA4 */
  GPIO_InitStruct.Pin = LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 80006c0:	231f      	movs	r3, #31
 80006c2:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2302      	movs	r3, #2
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 0318 	add.w	r3, r7, #24
 80006d4:	4619      	mov	r1, r3
 80006d6:	4827      	ldr	r0, [pc, #156]	; (8000774 <MX_GPIO_Init+0x188>)
 80006d8:	f000 fbca 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SETTING_BATTERY_Pin */
  GPIO_InitStruct.Pin = SETTING_BATTERY_Pin;
 80006dc:	2310      	movs	r3, #16
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SETTING_BATTERY_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	4619      	mov	r1, r3
 80006ee:	4820      	ldr	r0, [pc, #128]	; (8000770 <MX_GPIO_Init+0x184>)
 80006f0:	f000 fbbe 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_1_Pin LED_INPUT_2_Pin LED_INPUT_3_Pin LED_INPUT_4_Pin
                           LED_POWER_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 80006f4:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 80006f8:	61bb      	str	r3, [r7, #24]
                          |LED_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2302      	movs	r3, #2
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000706:	f107 0318 	add.w	r3, r7, #24
 800070a:	4619      	mov	r1, r3
 800070c:	481a      	ldr	r0, [pc, #104]	; (8000778 <MX_GPIO_Init+0x18c>)
 800070e:	f000 fbaf 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_POWER_Pin */
  GPIO_InitStruct.Pin = BUTTON_POWER_Pin;
 8000712:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_POWER_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 0318 	add.w	r3, r7, #24
 8000724:	4619      	mov	r1, r3
 8000726:	4814      	ldr	r0, [pc, #80]	; (8000778 <MX_GPIO_Init+0x18c>)
 8000728:	f000 fba2 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_5CH_Pin LED_RUN_Pin */
  GPIO_InitStruct.Pin = LED_5CH_Pin|LED_RUN_Pin;
 800072c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2302      	movs	r3, #2
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0318 	add.w	r3, r7, #24
 8000742:	4619      	mov	r1, r3
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_GPIO_Init+0x190>)
 8000746:	f000 fb93 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 800074a:	2308      	movs	r3, #8
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	4619      	mov	r1, r3
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <MX_GPIO_Init+0x194>)
 800075e:	f000 fb87 	bl	8000e70 <HAL_GPIO_Init>

}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	; 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	40011000 	.word	0x40011000
 8000774:	40010800 	.word	0x40010800
 8000778:	40011800 	.word	0x40011800
 800077c:	40010c00 	.word	0x40010c00
 8000780:	40011400 	.word	0x40011400

08000784 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800078c:	f008 fc98 	bl	80090c0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f007 fb0a 	bl	8007daa <osDelay>
 8000796:	e7fb      	b.n	8000790 <StartDefaultTask+0xc>

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_MspInit+0x4c>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <HAL_MspInit+0x4c>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <HAL_MspInit+0x4c>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	210f      	movs	r1, #15
 80007de:	f06f 0001 	mvn.w	r0, #1
 80007e2:	f000 fb0e 	bl	8000e02 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0318 	add.w	r3, r7, #24
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a37      	ldr	r2, [pc, #220]	; (80008ec <HAL_SPI_MspInit+0xf8>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d130      	bne.n	8000876 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000814:	4b36      	ldr	r3, [pc, #216]	; (80008f0 <HAL_SPI_MspInit+0xfc>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a35      	ldr	r2, [pc, #212]	; (80008f0 <HAL_SPI_MspInit+0xfc>)
 800081a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <HAL_SPI_MspInit+0xfc>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <HAL_SPI_MspInit+0xfc>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a2f      	ldr	r2, [pc, #188]	; (80008f0 <HAL_SPI_MspInit+0xfc>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <HAL_SPI_MspInit+0xfc>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000844:	23a0      	movs	r3, #160	; 0xa0
 8000846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 0318 	add.w	r3, r7, #24
 8000854:	4619      	mov	r1, r3
 8000856:	4827      	ldr	r0, [pc, #156]	; (80008f4 <HAL_SPI_MspInit+0x100>)
 8000858:	f000 fb0a 	bl	8000e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800085c:	2340      	movs	r3, #64	; 0x40
 800085e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	4619      	mov	r1, r3
 800086e:	4821      	ldr	r0, [pc, #132]	; (80008f4 <HAL_SPI_MspInit+0x100>)
 8000870:	f000 fafe 	bl	8000e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000874:	e036      	b.n	80008e4 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a1f      	ldr	r2, [pc, #124]	; (80008f8 <HAL_SPI_MspInit+0x104>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d131      	bne.n	80008e4 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <HAL_SPI_MspInit+0xfc>)
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	4a1a      	ldr	r2, [pc, #104]	; (80008f0 <HAL_SPI_MspInit+0xfc>)
 8000886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088a:	61d3      	str	r3, [r2, #28]
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <HAL_SPI_MspInit+0xfc>)
 800088e:	69db      	ldr	r3, [r3, #28]
 8000890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_SPI_MspInit+0xfc>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <HAL_SPI_MspInit+0xfc>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_SPI_MspInit+0xfc>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0308 	and.w	r3, r3, #8
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80008b0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 0318 	add.w	r3, r7, #24
 80008c2:	4619      	mov	r1, r3
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <HAL_SPI_MspInit+0x108>)
 80008c6:	f000 fad3 	bl	8000e70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	4619      	mov	r1, r3
 80008de:	4807      	ldr	r0, [pc, #28]	; (80008fc <HAL_SPI_MspInit+0x108>)
 80008e0:	f000 fac6 	bl	8000e70 <HAL_GPIO_Init>
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010800 	.word	0x40010800
 80008f8:	40003800 	.word	0x40003800
 80008fc:	40010c00 	.word	0x40010c00

08000900 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08c      	sub	sp, #48	; 0x30
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0318 	add.w	r3, r7, #24
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a3b      	ldr	r2, [pc, #236]	; (8000a08 <HAL_TIM_Encoder_MspInit+0x108>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d136      	bne.n	800098e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000920:	4b3a      	ldr	r3, [pc, #232]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x10c>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	4a39      	ldr	r2, [pc, #228]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x10c>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	61d3      	str	r3, [r2, #28]
 800092c:	4b37      	ldr	r3, [pc, #220]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x10c>)
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	f003 0302 	and.w	r3, r3, #2
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000938:	4b34      	ldr	r3, [pc, #208]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x10c>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a33      	ldr	r2, [pc, #204]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x10c>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x10c>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0310 	and.w	r3, r3, #16
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000950:	23c0      	movs	r3, #192	; 0xc0
 8000952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 0318 	add.w	r3, r7, #24
 8000960:	4619      	mov	r1, r3
 8000962:	482b      	ldr	r0, [pc, #172]	; (8000a10 <HAL_TIM_Encoder_MspInit+0x110>)
 8000964:	f000 fa84 	bl	8000e70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8000968:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <HAL_TIM_Encoder_MspInit+0x114>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
 800096e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000970:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
 8000976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000978:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
 800097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000980:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
 8000986:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <HAL_TIM_Encoder_MspInit+0x114>)
 8000988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800098c:	e037      	b.n	80009fe <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <HAL_TIM_Encoder_MspInit+0x118>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d132      	bne.n	80009fe <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x10c>)
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x10c>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	61d3      	str	r3, [r2, #28]
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x10c>)
 80009a6:	69db      	ldr	r3, [r3, #28]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x10c>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x10c>)
 80009b6:	f043 0320 	orr.w	r3, r3, #32
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <HAL_TIM_Encoder_MspInit+0x10c>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0320 	and.w	r3, r3, #32
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80009c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	4619      	mov	r1, r3
 80009dc:	480f      	ldr	r0, [pc, #60]	; (8000a1c <HAL_TIM_Encoder_MspInit+0x11c>)
 80009de:	f000 fa47 	bl	8000e70 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_TIM_Encoder_MspInit+0x114>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <HAL_TIM_Encoder_MspInit+0x114>)
 80009fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fc:	6053      	str	r3, [r2, #4]
}
 80009fe:	bf00      	nop
 8000a00:	3730      	adds	r7, #48	; 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40000400 	.word	0x40000400
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40011000 	.word	0x40011000
 8000a14:	40010000 	.word	0x40010000
 8000a18:	40000800 	.word	0x40000800
 8000a1c:	40011400 	.word	0x40011400

08000a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a25      	ldr	r2, [pc, #148]	; (8000ad0 <HAL_UART_MspInit+0xb0>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d143      	bne.n	8000ac8 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <HAL_UART_MspInit+0xb4>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	4a23      	ldr	r2, [pc, #140]	; (8000ad4 <HAL_UART_MspInit+0xb4>)
 8000a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a4a:	61d3      	str	r3, [r2, #28]
 8000a4c:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <HAL_UART_MspInit+0xb4>)
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <HAL_UART_MspInit+0xb4>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <HAL_UART_MspInit+0xb4>)
 8000a5e:	f043 0320 	orr.w	r3, r3, #32
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <HAL_UART_MspInit+0xb4>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0320 	and.w	r3, r3, #32
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4814      	ldr	r0, [pc, #80]	; (8000ad8 <HAL_UART_MspInit+0xb8>)
 8000a86:	f000 f9f3 	bl	8000e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <HAL_UART_MspInit+0xb8>)
 8000aa0:	f000 f9e6 	bl	8000e70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_ENABLE();
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_UART_MspInit+0xbc>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac2:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_UART_MspInit+0xbc>)
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40004800 	.word	0x40004800
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40011400 	.word	0x40011400
 8000adc:	40010000 	.word	0x40010000

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr

08000b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0e:	f000 f885 	bl	8000c1c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b12:	f007 fec7 	bl	80088a4 <xTaskGetSchedulerState>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d001      	beq.n	8000b20 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b1c:	f008 f8b4 	bl	8008c88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b2a:	f000 fc7e 	bl	800142a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20001f60 	.word	0x20001f60

08000b38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	; (8000b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	; (8000b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b6a:	f7ff ffe5 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f008 ff1d 	bl	80099ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b72:	f7ff fb75 	bl	8000260 <main>
  bx lr
 8000b76:	4770      	bx	lr
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000b80:	08009ac4 	.word	0x08009ac4
  ldr r2, =_sbss
 8000b84:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000b88:	2000246c 	.word	0x2000246c

08000b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC1_2_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_Init+0x28>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_Init+0x28>)
 8000b9a:	f043 0310 	orr.w	r3, r3, #16
 8000b9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 f923 	bl	8000dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba6:	200f      	movs	r0, #15
 8000ba8:	f000 f808 	bl	8000bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bac:	f7ff fdfa 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40022000 	.word	0x40022000

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x54>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x58>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f93b 	bl	8000e56 <HAL_SYSTICK_Config>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00e      	b.n	8000c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d80a      	bhi.n	8000c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf8:	f000 f903 	bl	8000e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_InitTick+0x5c>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	e000      	b.n	8000c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000000 	.word	0x20000000
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000004 	.word	0x20000004

08000c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_IncTick+0x1c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_IncTick+0x20>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <HAL_IncTick+0x20>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000578 	.word	0x20000578

08000c40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b02      	ldr	r3, [pc, #8]	; (8000c50 <HAL_GetTick+0x10>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20000578 	.word	0x20000578

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db0b      	blt.n	8000ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	4906      	ldr	r1, [pc, #24]	; (8000cec <__NVIC_EnableIRQ+0x34>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	2001      	movs	r0, #1
 8000cda:	fa00 f202 	lsl.w	r2, r0, r2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db8:	d301      	bcc.n	8000dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00f      	b.n	8000dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <SysTick_Config+0x40>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc6:	210f      	movs	r1, #15
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dcc:	f7ff ff90 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SysTick_Config+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <SysTick_Config+0x40>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	e000e010 	.word	0xe000e010

08000dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ff2d 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e14:	f7ff ff42 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	68b9      	ldr	r1, [r7, #8]
 8000e1e:	6978      	ldr	r0, [r7, #20]
 8000e20:	f7ff ff90 	bl	8000d44 <NVIC_EncodePriority>
 8000e24:	4602      	mov	r2, r0
 8000e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff5f 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff35 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ffa2 	bl	8000da8 <SysTick_Config>
 8000e64:	4603      	mov	r3, r0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b08b      	sub	sp, #44	; 0x2c
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e82:	e179      	b.n	8001178 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e84:	2201      	movs	r2, #1
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 8168 	bne.w	8001172 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	4a96      	ldr	r2, [pc, #600]	; (8001100 <HAL_GPIO_Init+0x290>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d05e      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000eac:	4a94      	ldr	r2, [pc, #592]	; (8001100 <HAL_GPIO_Init+0x290>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d875      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eb2:	4a94      	ldr	r2, [pc, #592]	; (8001104 <HAL_GPIO_Init+0x294>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d058      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000eb8:	4a92      	ldr	r2, [pc, #584]	; (8001104 <HAL_GPIO_Init+0x294>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d86f      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ebe:	4a92      	ldr	r2, [pc, #584]	; (8001108 <HAL_GPIO_Init+0x298>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d052      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000ec4:	4a90      	ldr	r2, [pc, #576]	; (8001108 <HAL_GPIO_Init+0x298>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d869      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eca:	4a90      	ldr	r2, [pc, #576]	; (800110c <HAL_GPIO_Init+0x29c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d04c      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000ed0:	4a8e      	ldr	r2, [pc, #568]	; (800110c <HAL_GPIO_Init+0x29c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d863      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ed6:	4a8e      	ldr	r2, [pc, #568]	; (8001110 <HAL_GPIO_Init+0x2a0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d046      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000edc:	4a8c      	ldr	r2, [pc, #560]	; (8001110 <HAL_GPIO_Init+0x2a0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d85d      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ee2:	2b12      	cmp	r3, #18
 8000ee4:	d82a      	bhi.n	8000f3c <HAL_GPIO_Init+0xcc>
 8000ee6:	2b12      	cmp	r3, #18
 8000ee8:	d859      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eea:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <HAL_GPIO_Init+0x80>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f6b 	.word	0x08000f6b
 8000ef4:	08000f45 	.word	0x08000f45
 8000ef8:	08000f57 	.word	0x08000f57
 8000efc:	08000f99 	.word	0x08000f99
 8000f00:	08000f9f 	.word	0x08000f9f
 8000f04:	08000f9f 	.word	0x08000f9f
 8000f08:	08000f9f 	.word	0x08000f9f
 8000f0c:	08000f9f 	.word	0x08000f9f
 8000f10:	08000f9f 	.word	0x08000f9f
 8000f14:	08000f9f 	.word	0x08000f9f
 8000f18:	08000f9f 	.word	0x08000f9f
 8000f1c:	08000f9f 	.word	0x08000f9f
 8000f20:	08000f9f 	.word	0x08000f9f
 8000f24:	08000f9f 	.word	0x08000f9f
 8000f28:	08000f9f 	.word	0x08000f9f
 8000f2c:	08000f9f 	.word	0x08000f9f
 8000f30:	08000f9f 	.word	0x08000f9f
 8000f34:	08000f4d 	.word	0x08000f4d
 8000f38:	08000f61 	.word	0x08000f61
 8000f3c:	4a75      	ldr	r2, [pc, #468]	; (8001114 <HAL_GPIO_Init+0x2a4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f42:	e02c      	b.n	8000f9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	623b      	str	r3, [r7, #32]
          break;
 8000f4a:	e029      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	3304      	adds	r3, #4
 8000f52:	623b      	str	r3, [r7, #32]
          break;
 8000f54:	e024      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	3308      	adds	r3, #8
 8000f5c:	623b      	str	r3, [r7, #32]
          break;
 8000f5e:	e01f      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	330c      	adds	r3, #12
 8000f66:	623b      	str	r3, [r7, #32]
          break;
 8000f68:	e01a      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d102      	bne.n	8000f78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f72:	2304      	movs	r3, #4
 8000f74:	623b      	str	r3, [r7, #32]
          break;
 8000f76:	e013      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d105      	bne.n	8000f8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f80:	2308      	movs	r3, #8
 8000f82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	611a      	str	r2, [r3, #16]
          break;
 8000f8a:	e009      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69fa      	ldr	r2, [r7, #28]
 8000f94:	615a      	str	r2, [r3, #20]
          break;
 8000f96:	e003      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
          break;
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          break;
 8000f9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	2bff      	cmp	r3, #255	; 0xff
 8000fa4:	d801      	bhi.n	8000faa <HAL_GPIO_Init+0x13a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	e001      	b.n	8000fae <HAL_GPIO_Init+0x13e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3304      	adds	r3, #4
 8000fae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2bff      	cmp	r3, #255	; 0xff
 8000fb4:	d802      	bhi.n	8000fbc <HAL_GPIO_Init+0x14c>
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	e002      	b.n	8000fc2 <HAL_GPIO_Init+0x152>
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	3b08      	subs	r3, #8
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	210f      	movs	r1, #15
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	6a39      	ldr	r1, [r7, #32]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 80c1 	beq.w	8001172 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff0:	4b49      	ldr	r3, [pc, #292]	; (8001118 <HAL_GPIO_Init+0x2a8>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a48      	ldr	r2, [pc, #288]	; (8001118 <HAL_GPIO_Init+0x2a8>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b46      	ldr	r3, [pc, #280]	; (8001118 <HAL_GPIO_Init+0x2a8>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001008:	4a44      	ldr	r2, [pc, #272]	; (800111c <HAL_GPIO_Init+0x2ac>)
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001014:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a3c      	ldr	r2, [pc, #240]	; (8001120 <HAL_GPIO_Init+0x2b0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d01f      	beq.n	8001074 <HAL_GPIO_Init+0x204>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a3b      	ldr	r2, [pc, #236]	; (8001124 <HAL_GPIO_Init+0x2b4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d019      	beq.n	8001070 <HAL_GPIO_Init+0x200>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a3a      	ldr	r2, [pc, #232]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d013      	beq.n	800106c <HAL_GPIO_Init+0x1fc>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a39      	ldr	r2, [pc, #228]	; (800112c <HAL_GPIO_Init+0x2bc>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d00d      	beq.n	8001068 <HAL_GPIO_Init+0x1f8>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a38      	ldr	r2, [pc, #224]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d007      	beq.n	8001064 <HAL_GPIO_Init+0x1f4>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a37      	ldr	r2, [pc, #220]	; (8001134 <HAL_GPIO_Init+0x2c4>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d101      	bne.n	8001060 <HAL_GPIO_Init+0x1f0>
 800105c:	2305      	movs	r3, #5
 800105e:	e00a      	b.n	8001076 <HAL_GPIO_Init+0x206>
 8001060:	2306      	movs	r3, #6
 8001062:	e008      	b.n	8001076 <HAL_GPIO_Init+0x206>
 8001064:	2304      	movs	r3, #4
 8001066:	e006      	b.n	8001076 <HAL_GPIO_Init+0x206>
 8001068:	2303      	movs	r3, #3
 800106a:	e004      	b.n	8001076 <HAL_GPIO_Init+0x206>
 800106c:	2302      	movs	r3, #2
 800106e:	e002      	b.n	8001076 <HAL_GPIO_Init+0x206>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <HAL_GPIO_Init+0x206>
 8001074:	2300      	movs	r3, #0
 8001076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001078:	f002 0203 	and.w	r2, r2, #3
 800107c:	0092      	lsls	r2, r2, #2
 800107e:	4093      	lsls	r3, r2
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	4313      	orrs	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001086:	4925      	ldr	r1, [pc, #148]	; (800111c <HAL_GPIO_Init+0x2ac>)
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d006      	beq.n	80010ae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <HAL_GPIO_Init+0x2c8>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4924      	ldr	r1, [pc, #144]	; (8001138 <HAL_GPIO_Init+0x2c8>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	600b      	str	r3, [r1, #0]
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010ae:	4b22      	ldr	r3, [pc, #136]	; (8001138 <HAL_GPIO_Init+0x2c8>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4920      	ldr	r1, [pc, #128]	; (8001138 <HAL_GPIO_Init+0x2c8>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d006      	beq.n	80010d6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_GPIO_Init+0x2c8>)
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	491a      	ldr	r1, [pc, #104]	; (8001138 <HAL_GPIO_Init+0x2c8>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_GPIO_Init+0x2c8>)
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	43db      	mvns	r3, r3
 80010de:	4916      	ldr	r1, [pc, #88]	; (8001138 <HAL_GPIO_Init+0x2c8>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d025      	beq.n	800113c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_GPIO_Init+0x2c8>)
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	4910      	ldr	r1, [pc, #64]	; (8001138 <HAL_GPIO_Init+0x2c8>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	608b      	str	r3, [r1, #8]
 80010fc:	e025      	b.n	800114a <HAL_GPIO_Init+0x2da>
 80010fe:	bf00      	nop
 8001100:	10320000 	.word	0x10320000
 8001104:	10310000 	.word	0x10310000
 8001108:	10220000 	.word	0x10220000
 800110c:	10210000 	.word	0x10210000
 8001110:	10120000 	.word	0x10120000
 8001114:	10110000 	.word	0x10110000
 8001118:	40021000 	.word	0x40021000
 800111c:	40010000 	.word	0x40010000
 8001120:	40010800 	.word	0x40010800
 8001124:	40010c00 	.word	0x40010c00
 8001128:	40011000 	.word	0x40011000
 800112c:	40011400 	.word	0x40011400
 8001130:	40011800 	.word	0x40011800
 8001134:	40011c00 	.word	0x40011c00
 8001138:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_GPIO_Init+0x324>)
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	43db      	mvns	r3, r3
 8001144:	4913      	ldr	r1, [pc, #76]	; (8001194 <HAL_GPIO_Init+0x324>)
 8001146:	4013      	ands	r3, r2
 8001148:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_GPIO_Init+0x324>)
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	490e      	ldr	r1, [pc, #56]	; (8001194 <HAL_GPIO_Init+0x324>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	60cb      	str	r3, [r1, #12]
 8001162:	e006      	b.n	8001172 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_GPIO_Init+0x324>)
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	43db      	mvns	r3, r3
 800116c:	4909      	ldr	r1, [pc, #36]	; (8001194 <HAL_GPIO_Init+0x324>)
 800116e:	4013      	ands	r3, r2
 8001170:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	fa22 f303 	lsr.w	r3, r2, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	f47f ae7e 	bne.w	8000e84 <HAL_GPIO_Init+0x14>
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	372c      	adds	r7, #44	; 0x2c
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40010400 	.word	0x40010400

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011b4:	e003      	b.n	80011be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	b08b      	sub	sp, #44	; 0x2c
 80011cc:	af06      	add	r7, sp, #24
 80011ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e0fd      	b.n	80013d6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d106      	bne.n	80011f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f008 f932 	bl	8009458 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2203      	movs	r2, #3
 80011f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fc83 	bl	8003b0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	687e      	ldr	r6, [r7, #4]
 800120e:	466d      	mov	r5, sp
 8001210:	f106 0410 	add.w	r4, r6, #16
 8001214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	602b      	str	r3, [r5, #0]
 800121c:	1d33      	adds	r3, r6, #4
 800121e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001220:	6838      	ldr	r0, [r7, #0]
 8001222:	f002 fc4d 	bl	8003ac0 <USB_CoreInit>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2202      	movs	r2, #2
 8001230:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0ce      	b.n	80013d6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f002 fc7e 	bl	8003b40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e04c      	b.n	80012e4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	440b      	add	r3, r1
 800125a:	3301      	adds	r3, #1
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	b298      	uxth	r0, r3
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	440b      	add	r3, r1
 8001286:	3336      	adds	r3, #54	; 0x36
 8001288:	4602      	mov	r2, r0
 800128a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	3303      	adds	r3, #3
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	3338      	adds	r3, #56	; 0x38
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	333c      	adds	r3, #60	; 0x3c
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	440b      	add	r3, r1
 80012d8:	3340      	adds	r3, #64	; 0x40
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	3301      	adds	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d3ad      	bcc.n	800124a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	e044      	b.n	800137e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012f4:	7bfa      	ldrb	r2, [r7, #15]
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	440b      	add	r3, r1
 8001302:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800130a:	7bfa      	ldrb	r2, [r7, #15]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	440b      	add	r3, r1
 8001344:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	3301      	adds	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
 800137e:	7bfa      	ldrb	r2, [r7, #15]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	d3b5      	bcc.n	80012f4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	687e      	ldr	r6, [r7, #4]
 8001390:	466d      	mov	r5, sp
 8001392:	f106 0410 	add.w	r4, r6, #16
 8001396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	602b      	str	r3, [r5, #0]
 800139e:	1d33      	adds	r3, r6, #4
 80013a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a2:	6838      	ldr	r0, [r7, #0]
 80013a4:	f002 fbd8 	bl	8003b58 <USB_DevInit>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d005      	beq.n	80013ba <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2202      	movs	r2, #2
 80013b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00d      	b.n	80013d6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f005 f88a 	bl	80064e8 <USB_DevDisconnect>

  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <HAL_PCD_Start+0x16>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e016      	b.n	8001422 <HAL_PCD_Start+0x44>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f002 fb6d 	bl	8003ae0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001406:	2101      	movs	r1, #1
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f008 fa98 	bl	800993e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f005 f85e 	bl	80064d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b088      	sub	sp, #32
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f005 f860 	bl	80064fc <USB_ReadInterrupts>
 800143c:	4603      	mov	r3, r0
 800143e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001446:	d102      	bne.n	800144e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 fb5f 	bl	8001b0c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f005 f852 	bl	80064fc <USB_ReadInterrupts>
 8001458:	4603      	mov	r3, r0
 800145a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001462:	d112      	bne.n	800148a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800146c:	b29a      	uxth	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001476:	b292      	uxth	r2, r2
 8001478:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f008 f866 	bl	800954e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001482:	2100      	movs	r1, #0
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f923 	bl	80016d0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f005 f834 	bl	80064fc <USB_ReadInterrupts>
 8001494:	4603      	mov	r3, r0
 8001496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800149e:	d10b      	bne.n	80014b8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014b2:	b292      	uxth	r2, r2
 80014b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f005 f81d 	bl	80064fc <USB_ReadInterrupts>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014cc:	d10b      	bne.n	80014e6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014e0:	b292      	uxth	r2, r2
 80014e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f005 f806 	bl	80064fc <USB_ReadInterrupts>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014fa:	d126      	bne.n	800154a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001504:	b29a      	uxth	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0204 	bic.w	r2, r2, #4
 800150e:	b292      	uxth	r2, r2
 8001510:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800151c:	b29a      	uxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0208 	bic.w	r2, r2, #8
 8001526:	b292      	uxth	r2, r2
 8001528:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f008 f847 	bl	80095c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800153a:	b29a      	uxth	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001544:	b292      	uxth	r2, r2
 8001546:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f004 ffd4 	bl	80064fc <USB_ReadInterrupts>
 8001554:	4603      	mov	r3, r0
 8001556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800155a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800155e:	f040 8082 	bne.w	8001666 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001562:	2300      	movs	r3, #0
 8001564:	77fb      	strb	r3, [r7, #31]
 8001566:	e010      	b.n	800158a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	7ffb      	ldrb	r3, [r7, #31]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	441a      	add	r2, r3
 8001574:	7ffb      	ldrb	r3, [r7, #31]
 8001576:	8812      	ldrh	r2, [r2, #0]
 8001578:	b292      	uxth	r2, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	3320      	adds	r3, #32
 800157e:	443b      	add	r3, r7
 8001580:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	3301      	adds	r3, #1
 8001588:	77fb      	strb	r3, [r7, #31]
 800158a:	7ffb      	ldrb	r3, [r7, #31]
 800158c:	2b07      	cmp	r3, #7
 800158e:	d9eb      	bls.n	8001568 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001598:	b29a      	uxth	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	b292      	uxth	r2, r2
 80015a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	b292      	uxth	r2, r2
 80015bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80015c0:	bf00      	nop
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f6      	beq.n	80015c2 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015dc:	b29a      	uxth	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015e6:	b292      	uxth	r2, r2
 80015e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	77fb      	strb	r3, [r7, #31]
 80015f0:	e00f      	b.n	8001612 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80015f2:	7ffb      	ldrb	r3, [r7, #31]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	4611      	mov	r1, r2
 80015fa:	7ffa      	ldrb	r2, [r7, #31]
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	440a      	add	r2, r1
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	3320      	adds	r3, #32
 8001604:	443b      	add	r3, r7
 8001606:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800160a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800160c:	7ffb      	ldrb	r3, [r7, #31]
 800160e:	3301      	adds	r3, #1
 8001610:	77fb      	strb	r3, [r7, #31]
 8001612:	7ffb      	ldrb	r3, [r7, #31]
 8001614:	2b07      	cmp	r3, #7
 8001616:	d9ec      	bls.n	80015f2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001620:	b29a      	uxth	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0208 	orr.w	r2, r2, #8
 800162a:	b292      	uxth	r2, r2
 800162c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001638:	b29a      	uxth	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001642:	b292      	uxth	r2, r2
 8001644:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001650:	b29a      	uxth	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0204 	orr.w	r2, r2, #4
 800165a:	b292      	uxth	r2, r2
 800165c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f007 ff93 	bl	800958c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f004 ff46 	bl	80064fc <USB_ReadInterrupts>
 8001670:	4603      	mov	r3, r0
 8001672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800167a:	d10e      	bne.n	800169a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001684:	b29a      	uxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800168e:	b292      	uxth	r2, r2
 8001690:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f007 ff4c 	bl	8009532 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 ff2c 	bl	80064fc <USB_ReadInterrupts>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ae:	d10b      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016c2:	b292      	uxth	r2, r2
 80016c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80016c8:	bf00      	nop
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_PCD_SetAddress+0x1a>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e013      	b.n	8001712 <HAL_PCD_SetAddress+0x42>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	78fa      	ldrb	r2, [r7, #3]
 80016f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f004 fed3 	bl	80064ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	4608      	mov	r0, r1
 8001724:	4611      	mov	r1, r2
 8001726:	461a      	mov	r2, r3
 8001728:	4603      	mov	r3, r0
 800172a:	70fb      	strb	r3, [r7, #3]
 800172c:	460b      	mov	r3, r1
 800172e:	803b      	strh	r3, [r7, #0]
 8001730:	4613      	mov	r3, r2
 8001732:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800173c:	2b00      	cmp	r3, #0
 800173e:	da0e      	bge.n	800175e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	705a      	strb	r2, [r3, #1]
 800175c:	e00e      	b.n	800177c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	f003 0207 	and.w	r2, r3, #7
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	b2da      	uxtb	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001788:	883a      	ldrh	r2, [r7, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	78ba      	ldrb	r2, [r7, #2]
 8001792:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d004      	beq.n	80017a6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017a6:	78bb      	ldrb	r3, [r7, #2]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d102      	bne.n	80017b2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_PCD_EP_Open+0xa6>
 80017bc:	2302      	movs	r3, #2
 80017be:	e00e      	b.n	80017de <HAL_PCD_EP_Open+0xc4>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68f9      	ldr	r1, [r7, #12]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 f9e2 	bl	8003b98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80017dc:	7afb      	ldrb	r3, [r7, #11]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	460b      	mov	r3, r1
 80017f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	da0e      	bge.n	8001818 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	705a      	strb	r2, [r3, #1]
 8001816:	e00e      	b.n	8001836 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	f003 0207 	and.w	r2, r3, #7
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	b2da      	uxtb	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_PCD_EP_Close+0x6a>
 800184c:	2302      	movs	r3, #2
 800184e:	e00e      	b.n	800186e <HAL_PCD_EP_Close+0x88>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68f9      	ldr	r1, [r7, #12]
 800185e:	4618      	mov	r0, r3
 8001860:	f002 fd04 	bl	800426c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	460b      	mov	r3, r1
 8001884:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001886:	7afb      	ldrb	r3, [r7, #11]
 8001888:	f003 0207 	and.w	r2, r3, #7
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2200      	movs	r2, #0
 80018ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2200      	movs	r2, #0
 80018b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018b6:	7afb      	ldrb	r3, [r7, #11]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018c2:	7afb      	ldrb	r3, [r7, #11]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d106      	bne.n	80018da <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6979      	ldr	r1, [r7, #20]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 feb6 	bl	8004644 <USB_EPStartXfer>
 80018d8:	e005      	b.n	80018e6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6979      	ldr	r1, [r7, #20]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 feaf 	bl	8004644 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	f003 0207 	and.w	r2, r3, #7
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	440b      	add	r3, r1
 800190e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	460b      	mov	r3, r1
 800192c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800192e:	7afb      	ldrb	r3, [r7, #11]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4413      	add	r3, r2
 8001942:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2200      	movs	r2, #0
 8001962:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2201      	movs	r2, #1
 8001968:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	b2da      	uxtb	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001976:	7afb      	ldrb	r3, [r7, #11]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	2b00      	cmp	r3, #0
 800197e:	d106      	bne.n	800198e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6979      	ldr	r1, [r7, #20]
 8001986:	4618      	mov	r0, r3
 8001988:	f002 fe5c 	bl	8004644 <USB_EPStartXfer>
 800198c:	e005      	b.n	800199a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6979      	ldr	r1, [r7, #20]
 8001994:	4618      	mov	r0, r3
 8001996:	f002 fe55 	bl	8004644 <USB_EPStartXfer>
  }

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	f003 0207 	and.w	r2, r3, #7
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d901      	bls.n	80019c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e04c      	b.n	8001a5c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da0e      	bge.n	80019e8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	705a      	strb	r2, [r3, #1]
 80019e6:	e00c      	b.n	8001a02 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_PCD_EP_SetStall+0x7e>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e01c      	b.n	8001a5c <HAL_PCD_EP_SetStall+0xb8>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68f9      	ldr	r1, [r7, #12]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f004 fc3f 	bl	80062b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d108      	bne.n	8001a52 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	f004 fd64 	bl	800651a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	f003 020f 	and.w	r2, r3, #15
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d901      	bls.n	8001a82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e040      	b.n	8001b04 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da0e      	bge.n	8001aa8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	705a      	strb	r2, [r3, #1]
 8001aa6:	e00e      	b.n	8001ac6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	f003 0207 	and.w	r2, r3, #7
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_PCD_EP_ClrStall+0x82>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e00e      	b.n	8001b04 <HAL_PCD_EP_ClrStall+0xa0>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f004 fc2d 	bl	8006354 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08e      	sub	sp, #56	; 0x38
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b14:	e2ec      	b.n	80020f0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b1e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f040 8161 	bne.w	8001df8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d152      	bne.n	8001be6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b50:	81fb      	strh	r3, [r7, #14]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	89fb      	ldrh	r3, [r7, #14]
 8001b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3328      	adds	r3, #40	; 0x28
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	441a      	add	r2, r3
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f007 fca9 	bl	80094fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 829b 	beq.w	80020f0 <PCD_EP_ISR_Handler+0x5e4>
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 8296 	bne.w	80020f0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	b292      	uxth	r2, r2
 8001bd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001be4:	e284      	b.n	80020f0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d034      	beq.n	8001c6a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4413      	add	r3, r2
 8001c14:	3306      	adds	r3, #6
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	f004 fcbb 	bl	80065ba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c50:	4013      	ands	r3, r2
 8001c52:	823b      	strh	r3, [r7, #16]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	8a3a      	ldrh	r2, [r7, #16]
 8001c5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c5e:	b292      	uxth	r2, r2
 8001c60:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f007 fc1e 	bl	80094a4 <HAL_PCD_SetupStageCallback>
 8001c68:	e242      	b.n	80020f0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c6a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f280 823e 	bge.w	80020f0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c80:	4013      	ands	r3, r2
 8001c82:	83bb      	strh	r3, [r7, #28]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	8bba      	ldrh	r2, [r7, #28]
 8001c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3306      	adds	r3, #6
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d019      	beq.n	8001cfa <PCD_EP_ISR_Handler+0x1ee>
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d015      	beq.n	8001cfa <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	6959      	ldr	r1, [r3, #20]
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	f004 fc6b 	bl	80065ba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	695a      	ldr	r2, [r3, #20]
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	441a      	add	r2, r3
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f007 fbe7 	bl	80094c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 81f2 	bne.w	80020f0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4413      	add	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d112      	bne.n	8001d5a <PCD_EP_ISR_Handler+0x24e>
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	801a      	strh	r2, [r3, #0]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	801a      	strh	r2, [r3, #0]
 8001d58:	e02f      	b.n	8001dba <PCD_EP_ISR_Handler+0x2ae>
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8001d60:	d813      	bhi.n	8001d8a <PCD_EP_ISR_Handler+0x27e>
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	633b      	str	r3, [r7, #48]	; 0x30
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <PCD_EP_ISR_Handler+0x270>
 8001d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d78:	3301      	adds	r3, #1
 8001d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	029b      	lsls	r3, r3, #10
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	801a      	strh	r2, [r3, #0]
 8001d88:	e017      	b.n	8001dba <PCD_EP_ISR_Handler+0x2ae>
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d102      	bne.n	8001da4 <PCD_EP_ISR_Handler+0x298>
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da0:	3b01      	subs	r3, #1
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
 8001da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	029b      	lsls	r3, r3, #10
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dca:	827b      	strh	r3, [r7, #18]
 8001dcc:	8a7b      	ldrh	r3, [r7, #18]
 8001dce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001dd2:	827b      	strh	r3, [r7, #18]
 8001dd4:	8a7b      	ldrh	r3, [r7, #18]
 8001dd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001dda:	827b      	strh	r3, [r7, #18]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	8a7b      	ldrh	r3, [r7, #18]
 8001de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	8013      	strh	r3, [r2, #0]
 8001df6:	e17b      	b.n	80020f0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e0a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f280 80ea 	bge.w	8001fe8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e42:	b292      	uxth	r2, r2
 8001e44:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e46:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	7b1b      	ldrb	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d122      	bne.n	8001eaa <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4413      	add	r3, r2
 8001e78:	3306      	adds	r3, #6
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e8c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001e8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 8087 	beq.w	8001fa4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	6959      	ldr	r1, [r3, #20]
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	88da      	ldrh	r2, [r3, #6]
 8001ea2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ea4:	f004 fb89 	bl	80065ba <USB_ReadPMA>
 8001ea8:	e07c      	b.n	8001fa4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	78db      	ldrb	r3, [r3, #3]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d108      	bne.n	8001ec4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001eb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f927 	bl	800210c <HAL_PCD_EP_DB_Receive>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ec2:	e06f      	b.n	8001fa4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ede:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	441a      	add	r2, r3
 8001eee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d021      	beq.n	8001f62 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	3302      	adds	r3, #2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f46:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d02a      	beq.n	8001fa4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	6959      	ldr	r1, [r3, #20]
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	891a      	ldrh	r2, [r3, #8]
 8001f5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f5c:	f004 fb2d 	bl	80065ba <USB_ReadPMA>
 8001f60:	e020      	b.n	8001fa4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	3306      	adds	r3, #6
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f8a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	6959      	ldr	r1, [r3, #20]
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	895a      	ldrh	r2, [r3, #10]
 8001f9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fa0:	f004 fb0b 	bl	80065ba <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	69da      	ldr	r2, [r3, #28]
 8001fa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001faa:	441a      	add	r2, r3
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fb6:	441a      	add	r2, r3
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <PCD_EP_ISR_Handler+0x4c2>
 8001fc4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d206      	bcs.n	8001fdc <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f007 fa77 	bl	80094c8 <HAL_PCD_DataOutStageCallback>
 8001fda:	e005      	b.n	8001fe8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 fb2e 	bl	8004644 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001fe8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d07e      	beq.n	80020f0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ff2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800201c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002020:	843b      	strh	r3, [r7, #32]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	441a      	add	r2, r3
 8002030:	8c3b      	ldrh	r3, [r7, #32]
 8002032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800203a:	b29b      	uxth	r3, r3
 800203c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	78db      	ldrb	r3, [r3, #3]
 8002042:	2b03      	cmp	r3, #3
 8002044:	d00c      	beq.n	8002060 <PCD_EP_ISR_Handler+0x554>
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	78db      	ldrb	r3, [r3, #3]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002052:	2b02      	cmp	r3, #2
 8002054:	d146      	bne.n	80020e4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002056:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d141      	bne.n	80020e4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002068:	b29b      	uxth	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	3302      	adds	r3, #2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	4413      	add	r3, r2
 800207e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002088:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	8bfb      	ldrh	r3, [r7, #30]
 8002090:	429a      	cmp	r2, r3
 8002092:	d906      	bls.n	80020a2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	8bfb      	ldrh	r3, [r7, #30]
 800209a:	1ad2      	subs	r2, r2, r3
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	619a      	str	r2, [r3, #24]
 80020a0:	e002      	b.n	80020a8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d106      	bne.n	80020be <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4619      	mov	r1, r3
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f007 fa21 	bl	80094fe <HAL_PCD_DataInStageCallback>
 80020bc:	e018      	b.n	80020f0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	8bfb      	ldrh	r3, [r7, #30]
 80020c4:	441a      	add	r2, r3
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	69da      	ldr	r2, [r3, #28]
 80020ce:	8bfb      	ldrh	r3, [r7, #30]
 80020d0:	441a      	add	r2, r3
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 fab1 	bl	8004644 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80020e2:	e005      	b.n	80020f0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80020e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020e6:	461a      	mov	r2, r3
 80020e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f91b 	bl	8002326 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f6ff ad0a 	blt.w	8001b16 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3738      	adds	r7, #56	; 0x38
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	4613      	mov	r3, r2
 8002118:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d07e      	beq.n	8002222 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800212c:	b29b      	uxth	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	3302      	adds	r3, #2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800214c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	8b7b      	ldrh	r3, [r7, #26]
 8002154:	429a      	cmp	r2, r3
 8002156:	d306      	bcc.n	8002166 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	8b7b      	ldrh	r3, [r7, #26]
 800215e:	1ad2      	subs	r2, r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	619a      	str	r2, [r3, #24]
 8002164:	e002      	b.n	800216c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d123      	bne.n	80021bc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800218a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218e:	833b      	strh	r3, [r7, #24]
 8002190:	8b3b      	ldrh	r3, [r7, #24]
 8002192:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002196:	833b      	strh	r3, [r7, #24]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	441a      	add	r2, r3
 80021a6:	8b3b      	ldrh	r3, [r7, #24]
 80021a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01f      	beq.n	8002206 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e0:	82fb      	strh	r3, [r7, #22]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	441a      	add	r2, r3
 80021f0:	8afb      	ldrh	r3, [r7, #22]
 80021f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002202:	b29b      	uxth	r3, r3
 8002204:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002206:	8b7b      	ldrh	r3, [r7, #26]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8087 	beq.w	800231c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	6959      	ldr	r1, [r3, #20]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	891a      	ldrh	r2, [r3, #8]
 800221a:	8b7b      	ldrh	r3, [r7, #26]
 800221c:	f004 f9cd 	bl	80065ba <USB_ReadPMA>
 8002220:	e07c      	b.n	800231c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800222a:	b29b      	uxth	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	3306      	adds	r3, #6
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	4413      	add	r3, r2
 8002240:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800224a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	8b7b      	ldrh	r3, [r7, #26]
 8002252:	429a      	cmp	r2, r3
 8002254:	d306      	bcc.n	8002264 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	8b7b      	ldrh	r3, [r7, #26]
 800225c:	1ad2      	subs	r2, r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	619a      	str	r2, [r3, #24]
 8002262:	e002      	b.n	800226a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d123      	bne.n	80022ba <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228c:	83fb      	strh	r3, [r7, #30]
 800228e:	8bfb      	ldrh	r3, [r7, #30]
 8002290:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002294:	83fb      	strh	r3, [r7, #30]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	441a      	add	r2, r3
 80022a4:	8bfb      	ldrh	r3, [r7, #30]
 80022a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11f      	bne.n	8002304 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022de:	83bb      	strh	r3, [r7, #28]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	441a      	add	r2, r3
 80022ee:	8bbb      	ldrh	r3, [r7, #28]
 80022f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002300:	b29b      	uxth	r3, r3
 8002302:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002304:	8b7b      	ldrh	r3, [r7, #26]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	6959      	ldr	r1, [r3, #20]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	895a      	ldrh	r2, [r3, #10]
 8002316:	8b7b      	ldrh	r3, [r7, #26]
 8002318:	f004 f94f 	bl	80065ba <USB_ReadPMA>
    }
  }

  return count;
 800231c:	8b7b      	ldrh	r3, [r7, #26]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b0a2      	sub	sp, #136	; 0x88
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	4613      	mov	r3, r2
 8002332:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 81c7 	beq.w	80026ce <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002348:	b29b      	uxth	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	3302      	adds	r3, #2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	4413      	add	r3, r2
 800235e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002368:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002374:	429a      	cmp	r2, r3
 8002376:	d907      	bls.n	8002388 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002380:	1ad2      	subs	r2, r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	619a      	str	r2, [r3, #24]
 8002386:	e002      	b.n	800238e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2200      	movs	r2, #0
 800238c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 80b9 	bne.w	800250a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	785b      	ldrb	r3, [r3, #1]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d126      	bne.n	80023ee <HAL_PCD_EP_DB_Transmit+0xc8>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	4413      	add	r3, r2
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	011a      	lsls	r2, r3, #4
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c0:	4413      	add	r3, r2
 80023c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	801a      	strh	r2, [r3, #0]
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	801a      	strh	r2, [r3, #0]
 80023ec:	e01a      	b.n	8002424 <HAL_PCD_EP_DB_Transmit+0xfe>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	785b      	ldrb	r3, [r3, #1]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d116      	bne.n	8002424 <HAL_PCD_EP_DB_Transmit+0xfe>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002404:	b29b      	uxth	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	4413      	add	r3, r2
 800240c:	633b      	str	r3, [r7, #48]	; 0x30
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	011a      	lsls	r2, r3, #4
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002416:	4413      	add	r3, r2
 8002418:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	2200      	movs	r2, #0
 8002422:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	623b      	str	r3, [r7, #32]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	785b      	ldrb	r3, [r3, #1]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d126      	bne.n	8002480 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002440:	b29b      	uxth	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	4413      	add	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	011a      	lsls	r2, r3, #4
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	4413      	add	r3, r2
 8002454:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002464:	b29a      	uxth	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	801a      	strh	r2, [r3, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002478:	b29a      	uxth	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	801a      	strh	r2, [r3, #0]
 800247e:	e017      	b.n	80024b0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	785b      	ldrb	r3, [r3, #1]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d113      	bne.n	80024b0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002490:	b29b      	uxth	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	4413      	add	r3, r2
 8002498:	623b      	str	r3, [r7, #32]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	011a      	lsls	r2, r3, #4
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	4413      	add	r3, r2
 80024a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	2200      	movs	r2, #0
 80024ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f007 f821 	bl	80094fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 82d4 	beq.w	8002a70 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e2:	827b      	strh	r3, [r7, #18]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	441a      	add	r2, r3
 80024f2:	8a7b      	ldrh	r3, [r7, #18]
 80024f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002504:	b29b      	uxth	r3, r3
 8002506:	8013      	strh	r3, [r2, #0]
 8002508:	e2b2      	b.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d021      	beq.n	8002558 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800252a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	441a      	add	r2, r3
 8002540:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800254c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	b29b      	uxth	r3, r3
 8002556:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 8286 	bne.w	8002a70 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800256c:	441a      	add	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800257a:	441a      	add	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	6a1a      	ldr	r2, [r3, #32]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	429a      	cmp	r2, r3
 800258a:	d309      	bcc.n	80025a0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	6a1a      	ldr	r2, [r3, #32]
 8002596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002598:	1ad2      	subs	r2, r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	621a      	str	r2, [r3, #32]
 800259e:	e015      	b.n	80025cc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80025a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025b6:	e009      	b.n	80025cc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2200      	movs	r2, #0
 80025ca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	785b      	ldrb	r3, [r3, #1]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d155      	bne.n	8002680 <HAL_PCD_EP_DB_Transmit+0x35a>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e8:	4413      	add	r3, r2
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	011a      	lsls	r2, r3, #4
 80025f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f4:	4413      	add	r3, r2
 80025f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
 80025fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d112      	bne.n	8002628 <HAL_PCD_EP_DB_Transmit+0x302>
 8002602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800260c:	b29a      	uxth	r2, r3
 800260e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002610:	801a      	strh	r2, [r3, #0]
 8002612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800261c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002620:	b29a      	uxth	r2, r3
 8002622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002624:	801a      	strh	r2, [r3, #0]
 8002626:	e047      	b.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x392>
 8002628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800262a:	2b3e      	cmp	r3, #62	; 0x3e
 800262c:	d811      	bhi.n	8002652 <HAL_PCD_EP_DB_Transmit+0x32c>
 800262e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002630:	085b      	lsrs	r3, r3, #1
 8002632:	64bb      	str	r3, [r7, #72]	; 0x48
 8002634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_PCD_EP_DB_Transmit+0x31e>
 800263e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002640:	3301      	adds	r3, #1
 8002642:	64bb      	str	r3, [r7, #72]	; 0x48
 8002644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002646:	b29b      	uxth	r3, r3
 8002648:	029b      	lsls	r3, r3, #10
 800264a:	b29a      	uxth	r2, r3
 800264c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264e:	801a      	strh	r2, [r3, #0]
 8002650:	e032      	b.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x392>
 8002652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48
 8002658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	2b00      	cmp	r3, #0
 8002660:	d102      	bne.n	8002668 <HAL_PCD_EP_DB_Transmit+0x342>
 8002662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002664:	3b01      	subs	r3, #1
 8002666:	64bb      	str	r3, [r7, #72]	; 0x48
 8002668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800266a:	b29b      	uxth	r3, r3
 800266c:	029b      	lsls	r3, r3, #10
 800266e:	b29b      	uxth	r3, r3
 8002670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002678:	b29a      	uxth	r2, r3
 800267a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	e01b      	b.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x392>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	785b      	ldrb	r3, [r3, #1]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d117      	bne.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x392>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	643b      	str	r3, [r7, #64]	; 0x40
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002696:	b29b      	uxth	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800269c:	4413      	add	r3, r2
 800269e:	643b      	str	r3, [r7, #64]	; 0x40
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	011a      	lsls	r2, r3, #4
 80026a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a8:	4413      	add	r3, r2
 80026aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	6959      	ldr	r1, [r3, #20]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	891a      	ldrh	r2, [r3, #8]
 80026c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f003 ff32 	bl	8006530 <USB_WritePMA>
 80026cc:	e1d0      	b.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	3306      	adds	r3, #6
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002702:	429a      	cmp	r2, r3
 8002704:	d307      	bcc.n	8002716 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270e:	1ad2      	subs	r2, r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	619a      	str	r2, [r3, #24]
 8002714:	e002      	b.n	800271c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 80c4 	bne.w	80028ae <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	785b      	ldrb	r3, [r3, #1]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d126      	bne.n	800277c <HAL_PCD_EP_DB_Transmit+0x456>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800273c:	b29b      	uxth	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002742:	4413      	add	r3, r2
 8002744:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	011a      	lsls	r2, r3, #4
 800274c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274e:	4413      	add	r3, r2
 8002750:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002754:	66bb      	str	r3, [r7, #104]	; 0x68
 8002756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002760:	b29a      	uxth	r2, r3
 8002762:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002764:	801a      	strh	r2, [r3, #0]
 8002766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002774:	b29a      	uxth	r2, r3
 8002776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002778:	801a      	strh	r2, [r3, #0]
 800277a:	e01a      	b.n	80027b2 <HAL_PCD_EP_DB_Transmit+0x48c>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	785b      	ldrb	r3, [r3, #1]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d116      	bne.n	80027b2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	677b      	str	r3, [r7, #116]	; 0x74
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002798:	4413      	add	r3, r2
 800279a:	677b      	str	r3, [r7, #116]	; 0x74
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	011a      	lsls	r2, r3, #4
 80027a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a4:	4413      	add	r3, r2
 80027a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027aa:	673b      	str	r3, [r7, #112]	; 0x70
 80027ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ae:	2200      	movs	r2, #0
 80027b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	785b      	ldrb	r3, [r3, #1]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d12f      	bne.n	8002820 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027d8:	4413      	add	r3, r2
 80027da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	011a      	lsls	r2, r3, #4
 80027e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027e8:	4413      	add	r3, r2
 80027ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027fe:	b29a      	uxth	r2, r3
 8002800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002804:	801a      	strh	r2, [r3, #0]
 8002806:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002816:	b29a      	uxth	r2, r3
 8002818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	e017      	b.n	8002850 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d113      	bne.n	8002850 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002836:	4413      	add	r3, r2
 8002838:	67bb      	str	r3, [r7, #120]	; 0x78
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	011a      	lsls	r2, r3, #4
 8002840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002842:	4413      	add	r3, r2
 8002844:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002848:	67fb      	str	r3, [r7, #124]	; 0x7c
 800284a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800284c:	2200      	movs	r2, #0
 800284e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4619      	mov	r1, r3
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f006 fe51 	bl	80094fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002862:	2b00      	cmp	r3, #0
 8002864:	f040 8104 	bne.w	8002a70 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800287e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002882:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	441a      	add	r2, r3
 8002894:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800289c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	8013      	strh	r3, [r2, #0]
 80028ac:	e0e0      	b.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d121      	bne.n	80028fc <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	441a      	add	r2, r3
 80028e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002902:	2b01      	cmp	r3, #1
 8002904:	f040 80b4 	bne.w	8002a70 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002910:	441a      	add	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	69da      	ldr	r2, [r3, #28]
 800291a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800291e:	441a      	add	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	6a1a      	ldr	r2, [r3, #32]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	429a      	cmp	r2, r3
 800292e:	d309      	bcc.n	8002944 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	6a1a      	ldr	r2, [r3, #32]
 800293a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293c:	1ad2      	subs	r2, r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	621a      	str	r2, [r3, #32]
 8002942:	e015      	b.n	8002970 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d107      	bne.n	800295c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800294c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002950:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800295a:	e009      	b.n	8002970 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2200      	movs	r2, #0
 8002966:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	667b      	str	r3, [r7, #100]	; 0x64
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	785b      	ldrb	r3, [r3, #1]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d155      	bne.n	8002a2a <HAL_PCD_EP_DB_Transmit+0x704>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800298c:	b29b      	uxth	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002992:	4413      	add	r3, r2
 8002994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	011a      	lsls	r2, r3, #4
 800299c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299e:	4413      	add	r3, r2
 80029a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80029a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d112      	bne.n	80029d2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80029ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ba:	801a      	strh	r2, [r3, #0]
 80029bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ce:	801a      	strh	r2, [r3, #0]
 80029d0:	e044      	b.n	8002a5c <HAL_PCD_EP_DB_Transmit+0x736>
 80029d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d4:	2b3e      	cmp	r3, #62	; 0x3e
 80029d6:	d811      	bhi.n	80029fc <HAL_PCD_EP_DB_Transmit+0x6d6>
 80029d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029da:	085b      	lsrs	r3, r3, #1
 80029dc:	657b      	str	r3, [r7, #84]	; 0x54
 80029de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_PCD_EP_DB_Transmit+0x6c8>
 80029e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ea:	3301      	adds	r3, #1
 80029ec:	657b      	str	r3, [r7, #84]	; 0x54
 80029ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	029b      	lsls	r3, r3, #10
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029f8:	801a      	strh	r2, [r3, #0]
 80029fa:	e02f      	b.n	8002a5c <HAL_PCD_EP_DB_Transmit+0x736>
 80029fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	657b      	str	r3, [r7, #84]	; 0x54
 8002a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d102      	bne.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	657b      	str	r3, [r7, #84]	; 0x54
 8002a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	029b      	lsls	r3, r3, #10
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a26:	801a      	strh	r2, [r3, #0]
 8002a28:	e018      	b.n	8002a5c <HAL_PCD_EP_DB_Transmit+0x736>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	785b      	ldrb	r3, [r3, #1]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d114      	bne.n	8002a5c <HAL_PCD_EP_DB_Transmit+0x736>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a40:	4413      	add	r3, r2
 8002a42:	667b      	str	r3, [r7, #100]	; 0x64
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	011a      	lsls	r2, r3, #4
 8002a4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a52:	663b      	str	r3, [r7, #96]	; 0x60
 8002a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a5a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	6959      	ldr	r1, [r3, #20]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	895a      	ldrh	r2, [r3, #10]
 8002a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f003 fd60 	bl	8006530 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a8a:	823b      	strh	r3, [r7, #16]
 8002a8c:	8a3b      	ldrh	r3, [r7, #16]
 8002a8e:	f083 0310 	eor.w	r3, r3, #16
 8002a92:	823b      	strh	r3, [r7, #16]
 8002a94:	8a3b      	ldrh	r3, [r7, #16]
 8002a96:	f083 0320 	eor.w	r3, r3, #32
 8002a9a:	823b      	strh	r3, [r7, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	441a      	add	r2, r3
 8002aaa:	8a3b      	ldrh	r3, [r7, #16]
 8002aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3788      	adds	r7, #136	; 0x88
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b087      	sub	sp, #28
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	817b      	strh	r3, [r7, #10]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002adc:	897b      	ldrh	r3, [r7, #10]
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00b      	beq.n	8002b00 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae8:	897b      	ldrh	r3, [r7, #10]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4413      	add	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e009      	b.n	8002b14 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b00:	897a      	ldrh	r2, [r7, #10]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4413      	add	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b14:	893b      	ldrh	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d107      	bne.n	8002b2a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	80da      	strh	r2, [r3, #6]
 8002b28:	e00b      	b.n	8002b42 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	0c1b      	lsrs	r3, r3, #16
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
	...

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e272      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8087 	beq.w	8002c7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b70:	4b92      	ldr	r3, [pc, #584]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d00c      	beq.n	8002b96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b7c:	4b8f      	ldr	r3, [pc, #572]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d112      	bne.n	8002bae <HAL_RCC_OscConfig+0x5e>
 8002b88:	4b8c      	ldr	r3, [pc, #560]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d10b      	bne.n	8002bae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b96:	4b89      	ldr	r3, [pc, #548]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d06c      	beq.n	8002c7c <HAL_RCC_OscConfig+0x12c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d168      	bne.n	8002c7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e24c      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x76>
 8002bb8:	4b80      	ldr	r3, [pc, #512]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a7f      	ldr	r2, [pc, #508]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	e02e      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x98>
 8002bce:	4b7b      	ldr	r3, [pc, #492]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a7a      	ldr	r2, [pc, #488]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b78      	ldr	r3, [pc, #480]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a77      	ldr	r2, [pc, #476]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e01d      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0xbc>
 8002bf2:	4b72      	ldr	r3, [pc, #456]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a71      	ldr	r2, [pc, #452]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b6f      	ldr	r3, [pc, #444]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6e      	ldr	r2, [pc, #440]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002c0c:	4b6b      	ldr	r3, [pc, #428]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a6a      	ldr	r2, [pc, #424]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b68      	ldr	r3, [pc, #416]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a67      	ldr	r2, [pc, #412]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe f808 	bl	8000c40 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c34:	f7fe f804 	bl	8000c40 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e200      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b5d      	ldr	r3, [pc, #372]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0xe4>
 8002c52:	e014      	b.n	8002c7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fd fff4 	bl	8000c40 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fd fff0 	bl	8000c40 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e1ec      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6e:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x10c>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d063      	beq.n	8002d52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c8a:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c96:	4b49      	ldr	r3, [pc, #292]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d11c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x18c>
 8002ca2:	4b46      	ldr	r3, [pc, #280]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d116      	bne.n	8002cdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cae:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x176>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e1c0      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4939      	ldr	r1, [pc, #228]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	e03a      	b.n	8002d52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d020      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce4:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7fd ffa9 	bl	8000c40 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf2:	f7fd ffa5 	bl	8000c40 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e1a1      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4927      	ldr	r1, [pc, #156]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	600b      	str	r3, [r1, #0]
 8002d24:	e015      	b.n	8002d52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <HAL_RCC_OscConfig+0x270>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fd ff88 	bl	8000c40 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d34:	f7fd ff84 	bl	8000c40 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e180      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d03a      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d019      	beq.n	8002d9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_RCC_OscConfig+0x274>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6c:	f7fd ff68 	bl	8000c40 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d74:	f7fd ff64 	bl	8000c40 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e160      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d92:	2001      	movs	r0, #1
 8002d94:	f000 fad8 	bl	8003348 <RCC_Delay>
 8002d98:	e01c      	b.n	8002dd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da0:	f7fd ff4e 	bl	8000c40 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da6:	e00f      	b.n	8002dc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da8:	f7fd ff4a 	bl	8000c40 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d908      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e146      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	42420000 	.word	0x42420000
 8002dc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc8:	4b92      	ldr	r3, [pc, #584]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1e9      	bne.n	8002da8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80a6 	beq.w	8002f2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4b8b      	ldr	r3, [pc, #556]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10d      	bne.n	8002e0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	4b88      	ldr	r3, [pc, #544]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4a87      	ldr	r2, [pc, #540]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	61d3      	str	r3, [r2, #28]
 8002dfe:	4b85      	ldr	r3, [pc, #532]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	4b82      	ldr	r3, [pc, #520]	; (8003018 <HAL_RCC_OscConfig+0x4c8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d118      	bne.n	8002e4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1a:	4b7f      	ldr	r3, [pc, #508]	; (8003018 <HAL_RCC_OscConfig+0x4c8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a7e      	ldr	r2, [pc, #504]	; (8003018 <HAL_RCC_OscConfig+0x4c8>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e26:	f7fd ff0b 	bl	8000c40 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2e:	f7fd ff07 	bl	8000c40 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b64      	cmp	r3, #100	; 0x64
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e103      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	4b75      	ldr	r3, [pc, #468]	; (8003018 <HAL_RCC_OscConfig+0x4c8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x312>
 8002e54:	4b6f      	ldr	r3, [pc, #444]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4a6e      	ldr	r2, [pc, #440]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6213      	str	r3, [r2, #32]
 8002e60:	e02d      	b.n	8002ebe <HAL_RCC_OscConfig+0x36e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x334>
 8002e6a:	4b6a      	ldr	r3, [pc, #424]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4a69      	ldr	r2, [pc, #420]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	6213      	str	r3, [r2, #32]
 8002e76:	4b67      	ldr	r3, [pc, #412]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4a66      	ldr	r2, [pc, #408]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	f023 0304 	bic.w	r3, r3, #4
 8002e80:	6213      	str	r3, [r2, #32]
 8002e82:	e01c      	b.n	8002ebe <HAL_RCC_OscConfig+0x36e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	d10c      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x356>
 8002e8c:	4b61      	ldr	r3, [pc, #388]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4a60      	ldr	r2, [pc, #384]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	6213      	str	r3, [r2, #32]
 8002e98:	4b5e      	ldr	r3, [pc, #376]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4a5d      	ldr	r2, [pc, #372]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6213      	str	r3, [r2, #32]
 8002ea4:	e00b      	b.n	8002ebe <HAL_RCC_OscConfig+0x36e>
 8002ea6:	4b5b      	ldr	r3, [pc, #364]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4a5a      	ldr	r2, [pc, #360]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	6213      	str	r3, [r2, #32]
 8002eb2:	4b58      	ldr	r3, [pc, #352]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a57      	ldr	r2, [pc, #348]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d015      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec6:	f7fd febb 	bl	8000c40 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7fd feb7 	bl	8000c40 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0b1      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee4:	4b4b      	ldr	r3, [pc, #300]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ee      	beq.n	8002ece <HAL_RCC_OscConfig+0x37e>
 8002ef0:	e014      	b.n	8002f1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7fd fea5 	bl	8000c40 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fd fea1 	bl	8000c40 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e09b      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f10:	4b40      	ldr	r3, [pc, #256]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ee      	bne.n	8002efa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f22:	4b3c      	ldr	r3, [pc, #240]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	4a3b      	ldr	r2, [pc, #236]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8087 	beq.w	8003046 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f38:	4b36      	ldr	r3, [pc, #216]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 030c 	and.w	r3, r3, #12
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d061      	beq.n	8003008 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d146      	bne.n	8002fda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4c:	4b33      	ldr	r3, [pc, #204]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f52:	f7fd fe75 	bl	8000c40 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5a:	f7fd fe71 	bl	8000c40 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e06d      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6c:	4b29      	ldr	r3, [pc, #164]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f0      	bne.n	8002f5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f80:	d108      	bne.n	8002f94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f82:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	4921      	ldr	r1, [pc, #132]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f94:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a19      	ldr	r1, [r3, #32]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	491b      	ldr	r1, [pc, #108]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7fd fe45 	bl	8000c40 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fba:	f7fd fe41 	bl	8000c40 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e03d      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x46a>
 8002fd8:	e035      	b.n	8003046 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fd fe2e 	bl	8000c40 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7fd fe2a 	bl	8000c40 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e026      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x498>
 8003006:	e01e      	b.n	8003046 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d107      	bne.n	8003020 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e019      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
 8003014:	40021000 	.word	0x40021000
 8003018:	40007000 	.word	0x40007000
 800301c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_OscConfig+0x500>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	429a      	cmp	r2, r3
 8003032:	d106      	bne.n	8003042 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d001      	beq.n	8003046 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40021000 	.word	0x40021000

08003054 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0d0      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b6a      	ldr	r3, [pc, #424]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d910      	bls.n	8003098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b67      	ldr	r3, [pc, #412]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 0207 	bic.w	r2, r3, #7
 800307e:	4965      	ldr	r1, [pc, #404]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b63      	ldr	r3, [pc, #396]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b8      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b0:	4b59      	ldr	r3, [pc, #356]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a58      	ldr	r2, [pc, #352]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c8:	4b53      	ldr	r3, [pc, #332]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a52      	ldr	r2, [pc, #328]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b50      	ldr	r3, [pc, #320]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	494d      	ldr	r1, [pc, #308]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d040      	beq.n	8003174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d115      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e07f      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4b41      	ldr	r3, [pc, #260]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e073      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	4b3d      	ldr	r3, [pc, #244]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e06b      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b39      	ldr	r3, [pc, #228]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4936      	ldr	r1, [pc, #216]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	4313      	orrs	r3, r2
 8003142:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003144:	f7fd fd7c 	bl	8000c40 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7fd fd78 	bl	8000c40 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e053      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d210      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 0207 	bic.w	r2, r3, #7
 800318a:	4922      	ldr	r1, [pc, #136]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e032      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b0:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4916      	ldr	r1, [pc, #88]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	490e      	ldr	r1, [pc, #56]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031e2:	f000 f821 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 80031e6:	4602      	mov	r2, r0
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	490a      	ldr	r1, [pc, #40]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031f4:	5ccb      	ldrb	r3, [r1, r3]
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	4a09      	ldr	r2, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1cc>)
 80031fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_RCC_ClockConfig+0x1d0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd fcda 	bl	8000bbc <HAL_InitTick>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40022000 	.word	0x40022000
 8003218:	40021000 	.word	0x40021000
 800321c:	08009aa4 	.word	0x08009aa4
 8003220:	20000000 	.word	0x20000000
 8003224:	20000004 	.word	0x20000004

08003228 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003228:	b490      	push	{r4, r7}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800322e:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003230:	1d3c      	adds	r4, r7, #4
 8003232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003238:	f240 2301 	movw	r3, #513	; 0x201
 800323c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003252:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b04      	cmp	r3, #4
 8003260:	d002      	beq.n	8003268 <HAL_RCC_GetSysClockFreq+0x40>
 8003262:	2b08      	cmp	r3, #8
 8003264:	d003      	beq.n	800326e <HAL_RCC_GetSysClockFreq+0x46>
 8003266:	e02b      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003268:	4b1c      	ldr	r3, [pc, #112]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800326a:	623b      	str	r3, [r7, #32]
      break;
 800326c:	e02b      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	0c9b      	lsrs	r3, r3, #18
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	3328      	adds	r3, #40	; 0x28
 8003278:	443b      	add	r3, r7
 800327a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800327e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d012      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800328a:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	0c5b      	lsrs	r3, r3, #17
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	3328      	adds	r3, #40	; 0x28
 8003296:	443b      	add	r3, r7
 8003298:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800329c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80032a2:	fb03 f202 	mul.w	r2, r3, r2
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
 80032ae:	e004      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	4a0b      	ldr	r2, [pc, #44]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	623b      	str	r3, [r7, #32]
      break;
 80032be:	e002      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80032c2:	623b      	str	r3, [r7, #32]
      break;
 80032c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c6:	6a3b      	ldr	r3, [r7, #32]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3728      	adds	r7, #40	; 0x28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc90      	pop	{r4, r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	08009a44 	.word	0x08009a44
 80032d8:	40021000 	.word	0x40021000
 80032dc:	007a1200 	.word	0x007a1200
 80032e0:	003d0900 	.word	0x003d0900

080032e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e8:	4b02      	ldr	r3, [pc, #8]	; (80032f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	20000000 	.word	0x20000000

080032f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032fc:	f7ff fff2 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	0a1b      	lsrs	r3, r3, #8
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	4903      	ldr	r1, [pc, #12]	; (800331c <HAL_RCC_GetPCLK1Freq+0x24>)
 800330e:	5ccb      	ldrb	r3, [r1, r3]
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	08009ab4 	.word	0x08009ab4

08003320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003324:	f7ff ffde 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	0adb      	lsrs	r3, r3, #11
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4903      	ldr	r1, [pc, #12]	; (8003344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	08009ab4 	.word	0x08009ab4

08003348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003350:	4b0a      	ldr	r3, [pc, #40]	; (800337c <RCC_Delay+0x34>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <RCC_Delay+0x38>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	0a5b      	lsrs	r3, r3, #9
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003364:	bf00      	nop
  }
  while (Delay --);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1e5a      	subs	r2, r3, #1
 800336a:	60fa      	str	r2, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f9      	bne.n	8003364 <RCC_Delay+0x1c>
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	20000000 	.word	0x20000000
 8003380:	10624dd3 	.word	0x10624dd3

08003384 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d07d      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033a0:	2300      	movs	r3, #0
 80033a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a4:	4b4f      	ldr	r3, [pc, #316]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10d      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b0:	4b4c      	ldr	r3, [pc, #304]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	4a4b      	ldr	r2, [pc, #300]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ba:	61d3      	str	r3, [r2, #28]
 80033bc:	4b49      	ldr	r3, [pc, #292]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c8:	2301      	movs	r3, #1
 80033ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033cc:	4b46      	ldr	r3, [pc, #280]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d118      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d8:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a42      	ldr	r2, [pc, #264]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e4:	f7fd fc2c 	bl	8000c40 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	e008      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ec:	f7fd fc28 	bl	8000c40 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e06d      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fe:	4b3a      	ldr	r3, [pc, #232]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800340a:	4b36      	ldr	r3, [pc, #216]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003412:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d02e      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	429a      	cmp	r2, r3
 8003426:	d027      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003428:	4b2e      	ldr	r3, [pc, #184]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003430:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003432:	4b2e      	ldr	r3, [pc, #184]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003438:	4b2c      	ldr	r3, [pc, #176]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800343e:	4a29      	ldr	r2, [pc, #164]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d014      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fd fbf7 	bl	8000c40 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fd fbf3 	bl	8000c40 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e036      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ee      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003478:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4917      	ldr	r1, [pc, #92]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	4313      	orrs	r3, r2
 8003488:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800348a:	7dfb      	ldrb	r3, [r7, #23]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d105      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034a8:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	490b      	ldr	r1, [pc, #44]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034c6:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	4904      	ldr	r1, [pc, #16]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40007000 	.word	0x40007000
 80034ec:	42420440 	.word	0x42420440

080034f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e076      	b.n	80035f0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	2b00      	cmp	r3, #0
 8003508:	d108      	bne.n	800351c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003512:	d009      	beq.n	8003528 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	61da      	str	r2, [r3, #28]
 800351a:	e005      	b.n	8003528 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd f956 	bl	80007f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	ea42 0103 	orr.w	r1, r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	0c1a      	lsrs	r2, r3, #16
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f002 0204 	and.w	r2, r2, #4
 80035ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e093      	b.n	8003734 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fd f96d 	bl	8000900 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800363c:	f023 0307 	bic.w	r3, r3, #7
 8003640:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3304      	adds	r3, #4
 800364a:	4619      	mov	r1, r3
 800364c:	4610      	mov	r0, r2
 800364e:	f000 f875 	bl	800373c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367a:	f023 0303 	bic.w	r3, r3, #3
 800367e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	4313      	orrs	r3, r2
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003698:	f023 030c 	bic.w	r3, r3, #12
 800369c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	4313      	orrs	r3, r2
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	011a      	lsls	r2, r3, #4
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	031b      	lsls	r3, r3, #12
 80036c8:	4313      	orrs	r3, r2
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80036d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	4313      	orrs	r3, r2
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a33      	ldr	r2, [pc, #204]	; (800381c <TIM_Base_SetConfig+0xe0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a32      	ldr	r2, [pc, #200]	; (8003820 <TIM_Base_SetConfig+0xe4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00f      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003762:	d00b      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a2f      	ldr	r2, [pc, #188]	; (8003824 <TIM_Base_SetConfig+0xe8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a2e      	ldr	r2, [pc, #184]	; (8003828 <TIM_Base_SetConfig+0xec>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a2d      	ldr	r2, [pc, #180]	; (800382c <TIM_Base_SetConfig+0xf0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d108      	bne.n	800378e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a22      	ldr	r2, [pc, #136]	; (800381c <TIM_Base_SetConfig+0xe0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <TIM_Base_SetConfig+0x82>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a21      	ldr	r2, [pc, #132]	; (8003820 <TIM_Base_SetConfig+0xe4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00f      	beq.n	80037be <TIM_Base_SetConfig+0x82>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a4:	d00b      	beq.n	80037be <TIM_Base_SetConfig+0x82>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <TIM_Base_SetConfig+0xe8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <TIM_Base_SetConfig+0x82>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <TIM_Base_SetConfig+0xec>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <TIM_Base_SetConfig+0x82>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1c      	ldr	r2, [pc, #112]	; (800382c <TIM_Base_SetConfig+0xf0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d108      	bne.n	80037d0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a09      	ldr	r2, [pc, #36]	; (800381c <TIM_Base_SetConfig+0xe0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d003      	beq.n	8003804 <TIM_Base_SetConfig+0xc8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a08      	ldr	r2, [pc, #32]	; (8003820 <TIM_Base_SetConfig+0xe4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d103      	bne.n	800380c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	615a      	str	r2, [r3, #20]
}
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40013400 	.word	0x40013400
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800
 800382c:	40000c00 	.word	0x40000c00

08003830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003844:	2302      	movs	r3, #2
 8003846:	e050      	b.n	80038ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a19      	ldr	r2, [pc, #100]	; (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389e:	d00e      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a15      	ldr	r2, [pc, #84]	; (80038fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a14      	ldr	r2, [pc, #80]	; (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a12      	ldr	r2, [pc, #72]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d10c      	bne.n	80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	40012c00 	.word	0x40012c00
 80038f8:	40013400 	.word	0x40013400
 80038fc:	40000400 	.word	0x40000400
 8003900:	40000800 	.word	0x40000800
 8003904:	40000c00 	.word	0x40000c00

08003908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e03f      	b.n	800399a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd f876 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2224      	movs	r2, #36	; 0x24
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800394a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f829 	bl	80039a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003970:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003980:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039de:	f023 030c 	bic.w	r3, r3, #12
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	430b      	orrs	r3, r1
 80039ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2c      	ldr	r2, [pc, #176]	; (8003ab8 <UART_SetConfig+0x114>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d103      	bne.n	8003a14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a0c:	f7ff fc88 	bl	8003320 <HAL_RCC_GetPCLK2Freq>
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	e002      	b.n	8003a1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a14:	f7ff fc70 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8003a18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	009a      	lsls	r2, r3, #2
 8003a24:	441a      	add	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	4a22      	ldr	r2, [pc, #136]	; (8003abc <UART_SetConfig+0x118>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	0119      	lsls	r1, r3, #4
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009a      	lsls	r2, r3, #2
 8003a44:	441a      	add	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <UART_SetConfig+0x118>)
 8003a52:	fba3 0302 	umull	r0, r3, r3, r2
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2064      	movs	r0, #100	; 0x64
 8003a5a:	fb00 f303 	mul.w	r3, r0, r3
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	3332      	adds	r3, #50	; 0x32
 8003a64:	4a15      	ldr	r2, [pc, #84]	; (8003abc <UART_SetConfig+0x118>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a70:	4419      	add	r1, r3
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	009a      	lsls	r2, r3, #2
 8003a7c:	441a      	add	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a88:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <UART_SetConfig+0x118>)
 8003a8a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	2064      	movs	r0, #100	; 0x64
 8003a92:	fb00 f303 	mul.w	r3, r0, r3
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	3332      	adds	r3, #50	; 0x32
 8003a9c:	4a07      	ldr	r2, [pc, #28]	; (8003abc <UART_SetConfig+0x118>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	f003 020f 	and.w	r2, r3, #15
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	440a      	add	r2, r1
 8003aae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	51eb851f 	.word	0x51eb851f

08003ac0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	f107 0014 	add.w	r0, r7, #20
 8003ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	b004      	add	sp, #16
 8003ade:	4770      	bx	lr

08003ae0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003af0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003af4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b14:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b58:	b084      	sub	sp, #16
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	f107 0014 	add.w	r0, r7, #20
 8003b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	b004      	add	sp, #16
 8003b96:	4770      	bx	lr

08003b98 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b09b      	sub	sp, #108	; 0x6c
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	78db      	ldrb	r3, [r3, #3]
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d81f      	bhi.n	8003c0a <USB_ActivateEndpoint+0x72>
 8003bca:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <USB_ActivateEndpoint+0x38>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003be1 	.word	0x08003be1
 8003bd4:	08003bfd 	.word	0x08003bfd
 8003bd8:	08003c13 	.word	0x08003c13
 8003bdc:	08003bef 	.word	0x08003bef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003be0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003be4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003be8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003bec:	e012      	b.n	8003c14 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003bee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bf2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003bf6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003bfa:	e00b      	b.n	8003c14 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003bfc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c04:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c08:	e004      	b.n	8003c14 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003c10:	e000      	b.n	8003c14 <USB_ActivateEndpoint+0x7c>
      break;
 8003c12:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	441a      	add	r2, r3
 8003c1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	441a      	add	r2, r3
 8003c64:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	7b1b      	ldrb	r3, [r3, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f040 8149 	bne.w	8003f18 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8084 	beq.w	8003d98 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	011a      	lsls	r2, r3, #4
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	88db      	ldrh	r3, [r3, #6]
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	81fb      	strh	r3, [r7, #14]
 8003cd2:	89fb      	ldrh	r3, [r7, #14]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01b      	beq.n	8003d14 <USB_ActivateEndpoint+0x17c>
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf2:	81bb      	strh	r3, [r7, #12]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	441a      	add	r2, r3
 8003cfe:	89bb      	ldrh	r3, [r7, #12]
 8003d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	78db      	ldrb	r3, [r3, #3]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d020      	beq.n	8003d5e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d32:	813b      	strh	r3, [r7, #8]
 8003d34:	893b      	ldrh	r3, [r7, #8]
 8003d36:	f083 0320 	eor.w	r3, r3, #32
 8003d3a:	813b      	strh	r3, [r7, #8]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	441a      	add	r2, r3
 8003d46:	893b      	ldrh	r3, [r7, #8]
 8003d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	8013      	strh	r3, [r2, #0]
 8003d5c:	e27f      	b.n	800425e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d74:	817b      	strh	r3, [r7, #10]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	441a      	add	r2, r3
 8003d80:	897b      	ldrh	r3, [r7, #10]
 8003d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	8013      	strh	r3, [r2, #0]
 8003d96:	e262      	b.n	800425e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	4413      	add	r3, r2
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	011a      	lsls	r2, r3, #4
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	88db      	ldrh	r3, [r3, #6]
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dca:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	4413      	add	r3, r2
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	011a      	lsls	r2, r3, #4
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	4413      	add	r3, r2
 8003dea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dee:	623b      	str	r3, [r7, #32]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d112      	bne.n	8003e1e <USB_ActivateEndpoint+0x286>
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	801a      	strh	r2, [r3, #0]
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	801a      	strh	r2, [r3, #0]
 8003e1c:	e02f      	b.n	8003e7e <USB_ActivateEndpoint+0x2e6>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b3e      	cmp	r3, #62	; 0x3e
 8003e24:	d813      	bhi.n	8003e4e <USB_ActivateEndpoint+0x2b6>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <USB_ActivateEndpoint+0x2a8>
 8003e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	029b      	lsls	r3, r3, #10
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	801a      	strh	r2, [r3, #0]
 8003e4c:	e017      	b.n	8003e7e <USB_ActivateEndpoint+0x2e6>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	663b      	str	r3, [r7, #96]	; 0x60
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d102      	bne.n	8003e68 <USB_ActivateEndpoint+0x2d0>
 8003e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e64:	3b01      	subs	r3, #1
 8003e66:	663b      	str	r3, [r7, #96]	; 0x60
 8003e68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	029b      	lsls	r3, r3, #10
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	83fb      	strh	r3, [r7, #30]
 8003e8c:	8bfb      	ldrh	r3, [r7, #30]
 8003e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01b      	beq.n	8003ece <USB_ActivateEndpoint+0x336>
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eac:	83bb      	strh	r3, [r7, #28]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	441a      	add	r2, r3
 8003eb8:	8bbb      	ldrh	r3, [r7, #28]
 8003eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee4:	837b      	strh	r3, [r7, #26]
 8003ee6:	8b7b      	ldrh	r3, [r7, #26]
 8003ee8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003eec:	837b      	strh	r3, [r7, #26]
 8003eee:	8b7b      	ldrh	r3, [r7, #26]
 8003ef0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ef4:	837b      	strh	r3, [r7, #26]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	441a      	add	r2, r3
 8003f00:	8b7b      	ldrh	r3, [r7, #26]
 8003f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	8013      	strh	r3, [r2, #0]
 8003f16:	e1a2      	b.n	800425e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f48:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f64:	4413      	add	r3, r2
 8003f66:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	011a      	lsls	r2, r3, #4
 8003f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f76:	657b      	str	r3, [r7, #84]	; 0x54
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	891b      	ldrh	r3, [r3, #8]
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f86:	801a      	strh	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f98:	4413      	add	r3, r2
 8003f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	011a      	lsls	r2, r3, #4
 8003fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	895b      	ldrh	r3, [r3, #10]
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f040 8091 	bne.w	80040e8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003fd4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01b      	beq.n	8004016 <USB_ActivateEndpoint+0x47e>
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	441a      	add	r2, r3
 8004000:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800400a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800400e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004012:	b29b      	uxth	r3, r3
 8004014:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	873b      	strh	r3, [r7, #56]	; 0x38
 8004024:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01b      	beq.n	8004066 <USB_ActivateEndpoint+0x4ce>
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	b29b      	uxth	r3, r3
 800403c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004044:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800405a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800405e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004062:	b29b      	uxth	r3, r3
 8004064:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800407e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004080:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004084:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004086:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004088:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800408c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	441a      	add	r2, r3
 8004098:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800409a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800409e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c4:	867b      	strh	r3, [r7, #50]	; 0x32
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	441a      	add	r2, r3
 80040d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80040d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	8013      	strh	r3, [r2, #0]
 80040e6:	e0ba      	b.n	800425e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80040f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01d      	beq.n	8004140 <USB_ActivateEndpoint+0x5a8>
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	441a      	add	r2, r3
 8004128:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800412c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413c:	b29b      	uxth	r3, r3
 800413e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004150:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01d      	beq.n	8004198 <USB_ActivateEndpoint+0x600>
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	b29b      	uxth	r3, r3
 800416a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800418c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004190:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004194:	b29b      	uxth	r3, r3
 8004196:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	78db      	ldrb	r3, [r3, #3]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d024      	beq.n	80041ea <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80041ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041be:	f083 0320 	eor.w	r3, r3, #32
 80041c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	441a      	add	r2, r3
 80041d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	8013      	strh	r3, [r2, #0]
 80041e8:	e01d      	b.n	8004226 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004200:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	441a      	add	r2, r3
 800420e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800421a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004222:	b29b      	uxth	r3, r3
 8004224:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	441a      	add	r2, r3
 8004248:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800424a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800424e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425a:	b29b      	uxth	r3, r3
 800425c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800425e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004262:	4618      	mov	r0, r3
 8004264:	376c      	adds	r7, #108	; 0x6c
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800426c:	b480      	push	{r7}
 800426e:	b08d      	sub	sp, #52	; 0x34
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	7b1b      	ldrb	r3, [r3, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f040 808e 	bne.w	800439c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d044      	beq.n	8004312 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	81bb      	strh	r3, [r7, #12]
 8004296:	89bb      	ldrh	r3, [r7, #12]
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01b      	beq.n	80042d8 <USB_DeactivateEndpoint+0x6c>
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b6:	817b      	strh	r3, [r7, #10]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	441a      	add	r2, r3
 80042c2:	897b      	ldrh	r3, [r7, #10]
 80042c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ee:	813b      	strh	r3, [r7, #8]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	441a      	add	r2, r3
 80042fa:	893b      	ldrh	r3, [r7, #8]
 80042fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430c:	b29b      	uxth	r3, r3
 800430e:	8013      	strh	r3, [r2, #0]
 8004310:	e192      	b.n	8004638 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	827b      	strh	r3, [r7, #18]
 8004320:	8a7b      	ldrh	r3, [r7, #18]
 8004322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01b      	beq.n	8004362 <USB_DeactivateEndpoint+0xf6>
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004340:	823b      	strh	r3, [r7, #16]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	441a      	add	r2, r3
 800434c:	8a3b      	ldrh	r3, [r7, #16]
 800434e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800435a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435e:	b29b      	uxth	r3, r3
 8004360:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	b29b      	uxth	r3, r3
 8004370:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004378:	81fb      	strh	r3, [r7, #14]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	441a      	add	r2, r3
 8004384:	89fb      	ldrh	r3, [r7, #14]
 8004386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800438e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004396:	b29b      	uxth	r3, r3
 8004398:	8013      	strh	r3, [r2, #0]
 800439a:	e14d      	b.n	8004638 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	785b      	ldrb	r3, [r3, #1]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f040 80a5 	bne.w	80044f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	843b      	strh	r3, [r7, #32]
 80043b4:	8c3b      	ldrh	r3, [r7, #32]
 80043b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01b      	beq.n	80043f6 <USB_DeactivateEndpoint+0x18a>
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d4:	83fb      	strh	r3, [r7, #30]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	441a      	add	r2, r3
 80043e0:	8bfb      	ldrh	r3, [r7, #30]
 80043e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	83bb      	strh	r3, [r7, #28]
 8004404:	8bbb      	ldrh	r3, [r7, #28]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01b      	beq.n	8004446 <USB_DeactivateEndpoint+0x1da>
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004424:	837b      	strh	r3, [r7, #26]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	441a      	add	r2, r3
 8004430:	8b7b      	ldrh	r3, [r7, #26]
 8004432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800443a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004442:	b29b      	uxth	r3, r3
 8004444:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445c:	833b      	strh	r3, [r7, #24]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	441a      	add	r2, r3
 8004468:	8b3b      	ldrh	r3, [r7, #24]
 800446a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800446e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004476:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800447a:	b29b      	uxth	r3, r3
 800447c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b29b      	uxth	r3, r3
 800448c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004494:	82fb      	strh	r3, [r7, #22]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	441a      	add	r2, r3
 80044a0:	8afb      	ldrh	r3, [r7, #22]
 80044a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044cc:	82bb      	strh	r3, [r7, #20]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	441a      	add	r2, r3
 80044d8:	8abb      	ldrh	r3, [r7, #20]
 80044da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	8013      	strh	r3, [r2, #0]
 80044ee:	e0a3      	b.n	8004638 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80044fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01b      	beq.n	8004540 <USB_DeactivateEndpoint+0x2d4>
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	441a      	add	r2, r3
 800452a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800452c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453c:	b29b      	uxth	r3, r3
 800453e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800454e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01b      	beq.n	8004590 <USB_DeactivateEndpoint+0x324>
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	441a      	add	r2, r3
 800457a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800457c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004588:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800458c:	b29b      	uxth	r3, r3
 800458e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	441a      	add	r2, r3
 80045b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	441a      	add	r2, r3
 80045ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004616:	847b      	strh	r3, [r7, #34]	; 0x22
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	441a      	add	r2, r3
 8004622:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800462c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004634:	b29b      	uxth	r3, r3
 8004636:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3734      	adds	r7, #52	; 0x34
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b0cc      	sub	sp, #304	; 0x130
 8004648:	af00      	add	r7, sp, #0
 800464a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800464e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004652:	6018      	str	r0, [r3, #0]
 8004654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004658:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800465c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800465e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	2b01      	cmp	r3, #1
 800466c:	f041 817d 	bne.w	800596a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699a      	ldr	r2, [r3, #24]
 800467c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	429a      	cmp	r2, r3
 800468a:	d908      	bls.n	800469e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800468c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800469c:	e007      	b.n	80046ae <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800469e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80046ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	7b1b      	ldrb	r3, [r3, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d152      	bne.n	8004764 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80046be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6959      	ldr	r1, [r3, #20]
 80046ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	88da      	ldrh	r2, [r3, #6]
 80046d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80046e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80046e4:	6800      	ldr	r0, [r0, #0]
 80046e6:	f001 ff23 	bl	8006530 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80046ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80046f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046f6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004702:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470c:	b29b      	uxth	r3, r3
 800470e:	4619      	mov	r1, r3
 8004710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004714:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004718:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800471c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	440a      	add	r2, r1
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	011a      	lsls	r2, r3, #4
 8004734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004738:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4413      	add	r3, r2
 8004740:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004748:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004752:	b29a      	uxth	r2, r3
 8004754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004758:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	f001 b8b5 	b.w	80058ce <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	78db      	ldrb	r3, [r3, #3]
 8004770:	2b02      	cmp	r3, #2
 8004772:	f040 84c6 	bne.w	8005102 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800477a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6a1a      	ldr	r2, [r3, #32]
 8004782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	429a      	cmp	r2, r3
 8004790:	f240 8443 	bls.w	800501a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80047be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	441a      	add	r2, r3
 80047d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80047dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80047f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6a1a      	ldr	r2, [r3, #32]
 80047fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004800:	1ad2      	subs	r2, r2, r3
 8004802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800480e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004812:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 823e 	beq.w	8004cb2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800483a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800483e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004842:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800484e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	785b      	ldrb	r3, [r3, #1]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f040 809a 	bne.w	8004990 <USB_EPStartXfer+0x34c>
 800485c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004864:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004868:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800487e:	b29b      	uxth	r3, r3
 8004880:	4619      	mov	r1, r3
 8004882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800488a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800488e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	440a      	add	r2, r1
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800489c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	011a      	lsls	r2, r3, #4
 80048a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4413      	add	r3, r2
 80048b2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80048b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d122      	bne.n	800490e <USB_EPStartXfer+0x2ca>
 80048c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048da:	b29a      	uxth	r2, r3
 80048dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048fe:	b29a      	uxth	r2, r3
 8004900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004904:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	801a      	strh	r2, [r3, #0]
 800490c:	e079      	b.n	8004a02 <USB_EPStartXfer+0x3be>
 800490e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004912:	2b3e      	cmp	r3, #62	; 0x3e
 8004914:	d81b      	bhi.n	800494e <USB_EPStartXfer+0x30a>
 8004916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800491a:	085b      	lsrs	r3, r3, #1
 800491c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d004      	beq.n	8004936 <USB_EPStartXfer+0x2f2>
 800492c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004930:	3301      	adds	r3, #1
 8004932:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004936:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800493a:	b29b      	uxth	r3, r3
 800493c:	029b      	lsls	r3, r3, #10
 800493e:	b29a      	uxth	r2, r3
 8004940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004944:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	801a      	strh	r2, [r3, #0]
 800494c:	e059      	b.n	8004a02 <USB_EPStartXfer+0x3be>
 800494e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800495c:	f003 031f 	and.w	r3, r3, #31
 8004960:	2b00      	cmp	r3, #0
 8004962:	d104      	bne.n	800496e <USB_EPStartXfer+0x32a>
 8004964:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004968:	3b01      	subs	r3, #1
 800496a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800496e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004972:	b29b      	uxth	r3, r3
 8004974:	029b      	lsls	r3, r3, #10
 8004976:	b29b      	uxth	r3, r3
 8004978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800497c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004980:	b29a      	uxth	r2, r3
 8004982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004986:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	801a      	strh	r2, [r3, #0]
 800498e:	e038      	b.n	8004a02 <USB_EPStartXfer+0x3be>
 8004990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	785b      	ldrb	r3, [r3, #1]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d130      	bne.n	8004a02 <USB_EPStartXfer+0x3be>
 80049a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	4619      	mov	r1, r3
 80049b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049be:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	440a      	add	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	011a      	lsls	r2, r3, #4
 80049d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049da:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4413      	add	r3, r2
 80049e2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80049e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	895b      	ldrh	r3, [r3, #10]
 8004a0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6959      	ldr	r1, [r3, #20]
 8004a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a28:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a2c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a30:	6800      	ldr	r0, [r0, #0]
 8004a32:	f001 fd7d 	bl	8006530 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a46:	441a      	add	r2, r3
 8004a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6a1a      	ldr	r2, [r3, #32]
 8004a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d90f      	bls.n	8004a90 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6a1a      	ldr	r2, [r3, #32]
 8004a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a80:	1ad2      	subs	r2, r2, r3
 8004a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	621a      	str	r2, [r3, #32]
 8004a8e:	e00e      	b.n	8004aae <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	785b      	ldrb	r3, [r3, #1]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f040 809a 	bne.w	8004bf4 <USB_EPStartXfer+0x5b0>
 8004ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ac8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004acc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004aee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004af2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	440a      	add	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	011a      	lsls	r2, r3, #4
 8004b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b0e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4413      	add	r3, r2
 8004b16:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d122      	bne.n	8004b72 <USB_EPStartXfer+0x52e>
 8004b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b44:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	801a      	strh	r2, [r3, #0]
 8004b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	e083      	b.n	8004c7a <USB_EPStartXfer+0x636>
 8004b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b76:	2b3e      	cmp	r3, #62	; 0x3e
 8004b78:	d81b      	bhi.n	8004bb2 <USB_EPStartXfer+0x56e>
 8004b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <USB_EPStartXfer+0x556>
 8004b90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b94:	3301      	adds	r3, #1
 8004b96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	029b      	lsls	r3, r3, #10
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	801a      	strh	r2, [r3, #0]
 8004bb0:	e063      	b.n	8004c7a <USB_EPStartXfer+0x636>
 8004bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d104      	bne.n	8004bd2 <USB_EPStartXfer+0x58e>
 8004bc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004bd2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	029b      	lsls	r3, r3, #10
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	801a      	strh	r2, [r3, #0]
 8004bf2:	e042      	b.n	8004c7a <USB_EPStartXfer+0x636>
 8004bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	785b      	ldrb	r3, [r3, #1]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d13a      	bne.n	8004c7a <USB_EPStartXfer+0x636>
 8004c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c10:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c36:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	011a      	lsls	r2, r3, #4
 8004c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c52:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	891b      	ldrh	r3, [r3, #8]
 8004c86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6959      	ldr	r1, [r3, #20]
 8004c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ca0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ca4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004ca8:	6800      	ldr	r0, [r0, #0]
 8004caa:	f001 fc41 	bl	8006530 <USB_WritePMA>
 8004cae:	f000 be0e 	b.w	80058ce <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	785b      	ldrb	r3, [r3, #1]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d16d      	bne.n	8004d9e <USB_EPStartXfer+0x75a>
 8004cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce2:	4413      	add	r3, r2
 8004ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	011a      	lsls	r2, r3, #4
 8004cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8004cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d112      	bne.n	8004d2c <USB_EPStartXfer+0x6e8>
 8004d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d14:	801a      	strh	r2, [r3, #0]
 8004d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d28:	801a      	strh	r2, [r3, #0]
 8004d2a:	e063      	b.n	8004df4 <USB_EPStartXfer+0x7b0>
 8004d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d30:	2b3e      	cmp	r3, #62	; 0x3e
 8004d32:	d817      	bhi.n	8004d64 <USB_EPStartXfer+0x720>
 8004d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d38:	085b      	lsrs	r3, r3, #1
 8004d3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <USB_EPStartXfer+0x710>
 8004d4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d4e:	3301      	adds	r3, #1
 8004d50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	029b      	lsls	r3, r3, #10
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d60:	801a      	strh	r2, [r3, #0]
 8004d62:	e047      	b.n	8004df4 <USB_EPStartXfer+0x7b0>
 8004d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <USB_EPStartXfer+0x740>
 8004d7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	029b      	lsls	r3, r3, #10
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9a:	801a      	strh	r2, [r3, #0]
 8004d9c:	e02a      	b.n	8004df4 <USB_EPStartXfer+0x7b0>
 8004d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d122      	bne.n	8004df4 <USB_EPStartXfer+0x7b0>
 8004dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	653b      	str	r3, [r7, #80]	; 0x50
 8004dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dce:	4413      	add	r3, r2
 8004dd0:	653b      	str	r3, [r7, #80]	; 0x50
 8004dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	011a      	lsls	r2, r3, #4
 8004de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de2:	4413      	add	r3, r2
 8004de4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004de8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	891b      	ldrh	r3, [r3, #8]
 8004e00:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6959      	ldr	r1, [r3, #20]
 8004e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e1a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e1e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e22:	6800      	ldr	r0, [r0, #0]
 8004e24:	f001 fb84 	bl	8006530 <USB_WritePMA>
            ep->xfer_buff += len;
 8004e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695a      	ldr	r2, [r3, #20]
 8004e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e38:	441a      	add	r2, r3
 8004e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6a1a      	ldr	r2, [r3, #32]
 8004e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d90f      	bls.n	8004e82 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6a1a      	ldr	r2, [r3, #32]
 8004e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e72:	1ad2      	subs	r2, r2, r3
 8004e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	621a      	str	r2, [r3, #32]
 8004e80:	e00e      	b.n	8004ea0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8004eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	785b      	ldrb	r3, [r3, #1]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d16d      	bne.n	8004f98 <USB_EPStartXfer+0x954>
 8004ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ecc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	4413      	add	r3, r2
 8004ede:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	011a      	lsls	r2, r3, #4
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d112      	bne.n	8004f26 <USB_EPStartXfer+0x8e2>
 8004f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f22:	801a      	strh	r2, [r3, #0]
 8004f24:	e05d      	b.n	8004fe2 <USB_EPStartXfer+0x99e>
 8004f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f2c:	d817      	bhi.n	8004f5e <USB_EPStartXfer+0x91a>
 8004f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <USB_EPStartXfer+0x90a>
 8004f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f48:	3301      	adds	r3, #1
 8004f4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	029b      	lsls	r3, r3, #10
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	e041      	b.n	8004fe2 <USB_EPStartXfer+0x99e>
 8004f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6c:	f003 031f 	and.w	r3, r3, #31
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <USB_EPStartXfer+0x93a>
 8004f74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	029b      	lsls	r3, r3, #10
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	e024      	b.n	8004fe2 <USB_EPStartXfer+0x99e>
 8004f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	785b      	ldrb	r3, [r3, #1]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d11c      	bne.n	8004fe2 <USB_EPStartXfer+0x99e>
 8004fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbc:	4413      	add	r3, r2
 8004fbe:	643b      	str	r3, [r7, #64]	; 0x40
 8004fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	011a      	lsls	r2, r3, #4
 8004fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	895b      	ldrh	r3, [r3, #10]
 8004fee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6959      	ldr	r1, [r3, #20]
 8004ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005002:	b29b      	uxth	r3, r3
 8005004:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005008:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800500c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005010:	6800      	ldr	r0, [r0, #0]
 8005012:	f001 fa8d 	bl	8006530 <USB_WritePMA>
 8005016:	f000 bc5a 	b.w	80058ce <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800501a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800502a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800504c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005050:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005058:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800507a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005082:	b29b      	uxth	r3, r3
 8005084:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	461a      	mov	r2, r3
 80050a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050a6:	4413      	add	r3, r2
 80050a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	011a      	lsls	r2, r3, #4
 80050b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ba:	4413      	add	r3, r2
 80050bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80050c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	891b      	ldrh	r3, [r3, #8]
 80050d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6959      	ldr	r1, [r3, #20]
 80050e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80050f2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80050f6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	f001 fa18 	bl	8006530 <USB_WritePMA>
 8005100:	e3e5      	b.n	80058ce <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005106:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005128:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800512c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005130:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800513a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	441a      	add	r2, r3
 8005146:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800514a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800514e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005152:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515a:	b29b      	uxth	r3, r3
 800515c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800515e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6a1a      	ldr	r2, [r3, #32]
 800516a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800517c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005180:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 81bc 	beq.w	800551c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	785b      	ldrb	r3, [r3, #1]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d16d      	bne.n	800529e <USB_EPStartXfer+0xc5a>
 80051c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80051ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051dc:	b29b      	uxth	r3, r3
 80051de:	461a      	mov	r2, r3
 80051e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e2:	4413      	add	r3, r2
 80051e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80051e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	011a      	lsls	r2, r3, #4
 80051f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051f6:	4413      	add	r3, r2
 80051f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051fc:	677b      	str	r3, [r7, #116]	; 0x74
 80051fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d112      	bne.n	800522c <USB_EPStartXfer+0xbe8>
 8005206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005210:	b29a      	uxth	r2, r3
 8005212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005214:	801a      	strh	r2, [r3, #0]
 8005216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29b      	uxth	r3, r3
 800521c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005224:	b29a      	uxth	r2, r3
 8005226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005228:	801a      	strh	r2, [r3, #0]
 800522a:	e060      	b.n	80052ee <USB_EPStartXfer+0xcaa>
 800522c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005230:	2b3e      	cmp	r3, #62	; 0x3e
 8005232:	d817      	bhi.n	8005264 <USB_EPStartXfer+0xc20>
 8005234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005238:	085b      	lsrs	r3, r3, #1
 800523a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800523e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <USB_EPStartXfer+0xc10>
 800524a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800524e:	3301      	adds	r3, #1
 8005250:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005254:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005258:	b29b      	uxth	r3, r3
 800525a:	029b      	lsls	r3, r3, #10
 800525c:	b29a      	uxth	r2, r3
 800525e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	e044      	b.n	80052ee <USB_EPStartXfer+0xcaa>
 8005264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800526e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005272:	f003 031f 	and.w	r3, r3, #31
 8005276:	2b00      	cmp	r3, #0
 8005278:	d104      	bne.n	8005284 <USB_EPStartXfer+0xc40>
 800527a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800527e:	3b01      	subs	r3, #1
 8005280:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005284:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005288:	b29b      	uxth	r3, r3
 800528a:	029b      	lsls	r3, r3, #10
 800528c:	b29b      	uxth	r3, r3
 800528e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005296:	b29a      	uxth	r2, r3
 8005298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	e027      	b.n	80052ee <USB_EPStartXfer+0xcaa>
 800529e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d11f      	bne.n	80052ee <USB_EPStartXfer+0xcaa>
 80052ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052bc:	b29b      	uxth	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052c4:	4413      	add	r3, r2
 80052c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	011a      	lsls	r2, r3, #4
 80052d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052dc:	4413      	add	r3, r2
 80052de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80052ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	895b      	ldrh	r3, [r3, #10]
 80052fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6959      	ldr	r1, [r3, #20]
 800530a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530e:	b29b      	uxth	r3, r3
 8005310:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005314:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005318:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800531c:	6800      	ldr	r0, [r0, #0]
 800531e:	f001 f907 	bl	8006530 <USB_WritePMA>
          ep->xfer_buff += len;
 8005322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695a      	ldr	r2, [r3, #20]
 800532e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005332:	441a      	add	r2, r3
 8005334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	429a      	cmp	r2, r3
 800535a:	d90f      	bls.n	800537c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800535c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005360:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6a1a      	ldr	r2, [r3, #32]
 8005368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800536c:	1ad2      	subs	r2, r2, r3
 800536e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	621a      	str	r2, [r3, #32]
 800537a:	e00e      	b.n	800539a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800537c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800538c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005390:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2200      	movs	r2, #0
 8005398:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800539a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 8295 	beq.w	80058ce <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d16d      	bne.n	8005490 <USB_EPStartXfer+0xe4c>
 80053b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	66bb      	str	r3, [r7, #104]	; 0x68
 80053c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053d4:	4413      	add	r3, r2
 80053d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	011a      	lsls	r2, r3, #4
 80053e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053e8:	4413      	add	r3, r2
 80053ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053ee:	667b      	str	r3, [r7, #100]	; 0x64
 80053f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d112      	bne.n	800541e <USB_EPStartXfer+0xdda>
 80053f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005402:	b29a      	uxth	r2, r3
 8005404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	b29b      	uxth	r3, r3
 800540e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005416:	b29a      	uxth	r2, r3
 8005418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800541a:	801a      	strh	r2, [r3, #0]
 800541c:	e063      	b.n	80054e6 <USB_EPStartXfer+0xea2>
 800541e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005422:	2b3e      	cmp	r3, #62	; 0x3e
 8005424:	d817      	bhi.n	8005456 <USB_EPStartXfer+0xe12>
 8005426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542a:	085b      	lsrs	r3, r3, #1
 800542c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d004      	beq.n	8005446 <USB_EPStartXfer+0xe02>
 800543c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005440:	3301      	adds	r3, #1
 8005442:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544a:	b29b      	uxth	r3, r3
 800544c:	029b      	lsls	r3, r3, #10
 800544e:	b29a      	uxth	r2, r3
 8005450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005452:	801a      	strh	r2, [r3, #0]
 8005454:	e047      	b.n	80054e6 <USB_EPStartXfer+0xea2>
 8005456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005460:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	2b00      	cmp	r3, #0
 800546a:	d104      	bne.n	8005476 <USB_EPStartXfer+0xe32>
 800546c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005470:	3b01      	subs	r3, #1
 8005472:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547a:	b29b      	uxth	r3, r3
 800547c:	029b      	lsls	r3, r3, #10
 800547e:	b29b      	uxth	r3, r3
 8005480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005488:	b29a      	uxth	r2, r3
 800548a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800548c:	801a      	strh	r2, [r3, #0]
 800548e:	e02a      	b.n	80054e6 <USB_EPStartXfer+0xea2>
 8005490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d122      	bne.n	80054e6 <USB_EPStartXfer+0xea2>
 80054a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	673b      	str	r3, [r7, #112]	; 0x70
 80054ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054c0:	4413      	add	r3, r2
 80054c2:	673b      	str	r3, [r7, #112]	; 0x70
 80054c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	011a      	lsls	r2, r3, #4
 80054d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054d4:	4413      	add	r3, r2
 80054d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	891b      	ldrh	r3, [r3, #8]
 80054f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6959      	ldr	r1, [r3, #20]
 8005502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005506:	b29b      	uxth	r3, r3
 8005508:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800550c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005510:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005514:	6800      	ldr	r0, [r0, #0]
 8005516:	f001 f80b 	bl	8006530 <USB_WritePMA>
 800551a:	e1d8      	b.n	80058ce <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800551c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d178      	bne.n	800561e <USB_EPStartXfer+0xfda>
 800552c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005530:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800553a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005548:	b29b      	uxth	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005550:	4413      	add	r3, r2
 8005552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	011a      	lsls	r2, r3, #4
 8005564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005568:	4413      	add	r3, r2
 800556a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800556e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d116      	bne.n	80055a8 <USB_EPStartXfer+0xf64>
 800557a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	b29b      	uxth	r3, r3
 8005582:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005586:	b29a      	uxth	r2, r3
 8005588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800559a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800559e:	b29a      	uxth	r2, r3
 80055a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	e06b      	b.n	8005680 <USB_EPStartXfer+0x103c>
 80055a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ac:	2b3e      	cmp	r3, #62	; 0x3e
 80055ae:	d818      	bhi.n	80055e2 <USB_EPStartXfer+0xf9e>
 80055b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b4:	085b      	lsrs	r3, r3, #1
 80055b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d004      	beq.n	80055d0 <USB_EPStartXfer+0xf8c>
 80055c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055ca:	3301      	adds	r3, #1
 80055cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	029b      	lsls	r3, r3, #10
 80055d8:	b29a      	uxth	r2, r3
 80055da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055de:	801a      	strh	r2, [r3, #0]
 80055e0:	e04e      	b.n	8005680 <USB_EPStartXfer+0x103c>
 80055e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f0:	f003 031f 	and.w	r3, r3, #31
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d104      	bne.n	8005602 <USB_EPStartXfer+0xfbe>
 80055f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055fc:	3b01      	subs	r3, #1
 80055fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005602:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005606:	b29b      	uxth	r3, r3
 8005608:	029b      	lsls	r3, r3, #10
 800560a:	b29b      	uxth	r3, r3
 800560c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005614:	b29a      	uxth	r2, r3
 8005616:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	e030      	b.n	8005680 <USB_EPStartXfer+0x103c>
 800561e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d128      	bne.n	8005680 <USB_EPStartXfer+0x103c>
 800562e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800563c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005640:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800564a:	b29b      	uxth	r3, r3
 800564c:	461a      	mov	r2, r3
 800564e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005652:	4413      	add	r3, r2
 8005654:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	011a      	lsls	r2, r3, #4
 8005666:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800566a:	4413      	add	r3, r2
 800566c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005670:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005678:	b29a      	uxth	r2, r3
 800567a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800567e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	891b      	ldrh	r3, [r3, #8]
 800568c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6959      	ldr	r1, [r3, #20]
 800569c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056a6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056aa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056ae:	6800      	ldr	r0, [r0, #0]
 80056b0:	f000 ff3e 	bl	8006530 <USB_WritePMA>
          ep->xfer_buff += len;
 80056b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695a      	ldr	r2, [r3, #20]
 80056c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c4:	441a      	add	r2, r3
 80056c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6a1a      	ldr	r2, [r3, #32]
 80056de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d90f      	bls.n	800570e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80056ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6a1a      	ldr	r2, [r3, #32]
 80056fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056fe:	1ad2      	subs	r2, r2, r3
 8005700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	621a      	str	r2, [r3, #32]
 800570c:	e00e      	b.n	800572c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800570e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800571e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2200      	movs	r2, #0
 800572a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800572c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80cc 	beq.w	80058ce <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	785b      	ldrb	r3, [r3, #1]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d178      	bne.n	8005846 <USB_EPStartXfer+0x1202>
 8005754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005770:	b29b      	uxth	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005778:	4413      	add	r3, r2
 800577a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800577e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	011a      	lsls	r2, r3, #4
 800578c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005790:	4413      	add	r3, r2
 8005792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800579a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d116      	bne.n	80057d0 <USB_EPStartXfer+0x118c>
 80057a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	e064      	b.n	800589a <USB_EPStartXfer+0x1256>
 80057d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d4:	2b3e      	cmp	r3, #62	; 0x3e
 80057d6:	d818      	bhi.n	800580a <USB_EPStartXfer+0x11c6>
 80057d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <USB_EPStartXfer+0x11b4>
 80057ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057f2:	3301      	adds	r3, #1
 80057f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	029b      	lsls	r3, r3, #10
 8005800:	b29a      	uxth	r2, r3
 8005802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005806:	801a      	strh	r2, [r3, #0]
 8005808:	e047      	b.n	800589a <USB_EPStartXfer+0x1256>
 800580a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800580e:	095b      	lsrs	r3, r3, #5
 8005810:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	2b00      	cmp	r3, #0
 800581e:	d104      	bne.n	800582a <USB_EPStartXfer+0x11e6>
 8005820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005824:	3b01      	subs	r3, #1
 8005826:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800582a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800582e:	b29b      	uxth	r3, r3
 8005830:	029b      	lsls	r3, r3, #10
 8005832:	b29b      	uxth	r3, r3
 8005834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800583c:	b29a      	uxth	r2, r3
 800583e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005842:	801a      	strh	r2, [r3, #0]
 8005844:	e029      	b.n	800589a <USB_EPStartXfer+0x1256>
 8005846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	785b      	ldrb	r3, [r3, #1]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d121      	bne.n	800589a <USB_EPStartXfer+0x1256>
 8005856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005864:	b29b      	uxth	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800586c:	4413      	add	r3, r2
 800586e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	011a      	lsls	r2, r3, #4
 8005880:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005884:	4413      	add	r3, r2
 8005886:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800588a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800588e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005892:	b29a      	uxth	r2, r3
 8005894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005898:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800589a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	895b      	ldrh	r3, [r3, #10]
 80058a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6959      	ldr	r1, [r3, #20]
 80058b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058c8:	6800      	ldr	r0, [r0, #0]
 80058ca:	f000 fe31 	bl	8006530 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80058ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058f0:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80058f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058fc:	8013      	strh	r3, [r2, #0]
 80058fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005902:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005906:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800590a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800590e:	8812      	ldrh	r2, [r2, #0]
 8005910:	f082 0210 	eor.w	r2, r2, #16
 8005914:	801a      	strh	r2, [r3, #0]
 8005916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800591e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005922:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005926:	8812      	ldrh	r2, [r2, #0]
 8005928:	f082 0220 	eor.w	r2, r2, #32
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005932:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	441a      	add	r2, r3
 8005948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800595a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005962:	b29b      	uxth	r3, r3
 8005964:	8013      	strh	r3, [r2, #0]
 8005966:	f000 bc9f 	b.w	80062a8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800596a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	7b1b      	ldrb	r3, [r3, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	f040 80ae 	bne.w	8005ad8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	429a      	cmp	r2, r3
 8005996:	d917      	bls.n	80059c8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80059a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699a      	ldr	r2, [r3, #24]
 80059b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b8:	1ad2      	subs	r2, r2, r3
 80059ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	619a      	str	r2, [r3, #24]
 80059c6:	e00e      	b.n	80059e6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80059c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80059d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80059e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	011a      	lsls	r2, r3, #4
 8005a1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a22:	4413      	add	r3, r2
 8005a24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d116      	bne.n	8005a62 <USB_EPStartXfer+0x141e>
 8005a34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a46:	801a      	strh	r2, [r3, #0]
 8005a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a5e:	801a      	strh	r2, [r3, #0]
 8005a60:	e3e8      	b.n	8006234 <USB_EPStartXfer+0x1bf0>
 8005a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a66:	2b3e      	cmp	r3, #62	; 0x3e
 8005a68:	d818      	bhi.n	8005a9c <USB_EPStartXfer+0x1458>
 8005a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <USB_EPStartXfer+0x1446>
 8005a80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a84:	3301      	adds	r3, #1
 8005a86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	029b      	lsls	r3, r3, #10
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	e3cb      	b.n	8006234 <USB_EPStartXfer+0x1bf0>
 8005a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aaa:	f003 031f 	and.w	r3, r3, #31
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d104      	bne.n	8005abc <USB_EPStartXfer+0x1478>
 8005ab2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005abc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	029b      	lsls	r3, r3, #10
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ad4:	801a      	strh	r2, [r3, #0]
 8005ad6:	e3ad      	b.n	8006234 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005adc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	78db      	ldrb	r3, [r3, #3]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	f040 8200 	bne.w	8005eea <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	785b      	ldrb	r3, [r3, #1]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f040 8091 	bne.w	8005c1e <USB_EPStartXfer+0x15da>
 8005afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b20:	4413      	add	r3, r2
 8005b22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	011a      	lsls	r2, r3, #4
 8005b34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b38:	4413      	add	r3, r2
 8005b3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d116      	bne.n	8005b80 <USB_EPStartXfer+0x153c>
 8005b52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b64:	801a      	strh	r2, [r3, #0]
 8005b66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	e083      	b.n	8005c88 <USB_EPStartXfer+0x1644>
 8005b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b8e:	d820      	bhi.n	8005bd2 <USB_EPStartXfer+0x158e>
 8005b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d004      	beq.n	8005bc0 <USB_EPStartXfer+0x157c>
 8005bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bba:	3301      	adds	r3, #1
 8005bbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	029b      	lsls	r3, r3, #10
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	e05a      	b.n	8005c88 <USB_EPStartXfer+0x1644>
 8005bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f003 031f 	and.w	r3, r3, #31
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d104      	bne.n	8005c02 <USB_EPStartXfer+0x15be>
 8005bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	029b      	lsls	r3, r3, #10
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	e034      	b.n	8005c88 <USB_EPStartXfer+0x1644>
 8005c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d12c      	bne.n	8005c88 <USB_EPStartXfer+0x1644>
 8005c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c52:	4413      	add	r3, r2
 8005c54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	011a      	lsls	r2, r3, #4
 8005c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c86:	801a      	strh	r2, [r3, #0]
 8005c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f040 8091 	bne.w	8005dca <USB_EPStartXfer+0x1786>
 8005ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ccc:	4413      	add	r3, r2
 8005cce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	011a      	lsls	r2, r3, #4
 8005ce0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d116      	bne.n	8005d2c <USB_EPStartXfer+0x16e8>
 8005cfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d10:	801a      	strh	r2, [r3, #0]
 8005d12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	e07c      	b.n	8005e26 <USB_EPStartXfer+0x17e2>
 8005d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b3e      	cmp	r3, #62	; 0x3e
 8005d3a:	d820      	bhi.n	8005d7e <USB_EPStartXfer+0x173a>
 8005d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	085b      	lsrs	r3, r3, #1
 8005d4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d004      	beq.n	8005d6c <USB_EPStartXfer+0x1728>
 8005d62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d66:	3301      	adds	r3, #1
 8005d68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	029b      	lsls	r3, r3, #10
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	e053      	b.n	8005e26 <USB_EPStartXfer+0x17e2>
 8005d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	095b      	lsrs	r3, r3, #5
 8005d8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f003 031f 	and.w	r3, r3, #31
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d104      	bne.n	8005dae <USB_EPStartXfer+0x176a>
 8005da4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005da8:	3b01      	subs	r3, #1
 8005daa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	029b      	lsls	r3, r3, #10
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	e02d      	b.n	8005e26 <USB_EPStartXfer+0x17e2>
 8005dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	785b      	ldrb	r3, [r3, #1]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d125      	bne.n	8005e26 <USB_EPStartXfer+0x17e2>
 8005dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005df0:	4413      	add	r3, r2
 8005df2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	011a      	lsls	r2, r3, #4
 8005e04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e08:	4413      	add	r3, r2
 8005e0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e24:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 81fe 	beq.w	8006234 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e58:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <USB_EPStartXfer+0x182c>
 8005e64:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10d      	bne.n	8005e8c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e70:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f040 81db 	bne.w	8006234 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e7e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f040 81d4 	bne.w	8006234 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	441a      	add	r2, r3
 8005ed0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	8013      	strh	r3, [r2, #0]
 8005ee8:	e1a4      	b.n	8006234 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	78db      	ldrb	r3, [r3, #3]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	f040 819a 	bne.w	8006230 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699a      	ldr	r2, [r3, #24]
 8005f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d917      	bls.n	8005f48 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	699a      	ldr	r2, [r3, #24]
 8005f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f38:	1ad2      	subs	r2, r2, r3
 8005f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	619a      	str	r2, [r3, #24]
 8005f46:	e00e      	b.n	8005f66 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2200      	movs	r2, #0
 8005f64:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	785b      	ldrb	r3, [r3, #1]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d178      	bne.n	8006068 <USB_EPStartXfer+0x1a24>
 8005f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	011a      	lsls	r2, r3, #4
 8005fae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d116      	bne.n	8005ff2 <USB_EPStartXfer+0x19ae>
 8005fc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fd6:	801a      	strh	r2, [r3, #0]
 8005fd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fee:	801a      	strh	r2, [r3, #0]
 8005ff0:	e06b      	b.n	80060ca <USB_EPStartXfer+0x1a86>
 8005ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ff8:	d818      	bhi.n	800602c <USB_EPStartXfer+0x19e8>
 8005ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ffe:	085b      	lsrs	r3, r3, #1
 8006000:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <USB_EPStartXfer+0x19d6>
 8006010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006014:	3301      	adds	r3, #1
 8006016:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800601a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800601e:	b29b      	uxth	r3, r3
 8006020:	029b      	lsls	r3, r3, #10
 8006022:	b29a      	uxth	r2, r3
 8006024:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006028:	801a      	strh	r2, [r3, #0]
 800602a:	e04e      	b.n	80060ca <USB_EPStartXfer+0x1a86>
 800602c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006030:	095b      	lsrs	r3, r3, #5
 8006032:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603a:	f003 031f 	and.w	r3, r3, #31
 800603e:	2b00      	cmp	r3, #0
 8006040:	d104      	bne.n	800604c <USB_EPStartXfer+0x1a08>
 8006042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006046:	3b01      	subs	r3, #1
 8006048:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800604c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006050:	b29b      	uxth	r3, r3
 8006052:	029b      	lsls	r3, r3, #10
 8006054:	b29b      	uxth	r3, r3
 8006056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800605e:	b29a      	uxth	r2, r3
 8006060:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	e030      	b.n	80060ca <USB_EPStartXfer+0x1a86>
 8006068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d128      	bne.n	80060ca <USB_EPStartXfer+0x1a86>
 8006078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006094:	b29b      	uxth	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609c:	4413      	add	r3, r2
 800609e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	011a      	lsls	r2, r3, #4
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b4:	4413      	add	r3, r2
 80060b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d178      	bne.n	80061da <USB_EPStartXfer+0x1b96>
 80060e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006104:	b29b      	uxth	r3, r3
 8006106:	461a      	mov	r2, r3
 8006108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800610c:	4413      	add	r3, r2
 800610e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	011a      	lsls	r2, r3, #4
 8006120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006124:	4413      	add	r3, r2
 8006126:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800612a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800612e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006132:	2b00      	cmp	r3, #0
 8006134:	d116      	bne.n	8006164 <USB_EPStartXfer+0x1b20>
 8006136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006142:	b29a      	uxth	r2, r3
 8006144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800615a:	b29a      	uxth	r2, r3
 800615c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006160:	801a      	strh	r2, [r3, #0]
 8006162:	e067      	b.n	8006234 <USB_EPStartXfer+0x1bf0>
 8006164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006168:	2b3e      	cmp	r3, #62	; 0x3e
 800616a:	d818      	bhi.n	800619e <USB_EPStartXfer+0x1b5a>
 800616c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006170:	085b      	lsrs	r3, r3, #1
 8006172:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d004      	beq.n	800618c <USB_EPStartXfer+0x1b48>
 8006182:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006186:	3301      	adds	r3, #1
 8006188:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800618c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006190:	b29b      	uxth	r3, r3
 8006192:	029b      	lsls	r3, r3, #10
 8006194:	b29a      	uxth	r2, r3
 8006196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800619a:	801a      	strh	r2, [r3, #0]
 800619c:	e04a      	b.n	8006234 <USB_EPStartXfer+0x1bf0>
 800619e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <USB_EPStartXfer+0x1b7a>
 80061b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061b8:	3b01      	subs	r3, #1
 80061ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	029b      	lsls	r3, r3, #10
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	e02c      	b.n	8006234 <USB_EPStartXfer+0x1bf0>
 80061da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d124      	bne.n	8006234 <USB_EPStartXfer+0x1bf0>
 80061ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006200:	4413      	add	r3, r2
 8006202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	011a      	lsls	r2, r3, #4
 8006214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006218:	4413      	add	r3, r2
 800621a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800621e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006226:	b29a      	uxth	r2, r3
 8006228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	e001      	b.n	8006234 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e03a      	b.n	80062aa <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006238:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800625e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006262:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006266:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800626a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800626e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006272:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	441a      	add	r2, r3
 8006290:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800629c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d020      	beq.n	8006308 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062dc:	81bb      	strh	r3, [r7, #12]
 80062de:	89bb      	ldrh	r3, [r7, #12]
 80062e0:	f083 0310 	eor.w	r3, r3, #16
 80062e4:	81bb      	strh	r3, [r7, #12]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	441a      	add	r2, r3
 80062f0:	89bb      	ldrh	r3, [r7, #12]
 80062f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006302:	b29b      	uxth	r3, r3
 8006304:	8013      	strh	r3, [r2, #0]
 8006306:	e01f      	b.n	8006348 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	81fb      	strh	r3, [r7, #14]
 8006320:	89fb      	ldrh	r3, [r7, #14]
 8006322:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006326:	81fb      	strh	r3, [r7, #14]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	441a      	add	r2, r3
 8006332:	89fb      	ldrh	r3, [r7, #14]
 8006334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800633c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006344:	b29b      	uxth	r3, r3
 8006346:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr

08006354 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	7b1b      	ldrb	r3, [r3, #12]
 8006362:	2b00      	cmp	r3, #0
 8006364:	f040 809d 	bne.w	80064a2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d04c      	beq.n	800640a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	823b      	strh	r3, [r7, #16]
 800637e:	8a3b      	ldrh	r3, [r7, #16]
 8006380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01b      	beq.n	80063c0 <USB_EPClearStall+0x6c>
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639e:	81fb      	strh	r3, [r7, #14]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	441a      	add	r2, r3
 80063aa:	89fb      	ldrh	r3, [r7, #14]
 80063ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063bc:	b29b      	uxth	r3, r3
 80063be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	78db      	ldrb	r3, [r3, #3]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d06c      	beq.n	80064a2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063de:	81bb      	strh	r3, [r7, #12]
 80063e0:	89bb      	ldrh	r3, [r7, #12]
 80063e2:	f083 0320 	eor.w	r3, r3, #32
 80063e6:	81bb      	strh	r3, [r7, #12]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	441a      	add	r2, r3
 80063f2:	89bb      	ldrh	r3, [r7, #12]
 80063f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006404:	b29b      	uxth	r3, r3
 8006406:	8013      	strh	r3, [r2, #0]
 8006408:	e04b      	b.n	80064a2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	82fb      	strh	r3, [r7, #22]
 8006418:	8afb      	ldrh	r3, [r7, #22]
 800641a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d01b      	beq.n	800645a <USB_EPClearStall+0x106>
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006438:	82bb      	strh	r3, [r7, #20]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	441a      	add	r2, r3
 8006444:	8abb      	ldrh	r3, [r7, #20]
 8006446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006456:	b29b      	uxth	r3, r3
 8006458:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800646c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006470:	827b      	strh	r3, [r7, #18]
 8006472:	8a7b      	ldrh	r3, [r7, #18]
 8006474:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006478:	827b      	strh	r3, [r7, #18]
 800647a:	8a7b      	ldrh	r3, [r7, #18]
 800647c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006480:	827b      	strh	r3, [r7, #18]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	8a7b      	ldrh	r3, [r7, #18]
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr

080064ae <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d103      	bne.n	80064c8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2280      	movs	r2, #128	; 0x80
 80064c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr

080064d4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr

080064e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bc80      	pop	{r7}
 80064fa:	4770      	bx	lr

080064fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800650a:	b29b      	uxth	r3, r3
 800650c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800650e:	68fb      	ldr	r3, [r7, #12]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	bc80      	pop	{r7}
 8006518:	4770      	bx	lr

0800651a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800651a:	b480      	push	{r7}
 800651c:	b083      	sub	sp, #12
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr

08006530 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006530:	b480      	push	{r7}
 8006532:	b08d      	sub	sp, #52	; 0x34
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	4611      	mov	r1, r2
 800653c:	461a      	mov	r2, r3
 800653e:	460b      	mov	r3, r1
 8006540:	80fb      	strh	r3, [r7, #6]
 8006542:	4613      	mov	r3, r2
 8006544:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006546:	88bb      	ldrh	r3, [r7, #4]
 8006548:	3301      	adds	r3, #1
 800654a:	085b      	lsrs	r3, r3, #1
 800654c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006556:	88fb      	ldrh	r3, [r7, #6]
 8006558:	005a      	lsls	r2, r3, #1
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006568:	e01e      	b.n	80065a8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	3301      	adds	r3, #1
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	b29b      	uxth	r3, r3
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	b29b      	uxth	r3, r3
 8006580:	461a      	mov	r2, r3
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	b29a      	uxth	r2, r3
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	3302      	adds	r3, #2
 8006594:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	3302      	adds	r3, #2
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	3301      	adds	r3, #1
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80065a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a4:	3b01      	subs	r3, #1
 80065a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1dd      	bne.n	800656a <USB_WritePMA+0x3a>
  }
}
 80065ae:	bf00      	nop
 80065b0:	bf00      	nop
 80065b2:	3734      	adds	r7, #52	; 0x34
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bc80      	pop	{r7}
 80065b8:	4770      	bx	lr

080065ba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b08b      	sub	sp, #44	; 0x2c
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	4611      	mov	r1, r2
 80065c6:	461a      	mov	r2, r3
 80065c8:	460b      	mov	r3, r1
 80065ca:	80fb      	strh	r3, [r7, #6]
 80065cc:	4613      	mov	r3, r2
 80065ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80065d0:	88bb      	ldrh	r3, [r7, #4]
 80065d2:	085b      	lsrs	r3, r3, #1
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065e0:	88fb      	ldrh	r3, [r7, #6]
 80065e2:	005a      	lsls	r2, r3, #1
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ec:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
 80065f2:	e01b      	b.n	800662c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	3302      	adds	r3, #2
 8006600:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	b2da      	uxtb	r2, r3
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	3301      	adds	r3, #1
 800660e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	0a1b      	lsrs	r3, r3, #8
 8006614:	b2da      	uxtb	r2, r3
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	3301      	adds	r3, #1
 800661e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	3302      	adds	r3, #2
 8006624:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	3b01      	subs	r3, #1
 800662a:	627b      	str	r3, [r7, #36]	; 0x24
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e0      	bne.n	80065f4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006632:	88bb      	ldrh	r3, [r7, #4]
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d007      	beq.n	800664e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	b2da      	uxtb	r2, r3
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	701a      	strb	r2, [r3, #0]
  }
}
 800664e:	bf00      	nop
 8006650:	372c      	adds	r7, #44	; 0x2c
 8006652:	46bd      	mov	sp, r7
 8006654:	bc80      	pop	{r7}
 8006656:	4770      	bx	lr

08006658 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	7c1b      	ldrb	r3, [r3, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d115      	bne.n	800669c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006674:	2202      	movs	r2, #2
 8006676:	2181      	movs	r1, #129	; 0x81
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f003 f824 	bl	80096c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006688:	2202      	movs	r2, #2
 800668a:	2101      	movs	r1, #1
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f003 f81a 	bl	80096c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800669a:	e012      	b.n	80066c2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800669c:	2340      	movs	r3, #64	; 0x40
 800669e:	2202      	movs	r2, #2
 80066a0:	2181      	movs	r1, #129	; 0x81
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f003 f80f 	bl	80096c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066ae:	2340      	movs	r3, #64	; 0x40
 80066b0:	2202      	movs	r2, #2
 80066b2:	2101      	movs	r1, #1
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f003 f806 	bl	80096c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066c2:	2308      	movs	r3, #8
 80066c4:	2203      	movs	r2, #3
 80066c6:	2182      	movs	r1, #130	; 0x82
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f002 fffc 	bl	80096c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80066d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80066d8:	f003 f91c 	bl	8009914 <USBD_static_malloc>
 80066dc:	4602      	mov	r2, r0
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80066ee:	2301      	movs	r3, #1
 80066f0:	73fb      	strb	r3, [r7, #15]
 80066f2:	e026      	b.n	8006742 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2200      	movs	r2, #0
 800670a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2200      	movs	r2, #0
 8006712:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	7c1b      	ldrb	r3, [r3, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006728:	2101      	movs	r1, #1
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f003 f8bc 	bl	80098a8 <USBD_LL_PrepareReceive>
 8006730:	e007      	b.n	8006742 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006738:	2340      	movs	r3, #64	; 0x40
 800673a:	2101      	movs	r1, #1
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f003 f8b3 	bl	80098a8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006742:	7bfb      	ldrb	r3, [r7, #15]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	460b      	mov	r3, r1
 8006756:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800675c:	2181      	movs	r1, #129	; 0x81
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f002 ffd7 	bl	8009712 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800676a:	2101      	movs	r1, #1
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f002 ffd0 	bl	8009712 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800677a:	2182      	movs	r1, #130	; 0x82
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f002 ffc8 	bl	8009712 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00e      	beq.n	80067b0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a2:	4618      	mov	r0, r3
 80067a4:	f003 f8c2 	bl	800992c <USBD_static_free>
    pdev->pClassData = NULL;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b086      	sub	sp, #24
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ca:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d039      	beq.n	8006858 <USBD_CDC_Setup+0x9e>
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	d17f      	bne.n	80068e8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	88db      	ldrh	r3, [r3, #6]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d029      	beq.n	8006844 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	b25b      	sxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	da11      	bge.n	800681e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006806:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	88d2      	ldrh	r2, [r2, #6]
 800680c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800680e:	6939      	ldr	r1, [r7, #16]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	88db      	ldrh	r3, [r3, #6]
 8006814:	461a      	mov	r2, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 f9d9 	bl	8007bce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800681c:	e06b      	b.n	80068f6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	785a      	ldrb	r2, [r3, #1]
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	88db      	ldrh	r3, [r3, #6]
 800682c:	b2da      	uxtb	r2, r3
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006834:	6939      	ldr	r1, [r7, #16]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	88db      	ldrh	r3, [r3, #6]
 800683a:	461a      	mov	r2, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 f9f4 	bl	8007c2a <USBD_CtlPrepareRx>
      break;
 8006842:	e058      	b.n	80068f6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	7850      	ldrb	r0, [r2, #1]
 8006850:	2200      	movs	r2, #0
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	4798      	blx	r3
      break;
 8006856:	e04e      	b.n	80068f6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	785b      	ldrb	r3, [r3, #1]
 800685c:	2b0b      	cmp	r3, #11
 800685e:	d02e      	beq.n	80068be <USBD_CDC_Setup+0x104>
 8006860:	2b0b      	cmp	r3, #11
 8006862:	dc38      	bgt.n	80068d6 <USBD_CDC_Setup+0x11c>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <USBD_CDC_Setup+0xb4>
 8006868:	2b0a      	cmp	r3, #10
 800686a:	d014      	beq.n	8006896 <USBD_CDC_Setup+0xdc>
 800686c:	e033      	b.n	80068d6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006874:	2b03      	cmp	r3, #3
 8006876:	d107      	bne.n	8006888 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006878:	f107 030c 	add.w	r3, r7, #12
 800687c:	2202      	movs	r2, #2
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 f9a4 	bl	8007bce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006886:	e02e      	b.n	80068e6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f001 f935 	bl	8007afa <USBD_CtlError>
            ret = USBD_FAIL;
 8006890:	2302      	movs	r3, #2
 8006892:	75fb      	strb	r3, [r7, #23]
          break;
 8006894:	e027      	b.n	80068e6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800689c:	2b03      	cmp	r3, #3
 800689e:	d107      	bne.n	80068b0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80068a0:	f107 030f 	add.w	r3, r7, #15
 80068a4:	2201      	movs	r2, #1
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 f990 	bl	8007bce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068ae:	e01a      	b.n	80068e6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 f921 	bl	8007afa <USBD_CtlError>
            ret = USBD_FAIL;
 80068b8:	2302      	movs	r3, #2
 80068ba:	75fb      	strb	r3, [r7, #23]
          break;
 80068bc:	e013      	b.n	80068e6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d00d      	beq.n	80068e4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 f915 	bl	8007afa <USBD_CtlError>
            ret = USBD_FAIL;
 80068d0:	2302      	movs	r3, #2
 80068d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80068d4:	e006      	b.n	80068e4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 f90e 	bl	8007afa <USBD_CtlError>
          ret = USBD_FAIL;
 80068de:	2302      	movs	r3, #2
 80068e0:	75fb      	strb	r3, [r7, #23]
          break;
 80068e2:	e000      	b.n	80068e6 <USBD_CDC_Setup+0x12c>
          break;
 80068e4:	bf00      	nop
      }
      break;
 80068e6:	e006      	b.n	80068f6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 f905 	bl	8007afa <USBD_CtlError>
      ret = USBD_FAIL;
 80068f0:	2302      	movs	r3, #2
 80068f2:	75fb      	strb	r3, [r7, #23]
      break;
 80068f4:	bf00      	nop
  }

  return ret;
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006912:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800691a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d03a      	beq.n	800699c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006926:	78fa      	ldrb	r2, [r7, #3]
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	440b      	add	r3, r1
 8006934:	331c      	adds	r3, #28
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d029      	beq.n	8006990 <USBD_CDC_DataIn+0x90>
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	331c      	adds	r3, #28
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	78f9      	ldrb	r1, [r7, #3]
 8006950:	68b8      	ldr	r0, [r7, #8]
 8006952:	460b      	mov	r3, r1
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	440b      	add	r3, r1
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	4403      	add	r3, r0
 800695c:	3338      	adds	r3, #56	; 0x38
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	fbb2 f1f3 	udiv	r1, r2, r3
 8006964:	fb01 f303 	mul.w	r3, r1, r3
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d110      	bne.n	8006990 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800696e:	78fa      	ldrb	r2, [r7, #3]
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	440b      	add	r3, r1
 800697c:	331c      	adds	r3, #28
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006982:	78f9      	ldrb	r1, [r7, #3]
 8006984:	2300      	movs	r3, #0
 8006986:	2200      	movs	r2, #0
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f002 ff6a 	bl	8009862 <USBD_LL_Transmit>
 800698e:	e003      	b.n	8006998 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	e000      	b.n	800699e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800699c:	2302      	movs	r3, #2
  }
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	460b      	mov	r3, r1
 80069b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069ba:	78fb      	ldrb	r3, [r7, #3]
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f002 ff95 	bl	80098ee <USBD_LL_GetRxDataSize>
 80069c4:	4602      	mov	r2, r0
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00d      	beq.n	80069f2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80069ea:	4611      	mov	r1, r2
 80069ec:	4798      	blx	r3

    return USBD_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	e000      	b.n	80069f4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80069f2:	2302      	movs	r3, #2
  }
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a0a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d015      	beq.n	8006a42 <USBD_CDC_EP0_RxReady+0x46>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a1c:	2bff      	cmp	r3, #255	; 0xff
 8006a1e:	d010      	beq.n	8006a42 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006a2e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a36:	b292      	uxth	r2, r2
 8006a38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	22ff      	movs	r2, #255	; 0xff
 8006a3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2243      	movs	r2, #67	; 0x43
 8006a58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006a5a:	4b03      	ldr	r3, [pc, #12]	; (8006a68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bc80      	pop	{r7}
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	20000094 	.word	0x20000094

08006a6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2243      	movs	r2, #67	; 0x43
 8006a78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006a7a:	4b03      	ldr	r3, [pc, #12]	; (8006a88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	20000050 	.word	0x20000050

08006a8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2243      	movs	r2, #67	; 0x43
 8006a98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006a9a:	4b03      	ldr	r3, [pc, #12]	; (8006aa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bc80      	pop	{r7}
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	200000d8 	.word	0x200000d8

08006aac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	220a      	movs	r2, #10
 8006ab8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006aba:	4b03      	ldr	r3, [pc, #12]	; (8006ac8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	2000000c 	.word	0x2000000c

08006acc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr

08006af8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	4613      	mov	r3, r2
 8006b04:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b16:	88fa      	ldrh	r2, [r7, #6]
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	371c      	adds	r7, #28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr

08006b2a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr

08006b50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d017      	beq.n	8006b9a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	7c1b      	ldrb	r3, [r3, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d109      	bne.n	8006b86 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f002 fe92 	bl	80098a8 <USBD_LL_PrepareReceive>
 8006b84:	e007      	b.n	8006b96 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b8c:	2340      	movs	r3, #64	; 0x40
 8006b8e:	2101      	movs	r1, #1
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f002 fe89 	bl	80098a8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	e000      	b.n	8006b9c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006b9a:	2302      	movs	r3, #2
  }
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e01a      	b.n	8006bf2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	79fa      	ldrb	r2, [r7, #7]
 8006be8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f002 fcf6 	bl	80095dc <USBD_LL_Init>

  return USBD_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d006      	beq.n	8006c1c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]
 8006c1a:	e001      	b.n	8006c20 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr

08006c2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f002 fd2b 	bl	8009690 <USBD_LL_Start>

  return USBD_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr

08006c58 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c64:	2302      	movs	r3, #2
 8006c66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00c      	beq.n	8006c8c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b082      	sub	sp, #8
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	78fa      	ldrb	r2, [r7, #3]
 8006cac:	4611      	mov	r1, r2
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3

  return USBD_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fed7 	bl	8007a82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006cf0:	f003 031f 	and.w	r3, r3, #31
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d016      	beq.n	8006d26 <USBD_LL_SetupStage+0x6a>
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d81c      	bhi.n	8006d36 <USBD_LL_SetupStage+0x7a>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <USBD_LL_SetupStage+0x4a>
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d008      	beq.n	8006d16 <USBD_LL_SetupStage+0x5a>
 8006d04:	e017      	b.n	8006d36 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f9ca 	bl	80070a8 <USBD_StdDevReq>
      break;
 8006d14:	e01a      	b.n	8006d4c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa2c 	bl	800717c <USBD_StdItfReq>
      break;
 8006d24:	e012      	b.n	8006d4c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fa6c 	bl	800720c <USBD_StdEPReq>
      break;
 8006d34:	e00a      	b.n	8006d4c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f002 fd03 	bl	8009750 <USBD_LL_StallEP>
      break;
 8006d4a:	bf00      	nop
  }

  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b086      	sub	sp, #24
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	607a      	str	r2, [r7, #4]
 8006d62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d64:	7afb      	ldrb	r3, [r7, #11]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d14b      	bne.n	8006e02 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d70:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d134      	bne.n	8006de6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d919      	bls.n	8006dbc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	1ad2      	subs	r2, r2, r3
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d203      	bcs.n	8006daa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	e002      	b.n	8006db0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 ff56 	bl	8007c66 <USBD_CtlContinueRx>
 8006dba:	e038      	b.n	8006e2e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00a      	beq.n	8006dde <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d105      	bne.n	8006dde <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 ff53 	bl	8007c8a <USBD_CtlSendStatus>
 8006de4:	e023      	b.n	8006e2e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dec:	2b05      	cmp	r3, #5
 8006dee:	d11e      	bne.n	8006e2e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006df8:	2100      	movs	r1, #0
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f002 fca8 	bl	8009750 <USBD_LL_StallEP>
 8006e00:	e015      	b.n	8006e2e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00d      	beq.n	8006e2a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d108      	bne.n	8006e2a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	7afa      	ldrb	r2, [r7, #11]
 8006e22:	4611      	mov	r1, r2
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	4798      	blx	r3
 8006e28:	e001      	b.n	8006e2e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e000      	b.n	8006e30 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	460b      	mov	r3, r1
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e46:	7afb      	ldrb	r3, [r7, #11]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d17f      	bne.n	8006f4c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3314      	adds	r3, #20
 8006e50:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d15c      	bne.n	8006f16 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d915      	bls.n	8006e94 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	1ad2      	subs	r2, r2, r3
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 fec0 	bl	8007c06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e86:	2300      	movs	r3, #0
 8006e88:	2200      	movs	r2, #0
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f002 fd0b 	bl	80098a8 <USBD_LL_PrepareReceive>
 8006e92:	e04e      	b.n	8006f32 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	6912      	ldr	r2, [r2, #16]
 8006e9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ea0:	fb01 f202 	mul.w	r2, r1, r2
 8006ea4:	1a9b      	subs	r3, r3, r2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d11c      	bne.n	8006ee4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d316      	bcc.n	8006ee4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d20f      	bcs.n	8006ee4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fe9c 	bl	8007c06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2100      	movs	r1, #0
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f002 fce3 	bl	80098a8 <USBD_LL_PrepareReceive>
 8006ee2:	e026      	b.n	8006f32 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00a      	beq.n	8006f06 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d105      	bne.n	8006f06 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006f06:	2180      	movs	r1, #128	; 0x80
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f002 fc21 	bl	8009750 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 fece 	bl	8007cb0 <USBD_CtlReceiveStatus>
 8006f14:	e00d      	b.n	8006f32 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	d004      	beq.n	8006f2a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d103      	bne.n	8006f32 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006f2a:	2180      	movs	r1, #128	; 0x80
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f002 fc0f 	bl	8009750 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d11d      	bne.n	8006f78 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f7ff fe81 	bl	8006c44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f4a:	e015      	b.n	8006f78 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00d      	beq.n	8006f74 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d108      	bne.n	8006f74 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	7afa      	ldrb	r2, [r7, #11]
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	4798      	blx	r3
 8006f72:	e001      	b.n	8006f78 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f74:	2302      	movs	r3, #2
 8006f76:	e000      	b.n	8006f7a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f8a:	2340      	movs	r3, #64	; 0x40
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	2100      	movs	r1, #0
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f002 fb98 	bl	80096c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2240      	movs	r2, #64	; 0x40
 8006fa2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fa6:	2340      	movs	r3, #64	; 0x40
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2180      	movs	r1, #128	; 0x80
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f002 fb8a 	bl	80096c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2240      	movs	r2, #64	; 0x40
 8006fbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d009      	beq.n	8006ffa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6852      	ldr	r2, [r2, #4]
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	4798      	blx	r3
  }

  return USBD_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	78fa      	ldrb	r2, [r7, #3]
 8007014:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr

08007022 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2204      	movs	r2, #4
 800703a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr

0800704a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007058:	2b04      	cmp	r3, #4
 800705a:	d105      	bne.n	8007068 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr

08007074 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007082:	2b03      	cmp	r3, #3
 8007084:	d10b      	bne.n	800709e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070be:	2b40      	cmp	r3, #64	; 0x40
 80070c0:	d005      	beq.n	80070ce <USBD_StdDevReq+0x26>
 80070c2:	2b40      	cmp	r3, #64	; 0x40
 80070c4:	d84f      	bhi.n	8007166 <USBD_StdDevReq+0xbe>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d009      	beq.n	80070de <USBD_StdDevReq+0x36>
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d14b      	bne.n	8007166 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	4798      	blx	r3
      break;
 80070dc:	e048      	b.n	8007170 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	2b09      	cmp	r3, #9
 80070e4:	d839      	bhi.n	800715a <USBD_StdDevReq+0xb2>
 80070e6:	a201      	add	r2, pc, #4	; (adr r2, 80070ec <USBD_StdDevReq+0x44>)
 80070e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ec:	0800713d 	.word	0x0800713d
 80070f0:	08007151 	.word	0x08007151
 80070f4:	0800715b 	.word	0x0800715b
 80070f8:	08007147 	.word	0x08007147
 80070fc:	0800715b 	.word	0x0800715b
 8007100:	0800711f 	.word	0x0800711f
 8007104:	08007115 	.word	0x08007115
 8007108:	0800715b 	.word	0x0800715b
 800710c:	08007133 	.word	0x08007133
 8007110:	08007129 	.word	0x08007129
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f9dc 	bl	80074d4 <USBD_GetDescriptor>
          break;
 800711c:	e022      	b.n	8007164 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fb3f 	bl	80077a4 <USBD_SetAddress>
          break;
 8007126:	e01d      	b.n	8007164 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fb7e 	bl	800782c <USBD_SetConfig>
          break;
 8007130:	e018      	b.n	8007164 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fc07 	bl	8007948 <USBD_GetConfig>
          break;
 800713a:	e013      	b.n	8007164 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fc37 	bl	80079b2 <USBD_GetStatus>
          break;
 8007144:	e00e      	b.n	8007164 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fc65 	bl	8007a18 <USBD_SetFeature>
          break;
 800714e:	e009      	b.n	8007164 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fc74 	bl	8007a40 <USBD_ClrFeature>
          break;
 8007158:	e004      	b.n	8007164 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fccc 	bl	8007afa <USBD_CtlError>
          break;
 8007162:	bf00      	nop
      }
      break;
 8007164:	e004      	b.n	8007170 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fcc6 	bl	8007afa <USBD_CtlError>
      break;
 800716e:	bf00      	nop
  }

  return ret;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop

0800717c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007192:	2b40      	cmp	r3, #64	; 0x40
 8007194:	d005      	beq.n	80071a2 <USBD_StdItfReq+0x26>
 8007196:	2b40      	cmp	r3, #64	; 0x40
 8007198:	d82e      	bhi.n	80071f8 <USBD_StdItfReq+0x7c>
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <USBD_StdItfReq+0x26>
 800719e:	2b20      	cmp	r3, #32
 80071a0:	d12a      	bne.n	80071f8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a8:	3b01      	subs	r3, #1
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d81d      	bhi.n	80071ea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	889b      	ldrh	r3, [r3, #4]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d813      	bhi.n	80071e0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	88db      	ldrh	r3, [r3, #6]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d110      	bne.n	80071f4 <USBD_StdItfReq+0x78>
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10d      	bne.n	80071f4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fd56 	bl	8007c8a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071de:	e009      	b.n	80071f4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fc89 	bl	8007afa <USBD_CtlError>
          break;
 80071e8:	e004      	b.n	80071f4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fc84 	bl	8007afa <USBD_CtlError>
          break;
 80071f2:	e000      	b.n	80071f6 <USBD_StdItfReq+0x7a>
          break;
 80071f4:	bf00      	nop
      }
      break;
 80071f6:	e004      	b.n	8007202 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fc7d 	bl	8007afa <USBD_CtlError>
      break;
 8007200:	bf00      	nop
  }

  return USBD_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	889b      	ldrh	r3, [r3, #4]
 800721e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007228:	2b40      	cmp	r3, #64	; 0x40
 800722a:	d007      	beq.n	800723c <USBD_StdEPReq+0x30>
 800722c:	2b40      	cmp	r3, #64	; 0x40
 800722e:	f200 8146 	bhi.w	80074be <USBD_StdEPReq+0x2b2>
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <USBD_StdEPReq+0x40>
 8007236:	2b20      	cmp	r3, #32
 8007238:	f040 8141 	bne.w	80074be <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	4798      	blx	r3
      break;
 800724a:	e13d      	b.n	80074c8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007254:	2b20      	cmp	r3, #32
 8007256:	d10a      	bne.n	800726e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
 8007266:	4603      	mov	r3, r0
 8007268:	73fb      	strb	r3, [r7, #15]

        return ret;
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	e12d      	b.n	80074ca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	785b      	ldrb	r3, [r3, #1]
 8007272:	2b03      	cmp	r3, #3
 8007274:	d007      	beq.n	8007286 <USBD_StdEPReq+0x7a>
 8007276:	2b03      	cmp	r3, #3
 8007278:	f300 811b 	bgt.w	80074b2 <USBD_StdEPReq+0x2a6>
 800727c:	2b00      	cmp	r3, #0
 800727e:	d072      	beq.n	8007366 <USBD_StdEPReq+0x15a>
 8007280:	2b01      	cmp	r3, #1
 8007282:	d03a      	beq.n	80072fa <USBD_StdEPReq+0xee>
 8007284:	e115      	b.n	80074b2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800728c:	2b02      	cmp	r3, #2
 800728e:	d002      	beq.n	8007296 <USBD_StdEPReq+0x8a>
 8007290:	2b03      	cmp	r3, #3
 8007292:	d015      	beq.n	80072c0 <USBD_StdEPReq+0xb4>
 8007294:	e02b      	b.n	80072ee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00c      	beq.n	80072b6 <USBD_StdEPReq+0xaa>
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	2b80      	cmp	r3, #128	; 0x80
 80072a0:	d009      	beq.n	80072b6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f002 fa52 	bl	8009750 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80072ac:	2180      	movs	r1, #128	; 0x80
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f002 fa4e 	bl	8009750 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072b4:	e020      	b.n	80072f8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fc1e 	bl	8007afa <USBD_CtlError>
              break;
 80072be:	e01b      	b.n	80072f8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	885b      	ldrh	r3, [r3, #2]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10e      	bne.n	80072e6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <USBD_StdEPReq+0xda>
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	2b80      	cmp	r3, #128	; 0x80
 80072d2:	d008      	beq.n	80072e6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	88db      	ldrh	r3, [r3, #6]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d104      	bne.n	80072e6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f002 fa35 	bl	8009750 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fccf 	bl	8007c8a <USBD_CtlSendStatus>

              break;
 80072ec:	e004      	b.n	80072f8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fc02 	bl	8007afa <USBD_CtlError>
              break;
 80072f6:	bf00      	nop
          }
          break;
 80072f8:	e0e0      	b.n	80074bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007300:	2b02      	cmp	r3, #2
 8007302:	d002      	beq.n	800730a <USBD_StdEPReq+0xfe>
 8007304:	2b03      	cmp	r3, #3
 8007306:	d015      	beq.n	8007334 <USBD_StdEPReq+0x128>
 8007308:	e026      	b.n	8007358 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00c      	beq.n	800732a <USBD_StdEPReq+0x11e>
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	2b80      	cmp	r3, #128	; 0x80
 8007314:	d009      	beq.n	800732a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007316:	7bbb      	ldrb	r3, [r7, #14]
 8007318:	4619      	mov	r1, r3
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f002 fa18 	bl	8009750 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007320:	2180      	movs	r1, #128	; 0x80
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f002 fa14 	bl	8009750 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007328:	e01c      	b.n	8007364 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fbe4 	bl	8007afa <USBD_CtlError>
              break;
 8007332:	e017      	b.n	8007364 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	885b      	ldrh	r3, [r3, #2]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d112      	bne.n	8007362 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007342:	2b00      	cmp	r3, #0
 8007344:	d004      	beq.n	8007350 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007346:	7bbb      	ldrb	r3, [r7, #14]
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f002 fa1f 	bl	800978e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fc9a 	bl	8007c8a <USBD_CtlSendStatus>
              }
              break;
 8007356:	e004      	b.n	8007362 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fbcd 	bl	8007afa <USBD_CtlError>
              break;
 8007360:	e000      	b.n	8007364 <USBD_StdEPReq+0x158>
              break;
 8007362:	bf00      	nop
          }
          break;
 8007364:	e0aa      	b.n	80074bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800736c:	2b02      	cmp	r3, #2
 800736e:	d002      	beq.n	8007376 <USBD_StdEPReq+0x16a>
 8007370:	2b03      	cmp	r3, #3
 8007372:	d032      	beq.n	80073da <USBD_StdEPReq+0x1ce>
 8007374:	e097      	b.n	80074a6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007376:	7bbb      	ldrb	r3, [r7, #14]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d007      	beq.n	800738c <USBD_StdEPReq+0x180>
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	2b80      	cmp	r3, #128	; 0x80
 8007380:	d004      	beq.n	800738c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fbb8 	bl	8007afa <USBD_CtlError>
                break;
 800738a:	e091      	b.n	80074b0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800738c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007390:	2b00      	cmp	r3, #0
 8007392:	da0b      	bge.n	80073ac <USBD_StdEPReq+0x1a0>
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	3310      	adds	r3, #16
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	4413      	add	r3, r2
 80073a8:	3304      	adds	r3, #4
 80073aa:	e00b      	b.n	80073c4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	4413      	add	r3, r2
 80073c2:	3304      	adds	r3, #4
 80073c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2202      	movs	r2, #2
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fbfb 	bl	8007bce <USBD_CtlSendData>
              break;
 80073d8:	e06a      	b.n	80074b0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	da11      	bge.n	8007406 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	f003 020f 	and.w	r2, r3, #15
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	4613      	mov	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	440b      	add	r3, r1
 80073f4:	3318      	adds	r3, #24
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d117      	bne.n	800742c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fb7b 	bl	8007afa <USBD_CtlError>
                  break;
 8007404:	e054      	b.n	80074b0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	f003 020f 	and.w	r2, r3, #15
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	440b      	add	r3, r1
 8007418:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d104      	bne.n	800742c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fb68 	bl	8007afa <USBD_CtlError>
                  break;
 800742a:	e041      	b.n	80074b0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800742c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007430:	2b00      	cmp	r3, #0
 8007432:	da0b      	bge.n	800744c <USBD_StdEPReq+0x240>
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	3310      	adds	r3, #16
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	4413      	add	r3, r2
 8007448:	3304      	adds	r3, #4
 800744a:	e00b      	b.n	8007464 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	4413      	add	r3, r2
 8007462:	3304      	adds	r3, #4
 8007464:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <USBD_StdEPReq+0x266>
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	2b80      	cmp	r3, #128	; 0x80
 8007470:	d103      	bne.n	800747a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	e00e      	b.n	8007498 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f002 f9a4 	bl	80097cc <USBD_LL_IsStallEP>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2201      	movs	r2, #1
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	e002      	b.n	8007498 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2202      	movs	r2, #2
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fb95 	bl	8007bce <USBD_CtlSendData>
              break;
 80074a4:	e004      	b.n	80074b0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fb26 	bl	8007afa <USBD_CtlError>
              break;
 80074ae:	bf00      	nop
          }
          break;
 80074b0:	e004      	b.n	80074bc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fb20 	bl	8007afa <USBD_CtlError>
          break;
 80074ba:	bf00      	nop
      }
      break;
 80074bc:	e004      	b.n	80074c8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fb1a 	bl	8007afa <USBD_CtlError>
      break;
 80074c6:	bf00      	nop
  }

  return ret;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
	...

080074d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074de:	2300      	movs	r3, #0
 80074e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	885b      	ldrh	r3, [r3, #2]
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	3b01      	subs	r3, #1
 80074f4:	2b06      	cmp	r3, #6
 80074f6:	f200 8128 	bhi.w	800774a <USBD_GetDescriptor+0x276>
 80074fa:	a201      	add	r2, pc, #4	; (adr r2, 8007500 <USBD_GetDescriptor+0x2c>)
 80074fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007500:	0800751d 	.word	0x0800751d
 8007504:	08007535 	.word	0x08007535
 8007508:	08007575 	.word	0x08007575
 800750c:	0800774b 	.word	0x0800774b
 8007510:	0800774b 	.word	0x0800774b
 8007514:	080076eb 	.word	0x080076eb
 8007518:	08007717 	.word	0x08007717
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	7c12      	ldrb	r2, [r2, #16]
 8007528:	f107 0108 	add.w	r1, r7, #8
 800752c:	4610      	mov	r0, r2
 800752e:	4798      	blx	r3
 8007530:	60f8      	str	r0, [r7, #12]
      break;
 8007532:	e112      	b.n	800775a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	7c1b      	ldrb	r3, [r3, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10d      	bne.n	8007558 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007544:	f107 0208 	add.w	r2, r7, #8
 8007548:	4610      	mov	r0, r2
 800754a:	4798      	blx	r3
 800754c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3301      	adds	r3, #1
 8007552:	2202      	movs	r2, #2
 8007554:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007556:	e100      	b.n	800775a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	f107 0208 	add.w	r2, r7, #8
 8007564:	4610      	mov	r0, r2
 8007566:	4798      	blx	r3
 8007568:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3301      	adds	r3, #1
 800756e:	2202      	movs	r2, #2
 8007570:	701a      	strb	r2, [r3, #0]
      break;
 8007572:	e0f2      	b.n	800775a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	885b      	ldrh	r3, [r3, #2]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b05      	cmp	r3, #5
 800757c:	f200 80ac 	bhi.w	80076d8 <USBD_GetDescriptor+0x204>
 8007580:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <USBD_GetDescriptor+0xb4>)
 8007582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007586:	bf00      	nop
 8007588:	080075a1 	.word	0x080075a1
 800758c:	080075d5 	.word	0x080075d5
 8007590:	08007609 	.word	0x08007609
 8007594:	0800763d 	.word	0x0800763d
 8007598:	08007671 	.word	0x08007671
 800759c:	080076a5 	.word	0x080076a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	7c12      	ldrb	r2, [r2, #16]
 80075b8:	f107 0108 	add.w	r1, r7, #8
 80075bc:	4610      	mov	r0, r2
 80075be:	4798      	blx	r3
 80075c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075c2:	e091      	b.n	80076e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fa97 	bl	8007afa <USBD_CtlError>
            err++;
 80075cc:	7afb      	ldrb	r3, [r7, #11]
 80075ce:	3301      	adds	r3, #1
 80075d0:	72fb      	strb	r3, [r7, #11]
          break;
 80075d2:	e089      	b.n	80076e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	7c12      	ldrb	r2, [r2, #16]
 80075ec:	f107 0108 	add.w	r1, r7, #8
 80075f0:	4610      	mov	r0, r2
 80075f2:	4798      	blx	r3
 80075f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075f6:	e077      	b.n	80076e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fa7d 	bl	8007afa <USBD_CtlError>
            err++;
 8007600:	7afb      	ldrb	r3, [r7, #11]
 8007602:	3301      	adds	r3, #1
 8007604:	72fb      	strb	r3, [r7, #11]
          break;
 8007606:	e06f      	b.n	80076e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	7c12      	ldrb	r2, [r2, #16]
 8007620:	f107 0108 	add.w	r1, r7, #8
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
 8007628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800762a:	e05d      	b.n	80076e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa63 	bl	8007afa <USBD_CtlError>
            err++;
 8007634:	7afb      	ldrb	r3, [r7, #11]
 8007636:	3301      	adds	r3, #1
 8007638:	72fb      	strb	r3, [r7, #11]
          break;
 800763a:	e055      	b.n	80076e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00b      	beq.n	8007660 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	7c12      	ldrb	r2, [r2, #16]
 8007654:	f107 0108 	add.w	r1, r7, #8
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
 800765c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800765e:	e043      	b.n	80076e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fa49 	bl	8007afa <USBD_CtlError>
            err++;
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	3301      	adds	r3, #1
 800766c:	72fb      	strb	r3, [r7, #11]
          break;
 800766e:	e03b      	b.n	80076e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00b      	beq.n	8007694 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	7c12      	ldrb	r2, [r2, #16]
 8007688:	f107 0108 	add.w	r1, r7, #8
 800768c:	4610      	mov	r0, r2
 800768e:	4798      	blx	r3
 8007690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007692:	e029      	b.n	80076e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fa2f 	bl	8007afa <USBD_CtlError>
            err++;
 800769c:	7afb      	ldrb	r3, [r7, #11]
 800769e:	3301      	adds	r3, #1
 80076a0:	72fb      	strb	r3, [r7, #11]
          break;
 80076a2:	e021      	b.n	80076e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	7c12      	ldrb	r2, [r2, #16]
 80076bc:	f107 0108 	add.w	r1, r7, #8
 80076c0:	4610      	mov	r0, r2
 80076c2:	4798      	blx	r3
 80076c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076c6:	e00f      	b.n	80076e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fa15 	bl	8007afa <USBD_CtlError>
            err++;
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	3301      	adds	r3, #1
 80076d4:	72fb      	strb	r3, [r7, #11]
          break;
 80076d6:	e007      	b.n	80076e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa0d 	bl	8007afa <USBD_CtlError>
          err++;
 80076e0:	7afb      	ldrb	r3, [r7, #11]
 80076e2:	3301      	adds	r3, #1
 80076e4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80076e6:	e038      	b.n	800775a <USBD_GetDescriptor+0x286>
 80076e8:	e037      	b.n	800775a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	7c1b      	ldrb	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d109      	bne.n	8007706 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fa:	f107 0208 	add.w	r2, r7, #8
 80076fe:	4610      	mov	r0, r2
 8007700:	4798      	blx	r3
 8007702:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007704:	e029      	b.n	800775a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f9f6 	bl	8007afa <USBD_CtlError>
        err++;
 800770e:	7afb      	ldrb	r3, [r7, #11]
 8007710:	3301      	adds	r3, #1
 8007712:	72fb      	strb	r3, [r7, #11]
      break;
 8007714:	e021      	b.n	800775a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	7c1b      	ldrb	r3, [r3, #16]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10d      	bne.n	800773a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	f107 0208 	add.w	r2, r7, #8
 800772a:	4610      	mov	r0, r2
 800772c:	4798      	blx	r3
 800772e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3301      	adds	r3, #1
 8007734:	2207      	movs	r2, #7
 8007736:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007738:	e00f      	b.n	800775a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f9dc 	bl	8007afa <USBD_CtlError>
        err++;
 8007742:	7afb      	ldrb	r3, [r7, #11]
 8007744:	3301      	adds	r3, #1
 8007746:	72fb      	strb	r3, [r7, #11]
      break;
 8007748:	e007      	b.n	800775a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f9d4 	bl	8007afa <USBD_CtlError>
      err++;
 8007752:	7afb      	ldrb	r3, [r7, #11]
 8007754:	3301      	adds	r3, #1
 8007756:	72fb      	strb	r3, [r7, #11]
      break;
 8007758:	bf00      	nop
  }

  if (err != 0U)
 800775a:	7afb      	ldrb	r3, [r7, #11]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d11c      	bne.n	800779a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007760:	893b      	ldrh	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d011      	beq.n	800778a <USBD_GetDescriptor+0x2b6>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	88db      	ldrh	r3, [r3, #6]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00d      	beq.n	800778a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	88da      	ldrh	r2, [r3, #6]
 8007772:	893b      	ldrh	r3, [r7, #8]
 8007774:	4293      	cmp	r3, r2
 8007776:	bf28      	it	cs
 8007778:	4613      	movcs	r3, r2
 800777a:	b29b      	uxth	r3, r3
 800777c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800777e:	893b      	ldrh	r3, [r7, #8]
 8007780:	461a      	mov	r2, r3
 8007782:	68f9      	ldr	r1, [r7, #12]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fa22 	bl	8007bce <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	88db      	ldrh	r3, [r3, #6]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d104      	bne.n	800779c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fa79 	bl	8007c8a <USBD_CtlSendStatus>
 8007798:	e000      	b.n	800779c <USBD_GetDescriptor+0x2c8>
    return;
 800779a:	bf00      	nop
    }
  }
}
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop

080077a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	889b      	ldrh	r3, [r3, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d130      	bne.n	8007818 <USBD_SetAddress+0x74>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	88db      	ldrh	r3, [r3, #6]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d12c      	bne.n	8007818 <USBD_SetAddress+0x74>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	885b      	ldrh	r3, [r3, #2]
 80077c2:	2b7f      	cmp	r3, #127	; 0x7f
 80077c4:	d828      	bhi.n	8007818 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	885b      	ldrh	r3, [r3, #2]
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d104      	bne.n	80077e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f98b 	bl	8007afa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e4:	e01d      	b.n	8007822 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	7bfa      	ldrb	r2, [r7, #15]
 80077ea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f002 f816 	bl	8009824 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fa46 	bl	8007c8a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d004      	beq.n	800780e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2202      	movs	r2, #2
 8007808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800780c:	e009      	b.n	8007822 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007816:	e004      	b.n	8007822 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f96d 	bl	8007afa <USBD_CtlError>
  }
}
 8007820:	bf00      	nop
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	885b      	ldrh	r3, [r3, #2]
 800783a:	b2da      	uxtb	r2, r3
 800783c:	4b41      	ldr	r3, [pc, #260]	; (8007944 <USBD_SetConfig+0x118>)
 800783e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007840:	4b40      	ldr	r3, [pc, #256]	; (8007944 <USBD_SetConfig+0x118>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d904      	bls.n	8007852 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f955 	bl	8007afa <USBD_CtlError>
 8007850:	e075      	b.n	800793e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007858:	2b02      	cmp	r3, #2
 800785a:	d002      	beq.n	8007862 <USBD_SetConfig+0x36>
 800785c:	2b03      	cmp	r3, #3
 800785e:	d023      	beq.n	80078a8 <USBD_SetConfig+0x7c>
 8007860:	e062      	b.n	8007928 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007862:	4b38      	ldr	r3, [pc, #224]	; (8007944 <USBD_SetConfig+0x118>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d01a      	beq.n	80078a0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800786a:	4b36      	ldr	r3, [pc, #216]	; (8007944 <USBD_SetConfig+0x118>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2203      	movs	r2, #3
 8007878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800787c:	4b31      	ldr	r3, [pc, #196]	; (8007944 <USBD_SetConfig+0x118>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff f9e8 	bl	8006c58 <USBD_SetClassConfig>
 8007888:	4603      	mov	r3, r0
 800788a:	2b02      	cmp	r3, #2
 800788c:	d104      	bne.n	8007898 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f932 	bl	8007afa <USBD_CtlError>
            return;
 8007896:	e052      	b.n	800793e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f9f6 	bl	8007c8a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800789e:	e04e      	b.n	800793e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f9f2 	bl	8007c8a <USBD_CtlSendStatus>
        break;
 80078a6:	e04a      	b.n	800793e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80078a8:	4b26      	ldr	r3, [pc, #152]	; (8007944 <USBD_SetConfig+0x118>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d112      	bne.n	80078d6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80078b8:	4b22      	ldr	r3, [pc, #136]	; (8007944 <USBD_SetConfig+0x118>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80078c2:	4b20      	ldr	r3, [pc, #128]	; (8007944 <USBD_SetConfig+0x118>)
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7ff f9e4 	bl	8006c96 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f9db 	bl	8007c8a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80078d4:	e033      	b.n	800793e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80078d6:	4b1b      	ldr	r3, [pc, #108]	; (8007944 <USBD_SetConfig+0x118>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d01d      	beq.n	8007920 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff f9d2 	bl	8006c96 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80078f2:	4b14      	ldr	r3, [pc, #80]	; (8007944 <USBD_SetConfig+0x118>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80078fc:	4b11      	ldr	r3, [pc, #68]	; (8007944 <USBD_SetConfig+0x118>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff f9a8 	bl	8006c58 <USBD_SetClassConfig>
 8007908:	4603      	mov	r3, r0
 800790a:	2b02      	cmp	r3, #2
 800790c:	d104      	bne.n	8007918 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f8f2 	bl	8007afa <USBD_CtlError>
            return;
 8007916:	e012      	b.n	800793e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f9b6 	bl	8007c8a <USBD_CtlSendStatus>
        break;
 800791e:	e00e      	b.n	800793e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f9b2 	bl	8007c8a <USBD_CtlSendStatus>
        break;
 8007926:	e00a      	b.n	800793e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f8e5 	bl	8007afa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007930:	4b04      	ldr	r3, [pc, #16]	; (8007944 <USBD_SetConfig+0x118>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff f9ad 	bl	8006c96 <USBD_ClrClassConfig>
        break;
 800793c:	bf00      	nop
    }
  }
}
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	2000057c 	.word	0x2000057c

08007948 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	88db      	ldrh	r3, [r3, #6]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d004      	beq.n	8007964 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f8cc 	bl	8007afa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007962:	e022      	b.n	80079aa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796a:	2b02      	cmp	r3, #2
 800796c:	dc02      	bgt.n	8007974 <USBD_GetConfig+0x2c>
 800796e:	2b00      	cmp	r3, #0
 8007970:	dc03      	bgt.n	800797a <USBD_GetConfig+0x32>
 8007972:	e015      	b.n	80079a0 <USBD_GetConfig+0x58>
 8007974:	2b03      	cmp	r3, #3
 8007976:	d00b      	beq.n	8007990 <USBD_GetConfig+0x48>
 8007978:	e012      	b.n	80079a0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	3308      	adds	r3, #8
 8007984:	2201      	movs	r2, #1
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f920 	bl	8007bce <USBD_CtlSendData>
        break;
 800798e:	e00c      	b.n	80079aa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3304      	adds	r3, #4
 8007994:	2201      	movs	r2, #1
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f918 	bl	8007bce <USBD_CtlSendData>
        break;
 800799e:	e004      	b.n	80079aa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f8a9 	bl	8007afa <USBD_CtlError>
        break;
 80079a8:	bf00      	nop
}
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c2:	3b01      	subs	r3, #1
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d81e      	bhi.n	8007a06 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	88db      	ldrh	r3, [r3, #6]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d004      	beq.n	80079da <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f891 	bl	8007afa <USBD_CtlError>
        break;
 80079d8:	e01a      	b.n	8007a10 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d005      	beq.n	80079f6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f043 0202 	orr.w	r2, r3, #2
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	330c      	adds	r3, #12
 80079fa:	2202      	movs	r2, #2
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f8e5 	bl	8007bce <USBD_CtlSendData>
      break;
 8007a04:	e004      	b.n	8007a10 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f876 	bl	8007afa <USBD_CtlError>
      break;
 8007a0e:	bf00      	nop
  }
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	885b      	ldrh	r3, [r3, #2]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d106      	bne.n	8007a38 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f929 	bl	8007c8a <USBD_CtlSendStatus>
  }
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a50:	3b01      	subs	r3, #1
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d80b      	bhi.n	8007a6e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	885b      	ldrh	r3, [r3, #2]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d10c      	bne.n	8007a78 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f90f 	bl	8007c8a <USBD_CtlSendStatus>
      }
      break;
 8007a6c:	e004      	b.n	8007a78 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f842 	bl	8007afa <USBD_CtlError>
      break;
 8007a76:	e000      	b.n	8007a7a <USBD_ClrFeature+0x3a>
      break;
 8007a78:	bf00      	nop
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781a      	ldrb	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	785a      	ldrb	r2, [r3, #1]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	3302      	adds	r3, #2
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	3303      	adds	r3, #3
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	3304      	adds	r3, #4
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	3305      	adds	r3, #5
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	4413      	add	r3, r2
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	3306      	adds	r3, #6
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	3307      	adds	r3, #7
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	021b      	lsls	r3, r3, #8
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	4413      	add	r3, r2
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	80da      	strh	r2, [r3, #6]

}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr

08007afa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b082      	sub	sp, #8
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007b04:	2180      	movs	r1, #128	; 0x80
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f001 fe22 	bl	8009750 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f001 fe1e 	bl	8009750 <USBD_LL_StallEP>
}
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d032      	beq.n	8007b98 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 f834 	bl	8007ba0 <USBD_GetLen>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	75fa      	strb	r2, [r7, #23]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	4413      	add	r3, r2
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	7812      	ldrb	r2, [r2, #0]
 8007b56:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
 8007b5a:	1c5a      	adds	r2, r3, #1
 8007b5c:	75fa      	strb	r2, [r7, #23]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	4413      	add	r3, r2
 8007b64:	2203      	movs	r2, #3
 8007b66:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007b68:	e012      	b.n	8007b90 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	60fa      	str	r2, [r7, #12]
 8007b70:	7dfa      	ldrb	r2, [r7, #23]
 8007b72:	1c51      	adds	r1, r2, #1
 8007b74:	75f9      	strb	r1, [r7, #23]
 8007b76:	4611      	mov	r1, r2
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	440a      	add	r2, r1
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
 8007b82:	1c5a      	adds	r2, r3, #1
 8007b84:	75fa      	strb	r2, [r7, #23]
 8007b86:	461a      	mov	r2, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e8      	bne.n	8007b6a <USBD_GetString+0x4e>
    }
  }
}
 8007b98:	bf00      	nop
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007bac:	e005      	b.n	8007bba <USBD_GetLen+0x1a>
  {
    len++;
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f5      	bne.n	8007bae <USBD_GetLen+0xe>
  }

  return len;
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bc80      	pop	{r7}
 8007bcc:	4770      	bx	lr

08007bce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2202      	movs	r2, #2
 8007be0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007be4:	88fa      	ldrh	r2, [r7, #6]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007bea:	88fa      	ldrh	r2, [r7, #6]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bf0:	88fb      	ldrh	r3, [r7, #6]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f001 fe33 	bl	8009862 <USBD_LL_Transmit>

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	4613      	mov	r3, r2
 8007c12:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	2100      	movs	r1, #0
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f001 fe21 	bl	8009862 <USBD_LL_Transmit>

  return USBD_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	4613      	mov	r3, r2
 8007c36:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c40:	88fa      	ldrh	r2, [r7, #6]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007c48:	88fa      	ldrh	r2, [r7, #6]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c50:	88fb      	ldrh	r3, [r7, #6]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	2100      	movs	r1, #0
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f001 fe26 	bl	80098a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	4613      	mov	r3, r2
 8007c72:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c74:	88fb      	ldrh	r3, [r7, #6]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	2100      	movs	r1, #0
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f001 fe14 	bl	80098a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2204      	movs	r2, #4
 8007c96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 fdde 	bl	8009862 <USBD_LL_Transmit>

  return USBD_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2205      	movs	r2, #5
 8007cbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f001 fdee 	bl	80098a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b085      	sub	sp, #20
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	4603      	mov	r3, r0
 8007cde:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007ce4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ce8:	2b84      	cmp	r3, #132	; 0x84
 8007cea:	d005      	beq.n	8007cf8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007cec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3303      	adds	r3, #3
 8007cf6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bc80      	pop	{r7}
 8007d02:	4770      	bx	lr

08007d04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007d08:	f000 fad0 	bl	80082ac <vTaskStartScheduler>
  
  return osOK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007d12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d14:	b089      	sub	sp, #36	; 0x24
 8007d16:	af04      	add	r7, sp, #16
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d020      	beq.n	8007d66 <osThreadCreate+0x54>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d01c      	beq.n	8007d66 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685c      	ldr	r4, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681d      	ldr	r5, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	691e      	ldr	r6, [r3, #16]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff ffc9 	bl	8007cd6 <makeFreeRtosPriority>
 8007d44:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d4e:	9202      	str	r2, [sp, #8]
 8007d50:	9301      	str	r3, [sp, #4]
 8007d52:	9100      	str	r1, [sp, #0]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	4632      	mov	r2, r6
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 f8e8 	bl	8007f30 <xTaskCreateStatic>
 8007d60:	4603      	mov	r3, r0
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e01c      	b.n	8007da0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685c      	ldr	r4, [r3, #4]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d72:	b29e      	uxth	r6, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7ff ffab 	bl	8007cd6 <makeFreeRtosPriority>
 8007d80:	4602      	mov	r2, r0
 8007d82:	f107 030c 	add.w	r3, r7, #12
 8007d86:	9301      	str	r3, [sp, #4]
 8007d88:	9200      	str	r2, [sp, #0]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	4632      	mov	r2, r6
 8007d8e:	4629      	mov	r1, r5
 8007d90:	4620      	mov	r0, r4
 8007d92:	f000 f929 	bl	8007fe8 <xTaskCreate>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d001      	beq.n	8007da0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e000      	b.n	8007da2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007da0:	68fb      	ldr	r3, [r7, #12]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007daa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <osDelay+0x16>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	e000      	b.n	8007dc2 <osDelay+0x18>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 fa3e 	bl	8008244 <vTaskDelay>
  
  return osOK;
 8007dc8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f103 0208 	add.w	r2, r3, #8
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f103 0208 	add.w	r2, r3, #8
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f103 0208 	add.w	r2, r3, #8
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bc80      	pop	{r7}
 8007e0e:	4770      	bx	lr

08007e10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bc80      	pop	{r7}
 8007e26:	4770      	bx	lr

08007e28 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	689a      	ldr	r2, [r3, #8]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	601a      	str	r2, [r3, #0]
}
 8007e64:	bf00      	nop
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bc80      	pop	{r7}
 8007e6c:	4770      	bx	lr

08007e6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b085      	sub	sp, #20
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e84:	d103      	bne.n	8007e8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	e00c      	b.n	8007ea8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3308      	adds	r3, #8
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	e002      	b.n	8007e9c <vListInsert+0x2e>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d2f6      	bcs.n	8007e96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
}
 8007ed4:	bf00      	nop
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bc80      	pop	{r7}
 8007edc:	4770      	bx	lr

08007ede <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b085      	sub	sp, #20
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	6892      	ldr	r2, [r2, #8]
 8007ef4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	6852      	ldr	r2, [r2, #4]
 8007efe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d103      	bne.n	8007f12 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689a      	ldr	r2, [r3, #8]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	1e5a      	subs	r2, r3, #1
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bc80      	pop	{r7}
 8007f2e:	4770      	bx	lr

08007f30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08e      	sub	sp, #56	; 0x38
 8007f34:	af04      	add	r7, sp, #16
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <xTaskCreateStatic+0x46>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	61fb      	str	r3, [r7, #28]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f76:	2354      	movs	r3, #84	; 0x54
 8007f78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2b54      	cmp	r3, #84	; 0x54
 8007f7e:	d00a      	beq.n	8007f96 <xTaskCreateStatic+0x66>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	61bb      	str	r3, [r7, #24]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d01e      	beq.n	8007fda <xTaskCreateStatic+0xaa>
 8007f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d01b      	beq.n	8007fda <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007faa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9303      	str	r3, [sp, #12]
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	9302      	str	r3, [sp, #8]
 8007fbc:	f107 0314 	add.w	r3, r7, #20
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	68b9      	ldr	r1, [r7, #8]
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f850 	bl	8008072 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fd4:	f000 f8cc 	bl	8008170 <prvAddNewTaskToReadyList>
 8007fd8:	e001      	b.n	8007fde <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fde:	697b      	ldr	r3, [r7, #20]
	}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3728      	adds	r7, #40	; 0x28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08c      	sub	sp, #48	; 0x30
 8007fec:	af04      	add	r7, sp, #16
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	603b      	str	r3, [r7, #0]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ff8:	88fb      	ldrh	r3, [r7, #6]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fe87 	bl	8008d10 <pvPortMalloc>
 8008002:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00e      	beq.n	8008028 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800800a:	2054      	movs	r0, #84	; 0x54
 800800c:	f000 fe80 	bl	8008d10 <pvPortMalloc>
 8008010:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	631a      	str	r2, [r3, #48]	; 0x30
 800801e:	e005      	b.n	800802c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008020:	6978      	ldr	r0, [r7, #20]
 8008022:	f000 ff39 	bl	8008e98 <vPortFree>
 8008026:	e001      	b.n	800802c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008028:	2300      	movs	r3, #0
 800802a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d017      	beq.n	8008062 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800803a:	88fa      	ldrh	r2, [r7, #6]
 800803c:	2300      	movs	r3, #0
 800803e:	9303      	str	r3, [sp, #12]
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 f80e 	bl	8008072 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008056:	69f8      	ldr	r0, [r7, #28]
 8008058:	f000 f88a 	bl	8008170 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800805c:	2301      	movs	r3, #1
 800805e:	61bb      	str	r3, [r7, #24]
 8008060:	e002      	b.n	8008068 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008066:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008068:	69bb      	ldr	r3, [r7, #24]
	}
 800806a:	4618      	mov	r0, r3
 800806c:	3720      	adds	r7, #32
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b088      	sub	sp, #32
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	607a      	str	r2, [r7, #4]
 800807e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800808a:	3b01      	subs	r3, #1
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	f023 0307 	bic.w	r3, r3, #7
 8008098:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	f003 0307 	and.w	r3, r3, #7
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00a      	beq.n	80080ba <prvInitialiseNewTask+0x48>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	617b      	str	r3, [r7, #20]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080ba:	2300      	movs	r3, #0
 80080bc:	61fb      	str	r3, [r7, #28]
 80080be:	e012      	b.n	80080e6 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	4413      	add	r3, r2
 80080c6:	7819      	ldrb	r1, [r3, #0]
 80080c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	4413      	add	r3, r2
 80080ce:	3334      	adds	r3, #52	; 0x34
 80080d0:	460a      	mov	r2, r1
 80080d2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	4413      	add	r3, r2
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d006      	beq.n	80080ee <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	3301      	adds	r3, #1
 80080e4:	61fb      	str	r3, [r7, #28]
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	2b0f      	cmp	r3, #15
 80080ea:	d9e9      	bls.n	80080c0 <prvInitialiseNewTask+0x4e>
 80080ec:	e000      	b.n	80080f0 <prvInitialiseNewTask+0x7e>
		{
			break;
 80080ee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	2b06      	cmp	r3, #6
 80080fc:	d901      	bls.n	8008102 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080fe:	2306      	movs	r3, #6
 8008100:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008106:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800810c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	2200      	movs	r2, #0
 8008112:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008116:	3304      	adds	r3, #4
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff fe79 	bl	8007e10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	3318      	adds	r3, #24
 8008122:	4618      	mov	r0, r3
 8008124:	f7ff fe74 	bl	8007e10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	f1c3 0207 	rsb	r2, r3, #7
 8008134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008136:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800813c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	2200      	movs	r2, #0
 8008142:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	68f9      	ldr	r1, [r7, #12]
 8008150:	69b8      	ldr	r0, [r7, #24]
 8008152:	f000 fc2b 	bl	80089ac <pxPortInitialiseStack>
 8008156:	4602      	mov	r2, r0
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008166:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008168:	bf00      	nop
 800816a:	3720      	adds	r7, #32
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008178:	f000 fd08 	bl	8008b8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800817c:	4b2a      	ldr	r3, [pc, #168]	; (8008228 <prvAddNewTaskToReadyList+0xb8>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3301      	adds	r3, #1
 8008182:	4a29      	ldr	r2, [pc, #164]	; (8008228 <prvAddNewTaskToReadyList+0xb8>)
 8008184:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008186:	4b29      	ldr	r3, [pc, #164]	; (800822c <prvAddNewTaskToReadyList+0xbc>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d109      	bne.n	80081a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800818e:	4a27      	ldr	r2, [pc, #156]	; (800822c <prvAddNewTaskToReadyList+0xbc>)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008194:	4b24      	ldr	r3, [pc, #144]	; (8008228 <prvAddNewTaskToReadyList+0xb8>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d110      	bne.n	80081be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800819c:	f000 fac0 	bl	8008720 <prvInitialiseTaskLists>
 80081a0:	e00d      	b.n	80081be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081a2:	4b23      	ldr	r3, [pc, #140]	; (8008230 <prvAddNewTaskToReadyList+0xc0>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d109      	bne.n	80081be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081aa:	4b20      	ldr	r3, [pc, #128]	; (800822c <prvAddNewTaskToReadyList+0xbc>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d802      	bhi.n	80081be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081b8:	4a1c      	ldr	r2, [pc, #112]	; (800822c <prvAddNewTaskToReadyList+0xbc>)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081be:	4b1d      	ldr	r3, [pc, #116]	; (8008234 <prvAddNewTaskToReadyList+0xc4>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3301      	adds	r3, #1
 80081c4:	4a1b      	ldr	r2, [pc, #108]	; (8008234 <prvAddNewTaskToReadyList+0xc4>)
 80081c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	2201      	movs	r2, #1
 80081ce:	409a      	lsls	r2, r3
 80081d0:	4b19      	ldr	r3, [pc, #100]	; (8008238 <prvAddNewTaskToReadyList+0xc8>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	4a18      	ldr	r2, [pc, #96]	; (8008238 <prvAddNewTaskToReadyList+0xc8>)
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4a15      	ldr	r2, [pc, #84]	; (800823c <prvAddNewTaskToReadyList+0xcc>)
 80081e8:	441a      	add	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3304      	adds	r3, #4
 80081ee:	4619      	mov	r1, r3
 80081f0:	4610      	mov	r0, r2
 80081f2:	f7ff fe19 	bl	8007e28 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081f6:	f000 fcf9 	bl	8008bec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081fa:	4b0d      	ldr	r3, [pc, #52]	; (8008230 <prvAddNewTaskToReadyList+0xc0>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00e      	beq.n	8008220 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008202:	4b0a      	ldr	r3, [pc, #40]	; (800822c <prvAddNewTaskToReadyList+0xbc>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	429a      	cmp	r2, r3
 800820e:	d207      	bcs.n	8008220 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008210:	4b0b      	ldr	r3, [pc, #44]	; (8008240 <prvAddNewTaskToReadyList+0xd0>)
 8008212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	20000680 	.word	0x20000680
 800822c:	20000580 	.word	0x20000580
 8008230:	2000068c 	.word	0x2000068c
 8008234:	2000069c 	.word	0x2000069c
 8008238:	20000688 	.word	0x20000688
 800823c:	20000584 	.word	0x20000584
 8008240:	e000ed04 	.word	0xe000ed04

08008244 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800824c:	2300      	movs	r3, #0
 800824e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d017      	beq.n	8008286 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008256:	4b13      	ldr	r3, [pc, #76]	; (80082a4 <vTaskDelay+0x60>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <vTaskDelay+0x30>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	60bb      	str	r3, [r7, #8]
}
 8008270:	bf00      	nop
 8008272:	e7fe      	b.n	8008272 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008274:	f000 f87a 	bl	800836c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008278:	2100      	movs	r1, #0
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fb30 	bl	80088e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008280:	f000 f882 	bl	8008388 <xTaskResumeAll>
 8008284:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d107      	bne.n	800829c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800828c:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <vTaskDelay+0x64>)
 800828e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800829c:	bf00      	nop
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	200006a8 	.word	0x200006a8
 80082a8:	e000ed04 	.word	0xe000ed04

080082ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08a      	sub	sp, #40	; 0x28
 80082b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ba:	463a      	mov	r2, r7
 80082bc:	1d39      	adds	r1, r7, #4
 80082be:	f107 0308 	add.w	r3, r7, #8
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7f7 ffb4 	bl	8000230 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	9202      	str	r2, [sp, #8]
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	2300      	movs	r3, #0
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	2300      	movs	r3, #0
 80082d8:	460a      	mov	r2, r1
 80082da:	491e      	ldr	r1, [pc, #120]	; (8008354 <vTaskStartScheduler+0xa8>)
 80082dc:	481e      	ldr	r0, [pc, #120]	; (8008358 <vTaskStartScheduler+0xac>)
 80082de:	f7ff fe27 	bl	8007f30 <xTaskCreateStatic>
 80082e2:	4603      	mov	r3, r0
 80082e4:	4a1d      	ldr	r2, [pc, #116]	; (800835c <vTaskStartScheduler+0xb0>)
 80082e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082e8:	4b1c      	ldr	r3, [pc, #112]	; (800835c <vTaskStartScheduler+0xb0>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082f0:	2301      	movs	r3, #1
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	e001      	b.n	80082fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d116      	bne.n	800832e <vTaskStartScheduler+0x82>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	613b      	str	r3, [r7, #16]
}
 8008312:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008314:	4b12      	ldr	r3, [pc, #72]	; (8008360 <vTaskStartScheduler+0xb4>)
 8008316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800831a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800831c:	4b11      	ldr	r3, [pc, #68]	; (8008364 <vTaskStartScheduler+0xb8>)
 800831e:	2201      	movs	r2, #1
 8008320:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008322:	4b11      	ldr	r3, [pc, #68]	; (8008368 <vTaskStartScheduler+0xbc>)
 8008324:	2200      	movs	r2, #0
 8008326:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008328:	f000 fbbe 	bl	8008aa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800832c:	e00e      	b.n	800834c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008334:	d10a      	bne.n	800834c <vTaskStartScheduler+0xa0>
	__asm volatile
 8008336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	60fb      	str	r3, [r7, #12]
}
 8008348:	bf00      	nop
 800834a:	e7fe      	b.n	800834a <vTaskStartScheduler+0x9e>
}
 800834c:	bf00      	nop
 800834e:	3718      	adds	r7, #24
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	08009a54 	.word	0x08009a54
 8008358:	080086f1 	.word	0x080086f1
 800835c:	200006a4 	.word	0x200006a4
 8008360:	200006a0 	.word	0x200006a0
 8008364:	2000068c 	.word	0x2000068c
 8008368:	20000684 	.word	0x20000684

0800836c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008370:	4b04      	ldr	r3, [pc, #16]	; (8008384 <vTaskSuspendAll+0x18>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3301      	adds	r3, #1
 8008376:	4a03      	ldr	r2, [pc, #12]	; (8008384 <vTaskSuspendAll+0x18>)
 8008378:	6013      	str	r3, [r2, #0]
}
 800837a:	bf00      	nop
 800837c:	46bd      	mov	sp, r7
 800837e:	bc80      	pop	{r7}
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	200006a8 	.word	0x200006a8

08008388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008392:	2300      	movs	r3, #0
 8008394:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008396:	4b41      	ldr	r3, [pc, #260]	; (800849c <xTaskResumeAll+0x114>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10a      	bne.n	80083b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	603b      	str	r3, [r7, #0]
}
 80083b0:	bf00      	nop
 80083b2:	e7fe      	b.n	80083b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083b4:	f000 fbea 	bl	8008b8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083b8:	4b38      	ldr	r3, [pc, #224]	; (800849c <xTaskResumeAll+0x114>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3b01      	subs	r3, #1
 80083be:	4a37      	ldr	r2, [pc, #220]	; (800849c <xTaskResumeAll+0x114>)
 80083c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083c2:	4b36      	ldr	r3, [pc, #216]	; (800849c <xTaskResumeAll+0x114>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d161      	bne.n	800848e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083ca:	4b35      	ldr	r3, [pc, #212]	; (80084a0 <xTaskResumeAll+0x118>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d05d      	beq.n	800848e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083d2:	e02e      	b.n	8008432 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80083d4:	4b33      	ldr	r3, [pc, #204]	; (80084a4 <xTaskResumeAll+0x11c>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3318      	adds	r3, #24
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff fd7c 	bl	8007ede <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3304      	adds	r3, #4
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff fd77 	bl	8007ede <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f4:	2201      	movs	r2, #1
 80083f6:	409a      	lsls	r2, r3
 80083f8:	4b2b      	ldr	r3, [pc, #172]	; (80084a8 <xTaskResumeAll+0x120>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	4a2a      	ldr	r2, [pc, #168]	; (80084a8 <xTaskResumeAll+0x120>)
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008406:	4613      	mov	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4a27      	ldr	r2, [pc, #156]	; (80084ac <xTaskResumeAll+0x124>)
 8008410:	441a      	add	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3304      	adds	r3, #4
 8008416:	4619      	mov	r1, r3
 8008418:	4610      	mov	r0, r2
 800841a:	f7ff fd05 	bl	8007e28 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008422:	4b23      	ldr	r3, [pc, #140]	; (80084b0 <xTaskResumeAll+0x128>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	429a      	cmp	r2, r3
 800842a:	d302      	bcc.n	8008432 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800842c:	4b21      	ldr	r3, [pc, #132]	; (80084b4 <xTaskResumeAll+0x12c>)
 800842e:	2201      	movs	r2, #1
 8008430:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008432:	4b1c      	ldr	r3, [pc, #112]	; (80084a4 <xTaskResumeAll+0x11c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1cc      	bne.n	80083d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008440:	f000 fa0c 	bl	800885c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008444:	4b1c      	ldr	r3, [pc, #112]	; (80084b8 <xTaskResumeAll+0x130>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d010      	beq.n	8008472 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008450:	f000 f836 	bl	80084c0 <xTaskIncrementTick>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d002      	beq.n	8008460 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800845a:	4b16      	ldr	r3, [pc, #88]	; (80084b4 <xTaskResumeAll+0x12c>)
 800845c:	2201      	movs	r2, #1
 800845e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3b01      	subs	r3, #1
 8008464:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1f1      	bne.n	8008450 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800846c:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <xTaskResumeAll+0x130>)
 800846e:	2200      	movs	r2, #0
 8008470:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008472:	4b10      	ldr	r3, [pc, #64]	; (80084b4 <xTaskResumeAll+0x12c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d009      	beq.n	800848e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800847a:	2301      	movs	r3, #1
 800847c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800847e:	4b0f      	ldr	r3, [pc, #60]	; (80084bc <xTaskResumeAll+0x134>)
 8008480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800848e:	f000 fbad 	bl	8008bec <vPortExitCritical>

	return xAlreadyYielded;
 8008492:	68bb      	ldr	r3, [r7, #8]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	200006a8 	.word	0x200006a8
 80084a0:	20000680 	.word	0x20000680
 80084a4:	20000640 	.word	0x20000640
 80084a8:	20000688 	.word	0x20000688
 80084ac:	20000584 	.word	0x20000584
 80084b0:	20000580 	.word	0x20000580
 80084b4:	20000694 	.word	0x20000694
 80084b8:	20000690 	.word	0x20000690
 80084bc:	e000ed04 	.word	0xe000ed04

080084c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ca:	4b51      	ldr	r3, [pc, #324]	; (8008610 <xTaskIncrementTick+0x150>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f040 808d 	bne.w	80085ee <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084d4:	4b4f      	ldr	r3, [pc, #316]	; (8008614 <xTaskIncrementTick+0x154>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3301      	adds	r3, #1
 80084da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084dc:	4a4d      	ldr	r2, [pc, #308]	; (8008614 <xTaskIncrementTick+0x154>)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d120      	bne.n	800852a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80084e8:	4b4b      	ldr	r3, [pc, #300]	; (8008618 <xTaskIncrementTick+0x158>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00a      	beq.n	8008508 <xTaskIncrementTick+0x48>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	603b      	str	r3, [r7, #0]
}
 8008504:	bf00      	nop
 8008506:	e7fe      	b.n	8008506 <xTaskIncrementTick+0x46>
 8008508:	4b43      	ldr	r3, [pc, #268]	; (8008618 <xTaskIncrementTick+0x158>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	4b43      	ldr	r3, [pc, #268]	; (800861c <xTaskIncrementTick+0x15c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a41      	ldr	r2, [pc, #260]	; (8008618 <xTaskIncrementTick+0x158>)
 8008514:	6013      	str	r3, [r2, #0]
 8008516:	4a41      	ldr	r2, [pc, #260]	; (800861c <xTaskIncrementTick+0x15c>)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6013      	str	r3, [r2, #0]
 800851c:	4b40      	ldr	r3, [pc, #256]	; (8008620 <xTaskIncrementTick+0x160>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3301      	adds	r3, #1
 8008522:	4a3f      	ldr	r2, [pc, #252]	; (8008620 <xTaskIncrementTick+0x160>)
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	f000 f999 	bl	800885c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800852a:	4b3e      	ldr	r3, [pc, #248]	; (8008624 <xTaskIncrementTick+0x164>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	429a      	cmp	r2, r3
 8008532:	d34d      	bcc.n	80085d0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008534:	4b38      	ldr	r3, [pc, #224]	; (8008618 <xTaskIncrementTick+0x158>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <xTaskIncrementTick+0x82>
 800853e:	2301      	movs	r3, #1
 8008540:	e000      	b.n	8008544 <xTaskIncrementTick+0x84>
 8008542:	2300      	movs	r3, #0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d004      	beq.n	8008552 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008548:	4b36      	ldr	r3, [pc, #216]	; (8008624 <xTaskIncrementTick+0x164>)
 800854a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800854e:	601a      	str	r2, [r3, #0]
					break;
 8008550:	e03e      	b.n	80085d0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008552:	4b31      	ldr	r3, [pc, #196]	; (8008618 <xTaskIncrementTick+0x158>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	429a      	cmp	r2, r3
 8008568:	d203      	bcs.n	8008572 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800856a:	4a2e      	ldr	r2, [pc, #184]	; (8008624 <xTaskIncrementTick+0x164>)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6013      	str	r3, [r2, #0]
						break;
 8008570:	e02e      	b.n	80085d0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	3304      	adds	r3, #4
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff fcb1 	bl	8007ede <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008580:	2b00      	cmp	r3, #0
 8008582:	d004      	beq.n	800858e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	3318      	adds	r3, #24
 8008588:	4618      	mov	r0, r3
 800858a:	f7ff fca8 	bl	8007ede <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008592:	2201      	movs	r2, #1
 8008594:	409a      	lsls	r2, r3
 8008596:	4b24      	ldr	r3, [pc, #144]	; (8008628 <xTaskIncrementTick+0x168>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4313      	orrs	r3, r2
 800859c:	4a22      	ldr	r2, [pc, #136]	; (8008628 <xTaskIncrementTick+0x168>)
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a4:	4613      	mov	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4a1f      	ldr	r2, [pc, #124]	; (800862c <xTaskIncrementTick+0x16c>)
 80085ae:	441a      	add	r2, r3
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	3304      	adds	r3, #4
 80085b4:	4619      	mov	r1, r3
 80085b6:	4610      	mov	r0, r2
 80085b8:	f7ff fc36 	bl	8007e28 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c0:	4b1b      	ldr	r3, [pc, #108]	; (8008630 <xTaskIncrementTick+0x170>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d3b4      	bcc.n	8008534 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80085ca:	2301      	movs	r3, #1
 80085cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085ce:	e7b1      	b.n	8008534 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085d0:	4b17      	ldr	r3, [pc, #92]	; (8008630 <xTaskIncrementTick+0x170>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d6:	4915      	ldr	r1, [pc, #84]	; (800862c <xTaskIncrementTick+0x16c>)
 80085d8:	4613      	mov	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d907      	bls.n	80085f8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80085e8:	2301      	movs	r3, #1
 80085ea:	617b      	str	r3, [r7, #20]
 80085ec:	e004      	b.n	80085f8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80085ee:	4b11      	ldr	r3, [pc, #68]	; (8008634 <xTaskIncrementTick+0x174>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	4a0f      	ldr	r2, [pc, #60]	; (8008634 <xTaskIncrementTick+0x174>)
 80085f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80085f8:	4b0f      	ldr	r3, [pc, #60]	; (8008638 <xTaskIncrementTick+0x178>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008600:	2301      	movs	r3, #1
 8008602:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008604:	697b      	ldr	r3, [r7, #20]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3718      	adds	r7, #24
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	200006a8 	.word	0x200006a8
 8008614:	20000684 	.word	0x20000684
 8008618:	20000638 	.word	0x20000638
 800861c:	2000063c 	.word	0x2000063c
 8008620:	20000698 	.word	0x20000698
 8008624:	200006a0 	.word	0x200006a0
 8008628:	20000688 	.word	0x20000688
 800862c:	20000584 	.word	0x20000584
 8008630:	20000580 	.word	0x20000580
 8008634:	20000690 	.word	0x20000690
 8008638:	20000694 	.word	0x20000694

0800863c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008642:	4b26      	ldr	r3, [pc, #152]	; (80086dc <vTaskSwitchContext+0xa0>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800864a:	4b25      	ldr	r3, [pc, #148]	; (80086e0 <vTaskSwitchContext+0xa4>)
 800864c:	2201      	movs	r2, #1
 800864e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008650:	e03f      	b.n	80086d2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008652:	4b23      	ldr	r3, [pc, #140]	; (80086e0 <vTaskSwitchContext+0xa4>)
 8008654:	2200      	movs	r2, #0
 8008656:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008658:	4b22      	ldr	r3, [pc, #136]	; (80086e4 <vTaskSwitchContext+0xa8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	fab3 f383 	clz	r3, r3
 8008664:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008666:	7afb      	ldrb	r3, [r7, #11]
 8008668:	f1c3 031f 	rsb	r3, r3, #31
 800866c:	617b      	str	r3, [r7, #20]
 800866e:	491e      	ldr	r1, [pc, #120]	; (80086e8 <vTaskSwitchContext+0xac>)
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	440b      	add	r3, r1
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10a      	bne.n	8008698 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008686:	f383 8811 	msr	BASEPRI, r3
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	607b      	str	r3, [r7, #4]
}
 8008694:	bf00      	nop
 8008696:	e7fe      	b.n	8008696 <vTaskSwitchContext+0x5a>
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	4613      	mov	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4a11      	ldr	r2, [pc, #68]	; (80086e8 <vTaskSwitchContext+0xac>)
 80086a4:	4413      	add	r3, r2
 80086a6:	613b      	str	r3, [r7, #16]
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	605a      	str	r2, [r3, #4]
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	3308      	adds	r3, #8
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d104      	bne.n	80086c8 <vTaskSwitchContext+0x8c>
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	605a      	str	r2, [r3, #4]
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	4a07      	ldr	r2, [pc, #28]	; (80086ec <vTaskSwitchContext+0xb0>)
 80086d0:	6013      	str	r3, [r2, #0]
}
 80086d2:	bf00      	nop
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bc80      	pop	{r7}
 80086da:	4770      	bx	lr
 80086dc:	200006a8 	.word	0x200006a8
 80086e0:	20000694 	.word	0x20000694
 80086e4:	20000688 	.word	0x20000688
 80086e8:	20000584 	.word	0x20000584
 80086ec:	20000580 	.word	0x20000580

080086f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086f8:	f000 f852 	bl	80087a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086fc:	4b06      	ldr	r3, [pc, #24]	; (8008718 <prvIdleTask+0x28>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d9f9      	bls.n	80086f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <prvIdleTask+0x2c>)
 8008706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008714:	e7f0      	b.n	80086f8 <prvIdleTask+0x8>
 8008716:	bf00      	nop
 8008718:	20000584 	.word	0x20000584
 800871c:	e000ed04 	.word	0xe000ed04

08008720 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008726:	2300      	movs	r3, #0
 8008728:	607b      	str	r3, [r7, #4]
 800872a:	e00c      	b.n	8008746 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	4613      	mov	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4a12      	ldr	r2, [pc, #72]	; (8008780 <prvInitialiseTaskLists+0x60>)
 8008738:	4413      	add	r3, r2
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff fb49 	bl	8007dd2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	3301      	adds	r3, #1
 8008744:	607b      	str	r3, [r7, #4]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b06      	cmp	r3, #6
 800874a:	d9ef      	bls.n	800872c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800874c:	480d      	ldr	r0, [pc, #52]	; (8008784 <prvInitialiseTaskLists+0x64>)
 800874e:	f7ff fb40 	bl	8007dd2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008752:	480d      	ldr	r0, [pc, #52]	; (8008788 <prvInitialiseTaskLists+0x68>)
 8008754:	f7ff fb3d 	bl	8007dd2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008758:	480c      	ldr	r0, [pc, #48]	; (800878c <prvInitialiseTaskLists+0x6c>)
 800875a:	f7ff fb3a 	bl	8007dd2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800875e:	480c      	ldr	r0, [pc, #48]	; (8008790 <prvInitialiseTaskLists+0x70>)
 8008760:	f7ff fb37 	bl	8007dd2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008764:	480b      	ldr	r0, [pc, #44]	; (8008794 <prvInitialiseTaskLists+0x74>)
 8008766:	f7ff fb34 	bl	8007dd2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800876a:	4b0b      	ldr	r3, [pc, #44]	; (8008798 <prvInitialiseTaskLists+0x78>)
 800876c:	4a05      	ldr	r2, [pc, #20]	; (8008784 <prvInitialiseTaskLists+0x64>)
 800876e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008770:	4b0a      	ldr	r3, [pc, #40]	; (800879c <prvInitialiseTaskLists+0x7c>)
 8008772:	4a05      	ldr	r2, [pc, #20]	; (8008788 <prvInitialiseTaskLists+0x68>)
 8008774:	601a      	str	r2, [r3, #0]
}
 8008776:	bf00      	nop
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000584 	.word	0x20000584
 8008784:	20000610 	.word	0x20000610
 8008788:	20000624 	.word	0x20000624
 800878c:	20000640 	.word	0x20000640
 8008790:	20000654 	.word	0x20000654
 8008794:	2000066c 	.word	0x2000066c
 8008798:	20000638 	.word	0x20000638
 800879c:	2000063c 	.word	0x2000063c

080087a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087a6:	e019      	b.n	80087dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087a8:	f000 f9f0 	bl	8008b8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80087ac:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <prvCheckTasksWaitingTermination+0x50>)
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3304      	adds	r3, #4
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fb90 	bl	8007ede <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087be:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <prvCheckTasksWaitingTermination+0x54>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	4a0b      	ldr	r2, [pc, #44]	; (80087f4 <prvCheckTasksWaitingTermination+0x54>)
 80087c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087c8:	4b0b      	ldr	r3, [pc, #44]	; (80087f8 <prvCheckTasksWaitingTermination+0x58>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	4a0a      	ldr	r2, [pc, #40]	; (80087f8 <prvCheckTasksWaitingTermination+0x58>)
 80087d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087d2:	f000 fa0b 	bl	8008bec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f810 	bl	80087fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087dc:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <prvCheckTasksWaitingTermination+0x58>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e1      	bne.n	80087a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000654 	.word	0x20000654
 80087f4:	20000680 	.word	0x20000680
 80087f8:	20000668 	.word	0x20000668

080087fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800880a:	2b00      	cmp	r3, #0
 800880c:	d108      	bne.n	8008820 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fb40 	bl	8008e98 <vPortFree>
				vPortFree( pxTCB );
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fb3d 	bl	8008e98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800881e:	e018      	b.n	8008852 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008826:	2b01      	cmp	r3, #1
 8008828:	d103      	bne.n	8008832 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fb34 	bl	8008e98 <vPortFree>
	}
 8008830:	e00f      	b.n	8008852 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008838:	2b02      	cmp	r3, #2
 800883a:	d00a      	beq.n	8008852 <prvDeleteTCB+0x56>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	60fb      	str	r3, [r7, #12]
}
 800884e:	bf00      	nop
 8008850:	e7fe      	b.n	8008850 <prvDeleteTCB+0x54>
	}
 8008852:	bf00      	nop
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
	...

0800885c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008862:	4b0e      	ldr	r3, [pc, #56]	; (800889c <prvResetNextTaskUnblockTime+0x40>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <prvResetNextTaskUnblockTime+0x14>
 800886c:	2301      	movs	r3, #1
 800886e:	e000      	b.n	8008872 <prvResetNextTaskUnblockTime+0x16>
 8008870:	2300      	movs	r3, #0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d004      	beq.n	8008880 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008876:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <prvResetNextTaskUnblockTime+0x44>)
 8008878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800887c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800887e:	e008      	b.n	8008892 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008880:	4b06      	ldr	r3, [pc, #24]	; (800889c <prvResetNextTaskUnblockTime+0x40>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	4a04      	ldr	r2, [pc, #16]	; (80088a0 <prvResetNextTaskUnblockTime+0x44>)
 8008890:	6013      	str	r3, [r2, #0]
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	bc80      	pop	{r7}
 800889a:	4770      	bx	lr
 800889c:	20000638 	.word	0x20000638
 80088a0:	200006a0 	.word	0x200006a0

080088a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088aa:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <xTaskGetSchedulerState+0x34>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d102      	bne.n	80088b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088b2:	2301      	movs	r3, #1
 80088b4:	607b      	str	r3, [r7, #4]
 80088b6:	e008      	b.n	80088ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088b8:	4b08      	ldr	r3, [pc, #32]	; (80088dc <xTaskGetSchedulerState+0x38>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d102      	bne.n	80088c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80088c0:	2302      	movs	r3, #2
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	e001      	b.n	80088ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80088c6:	2300      	movs	r3, #0
 80088c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80088ca:	687b      	ldr	r3, [r7, #4]
	}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bc80      	pop	{r7}
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	2000068c 	.word	0x2000068c
 80088dc:	200006a8 	.word	0x200006a8

080088e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088ea:	4b29      	ldr	r3, [pc, #164]	; (8008990 <prvAddCurrentTaskToDelayedList+0xb0>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088f0:	4b28      	ldr	r3, [pc, #160]	; (8008994 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3304      	adds	r3, #4
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff faf1 	bl	8007ede <uxListRemove>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10b      	bne.n	800891a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008902:	4b24      	ldr	r3, [pc, #144]	; (8008994 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008908:	2201      	movs	r2, #1
 800890a:	fa02 f303 	lsl.w	r3, r2, r3
 800890e:	43da      	mvns	r2, r3
 8008910:	4b21      	ldr	r3, [pc, #132]	; (8008998 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4013      	ands	r3, r2
 8008916:	4a20      	ldr	r2, [pc, #128]	; (8008998 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008918:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008920:	d10a      	bne.n	8008938 <prvAddCurrentTaskToDelayedList+0x58>
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d007      	beq.n	8008938 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008928:	4b1a      	ldr	r3, [pc, #104]	; (8008994 <prvAddCurrentTaskToDelayedList+0xb4>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3304      	adds	r3, #4
 800892e:	4619      	mov	r1, r3
 8008930:	481a      	ldr	r0, [pc, #104]	; (800899c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008932:	f7ff fa79 	bl	8007e28 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008936:	e026      	b.n	8008986 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4413      	add	r3, r2
 800893e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008940:	4b14      	ldr	r3, [pc, #80]	; (8008994 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	429a      	cmp	r2, r3
 800894e:	d209      	bcs.n	8008964 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008950:	4b13      	ldr	r3, [pc, #76]	; (80089a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	4b0f      	ldr	r3, [pc, #60]	; (8008994 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3304      	adds	r3, #4
 800895a:	4619      	mov	r1, r3
 800895c:	4610      	mov	r0, r2
 800895e:	f7ff fa86 	bl	8007e6e <vListInsert>
}
 8008962:	e010      	b.n	8008986 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008964:	4b0f      	ldr	r3, [pc, #60]	; (80089a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	4b0a      	ldr	r3, [pc, #40]	; (8008994 <prvAddCurrentTaskToDelayedList+0xb4>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3304      	adds	r3, #4
 800896e:	4619      	mov	r1, r3
 8008970:	4610      	mov	r0, r2
 8008972:	f7ff fa7c 	bl	8007e6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008976:	4b0c      	ldr	r3, [pc, #48]	; (80089a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	429a      	cmp	r2, r3
 800897e:	d202      	bcs.n	8008986 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008980:	4a09      	ldr	r2, [pc, #36]	; (80089a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	6013      	str	r3, [r2, #0]
}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	20000684 	.word	0x20000684
 8008994:	20000580 	.word	0x20000580
 8008998:	20000688 	.word	0x20000688
 800899c:	2000066c 	.word	0x2000066c
 80089a0:	2000063c 	.word	0x2000063c
 80089a4:	20000638 	.word	0x20000638
 80089a8:	200006a0 	.word	0x200006a0

080089ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3b04      	subs	r3, #4
 80089bc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3b04      	subs	r3, #4
 80089ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f023 0201 	bic.w	r2, r3, #1
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3b04      	subs	r3, #4
 80089da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089dc:	4a08      	ldr	r2, [pc, #32]	; (8008a00 <pxPortInitialiseStack+0x54>)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3b14      	subs	r3, #20
 80089e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	3b20      	subs	r3, #32
 80089f2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089f4:	68fb      	ldr	r3, [r7, #12]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bc80      	pop	{r7}
 80089fe:	4770      	bx	lr
 8008a00:	08008a05 	.word	0x08008a05

08008a04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a0e:	4b12      	ldr	r3, [pc, #72]	; (8008a58 <prvTaskExitError+0x54>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a16:	d00a      	beq.n	8008a2e <prvTaskExitError+0x2a>
	__asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	60fb      	str	r3, [r7, #12]
}
 8008a2a:	bf00      	nop
 8008a2c:	e7fe      	b.n	8008a2c <prvTaskExitError+0x28>
	__asm volatile
 8008a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	60bb      	str	r3, [r7, #8]
}
 8008a40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a42:	bf00      	nop
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0fc      	beq.n	8008a44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a4a:	bf00      	nop
 8008a4c:	bf00      	nop
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bc80      	pop	{r7}
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	2000011c 	.word	0x2000011c
 8008a5c:	00000000 	.word	0x00000000

08008a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a60:	4b07      	ldr	r3, [pc, #28]	; (8008a80 <pxCurrentTCBConst2>)
 8008a62:	6819      	ldr	r1, [r3, #0]
 8008a64:	6808      	ldr	r0, [r1, #0]
 8008a66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a6a:	f380 8809 	msr	PSP, r0
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f04f 0000 	mov.w	r0, #0
 8008a76:	f380 8811 	msr	BASEPRI, r0
 8008a7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008a7e:	4770      	bx	lr

08008a80 <pxCurrentTCBConst2>:
 8008a80:	20000580 	.word	0x20000580
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop

08008a88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008a88:	4806      	ldr	r0, [pc, #24]	; (8008aa4 <prvPortStartFirstTask+0x1c>)
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	6800      	ldr	r0, [r0, #0]
 8008a8e:	f380 8808 	msr	MSP, r0
 8008a92:	b662      	cpsie	i
 8008a94:	b661      	cpsie	f
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	df00      	svc	0
 8008aa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008aa2:	bf00      	nop
 8008aa4:	e000ed08 	.word	0xe000ed08

08008aa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008aae:	4b32      	ldr	r3, [pc, #200]	; (8008b78 <xPortStartScheduler+0xd0>)
 8008ab0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	22ff      	movs	r2, #255	; 0xff
 8008abe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	4b2a      	ldr	r3, [pc, #168]	; (8008b7c <xPortStartScheduler+0xd4>)
 8008ad4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ad6:	4b2a      	ldr	r3, [pc, #168]	; (8008b80 <xPortStartScheduler+0xd8>)
 8008ad8:	2207      	movs	r2, #7
 8008ada:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008adc:	e009      	b.n	8008af2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008ade:	4b28      	ldr	r3, [pc, #160]	; (8008b80 <xPortStartScheduler+0xd8>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	4a26      	ldr	r2, [pc, #152]	; (8008b80 <xPortStartScheduler+0xd8>)
 8008ae6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	005b      	lsls	r3, r3, #1
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008af2:	78fb      	ldrb	r3, [r7, #3]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afa:	2b80      	cmp	r3, #128	; 0x80
 8008afc:	d0ef      	beq.n	8008ade <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008afe:	4b20      	ldr	r3, [pc, #128]	; (8008b80 <xPortStartScheduler+0xd8>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f1c3 0307 	rsb	r3, r3, #7
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d00a      	beq.n	8008b20 <xPortStartScheduler+0x78>
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	60bb      	str	r3, [r7, #8]
}
 8008b1c:	bf00      	nop
 8008b1e:	e7fe      	b.n	8008b1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b20:	4b17      	ldr	r3, [pc, #92]	; (8008b80 <xPortStartScheduler+0xd8>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	021b      	lsls	r3, r3, #8
 8008b26:	4a16      	ldr	r2, [pc, #88]	; (8008b80 <xPortStartScheduler+0xd8>)
 8008b28:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b2a:	4b15      	ldr	r3, [pc, #84]	; (8008b80 <xPortStartScheduler+0xd8>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b32:	4a13      	ldr	r2, [pc, #76]	; (8008b80 <xPortStartScheduler+0xd8>)
 8008b34:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b3e:	4b11      	ldr	r3, [pc, #68]	; (8008b84 <xPortStartScheduler+0xdc>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a10      	ldr	r2, [pc, #64]	; (8008b84 <xPortStartScheduler+0xdc>)
 8008b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b4a:	4b0e      	ldr	r3, [pc, #56]	; (8008b84 <xPortStartScheduler+0xdc>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a0d      	ldr	r2, [pc, #52]	; (8008b84 <xPortStartScheduler+0xdc>)
 8008b50:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b54:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b56:	f000 f8b9 	bl	8008ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b5a:	4b0b      	ldr	r3, [pc, #44]	; (8008b88 <xPortStartScheduler+0xe0>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b60:	f7ff ff92 	bl	8008a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b64:	f7ff fd6a 	bl	800863c <vTaskSwitchContext>
	prvTaskExitError();
 8008b68:	f7ff ff4c 	bl	8008a04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	e000e400 	.word	0xe000e400
 8008b7c:	200006ac 	.word	0x200006ac
 8008b80:	200006b0 	.word	0x200006b0
 8008b84:	e000ed20 	.word	0xe000ed20
 8008b88:	2000011c 	.word	0x2000011c

08008b8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	607b      	str	r3, [r7, #4]
}
 8008ba4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ba6:	4b0f      	ldr	r3, [pc, #60]	; (8008be4 <vPortEnterCritical+0x58>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3301      	adds	r3, #1
 8008bac:	4a0d      	ldr	r2, [pc, #52]	; (8008be4 <vPortEnterCritical+0x58>)
 8008bae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bb0:	4b0c      	ldr	r3, [pc, #48]	; (8008be4 <vPortEnterCritical+0x58>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d10f      	bne.n	8008bd8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bb8:	4b0b      	ldr	r3, [pc, #44]	; (8008be8 <vPortEnterCritical+0x5c>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00a      	beq.n	8008bd8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	603b      	str	r3, [r7, #0]
}
 8008bd4:	bf00      	nop
 8008bd6:	e7fe      	b.n	8008bd6 <vPortEnterCritical+0x4a>
	}
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bc80      	pop	{r7}
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	2000011c 	.word	0x2000011c
 8008be8:	e000ed04 	.word	0xe000ed04

08008bec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bf2:	4b11      	ldr	r3, [pc, #68]	; (8008c38 <vPortExitCritical+0x4c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10a      	bne.n	8008c10 <vPortExitCritical+0x24>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	607b      	str	r3, [r7, #4]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c10:	4b09      	ldr	r3, [pc, #36]	; (8008c38 <vPortExitCritical+0x4c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3b01      	subs	r3, #1
 8008c16:	4a08      	ldr	r2, [pc, #32]	; (8008c38 <vPortExitCritical+0x4c>)
 8008c18:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c1a:	4b07      	ldr	r3, [pc, #28]	; (8008c38 <vPortExitCritical+0x4c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d105      	bne.n	8008c2e <vPortExitCritical+0x42>
 8008c22:	2300      	movs	r3, #0
 8008c24:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c2c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c2e:	bf00      	nop
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bc80      	pop	{r7}
 8008c36:	4770      	bx	lr
 8008c38:	2000011c 	.word	0x2000011c
 8008c3c:	00000000 	.word	0x00000000

08008c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c40:	f3ef 8009 	mrs	r0, PSP
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	4b0d      	ldr	r3, [pc, #52]	; (8008c80 <pxCurrentTCBConst>)
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c50:	6010      	str	r0, [r2, #0]
 8008c52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008c56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c5a:	f380 8811 	msr	BASEPRI, r0
 8008c5e:	f7ff fced 	bl	800863c <vTaskSwitchContext>
 8008c62:	f04f 0000 	mov.w	r0, #0
 8008c66:	f380 8811 	msr	BASEPRI, r0
 8008c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c6e:	6819      	ldr	r1, [r3, #0]
 8008c70:	6808      	ldr	r0, [r1, #0]
 8008c72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c76:	f380 8809 	msr	PSP, r0
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	4770      	bx	lr

08008c80 <pxCurrentTCBConst>:
 8008c80:	20000580 	.word	0x20000580
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop

08008c88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	607b      	str	r3, [r7, #4]
}
 8008ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ca2:	f7ff fc0d 	bl	80084c0 <xTaskIncrementTick>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cac:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <xPortSysTickHandler+0x40>)
 8008cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	f383 8811 	msr	BASEPRI, r3
}
 8008cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ccc:	b480      	push	{r7}
 8008cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cd0:	4b0a      	ldr	r3, [pc, #40]	; (8008cfc <vPortSetupTimerInterrupt+0x30>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cd6:	4b0a      	ldr	r3, [pc, #40]	; (8008d00 <vPortSetupTimerInterrupt+0x34>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cdc:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <vPortSetupTimerInterrupt+0x38>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a09      	ldr	r2, [pc, #36]	; (8008d08 <vPortSetupTimerInterrupt+0x3c>)
 8008ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce6:	099b      	lsrs	r3, r3, #6
 8008ce8:	4a08      	ldr	r2, [pc, #32]	; (8008d0c <vPortSetupTimerInterrupt+0x40>)
 8008cea:	3b01      	subs	r3, #1
 8008cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cee:	4b03      	ldr	r3, [pc, #12]	; (8008cfc <vPortSetupTimerInterrupt+0x30>)
 8008cf0:	2207      	movs	r2, #7
 8008cf2:	601a      	str	r2, [r3, #0]
}
 8008cf4:	bf00      	nop
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bc80      	pop	{r7}
 8008cfa:	4770      	bx	lr
 8008cfc:	e000e010 	.word	0xe000e010
 8008d00:	e000e018 	.word	0xe000e018
 8008d04:	20000000 	.word	0x20000000
 8008d08:	10624dd3 	.word	0x10624dd3
 8008d0c:	e000e014 	.word	0xe000e014

08008d10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b08a      	sub	sp, #40	; 0x28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d1c:	f7ff fb26 	bl	800836c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d20:	4b58      	ldr	r3, [pc, #352]	; (8008e84 <pvPortMalloc+0x174>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d28:	f000 f910 	bl	8008f4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d2c:	4b56      	ldr	r3, [pc, #344]	; (8008e88 <pvPortMalloc+0x178>)
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4013      	ands	r3, r2
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f040 808e 	bne.w	8008e56 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d01d      	beq.n	8008d7c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d40:	2208      	movs	r2, #8
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4413      	add	r3, r2
 8008d46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f003 0307 	and.w	r3, r3, #7
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d014      	beq.n	8008d7c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f023 0307 	bic.w	r3, r3, #7
 8008d58:	3308      	adds	r3, #8
 8008d5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f003 0307 	and.w	r3, r3, #7
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00a      	beq.n	8008d7c <pvPortMalloc+0x6c>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	617b      	str	r3, [r7, #20]
}
 8008d78:	bf00      	nop
 8008d7a:	e7fe      	b.n	8008d7a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d069      	beq.n	8008e56 <pvPortMalloc+0x146>
 8008d82:	4b42      	ldr	r3, [pc, #264]	; (8008e8c <pvPortMalloc+0x17c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d864      	bhi.n	8008e56 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d8c:	4b40      	ldr	r3, [pc, #256]	; (8008e90 <pvPortMalloc+0x180>)
 8008d8e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d90:	4b3f      	ldr	r3, [pc, #252]	; (8008e90 <pvPortMalloc+0x180>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d96:	e004      	b.n	8008da2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d903      	bls.n	8008db4 <pvPortMalloc+0xa4>
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1f1      	bne.n	8008d98 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008db4:	4b33      	ldr	r3, [pc, #204]	; (8008e84 <pvPortMalloc+0x174>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d04b      	beq.n	8008e56 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2208      	movs	r2, #8
 8008dc4:	4413      	add	r3, r2
 8008dc6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	1ad2      	subs	r2, r2, r3
 8008dd8:	2308      	movs	r3, #8
 8008dda:	005b      	lsls	r3, r3, #1
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d91f      	bls.n	8008e20 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4413      	add	r3, r2
 8008de6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	f003 0307 	and.w	r3, r3, #7
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00a      	beq.n	8008e08 <pvPortMalloc+0xf8>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	613b      	str	r3, [r7, #16]
}
 8008e04:	bf00      	nop
 8008e06:	e7fe      	b.n	8008e06 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	1ad2      	subs	r2, r2, r3
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e1a:	69b8      	ldr	r0, [r7, #24]
 8008e1c:	f000 f8f8 	bl	8009010 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e20:	4b1a      	ldr	r3, [pc, #104]	; (8008e8c <pvPortMalloc+0x17c>)
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	4a18      	ldr	r2, [pc, #96]	; (8008e8c <pvPortMalloc+0x17c>)
 8008e2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e2e:	4b17      	ldr	r3, [pc, #92]	; (8008e8c <pvPortMalloc+0x17c>)
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	4b18      	ldr	r3, [pc, #96]	; (8008e94 <pvPortMalloc+0x184>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d203      	bcs.n	8008e42 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e3a:	4b14      	ldr	r3, [pc, #80]	; (8008e8c <pvPortMalloc+0x17c>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a15      	ldr	r2, [pc, #84]	; (8008e94 <pvPortMalloc+0x184>)
 8008e40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	4b10      	ldr	r3, [pc, #64]	; (8008e88 <pvPortMalloc+0x178>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e56:	f7ff fa97 	bl	8008388 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00a      	beq.n	8008e7a <pvPortMalloc+0x16a>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	60fb      	str	r3, [r7, #12]
}
 8008e76:	bf00      	nop
 8008e78:	e7fe      	b.n	8008e78 <pvPortMalloc+0x168>
	return pvReturn;
 8008e7a:	69fb      	ldr	r3, [r7, #28]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3728      	adds	r7, #40	; 0x28
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	200012bc 	.word	0x200012bc
 8008e88:	200012c8 	.word	0x200012c8
 8008e8c:	200012c0 	.word	0x200012c0
 8008e90:	200012b4 	.word	0x200012b4
 8008e94:	200012c4 	.word	0x200012c4

08008e98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d048      	beq.n	8008f3c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008eaa:	2308      	movs	r3, #8
 8008eac:	425b      	negs	r3, r3
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	4b21      	ldr	r3, [pc, #132]	; (8008f44 <vPortFree+0xac>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10a      	bne.n	8008edc <vPortFree+0x44>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	60fb      	str	r3, [r7, #12]
}
 8008ed8:	bf00      	nop
 8008eda:	e7fe      	b.n	8008eda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <vPortFree+0x62>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	60bb      	str	r3, [r7, #8]
}
 8008ef6:	bf00      	nop
 8008ef8:	e7fe      	b.n	8008ef8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	4b11      	ldr	r3, [pc, #68]	; (8008f44 <vPortFree+0xac>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4013      	ands	r3, r2
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d019      	beq.n	8008f3c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d115      	bne.n	8008f3c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	4b0b      	ldr	r3, [pc, #44]	; (8008f44 <vPortFree+0xac>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	43db      	mvns	r3, r3
 8008f1a:	401a      	ands	r2, r3
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f20:	f7ff fa24 	bl	800836c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	4b07      	ldr	r3, [pc, #28]	; (8008f48 <vPortFree+0xb0>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	4a06      	ldr	r2, [pc, #24]	; (8008f48 <vPortFree+0xb0>)
 8008f30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f32:	6938      	ldr	r0, [r7, #16]
 8008f34:	f000 f86c 	bl	8009010 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f38:	f7ff fa26 	bl	8008388 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f3c:	bf00      	nop
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	200012c8 	.word	0x200012c8
 8008f48:	200012c0 	.word	0x200012c0

08008f4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008f56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f58:	4b27      	ldr	r3, [pc, #156]	; (8008ff8 <prvHeapInit+0xac>)
 8008f5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00c      	beq.n	8008f80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3307      	adds	r3, #7
 8008f6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 0307 	bic.w	r3, r3, #7
 8008f72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	4a1f      	ldr	r2, [pc, #124]	; (8008ff8 <prvHeapInit+0xac>)
 8008f7c:	4413      	add	r3, r2
 8008f7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f84:	4a1d      	ldr	r2, [pc, #116]	; (8008ffc <prvHeapInit+0xb0>)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f8a:	4b1c      	ldr	r3, [pc, #112]	; (8008ffc <prvHeapInit+0xb0>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	4413      	add	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f98:	2208      	movs	r2, #8
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	1a9b      	subs	r3, r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 0307 	bic.w	r3, r3, #7
 8008fa6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	4a15      	ldr	r2, [pc, #84]	; (8009000 <prvHeapInit+0xb4>)
 8008fac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fae:	4b14      	ldr	r3, [pc, #80]	; (8009000 <prvHeapInit+0xb4>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fb6:	4b12      	ldr	r3, [pc, #72]	; (8009000 <prvHeapInit+0xb4>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	1ad2      	subs	r2, r2, r3
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fcc:	4b0c      	ldr	r3, [pc, #48]	; (8009000 <prvHeapInit+0xb4>)
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	4a0a      	ldr	r2, [pc, #40]	; (8009004 <prvHeapInit+0xb8>)
 8008fda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	4a09      	ldr	r2, [pc, #36]	; (8009008 <prvHeapInit+0xbc>)
 8008fe2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fe4:	4b09      	ldr	r3, [pc, #36]	; (800900c <prvHeapInit+0xc0>)
 8008fe6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fea:	601a      	str	r2, [r3, #0]
}
 8008fec:	bf00      	nop
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bc80      	pop	{r7}
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	200006b4 	.word	0x200006b4
 8008ffc:	200012b4 	.word	0x200012b4
 8009000:	200012bc 	.word	0x200012bc
 8009004:	200012c4 	.word	0x200012c4
 8009008:	200012c0 	.word	0x200012c0
 800900c:	200012c8 	.word	0x200012c8

08009010 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009018:	4b27      	ldr	r3, [pc, #156]	; (80090b8 <prvInsertBlockIntoFreeList+0xa8>)
 800901a:	60fb      	str	r3, [r7, #12]
 800901c:	e002      	b.n	8009024 <prvInsertBlockIntoFreeList+0x14>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	429a      	cmp	r2, r3
 800902c:	d8f7      	bhi.n	800901e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	4413      	add	r3, r2
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	429a      	cmp	r2, r3
 800903e:	d108      	bne.n	8009052 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	441a      	add	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	441a      	add	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	429a      	cmp	r2, r3
 8009064:	d118      	bne.n	8009098 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	4b14      	ldr	r3, [pc, #80]	; (80090bc <prvInsertBlockIntoFreeList+0xac>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d00d      	beq.n	800908e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	441a      	add	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	e008      	b.n	80090a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800908e:	4b0b      	ldr	r3, [pc, #44]	; (80090bc <prvInsertBlockIntoFreeList+0xac>)
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	e003      	b.n	80090a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d002      	beq.n	80090ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090ae:	bf00      	nop
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bc80      	pop	{r7}
 80090b6:	4770      	bx	lr
 80090b8:	200012b4 	.word	0x200012b4
 80090bc:	200012bc 	.word	0x200012bc

080090c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090c4:	2200      	movs	r2, #0
 80090c6:	4912      	ldr	r1, [pc, #72]	; (8009110 <MX_USB_DEVICE_Init+0x50>)
 80090c8:	4812      	ldr	r0, [pc, #72]	; (8009114 <MX_USB_DEVICE_Init+0x54>)
 80090ca:	f7fd fd6b 	bl	8006ba4 <USBD_Init>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090d4:	f7f7 fb60 	bl	8000798 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090d8:	490f      	ldr	r1, [pc, #60]	; (8009118 <MX_USB_DEVICE_Init+0x58>)
 80090da:	480e      	ldr	r0, [pc, #56]	; (8009114 <MX_USB_DEVICE_Init+0x54>)
 80090dc:	f7fd fd8d 	bl	8006bfa <USBD_RegisterClass>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090e6:	f7f7 fb57 	bl	8000798 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090ea:	490c      	ldr	r1, [pc, #48]	; (800911c <MX_USB_DEVICE_Init+0x5c>)
 80090ec:	4809      	ldr	r0, [pc, #36]	; (8009114 <MX_USB_DEVICE_Init+0x54>)
 80090ee:	f7fd fced 	bl	8006acc <USBD_CDC_RegisterInterface>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090f8:	f7f7 fb4e 	bl	8000798 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090fc:	4805      	ldr	r0, [pc, #20]	; (8009114 <MX_USB_DEVICE_Init+0x54>)
 80090fe:	f7fd fd95 	bl	8006c2c <USBD_Start>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009108:	f7f7 fb46 	bl	8000798 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800910c:	bf00      	nop
 800910e:	bd80      	pop	{r7, pc}
 8009110:	20000130 	.word	0x20000130
 8009114:	200012cc 	.word	0x200012cc
 8009118:	20000018 	.word	0x20000018
 800911c:	20000120 	.word	0x20000120

08009120 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009124:	2200      	movs	r2, #0
 8009126:	4905      	ldr	r1, [pc, #20]	; (800913c <CDC_Init_FS+0x1c>)
 8009128:	4805      	ldr	r0, [pc, #20]	; (8009140 <CDC_Init_FS+0x20>)
 800912a:	f7fd fce5 	bl	8006af8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800912e:	4905      	ldr	r1, [pc, #20]	; (8009144 <CDC_Init_FS+0x24>)
 8009130:	4803      	ldr	r0, [pc, #12]	; (8009140 <CDC_Init_FS+0x20>)
 8009132:	f7fd fcfa 	bl	8006b2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009136:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009138:	4618      	mov	r0, r3
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20001978 	.word	0x20001978
 8009140:	200012cc 	.word	0x200012cc
 8009144:	20001590 	.word	0x20001590

08009148 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009148:	b480      	push	{r7}
 800914a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800914c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800914e:	4618      	mov	r0, r3
 8009150:	46bd      	mov	sp, r7
 8009152:	bc80      	pop	{r7}
 8009154:	4770      	bx	lr
	...

08009158 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	6039      	str	r1, [r7, #0]
 8009162:	71fb      	strb	r3, [r7, #7]
 8009164:	4613      	mov	r3, r2
 8009166:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009168:	79fb      	ldrb	r3, [r7, #7]
 800916a:	2b23      	cmp	r3, #35	; 0x23
 800916c:	d84a      	bhi.n	8009204 <CDC_Control_FS+0xac>
 800916e:	a201      	add	r2, pc, #4	; (adr r2, 8009174 <CDC_Control_FS+0x1c>)
 8009170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009174:	08009205 	.word	0x08009205
 8009178:	08009205 	.word	0x08009205
 800917c:	08009205 	.word	0x08009205
 8009180:	08009205 	.word	0x08009205
 8009184:	08009205 	.word	0x08009205
 8009188:	08009205 	.word	0x08009205
 800918c:	08009205 	.word	0x08009205
 8009190:	08009205 	.word	0x08009205
 8009194:	08009205 	.word	0x08009205
 8009198:	08009205 	.word	0x08009205
 800919c:	08009205 	.word	0x08009205
 80091a0:	08009205 	.word	0x08009205
 80091a4:	08009205 	.word	0x08009205
 80091a8:	08009205 	.word	0x08009205
 80091ac:	08009205 	.word	0x08009205
 80091b0:	08009205 	.word	0x08009205
 80091b4:	08009205 	.word	0x08009205
 80091b8:	08009205 	.word	0x08009205
 80091bc:	08009205 	.word	0x08009205
 80091c0:	08009205 	.word	0x08009205
 80091c4:	08009205 	.word	0x08009205
 80091c8:	08009205 	.word	0x08009205
 80091cc:	08009205 	.word	0x08009205
 80091d0:	08009205 	.word	0x08009205
 80091d4:	08009205 	.word	0x08009205
 80091d8:	08009205 	.word	0x08009205
 80091dc:	08009205 	.word	0x08009205
 80091e0:	08009205 	.word	0x08009205
 80091e4:	08009205 	.word	0x08009205
 80091e8:	08009205 	.word	0x08009205
 80091ec:	08009205 	.word	0x08009205
 80091f0:	08009205 	.word	0x08009205
 80091f4:	08009205 	.word	0x08009205
 80091f8:	08009205 	.word	0x08009205
 80091fc:	08009205 	.word	0x08009205
 8009200:	08009205 	.word	0x08009205
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009204:	bf00      	nop
  }

  return (USBD_OK);
 8009206:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	bc80      	pop	{r7}
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop

08009214 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800921e:	6879      	ldr	r1, [r7, #4]
 8009220:	4805      	ldr	r0, [pc, #20]	; (8009238 <CDC_Receive_FS+0x24>)
 8009222:	f7fd fc82 	bl	8006b2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009226:	4804      	ldr	r0, [pc, #16]	; (8009238 <CDC_Receive_FS+0x24>)
 8009228:	f7fd fc92 	bl	8006b50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800922c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	200012cc 	.word	0x200012cc

0800923c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	6039      	str	r1, [r7, #0]
 8009246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2212      	movs	r2, #18
 800924c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800924e:	4b03      	ldr	r3, [pc, #12]	; (800925c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009250:	4618      	mov	r0, r3
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	bc80      	pop	{r7}
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	2000014c 	.word	0x2000014c

08009260 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	6039      	str	r1, [r7, #0]
 800926a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2204      	movs	r2, #4
 8009270:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009272:	4b03      	ldr	r3, [pc, #12]	; (8009280 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	bc80      	pop	{r7}
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	20000160 	.word	0x20000160

08009284 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	6039      	str	r1, [r7, #0]
 800928e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009290:	79fb      	ldrb	r3, [r7, #7]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d105      	bne.n	80092a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	4907      	ldr	r1, [pc, #28]	; (80092b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800929a:	4808      	ldr	r0, [pc, #32]	; (80092bc <USBD_FS_ProductStrDescriptor+0x38>)
 800929c:	f7fe fc3e 	bl	8007b1c <USBD_GetString>
 80092a0:	e004      	b.n	80092ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	4904      	ldr	r1, [pc, #16]	; (80092b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80092a6:	4805      	ldr	r0, [pc, #20]	; (80092bc <USBD_FS_ProductStrDescriptor+0x38>)
 80092a8:	f7fe fc38 	bl	8007b1c <USBD_GetString>
  }
  return USBD_StrDesc;
 80092ac:	4b02      	ldr	r3, [pc, #8]	; (80092b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	20001d60 	.word	0x20001d60
 80092bc:	08009a5c 	.word	0x08009a5c

080092c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	4603      	mov	r3, r0
 80092c8:	6039      	str	r1, [r7, #0]
 80092ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	4904      	ldr	r1, [pc, #16]	; (80092e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092d0:	4804      	ldr	r0, [pc, #16]	; (80092e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092d2:	f7fe fc23 	bl	8007b1c <USBD_GetString>
  return USBD_StrDesc;
 80092d6:	4b02      	ldr	r3, [pc, #8]	; (80092e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	20001d60 	.word	0x20001d60
 80092e4:	08009a74 	.word	0x08009a74

080092e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	6039      	str	r1, [r7, #0]
 80092f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	221a      	movs	r2, #26
 80092f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092fa:	f000 f843 	bl	8009384 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092fe:	4b02      	ldr	r3, [pc, #8]	; (8009308 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009300:	4618      	mov	r0, r3
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	20000164 	.word	0x20000164

0800930c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	4603      	mov	r3, r0
 8009314:	6039      	str	r1, [r7, #0]
 8009316:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009318:	79fb      	ldrb	r3, [r7, #7]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d105      	bne.n	800932a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	4907      	ldr	r1, [pc, #28]	; (8009340 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009322:	4808      	ldr	r0, [pc, #32]	; (8009344 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009324:	f7fe fbfa 	bl	8007b1c <USBD_GetString>
 8009328:	e004      	b.n	8009334 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	4904      	ldr	r1, [pc, #16]	; (8009340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800932e:	4805      	ldr	r0, [pc, #20]	; (8009344 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009330:	f7fe fbf4 	bl	8007b1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009334:	4b02      	ldr	r3, [pc, #8]	; (8009340 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20001d60 	.word	0x20001d60
 8009344:	08009a88 	.word	0x08009a88

08009348 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	6039      	str	r1, [r7, #0]
 8009352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d105      	bne.n	8009366 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	4907      	ldr	r1, [pc, #28]	; (800937c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800935e:	4808      	ldr	r0, [pc, #32]	; (8009380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009360:	f7fe fbdc 	bl	8007b1c <USBD_GetString>
 8009364:	e004      	b.n	8009370 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	4904      	ldr	r1, [pc, #16]	; (800937c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800936a:	4805      	ldr	r0, [pc, #20]	; (8009380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800936c:	f7fe fbd6 	bl	8007b1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009370:	4b02      	ldr	r3, [pc, #8]	; (800937c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	20001d60 	.word	0x20001d60
 8009380:	08009a94 	.word	0x08009a94

08009384 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800938a:	4b0f      	ldr	r3, [pc, #60]	; (80093c8 <Get_SerialNum+0x44>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009390:	4b0e      	ldr	r3, [pc, #56]	; (80093cc <Get_SerialNum+0x48>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009396:	4b0e      	ldr	r3, [pc, #56]	; (80093d0 <Get_SerialNum+0x4c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4413      	add	r3, r2
 80093a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d009      	beq.n	80093be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093aa:	2208      	movs	r2, #8
 80093ac:	4909      	ldr	r1, [pc, #36]	; (80093d4 <Get_SerialNum+0x50>)
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f000 f814 	bl	80093dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093b4:	2204      	movs	r2, #4
 80093b6:	4908      	ldr	r1, [pc, #32]	; (80093d8 <Get_SerialNum+0x54>)
 80093b8:	68b8      	ldr	r0, [r7, #8]
 80093ba:	f000 f80f 	bl	80093dc <IntToUnicode>
  }
}
 80093be:	bf00      	nop
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	1ffff7e8 	.word	0x1ffff7e8
 80093cc:	1ffff7ec 	.word	0x1ffff7ec
 80093d0:	1ffff7f0 	.word	0x1ffff7f0
 80093d4:	20000166 	.word	0x20000166
 80093d8:	20000176 	.word	0x20000176

080093dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093dc:	b480      	push	{r7}
 80093de:	b087      	sub	sp, #28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	4613      	mov	r3, r2
 80093e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093ee:	2300      	movs	r3, #0
 80093f0:	75fb      	strb	r3, [r7, #23]
 80093f2:	e027      	b.n	8009444 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	0f1b      	lsrs	r3, r3, #28
 80093f8:	2b09      	cmp	r3, #9
 80093fa:	d80b      	bhi.n	8009414 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	0f1b      	lsrs	r3, r3, #28
 8009400:	b2da      	uxtb	r2, r3
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	4619      	mov	r1, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	440b      	add	r3, r1
 800940c:	3230      	adds	r2, #48	; 0x30
 800940e:	b2d2      	uxtb	r2, r2
 8009410:	701a      	strb	r2, [r3, #0]
 8009412:	e00a      	b.n	800942a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	0f1b      	lsrs	r3, r3, #28
 8009418:	b2da      	uxtb	r2, r3
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	005b      	lsls	r3, r3, #1
 800941e:	4619      	mov	r1, r3
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	440b      	add	r3, r1
 8009424:	3237      	adds	r2, #55	; 0x37
 8009426:	b2d2      	uxtb	r2, r2
 8009428:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	011b      	lsls	r3, r3, #4
 800942e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	005b      	lsls	r3, r3, #1
 8009434:	3301      	adds	r3, #1
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	4413      	add	r3, r2
 800943a:	2200      	movs	r2, #0
 800943c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800943e:	7dfb      	ldrb	r3, [r7, #23]
 8009440:	3301      	adds	r3, #1
 8009442:	75fb      	strb	r3, [r7, #23]
 8009444:	7dfa      	ldrb	r2, [r7, #23]
 8009446:	79fb      	ldrb	r3, [r7, #7]
 8009448:	429a      	cmp	r2, r3
 800944a:	d3d3      	bcc.n	80093f4 <IntToUnicode+0x18>
  }
}
 800944c:	bf00      	nop
 800944e:	bf00      	nop
 8009450:	371c      	adds	r7, #28
 8009452:	46bd      	mov	sp, r7
 8009454:	bc80      	pop	{r7}
 8009456:	4770      	bx	lr

08009458 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a0d      	ldr	r2, [pc, #52]	; (800949c <HAL_PCD_MspInit+0x44>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d113      	bne.n	8009492 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800946a:	4b0d      	ldr	r3, [pc, #52]	; (80094a0 <HAL_PCD_MspInit+0x48>)
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	4a0c      	ldr	r2, [pc, #48]	; (80094a0 <HAL_PCD_MspInit+0x48>)
 8009470:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009474:	61d3      	str	r3, [r2, #28]
 8009476:	4b0a      	ldr	r3, [pc, #40]	; (80094a0 <HAL_PCD_MspInit+0x48>)
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009482:	2200      	movs	r2, #0
 8009484:	2105      	movs	r1, #5
 8009486:	2014      	movs	r0, #20
 8009488:	f7f7 fcbb 	bl	8000e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800948c:	2014      	movs	r0, #20
 800948e:	f7f7 fcd4 	bl	8000e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009492:	bf00      	nop
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	40005c00 	.word	0x40005c00
 80094a0:	40021000 	.word	0x40021000

080094a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80094b8:	4619      	mov	r1, r3
 80094ba:	4610      	mov	r0, r2
 80094bc:	f7fd fbfe 	bl	8006cbc <USBD_LL_SetupStage>
}
 80094c0:	bf00      	nop
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	460b      	mov	r3, r1
 80094d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80094da:	78fa      	ldrb	r2, [r7, #3]
 80094dc:	6879      	ldr	r1, [r7, #4]
 80094de:	4613      	mov	r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	00db      	lsls	r3, r3, #3
 80094e6:	440b      	add	r3, r1
 80094e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	78fb      	ldrb	r3, [r7, #3]
 80094f0:	4619      	mov	r1, r3
 80094f2:	f7fd fc30 	bl	8006d56 <USBD_LL_DataOutStage>
}
 80094f6:	bf00      	nop
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b082      	sub	sp, #8
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	460b      	mov	r3, r1
 8009508:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009510:	78fa      	ldrb	r2, [r7, #3]
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	4613      	mov	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	440b      	add	r3, r1
 800951e:	333c      	adds	r3, #60	; 0x3c
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	78fb      	ldrb	r3, [r7, #3]
 8009524:	4619      	mov	r1, r3
 8009526:	f7fd fc87 	bl	8006e38 <USBD_LL_DataInStage>
}
 800952a:	bf00      	nop
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b082      	sub	sp, #8
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009540:	4618      	mov	r0, r3
 8009542:	f7fd fd97 	bl	8007074 <USBD_LL_SOF>
}
 8009546:	bf00      	nop
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009556:	2301      	movs	r3, #1
 8009558:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	2b02      	cmp	r3, #2
 8009560:	d001      	beq.n	8009566 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009562:	f7f7 f919 	bl	8000798 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800956c:	7bfa      	ldrb	r2, [r7, #15]
 800956e:	4611      	mov	r1, r2
 8009570:	4618      	mov	r0, r3
 8009572:	f7fd fd47 	bl	8007004 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800957c:	4618      	mov	r0, r3
 800957e:	f7fd fd00 	bl	8006f82 <USBD_LL_Reset>
}
 8009582:	bf00      	nop
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
	...

0800958c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800959a:	4618      	mov	r0, r3
 800959c:	f7fd fd41 	bl	8007022 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d005      	beq.n	80095b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095a8:	4b04      	ldr	r3, [pc, #16]	; (80095bc <HAL_PCD_SuspendCallback+0x30>)
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	4a03      	ldr	r2, [pc, #12]	; (80095bc <HAL_PCD_SuspendCallback+0x30>)
 80095ae:	f043 0306 	orr.w	r3, r3, #6
 80095b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80095b4:	bf00      	nop
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	e000ed00 	.word	0xe000ed00

080095c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fd fd3b 	bl	800704a <USBD_LL_Resume>
}
 80095d4:	bf00      	nop
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80095e4:	4a28      	ldr	r2, [pc, #160]	; (8009688 <USBD_LL_Init+0xac>)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a26      	ldr	r2, [pc, #152]	; (8009688 <USBD_LL_Init+0xac>)
 80095f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80095f4:	4b24      	ldr	r3, [pc, #144]	; (8009688 <USBD_LL_Init+0xac>)
 80095f6:	4a25      	ldr	r2, [pc, #148]	; (800968c <USBD_LL_Init+0xb0>)
 80095f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80095fa:	4b23      	ldr	r3, [pc, #140]	; (8009688 <USBD_LL_Init+0xac>)
 80095fc:	2208      	movs	r2, #8
 80095fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009600:	4b21      	ldr	r3, [pc, #132]	; (8009688 <USBD_LL_Init+0xac>)
 8009602:	2202      	movs	r2, #2
 8009604:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009606:	4b20      	ldr	r3, [pc, #128]	; (8009688 <USBD_LL_Init+0xac>)
 8009608:	2200      	movs	r2, #0
 800960a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800960c:	4b1e      	ldr	r3, [pc, #120]	; (8009688 <USBD_LL_Init+0xac>)
 800960e:	2200      	movs	r2, #0
 8009610:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009612:	4b1d      	ldr	r3, [pc, #116]	; (8009688 <USBD_LL_Init+0xac>)
 8009614:	2200      	movs	r2, #0
 8009616:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009618:	481b      	ldr	r0, [pc, #108]	; (8009688 <USBD_LL_Init+0xac>)
 800961a:	f7f7 fdd5 	bl	80011c8 <HAL_PCD_Init>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009624:	f7f7 f8b8 	bl	8000798 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800962e:	2318      	movs	r3, #24
 8009630:	2200      	movs	r2, #0
 8009632:	2100      	movs	r1, #0
 8009634:	f7f9 fa49 	bl	8002aca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800963e:	2358      	movs	r3, #88	; 0x58
 8009640:	2200      	movs	r2, #0
 8009642:	2180      	movs	r1, #128	; 0x80
 8009644:	f7f9 fa41 	bl	8002aca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800964e:	23c0      	movs	r3, #192	; 0xc0
 8009650:	2200      	movs	r2, #0
 8009652:	2181      	movs	r1, #129	; 0x81
 8009654:	f7f9 fa39 	bl	8002aca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800965e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009662:	2200      	movs	r2, #0
 8009664:	2101      	movs	r1, #1
 8009666:	f7f9 fa30 	bl	8002aca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009674:	2200      	movs	r2, #0
 8009676:	2182      	movs	r1, #130	; 0x82
 8009678:	f7f9 fa27 	bl	8002aca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	20001f60 	.word	0x20001f60
 800968c:	40005c00 	.word	0x40005c00

08009690 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7f7 fe99 	bl	80013de <HAL_PCD_Start>
 80096ac:	4603      	mov	r3, r0
 80096ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 f94e 	bl	8009954 <USBD_Get_USB_Status>
 80096b8:	4603      	mov	r3, r0
 80096ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b084      	sub	sp, #16
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	4608      	mov	r0, r1
 80096d0:	4611      	mov	r1, r2
 80096d2:	461a      	mov	r2, r3
 80096d4:	4603      	mov	r3, r0
 80096d6:	70fb      	strb	r3, [r7, #3]
 80096d8:	460b      	mov	r3, r1
 80096da:	70bb      	strb	r3, [r7, #2]
 80096dc:	4613      	mov	r3, r2
 80096de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096ee:	78bb      	ldrb	r3, [r7, #2]
 80096f0:	883a      	ldrh	r2, [r7, #0]
 80096f2:	78f9      	ldrb	r1, [r7, #3]
 80096f4:	f7f8 f811 	bl	800171a <HAL_PCD_EP_Open>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 f928 	bl	8009954 <USBD_Get_USB_Status>
 8009704:	4603      	mov	r3, r0
 8009706:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009708:	7bbb      	ldrb	r3, [r7, #14]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	460b      	mov	r3, r1
 800971c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800972c:	78fa      	ldrb	r2, [r7, #3]
 800972e:	4611      	mov	r1, r2
 8009730:	4618      	mov	r0, r3
 8009732:	f7f8 f858 	bl	80017e6 <HAL_PCD_EP_Close>
 8009736:	4603      	mov	r3, r0
 8009738:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800973a:	7bfb      	ldrb	r3, [r7, #15]
 800973c:	4618      	mov	r0, r3
 800973e:	f000 f909 	bl	8009954 <USBD_Get_USB_Status>
 8009742:	4603      	mov	r3, r0
 8009744:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009746:	7bbb      	ldrb	r3, [r7, #14]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800976a:	78fa      	ldrb	r2, [r7, #3]
 800976c:	4611      	mov	r1, r2
 800976e:	4618      	mov	r0, r3
 8009770:	f7f8 f918 	bl	80019a4 <HAL_PCD_EP_SetStall>
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	4618      	mov	r0, r3
 800977c:	f000 f8ea 	bl	8009954 <USBD_Get_USB_Status>
 8009780:	4603      	mov	r3, r0
 8009782:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009784:	7bbb      	ldrb	r3, [r7, #14]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	460b      	mov	r3, r1
 8009798:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097a8:	78fa      	ldrb	r2, [r7, #3]
 80097aa:	4611      	mov	r1, r2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7f8 f959 	bl	8001a64 <HAL_PCD_EP_ClrStall>
 80097b2:	4603      	mov	r3, r0
 80097b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 f8cb 	bl	8009954 <USBD_Get_USB_Status>
 80097be:	4603      	mov	r3, r0
 80097c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	da0c      	bge.n	8009802 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097e8:	78fb      	ldrb	r3, [r7, #3]
 80097ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ee:	68f9      	ldr	r1, [r7, #12]
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	00db      	lsls	r3, r3, #3
 80097fa:	440b      	add	r3, r1
 80097fc:	3302      	adds	r3, #2
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	e00b      	b.n	800981a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009802:	78fb      	ldrb	r3, [r7, #3]
 8009804:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009808:	68f9      	ldr	r1, [r7, #12]
 800980a:	4613      	mov	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	00db      	lsls	r3, r3, #3
 8009812:	440b      	add	r3, r1
 8009814:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009818:	781b      	ldrb	r3, [r3, #0]
  }
}
 800981a:	4618      	mov	r0, r3
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	bc80      	pop	{r7}
 8009822:	4770      	bx	lr

08009824 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800983e:	78fa      	ldrb	r2, [r7, #3]
 8009840:	4611      	mov	r1, r2
 8009842:	4618      	mov	r0, r3
 8009844:	f7f7 ff44 	bl	80016d0 <HAL_PCD_SetAddress>
 8009848:	4603      	mov	r3, r0
 800984a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f880 	bl	8009954 <USBD_Get_USB_Status>
 8009854:	4603      	mov	r3, r0
 8009856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009858:	7bbb      	ldrb	r3, [r7, #14]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b086      	sub	sp, #24
 8009866:	af00      	add	r7, sp, #0
 8009868:	60f8      	str	r0, [r7, #12]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	461a      	mov	r2, r3
 800986e:	460b      	mov	r3, r1
 8009870:	72fb      	strb	r3, [r7, #11]
 8009872:	4613      	mov	r3, r2
 8009874:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009884:	893b      	ldrh	r3, [r7, #8]
 8009886:	7af9      	ldrb	r1, [r7, #11]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	f7f8 f848 	bl	800191e <HAL_PCD_EP_Transmit>
 800988e:	4603      	mov	r3, r0
 8009890:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009892:	7dfb      	ldrb	r3, [r7, #23]
 8009894:	4618      	mov	r0, r3
 8009896:	f000 f85d 	bl	8009954 <USBD_Get_USB_Status>
 800989a:	4603      	mov	r3, r0
 800989c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800989e:	7dbb      	ldrb	r3, [r7, #22]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	607a      	str	r2, [r7, #4]
 80098b2:	461a      	mov	r2, r3
 80098b4:	460b      	mov	r3, r1
 80098b6:	72fb      	strb	r3, [r7, #11]
 80098b8:	4613      	mov	r3, r2
 80098ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c0:	2300      	movs	r3, #0
 80098c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098ca:	893b      	ldrh	r3, [r7, #8]
 80098cc:	7af9      	ldrb	r1, [r7, #11]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	f7f7 ffd1 	bl	8001876 <HAL_PCD_EP_Receive>
 80098d4:	4603      	mov	r3, r0
 80098d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098d8:	7dfb      	ldrb	r3, [r7, #23]
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 f83a 	bl	8009954 <USBD_Get_USB_Status>
 80098e0:	4603      	mov	r3, r0
 80098e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3718      	adds	r7, #24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b082      	sub	sp, #8
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	460b      	mov	r3, r1
 80098f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009900:	78fa      	ldrb	r2, [r7, #3]
 8009902:	4611      	mov	r1, r2
 8009904:	4618      	mov	r0, r3
 8009906:	f7f7 fff3 	bl	80018f0 <HAL_PCD_EP_GetRxCount>
 800990a:	4603      	mov	r3, r0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800991c:	4b02      	ldr	r3, [pc, #8]	; (8009928 <USBD_static_malloc+0x14>)
}
 800991e:	4618      	mov	r0, r3
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	bc80      	pop	{r7}
 8009926:	4770      	bx	lr
 8009928:	2000224c 	.word	0x2000224c

0800992c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]

}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	bc80      	pop	{r7}
 800993c:	4770      	bx	lr

0800993e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800993e:	b480      	push	{r7}
 8009940:	b083      	sub	sp, #12
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	460b      	mov	r3, r1
 8009948:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800994a:	bf00      	nop
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	bc80      	pop	{r7}
 8009952:	4770      	bx	lr

08009954 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	4603      	mov	r3, r0
 800995c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009962:	79fb      	ldrb	r3, [r7, #7]
 8009964:	2b03      	cmp	r3, #3
 8009966:	d817      	bhi.n	8009998 <USBD_Get_USB_Status+0x44>
 8009968:	a201      	add	r2, pc, #4	; (adr r2, 8009970 <USBD_Get_USB_Status+0x1c>)
 800996a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996e:	bf00      	nop
 8009970:	08009981 	.word	0x08009981
 8009974:	08009987 	.word	0x08009987
 8009978:	0800998d 	.word	0x0800998d
 800997c:	08009993 	.word	0x08009993
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	73fb      	strb	r3, [r7, #15]
    break;
 8009984:	e00b      	b.n	800999e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009986:	2302      	movs	r3, #2
 8009988:	73fb      	strb	r3, [r7, #15]
    break;
 800998a:	e008      	b.n	800999e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800998c:	2301      	movs	r3, #1
 800998e:	73fb      	strb	r3, [r7, #15]
    break;
 8009990:	e005      	b.n	800999e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009992:	2302      	movs	r3, #2
 8009994:	73fb      	strb	r3, [r7, #15]
    break;
 8009996:	e002      	b.n	800999e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009998:	2302      	movs	r3, #2
 800999a:	73fb      	strb	r3, [r7, #15]
    break;
 800999c:	bf00      	nop
  }
  return usb_status;
 800999e:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bc80      	pop	{r7}
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop

080099ac <__libc_init_array>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	2600      	movs	r6, #0
 80099b0:	4d0c      	ldr	r5, [pc, #48]	; (80099e4 <__libc_init_array+0x38>)
 80099b2:	4c0d      	ldr	r4, [pc, #52]	; (80099e8 <__libc_init_array+0x3c>)
 80099b4:	1b64      	subs	r4, r4, r5
 80099b6:	10a4      	asrs	r4, r4, #2
 80099b8:	42a6      	cmp	r6, r4
 80099ba:	d109      	bne.n	80099d0 <__libc_init_array+0x24>
 80099bc:	f000 f822 	bl	8009a04 <_init>
 80099c0:	2600      	movs	r6, #0
 80099c2:	4d0a      	ldr	r5, [pc, #40]	; (80099ec <__libc_init_array+0x40>)
 80099c4:	4c0a      	ldr	r4, [pc, #40]	; (80099f0 <__libc_init_array+0x44>)
 80099c6:	1b64      	subs	r4, r4, r5
 80099c8:	10a4      	asrs	r4, r4, #2
 80099ca:	42a6      	cmp	r6, r4
 80099cc:	d105      	bne.n	80099da <__libc_init_array+0x2e>
 80099ce:	bd70      	pop	{r4, r5, r6, pc}
 80099d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099d4:	4798      	blx	r3
 80099d6:	3601      	adds	r6, #1
 80099d8:	e7ee      	b.n	80099b8 <__libc_init_array+0xc>
 80099da:	f855 3b04 	ldr.w	r3, [r5], #4
 80099de:	4798      	blx	r3
 80099e0:	3601      	adds	r6, #1
 80099e2:	e7f2      	b.n	80099ca <__libc_init_array+0x1e>
 80099e4:	08009abc 	.word	0x08009abc
 80099e8:	08009abc 	.word	0x08009abc
 80099ec:	08009abc 	.word	0x08009abc
 80099f0:	08009ac0 	.word	0x08009ac0

080099f4 <memset>:
 80099f4:	4603      	mov	r3, r0
 80099f6:	4402      	add	r2, r0
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d100      	bne.n	80099fe <memset+0xa>
 80099fc:	4770      	bx	lr
 80099fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009a02:	e7f9      	b.n	80099f8 <memset+0x4>

08009a04 <_init>:
 8009a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a06:	bf00      	nop
 8009a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a0a:	bc08      	pop	{r3}
 8009a0c:	469e      	mov	lr, r3
 8009a0e:	4770      	bx	lr

08009a10 <_fini>:
 8009a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a12:	bf00      	nop
 8009a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a16:	bc08      	pop	{r3}
 8009a18:	469e      	mov	lr, r3
 8009a1a:	4770      	bx	lr
