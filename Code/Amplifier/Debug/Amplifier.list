
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080061a8  080061a8  000161a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000054  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000100  080062c4  080062c4  000162c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063c4  080063c4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080063c4  080063c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063cc  080063cc  000163cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080063d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b7c  20000078  08006448  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bf4  08006448  00021bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001983b  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c6a  00000000  00000000  000398dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  0003d548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c8  00000000  00000000  0003ee50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d814  00000000  00000000  00040618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b5fb  00000000  00000000  0005de2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8682  00000000  00000000  00079427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121aa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071cc  00000000  00000000  00121afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000078 	.word	0x20000078
 800020c:	00000000 	.word	0x00000000
 8000210:	08006190 	.word	0x08006190

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000007c 	.word	0x2000007c
 800022c:	08006190 	.word	0x08006190

08000230 <selfrel_offset31>:
 8000230:	6803      	ldr	r3, [r0, #0]
 8000232:	005a      	lsls	r2, r3, #1
 8000234:	bf4c      	ite	mi
 8000236:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800023a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800023e:	4418      	add	r0, r3
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop

08000244 <search_EIT_table>:
 8000244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000248:	b339      	cbz	r1, 800029a <search_EIT_table+0x56>
 800024a:	1e4f      	subs	r7, r1, #1
 800024c:	4604      	mov	r4, r0
 800024e:	4615      	mov	r5, r2
 8000250:	463e      	mov	r6, r7
 8000252:	f04f 0800 	mov.w	r8, #0
 8000256:	eb08 0106 	add.w	r1, r8, r6
 800025a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800025e:	1049      	asrs	r1, r1, #1
 8000260:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000264:	4648      	mov	r0, r9
 8000266:	f7ff ffe3 	bl	8000230 <selfrel_offset31>
 800026a:	4603      	mov	r3, r0
 800026c:	00c8      	lsls	r0, r1, #3
 800026e:	3008      	adds	r0, #8
 8000270:	428f      	cmp	r7, r1
 8000272:	4420      	add	r0, r4
 8000274:	d00b      	beq.n	800028e <search_EIT_table+0x4a>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d80b      	bhi.n	8000292 <search_EIT_table+0x4e>
 800027a:	f7ff ffd9 	bl	8000230 <selfrel_offset31>
 800027e:	3801      	subs	r0, #1
 8000280:	42a8      	cmp	r0, r5
 8000282:	f101 0801 	add.w	r8, r1, #1
 8000286:	d3e6      	bcc.n	8000256 <search_EIT_table+0x12>
 8000288:	4648      	mov	r0, r9
 800028a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800028e:	42ab      	cmp	r3, r5
 8000290:	d9fa      	bls.n	8000288 <search_EIT_table+0x44>
 8000292:	4588      	cmp	r8, r1
 8000294:	d001      	beq.n	800029a <search_EIT_table+0x56>
 8000296:	1e4e      	subs	r6, r1, #1
 8000298:	e7dd      	b.n	8000256 <search_EIT_table+0x12>
 800029a:	f04f 0900 	mov.w	r9, #0
 800029e:	4648      	mov	r0, r9
 80002a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080002a4 <__gnu_unwind_get_pr_addr>:
 80002a4:	2801      	cmp	r0, #1
 80002a6:	d007      	beq.n	80002b8 <__gnu_unwind_get_pr_addr+0x14>
 80002a8:	2802      	cmp	r0, #2
 80002aa:	d007      	beq.n	80002bc <__gnu_unwind_get_pr_addr+0x18>
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <__gnu_unwind_get_pr_addr+0x1c>)
 80002ae:	2800      	cmp	r0, #0
 80002b0:	bf0c      	ite	eq
 80002b2:	4618      	moveq	r0, r3
 80002b4:	2000      	movne	r0, #0
 80002b6:	4770      	bx	lr
 80002b8:	4802      	ldr	r0, [pc, #8]	; (80002c4 <__gnu_unwind_get_pr_addr+0x20>)
 80002ba:	4770      	bx	lr
 80002bc:	4802      	ldr	r0, [pc, #8]	; (80002c8 <__gnu_unwind_get_pr_addr+0x24>)
 80002be:	4770      	bx	lr
 80002c0:	08000995 	.word	0x08000995
 80002c4:	08000999 	.word	0x08000999
 80002c8:	0800099d 	.word	0x0800099d

080002cc <get_eit_entry>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	4b24      	ldr	r3, [pc, #144]	; (8000360 <get_eit_entry+0x94>)
 80002d0:	4604      	mov	r4, r0
 80002d2:	b083      	sub	sp, #12
 80002d4:	1e8d      	subs	r5, r1, #2
 80002d6:	b33b      	cbz	r3, 8000328 <get_eit_entry+0x5c>
 80002d8:	4628      	mov	r0, r5
 80002da:	a901      	add	r1, sp, #4
 80002dc:	f3af 8000 	nop.w
 80002e0:	b1e8      	cbz	r0, 800031e <get_eit_entry+0x52>
 80002e2:	9901      	ldr	r1, [sp, #4]
 80002e4:	462a      	mov	r2, r5
 80002e6:	f7ff ffad 	bl	8000244 <search_EIT_table>
 80002ea:	4601      	mov	r1, r0
 80002ec:	b1b8      	cbz	r0, 800031e <get_eit_entry+0x52>
 80002ee:	f7ff ff9f 	bl	8000230 <selfrel_offset31>
 80002f2:	684b      	ldr	r3, [r1, #4]
 80002f4:	64a0      	str	r0, [r4, #72]	; 0x48
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d02e      	beq.n	8000358 <get_eit_entry+0x8c>
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	db27      	blt.n	800034e <get_eit_entry+0x82>
 80002fe:	1d08      	adds	r0, r1, #4
 8000300:	f7ff ff96 	bl	8000230 <selfrel_offset31>
 8000304:	2300      	movs	r3, #0
 8000306:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800030a:	6803      	ldr	r3, [r0, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	db12      	blt.n	8000336 <get_eit_entry+0x6a>
 8000310:	f7ff ff8e 	bl	8000230 <selfrel_offset31>
 8000314:	4603      	mov	r3, r0
 8000316:	2000      	movs	r0, #0
 8000318:	6123      	str	r3, [r4, #16]
 800031a:	b003      	add	sp, #12
 800031c:	bd30      	pop	{r4, r5, pc}
 800031e:	2300      	movs	r3, #0
 8000320:	2009      	movs	r0, #9
 8000322:	6123      	str	r3, [r4, #16]
 8000324:	b003      	add	sp, #12
 8000326:	bd30      	pop	{r4, r5, pc}
 8000328:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <get_eit_entry+0x98>)
 800032a:	490f      	ldr	r1, [pc, #60]	; (8000368 <get_eit_entry+0x9c>)
 800032c:	4618      	mov	r0, r3
 800032e:	1ac9      	subs	r1, r1, r3
 8000330:	10c9      	asrs	r1, r1, #3
 8000332:	9101      	str	r1, [sp, #4]
 8000334:	e7d6      	b.n	80002e4 <get_eit_entry+0x18>
 8000336:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800033a:	f7ff ffb3 	bl	80002a4 <__gnu_unwind_get_pr_addr>
 800033e:	2800      	cmp	r0, #0
 8000340:	4603      	mov	r3, r0
 8000342:	bf14      	ite	ne
 8000344:	2000      	movne	r0, #0
 8000346:	2009      	moveq	r0, #9
 8000348:	6123      	str	r3, [r4, #16]
 800034a:	b003      	add	sp, #12
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	2301      	movs	r3, #1
 8000350:	1d08      	adds	r0, r1, #4
 8000352:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000356:	e7d8      	b.n	800030a <get_eit_entry+0x3e>
 8000358:	2300      	movs	r3, #0
 800035a:	2005      	movs	r0, #5
 800035c:	6123      	str	r3, [r4, #16]
 800035e:	e7dc      	b.n	800031a <get_eit_entry+0x4e>
 8000360:	00000000 	.word	0x00000000
 8000364:	080062c4 	.word	0x080062c4
 8000368:	080063c4 	.word	0x080063c4

0800036c <restore_non_core_regs>:
 800036c:	6803      	ldr	r3, [r0, #0]
 800036e:	b510      	push	{r4, lr}
 8000370:	07da      	lsls	r2, r3, #31
 8000372:	4604      	mov	r4, r0
 8000374:	d406      	bmi.n	8000384 <restore_non_core_regs+0x18>
 8000376:	079b      	lsls	r3, r3, #30
 8000378:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800037c:	d509      	bpl.n	8000392 <restore_non_core_regs+0x26>
 800037e:	f000 fc5d 	bl	8000c3c <__gnu_Unwind_Restore_VFP_D>
 8000382:	6823      	ldr	r3, [r4, #0]
 8000384:	0759      	lsls	r1, r3, #29
 8000386:	d509      	bpl.n	800039c <restore_non_core_regs+0x30>
 8000388:	071a      	lsls	r2, r3, #28
 800038a:	d50e      	bpl.n	80003aa <restore_non_core_regs+0x3e>
 800038c:	06db      	lsls	r3, r3, #27
 800038e:	d513      	bpl.n	80003b8 <restore_non_core_regs+0x4c>
 8000390:	bd10      	pop	{r4, pc}
 8000392:	f000 fc4b 	bl	8000c2c <__gnu_Unwind_Restore_VFP>
 8000396:	6823      	ldr	r3, [r4, #0]
 8000398:	0759      	lsls	r1, r3, #29
 800039a:	d4f5      	bmi.n	8000388 <restore_non_core_regs+0x1c>
 800039c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80003a0:	f000 fc54 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80003a4:	6823      	ldr	r3, [r4, #0]
 80003a6:	071a      	lsls	r2, r3, #28
 80003a8:	d4f0      	bmi.n	800038c <restore_non_core_regs+0x20>
 80003aa:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80003ae:	f000 fc55 	bl	8000c5c <__gnu_Unwind_Restore_WMMXD>
 80003b2:	6823      	ldr	r3, [r4, #0]
 80003b4:	06db      	lsls	r3, r3, #27
 80003b6:	d4eb      	bmi.n	8000390 <restore_non_core_regs+0x24>
 80003b8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80003bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003c0:	f000 bc90 	b.w	8000ce4 <__gnu_Unwind_Restore_WMMXC>

080003c4 <__gnu_unwind_24bit.constprop.0>:
 80003c4:	2009      	movs	r0, #9
 80003c6:	4770      	bx	lr

080003c8 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80003c8:	4603      	mov	r3, r0
 80003ca:	6800      	ldr	r0, [r0, #0]
 80003cc:	b100      	cbz	r0, 80003d0 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80003ce:	4418      	add	r0, r3
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop

080003d4 <_Unwind_DebugHook>:
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop

080003d8 <unwind_phase2>:
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	4604      	mov	r4, r0
 80003dc:	460e      	mov	r6, r1
 80003de:	4620      	mov	r0, r4
 80003e0:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80003e2:	f7ff ff73 	bl	80002cc <get_eit_entry>
 80003e6:	4605      	mov	r5, r0
 80003e8:	b998      	cbnz	r0, 8000412 <unwind_phase2+0x3a>
 80003ea:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 80003ee:	4632      	mov	r2, r6
 80003f0:	4621      	mov	r1, r4
 80003f2:	2001      	movs	r0, #1
 80003f4:	6923      	ldr	r3, [r4, #16]
 80003f6:	f8c4 c014 	str.w	ip, [r4, #20]
 80003fa:	4798      	blx	r3
 80003fc:	2808      	cmp	r0, #8
 80003fe:	d0ee      	beq.n	80003de <unwind_phase2+0x6>
 8000400:	2807      	cmp	r0, #7
 8000402:	d106      	bne.n	8000412 <unwind_phase2+0x3a>
 8000404:	4628      	mov	r0, r5
 8000406:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000408:	f7ff ffe4 	bl	80003d4 <_Unwind_DebugHook>
 800040c:	1d30      	adds	r0, r6, #4
 800040e:	f000 fc01 	bl	8000c14 <__restore_core_regs>
 8000412:	f005 fe71 	bl	80060f8 <abort>
 8000416:	bf00      	nop

08000418 <unwind_phase2_forced>:
 8000418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800041c:	f04f 0a00 	mov.w	sl, #0
 8000420:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000424:	f10d 0e0c 	add.w	lr, sp, #12
 8000428:	f101 0c04 	add.w	ip, r1, #4
 800042c:	68c7      	ldr	r7, [r0, #12]
 800042e:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000432:	4606      	mov	r6, r0
 8000434:	4614      	mov	r4, r2
 8000436:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800043a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800043e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000442:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800044a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800044e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000452:	ad02      	add	r5, sp, #8
 8000454:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000458:	f8c5 a000 	str.w	sl, [r5]
 800045c:	e021      	b.n	80004a2 <unwind_phase2_forced+0x8a>
 800045e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000460:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000464:	4629      	mov	r1, r5
 8000466:	6173      	str	r3, [r6, #20]
 8000468:	a87a      	add	r0, sp, #488	; 0x1e8
 800046a:	f005 fdd9 	bl	8006020 <memcpy>
 800046e:	4631      	mov	r1, r6
 8000470:	4650      	mov	r0, sl
 8000472:	6933      	ldr	r3, [r6, #16]
 8000474:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000476:	4798      	blx	r3
 8000478:	9c88      	ldr	r4, [sp, #544]	; 0x220
 800047a:	4682      	mov	sl, r0
 800047c:	646c      	str	r4, [r5, #68]	; 0x44
 800047e:	4633      	mov	r3, r6
 8000480:	4632      	mov	r2, r6
 8000482:	4649      	mov	r1, r9
 8000484:	2001      	movs	r0, #1
 8000486:	e9cd 5800 	strd	r5, r8, [sp]
 800048a:	47b8      	blx	r7
 800048c:	4604      	mov	r4, r0
 800048e:	b9f0      	cbnz	r0, 80004ce <unwind_phase2_forced+0xb6>
 8000490:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000494:	4628      	mov	r0, r5
 8000496:	a97a      	add	r1, sp, #488	; 0x1e8
 8000498:	f005 fdc2 	bl	8006020 <memcpy>
 800049c:	f1ba 0f08 	cmp.w	sl, #8
 80004a0:	d11b      	bne.n	80004da <unwind_phase2_forced+0xc2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004a6:	f7ff ff11 	bl	80002cc <get_eit_entry>
 80004aa:	f104 0909 	add.w	r9, r4, #9
 80004ae:	fa5f fa89 	uxtb.w	sl, r9
 80004b2:	4604      	mov	r4, r0
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d0d2      	beq.n	800045e <unwind_phase2_forced+0x46>
 80004b8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80004ba:	4633      	mov	r3, r6
 80004bc:	6469      	str	r1, [r5, #68]	; 0x44
 80004be:	4632      	mov	r2, r6
 80004c0:	2001      	movs	r0, #1
 80004c2:	e9cd 5800 	strd	r5, r8, [sp]
 80004c6:	f04a 0110 	orr.w	r1, sl, #16
 80004ca:	47b8      	blx	r7
 80004cc:	b100      	cbz	r0, 80004d0 <unwind_phase2_forced+0xb8>
 80004ce:	2409      	movs	r4, #9
 80004d0:	4620      	mov	r0, r4
 80004d2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1ba 0f07 	cmp.w	sl, #7
 80004de:	d1f6      	bne.n	80004ce <unwind_phase2_forced+0xb6>
 80004e0:	4620      	mov	r0, r4
 80004e2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004e4:	f7ff ff76 	bl	80003d4 <_Unwind_DebugHook>
 80004e8:	a803      	add	r0, sp, #12
 80004ea:	f000 fb93 	bl	8000c14 <__restore_core_regs>
 80004ee:	bf00      	nop

080004f0 <_Unwind_GetCFA>:
 80004f0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80004f2:	4770      	bx	lr

080004f4 <__gnu_Unwind_RaiseException>:
 80004f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80004fa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80004fc:	b0f9      	sub	sp, #484	; 0x1e4
 80004fe:	640b      	str	r3, [r1, #64]	; 0x40
 8000500:	ac01      	add	r4, sp, #4
 8000502:	f101 0c04 	add.w	ip, r1, #4
 8000506:	460e      	mov	r6, r1
 8000508:	4605      	mov	r5, r0
 800050a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800050e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000510:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000516:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800051a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800051c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000520:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000524:	9700      	str	r7, [sp, #0]
 8000526:	e006      	b.n	8000536 <__gnu_Unwind_RaiseException+0x42>
 8000528:	466a      	mov	r2, sp
 800052a:	4629      	mov	r1, r5
 800052c:	692b      	ldr	r3, [r5, #16]
 800052e:	4798      	blx	r3
 8000530:	2808      	cmp	r0, #8
 8000532:	4604      	mov	r4, r0
 8000534:	d108      	bne.n	8000548 <__gnu_Unwind_RaiseException+0x54>
 8000536:	4628      	mov	r0, r5
 8000538:	9910      	ldr	r1, [sp, #64]	; 0x40
 800053a:	f7ff fec7 	bl	80002cc <get_eit_entry>
 800053e:	2800      	cmp	r0, #0
 8000540:	d0f2      	beq.n	8000528 <__gnu_Unwind_RaiseException+0x34>
 8000542:	2009      	movs	r0, #9
 8000544:	b079      	add	sp, #484	; 0x1e4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4668      	mov	r0, sp
 800054a:	f7ff ff0f 	bl	800036c <restore_non_core_regs>
 800054e:	2c06      	cmp	r4, #6
 8000550:	d1f7      	bne.n	8000542 <__gnu_Unwind_RaiseException+0x4e>
 8000552:	4631      	mov	r1, r6
 8000554:	4628      	mov	r0, r5
 8000556:	f7ff ff3f 	bl	80003d8 <unwind_phase2>
 800055a:	bf00      	nop

0800055c <__gnu_Unwind_ForcedUnwind>:
 800055c:	b410      	push	{r4}
 800055e:	4614      	mov	r4, r2
 8000560:	6184      	str	r4, [r0, #24]
 8000562:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000564:	60c1      	str	r1, [r0, #12]
 8000566:	2200      	movs	r2, #0
 8000568:	641c      	str	r4, [r3, #64]	; 0x40
 800056a:	4619      	mov	r1, r3
 800056c:	bc10      	pop	{r4}
 800056e:	e753      	b.n	8000418 <unwind_phase2_forced>

08000570 <__gnu_Unwind_Resume>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	6943      	ldr	r3, [r0, #20]
 8000574:	68c6      	ldr	r6, [r0, #12]
 8000576:	640b      	str	r3, [r1, #64]	; 0x40
 8000578:	b9ae      	cbnz	r6, 80005a6 <__gnu_Unwind_Resume+0x36>
 800057a:	460a      	mov	r2, r1
 800057c:	6903      	ldr	r3, [r0, #16]
 800057e:	4604      	mov	r4, r0
 8000580:	460d      	mov	r5, r1
 8000582:	4601      	mov	r1, r0
 8000584:	2002      	movs	r0, #2
 8000586:	4798      	blx	r3
 8000588:	2807      	cmp	r0, #7
 800058a:	d005      	beq.n	8000598 <__gnu_Unwind_Resume+0x28>
 800058c:	2808      	cmp	r0, #8
 800058e:	d10f      	bne.n	80005b0 <__gnu_Unwind_Resume+0x40>
 8000590:	4629      	mov	r1, r5
 8000592:	4620      	mov	r0, r4
 8000594:	f7ff ff20 	bl	80003d8 <unwind_phase2>
 8000598:	4630      	mov	r0, r6
 800059a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800059c:	f7ff ff1a 	bl	80003d4 <_Unwind_DebugHook>
 80005a0:	1d28      	adds	r0, r5, #4
 80005a2:	f000 fb37 	bl	8000c14 <__restore_core_regs>
 80005a6:	2201      	movs	r2, #1
 80005a8:	f7ff ff36 	bl	8000418 <unwind_phase2_forced>
 80005ac:	f005 fda4 	bl	80060f8 <abort>
 80005b0:	f005 fda2 	bl	80060f8 <abort>

080005b4 <__gnu_Unwind_Resume_or_Rethrow>:
 80005b4:	68c2      	ldr	r2, [r0, #12]
 80005b6:	b12a      	cbz	r2, 80005c4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80005b8:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 80005bc:	2200      	movs	r2, #0
 80005be:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 80005c2:	e729      	b.n	8000418 <unwind_phase2_forced>
 80005c4:	e796      	b.n	80004f4 <__gnu_Unwind_RaiseException>
 80005c6:	bf00      	nop

080005c8 <_Unwind_Complete>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <_Unwind_DeleteException>:
 80005cc:	6883      	ldr	r3, [r0, #8]
 80005ce:	4601      	mov	r1, r0
 80005d0:	b10b      	cbz	r3, 80005d6 <_Unwind_DeleteException+0xa>
 80005d2:	2001      	movs	r0, #1
 80005d4:	4718      	bx	r3
 80005d6:	4770      	bx	lr

080005d8 <_Unwind_VRS_Get>:
 80005d8:	2901      	cmp	r1, #1
 80005da:	d012      	beq.n	8000602 <_Unwind_VRS_Get+0x2a>
 80005dc:	d809      	bhi.n	80005f2 <_Unwind_VRS_Get+0x1a>
 80005de:	b973      	cbnz	r3, 80005fe <_Unwind_VRS_Get+0x26>
 80005e0:	2a0f      	cmp	r2, #15
 80005e2:	d80c      	bhi.n	80005fe <_Unwind_VRS_Get+0x26>
 80005e4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005e8:	6842      	ldr	r2, [r0, #4]
 80005ea:	4618      	mov	r0, r3
 80005ec:	9b00      	ldr	r3, [sp, #0]
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	4770      	bx	lr
 80005f2:	3903      	subs	r1, #3
 80005f4:	2901      	cmp	r1, #1
 80005f6:	bf94      	ite	ls
 80005f8:	2001      	movls	r0, #1
 80005fa:	2002      	movhi	r0, #2
 80005fc:	4770      	bx	lr
 80005fe:	2002      	movs	r0, #2
 8000600:	4770      	bx	lr
 8000602:	4608      	mov	r0, r1
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <_Unwind_GetGR>:
 8000608:	2300      	movs	r3, #0
 800060a:	b500      	push	{lr}
 800060c:	b085      	sub	sp, #20
 800060e:	460a      	mov	r2, r1
 8000610:	a903      	add	r1, sp, #12
 8000612:	9100      	str	r1, [sp, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f7ff ffdf 	bl	80005d8 <_Unwind_VRS_Get>
 800061a:	9803      	ldr	r0, [sp, #12]
 800061c:	b005      	add	sp, #20
 800061e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000622:	bf00      	nop

08000624 <_Unwind_VRS_Set>:
 8000624:	2901      	cmp	r1, #1
 8000626:	d012      	beq.n	800064e <_Unwind_VRS_Set+0x2a>
 8000628:	d809      	bhi.n	800063e <_Unwind_VRS_Set+0x1a>
 800062a:	b973      	cbnz	r3, 800064a <_Unwind_VRS_Set+0x26>
 800062c:	2a0f      	cmp	r2, #15
 800062e:	d80c      	bhi.n	800064a <_Unwind_VRS_Set+0x26>
 8000630:	9900      	ldr	r1, [sp, #0]
 8000632:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000636:	6809      	ldr	r1, [r1, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	6051      	str	r1, [r2, #4]
 800063c:	4770      	bx	lr
 800063e:	3903      	subs	r1, #3
 8000640:	2901      	cmp	r1, #1
 8000642:	bf94      	ite	ls
 8000644:	2001      	movls	r0, #1
 8000646:	2002      	movhi	r0, #2
 8000648:	4770      	bx	lr
 800064a:	2002      	movs	r0, #2
 800064c:	4770      	bx	lr
 800064e:	4608      	mov	r0, r1
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <_Unwind_SetGR>:
 8000654:	2300      	movs	r3, #0
 8000656:	b510      	push	{r4, lr}
 8000658:	b084      	sub	sp, #16
 800065a:	ac03      	add	r4, sp, #12
 800065c:	9203      	str	r2, [sp, #12]
 800065e:	9400      	str	r4, [sp, #0]
 8000660:	460a      	mov	r2, r1
 8000662:	4619      	mov	r1, r3
 8000664:	f7ff ffde 	bl	8000624 <_Unwind_VRS_Set>
 8000668:	b004      	add	sp, #16
 800066a:	bd10      	pop	{r4, pc}

0800066c <__gnu_Unwind_Backtrace>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000672:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000674:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000678:	6413      	str	r3, [r2, #64]	; 0x40
 800067a:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 800067e:	f102 0c04 	add.w	ip, r2, #4
 8000682:	4605      	mov	r5, r0
 8000684:	460c      	mov	r4, r1
 8000686:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800068a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800068e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000692:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000696:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800069a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800069e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80006a2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80006a6:	9616      	str	r6, [sp, #88]	; 0x58
 80006a8:	e012      	b.n	80006d0 <__gnu_Unwind_Backtrace+0x64>
 80006aa:	210c      	movs	r1, #12
 80006ac:	a816      	add	r0, sp, #88	; 0x58
 80006ae:	466a      	mov	r2, sp
 80006b0:	f7ff ffd0 	bl	8000654 <_Unwind_SetGR>
 80006b4:	4621      	mov	r1, r4
 80006b6:	a816      	add	r0, sp, #88	; 0x58
 80006b8:	47a8      	blx	r5
 80006ba:	b978      	cbnz	r0, 80006dc <__gnu_Unwind_Backtrace+0x70>
 80006bc:	4669      	mov	r1, sp
 80006be:	2008      	movs	r0, #8
 80006c0:	9b04      	ldr	r3, [sp, #16]
 80006c2:	aa16      	add	r2, sp, #88	; 0x58
 80006c4:	4798      	blx	r3
 80006c6:	2805      	cmp	r0, #5
 80006c8:	4606      	mov	r6, r0
 80006ca:	d008      	beq.n	80006de <__gnu_Unwind_Backtrace+0x72>
 80006cc:	2809      	cmp	r0, #9
 80006ce:	d005      	beq.n	80006dc <__gnu_Unwind_Backtrace+0x70>
 80006d0:	4668      	mov	r0, sp
 80006d2:	9926      	ldr	r1, [sp, #152]	; 0x98
 80006d4:	f7ff fdfa 	bl	80002cc <get_eit_entry>
 80006d8:	2800      	cmp	r0, #0
 80006da:	d0e6      	beq.n	80006aa <__gnu_Unwind_Backtrace+0x3e>
 80006dc:	2609      	movs	r6, #9
 80006de:	a816      	add	r0, sp, #88	; 0x58
 80006e0:	f7ff fe44 	bl	800036c <restore_non_core_regs>
 80006e4:	4630      	mov	r0, r6
 80006e6:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80006ea:	bd70      	pop	{r4, r5, r6, pc}

080006ec <__gnu_unwind_pr_common>:
 80006ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006f0:	461e      	mov	r6, r3
 80006f2:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80006f4:	b089      	sub	sp, #36	; 0x24
 80006f6:	f854 3b04 	ldr.w	r3, [r4], #4
 80006fa:	460d      	mov	r5, r1
 80006fc:	4617      	mov	r7, r2
 80006fe:	f000 0803 	and.w	r8, r0, #3
 8000702:	9406      	str	r4, [sp, #24]
 8000704:	2e00      	cmp	r6, #0
 8000706:	d079      	beq.n	80007fc <__gnu_unwind_pr_common+0x110>
 8000708:	2202      	movs	r2, #2
 800070a:	f88d 201c 	strb.w	r2, [sp, #28]
 800070e:	0c1a      	lsrs	r2, r3, #16
 8000710:	f88d 201d 	strb.w	r2, [sp, #29]
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	9305      	str	r3, [sp, #20]
 800071a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800071e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000720:	f1b8 0f02 	cmp.w	r8, #2
 8000724:	bf08      	it	eq
 8000726:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000728:	f013 0301 	ands.w	r3, r3, #1
 800072c:	d00c      	beq.n	8000748 <__gnu_unwind_pr_common+0x5c>
 800072e:	4638      	mov	r0, r7
 8000730:	a905      	add	r1, sp, #20
 8000732:	f000 fb71 	bl	8000e18 <__gnu_unwind_execute>
 8000736:	b918      	cbnz	r0, 8000740 <__gnu_unwind_pr_common+0x54>
 8000738:	2008      	movs	r0, #8
 800073a:	b009      	add	sp, #36	; 0x24
 800073c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000740:	2009      	movs	r0, #9
 8000742:	b009      	add	sp, #36	; 0x24
 8000744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000748:	f8d4 a000 	ldr.w	sl, [r4]
 800074c:	f1ba 0f00 	cmp.w	sl, #0
 8000750:	d0ed      	beq.n	800072e <__gnu_unwind_pr_common+0x42>
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	f000 0308 	and.w	r3, r0, #8
 8000758:	9302      	str	r3, [sp, #8]
 800075a:	2e02      	cmp	r6, #2
 800075c:	d04a      	beq.n	80007f4 <__gnu_unwind_pr_common+0x108>
 800075e:	f8b4 a000 	ldrh.w	sl, [r4]
 8000762:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000766:	3404      	adds	r4, #4
 8000768:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800076a:	210f      	movs	r1, #15
 800076c:	4638      	mov	r0, r7
 800076e:	f029 0b01 	bic.w	fp, r9, #1
 8000772:	4493      	add	fp, r2
 8000774:	f7ff ff48 	bl	8000608 <_Unwind_GetGR>
 8000778:	4583      	cmp	fp, r0
 800077a:	d839      	bhi.n	80007f0 <__gnu_unwind_pr_common+0x104>
 800077c:	f02a 0201 	bic.w	r2, sl, #1
 8000780:	445a      	add	r2, fp
 8000782:	4282      	cmp	r2, r0
 8000784:	bf94      	ite	ls
 8000786:	2000      	movls	r0, #0
 8000788:	2001      	movhi	r0, #1
 800078a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	f00a 0a01 	and.w	sl, sl, #1
 8000796:	ea43 030a 	orr.w	r3, r3, sl
 800079a:	2b01      	cmp	r3, #1
 800079c:	d049      	beq.n	8000832 <__gnu_unwind_pr_common+0x146>
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d032      	beq.n	8000808 <__gnu_unwind_pr_common+0x11c>
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1cc      	bne.n	8000740 <__gnu_unwind_pr_common+0x54>
 80007a6:	f1b8 0f00 	cmp.w	r8, #0
 80007aa:	d002      	beq.n	80007b2 <__gnu_unwind_pr_common+0xc6>
 80007ac:	2800      	cmp	r0, #0
 80007ae:	f040 80ce 	bne.w	800094e <__gnu_unwind_pr_common+0x262>
 80007b2:	3404      	adds	r4, #4
 80007b4:	f8d4 a000 	ldr.w	sl, [r4]
 80007b8:	f1ba 0f00 	cmp.w	sl, #0
 80007bc:	d1cd      	bne.n	800075a <__gnu_unwind_pr_common+0x6e>
 80007be:	4638      	mov	r0, r7
 80007c0:	a905      	add	r1, sp, #20
 80007c2:	f000 fb29 	bl	8000e18 <__gnu_unwind_execute>
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d1ba      	bne.n	8000740 <__gnu_unwind_pr_common+0x54>
 80007ca:	9b01      	ldr	r3, [sp, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0b3      	beq.n	8000738 <__gnu_unwind_pr_common+0x4c>
 80007d0:	210f      	movs	r1, #15
 80007d2:	4638      	mov	r0, r7
 80007d4:	f7ff ff18 	bl	8000608 <_Unwind_GetGR>
 80007d8:	210e      	movs	r1, #14
 80007da:	4602      	mov	r2, r0
 80007dc:	4638      	mov	r0, r7
 80007de:	f7ff ff39 	bl	8000654 <_Unwind_SetGR>
 80007e2:	4638      	mov	r0, r7
 80007e4:	210f      	movs	r1, #15
 80007e6:	4a6a      	ldr	r2, [pc, #424]	; (8000990 <__gnu_unwind_pr_common+0x2a4>)
 80007e8:	f7ff ff34 	bl	8000654 <_Unwind_SetGR>
 80007ec:	2007      	movs	r0, #7
 80007ee:	e7a8      	b.n	8000742 <__gnu_unwind_pr_common+0x56>
 80007f0:	2000      	movs	r0, #0
 80007f2:	e7ca      	b.n	800078a <__gnu_unwind_pr_common+0x9e>
 80007f4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80007f8:	3408      	adds	r4, #8
 80007fa:	e7b5      	b.n	8000768 <__gnu_unwind_pr_common+0x7c>
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	9305      	str	r3, [sp, #20]
 8000800:	2303      	movs	r3, #3
 8000802:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000806:	e78a      	b.n	800071e <__gnu_unwind_pr_common+0x32>
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800080e:	f1b8 0f00 	cmp.w	r8, #0
 8000812:	d145      	bne.n	80008a0 <__gnu_unwind_pr_common+0x1b4>
 8000814:	b128      	cbz	r0, 8000822 <__gnu_unwind_pr_common+0x136>
 8000816:	9a02      	ldr	r2, [sp, #8]
 8000818:	2a00      	cmp	r2, #0
 800081a:	d05c      	beq.n	80008d6 <__gnu_unwind_pr_common+0x1ea>
 800081c:	f1bb 0f00 	cmp.w	fp, #0
 8000820:	d074      	beq.n	800090c <__gnu_unwind_pr_common+0x220>
 8000822:	2b00      	cmp	r3, #0
 8000824:	da00      	bge.n	8000828 <__gnu_unwind_pr_common+0x13c>
 8000826:	3404      	adds	r4, #4
 8000828:	f10b 0b01 	add.w	fp, fp, #1
 800082c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000830:	e7c0      	b.n	80007b4 <__gnu_unwind_pr_common+0xc8>
 8000832:	f1b8 0f00 	cmp.w	r8, #0
 8000836:	d119      	bne.n	800086c <__gnu_unwind_pr_common+0x180>
 8000838:	b1b0      	cbz	r0, 8000868 <__gnu_unwind_pr_common+0x17c>
 800083a:	6863      	ldr	r3, [r4, #4]
 800083c:	6822      	ldr	r2, [r4, #0]
 800083e:	1c99      	adds	r1, r3, #2
 8000840:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000844:	f43f af7c 	beq.w	8000740 <__gnu_unwind_pr_common+0x54>
 8000848:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800084c:	3301      	adds	r3, #1
 800084e:	9104      	str	r1, [sp, #16]
 8000850:	f000 8091 	beq.w	8000976 <__gnu_unwind_pr_common+0x28a>
 8000854:	1d20      	adds	r0, r4, #4
 8000856:	f7ff fdb7 	bl	80003c8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800085a:	ab04      	add	r3, sp, #16
 800085c:	4601      	mov	r1, r0
 800085e:	4628      	mov	r0, r5
 8000860:	f3af 8000 	nop.w
 8000864:	2800      	cmp	r0, #0
 8000866:	d15c      	bne.n	8000922 <__gnu_unwind_pr_common+0x236>
 8000868:	3408      	adds	r4, #8
 800086a:	e7a3      	b.n	80007b4 <__gnu_unwind_pr_common+0xc8>
 800086c:	210d      	movs	r1, #13
 800086e:	4638      	mov	r0, r7
 8000870:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000874:	f7ff fec8 	bl	8000608 <_Unwind_GetGR>
 8000878:	4581      	cmp	r9, r0
 800087a:	d1f5      	bne.n	8000868 <__gnu_unwind_pr_common+0x17c>
 800087c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800087e:	429c      	cmp	r4, r3
 8000880:	d1f2      	bne.n	8000868 <__gnu_unwind_pr_common+0x17c>
 8000882:	4620      	mov	r0, r4
 8000884:	f7ff fcd4 	bl	8000230 <selfrel_offset31>
 8000888:	210f      	movs	r1, #15
 800088a:	4602      	mov	r2, r0
 800088c:	4638      	mov	r0, r7
 800088e:	f7ff fee1 	bl	8000654 <_Unwind_SetGR>
 8000892:	4638      	mov	r0, r7
 8000894:	462a      	mov	r2, r5
 8000896:	2100      	movs	r1, #0
 8000898:	f7ff fedc 	bl	8000654 <_Unwind_SetGR>
 800089c:	2007      	movs	r0, #7
 800089e:	e750      	b.n	8000742 <__gnu_unwind_pr_common+0x56>
 80008a0:	210d      	movs	r1, #13
 80008a2:	4638      	mov	r0, r7
 80008a4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80008a8:	f7ff feae 	bl	8000608 <_Unwind_GetGR>
 80008ac:	4581      	cmp	r9, r0
 80008ae:	d001      	beq.n	80008b4 <__gnu_unwind_pr_common+0x1c8>
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	e7b6      	b.n	8000822 <__gnu_unwind_pr_common+0x136>
 80008b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008b6:	429c      	cmp	r4, r3
 80008b8:	d1fa      	bne.n	80008b0 <__gnu_unwind_pr_common+0x1c4>
 80008ba:	2304      	movs	r3, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80008c2:	18e3      	adds	r3, r4, r3
 80008c4:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80008c8:	636b      	str	r3, [r5, #52]	; 0x34
 80008ca:	6823      	ldr	r3, [r4, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	db5a      	blt.n	8000986 <__gnu_unwind_pr_common+0x29a>
 80008d0:	2301      	movs	r3, #1
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	e7a8      	b.n	8000828 <__gnu_unwind_pr_common+0x13c>
 80008d6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80008da:	f8cd 800c 	str.w	r8, [sp, #12]
 80008de:	4691      	mov	r9, r2
 80008e0:	46b0      	mov	r8, r6
 80008e2:	f104 0a04 	add.w	sl, r4, #4
 80008e6:	461e      	mov	r6, r3
 80008e8:	e00e      	b.n	8000908 <__gnu_unwind_pr_common+0x21c>
 80008ea:	4650      	mov	r0, sl
 80008ec:	9604      	str	r6, [sp, #16]
 80008ee:	f7ff fd6b 	bl	80003c8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80008f2:	2200      	movs	r2, #0
 80008f4:	4601      	mov	r1, r0
 80008f6:	ab04      	add	r3, sp, #16
 80008f8:	4628      	mov	r0, r5
 80008fa:	f109 0901 	add.w	r9, r9, #1
 80008fe:	f10a 0a04 	add.w	sl, sl, #4
 8000902:	f3af 8000 	nop.w
 8000906:	b9e8      	cbnz	r0, 8000944 <__gnu_unwind_pr_common+0x258>
 8000908:	45d9      	cmp	r9, fp
 800090a:	d1ee      	bne.n	80008ea <__gnu_unwind_pr_common+0x1fe>
 800090c:	210d      	movs	r1, #13
 800090e:	4638      	mov	r0, r7
 8000910:	f7ff fe7a 	bl	8000608 <_Unwind_GetGR>
 8000914:	4603      	mov	r3, r0
 8000916:	9a04      	ldr	r2, [sp, #16]
 8000918:	2006      	movs	r0, #6
 800091a:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 800091e:	622b      	str	r3, [r5, #32]
 8000920:	e70f      	b.n	8000742 <__gnu_unwind_pr_common+0x56>
 8000922:	4681      	mov	r9, r0
 8000924:	210d      	movs	r1, #13
 8000926:	4638      	mov	r0, r7
 8000928:	f7ff fe6e 	bl	8000608 <_Unwind_GetGR>
 800092c:	f1b9 0f02 	cmp.w	r9, #2
 8000930:	6228      	str	r0, [r5, #32]
 8000932:	d125      	bne.n	8000980 <__gnu_unwind_pr_common+0x294>
 8000934:	462b      	mov	r3, r5
 8000936:	9a04      	ldr	r2, [sp, #16]
 8000938:	f843 2f2c 	str.w	r2, [r3, #44]!
 800093c:	626b      	str	r3, [r5, #36]	; 0x24
 800093e:	2006      	movs	r0, #6
 8000940:	62ac      	str	r4, [r5, #40]	; 0x28
 8000942:	e6fe      	b.n	8000742 <__gnu_unwind_pr_common+0x56>
 8000944:	4646      	mov	r6, r8
 8000946:	6823      	ldr	r3, [r4, #0]
 8000948:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800094c:	e769      	b.n	8000822 <__gnu_unwind_pr_common+0x136>
 800094e:	4620      	mov	r0, r4
 8000950:	f7ff fc6e 	bl	8000230 <selfrel_offset31>
 8000954:	4602      	mov	r2, r0
 8000956:	3404      	adds	r4, #4
 8000958:	63ac      	str	r4, [r5, #56]	; 0x38
 800095a:	4628      	mov	r0, r5
 800095c:	4614      	mov	r4, r2
 800095e:	f3af 8000 	nop.w
 8000962:	2800      	cmp	r0, #0
 8000964:	f43f aeec 	beq.w	8000740 <__gnu_unwind_pr_common+0x54>
 8000968:	4638      	mov	r0, r7
 800096a:	4622      	mov	r2, r4
 800096c:	210f      	movs	r1, #15
 800096e:	f7ff fe71 	bl	8000654 <_Unwind_SetGR>
 8000972:	2007      	movs	r0, #7
 8000974:	e6e5      	b.n	8000742 <__gnu_unwind_pr_common+0x56>
 8000976:	210d      	movs	r1, #13
 8000978:	4638      	mov	r0, r7
 800097a:	f7ff fe45 	bl	8000608 <_Unwind_GetGR>
 800097e:	6228      	str	r0, [r5, #32]
 8000980:	9b04      	ldr	r3, [sp, #16]
 8000982:	626b      	str	r3, [r5, #36]	; 0x24
 8000984:	e7db      	b.n	800093e <__gnu_unwind_pr_common+0x252>
 8000986:	f10b 0001 	add.w	r0, fp, #1
 800098a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800098e:	e779      	b.n	8000884 <__gnu_unwind_pr_common+0x198>
 8000990:	00000000 	.word	0x00000000

08000994 <__aeabi_unwind_cpp_pr0>:
 8000994:	2300      	movs	r3, #0
 8000996:	e6a9      	b.n	80006ec <__gnu_unwind_pr_common>

08000998 <__aeabi_unwind_cpp_pr1>:
 8000998:	2301      	movs	r3, #1
 800099a:	e6a7      	b.n	80006ec <__gnu_unwind_pr_common>

0800099c <__aeabi_unwind_cpp_pr2>:
 800099c:	2302      	movs	r3, #2
 800099e:	e6a5      	b.n	80006ec <__gnu_unwind_pr_common>

080009a0 <_Unwind_VRS_Pop>:
 80009a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009a4:	4606      	mov	r6, r0
 80009a6:	4615      	mov	r5, r2
 80009a8:	461c      	mov	r4, r3
 80009aa:	b0c3      	sub	sp, #268	; 0x10c
 80009ac:	2904      	cmp	r1, #4
 80009ae:	f200 80b8 	bhi.w	8000b22 <_Unwind_VRS_Pop+0x182>
 80009b2:	e8df f001 	tbb	[pc, r1]
 80009b6:	569c      	.short	0x569c
 80009b8:	2db6      	.short	0x2db6
 80009ba:	03          	.byte	0x03
 80009bb:	00          	.byte	0x00
 80009bc:	2c00      	cmp	r4, #0
 80009be:	f040 80b0 	bne.w	8000b22 <_Unwind_VRS_Pop+0x182>
 80009c2:	2a10      	cmp	r2, #16
 80009c4:	f200 80ad 	bhi.w	8000b22 <_Unwind_VRS_Pop+0x182>
 80009c8:	6803      	ldr	r3, [r0, #0]
 80009ca:	06d8      	lsls	r0, r3, #27
 80009cc:	f100 80f1 	bmi.w	8000bb2 <_Unwind_VRS_Pop+0x212>
 80009d0:	af20      	add	r7, sp, #128	; 0x80
 80009d2:	4638      	mov	r0, r7
 80009d4:	f000 f990 	bl	8000cf8 <__gnu_Unwind_Save_WMMXC>
 80009d8:	2401      	movs	r4, #1
 80009da:	4638      	mov	r0, r7
 80009dc:	2300      	movs	r3, #0
 80009de:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80009e0:	fa04 f203 	lsl.w	r2, r4, r3
 80009e4:	422a      	tst	r2, r5
 80009e6:	f103 0301 	add.w	r3, r3, #1
 80009ea:	d005      	beq.n	80009f8 <_Unwind_VRS_Pop+0x58>
 80009ec:	460a      	mov	r2, r1
 80009ee:	f852 cb04 	ldr.w	ip, [r2], #4
 80009f2:	4611      	mov	r1, r2
 80009f4:	f8c0 c000 	str.w	ip, [r0]
 80009f8:	2b04      	cmp	r3, #4
 80009fa:	f100 0004 	add.w	r0, r0, #4
 80009fe:	d1ef      	bne.n	80009e0 <_Unwind_VRS_Pop+0x40>
 8000a00:	4638      	mov	r0, r7
 8000a02:	63b1      	str	r1, [r6, #56]	; 0x38
 8000a04:	f000 f96e 	bl	8000ce4 <__gnu_Unwind_Restore_WMMXC>
 8000a08:	2000      	movs	r0, #0
 8000a0a:	b043      	add	sp, #268	; 0x10c
 8000a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a10:	2c03      	cmp	r4, #3
 8000a12:	f040 8086 	bne.w	8000b22 <_Unwind_VRS_Pop+0x182>
 8000a16:	b294      	uxth	r4, r2
 8000a18:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000a1c:	2b10      	cmp	r3, #16
 8000a1e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000a22:	d87e      	bhi.n	8000b22 <_Unwind_VRS_Pop+0x182>
 8000a24:	6803      	ldr	r3, [r0, #0]
 8000a26:	071f      	lsls	r7, r3, #28
 8000a28:	f100 80cb 	bmi.w	8000bc2 <_Unwind_VRS_Pop+0x222>
 8000a2c:	af20      	add	r7, sp, #128	; 0x80
 8000a2e:	4638      	mov	r0, r7
 8000a30:	f000 f936 	bl	8000ca0 <__gnu_Unwind_Save_WMMXD>
 8000a34:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000a36:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000a3a:	b154      	cbz	r4, 8000a52 <_Unwind_VRS_Pop+0xb2>
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000a42:	1ad0      	subs	r0, r2, r3
 8000a44:	00e4      	lsls	r4, r4, #3
 8000a46:	581d      	ldr	r5, [r3, r0]
 8000a48:	f843 5b04 	str.w	r5, [r3], #4
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d1fa      	bne.n	8000a46 <_Unwind_VRS_Pop+0xa6>
 8000a50:	4422      	add	r2, r4
 8000a52:	4638      	mov	r0, r7
 8000a54:	63b2      	str	r2, [r6, #56]	; 0x38
 8000a56:	f000 f901 	bl	8000c5c <__gnu_Unwind_Restore_WMMXD>
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	b043      	add	sp, #268	; 0x10c
 8000a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a62:	2c01      	cmp	r4, #1
 8000a64:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000a68:	b295      	uxth	r5, r2
 8000a6a:	d056      	beq.n	8000b1a <_Unwind_VRS_Pop+0x17a>
 8000a6c:	2c05      	cmp	r4, #5
 8000a6e:	d158      	bne.n	8000b22 <_Unwind_VRS_Pop+0x182>
 8000a70:	eb08 0905 	add.w	r9, r8, r5
 8000a74:	f1b9 0f20 	cmp.w	r9, #32
 8000a78:	d853      	bhi.n	8000b22 <_Unwind_VRS_Pop+0x182>
 8000a7a:	f1b8 0f0f 	cmp.w	r8, #15
 8000a7e:	d973      	bls.n	8000b68 <_Unwind_VRS_Pop+0x1c8>
 8000a80:	46a9      	mov	r9, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f040 8084 	bne.w	8000b90 <_Unwind_VRS_Pop+0x1f0>
 8000a88:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a8a:	b365      	cbz	r5, 8000ae6 <_Unwind_VRS_Pop+0x146>
 8000a8c:	af20      	add	r7, sp, #128	; 0x80
 8000a8e:	f04f 0900 	mov.w	r9, #0
 8000a92:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000a96:	3f04      	subs	r7, #4
 8000a98:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000a9c:	f853 1b04 	ldr.w	r1, [r3], #4
 8000aa0:	42ab      	cmp	r3, r5
 8000aa2:	f847 1f04 	str.w	r1, [r7, #4]!
 8000aa6:	d1f9      	bne.n	8000a9c <_Unwind_VRS_Pop+0xfc>
 8000aa8:	f1b9 0f00 	cmp.w	r9, #0
 8000aac:	d00f      	beq.n	8000ace <_Unwind_VRS_Pop+0x12e>
 8000aae:	466f      	mov	r7, sp
 8000ab0:	4641      	mov	r1, r8
 8000ab2:	2910      	cmp	r1, #16
 8000ab4:	bf38      	it	cc
 8000ab6:	2110      	movcc	r1, #16
 8000ab8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000abc:	3984      	subs	r1, #132	; 0x84
 8000abe:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000ac2:	f853 0b04 	ldr.w	r0, [r3], #4
 8000ac6:	42ab      	cmp	r3, r5
 8000ac8:	f841 0f04 	str.w	r0, [r1, #4]!
 8000acc:	d1f9      	bne.n	8000ac2 <_Unwind_VRS_Pop+0x122>
 8000ace:	2c01      	cmp	r4, #1
 8000ad0:	d07f      	beq.n	8000bd2 <_Unwind_VRS_Pop+0x232>
 8000ad2:	f1b8 0f0f 	cmp.w	r8, #15
 8000ad6:	63b5      	str	r5, [r6, #56]	; 0x38
 8000ad8:	d942      	bls.n	8000b60 <_Unwind_VRS_Pop+0x1c0>
 8000ada:	f1b9 0f00 	cmp.w	r9, #0
 8000ade:	d002      	beq.n	8000ae6 <_Unwind_VRS_Pop+0x146>
 8000ae0:	4668      	mov	r0, sp
 8000ae2:	f000 f8b3 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	b043      	add	sp, #268	; 0x10c
 8000aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000aee:	b9c4      	cbnz	r4, 8000b22 <_Unwind_VRS_Pop+0x182>
 8000af0:	4623      	mov	r3, r4
 8000af2:	2401      	movs	r4, #1
 8000af4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000af6:	1d37      	adds	r7, r6, #4
 8000af8:	b2a8      	uxth	r0, r5
 8000afa:	fa04 f103 	lsl.w	r1, r4, r3
 8000afe:	4201      	tst	r1, r0
 8000b00:	bf1c      	itt	ne
 8000b02:	f852 1b04 	ldrne.w	r1, [r2], #4
 8000b06:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	2b10      	cmp	r3, #16
 8000b0e:	d1f4      	bne.n	8000afa <_Unwind_VRS_Pop+0x15a>
 8000b10:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000b14:	d1e7      	bne.n	8000ae6 <_Unwind_VRS_Pop+0x146>
 8000b16:	63b2      	str	r2, [r6, #56]	; 0x38
 8000b18:	e004      	b.n	8000b24 <_Unwind_VRS_Pop+0x184>
 8000b1a:	eb08 0305 	add.w	r3, r8, r5
 8000b1e:	2b10      	cmp	r3, #16
 8000b20:	d903      	bls.n	8000b2a <_Unwind_VRS_Pop+0x18a>
 8000b22:	2002      	movs	r0, #2
 8000b24:	b043      	add	sp, #268	; 0x10c
 8000b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b2a:	f1b8 0f0f 	cmp.w	r8, #15
 8000b2e:	d8f8      	bhi.n	8000b22 <_Unwind_VRS_Pop+0x182>
 8000b30:	6833      	ldr	r3, [r6, #0]
 8000b32:	07da      	lsls	r2, r3, #31
 8000b34:	d506      	bpl.n	8000b44 <_Unwind_VRS_Pop+0x1a4>
 8000b36:	4630      	mov	r0, r6
 8000b38:	f023 0303 	bic.w	r3, r3, #3
 8000b3c:	f840 3b48 	str.w	r3, [r0], #72
 8000b40:	f000 f878 	bl	8000c34 <__gnu_Unwind_Save_VFP>
 8000b44:	af20      	add	r7, sp, #128	; 0x80
 8000b46:	4638      	mov	r0, r7
 8000b48:	f000 f874 	bl	8000c34 <__gnu_Unwind_Save_VFP>
 8000b4c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d19d      	bne.n	8000a8e <_Unwind_VRS_Pop+0xee>
 8000b52:	461d      	mov	r5, r3
 8000b54:	3504      	adds	r5, #4
 8000b56:	4638      	mov	r0, r7
 8000b58:	63b5      	str	r5, [r6, #56]	; 0x38
 8000b5a:	f000 f867 	bl	8000c2c <__gnu_Unwind_Restore_VFP>
 8000b5e:	e7c2      	b.n	8000ae6 <_Unwind_VRS_Pop+0x146>
 8000b60:	a820      	add	r0, sp, #128	; 0x80
 8000b62:	f000 f86b 	bl	8000c3c <__gnu_Unwind_Restore_VFP_D>
 8000b66:	e7b8      	b.n	8000ada <_Unwind_VRS_Pop+0x13a>
 8000b68:	f1b9 0f10 	cmp.w	r9, #16
 8000b6c:	d93f      	bls.n	8000bee <_Unwind_VRS_Pop+0x24e>
 8000b6e:	f1a9 0910 	sub.w	r9, r9, #16
 8000b72:	6833      	ldr	r3, [r6, #0]
 8000b74:	07d9      	lsls	r1, r3, #31
 8000b76:	d508      	bpl.n	8000b8a <_Unwind_VRS_Pop+0x1ea>
 8000b78:	4630      	mov	r0, r6
 8000b7a:	f023 0301 	bic.w	r3, r3, #1
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	f840 3b48 	str.w	r3, [r0], #72
 8000b86:	f000 f85d 	bl	8000c44 <__gnu_Unwind_Save_VFP_D>
 8000b8a:	f1b9 0f00 	cmp.w	r9, #0
 8000b8e:	d031      	beq.n	8000bf4 <_Unwind_VRS_Pop+0x254>
 8000b90:	6833      	ldr	r3, [r6, #0]
 8000b92:	075a      	lsls	r2, r3, #29
 8000b94:	d41f      	bmi.n	8000bd6 <_Unwind_VRS_Pop+0x236>
 8000b96:	f1b8 0f0f 	cmp.w	r8, #15
 8000b9a:	d924      	bls.n	8000be6 <_Unwind_VRS_Pop+0x246>
 8000b9c:	466f      	mov	r7, sp
 8000b9e:	f1c8 0510 	rsb	r5, r8, #16
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	f000 f856 	bl	8000c54 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000bac:	dd80      	ble.n	8000ab0 <_Unwind_VRS_Pop+0x110>
 8000bae:	af20      	add	r7, sp, #128	; 0x80
 8000bb0:	e76f      	b.n	8000a92 <_Unwind_VRS_Pop+0xf2>
 8000bb2:	f023 0310 	bic.w	r3, r3, #16
 8000bb6:	6033      	str	r3, [r6, #0]
 8000bb8:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000bbc:	f000 f89c 	bl	8000cf8 <__gnu_Unwind_Save_WMMXC>
 8000bc0:	e706      	b.n	80009d0 <_Unwind_VRS_Pop+0x30>
 8000bc2:	f023 0308 	bic.w	r3, r3, #8
 8000bc6:	6003      	str	r3, [r0, #0]
 8000bc8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000bcc:	f000 f868 	bl	8000ca0 <__gnu_Unwind_Save_WMMXD>
 8000bd0:	e72c      	b.n	8000a2c <_Unwind_VRS_Pop+0x8c>
 8000bd2:	af20      	add	r7, sp, #128	; 0x80
 8000bd4:	e7be      	b.n	8000b54 <_Unwind_VRS_Pop+0x1b4>
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	f023 0304 	bic.w	r3, r3, #4
 8000bdc:	f840 3bd0 	str.w	r3, [r0], #208
 8000be0:	f000 f838 	bl	8000c54 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000be4:	e7d7      	b.n	8000b96 <_Unwind_VRS_Pop+0x1f6>
 8000be6:	a820      	add	r0, sp, #128	; 0x80
 8000be8:	f000 f82c 	bl	8000c44 <__gnu_Unwind_Save_VFP_D>
 8000bec:	e7d6      	b.n	8000b9c <_Unwind_VRS_Pop+0x1fc>
 8000bee:	f04f 0900 	mov.w	r9, #0
 8000bf2:	e7be      	b.n	8000b72 <_Unwind_VRS_Pop+0x1d2>
 8000bf4:	f1b8 0f0f 	cmp.w	r8, #15
 8000bf8:	f63f af46 	bhi.w	8000a88 <_Unwind_VRS_Pop+0xe8>
 8000bfc:	af20      	add	r7, sp, #128	; 0x80
 8000bfe:	4638      	mov	r0, r7
 8000c00:	f000 f820 	bl	8000c44 <__gnu_Unwind_Save_VFP_D>
 8000c04:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f47f af41 	bne.w	8000a8e <_Unwind_VRS_Pop+0xee>
 8000c0c:	4638      	mov	r0, r7
 8000c0e:	f000 f815 	bl	8000c3c <__gnu_Unwind_Restore_VFP_D>
 8000c12:	e768      	b.n	8000ae6 <_Unwind_VRS_Pop+0x146>

08000c14 <__restore_core_regs>:
 8000c14:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000c18:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000c1c:	469c      	mov	ip, r3
 8000c1e:	46a6      	mov	lr, r4
 8000c20:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000c24:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000c28:	46e5      	mov	sp, ip
 8000c2a:	bd00      	pop	{pc}

08000c2c <__gnu_Unwind_Restore_VFP>:
 8000c2c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <__gnu_Unwind_Save_VFP>:
 8000c34:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__gnu_Unwind_Restore_VFP_D>:
 8000c3c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <__gnu_Unwind_Save_VFP_D>:
 8000c44:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000c4c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000c54:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__gnu_Unwind_Restore_WMMXD>:
 8000c5c:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c60:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c64:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c68:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c6c:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c70:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c74:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c78:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c7c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c80:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c84:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c88:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c8c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000c90:	ecf0 d102 	ldfp	f5, [r0], #8
 8000c94:	ecf0 e102 	ldfp	f6, [r0], #8
 8000c98:	ecf0 f102 	ldfp	f7, [r0], #8
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__gnu_Unwind_Save_WMMXD>:
 8000ca0:	ece0 0102 	stfe	f0, [r0], #8
 8000ca4:	ece0 1102 	stfe	f1, [r0], #8
 8000ca8:	ece0 2102 	stfe	f2, [r0], #8
 8000cac:	ece0 3102 	stfe	f3, [r0], #8
 8000cb0:	ece0 4102 	stfe	f4, [r0], #8
 8000cb4:	ece0 5102 	stfe	f5, [r0], #8
 8000cb8:	ece0 6102 	stfe	f6, [r0], #8
 8000cbc:	ece0 7102 	stfe	f7, [r0], #8
 8000cc0:	ece0 8102 	stfp	f0, [r0], #8
 8000cc4:	ece0 9102 	stfp	f1, [r0], #8
 8000cc8:	ece0 a102 	stfp	f2, [r0], #8
 8000ccc:	ece0 b102 	stfp	f3, [r0], #8
 8000cd0:	ece0 c102 	stfp	f4, [r0], #8
 8000cd4:	ece0 d102 	stfp	f5, [r0], #8
 8000cd8:	ece0 e102 	stfp	f6, [r0], #8
 8000cdc:	ece0 f102 	stfp	f7, [r0], #8
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <__gnu_Unwind_Restore_WMMXC>:
 8000ce4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000ce8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000cec:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000cf0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__gnu_Unwind_Save_WMMXC>:
 8000cf8:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000cfc:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000d00:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000d04:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <_Unwind_RaiseException>:
 8000d0c:	46ec      	mov	ip, sp
 8000d0e:	b500      	push	{lr}
 8000d10:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d14:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d20:	a901      	add	r1, sp, #4
 8000d22:	f7ff fbe7 	bl	80004f4 <__gnu_Unwind_RaiseException>
 8000d26:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d2a:	b012      	add	sp, #72	; 0x48
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <_Unwind_Resume>:
 8000d30:	46ec      	mov	ip, sp
 8000d32:	b500      	push	{lr}
 8000d34:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d38:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d44:	a901      	add	r1, sp, #4
 8000d46:	f7ff fc13 	bl	8000570 <__gnu_Unwind_Resume>
 8000d4a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d4e:	b012      	add	sp, #72	; 0x48
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <_Unwind_Resume_or_Rethrow>:
 8000d54:	46ec      	mov	ip, sp
 8000d56:	b500      	push	{lr}
 8000d58:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d5c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d68:	a901      	add	r1, sp, #4
 8000d6a:	f7ff fc23 	bl	80005b4 <__gnu_Unwind_Resume_or_Rethrow>
 8000d6e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d72:	b012      	add	sp, #72	; 0x48
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <_Unwind_ForcedUnwind>:
 8000d78:	46ec      	mov	ip, sp
 8000d7a:	b500      	push	{lr}
 8000d7c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d80:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d8c:	ab01      	add	r3, sp, #4
 8000d8e:	f7ff fbe5 	bl	800055c <__gnu_Unwind_ForcedUnwind>
 8000d92:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d96:	b012      	add	sp, #72	; 0x48
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <_Unwind_Backtrace>:
 8000d9c:	46ec      	mov	ip, sp
 8000d9e:	b500      	push	{lr}
 8000da0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000da4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000db0:	aa01      	add	r2, sp, #4
 8000db2:	f7ff fc5b 	bl	800066c <__gnu_Unwind_Backtrace>
 8000db6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000dba:	b012      	add	sp, #72	; 0x48
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <next_unwind_byte>:
 8000dc0:	7a02      	ldrb	r2, [r0, #8]
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b97a      	cbnz	r2, 8000de6 <next_unwind_byte+0x26>
 8000dc6:	7a42      	ldrb	r2, [r0, #9]
 8000dc8:	b1a2      	cbz	r2, 8000df4 <next_unwind_byte+0x34>
 8000dca:	f04f 0c03 	mov.w	ip, #3
 8000dce:	6841      	ldr	r1, [r0, #4]
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	7242      	strb	r2, [r0, #9]
 8000dd4:	6808      	ldr	r0, [r1, #0]
 8000dd6:	1d0a      	adds	r2, r1, #4
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	0202      	lsls	r2, r0, #8
 8000ddc:	f883 c008 	strb.w	ip, [r3, #8]
 8000de0:	0e00      	lsrs	r0, r0, #24
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	4770      	bx	lr
 8000de6:	6800      	ldr	r0, [r0, #0]
 8000de8:	3a01      	subs	r2, #1
 8000dea:	721a      	strb	r2, [r3, #8]
 8000dec:	0202      	lsls	r2, r0, #8
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	0e00      	lsrs	r0, r0, #24
 8000df2:	4770      	bx	lr
 8000df4:	20b0      	movs	r0, #176	; 0xb0
 8000df6:	4770      	bx	lr

08000df8 <_Unwind_GetGR.constprop.0>:
 8000df8:	2300      	movs	r3, #0
 8000dfa:	b500      	push	{lr}
 8000dfc:	b085      	sub	sp, #20
 8000dfe:	a903      	add	r1, sp, #12
 8000e00:	9100      	str	r1, [sp, #0]
 8000e02:	220c      	movs	r2, #12
 8000e04:	4619      	mov	r1, r3
 8000e06:	f7ff fbe7 	bl	80005d8 <_Unwind_VRS_Get>
 8000e0a:	9803      	ldr	r0, [sp, #12]
 8000e0c:	b005      	add	sp, #20
 8000e0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e12:	bf00      	nop

08000e14 <unwind_UCB_from_context>:
 8000e14:	e7f0      	b.n	8000df8 <_Unwind_GetGR.constprop.0>
 8000e16:	bf00      	nop

08000e18 <__gnu_unwind_execute>:
 8000e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e1c:	f04f 0800 	mov.w	r8, #0
 8000e20:	4605      	mov	r5, r0
 8000e22:	460e      	mov	r6, r1
 8000e24:	b085      	sub	sp, #20
 8000e26:	4630      	mov	r0, r6
 8000e28:	f7ff ffca 	bl	8000dc0 <next_unwind_byte>
 8000e2c:	28b0      	cmp	r0, #176	; 0xb0
 8000e2e:	4604      	mov	r4, r0
 8000e30:	f000 80ba 	beq.w	8000fa8 <__gnu_unwind_execute+0x190>
 8000e34:	0607      	lsls	r7, r0, #24
 8000e36:	d520      	bpl.n	8000e7a <__gnu_unwind_execute+0x62>
 8000e38:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000e3c:	2b80      	cmp	r3, #128	; 0x80
 8000e3e:	d04d      	beq.n	8000edc <__gnu_unwind_execute+0xc4>
 8000e40:	2b90      	cmp	r3, #144	; 0x90
 8000e42:	d036      	beq.n	8000eb2 <__gnu_unwind_execute+0x9a>
 8000e44:	2ba0      	cmp	r3, #160	; 0xa0
 8000e46:	d060      	beq.n	8000f0a <__gnu_unwind_execute+0xf2>
 8000e48:	2bb0      	cmp	r3, #176	; 0xb0
 8000e4a:	d073      	beq.n	8000f34 <__gnu_unwind_execute+0x11c>
 8000e4c:	2bc0      	cmp	r3, #192	; 0xc0
 8000e4e:	f000 808a 	beq.w	8000f66 <__gnu_unwind_execute+0x14e>
 8000e52:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e56:	2bd0      	cmp	r3, #208	; 0xd0
 8000e58:	d10b      	bne.n	8000e72 <__gnu_unwind_execute+0x5a>
 8000e5a:	f000 0207 	and.w	r2, r0, #7
 8000e5e:	3201      	adds	r2, #1
 8000e60:	2305      	movs	r3, #5
 8000e62:	2101      	movs	r1, #1
 8000e64:	4628      	mov	r0, r5
 8000e66:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e6a:	f7ff fd99 	bl	80009a0 <_Unwind_VRS_Pop>
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d0d9      	beq.n	8000e26 <__gnu_unwind_execute+0xe>
 8000e72:	2009      	movs	r0, #9
 8000e74:	b005      	add	sp, #20
 8000e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e7a:	0083      	lsls	r3, r0, #2
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	1d1f      	adds	r7, r3, #4
 8000e80:	2300      	movs	r3, #0
 8000e82:	f10d 090c 	add.w	r9, sp, #12
 8000e86:	4619      	mov	r1, r3
 8000e88:	220d      	movs	r2, #13
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	f8cd 9000 	str.w	r9, [sp]
 8000e90:	f7ff fba2 	bl	80005d8 <_Unwind_VRS_Get>
 8000e94:	9b03      	ldr	r3, [sp, #12]
 8000e96:	0660      	lsls	r0, r4, #25
 8000e98:	bf4c      	ite	mi
 8000e9a:	1bdf      	submi	r7, r3, r7
 8000e9c:	18ff      	addpl	r7, r7, r3
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	220d      	movs	r2, #13
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f8cd 9000 	str.w	r9, [sp]
 8000eaa:	9703      	str	r7, [sp, #12]
 8000eac:	f7ff fbba 	bl	8000624 <_Unwind_VRS_Set>
 8000eb0:	e7b9      	b.n	8000e26 <__gnu_unwind_execute+0xe>
 8000eb2:	f000 030d 	and.w	r3, r0, #13
 8000eb6:	2b0d      	cmp	r3, #13
 8000eb8:	d0db      	beq.n	8000e72 <__gnu_unwind_execute+0x5a>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	af03      	add	r7, sp, #12
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f000 020f 	and.w	r2, r0, #15
 8000ec4:	9700      	str	r7, [sp, #0]
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	f7ff fb86 	bl	80005d8 <_Unwind_VRS_Get>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	220d      	movs	r2, #13
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	9700      	str	r7, [sp, #0]
 8000ed6:	f7ff fba5 	bl	8000624 <_Unwind_VRS_Set>
 8000eda:	e7a4      	b.n	8000e26 <__gnu_unwind_execute+0xe>
 8000edc:	4630      	mov	r0, r6
 8000ede:	f7ff ff6f 	bl	8000dc0 <next_unwind_byte>
 8000ee2:	0224      	lsls	r4, r4, #8
 8000ee4:	4320      	orrs	r0, r4
 8000ee6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000eea:	d0c2      	beq.n	8000e72 <__gnu_unwind_execute+0x5a>
 8000eec:	2300      	movs	r3, #0
 8000eee:	0104      	lsls	r4, r0, #4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	b2a2      	uxth	r2, r4
 8000ef6:	f7ff fd53 	bl	80009a0 <_Unwind_VRS_Pop>
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d1b9      	bne.n	8000e72 <__gnu_unwind_execute+0x5a>
 8000efe:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000f02:	bf18      	it	ne
 8000f04:	f04f 0801 	movne.w	r8, #1
 8000f08:	e78d      	b.n	8000e26 <__gnu_unwind_execute+0xe>
 8000f0a:	43c3      	mvns	r3, r0
 8000f0c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	411a      	asrs	r2, r3
 8000f16:	2300      	movs	r3, #0
 8000f18:	0701      	lsls	r1, r0, #28
 8000f1a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000f1e:	bf48      	it	mi
 8000f20:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000f24:	4628      	mov	r0, r5
 8000f26:	4619      	mov	r1, r3
 8000f28:	f7ff fd3a 	bl	80009a0 <_Unwind_VRS_Pop>
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	f43f af7a 	beq.w	8000e26 <__gnu_unwind_execute+0xe>
 8000f32:	e79e      	b.n	8000e72 <__gnu_unwind_execute+0x5a>
 8000f34:	28b1      	cmp	r0, #177	; 0xb1
 8000f36:	d03c      	beq.n	8000fb2 <__gnu_unwind_execute+0x19a>
 8000f38:	28b2      	cmp	r0, #178	; 0xb2
 8000f3a:	f000 80b0 	beq.w	800109e <__gnu_unwind_execute+0x286>
 8000f3e:	28b3      	cmp	r0, #179	; 0xb3
 8000f40:	d04a      	beq.n	8000fd8 <__gnu_unwind_execute+0x1c0>
 8000f42:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000f46:	2bb4      	cmp	r3, #180	; 0xb4
 8000f48:	d093      	beq.n	8000e72 <__gnu_unwind_execute+0x5a>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	f000 0207 	and.w	r2, r0, #7
 8000f50:	441a      	add	r2, r3
 8000f52:	4628      	mov	r0, r5
 8000f54:	4619      	mov	r1, r3
 8000f56:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f5a:	f7ff fd21 	bl	80009a0 <_Unwind_VRS_Pop>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	f43f af61 	beq.w	8000e26 <__gnu_unwind_execute+0xe>
 8000f64:	e785      	b.n	8000e72 <__gnu_unwind_execute+0x5a>
 8000f66:	28c6      	cmp	r0, #198	; 0xc6
 8000f68:	d04f      	beq.n	800100a <__gnu_unwind_execute+0x1f2>
 8000f6a:	28c7      	cmp	r0, #199	; 0xc7
 8000f6c:	d061      	beq.n	8001032 <__gnu_unwind_execute+0x21a>
 8000f6e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f72:	2bc0      	cmp	r3, #192	; 0xc0
 8000f74:	d070      	beq.n	8001058 <__gnu_unwind_execute+0x240>
 8000f76:	28c8      	cmp	r0, #200	; 0xc8
 8000f78:	d07c      	beq.n	8001074 <__gnu_unwind_execute+0x25c>
 8000f7a:	28c9      	cmp	r0, #201	; 0xc9
 8000f7c:	f47f af79 	bne.w	8000e72 <__gnu_unwind_execute+0x5a>
 8000f80:	4630      	mov	r0, r6
 8000f82:	f7ff ff1d 	bl	8000dc0 <next_unwind_byte>
 8000f86:	2305      	movs	r3, #5
 8000f88:	4602      	mov	r2, r0
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	0314      	lsls	r4, r2, #12
 8000f90:	f002 020f 	and.w	r2, r2, #15
 8000f94:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000f98:	440a      	add	r2, r1
 8000f9a:	4322      	orrs	r2, r4
 8000f9c:	f7ff fd00 	bl	80009a0 <_Unwind_VRS_Pop>
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	f43f af40 	beq.w	8000e26 <__gnu_unwind_execute+0xe>
 8000fa6:	e764      	b.n	8000e72 <__gnu_unwind_execute+0x5a>
 8000fa8:	f1b8 0f00 	cmp.w	r8, #0
 8000fac:	d01c      	beq.n	8000fe8 <__gnu_unwind_execute+0x1d0>
 8000fae:	2000      	movs	r0, #0
 8000fb0:	e760      	b.n	8000e74 <__gnu_unwind_execute+0x5c>
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	f7ff ff04 	bl	8000dc0 <next_unwind_byte>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	f43f af59 	beq.w	8000e72 <__gnu_unwind_execute+0x5a>
 8000fc0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fc4:	f47f af55 	bne.w	8000e72 <__gnu_unwind_execute+0x5a>
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4628      	mov	r0, r5
 8000fcc:	f7ff fce8 	bl	80009a0 <_Unwind_VRS_Pop>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	f43f af28 	beq.w	8000e26 <__gnu_unwind_execute+0xe>
 8000fd6:	e74c      	b.n	8000e72 <__gnu_unwind_execute+0x5a>
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f7ff fef1 	bl	8000dc0 <next_unwind_byte>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4628      	mov	r0, r5
 8000fe6:	e7d2      	b.n	8000f8e <__gnu_unwind_execute+0x176>
 8000fe8:	ac03      	add	r4, sp, #12
 8000fea:	4643      	mov	r3, r8
 8000fec:	220e      	movs	r2, #14
 8000fee:	4641      	mov	r1, r8
 8000ff0:	4628      	mov	r0, r5
 8000ff2:	9400      	str	r4, [sp, #0]
 8000ff4:	f7ff faf0 	bl	80005d8 <_Unwind_VRS_Get>
 8000ff8:	4643      	mov	r3, r8
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	4641      	mov	r1, r8
 8001000:	9400      	str	r4, [sp, #0]
 8001002:	f7ff fb0f 	bl	8000624 <_Unwind_VRS_Set>
 8001006:	4640      	mov	r0, r8
 8001008:	e734      	b.n	8000e74 <__gnu_unwind_execute+0x5c>
 800100a:	4630      	mov	r0, r6
 800100c:	f7ff fed8 	bl	8000dc0 <next_unwind_byte>
 8001010:	4602      	mov	r2, r0
 8001012:	2303      	movs	r3, #3
 8001014:	0314      	lsls	r4, r2, #12
 8001016:	f002 020f 	and.w	r2, r2, #15
 800101a:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 800101e:	3201      	adds	r2, #1
 8001020:	4628      	mov	r0, r5
 8001022:	4619      	mov	r1, r3
 8001024:	4322      	orrs	r2, r4
 8001026:	f7ff fcbb 	bl	80009a0 <_Unwind_VRS_Pop>
 800102a:	2800      	cmp	r0, #0
 800102c:	f43f aefb 	beq.w	8000e26 <__gnu_unwind_execute+0xe>
 8001030:	e71f      	b.n	8000e72 <__gnu_unwind_execute+0x5a>
 8001032:	4630      	mov	r0, r6
 8001034:	f7ff fec4 	bl	8000dc0 <next_unwind_byte>
 8001038:	4602      	mov	r2, r0
 800103a:	2800      	cmp	r0, #0
 800103c:	f43f af19 	beq.w	8000e72 <__gnu_unwind_execute+0x5a>
 8001040:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001044:	f47f af15 	bne.w	8000e72 <__gnu_unwind_execute+0x5a>
 8001048:	2104      	movs	r1, #4
 800104a:	4628      	mov	r0, r5
 800104c:	f7ff fca8 	bl	80009a0 <_Unwind_VRS_Pop>
 8001050:	2800      	cmp	r0, #0
 8001052:	f43f aee8 	beq.w	8000e26 <__gnu_unwind_execute+0xe>
 8001056:	e70c      	b.n	8000e72 <__gnu_unwind_execute+0x5a>
 8001058:	2303      	movs	r3, #3
 800105a:	f000 020f 	and.w	r2, r0, #15
 800105e:	3201      	adds	r2, #1
 8001060:	4628      	mov	r0, r5
 8001062:	4619      	mov	r1, r3
 8001064:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001068:	f7ff fc9a 	bl	80009a0 <_Unwind_VRS_Pop>
 800106c:	2800      	cmp	r0, #0
 800106e:	f43f aeda 	beq.w	8000e26 <__gnu_unwind_execute+0xe>
 8001072:	e6fe      	b.n	8000e72 <__gnu_unwind_execute+0x5a>
 8001074:	4630      	mov	r0, r6
 8001076:	f7ff fea3 	bl	8000dc0 <next_unwind_byte>
 800107a:	4602      	mov	r2, r0
 800107c:	2101      	movs	r1, #1
 800107e:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8001082:	f002 020f 	and.w	r2, r2, #15
 8001086:	3410      	adds	r4, #16
 8001088:	440a      	add	r2, r1
 800108a:	2305      	movs	r3, #5
 800108c:	4628      	mov	r0, r5
 800108e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8001092:	f7ff fc85 	bl	80009a0 <_Unwind_VRS_Pop>
 8001096:	2800      	cmp	r0, #0
 8001098:	f43f aec5 	beq.w	8000e26 <__gnu_unwind_execute+0xe>
 800109c:	e6e9      	b.n	8000e72 <__gnu_unwind_execute+0x5a>
 800109e:	2300      	movs	r3, #0
 80010a0:	f10d 090c 	add.w	r9, sp, #12
 80010a4:	220d      	movs	r2, #13
 80010a6:	4619      	mov	r1, r3
 80010a8:	4628      	mov	r0, r5
 80010aa:	f8cd 9000 	str.w	r9, [sp]
 80010ae:	f7ff fa93 	bl	80005d8 <_Unwind_VRS_Get>
 80010b2:	4630      	mov	r0, r6
 80010b4:	f7ff fe84 	bl	8000dc0 <next_unwind_byte>
 80010b8:	0602      	lsls	r2, r0, #24
 80010ba:	f04f 0402 	mov.w	r4, #2
 80010be:	d50c      	bpl.n	80010da <__gnu_unwind_execute+0x2c2>
 80010c0:	9b03      	ldr	r3, [sp, #12]
 80010c2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80010c6:	40a0      	lsls	r0, r4
 80010c8:	4418      	add	r0, r3
 80010ca:	9003      	str	r0, [sp, #12]
 80010cc:	4630      	mov	r0, r6
 80010ce:	f7ff fe77 	bl	8000dc0 <next_unwind_byte>
 80010d2:	0603      	lsls	r3, r0, #24
 80010d4:	f104 0407 	add.w	r4, r4, #7
 80010d8:	d4f2      	bmi.n	80010c0 <__gnu_unwind_execute+0x2a8>
 80010da:	9b03      	ldr	r3, [sp, #12]
 80010dc:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80010e0:	40a2      	lsls	r2, r4
 80010e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010e6:	441a      	add	r2, r3
 80010e8:	2300      	movs	r3, #0
 80010ea:	9203      	str	r2, [sp, #12]
 80010ec:	4628      	mov	r0, r5
 80010ee:	220d      	movs	r2, #13
 80010f0:	4619      	mov	r1, r3
 80010f2:	f8cd 9000 	str.w	r9, [sp]
 80010f6:	f7ff fa95 	bl	8000624 <_Unwind_VRS_Set>
 80010fa:	e694      	b.n	8000e26 <__gnu_unwind_execute+0xe>

080010fc <__gnu_unwind_frame>:
 80010fc:	460b      	mov	r3, r1
 80010fe:	f04f 0c03 	mov.w	ip, #3
 8001102:	b500      	push	{lr}
 8001104:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001106:	4618      	mov	r0, r3
 8001108:	6853      	ldr	r3, [r2, #4]
 800110a:	b085      	sub	sp, #20
 800110c:	3208      	adds	r2, #8
 800110e:	9202      	str	r2, [sp, #8]
 8001110:	a901      	add	r1, sp, #4
 8001112:	0e1a      	lsrs	r2, r3, #24
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	f88d c00c 	strb.w	ip, [sp, #12]
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	f88d 200d 	strb.w	r2, [sp, #13]
 8001120:	f7ff fe7a 	bl	8000e18 <__gnu_unwind_execute>
 8001124:	b005      	add	sp, #20
 8001126:	f85d fb04 	ldr.w	pc, [sp], #4
 800112a:	bf00      	nop

0800112c <_Unwind_GetRegionStart>:
 800112c:	b508      	push	{r3, lr}
 800112e:	f7ff fe71 	bl	8000e14 <unwind_UCB_from_context>
 8001132:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001134:	bd08      	pop	{r3, pc}
 8001136:	bf00      	nop

08001138 <_Unwind_GetLanguageSpecificData>:
 8001138:	b508      	push	{r3, lr}
 800113a:	f7ff fe6b 	bl	8000e14 <unwind_UCB_from_context>
 800113e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001140:	79c3      	ldrb	r3, [r0, #7]
 8001142:	3302      	adds	r3, #2
 8001144:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001148:	bd08      	pop	{r3, pc}
 800114a:	bf00      	nop

0800114c <_ZN3LED6setPinEt>:
public:
	LED();
	LED( GPIO_TypeDef*, uint16_t pin );
	virtual ~LED();

	void setPin( uint16_t pin ) { mPin = pin; }
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	811a      	strh	r2, [r3, #8]
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <_ZN3LED7setPortEP12GPIO_TypeDef>:
	void setPort( GPIO_TypeDef* port ) { mPort = port; }
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>:
	void setPortAndPin( GPIO_TypeDef* port, uint16_t pin ) { setPin( pin ); setPort( port ); }
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	4613      	mov	r3, r2
 800118e:	80fb      	strh	r3, [r7, #6]
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	4619      	mov	r1, r3
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f7ff ffd9 	bl	800114c <_ZN3LED6setPinEt>
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff ffe3 	bl	8001168 <_ZN3LED7setPortEP12GPIO_TypeDef>
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <_ZN9AmplifierC1Ev>:

#include "Amplifier.h"
#include "main.h"
#include "cmsis_os.h"

Amplifier::Amplifier() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	4a11      	ldr	r2, [pc, #68]	; (80011fc <_ZN9AmplifierC1Ev+0x50>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3304      	adds	r3, #4
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f92e 	bl	8001420 <_ZN2UIC1Ev>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3308      	adds	r3, #8
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f879 	bl	80012c0 <_ZN7DisplayC1Ev>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	330c      	adds	r3, #12
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f8ca 	bl	800136c <_ZN3LEDC1Ev>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	331c      	adds	r3, #28
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 f8c5 	bl	800136c <_ZN3LEDC1Ev>
	// TODO Auto-generated constructor stub
	mDolbyLED.setPortAndPin( LED_MUTE_GPIO_Port, LED_MUTE_Pin );
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	330c      	adds	r3, #12
 80011e6:	2208      	movs	r2, #8
 80011e8:	4905      	ldr	r1, [pc, #20]	; (8001200 <_ZN9AmplifierC1Ev+0x54>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ffc9 	bl	8001182 <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
}
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	080061e4 	.word	0x080061e4
 8001200:	40011000 	.word	0x40011000

08001204 <_ZN9AmplifierD1Ev>:

Amplifier::~Amplifier() {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <_ZN9AmplifierD1Ev+0x40>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	331c      	adds	r3, #28
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f8c0 	bl	800139c <_ZN3LEDD1Ev>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	330c      	adds	r3, #12
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f8bb 	bl	800139c <_ZN3LEDD1Ev>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3308      	adds	r3, #8
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f858 	bl	80012e0 <_ZN7DisplayD1Ev>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3304      	adds	r3, #4
 8001234:	4618      	mov	r0, r3
 8001236:	f000 f903 	bl	8001440 <_ZN2UID1Ev>
	// TODO Auto-generated destructor stub
}
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	080061e4 	.word	0x080061e4

08001248 <_ZN9AmplifierD0Ev>:
Amplifier::~Amplifier() {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
}
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ffd7 	bl	8001204 <_ZN9AmplifierD1Ev>
 8001256:	212c      	movs	r1, #44	; 0x2c
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f004 fe9c 	bl	8005f96 <_ZdlPvj>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <_ZN9Amplifier3runEv>:

void Amplifier::run() {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	for(;;) {
		osDelay(1);
 8001270:	2001      	movs	r0, #1
 8001272:	f002 fac3 	bl	80037fc <osDelay>
		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_SET );
 8001276:	2201      	movs	r2, #1
 8001278:	2108      	movs	r1, #8
 800127a:	480f      	ldr	r0, [pc, #60]	; (80012b8 <_ZN9Amplifier3runEv+0x50>)
 800127c:	f001 f94e 	bl	800251c <HAL_GPIO_WritePin>

		  osDelay( 200 );
 8001280:	20c8      	movs	r0, #200	; 0xc8
 8001282:	f002 fabb 	bl	80037fc <osDelay>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2108      	movs	r1, #8
 800128a:	480b      	ldr	r0, [pc, #44]	; (80012b8 <_ZN9Amplifier3runEv+0x50>)
 800128c:	f001 f946 	bl	800251c <HAL_GPIO_WritePin>

		  osDelay( 200 );
 8001290:	20c8      	movs	r0, #200	; 0xc8
 8001292:	f002 fab3 	bl	80037fc <osDelay>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_DOLBY_GPIO_Port, LED_DOLBY_Pin, GPIO_PIN_SET );
 8001296:	2201      	movs	r2, #1
 8001298:	2102      	movs	r1, #2
 800129a:	4808      	ldr	r0, [pc, #32]	; (80012bc <_ZN9Amplifier3runEv+0x54>)
 800129c:	f001 f93e 	bl	800251c <HAL_GPIO_WritePin>

		  osDelay( 200 );
 80012a0:	20c8      	movs	r0, #200	; 0xc8
 80012a2:	f002 faab 	bl	80037fc <osDelay>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_DOLBY_GPIO_Port, LED_DOLBY_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2102      	movs	r1, #2
 80012aa:	4804      	ldr	r0, [pc, #16]	; (80012bc <_ZN9Amplifier3runEv+0x54>)
 80012ac:	f001 f936 	bl	800251c <HAL_GPIO_WritePin>

		  osDelay( 200 );
 80012b0:	20c8      	movs	r0, #200	; 0xc8
 80012b2:	f002 faa3 	bl	80037fc <osDelay>
		osDelay(1);
 80012b6:	e7db      	b.n	8001270 <_ZN9Amplifier3runEv+0x8>
 80012b8:	40011000 	.word	0x40011000
 80012bc:	40010800 	.word	0x40010800

080012c0 <_ZN7DisplayC1Ev>:

#include "Display.h"
#include "main.h"
#include "cmsis_os.h"

Display::Display() {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <_ZN7DisplayC1Ev+0x1c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	080061f8 	.word	0x080061f8

080012e0 <_ZN7DisplayD1Ev>:

Display::~Display() {
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <_ZN7DisplayD1Ev+0x1c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	080061f8 	.word	0x080061f8

08001300 <_ZN7DisplayD0Ev>:
Display::~Display() {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
}
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ffe9 	bl	80012e0 <_ZN7DisplayD1Ev>
 800130e:	2104      	movs	r1, #4
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f004 fe40 	bl	8005f96 <_ZdlPvj>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_ZN7Display3runEv>:

void
Display::run() {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	for(;;) {
		osDelay(1);
 8001328:	2001      	movs	r0, #1
 800132a:	f002 fa67 	bl	80037fc <osDelay>
 800132e:	e7fb      	b.n	8001328 <_ZN7Display3runEv+0x8>

08001330 <_ZN3LED6enableEv>:

	virtual void enable() { setState( true ); }
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3310      	adds	r3, #16
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	4798      	blx	r3
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_ZN3LED7disableEv>:
	virtual void disable() { setState( false ); }
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3310      	adds	r3, #16
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2100      	movs	r1, #0
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	4798      	blx	r3
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_ZN3LEDC1Ev>:
 */

#include "LED.h"
#include "main.h"

LED::LED() : mPort( 0 ), mPin( 0 ), mCurrentState( 0 ) {
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <_ZN3LEDC1Ev+0x2c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	811a      	strh	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub

}
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	0800620c 	.word	0x0800620c

0800139c <_ZN3LEDD1Ev>:

LED::LED( GPIO_TypeDef* port, uint16_t pin ) : mPort( port ), mPin( pin ), mCurrentState( 0 ) {

}

LED::~LED() {
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <_ZN3LEDD1Ev+0x1c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	0800620c 	.word	0x0800620c

080013bc <_ZN3LEDD0Ev>:
LED::~LED() {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
}
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ffe9 	bl	800139c <_ZN3LEDD1Ev>
 80013ca:	2110      	movs	r1, #16
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f004 fde2 	bl	8005f96 <_ZdlPvj>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_ZN3LED8setStateEb>:

void
LED::setState( bool enable ) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d008      	beq.n	8001400 <_ZN3LED8setStateEb+0x24>
		HAL_GPIO_WritePin( mPort, mPin, GPIO_PIN_SET );
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6858      	ldr	r0, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	891b      	ldrh	r3, [r3, #8]
 80013f6:	2201      	movs	r2, #1
 80013f8:	4619      	mov	r1, r3
 80013fa:	f001 f88f 	bl	800251c <HAL_GPIO_WritePin>
 80013fe:	e007      	b.n	8001410 <_ZN3LED8setStateEb+0x34>
	} else {
		HAL_GPIO_WritePin( mPort, mPin, GPIO_PIN_RESET );
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6858      	ldr	r0, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	891b      	ldrh	r3, [r3, #8]
 8001408:	2200      	movs	r2, #0
 800140a:	4619      	mov	r1, r3
 800140c:	f001 f886 	bl	800251c <HAL_GPIO_WritePin>
	}

	mCurrentState = enable;
 8001410:	78fa      	ldrb	r2, [r7, #3]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60da      	str	r2, [r3, #12]
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <_ZN2UIC1Ev>:

#include "UI.h"
#include "main.h"
#include "cmsis_os.h"

UI::UI() {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <_ZN2UIC1Ev+0x1c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	08006228 	.word	0x08006228

08001440 <_ZN2UID1Ev>:

UI::~UI() {
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <_ZN2UID1Ev+0x1c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	08006228 	.word	0x08006228

08001460 <_ZN2UID0Ev>:
UI::~UI() {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
}
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ffe9 	bl	8001440 <_ZN2UID1Ev>
 800146e:	2104      	movs	r1, #4
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f004 fd90 	bl	8005f96 <_ZdlPvj>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_ZN2UI3runEv>:

void UI::run() {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	for(;;) {
		osDelay(1);
 8001488:	2001      	movs	r0, #1
 800148a:	f002 f9b7 	bl	80037fc <osDelay>
 800148e:	e7fb      	b.n	8001488 <_ZN2UI3runEv+0x8>

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001494:	f000 fd68 	bl	8001f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001498:	f000 f822 	bl	80014e0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149c:	f000 fa06 	bl	80018ac <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80014a0:	f000 f8a2 	bl	80015e8 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 80014a4:	f000 f8dc 	bl	8001660 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 80014a8:	f000 f916 	bl	80016d8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80014ac:	f000 f972 	bl	8001794 <_ZL12MX_TIM4_Initv>
  MX_USART3_UART_Init();
 80014b0:	f000 f9ce 	bl	8001850 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 80014b4:	f000 f864 	bl	8001580 <_ZL12MX_I2C1_Initv>
  // The main amplifier class

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014b8:	f002 f890 	bl	80035dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014bc:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <main+0x44>)
 80014be:	2100      	movs	r1, #0
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <main+0x48>)
 80014c2:	f002 f8f1 	bl	80036a8 <osThreadNew>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <main+0x4c>)
 80014ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014cc:	f002 f8b8 	bl	8003640 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <main+0x40>
 80014d2:	bf00      	nop
 80014d4:	08006234 	.word	0x08006234
 80014d8:	08001a45 	.word	0x08001a45
 80014dc:	2000026c 	.word	0x2000026c

080014e0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b090      	sub	sp, #64	; 0x40
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0318 	add.w	r3, r7, #24
 80014ea:	2228      	movs	r2, #40	; 0x28
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f004 fda4 	bl	800603c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001502:	2301      	movs	r3, #1
 8001504:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001510:	2301      	movs	r3, #1
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001514:	2302      	movs	r3, #2
 8001516:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800151e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001522:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	4618      	mov	r0, r3
 800152a:	f001 f953 	bl	80027d4 <HAL_RCC_OscConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	bf14      	ite	ne
 8001534:	2301      	movne	r3, #1
 8001536:	2300      	moveq	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800153e:	f000 fa89 	bl	8001a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001542:	230f      	movs	r3, #15
 8001544:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001546:	2302      	movs	r3, #2
 8001548:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800154e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001552:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2101      	movs	r1, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fbbb 	bl	8002cd8 <HAL_RCC_ClockConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf14      	ite	ne
 8001568:	2301      	movne	r3, #1
 800156a:	2300      	moveq	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001572:	f000 fa6f 	bl	8001a54 <Error_Handler>
  }
}
 8001576:	bf00      	nop
 8001578:	3740      	adds	r7, #64	; 0x40
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <_ZL12MX_I2C1_Initv+0x5c>)
 8001586:	4a16      	ldr	r2, [pc, #88]	; (80015e0 <_ZL12MX_I2C1_Initv+0x60>)
 8001588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <_ZL12MX_I2C1_Initv+0x5c>)
 800158c:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <_ZL12MX_I2C1_Initv+0x64>)
 800158e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <_ZL12MX_I2C1_Initv+0x5c>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <_ZL12MX_I2C1_Initv+0x5c>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <_ZL12MX_I2C1_Initv+0x5c>)
 800159e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <_ZL12MX_I2C1_Initv+0x5c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <_ZL12MX_I2C1_Initv+0x5c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <_ZL12MX_I2C1_Initv+0x5c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <_ZL12MX_I2C1_Initv+0x5c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015bc:	4807      	ldr	r0, [pc, #28]	; (80015dc <_ZL12MX_I2C1_Initv+0x5c>)
 80015be:	f000 ffc5 	bl	800254c <HAL_I2C_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bf14      	ite	ne
 80015c8:	2301      	movne	r3, #1
 80015ca:	2300      	moveq	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80015d2:	f000 fa3f 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000094 	.word	0x20000094
 80015e0:	40005400 	.word	0x40005400
 80015e4:	000186a0 	.word	0x000186a0

080015e8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <_ZL12MX_SPI1_Initv+0x70>)
 80015ee:	4a1b      	ldr	r2, [pc, #108]	; (800165c <_ZL12MX_SPI1_Initv+0x74>)
 80015f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <_ZL12MX_SPI1_Initv+0x70>)
 80015f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <_ZL12MX_SPI1_Initv+0x70>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_ZL12MX_SPI1_Initv+0x70>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <_ZL12MX_SPI1_Initv+0x70>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <_ZL12MX_SPI1_Initv+0x70>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <_ZL12MX_SPI1_Initv+0x70>)
 8001614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001618:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <_ZL12MX_SPI1_Initv+0x70>)
 800161c:	2208      	movs	r2, #8
 800161e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <_ZL12MX_SPI1_Initv+0x70>)
 8001622:	2200      	movs	r2, #0
 8001624:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <_ZL12MX_SPI1_Initv+0x70>)
 8001628:	2200      	movs	r2, #0
 800162a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <_ZL12MX_SPI1_Initv+0x70>)
 800162e:	2200      	movs	r2, #0
 8001630:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <_ZL12MX_SPI1_Initv+0x70>)
 8001634:	220a      	movs	r2, #10
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001638:	4807      	ldr	r0, [pc, #28]	; (8001658 <_ZL12MX_SPI1_Initv+0x70>)
 800163a:	f001 fce7 	bl	800300c <HAL_SPI_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf14      	ite	ne
 8001644:	2301      	movne	r3, #1
 8001646:	2300      	moveq	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800164e:	f000 fa01 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200000e8 	.word	0x200000e8
 800165c:	40013000 	.word	0x40013000

08001660 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <_ZL12MX_SPI2_Initv+0x70>)
 8001666:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <_ZL12MX_SPI2_Initv+0x74>)
 8001668:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <_ZL12MX_SPI2_Initv+0x70>)
 800166c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001670:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <_ZL12MX_SPI2_Initv+0x70>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_ZL12MX_SPI2_Initv+0x70>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <_ZL12MX_SPI2_Initv+0x70>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <_ZL12MX_SPI2_Initv+0x70>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_ZL12MX_SPI2_Initv+0x70>)
 800168c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001690:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <_ZL12MX_SPI2_Initv+0x70>)
 8001694:	2200      	movs	r2, #0
 8001696:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <_ZL12MX_SPI2_Initv+0x70>)
 800169a:	2200      	movs	r2, #0
 800169c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <_ZL12MX_SPI2_Initv+0x70>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <_ZL12MX_SPI2_Initv+0x70>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <_ZL12MX_SPI2_Initv+0x70>)
 80016ac:	220a      	movs	r2, #10
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016b0:	4807      	ldr	r0, [pc, #28]	; (80016d0 <_ZL12MX_SPI2_Initv+0x70>)
 80016b2:	f001 fcab 	bl	800300c <HAL_SPI_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf14      	ite	ne
 80016bc:	2301      	movne	r3, #1
 80016be:	2300      	moveq	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 80016c6:	f000 f9c5 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000140 	.word	0x20000140
 80016d4:	40003800 	.word	0x40003800

080016d8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	; 0x30
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	2224      	movs	r2, #36	; 0x24
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f004 fca8 	bl	800603c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016f4:	4b25      	ldr	r3, [pc, #148]	; (800178c <_ZL12MX_TIM3_Initv+0xb4>)
 80016f6:	4a26      	ldr	r2, [pc, #152]	; (8001790 <_ZL12MX_TIM3_Initv+0xb8>)
 80016f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <_ZL12MX_TIM3_Initv+0xb4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <_ZL12MX_TIM3_Initv+0xb4>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <_ZL12MX_TIM3_Initv+0xb4>)
 8001708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800170c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <_ZL12MX_TIM3_Initv+0xb4>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <_ZL12MX_TIM3_Initv+0xb4>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800171a:	2301      	movs	r3, #1
 800171c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001722:	2301      	movs	r3, #1
 8001724:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001732:	2301      	movs	r3, #1
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	4619      	mov	r1, r3
 8001744:	4811      	ldr	r0, [pc, #68]	; (800178c <_ZL12MX_TIM3_Initv+0xb4>)
 8001746:	f001 fce5 	bl	8003114 <HAL_TIM_Encoder_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf14      	ite	ne
 8001750:	2301      	movne	r3, #1
 8001752:	2300      	moveq	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800175a:	f000 f97b 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	4619      	mov	r1, r3
 800176a:	4808      	ldr	r0, [pc, #32]	; (800178c <_ZL12MX_TIM3_Initv+0xb4>)
 800176c:	f001 fdee 	bl	800334c <HAL_TIMEx_MasterConfigSynchronization>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf14      	ite	ne
 8001776:	2301      	movne	r3, #1
 8001778:	2300      	moveq	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001780:	f000 f968 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	3730      	adds	r7, #48	; 0x30
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000198 	.word	0x20000198
 8001790:	40000400 	.word	0x40000400

08001794 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	; 0x30
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	2224      	movs	r2, #36	; 0x24
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 fc4a 	bl	800603c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <_ZL12MX_TIM4_Initv+0xb4>)
 80017b2:	4a26      	ldr	r2, [pc, #152]	; (800184c <_ZL12MX_TIM4_Initv+0xb8>)
 80017b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <_ZL12MX_TIM4_Initv+0xb4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <_ZL12MX_TIM4_Initv+0xb4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <_ZL12MX_TIM4_Initv+0xb4>)
 80017c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <_ZL12MX_TIM4_Initv+0xb4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <_ZL12MX_TIM4_Initv+0xb4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017d6:	2301      	movs	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017de:	2301      	movs	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017ee:	2301      	movs	r3, #1
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	4619      	mov	r1, r3
 8001800:	4811      	ldr	r0, [pc, #68]	; (8001848 <_ZL12MX_TIM4_Initv+0xb4>)
 8001802:	f001 fc87 	bl	8003114 <HAL_TIM_Encoder_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf14      	ite	ne
 800180c:	2301      	movne	r3, #1
 800180e:	2300      	moveq	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8001816:	f000 f91d 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	4619      	mov	r1, r3
 8001826:	4808      	ldr	r0, [pc, #32]	; (8001848 <_ZL12MX_TIM4_Initv+0xb4>)
 8001828:	f001 fd90 	bl	800334c <HAL_TIMEx_MasterConfigSynchronization>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf14      	ite	ne
 8001832:	2301      	movne	r3, #1
 8001834:	2300      	moveq	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 800183c:	f000 f90a 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	3730      	adds	r7, #48	; 0x30
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200001e0 	.word	0x200001e0
 800184c:	40000800 	.word	0x40000800

08001850 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001856:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001858:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 800185c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001860:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001886:	4807      	ldr	r0, [pc, #28]	; (80018a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001888:	f001 fdcc 	bl	8003424 <HAL_UART_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	bf14      	ite	ne
 8001892:	2301      	movne	r3, #1
 8001894:	2300      	moveq	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 800189c:	f000 f8da 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000228 	.word	0x20000228
 80018a8:	40004800 	.word	0x40004800

080018ac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	f107 0318 	add.w	r3, r7, #24
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	4b5a      	ldr	r3, [pc, #360]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a59      	ldr	r2, [pc, #356]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 80018c6:	f043 0310 	orr.w	r3, r3, #16
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b57      	ldr	r3, [pc, #348]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	4b54      	ldr	r3, [pc, #336]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a53      	ldr	r2, [pc, #332]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b51      	ldr	r3, [pc, #324]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018f0:	4b4e      	ldr	r3, [pc, #312]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a4d      	ldr	r2, [pc, #308]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 80018f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b4b      	ldr	r3, [pc, #300]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001908:	4b48      	ldr	r3, [pc, #288]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a47      	ldr	r2, [pc, #284]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 800190e:	f043 0308 	orr.w	r3, r3, #8
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b45      	ldr	r3, [pc, #276]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001920:	4b42      	ldr	r3, [pc, #264]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a41      	ldr	r2, [pc, #260]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 8001926:	f043 0320 	orr.w	r3, r3, #32
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <_ZL12MX_GPIO_Initv+0x180>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2108      	movs	r1, #8
 800193c:	483c      	ldr	r0, [pc, #240]	; (8001a30 <_ZL12MX_GPIO_Initv+0x184>)
 800193e:	f000 fded 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 8001942:	2200      	movs	r2, #0
 8001944:	211f      	movs	r1, #31
 8001946:	483b      	ldr	r0, [pc, #236]	; (8001a34 <_ZL12MX_GPIO_Initv+0x188>)
 8001948:	f000 fde8 	bl	800251c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 8001952:	4839      	ldr	r0, [pc, #228]	; (8001a38 <_ZL12MX_GPIO_Initv+0x18c>)
 8001954:	f000 fde2 	bl	800251c <HAL_GPIO_WritePin>
                          |LED_POWER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_5CH_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800195e:	4837      	ldr	r0, [pc, #220]	; (8001a3c <_ZL12MX_GPIO_Initv+0x190>)
 8001960:	f000 fddc 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_MUTE_Pin */
  GPIO_InitStruct.Pin = LED_MUTE_Pin;
 8001964:	2308      	movs	r3, #8
 8001966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2302      	movs	r3, #2
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_MUTE_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0318 	add.w	r3, r7, #24
 8001978:	4619      	mov	r1, r3
 800197a:	482d      	ldr	r0, [pc, #180]	; (8001a30 <_ZL12MX_GPIO_Initv+0x184>)
 800197c:	f000 fc3a 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PCM_Pin LED_DOLBY_Pin PA2 LED_MUTEA3_Pin
                           PA4 */
  GPIO_InitStruct.Pin = LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 8001980:	231f      	movs	r3, #31
 8001982:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	2301      	movs	r3, #1
 8001986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2302      	movs	r3, #2
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0318 	add.w	r3, r7, #24
 8001994:	4619      	mov	r1, r3
 8001996:	4827      	ldr	r0, [pc, #156]	; (8001a34 <_ZL12MX_GPIO_Initv+0x188>)
 8001998:	f000 fc2c 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SETTING_BATTERY_Pin */
  GPIO_InitStruct.Pin = SETTING_BATTERY_Pin;
 800199c:	2310      	movs	r3, #16
 800199e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SETTING_BATTERY_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 0318 	add.w	r3, r7, #24
 80019ac:	4619      	mov	r1, r3
 80019ae:	4820      	ldr	r0, [pc, #128]	; (8001a30 <_ZL12MX_GPIO_Initv+0x184>)
 80019b0:	f000 fc20 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_1_Pin LED_INPUT_2_Pin LED_INPUT_3_Pin LED_INPUT_4_Pin
                           LED_POWER_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 80019b4:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 80019b8:	61bb      	str	r3, [r7, #24]
                          |LED_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2302      	movs	r3, #2
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c6:	f107 0318 	add.w	r3, r7, #24
 80019ca:	4619      	mov	r1, r3
 80019cc:	481a      	ldr	r0, [pc, #104]	; (8001a38 <_ZL12MX_GPIO_Initv+0x18c>)
 80019ce:	f000 fc11 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_POWER_Pin */
  GPIO_InitStruct.Pin = BUTTON_POWER_Pin;
 80019d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_POWER_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0318 	add.w	r3, r7, #24
 80019e4:	4619      	mov	r1, r3
 80019e6:	4814      	ldr	r0, [pc, #80]	; (8001a38 <_ZL12MX_GPIO_Initv+0x18c>)
 80019e8:	f000 fc04 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_5CH_Pin LED_RUN_Pin */
  GPIO_InitStruct.Pin = LED_5CH_Pin|LED_RUN_Pin;
 80019ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2302      	movs	r3, #2
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f107 0318 	add.w	r3, r7, #24
 8001a02:	4619      	mov	r1, r3
 8001a04:	480d      	ldr	r0, [pc, #52]	; (8001a3c <_ZL12MX_GPIO_Initv+0x190>)
 8001a06:	f000 fbf5 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 0318 	add.w	r3, r7, #24
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4808      	ldr	r0, [pc, #32]	; (8001a40 <_ZL12MX_GPIO_Initv+0x194>)
 8001a1e:	f000 fbe9 	bl	80021f4 <HAL_GPIO_Init>

}
 8001a22:	bf00      	nop
 8001a24:	3728      	adds	r7, #40	; 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40011000 	.word	0x40011000
 8001a34:	40010800 	.word	0x40010800
 8001a38:	40011800 	.word	0x40011800
 8001a3c:	40010c00 	.word	0x40010c00
 8001a40:	40011400 	.word	0x40011400

08001a44 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f001 fed5 	bl	80037fc <osDelay>
 8001a52:	e7fb      	b.n	8001a4c <_Z16StartDefaultTaskPv+0x8>

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <Error_Handler+0x8>
	...

08001a60 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d10c      	bne.n	8001a8a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d107      	bne.n	8001a8a <_Z41__static_initialization_and_destruction_0ii+0x2a>
Amplifier amplifier;
 8001a7a:	4806      	ldr	r0, [pc, #24]	; (8001a94 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001a7c:	f7ff fb96 	bl	80011ac <_ZN9AmplifierC1Ev>
 8001a80:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001a82:	4906      	ldr	r1, [pc, #24]	; (8001a9c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001a84:	4803      	ldr	r0, [pc, #12]	; (8001a94 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001a86:	f004 fa81 	bl	8005f8c <__aeabi_atexit>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000270 	.word	0x20000270
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	08001205 	.word	0x08001205

08001aa0 <_GLOBAL__sub_I_hi2c1>:
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f7ff ffd9 	bl	8001a60 <_Z41__static_initialization_and_destruction_0ii>
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_MspInit+0x68>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_MspInit+0x68>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6193      	str	r3, [r2, #24]
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_MspInit+0x68>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_MspInit+0x68>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <HAL_MspInit+0x68>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	61d3      	str	r3, [r2, #28]
 8001ada:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <HAL_MspInit+0x68>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	210f      	movs	r1, #15
 8001aea:	f06f 0001 	mvn.w	r0, #1
 8001aee:	f000 fb58 	bl	80021a2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_MspInit+0x6c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_MspInit+0x6c>)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40010000 	.word	0x40010000

08001b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <HAL_I2C_MspInit+0x70>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d123      	bne.n	8001b88 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_I2C_MspInit+0x74>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <HAL_I2C_MspInit+0x74>)
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_I2C_MspInit+0x74>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b58:	23c0      	movs	r3, #192	; 0xc0
 8001b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b5c:	2312      	movs	r3, #18
 8001b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480b      	ldr	r0, [pc, #44]	; (8001b98 <HAL_I2C_MspInit+0x78>)
 8001b6c:	f000 fb42 	bl	80021f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_I2C_MspInit+0x74>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_I2C_MspInit+0x74>)
 8001b76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b7a:	61d3      	str	r3, [r2, #28]
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_I2C_MspInit+0x74>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b88:	bf00      	nop
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40005400 	.word	0x40005400
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010c00 	.word	0x40010c00

08001b9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0318 	add.w	r3, r7, #24
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a37      	ldr	r2, [pc, #220]	; (8001c94 <HAL_SPI_MspInit+0xf8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d130      	bne.n	8001c1e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bbc:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_SPI_MspInit+0xfc>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a35      	ldr	r2, [pc, #212]	; (8001c98 <HAL_SPI_MspInit+0xfc>)
 8001bc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <HAL_SPI_MspInit+0xfc>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_SPI_MspInit+0xfc>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a2f      	ldr	r2, [pc, #188]	; (8001c98 <HAL_SPI_MspInit+0xfc>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <HAL_SPI_MspInit+0xfc>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001bec:	23a0      	movs	r3, #160	; 0xa0
 8001bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4827      	ldr	r0, [pc, #156]	; (8001c9c <HAL_SPI_MspInit+0x100>)
 8001c00:	f000 faf8 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c04:	2340      	movs	r3, #64	; 0x40
 8001c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 0318 	add.w	r3, r7, #24
 8001c14:	4619      	mov	r1, r3
 8001c16:	4821      	ldr	r0, [pc, #132]	; (8001c9c <HAL_SPI_MspInit+0x100>)
 8001c18:	f000 faec 	bl	80021f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c1c:	e036      	b.n	8001c8c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_SPI_MspInit+0x104>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d131      	bne.n	8001c8c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_SPI_MspInit+0xfc>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	4a1a      	ldr	r2, [pc, #104]	; (8001c98 <HAL_SPI_MspInit+0xfc>)
 8001c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c32:	61d3      	str	r3, [r2, #28]
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_SPI_MspInit+0xfc>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_SPI_MspInit+0xfc>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <HAL_SPI_MspInit+0xfc>)
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_SPI_MspInit+0xfc>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001c58:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c66:	f107 0318 	add.w	r3, r7, #24
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <HAL_SPI_MspInit+0x108>)
 8001c6e:	f000 fac1 	bl	80021f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4619      	mov	r1, r3
 8001c86:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <HAL_SPI_MspInit+0x108>)
 8001c88:	f000 fab4 	bl	80021f4 <HAL_GPIO_Init>
}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	; 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40013000 	.word	0x40013000
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010800 	.word	0x40010800
 8001ca0:	40003800 	.word	0x40003800
 8001ca4:	40010c00 	.word	0x40010c00

08001ca8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0318 	add.w	r3, r7, #24
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a3b      	ldr	r2, [pc, #236]	; (8001db0 <HAL_TIM_Encoder_MspInit+0x108>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d136      	bne.n	8001d36 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cc8:	4b3a      	ldr	r3, [pc, #232]	; (8001db4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	4a39      	ldr	r2, [pc, #228]	; (8001db4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	61d3      	str	r3, [r2, #28]
 8001cd4:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce0:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a33      	ldr	r2, [pc, #204]	; (8001db4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001ce6:	f043 0310 	orr.w	r3, r3, #16
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cf8:	23c0      	movs	r3, #192	; 0xc0
 8001cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d04:	f107 0318 	add.w	r3, r7, #24
 8001d08:	4619      	mov	r1, r3
 8001d0a:	482b      	ldr	r0, [pc, #172]	; (8001db8 <HAL_TIM_Encoder_MspInit+0x110>)
 8001d0c:	f000 fa72 	bl	80021f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001d10:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_TIM_Encoder_MspInit+0x114>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d28:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d2e:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <HAL_TIM_Encoder_MspInit+0x114>)
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d34:	e037      	b.n	8001da6 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <HAL_TIM_Encoder_MspInit+0x118>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d132      	bne.n	8001da6 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d40:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001d46:	f043 0304 	orr.w	r3, r3, #4
 8001d4a:	61d3      	str	r3, [r2, #28]
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d58:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a15      	ldr	r2, [pc, #84]	; (8001db4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001d5e:	f043 0320 	orr.w	r3, r3, #32
 8001d62:	6193      	str	r3, [r2, #24]
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d70:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d7e:	f107 0318 	add.w	r3, r7, #24
 8001d82:	4619      	mov	r1, r3
 8001d84:	480f      	ldr	r0, [pc, #60]	; (8001dc4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001d86:	f000 fa35 	bl	80021f4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_TIM_Encoder_MspInit+0x114>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d92:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da0:	4a06      	ldr	r2, [pc, #24]	; (8001dbc <HAL_TIM_Encoder_MspInit+0x114>)
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	6053      	str	r3, [r2, #4]
}
 8001da6:	bf00      	nop
 8001da8:	3730      	adds	r7, #48	; 0x30
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40000400 	.word	0x40000400
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40011000 	.word	0x40011000
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40000800 	.word	0x40000800
 8001dc4:	40011400 	.word	0x40011400

08001dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a25      	ldr	r2, [pc, #148]	; (8001e78 <HAL_UART_MspInit+0xb0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d143      	bne.n	8001e70 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001de8:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <HAL_UART_MspInit+0xb4>)
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	4a23      	ldr	r2, [pc, #140]	; (8001e7c <HAL_UART_MspInit+0xb4>)
 8001dee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df2:	61d3      	str	r3, [r2, #28]
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <HAL_UART_MspInit+0xb4>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <HAL_UART_MspInit+0xb4>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <HAL_UART_MspInit+0xb4>)
 8001e06:	f043 0320 	orr.w	r3, r3, #32
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_UART_MspInit+0xb4>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4814      	ldr	r0, [pc, #80]	; (8001e80 <HAL_UART_MspInit+0xb8>)
 8001e2e:	f000 f9e1 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	480e      	ldr	r0, [pc, #56]	; (8001e80 <HAL_UART_MspInit+0xb8>)
 8001e48:	f000 f9d4 	bl	80021f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_ENABLE();
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_UART_MspInit+0xbc>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6a:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <HAL_UART_MspInit+0xbc>)
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e70:	bf00      	nop
 8001e72:	3728      	adds	r7, #40	; 0x28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40004800 	.word	0x40004800
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40011400 	.word	0x40011400
 8001e84:	40010000 	.word	0x40010000

08001e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <NMI_Handler+0x4>

08001e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <HardFault_Handler+0x4>

08001e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <MemManage_Handler+0x4>

08001e9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <BusFault_Handler+0x4>

08001ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <UsageFault_Handler+0x4>

08001ea6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb6:	f000 f89d 	bl	8001ff4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001eba:	f003 f8ab 	bl	8005014 <xTaskGetSchedulerState>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d001      	beq.n	8001ec8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001ec4:	f003 fe08 	bl	8005ad8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
	return 1;
 8001ed0:	2301      	movs	r3, #1
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <_kill>:

int _kill(int pid, int sig)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ee4:	f004 f86a 	bl	8005fbc <__errno>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2216      	movs	r2, #22
 8001eec:	601a      	str	r2, [r3, #0]
	return -1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_exit>:

void _exit (int status)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffe7 	bl	8001eda <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f0c:	e7fe      	b.n	8001f0c <_exit+0x12>

08001f0e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
	...

08001f1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f1c:	480c      	ldr	r0, [pc, #48]	; (8001f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f1e:	490d      	ldr	r1, [pc, #52]	; (8001f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f20:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f24:	e002      	b.n	8001f2c <LoopCopyDataInit>

08001f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2a:	3304      	adds	r3, #4

08001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f30:	d3f9      	bcc.n	8001f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f34:	4c0a      	ldr	r4, [pc, #40]	; (8001f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f38:	e001      	b.n	8001f3e <LoopFillZerobss>

08001f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f3c:	3204      	adds	r2, #4

08001f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f40:	d3fb      	bcc.n	8001f3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f42:	f7ff ffe4 	bl	8001f0e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f46:	f004 f83f 	bl	8005fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f4a:	f7ff faa1 	bl	8001490 <main>
  bx lr
 8001f4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f54:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001f58:	080063d0 	.word	0x080063d0
  ldr r2, =_sbss
 8001f5c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001f60:	20001bf4 	.word	0x20001bf4

08001f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC1_2_IRQHandler>
	...

08001f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_Init+0x28>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <HAL_Init+0x28>)
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f000 f907 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7e:	200f      	movs	r0, #15
 8001f80:	f000 f808 	bl	8001f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f84:	f7ff fd94 	bl	8001ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40022000 	.word	0x40022000

08001f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_InitTick+0x54>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_InitTick+0x58>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f911 	bl	80021da <HAL_SYSTICK_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00e      	b.n	8001fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0f      	cmp	r3, #15
 8001fc6:	d80a      	bhi.n	8001fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fd0:	f000 f8e7 	bl	80021a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <HAL_InitTick+0x5c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000004 	.word	0x20000004
 8001fec:	2000000c 	.word	0x2000000c
 8001ff0:	20000008 	.word	0x20000008

08001ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_IncTick+0x1c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_IncTick+0x20>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a03      	ldr	r2, [pc, #12]	; (8002014 <HAL_IncTick+0x20>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	2000000c 	.word	0x2000000c
 8002014:	2000029c 	.word	0x2000029c

08002018 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTick;
 800201c:	4b02      	ldr	r3, [pc, #8]	; (8002028 <HAL_GetTick+0x10>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	2000029c 	.word	0x2000029c

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800216c:	f7ff ff90 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff49 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b4:	f7ff ff5e 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7ff ff90 	bl	80020e4 <NVIC_EncodePriority>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff5f 	bl	8002090 <__NVIC_SetPriority>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ffb0 	bl	8002148 <SysTick_Config>
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b08b      	sub	sp, #44	; 0x2c
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002206:	e179      	b.n	80024fc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002208:	2201      	movs	r2, #1
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	429a      	cmp	r2, r3
 8002222:	f040 8168 	bne.w	80024f6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4a96      	ldr	r2, [pc, #600]	; (8002484 <HAL_GPIO_Init+0x290>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d05e      	beq.n	80022ee <HAL_GPIO_Init+0xfa>
 8002230:	4a94      	ldr	r2, [pc, #592]	; (8002484 <HAL_GPIO_Init+0x290>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d875      	bhi.n	8002322 <HAL_GPIO_Init+0x12e>
 8002236:	4a94      	ldr	r2, [pc, #592]	; (8002488 <HAL_GPIO_Init+0x294>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d058      	beq.n	80022ee <HAL_GPIO_Init+0xfa>
 800223c:	4a92      	ldr	r2, [pc, #584]	; (8002488 <HAL_GPIO_Init+0x294>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d86f      	bhi.n	8002322 <HAL_GPIO_Init+0x12e>
 8002242:	4a92      	ldr	r2, [pc, #584]	; (800248c <HAL_GPIO_Init+0x298>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d052      	beq.n	80022ee <HAL_GPIO_Init+0xfa>
 8002248:	4a90      	ldr	r2, [pc, #576]	; (800248c <HAL_GPIO_Init+0x298>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d869      	bhi.n	8002322 <HAL_GPIO_Init+0x12e>
 800224e:	4a90      	ldr	r2, [pc, #576]	; (8002490 <HAL_GPIO_Init+0x29c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d04c      	beq.n	80022ee <HAL_GPIO_Init+0xfa>
 8002254:	4a8e      	ldr	r2, [pc, #568]	; (8002490 <HAL_GPIO_Init+0x29c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d863      	bhi.n	8002322 <HAL_GPIO_Init+0x12e>
 800225a:	4a8e      	ldr	r2, [pc, #568]	; (8002494 <HAL_GPIO_Init+0x2a0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d046      	beq.n	80022ee <HAL_GPIO_Init+0xfa>
 8002260:	4a8c      	ldr	r2, [pc, #560]	; (8002494 <HAL_GPIO_Init+0x2a0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d85d      	bhi.n	8002322 <HAL_GPIO_Init+0x12e>
 8002266:	2b12      	cmp	r3, #18
 8002268:	d82a      	bhi.n	80022c0 <HAL_GPIO_Init+0xcc>
 800226a:	2b12      	cmp	r3, #18
 800226c:	d859      	bhi.n	8002322 <HAL_GPIO_Init+0x12e>
 800226e:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <HAL_GPIO_Init+0x80>)
 8002270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002274:	080022ef 	.word	0x080022ef
 8002278:	080022c9 	.word	0x080022c9
 800227c:	080022db 	.word	0x080022db
 8002280:	0800231d 	.word	0x0800231d
 8002284:	08002323 	.word	0x08002323
 8002288:	08002323 	.word	0x08002323
 800228c:	08002323 	.word	0x08002323
 8002290:	08002323 	.word	0x08002323
 8002294:	08002323 	.word	0x08002323
 8002298:	08002323 	.word	0x08002323
 800229c:	08002323 	.word	0x08002323
 80022a0:	08002323 	.word	0x08002323
 80022a4:	08002323 	.word	0x08002323
 80022a8:	08002323 	.word	0x08002323
 80022ac:	08002323 	.word	0x08002323
 80022b0:	08002323 	.word	0x08002323
 80022b4:	08002323 	.word	0x08002323
 80022b8:	080022d1 	.word	0x080022d1
 80022bc:	080022e5 	.word	0x080022e5
 80022c0:	4a75      	ldr	r2, [pc, #468]	; (8002498 <HAL_GPIO_Init+0x2a4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022c6:	e02c      	b.n	8002322 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	623b      	str	r3, [r7, #32]
          break;
 80022ce:	e029      	b.n	8002324 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	3304      	adds	r3, #4
 80022d6:	623b      	str	r3, [r7, #32]
          break;
 80022d8:	e024      	b.n	8002324 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	3308      	adds	r3, #8
 80022e0:	623b      	str	r3, [r7, #32]
          break;
 80022e2:	e01f      	b.n	8002324 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	330c      	adds	r3, #12
 80022ea:	623b      	str	r3, [r7, #32]
          break;
 80022ec:	e01a      	b.n	8002324 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022f6:	2304      	movs	r3, #4
 80022f8:	623b      	str	r3, [r7, #32]
          break;
 80022fa:	e013      	b.n	8002324 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d105      	bne.n	8002310 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002304:	2308      	movs	r3, #8
 8002306:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	611a      	str	r2, [r3, #16]
          break;
 800230e:	e009      	b.n	8002324 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002310:	2308      	movs	r3, #8
 8002312:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	615a      	str	r2, [r3, #20]
          break;
 800231a:	e003      	b.n	8002324 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
          break;
 8002320:	e000      	b.n	8002324 <HAL_GPIO_Init+0x130>
          break;
 8002322:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	2bff      	cmp	r3, #255	; 0xff
 8002328:	d801      	bhi.n	800232e <HAL_GPIO_Init+0x13a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	e001      	b.n	8002332 <HAL_GPIO_Init+0x13e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3304      	adds	r3, #4
 8002332:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2bff      	cmp	r3, #255	; 0xff
 8002338:	d802      	bhi.n	8002340 <HAL_GPIO_Init+0x14c>
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	e002      	b.n	8002346 <HAL_GPIO_Init+0x152>
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	3b08      	subs	r3, #8
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	210f      	movs	r1, #15
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	401a      	ands	r2, r3
 8002358:	6a39      	ldr	r1, [r7, #32]
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	431a      	orrs	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80c1 	beq.w	80024f6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002374:	4b49      	ldr	r3, [pc, #292]	; (800249c <HAL_GPIO_Init+0x2a8>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a48      	ldr	r2, [pc, #288]	; (800249c <HAL_GPIO_Init+0x2a8>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b46      	ldr	r3, [pc, #280]	; (800249c <HAL_GPIO_Init+0x2a8>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800238c:	4a44      	ldr	r2, [pc, #272]	; (80024a0 <HAL_GPIO_Init+0x2ac>)
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	3302      	adds	r3, #2
 8002394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002398:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	220f      	movs	r2, #15
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4013      	ands	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a3c      	ldr	r2, [pc, #240]	; (80024a4 <HAL_GPIO_Init+0x2b0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d01f      	beq.n	80023f8 <HAL_GPIO_Init+0x204>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a3b      	ldr	r2, [pc, #236]	; (80024a8 <HAL_GPIO_Init+0x2b4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d019      	beq.n	80023f4 <HAL_GPIO_Init+0x200>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a3a      	ldr	r2, [pc, #232]	; (80024ac <HAL_GPIO_Init+0x2b8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d013      	beq.n	80023f0 <HAL_GPIO_Init+0x1fc>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a39      	ldr	r2, [pc, #228]	; (80024b0 <HAL_GPIO_Init+0x2bc>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00d      	beq.n	80023ec <HAL_GPIO_Init+0x1f8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a38      	ldr	r2, [pc, #224]	; (80024b4 <HAL_GPIO_Init+0x2c0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d007      	beq.n	80023e8 <HAL_GPIO_Init+0x1f4>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a37      	ldr	r2, [pc, #220]	; (80024b8 <HAL_GPIO_Init+0x2c4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_GPIO_Init+0x1f0>
 80023e0:	2305      	movs	r3, #5
 80023e2:	e00a      	b.n	80023fa <HAL_GPIO_Init+0x206>
 80023e4:	2306      	movs	r3, #6
 80023e6:	e008      	b.n	80023fa <HAL_GPIO_Init+0x206>
 80023e8:	2304      	movs	r3, #4
 80023ea:	e006      	b.n	80023fa <HAL_GPIO_Init+0x206>
 80023ec:	2303      	movs	r3, #3
 80023ee:	e004      	b.n	80023fa <HAL_GPIO_Init+0x206>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e002      	b.n	80023fa <HAL_GPIO_Init+0x206>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_GPIO_Init+0x206>
 80023f8:	2300      	movs	r3, #0
 80023fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fc:	f002 0203 	and.w	r2, r2, #3
 8002400:	0092      	lsls	r2, r2, #2
 8002402:	4093      	lsls	r3, r2
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800240a:	4925      	ldr	r1, [pc, #148]	; (80024a0 <HAL_GPIO_Init+0x2ac>)
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d006      	beq.n	8002432 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <HAL_GPIO_Init+0x2c8>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4924      	ldr	r1, [pc, #144]	; (80024bc <HAL_GPIO_Init+0x2c8>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
 8002430:	e006      	b.n	8002440 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002432:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_GPIO_Init+0x2c8>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	43db      	mvns	r3, r3
 800243a:	4920      	ldr	r1, [pc, #128]	; (80024bc <HAL_GPIO_Init+0x2c8>)
 800243c:	4013      	ands	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d006      	beq.n	800245a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800244c:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_GPIO_Init+0x2c8>)
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	491a      	ldr	r1, [pc, #104]	; (80024bc <HAL_GPIO_Init+0x2c8>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800245a:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_GPIO_Init+0x2c8>)
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	43db      	mvns	r3, r3
 8002462:	4916      	ldr	r1, [pc, #88]	; (80024bc <HAL_GPIO_Init+0x2c8>)
 8002464:	4013      	ands	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d025      	beq.n	80024c0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_GPIO_Init+0x2c8>)
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	4910      	ldr	r1, [pc, #64]	; (80024bc <HAL_GPIO_Init+0x2c8>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]
 8002480:	e025      	b.n	80024ce <HAL_GPIO_Init+0x2da>
 8002482:	bf00      	nop
 8002484:	10320000 	.word	0x10320000
 8002488:	10310000 	.word	0x10310000
 800248c:	10220000 	.word	0x10220000
 8002490:	10210000 	.word	0x10210000
 8002494:	10120000 	.word	0x10120000
 8002498:	10110000 	.word	0x10110000
 800249c:	40021000 	.word	0x40021000
 80024a0:	40010000 	.word	0x40010000
 80024a4:	40010800 	.word	0x40010800
 80024a8:	40010c00 	.word	0x40010c00
 80024ac:	40011000 	.word	0x40011000
 80024b0:	40011400 	.word	0x40011400
 80024b4:	40011800 	.word	0x40011800
 80024b8:	40011c00 	.word	0x40011c00
 80024bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <HAL_GPIO_Init+0x324>)
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	4913      	ldr	r1, [pc, #76]	; (8002518 <HAL_GPIO_Init+0x324>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <HAL_GPIO_Init+0x324>)
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	490e      	ldr	r1, [pc, #56]	; (8002518 <HAL_GPIO_Init+0x324>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60cb      	str	r3, [r1, #12]
 80024e6:	e006      	b.n	80024f6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_GPIO_Init+0x324>)
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	4909      	ldr	r1, [pc, #36]	; (8002518 <HAL_GPIO_Init+0x324>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	3301      	adds	r3, #1
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	f47f ae7e 	bne.w	8002208 <HAL_GPIO_Init+0x14>
  }
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	372c      	adds	r7, #44	; 0x2c
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	40010400 	.word	0x40010400

0800251c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
 8002528:	4613      	mov	r3, r2
 800252a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800252c:	787b      	ldrb	r3, [r7, #1]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002538:	e003      	b.n	8002542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800253a:	887b      	ldrh	r3, [r7, #2]
 800253c:	041a      	lsls	r2, r3, #16
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	611a      	str	r2, [r3, #16]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e12b      	b.n	80027b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff fad4 	bl	8001b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	; 0x24
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800259e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025b0:	f000 fce6 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 80025b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a81      	ldr	r2, [pc, #516]	; (80027c0 <HAL_I2C_Init+0x274>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d807      	bhi.n	80025d0 <HAL_I2C_Init+0x84>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a80      	ldr	r2, [pc, #512]	; (80027c4 <HAL_I2C_Init+0x278>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	bf94      	ite	ls
 80025c8:	2301      	movls	r3, #1
 80025ca:	2300      	movhi	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	e006      	b.n	80025de <HAL_I2C_Init+0x92>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a7d      	ldr	r2, [pc, #500]	; (80027c8 <HAL_I2C_Init+0x27c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	bf94      	ite	ls
 80025d8:	2301      	movls	r3, #1
 80025da:	2300      	movhi	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e0e7      	b.n	80027b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4a78      	ldr	r2, [pc, #480]	; (80027cc <HAL_I2C_Init+0x280>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0c9b      	lsrs	r3, r3, #18
 80025f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a6a      	ldr	r2, [pc, #424]	; (80027c0 <HAL_I2C_Init+0x274>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d802      	bhi.n	8002620 <HAL_I2C_Init+0xd4>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	3301      	adds	r3, #1
 800261e:	e009      	b.n	8002634 <HAL_I2C_Init+0xe8>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	4a69      	ldr	r2, [pc, #420]	; (80027d0 <HAL_I2C_Init+0x284>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	099b      	lsrs	r3, r3, #6
 8002632:	3301      	adds	r3, #1
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	430b      	orrs	r3, r1
 800263a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002646:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	495c      	ldr	r1, [pc, #368]	; (80027c0 <HAL_I2C_Init+0x274>)
 8002650:	428b      	cmp	r3, r1
 8002652:	d819      	bhi.n	8002688 <HAL_I2C_Init+0x13c>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1e59      	subs	r1, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002662:	1c59      	adds	r1, r3, #1
 8002664:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002668:	400b      	ands	r3, r1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_I2C_Init+0x138>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1e59      	subs	r1, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fbb1 f3f3 	udiv	r3, r1, r3
 800267c:	3301      	adds	r3, #1
 800267e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002682:	e051      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002684:	2304      	movs	r3, #4
 8002686:	e04f      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d111      	bne.n	80026b4 <HAL_I2C_Init+0x168>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1e58      	subs	r0, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	440b      	add	r3, r1
 800269e:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e012      	b.n	80026da <HAL_I2C_Init+0x18e>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	0099      	lsls	r1, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_I2C_Init+0x196>
 80026de:	2301      	movs	r3, #1
 80026e0:	e022      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10e      	bne.n	8002708 <HAL_I2C_Init+0x1bc>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e58      	subs	r0, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	440b      	add	r3, r1
 80026f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002706:	e00f      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1e58      	subs	r0, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	0099      	lsls	r1, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	fbb0 f3f3 	udiv	r3, r0, r3
 800271e:	3301      	adds	r3, #1
 8002720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002724:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	6809      	ldr	r1, [r1, #0]
 800272c:	4313      	orrs	r3, r2
 800272e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002756:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6911      	ldr	r1, [r2, #16]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68d2      	ldr	r2, [r2, #12]
 8002762:	4311      	orrs	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	430b      	orrs	r3, r1
 800276a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	000186a0 	.word	0x000186a0
 80027c4:	001e847f 	.word	0x001e847f
 80027c8:	003d08ff 	.word	0x003d08ff
 80027cc:	431bde83 	.word	0x431bde83
 80027d0:	10624dd3 	.word	0x10624dd3

080027d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e272      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8087 	beq.w	8002902 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f4:	4b92      	ldr	r3, [pc, #584]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d00c      	beq.n	800281a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002800:	4b8f      	ldr	r3, [pc, #572]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b08      	cmp	r3, #8
 800280a:	d112      	bne.n	8002832 <HAL_RCC_OscConfig+0x5e>
 800280c:	4b8c      	ldr	r3, [pc, #560]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002818:	d10b      	bne.n	8002832 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281a:	4b89      	ldr	r3, [pc, #548]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d06c      	beq.n	8002900 <HAL_RCC_OscConfig+0x12c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d168      	bne.n	8002900 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e24c      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x76>
 800283c:	4b80      	ldr	r3, [pc, #512]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a7f      	ldr	r2, [pc, #508]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	e02e      	b.n	80028a8 <HAL_RCC_OscConfig+0xd4>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x98>
 8002852:	4b7b      	ldr	r3, [pc, #492]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a7a      	ldr	r2, [pc, #488]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b78      	ldr	r3, [pc, #480]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a77      	ldr	r2, [pc, #476]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e01d      	b.n	80028a8 <HAL_RCC_OscConfig+0xd4>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0xbc>
 8002876:	4b72      	ldr	r3, [pc, #456]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a71      	ldr	r2, [pc, #452]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800287c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a6e      	ldr	r2, [pc, #440]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0xd4>
 8002890:	4b6b      	ldr	r3, [pc, #428]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a6a      	ldr	r2, [pc, #424]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a67      	ldr	r2, [pc, #412]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7ff fbb2 	bl	8002018 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b8:	f7ff fbae 	bl	8002018 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e200      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b5d      	ldr	r3, [pc, #372]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0xe4>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff fb9e 	bl	8002018 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7ff fb9a 	bl	8002018 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1ec      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	4b53      	ldr	r3, [pc, #332]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x10c>
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d063      	beq.n	80029d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800290e:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800291a:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b08      	cmp	r3, #8
 8002924:	d11c      	bne.n	8002960 <HAL_RCC_OscConfig+0x18c>
 8002926:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d116      	bne.n	8002960 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002932:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x176>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e1c0      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4939      	ldr	r1, [pc, #228]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	e03a      	b.n	80029d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <HAL_RCC_OscConfig+0x270>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7ff fb53 	bl	8002018 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002976:	f7ff fb4f 	bl	8002018 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e1a1      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4927      	ldr	r1, [pc, #156]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]
 80029a8:	e015      	b.n	80029d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <HAL_RCC_OscConfig+0x270>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7ff fb32 	bl	8002018 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b8:	f7ff fb2e 	bl	8002018 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e180      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d03a      	beq.n	8002a58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d019      	beq.n	8002a1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ea:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <HAL_RCC_OscConfig+0x274>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f0:	f7ff fb12 	bl	8002018 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f8:	f7ff fb0e 	bl	8002018 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e160      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a16:	2001      	movs	r0, #1
 8002a18:	f000 fada 	bl	8002fd0 <RCC_Delay>
 8002a1c:	e01c      	b.n	8002a58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_RCC_OscConfig+0x274>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a24:	f7ff faf8 	bl	8002018 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2a:	e00f      	b.n	8002a4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2c:	f7ff faf4 	bl	8002018 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d908      	bls.n	8002a4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e146      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	42420000 	.word	0x42420000
 8002a48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4c:	4b92      	ldr	r3, [pc, #584]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e9      	bne.n	8002a2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80a6 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6a:	4b8b      	ldr	r3, [pc, #556]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10d      	bne.n	8002a92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	4b88      	ldr	r3, [pc, #544]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4a87      	ldr	r2, [pc, #540]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a80:	61d3      	str	r3, [r2, #28]
 8002a82:	4b85      	ldr	r3, [pc, #532]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a92:	4b82      	ldr	r3, [pc, #520]	; (8002c9c <HAL_RCC_OscConfig+0x4c8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d118      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9e:	4b7f      	ldr	r3, [pc, #508]	; (8002c9c <HAL_RCC_OscConfig+0x4c8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7e      	ldr	r2, [pc, #504]	; (8002c9c <HAL_RCC_OscConfig+0x4c8>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aaa:	f7ff fab5 	bl	8002018 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab2:	f7ff fab1 	bl	8002018 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b64      	cmp	r3, #100	; 0x64
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e103      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	4b75      	ldr	r3, [pc, #468]	; (8002c9c <HAL_RCC_OscConfig+0x4c8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x312>
 8002ad8:	4b6f      	ldr	r3, [pc, #444]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4a6e      	ldr	r2, [pc, #440]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6213      	str	r3, [r2, #32]
 8002ae4:	e02d      	b.n	8002b42 <HAL_RCC_OscConfig+0x36e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x334>
 8002aee:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4a69      	ldr	r2, [pc, #420]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6213      	str	r3, [r2, #32]
 8002afa:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a66      	ldr	r2, [pc, #408]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	6213      	str	r3, [r2, #32]
 8002b06:	e01c      	b.n	8002b42 <HAL_RCC_OscConfig+0x36e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b05      	cmp	r3, #5
 8002b0e:	d10c      	bne.n	8002b2a <HAL_RCC_OscConfig+0x356>
 8002b10:	4b61      	ldr	r3, [pc, #388]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4a60      	ldr	r2, [pc, #384]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	6213      	str	r3, [r2, #32]
 8002b1c:	4b5e      	ldr	r3, [pc, #376]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a5d      	ldr	r2, [pc, #372]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6213      	str	r3, [r2, #32]
 8002b28:	e00b      	b.n	8002b42 <HAL_RCC_OscConfig+0x36e>
 8002b2a:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4a5a      	ldr	r2, [pc, #360]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6213      	str	r3, [r2, #32]
 8002b36:	4b58      	ldr	r3, [pc, #352]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4a57      	ldr	r2, [pc, #348]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	f023 0304 	bic.w	r3, r3, #4
 8002b40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d015      	beq.n	8002b76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7ff fa65 	bl	8002018 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7ff fa61 	bl	8002018 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0b1      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b68:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ee      	beq.n	8002b52 <HAL_RCC_OscConfig+0x37e>
 8002b74:	e014      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b76:	f7ff fa4f 	bl	8002018 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7ff fa4b 	bl	8002018 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e09b      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b94:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ee      	bne.n	8002b7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d105      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba6:	4b3c      	ldr	r3, [pc, #240]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4a3b      	ldr	r2, [pc, #236]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8087 	beq.w	8002cca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bbc:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d061      	beq.n	8002c8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d146      	bne.n	8002c5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd0:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_RCC_OscConfig+0x4cc>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd6:	f7ff fa1f 	bl	8002018 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bde:	f7ff fa1b 	bl	8002018 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e06d      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf0:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c04:	d108      	bne.n	8002c18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	4921      	ldr	r1, [pc, #132]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c18:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a19      	ldr	r1, [r3, #32]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	491b      	ldr	r1, [pc, #108]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_OscConfig+0x4cc>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c36:	f7ff f9ef 	bl	8002018 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7ff f9eb 	bl	8002018 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e03d      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x46a>
 8002c5c:	e035      	b.n	8002cca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_RCC_OscConfig+0x4cc>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7ff f9d8 	bl	8002018 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7ff f9d4 	bl	8002018 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e026      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x498>
 8002c8a:	e01e      	b.n	8002cca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e019      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_OscConfig+0x500>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0d0      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cec:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d910      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b67      	ldr	r3, [pc, #412]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0207 	bic.w	r2, r3, #7
 8002d02:	4965      	ldr	r1, [pc, #404]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0b8      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d34:	4b59      	ldr	r3, [pc, #356]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a58      	ldr	r2, [pc, #352]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d4c:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4a52      	ldr	r2, [pc, #328]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d58:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	494d      	ldr	r1, [pc, #308]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d040      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d115      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d96:	4b41      	ldr	r3, [pc, #260]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e073      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da6:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e06b      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db6:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f023 0203 	bic.w	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4936      	ldr	r1, [pc, #216]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc8:	f7ff f926 	bl	8002018 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd0:	f7ff f922 	bl	8002018 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e053      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 020c 	and.w	r2, r3, #12
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d1eb      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df8:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d210      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 0207 	bic.w	r2, r3, #7
 8002e0e:	4922      	ldr	r1, [pc, #136]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e032      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4916      	ldr	r1, [pc, #88]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	490e      	ldr	r1, [pc, #56]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e66:	f000 f821 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	490a      	ldr	r1, [pc, #40]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	5ccb      	ldrb	r3, [r1, r3]
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8002e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f884 	bl	8001f94 <HAL_InitTick>

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	08006258 	.word	0x08006258
 8002ea4:	20000004 	.word	0x20000004
 8002ea8:	20000008 	.word	0x20000008

08002eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	b490      	push	{r4, r7}
 8002eae:	b08a      	sub	sp, #40	; 0x28
 8002eb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xac>)
 8002eb4:	1d3c      	adds	r4, r7, #4
 8002eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ebc:	f240 2301 	movw	r3, #513	; 0x201
 8002ec0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ed6:	4b21      	ldr	r3, [pc, #132]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d002      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x40>
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x46>
 8002eea:	e02b      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eec:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eee:	623b      	str	r3, [r7, #32]
      break;
 8002ef0:	e02b      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	0c9b      	lsrs	r3, r3, #18
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	3328      	adds	r3, #40	; 0x28
 8002efc:	443b      	add	r3, r7
 8002efe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f02:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d012      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f0e:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	0c5b      	lsrs	r3, r3, #17
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	3328      	adds	r3, #40	; 0x28
 8002f1a:	443b      	add	r3, r7
 8002f1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f26:	fb03 f202 	mul.w	r2, r3, r2
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
 8002f32:	e004      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	4a0b      	ldr	r2, [pc, #44]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f38:	fb02 f303 	mul.w	r3, r2, r3
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	623b      	str	r3, [r7, #32]
      break;
 8002f42:	e002      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f46:	623b      	str	r3, [r7, #32]
      break;
 8002f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3728      	adds	r7, #40	; 0x28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc90      	pop	{r4, r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	080061b4 	.word	0x080061b4
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	00f42400 	.word	0x00f42400
 8002f64:	003d0900 	.word	0x003d0900
 8002f68:	007a1200 	.word	0x007a1200

08002f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f70:	4b02      	ldr	r3, [pc, #8]	; (8002f7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	20000004 	.word	0x20000004

08002f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f84:	f7ff fff2 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	4903      	ldr	r1, [pc, #12]	; (8002fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	08006268 	.word	0x08006268

08002fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fac:	f7ff ffde 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	0adb      	lsrs	r3, r3, #11
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	4903      	ldr	r1, [pc, #12]	; (8002fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08006268 	.word	0x08006268

08002fd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <RCC_Delay+0x34>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <RCC_Delay+0x38>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	0a5b      	lsrs	r3, r3, #9
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fec:	bf00      	nop
  }
  while (Delay --);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1e5a      	subs	r2, r3, #1
 8002ff2:	60fa      	str	r2, [r7, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f9      	bne.n	8002fec <RCC_Delay+0x1c>
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	20000004 	.word	0x20000004
 8003008:	10624dd3 	.word	0x10624dd3

0800300c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e076      	b.n	800310c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	2b00      	cmp	r3, #0
 8003024:	d108      	bne.n	8003038 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800302e:	d009      	beq.n	8003044 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	61da      	str	r2, [r3, #28]
 8003036:	e005      	b.n	8003044 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fe fd9c 	bl	8001b9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800307a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c8:	ea42 0103 	orr.w	r1, r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	0c1a      	lsrs	r2, r3, #16
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f002 0204 	and.w	r2, r2, #4
 80030ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e093      	b.n	8003250 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7fe fdb3 	bl	8001ca8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2202      	movs	r2, #2
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003158:	f023 0307 	bic.w	r3, r3, #7
 800315c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3304      	adds	r3, #4
 8003166:	4619      	mov	r1, r3
 8003168:	4610      	mov	r0, r2
 800316a:	f000 f875 	bl	8003258 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003196:	f023 0303 	bic.w	r3, r3, #3
 800319a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	4313      	orrs	r3, r2
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80031b4:	f023 030c 	bic.w	r3, r3, #12
 80031b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	4313      	orrs	r3, r2
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	011a      	lsls	r2, r3, #4
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	031b      	lsls	r3, r3, #12
 80031e4:	4313      	orrs	r3, r2
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80031f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	4313      	orrs	r3, r2
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a33      	ldr	r2, [pc, #204]	; (8003338 <TIM_Base_SetConfig+0xe0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d013      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a32      	ldr	r2, [pc, #200]	; (800333c <TIM_Base_SetConfig+0xe4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00f      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327e:	d00b      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a2f      	ldr	r2, [pc, #188]	; (8003340 <TIM_Base_SetConfig+0xe8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d007      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a2e      	ldr	r2, [pc, #184]	; (8003344 <TIM_Base_SetConfig+0xec>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a2d      	ldr	r2, [pc, #180]	; (8003348 <TIM_Base_SetConfig+0xf0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d108      	bne.n	80032aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a22      	ldr	r2, [pc, #136]	; (8003338 <TIM_Base_SetConfig+0xe0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <TIM_Base_SetConfig+0x82>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a21      	ldr	r2, [pc, #132]	; (800333c <TIM_Base_SetConfig+0xe4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00f      	beq.n	80032da <TIM_Base_SetConfig+0x82>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c0:	d00b      	beq.n	80032da <TIM_Base_SetConfig+0x82>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <TIM_Base_SetConfig+0xe8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <TIM_Base_SetConfig+0x82>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <TIM_Base_SetConfig+0xec>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_Base_SetConfig+0x82>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <TIM_Base_SetConfig+0xf0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d108      	bne.n	80032ec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a09      	ldr	r2, [pc, #36]	; (8003338 <TIM_Base_SetConfig+0xe0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_Base_SetConfig+0xc8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a08      	ldr	r2, [pc, #32]	; (800333c <TIM_Base_SetConfig+0xe4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d103      	bne.n	8003328 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	615a      	str	r2, [r3, #20]
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	40012c00 	.word	0x40012c00
 800333c:	40013400 	.word	0x40013400
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800
 8003348:	40000c00 	.word	0x40000c00

0800334c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003360:	2302      	movs	r3, #2
 8003362:	e050      	b.n	8003406 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d018      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a19      	ldr	r2, [pc, #100]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d013      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ba:	d00e      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a15      	ldr	r2, [pc, #84]	; (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d009      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a14      	ldr	r2, [pc, #80]	; (800341c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a12      	ldr	r2, [pc, #72]	; (8003420 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10c      	bne.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40013400 	.word	0x40013400
 8003418:	40000400 	.word	0x40000400
 800341c:	40000800 	.word	0x40000800
 8003420:	40000c00 	.word	0x40000c00

08003424 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e03f      	b.n	80034b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fe fcbc 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2224      	movs	r2, #36	; 0x24
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003466:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f829 	bl	80034c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800347c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800348c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800349c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034fa:	f023 030c 	bic.w	r3, r3, #12
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	430b      	orrs	r3, r1
 8003506:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a2c      	ldr	r2, [pc, #176]	; (80035d4 <UART_SetConfig+0x114>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d103      	bne.n	8003530 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7ff fd3e 	bl	8002fa8 <HAL_RCC_GetPCLK2Freq>
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	e002      	b.n	8003536 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003530:	f7ff fd26 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8003534:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009a      	lsls	r2, r3, #2
 8003540:	441a      	add	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	4a22      	ldr	r2, [pc, #136]	; (80035d8 <UART_SetConfig+0x118>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	0119      	lsls	r1, r3, #4
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	009a      	lsls	r2, r3, #2
 8003560:	441a      	add	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	fbb2 f2f3 	udiv	r2, r2, r3
 800356c:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <UART_SetConfig+0x118>)
 800356e:	fba3 0302 	umull	r0, r3, r3, r2
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	2064      	movs	r0, #100	; 0x64
 8003576:	fb00 f303 	mul.w	r3, r0, r3
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	3332      	adds	r3, #50	; 0x32
 8003580:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <UART_SetConfig+0x118>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800358c:	4419      	add	r1, r3
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	009a      	lsls	r2, r3, #2
 8003598:	441a      	add	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <UART_SetConfig+0x118>)
 80035a6:	fba3 0302 	umull	r0, r3, r3, r2
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	2064      	movs	r0, #100	; 0x64
 80035ae:	fb00 f303 	mul.w	r3, r0, r3
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	3332      	adds	r3, #50	; 0x32
 80035b8:	4a07      	ldr	r2, [pc, #28]	; (80035d8 <UART_SetConfig+0x118>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	f003 020f 	and.w	r2, r3, #15
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	440a      	add	r2, r1
 80035ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40013800 	.word	0x40013800
 80035d8:	51eb851f 	.word	0x51eb851f

080035dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035e2:	f3ef 8305 	mrs	r3, IPSR
 80035e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80035e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10f      	bne.n	800360e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ee:	f3ef 8310 	mrs	r3, PRIMASK
 80035f2:	607b      	str	r3, [r7, #4]
  return(result);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <osKernelInitialize+0x32>
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <osKernelInitialize+0x60>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d109      	bne.n	8003616 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003602:	f3ef 8311 	mrs	r3, BASEPRI
 8003606:	603b      	str	r3, [r7, #0]
  return(result);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800360e:	f06f 0305 	mvn.w	r3, #5
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	e00c      	b.n	8003630 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <osKernelInitialize+0x60>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d105      	bne.n	800362a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800361e:	4b07      	ldr	r3, [pc, #28]	; (800363c <osKernelInitialize+0x60>)
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e002      	b.n	8003630 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800362a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800362e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003630:	68fb      	ldr	r3, [r7, #12]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	200002a0 	.word	0x200002a0

08003640 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003646:	f3ef 8305 	mrs	r3, IPSR
 800364a:	60bb      	str	r3, [r7, #8]
  return(result);
 800364c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10f      	bne.n	8003672 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003652:	f3ef 8310 	mrs	r3, PRIMASK
 8003656:	607b      	str	r3, [r7, #4]
  return(result);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <osKernelStart+0x32>
 800365e:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <osKernelStart+0x64>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d109      	bne.n	800367a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003666:	f3ef 8311 	mrs	r3, BASEPRI
 800366a:	603b      	str	r3, [r7, #0]
  return(result);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003672:	f06f 0305 	mvn.w	r3, #5
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	e00e      	b.n	8003698 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <osKernelStart+0x64>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d107      	bne.n	8003692 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003682:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <osKernelStart+0x64>)
 8003684:	2202      	movs	r2, #2
 8003686:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003688:	f001 f878 	bl	800477c <vTaskStartScheduler>
      stat = osOK;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	e002      	b.n	8003698 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003696:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003698:	68fb      	ldr	r3, [r7, #12]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200002a0 	.word	0x200002a0

080036a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b092      	sub	sp, #72	; 0x48
 80036ac:	af04      	add	r7, sp, #16
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036b8:	f3ef 8305 	mrs	r3, IPSR
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f040 8094 	bne.w	80037ee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c6:	f3ef 8310 	mrs	r3, PRIMASK
 80036ca:	623b      	str	r3, [r7, #32]
  return(result);
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f040 808d 	bne.w	80037ee <osThreadNew+0x146>
 80036d4:	4b48      	ldr	r3, [pc, #288]	; (80037f8 <osThreadNew+0x150>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d106      	bne.n	80036ea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036dc:	f3ef 8311 	mrs	r3, BASEPRI
 80036e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f040 8082 	bne.w	80037ee <osThreadNew+0x146>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d07e      	beq.n	80037ee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80036f4:	2318      	movs	r3, #24
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80036f8:	2300      	movs	r3, #0
 80036fa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80036fc:	f107 031b 	add.w	r3, r7, #27
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d045      	beq.n	800379a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <osThreadNew+0x74>
        name = attr->name;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800372a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <osThreadNew+0x9a>
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	2b38      	cmp	r3, #56	; 0x38
 8003734:	d805      	bhi.n	8003742 <osThreadNew+0x9a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <osThreadNew+0x9e>
        return (NULL);
 8003742:	2300      	movs	r3, #0
 8003744:	e054      	b.n	80037f0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	089b      	lsrs	r3, r3, #2
 8003754:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00e      	beq.n	800377c <osThreadNew+0xd4>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b5b      	cmp	r3, #91	; 0x5b
 8003764:	d90a      	bls.n	800377c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800376a:	2b00      	cmp	r3, #0
 800376c:	d006      	beq.n	800377c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <osThreadNew+0xd4>
        mem = 1;
 8003776:	2301      	movs	r3, #1
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28
 800377a:	e010      	b.n	800379e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10c      	bne.n	800379e <osThreadNew+0xf6>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d108      	bne.n	800379e <osThreadNew+0xf6>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d104      	bne.n	800379e <osThreadNew+0xf6>
          mem = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	62bb      	str	r3, [r7, #40]	; 0x28
 8003798:	e001      	b.n	800379e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d110      	bne.n	80037c6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037ac:	9202      	str	r2, [sp, #8]
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fe12 	bl	80043e4 <xTaskCreateStatic>
 80037c0:	4603      	mov	r3, r0
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	e013      	b.n	80037ee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d110      	bne.n	80037ee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fe5c 	bl	800449c <xTaskCreate>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d001      	beq.n	80037ee <osThreadNew+0x146>
          hTask = NULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037ee:	697b      	ldr	r3, [r7, #20]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3738      	adds	r7, #56	; 0x38
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	200002a0 	.word	0x200002a0

080037fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003804:	f3ef 8305 	mrs	r3, IPSR
 8003808:	613b      	str	r3, [r7, #16]
  return(result);
 800380a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10f      	bne.n	8003830 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003810:	f3ef 8310 	mrs	r3, PRIMASK
 8003814:	60fb      	str	r3, [r7, #12]
  return(result);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <osDelay+0x34>
 800381c:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <osDelay+0x58>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d109      	bne.n	8003838 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003824:	f3ef 8311 	mrs	r3, BASEPRI
 8003828:	60bb      	str	r3, [r7, #8]
  return(result);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <osDelay+0x3c>
    stat = osErrorISR;
 8003830:	f06f 0305 	mvn.w	r3, #5
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e007      	b.n	8003848 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 ff66 	bl	8004714 <vTaskDelay>
    }
  }

  return (stat);
 8003848:	697b      	ldr	r3, [r7, #20]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	200002a0 	.word	0x200002a0

08003858 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4a06      	ldr	r2, [pc, #24]	; (8003880 <vApplicationGetIdleTaskMemory+0x28>)
 8003868:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4a05      	ldr	r2, [pc, #20]	; (8003884 <vApplicationGetIdleTaskMemory+0x2c>)
 800386e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2280      	movs	r2, #128	; 0x80
 8003874:	601a      	str	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	200002a4 	.word	0x200002a4
 8003884:	20000300 	.word	0x20000300

08003888 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4a07      	ldr	r2, [pc, #28]	; (80038b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003898:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4a06      	ldr	r2, [pc, #24]	; (80038b8 <vApplicationGetTimerTaskMemory+0x30>)
 800389e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038a6:	601a      	str	r2, [r3, #0]
}
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000500 	.word	0x20000500
 80038b8:	2000055c 	.word	0x2000055c

080038bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f103 0208 	add.w	r2, r3, #8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f103 0208 	add.w	r2, r3, #8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f103 0208 	add.w	r2, r3, #8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr

080038fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003912:	b480      	push	{r7}
 8003914:	b085      	sub	sp, #20
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	601a      	str	r2, [r3, #0]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800396e:	d103      	bne.n	8003978 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	e00c      	b.n	8003992 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3308      	adds	r3, #8
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	e002      	b.n	8003986 <vListInsert+0x2e>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	d2f6      	bcs.n	8003980 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	601a      	str	r2, [r3, #0]
}
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6892      	ldr	r2, [r2, #8]
 80039de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6852      	ldr	r2, [r2, #4]
 80039e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d103      	bne.n	80039fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	1e5a      	subs	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
	...

08003a1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10a      	bne.n	8003a46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a42:	bf00      	nop
 8003a44:	e7fe      	b.n	8003a44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a46:	f001 ffc9 	bl	80059dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	68f9      	ldr	r1, [r7, #12]
 8003a54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a56:	fb01 f303 	mul.w	r3, r1, r3
 8003a5a:	441a      	add	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a76:	3b01      	subs	r3, #1
 8003a78:	68f9      	ldr	r1, [r7, #12]
 8003a7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	441a      	add	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	22ff      	movs	r2, #255	; 0xff
 8003a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	22ff      	movs	r2, #255	; 0xff
 8003a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d114      	bne.n	8003ac6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01a      	beq.n	8003ada <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3310      	adds	r3, #16
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f001 f8f1 	bl	8004c90 <xTaskRemoveFromEventList>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d012      	beq.n	8003ada <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <xQueueGenericReset+0xcc>)
 8003ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	e009      	b.n	8003ada <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3310      	adds	r3, #16
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fef6 	bl	80038bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3324      	adds	r3, #36	; 0x24
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fef1 	bl	80038bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ada:	f001 ffaf 	bl	8005a3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ade:	2301      	movs	r3, #1
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08e      	sub	sp, #56	; 0x38
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b12:	bf00      	nop
 8003b14:	e7fe      	b.n	8003b14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b2e:	bf00      	nop
 8003b30:	e7fe      	b.n	8003b30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <xQueueGenericCreateStatic+0x52>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <xQueueGenericCreateStatic+0x56>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <xQueueGenericCreateStatic+0x58>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	623b      	str	r3, [r7, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <xQueueGenericCreateStatic+0x7e>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <xQueueGenericCreateStatic+0x82>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <xQueueGenericCreateStatic+0x84>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	61fb      	str	r3, [r7, #28]
}
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b8a:	2350      	movs	r3, #80	; 0x50
 8003b8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b50      	cmp	r3, #80	; 0x50
 8003b92:	d00a      	beq.n	8003baa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	61bb      	str	r3, [r7, #24]
}
 8003ba6:	bf00      	nop
 8003ba8:	e7fe      	b.n	8003ba8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00d      	beq.n	8003bd0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bbc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f805 	bl	8003bda <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3730      	adds	r7, #48	; 0x30
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d103      	bne.n	8003bf6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e002      	b.n	8003bfc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c08:	2101      	movs	r1, #1
 8003c0a:	69b8      	ldr	r0, [r7, #24]
 8003c0c:	f7ff ff06 	bl	8003a1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08e      	sub	sp, #56	; 0x38
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <xQueueGenericSend+0x32>
	__asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c4e:	bf00      	nop
 8003c50:	e7fe      	b.n	8003c50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d103      	bne.n	8003c60 <xQueueGenericSend+0x40>
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <xQueueGenericSend+0x44>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <xQueueGenericSend+0x46>
 8003c64:	2300      	movs	r3, #0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <xQueueGenericSend+0x60>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c7c:	bf00      	nop
 8003c7e:	e7fe      	b.n	8003c7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d103      	bne.n	8003c8e <xQueueGenericSend+0x6e>
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <xQueueGenericSend+0x72>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <xQueueGenericSend+0x74>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10a      	bne.n	8003cae <xQueueGenericSend+0x8e>
	__asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	623b      	str	r3, [r7, #32]
}
 8003caa:	bf00      	nop
 8003cac:	e7fe      	b.n	8003cac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cae:	f001 f9b1 	bl	8005014 <xTaskGetSchedulerState>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <xQueueGenericSend+0x9e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <xQueueGenericSend+0xa2>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <xQueueGenericSend+0xa4>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <xQueueGenericSend+0xbe>
	__asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	61fb      	str	r3, [r7, #28]
}
 8003cda:	bf00      	nop
 8003cdc:	e7fe      	b.n	8003cdc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cde:	f001 fe7d 	bl	80059dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d302      	bcc.n	8003cf4 <xQueueGenericSend+0xd4>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d129      	bne.n	8003d48 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cfa:	f000 fa07 	bl	800410c <prvCopyDataToQueue>
 8003cfe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d010      	beq.n	8003d2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	3324      	adds	r3, #36	; 0x24
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 ffbf 	bl	8004c90 <xTaskRemoveFromEventList>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d013      	beq.n	8003d40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d18:	4b3f      	ldr	r3, [pc, #252]	; (8003e18 <xQueueGenericSend+0x1f8>)
 8003d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	e00a      	b.n	8003d40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d30:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <xQueueGenericSend+0x1f8>)
 8003d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d40:	f001 fe7c 	bl	8005a3c <vPortExitCritical>
				return pdPASS;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e063      	b.n	8003e10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d103      	bne.n	8003d56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d4e:	f001 fe75 	bl	8005a3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e05c      	b.n	8003e10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d106      	bne.n	8003d6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d5c:	f107 0314 	add.w	r3, r7, #20
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fff9 	bl	8004d58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d66:	2301      	movs	r3, #1
 8003d68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d6a:	f001 fe67 	bl	8005a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d6e:	f000 fd6b 	bl	8004848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d72:	f001 fe33 	bl	80059dc <vPortEnterCritical>
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d7c:	b25b      	sxtb	r3, r3
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d82:	d103      	bne.n	8003d8c <xQueueGenericSend+0x16c>
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d92:	b25b      	sxtb	r3, r3
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d98:	d103      	bne.n	8003da2 <xQueueGenericSend+0x182>
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003da2:	f001 fe4b 	bl	8005a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003da6:	1d3a      	adds	r2, r7, #4
 8003da8:	f107 0314 	add.w	r3, r7, #20
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 ffe8 	bl	8004d84 <xTaskCheckForTimeOut>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d124      	bne.n	8003e04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dbc:	f000 fa9e 	bl	80042fc <prvIsQueueFull>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d018      	beq.n	8003df8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	3310      	adds	r3, #16
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 ff0e 	bl	8004bf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dd6:	f000 fa29 	bl	800422c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003dda:	f000 fd43 	bl	8004864 <xTaskResumeAll>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f47f af7c 	bne.w	8003cde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003de6:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <xQueueGenericSend+0x1f8>)
 8003de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	e772      	b.n	8003cde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dfa:	f000 fa17 	bl	800422c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dfe:	f000 fd31 	bl	8004864 <xTaskResumeAll>
 8003e02:	e76c      	b.n	8003cde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e06:	f000 fa11 	bl	800422c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e0a:	f000 fd2b 	bl	8004864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e0e:	2300      	movs	r3, #0
		}
	}
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3738      	adds	r7, #56	; 0x38
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	e000ed04 	.word	0xe000ed04

08003e1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08e      	sub	sp, #56	; 0x38
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e46:	bf00      	nop
 8003e48:	e7fe      	b.n	8003e48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d103      	bne.n	8003e58 <xQueueGenericSendFromISR+0x3c>
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <xQueueGenericSendFromISR+0x40>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <xQueueGenericSendFromISR+0x42>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10a      	bne.n	8003e78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	623b      	str	r3, [r7, #32]
}
 8003e74:	bf00      	nop
 8003e76:	e7fe      	b.n	8003e76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d103      	bne.n	8003e86 <xQueueGenericSendFromISR+0x6a>
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <xQueueGenericSendFromISR+0x6e>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <xQueueGenericSendFromISR+0x70>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10a      	bne.n	8003ea6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	61fb      	str	r3, [r7, #28]
}
 8003ea2:	bf00      	nop
 8003ea4:	e7fe      	b.n	8003ea4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ea6:	f001 fe5b 	bl	8005b60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003eaa:	f3ef 8211 	mrs	r2, BASEPRI
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	61ba      	str	r2, [r7, #24]
 8003ec0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ec2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d302      	bcc.n	8003ed8 <xQueueGenericSendFromISR+0xbc>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d12c      	bne.n	8003f32 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ee8:	f000 f910 	bl	800410c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003eec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ef4:	d112      	bne.n	8003f1c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	3324      	adds	r3, #36	; 0x24
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fec4 	bl	8004c90 <xTaskRemoveFromEventList>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00e      	beq.n	8003f2c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	e007      	b.n	8003f2c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f20:	3301      	adds	r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	b25a      	sxtb	r2, r3
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003f30:	e001      	b.n	8003f36 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	637b      	str	r3, [r7, #52]	; 0x34
 8003f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f38:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3738      	adds	r7, #56	; 0x38
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08c      	sub	sp, #48	; 0x30
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <xQueueReceive+0x30>
	__asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	623b      	str	r3, [r7, #32]
}
 8003f78:	bf00      	nop
 8003f7a:	e7fe      	b.n	8003f7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d103      	bne.n	8003f8a <xQueueReceive+0x3e>
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <xQueueReceive+0x42>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <xQueueReceive+0x44>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <xQueueReceive+0x5e>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	61fb      	str	r3, [r7, #28]
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003faa:	f001 f833 	bl	8005014 <xTaskGetSchedulerState>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <xQueueReceive+0x6e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <xQueueReceive+0x72>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <xQueueReceive+0x74>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <xQueueReceive+0x8e>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	61bb      	str	r3, [r7, #24]
}
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fda:	f001 fcff 	bl	80059dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01f      	beq.n	800402a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fee:	f000 f8f7 	bl	80041e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	1e5a      	subs	r2, r3, #1
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00f      	beq.n	8004022 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	3310      	adds	r3, #16
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fe42 	bl	8004c90 <xTaskRemoveFromEventList>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004012:	4b3d      	ldr	r3, [pc, #244]	; (8004108 <xQueueReceive+0x1bc>)
 8004014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004022:	f001 fd0b 	bl	8005a3c <vPortExitCritical>
				return pdPASS;
 8004026:	2301      	movs	r3, #1
 8004028:	e069      	b.n	80040fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d103      	bne.n	8004038 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004030:	f001 fd04 	bl	8005a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004034:	2300      	movs	r3, #0
 8004036:	e062      	b.n	80040fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800403e:	f107 0310 	add.w	r3, r7, #16
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fe88 	bl	8004d58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004048:	2301      	movs	r3, #1
 800404a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800404c:	f001 fcf6 	bl	8005a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004050:	f000 fbfa 	bl	8004848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004054:	f001 fcc2 	bl	80059dc <vPortEnterCritical>
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800405e:	b25b      	sxtb	r3, r3
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004064:	d103      	bne.n	800406e <xQueueReceive+0x122>
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800406e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004074:	b25b      	sxtb	r3, r3
 8004076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800407a:	d103      	bne.n	8004084 <xQueueReceive+0x138>
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004084:	f001 fcda 	bl	8005a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004088:	1d3a      	adds	r2, r7, #4
 800408a:	f107 0310 	add.w	r3, r7, #16
 800408e:	4611      	mov	r1, r2
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fe77 	bl	8004d84 <xTaskCheckForTimeOut>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d123      	bne.n	80040e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800409c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800409e:	f000 f917 	bl	80042d0 <prvIsQueueEmpty>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d017      	beq.n	80040d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	3324      	adds	r3, #36	; 0x24
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4611      	mov	r1, r2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fd9d 	bl	8004bf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040b8:	f000 f8b8 	bl	800422c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040bc:	f000 fbd2 	bl	8004864 <xTaskResumeAll>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d189      	bne.n	8003fda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <xQueueReceive+0x1bc>)
 80040c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	e780      	b.n	8003fda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80040d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040da:	f000 f8a7 	bl	800422c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040de:	f000 fbc1 	bl	8004864 <xTaskResumeAll>
 80040e2:	e77a      	b.n	8003fda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80040e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040e6:	f000 f8a1 	bl	800422c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040ea:	f000 fbbb 	bl	8004864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040f0:	f000 f8ee 	bl	80042d0 <prvIsQueueEmpty>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f43f af6f 	beq.w	8003fda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3730      	adds	r7, #48	; 0x30
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	e000ed04 	.word	0xe000ed04

0800410c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10d      	bne.n	8004146 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d14d      	bne.n	80041ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 ff8a 	bl	8005050 <xTaskPriorityDisinherit>
 800413c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	e043      	b.n	80041ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d119      	bne.n	8004180 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6898      	ldr	r0, [r3, #8]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	461a      	mov	r2, r3
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	f001 ff62 	bl	8006020 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	441a      	add	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	429a      	cmp	r2, r3
 8004174:	d32b      	bcc.n	80041ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	609a      	str	r2, [r3, #8]
 800417e:	e026      	b.n	80041ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	68d8      	ldr	r0, [r3, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	461a      	mov	r2, r3
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	f001 ff48 	bl	8006020 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	425b      	negs	r3, r3
 800419a:	441a      	add	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d207      	bcs.n	80041bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	425b      	negs	r3, r3
 80041b6:	441a      	add	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d105      	bne.n	80041ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80041d6:	697b      	ldr	r3, [r7, #20]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d018      	beq.n	8004224 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	441a      	add	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	429a      	cmp	r2, r3
 800420a:	d303      	bcc.n	8004214 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68d9      	ldr	r1, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	461a      	mov	r2, r3
 800421e:	6838      	ldr	r0, [r7, #0]
 8004220:	f001 fefe 	bl	8006020 <memcpy>
	}
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004234:	f001 fbd2 	bl	80059dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800423e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004240:	e011      	b.n	8004266 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	2b00      	cmp	r3, #0
 8004248:	d012      	beq.n	8004270 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3324      	adds	r3, #36	; 0x24
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fd1e 	bl	8004c90 <xTaskRemoveFromEventList>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800425a:	f000 fdf5 	bl	8004e48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	3b01      	subs	r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800426a:	2b00      	cmp	r3, #0
 800426c:	dce9      	bgt.n	8004242 <prvUnlockQueue+0x16>
 800426e:	e000      	b.n	8004272 <prvUnlockQueue+0x46>
					break;
 8004270:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	22ff      	movs	r2, #255	; 0xff
 8004276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800427a:	f001 fbdf 	bl	8005a3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800427e:	f001 fbad 	bl	80059dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004288:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800428a:	e011      	b.n	80042b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d012      	beq.n	80042ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3310      	adds	r3, #16
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fcf9 	bl	8004c90 <xTaskRemoveFromEventList>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042a4:	f000 fdd0 	bl	8004e48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042a8:	7bbb      	ldrb	r3, [r7, #14]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	dce9      	bgt.n	800428c <prvUnlockQueue+0x60>
 80042b8:	e000      	b.n	80042bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	22ff      	movs	r2, #255	; 0xff
 80042c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80042c4:	f001 fbba 	bl	8005a3c <vPortExitCritical>
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042d8:	f001 fb80 	bl	80059dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042e4:	2301      	movs	r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	e001      	b.n	80042ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042ee:	f001 fba5 	bl	8005a3c <vPortExitCritical>

	return xReturn;
 80042f2:	68fb      	ldr	r3, [r7, #12]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004304:	f001 fb6a 	bl	80059dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004310:	429a      	cmp	r2, r3
 8004312:	d102      	bne.n	800431a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004314:	2301      	movs	r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	e001      	b.n	800431e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800431e:	f001 fb8d 	bl	8005a3c <vPortExitCritical>

	return xReturn;
 8004322:	68fb      	ldr	r3, [r7, #12]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e014      	b.n	8004366 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800433c:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <vQueueAddToRegistry+0x4c>)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004348:	490b      	ldr	r1, [pc, #44]	; (8004378 <vQueueAddToRegistry+0x4c>)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004352:	4a09      	ldr	r2, [pc, #36]	; (8004378 <vQueueAddToRegistry+0x4c>)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800435e:	e006      	b.n	800436e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3301      	adds	r3, #1
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b07      	cmp	r3, #7
 800436a:	d9e7      	bls.n	800433c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr
 8004378:	2000095c 	.word	0x2000095c

0800437c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800438c:	f001 fb26 	bl	80059dc <vPortEnterCritical>
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004396:	b25b      	sxtb	r3, r3
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800439c:	d103      	bne.n	80043a6 <vQueueWaitForMessageRestricted+0x2a>
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ac:	b25b      	sxtb	r3, r3
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b2:	d103      	bne.n	80043bc <vQueueWaitForMessageRestricted+0x40>
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043bc:	f001 fb3e 	bl	8005a3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	3324      	adds	r3, #36	; 0x24
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fc31 	bl	8004c38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80043d6:	6978      	ldr	r0, [r7, #20]
 80043d8:	f7ff ff28 	bl	800422c <prvUnlockQueue>
	}
 80043dc:	bf00      	nop
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08e      	sub	sp, #56	; 0x38
 80043e8:	af04      	add	r7, sp, #16
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10a      	bne.n	800440e <xTaskCreateStatic+0x2a>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	623b      	str	r3, [r7, #32]
}
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10a      	bne.n	800442a <xTaskCreateStatic+0x46>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	61fb      	str	r3, [r7, #28]
}
 8004426:	bf00      	nop
 8004428:	e7fe      	b.n	8004428 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800442a:	235c      	movs	r3, #92	; 0x5c
 800442c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b5c      	cmp	r3, #92	; 0x5c
 8004432:	d00a      	beq.n	800444a <xTaskCreateStatic+0x66>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	61bb      	str	r3, [r7, #24]
}
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800444a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01e      	beq.n	800448e <xTaskCreateStatic+0xaa>
 8004450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004452:	2b00      	cmp	r3, #0
 8004454:	d01b      	beq.n	800448e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800445e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	2202      	movs	r2, #2
 8004464:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004468:	2300      	movs	r3, #0
 800446a:	9303      	str	r3, [sp, #12]
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	9302      	str	r3, [sp, #8]
 8004470:	f107 0314 	add.w	r3, r7, #20
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f850 	bl	8004526 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004486:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004488:	f000 f8d4 	bl	8004634 <prvAddNewTaskToReadyList>
 800448c:	e001      	b.n	8004492 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004492:	697b      	ldr	r3, [r7, #20]
	}
 8004494:	4618      	mov	r0, r3
 8004496:	3728      	adds	r7, #40	; 0x28
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08c      	sub	sp, #48	; 0x30
 80044a0:	af04      	add	r7, sp, #16
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ac:	88fb      	ldrh	r3, [r7, #6]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f001 fb93 	bl	8005bdc <pvPortMalloc>
 80044b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00e      	beq.n	80044dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80044be:	205c      	movs	r0, #92	; 0x5c
 80044c0:	f001 fb8c 	bl	8005bdc <pvPortMalloc>
 80044c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30
 80044d2:	e005      	b.n	80044e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044d4:	6978      	ldr	r0, [r7, #20]
 80044d6:	f001 fc45 	bl	8005d64 <vPortFree>
 80044da:	e001      	b.n	80044e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d017      	beq.n	8004516 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044ee:	88fa      	ldrh	r2, [r7, #6]
 80044f0:	2300      	movs	r3, #0
 80044f2:	9303      	str	r3, [sp, #12]
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	9302      	str	r3, [sp, #8]
 80044f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f80e 	bl	8004526 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800450a:	69f8      	ldr	r0, [r7, #28]
 800450c:	f000 f892 	bl	8004634 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004510:	2301      	movs	r3, #1
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	e002      	b.n	800451c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800451a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800451c:	69bb      	ldr	r3, [r7, #24]
	}
 800451e:	4618      	mov	r0, r3
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b088      	sub	sp, #32
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	461a      	mov	r2, r3
 800453e:	21a5      	movs	r1, #165	; 0xa5
 8004540:	f001 fd7c 	bl	800603c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800454e:	3b01      	subs	r3, #1
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	f023 0307 	bic.w	r3, r3, #7
 800455c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <prvInitialiseNewTask+0x58>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	617b      	str	r3, [r7, #20]
}
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	e012      	b.n	80045aa <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	7819      	ldrb	r1, [r3, #0]
 800458c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	3334      	adds	r3, #52	; 0x34
 8004594:	460a      	mov	r2, r1
 8004596:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	4413      	add	r3, r2
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d006      	beq.n	80045b2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	3301      	adds	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	2b0f      	cmp	r3, #15
 80045ae:	d9e9      	bls.n	8004584 <prvInitialiseNewTask+0x5e>
 80045b0:	e000      	b.n	80045b4 <prvInitialiseNewTask+0x8e>
		{
			break;
 80045b2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	2b37      	cmp	r3, #55	; 0x37
 80045c0:	d901      	bls.n	80045c6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045c2:	2337      	movs	r3, #55	; 0x37
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	2200      	movs	r2, #0
 80045d6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	3304      	adds	r3, #4
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff f98c 	bl	80038fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	3318      	adds	r3, #24
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff f987 	bl	80038fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004600:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	2200      	movs	r2, #0
 8004606:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	68f9      	ldr	r1, [r7, #12]
 8004614:	69b8      	ldr	r0, [r7, #24]
 8004616:	f001 f8ef 	bl	80057f8 <pxPortInitialiseStack>
 800461a:	4602      	mov	r2, r0
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800462c:	bf00      	nop
 800462e:	3720      	adds	r7, #32
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800463c:	f001 f9ce 	bl	80059dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004640:	4b2d      	ldr	r3, [pc, #180]	; (80046f8 <prvAddNewTaskToReadyList+0xc4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3301      	adds	r3, #1
 8004646:	4a2c      	ldr	r2, [pc, #176]	; (80046f8 <prvAddNewTaskToReadyList+0xc4>)
 8004648:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800464a:	4b2c      	ldr	r3, [pc, #176]	; (80046fc <prvAddNewTaskToReadyList+0xc8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d109      	bne.n	8004666 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004652:	4a2a      	ldr	r2, [pc, #168]	; (80046fc <prvAddNewTaskToReadyList+0xc8>)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004658:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <prvAddNewTaskToReadyList+0xc4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d110      	bne.n	8004682 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004660:	f000 fc16 	bl	8004e90 <prvInitialiseTaskLists>
 8004664:	e00d      	b.n	8004682 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004666:	4b26      	ldr	r3, [pc, #152]	; (8004700 <prvAddNewTaskToReadyList+0xcc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d109      	bne.n	8004682 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800466e:	4b23      	ldr	r3, [pc, #140]	; (80046fc <prvAddNewTaskToReadyList+0xc8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	429a      	cmp	r2, r3
 800467a:	d802      	bhi.n	8004682 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800467c:	4a1f      	ldr	r2, [pc, #124]	; (80046fc <prvAddNewTaskToReadyList+0xc8>)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004682:	4b20      	ldr	r3, [pc, #128]	; (8004704 <prvAddNewTaskToReadyList+0xd0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3301      	adds	r3, #1
 8004688:	4a1e      	ldr	r2, [pc, #120]	; (8004704 <prvAddNewTaskToReadyList+0xd0>)
 800468a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800468c:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <prvAddNewTaskToReadyList+0xd0>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004698:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <prvAddNewTaskToReadyList+0xd4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d903      	bls.n	80046a8 <prvAddNewTaskToReadyList+0x74>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	4a18      	ldr	r2, [pc, #96]	; (8004708 <prvAddNewTaskToReadyList+0xd4>)
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4a15      	ldr	r2, [pc, #84]	; (800470c <prvAddNewTaskToReadyList+0xd8>)
 80046b6:	441a      	add	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f7ff f927 	bl	8003912 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046c4:	f001 f9ba 	bl	8005a3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046c8:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <prvAddNewTaskToReadyList+0xcc>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00e      	beq.n	80046ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <prvAddNewTaskToReadyList+0xc8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	429a      	cmp	r2, r3
 80046dc:	d207      	bcs.n	80046ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046de:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <prvAddNewTaskToReadyList+0xdc>)
 80046e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000e70 	.word	0x20000e70
 80046fc:	2000099c 	.word	0x2000099c
 8004700:	20000e7c 	.word	0x20000e7c
 8004704:	20000e8c 	.word	0x20000e8c
 8004708:	20000e78 	.word	0x20000e78
 800470c:	200009a0 	.word	0x200009a0
 8004710:	e000ed04 	.word	0xe000ed04

08004714 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d017      	beq.n	8004756 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004726:	4b13      	ldr	r3, [pc, #76]	; (8004774 <vTaskDelay+0x60>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <vTaskDelay+0x30>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	60bb      	str	r3, [r7, #8]
}
 8004740:	bf00      	nop
 8004742:	e7fe      	b.n	8004742 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004744:	f000 f880 	bl	8004848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004748:	2100      	movs	r1, #0
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fcee 	bl	800512c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004750:	f000 f888 	bl	8004864 <xTaskResumeAll>
 8004754:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d107      	bne.n	800476c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <vTaskDelay+0x64>)
 800475e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000e98 	.word	0x20000e98
 8004778:	e000ed04 	.word	0xe000ed04

0800477c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004782:	2300      	movs	r3, #0
 8004784:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800478a:	463a      	mov	r2, r7
 800478c:	1d39      	adds	r1, r7, #4
 800478e:	f107 0308 	add.w	r3, r7, #8
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff f860 	bl	8003858 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004798:	6839      	ldr	r1, [r7, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	9202      	str	r2, [sp, #8]
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	2300      	movs	r3, #0
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	2300      	movs	r3, #0
 80047a8:	460a      	mov	r2, r1
 80047aa:	4921      	ldr	r1, [pc, #132]	; (8004830 <vTaskStartScheduler+0xb4>)
 80047ac:	4821      	ldr	r0, [pc, #132]	; (8004834 <vTaskStartScheduler+0xb8>)
 80047ae:	f7ff fe19 	bl	80043e4 <xTaskCreateStatic>
 80047b2:	4603      	mov	r3, r0
 80047b4:	4a20      	ldr	r2, [pc, #128]	; (8004838 <vTaskStartScheduler+0xbc>)
 80047b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047b8:	4b1f      	ldr	r3, [pc, #124]	; (8004838 <vTaskStartScheduler+0xbc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047c0:	2301      	movs	r3, #1
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	e001      	b.n	80047ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d102      	bne.n	80047d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80047d0:	f000 fd00 	bl	80051d4 <xTimerCreateTimerTask>
 80047d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d116      	bne.n	800480a <vTaskStartScheduler+0x8e>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	613b      	str	r3, [r7, #16]
}
 80047ee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047f0:	4b12      	ldr	r3, [pc, #72]	; (800483c <vTaskStartScheduler+0xc0>)
 80047f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047f8:	4b11      	ldr	r3, [pc, #68]	; (8004840 <vTaskStartScheduler+0xc4>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <vTaskStartScheduler+0xc8>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004804:	f001 f878 	bl	80058f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004808:	e00e      	b.n	8004828 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004810:	d10a      	bne.n	8004828 <vTaskStartScheduler+0xac>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	60fb      	str	r3, [r7, #12]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <vTaskStartScheduler+0xaa>
}
 8004828:	bf00      	nop
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	080061c4 	.word	0x080061c4
 8004834:	08004e61 	.word	0x08004e61
 8004838:	20000e94 	.word	0x20000e94
 800483c:	20000e90 	.word	0x20000e90
 8004840:	20000e7c 	.word	0x20000e7c
 8004844:	20000e74 	.word	0x20000e74

08004848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800484c:	4b04      	ldr	r3, [pc, #16]	; (8004860 <vTaskSuspendAll+0x18>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3301      	adds	r3, #1
 8004852:	4a03      	ldr	r2, [pc, #12]	; (8004860 <vTaskSuspendAll+0x18>)
 8004854:	6013      	str	r3, [r2, #0]
}
 8004856:	bf00      	nop
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000e98 	.word	0x20000e98

08004864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004872:	4b42      	ldr	r3, [pc, #264]	; (800497c <xTaskResumeAll+0x118>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <xTaskResumeAll+0x2c>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	603b      	str	r3, [r7, #0]
}
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004890:	f001 f8a4 	bl	80059dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004894:	4b39      	ldr	r3, [pc, #228]	; (800497c <xTaskResumeAll+0x118>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3b01      	subs	r3, #1
 800489a:	4a38      	ldr	r2, [pc, #224]	; (800497c <xTaskResumeAll+0x118>)
 800489c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800489e:	4b37      	ldr	r3, [pc, #220]	; (800497c <xTaskResumeAll+0x118>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d162      	bne.n	800496c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048a6:	4b36      	ldr	r3, [pc, #216]	; (8004980 <xTaskResumeAll+0x11c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d05e      	beq.n	800496c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048ae:	e02f      	b.n	8004910 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80048b0:	4b34      	ldr	r3, [pc, #208]	; (8004984 <xTaskResumeAll+0x120>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3318      	adds	r3, #24
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff f883 	bl	80039c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff f87e 	bl	80039c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d0:	4b2d      	ldr	r3, [pc, #180]	; (8004988 <xTaskResumeAll+0x124>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d903      	bls.n	80048e0 <xTaskResumeAll+0x7c>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	4a2a      	ldr	r2, [pc, #168]	; (8004988 <xTaskResumeAll+0x124>)
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4a27      	ldr	r2, [pc, #156]	; (800498c <xTaskResumeAll+0x128>)
 80048ee:	441a      	add	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3304      	adds	r3, #4
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f7ff f80b 	bl	8003912 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004900:	4b23      	ldr	r3, [pc, #140]	; (8004990 <xTaskResumeAll+0x12c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	429a      	cmp	r2, r3
 8004908:	d302      	bcc.n	8004910 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800490a:	4b22      	ldr	r3, [pc, #136]	; (8004994 <xTaskResumeAll+0x130>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004910:	4b1c      	ldr	r3, [pc, #112]	; (8004984 <xTaskResumeAll+0x120>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1cb      	bne.n	80048b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800491e:	f000 fb55 	bl	8004fcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004922:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <xTaskResumeAll+0x134>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d010      	beq.n	8004950 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800492e:	f000 f845 	bl	80049bc <xTaskIncrementTick>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004938:	4b16      	ldr	r3, [pc, #88]	; (8004994 <xTaskResumeAll+0x130>)
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3b01      	subs	r3, #1
 8004942:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f1      	bne.n	800492e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800494a:	4b13      	ldr	r3, [pc, #76]	; (8004998 <xTaskResumeAll+0x134>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004950:	4b10      	ldr	r3, [pc, #64]	; (8004994 <xTaskResumeAll+0x130>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d009      	beq.n	800496c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004958:	2301      	movs	r3, #1
 800495a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800495c:	4b0f      	ldr	r3, [pc, #60]	; (800499c <xTaskResumeAll+0x138>)
 800495e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800496c:	f001 f866 	bl	8005a3c <vPortExitCritical>

	return xAlreadyYielded;
 8004970:	68bb      	ldr	r3, [r7, #8]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000e98 	.word	0x20000e98
 8004980:	20000e70 	.word	0x20000e70
 8004984:	20000e30 	.word	0x20000e30
 8004988:	20000e78 	.word	0x20000e78
 800498c:	200009a0 	.word	0x200009a0
 8004990:	2000099c 	.word	0x2000099c
 8004994:	20000e84 	.word	0x20000e84
 8004998:	20000e80 	.word	0x20000e80
 800499c:	e000ed04 	.word	0xe000ed04

080049a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80049a6:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <xTaskGetTickCount+0x18>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80049ac:	687b      	ldr	r3, [r7, #4]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr
 80049b8:	20000e74 	.word	0x20000e74

080049bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049c6:	4b51      	ldr	r3, [pc, #324]	; (8004b0c <xTaskIncrementTick+0x150>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f040 808e 	bne.w	8004aec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049d0:	4b4f      	ldr	r3, [pc, #316]	; (8004b10 <xTaskIncrementTick+0x154>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3301      	adds	r3, #1
 80049d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049d8:	4a4d      	ldr	r2, [pc, #308]	; (8004b10 <xTaskIncrementTick+0x154>)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d120      	bne.n	8004a26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80049e4:	4b4b      	ldr	r3, [pc, #300]	; (8004b14 <xTaskIncrementTick+0x158>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <xTaskIncrementTick+0x48>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	603b      	str	r3, [r7, #0]
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <xTaskIncrementTick+0x46>
 8004a04:	4b43      	ldr	r3, [pc, #268]	; (8004b14 <xTaskIncrementTick+0x158>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	4b43      	ldr	r3, [pc, #268]	; (8004b18 <xTaskIncrementTick+0x15c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a41      	ldr	r2, [pc, #260]	; (8004b14 <xTaskIncrementTick+0x158>)
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	4a41      	ldr	r2, [pc, #260]	; (8004b18 <xTaskIncrementTick+0x15c>)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	4b40      	ldr	r3, [pc, #256]	; (8004b1c <xTaskIncrementTick+0x160>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	4a3f      	ldr	r2, [pc, #252]	; (8004b1c <xTaskIncrementTick+0x160>)
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	f000 fad3 	bl	8004fcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a26:	4b3e      	ldr	r3, [pc, #248]	; (8004b20 <xTaskIncrementTick+0x164>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d34e      	bcc.n	8004ace <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a30:	4b38      	ldr	r3, [pc, #224]	; (8004b14 <xTaskIncrementTick+0x158>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <xTaskIncrementTick+0x82>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <xTaskIncrementTick+0x84>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d004      	beq.n	8004a4e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a44:	4b36      	ldr	r3, [pc, #216]	; (8004b20 <xTaskIncrementTick+0x164>)
 8004a46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a4a:	601a      	str	r2, [r3, #0]
					break;
 8004a4c:	e03f      	b.n	8004ace <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a4e:	4b31      	ldr	r3, [pc, #196]	; (8004b14 <xTaskIncrementTick+0x158>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d203      	bcs.n	8004a6e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a66:	4a2e      	ldr	r2, [pc, #184]	; (8004b20 <xTaskIncrementTick+0x164>)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6013      	str	r3, [r2, #0]
						break;
 8004a6c:	e02f      	b.n	8004ace <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	3304      	adds	r3, #4
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe ffa8 	bl	80039c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d004      	beq.n	8004a8a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	3318      	adds	r3, #24
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe ff9f 	bl	80039c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8e:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <xTaskIncrementTick+0x168>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d903      	bls.n	8004a9e <xTaskIncrementTick+0xe2>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	4a22      	ldr	r2, [pc, #136]	; (8004b24 <xTaskIncrementTick+0x168>)
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4a1f      	ldr	r2, [pc, #124]	; (8004b28 <xTaskIncrementTick+0x16c>)
 8004aac:	441a      	add	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	f7fe ff2c 	bl	8003912 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abe:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <xTaskIncrementTick+0x170>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d3b3      	bcc.n	8004a30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004acc:	e7b0      	b.n	8004a30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ace:	4b17      	ldr	r3, [pc, #92]	; (8004b2c <xTaskIncrementTick+0x170>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad4:	4914      	ldr	r1, [pc, #80]	; (8004b28 <xTaskIncrementTick+0x16c>)
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d907      	bls.n	8004af6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	e004      	b.n	8004af6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004aec:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <xTaskIncrementTick+0x174>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3301      	adds	r3, #1
 8004af2:	4a0f      	ldr	r2, [pc, #60]	; (8004b30 <xTaskIncrementTick+0x174>)
 8004af4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004af6:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <xTaskIncrementTick+0x178>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004afe:	2301      	movs	r3, #1
 8004b00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b02:	697b      	ldr	r3, [r7, #20]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20000e98 	.word	0x20000e98
 8004b10:	20000e74 	.word	0x20000e74
 8004b14:	20000e28 	.word	0x20000e28
 8004b18:	20000e2c 	.word	0x20000e2c
 8004b1c:	20000e88 	.word	0x20000e88
 8004b20:	20000e90 	.word	0x20000e90
 8004b24:	20000e78 	.word	0x20000e78
 8004b28:	200009a0 	.word	0x200009a0
 8004b2c:	2000099c 	.word	0x2000099c
 8004b30:	20000e80 	.word	0x20000e80
 8004b34:	20000e84 	.word	0x20000e84

08004b38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b3e:	4b27      	ldr	r3, [pc, #156]	; (8004bdc <vTaskSwitchContext+0xa4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b46:	4b26      	ldr	r3, [pc, #152]	; (8004be0 <vTaskSwitchContext+0xa8>)
 8004b48:	2201      	movs	r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b4c:	e041      	b.n	8004bd2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004b4e:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <vTaskSwitchContext+0xa8>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b54:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <vTaskSwitchContext+0xac>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	e010      	b.n	8004b7e <vTaskSwitchContext+0x46>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <vTaskSwitchContext+0x40>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	607b      	str	r3, [r7, #4]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <vTaskSwitchContext+0x3e>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	491a      	ldr	r1, [pc, #104]	; (8004be8 <vTaskSwitchContext+0xb0>)
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0e4      	beq.n	8004b5c <vTaskSwitchContext+0x24>
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4a12      	ldr	r2, [pc, #72]	; (8004be8 <vTaskSwitchContext+0xb0>)
 8004b9e:	4413      	add	r3, r2
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d104      	bne.n	8004bc2 <vTaskSwitchContext+0x8a>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	605a      	str	r2, [r3, #4]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4a08      	ldr	r2, [pc, #32]	; (8004bec <vTaskSwitchContext+0xb4>)
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	4a05      	ldr	r2, [pc, #20]	; (8004be4 <vTaskSwitchContext+0xac>)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6013      	str	r3, [r2, #0]
}
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	20000e98 	.word	0x20000e98
 8004be0:	20000e84 	.word	0x20000e84
 8004be4:	20000e78 	.word	0x20000e78
 8004be8:	200009a0 	.word	0x200009a0
 8004bec:	2000099c 	.word	0x2000099c

08004bf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	60fb      	str	r3, [r7, #12]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c16:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <vTaskPlaceOnEventList+0x44>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3318      	adds	r3, #24
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fe fe9a 	bl	8003958 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c24:	2101      	movs	r1, #1
 8004c26:	6838      	ldr	r0, [r7, #0]
 8004c28:	f000 fa80 	bl	800512c <prvAddCurrentTaskToDelayedList>
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	2000099c 	.word	0x2000099c

08004c38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10a      	bne.n	8004c60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	617b      	str	r3, [r7, #20]
}
 8004c5c:	bf00      	nop
 8004c5e:	e7fe      	b.n	8004c5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <vTaskPlaceOnEventListRestricted+0x54>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3318      	adds	r3, #24
 8004c66:	4619      	mov	r1, r3
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f7fe fe52 	bl	8003912 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	68b8      	ldr	r0, [r7, #8]
 8004c7e:	f000 fa55 	bl	800512c <prvAddCurrentTaskToDelayedList>
	}
 8004c82:	bf00      	nop
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	2000099c 	.word	0x2000099c

08004c90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10a      	bne.n	8004cbc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	60fb      	str	r3, [r7, #12]
}
 8004cb8:	bf00      	nop
 8004cba:	e7fe      	b.n	8004cba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	3318      	adds	r3, #24
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fe fe81 	bl	80039c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cc6:	4b1e      	ldr	r3, [pc, #120]	; (8004d40 <xTaskRemoveFromEventList+0xb0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d11d      	bne.n	8004d0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe fe78 	bl	80039c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cdc:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <xTaskRemoveFromEventList+0xb4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d903      	bls.n	8004cec <xTaskRemoveFromEventList+0x5c>
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	4a16      	ldr	r2, [pc, #88]	; (8004d44 <xTaskRemoveFromEventList+0xb4>)
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <xTaskRemoveFromEventList+0xb8>)
 8004cfa:	441a      	add	r2, r3
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f7fe fe05 	bl	8003912 <vListInsertEnd>
 8004d08:	e005      	b.n	8004d16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	3318      	adds	r3, #24
 8004d0e:	4619      	mov	r1, r3
 8004d10:	480e      	ldr	r0, [pc, #56]	; (8004d4c <xTaskRemoveFromEventList+0xbc>)
 8004d12:	f7fe fdfe 	bl	8003912 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <xTaskRemoveFromEventList+0xc0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d905      	bls.n	8004d30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <xTaskRemoveFromEventList+0xc4>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e001      	b.n	8004d34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004d34:	697b      	ldr	r3, [r7, #20]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000e98 	.word	0x20000e98
 8004d44:	20000e78 	.word	0x20000e78
 8004d48:	200009a0 	.word	0x200009a0
 8004d4c:	20000e30 	.word	0x20000e30
 8004d50:	2000099c 	.word	0x2000099c
 8004d54:	20000e84 	.word	0x20000e84

08004d58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <vTaskInternalSetTimeOutState+0x24>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <vTaskInternalSetTimeOutState+0x28>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	605a      	str	r2, [r3, #4]
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	20000e88 	.word	0x20000e88
 8004d80:	20000e74 	.word	0x20000e74

08004d84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	613b      	str	r3, [r7, #16]
}
 8004da6:	bf00      	nop
 8004da8:	e7fe      	b.n	8004da8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	60fb      	str	r3, [r7, #12]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004dc6:	f000 fe09 	bl	80059dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004dca:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <xTaskCheckForTimeOut+0xbc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de2:	d102      	bne.n	8004dea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61fb      	str	r3, [r7, #28]
 8004de8:	e023      	b.n	8004e32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <xTaskCheckForTimeOut+0xc0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d007      	beq.n	8004e06 <xTaskCheckForTimeOut+0x82>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d302      	bcc.n	8004e06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e00:	2301      	movs	r3, #1
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	e015      	b.n	8004e32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d20b      	bcs.n	8004e28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	1ad2      	subs	r2, r2, r3
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff ff9b 	bl	8004d58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	61fb      	str	r3, [r7, #28]
 8004e26:	e004      	b.n	8004e32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e32:	f000 fe03 	bl	8005a3c <vPortExitCritical>

	return xReturn;
 8004e36:	69fb      	ldr	r3, [r7, #28]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3720      	adds	r7, #32
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000e74 	.word	0x20000e74
 8004e44:	20000e88 	.word	0x20000e88

08004e48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e4c:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <vTaskMissedYield+0x14>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
}
 8004e52:	bf00      	nop
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000e84 	.word	0x20000e84

08004e60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e68:	f000 f852 	bl	8004f10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <prvIdleTask+0x28>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d9f9      	bls.n	8004e68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e74:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <prvIdleTask+0x2c>)
 8004e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e84:	e7f0      	b.n	8004e68 <prvIdleTask+0x8>
 8004e86:	bf00      	nop
 8004e88:	200009a0 	.word	0x200009a0
 8004e8c:	e000ed04 	.word	0xe000ed04

08004e90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e96:	2300      	movs	r3, #0
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	e00c      	b.n	8004eb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4a12      	ldr	r2, [pc, #72]	; (8004ef0 <prvInitialiseTaskLists+0x60>)
 8004ea8:	4413      	add	r3, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fe fd06 	bl	80038bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	607b      	str	r3, [r7, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b37      	cmp	r3, #55	; 0x37
 8004eba:	d9ef      	bls.n	8004e9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ebc:	480d      	ldr	r0, [pc, #52]	; (8004ef4 <prvInitialiseTaskLists+0x64>)
 8004ebe:	f7fe fcfd 	bl	80038bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ec2:	480d      	ldr	r0, [pc, #52]	; (8004ef8 <prvInitialiseTaskLists+0x68>)
 8004ec4:	f7fe fcfa 	bl	80038bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ec8:	480c      	ldr	r0, [pc, #48]	; (8004efc <prvInitialiseTaskLists+0x6c>)
 8004eca:	f7fe fcf7 	bl	80038bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ece:	480c      	ldr	r0, [pc, #48]	; (8004f00 <prvInitialiseTaskLists+0x70>)
 8004ed0:	f7fe fcf4 	bl	80038bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ed4:	480b      	ldr	r0, [pc, #44]	; (8004f04 <prvInitialiseTaskLists+0x74>)
 8004ed6:	f7fe fcf1 	bl	80038bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004eda:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <prvInitialiseTaskLists+0x78>)
 8004edc:	4a05      	ldr	r2, [pc, #20]	; (8004ef4 <prvInitialiseTaskLists+0x64>)
 8004ede:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <prvInitialiseTaskLists+0x7c>)
 8004ee2:	4a05      	ldr	r2, [pc, #20]	; (8004ef8 <prvInitialiseTaskLists+0x68>)
 8004ee4:	601a      	str	r2, [r3, #0]
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	200009a0 	.word	0x200009a0
 8004ef4:	20000e00 	.word	0x20000e00
 8004ef8:	20000e14 	.word	0x20000e14
 8004efc:	20000e30 	.word	0x20000e30
 8004f00:	20000e44 	.word	0x20000e44
 8004f04:	20000e5c 	.word	0x20000e5c
 8004f08:	20000e28 	.word	0x20000e28
 8004f0c:	20000e2c 	.word	0x20000e2c

08004f10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f16:	e019      	b.n	8004f4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f18:	f000 fd60 	bl	80059dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004f1c:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <prvCheckTasksWaitingTermination+0x50>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fe fd4d 	bl	80039c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <prvCheckTasksWaitingTermination+0x54>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	4a0b      	ldr	r2, [pc, #44]	; (8004f64 <prvCheckTasksWaitingTermination+0x54>)
 8004f36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <prvCheckTasksWaitingTermination+0x58>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <prvCheckTasksWaitingTermination+0x58>)
 8004f40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f42:	f000 fd7b 	bl	8005a3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f810 	bl	8004f6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f4c:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <prvCheckTasksWaitingTermination+0x58>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e1      	bne.n	8004f18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20000e44 	.word	0x20000e44
 8004f64:	20000e70 	.word	0x20000e70
 8004f68:	20000e58 	.word	0x20000e58

08004f6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d108      	bne.n	8004f90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 feee 	bl	8005d64 <vPortFree>
				vPortFree( pxTCB );
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 feeb 	bl	8005d64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f8e:	e018      	b.n	8004fc2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d103      	bne.n	8004fa2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fee2 	bl	8005d64 <vPortFree>
	}
 8004fa0:	e00f      	b.n	8004fc2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d00a      	beq.n	8004fc2 <prvDeleteTCB+0x56>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60fb      	str	r3, [r7, #12]
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <prvDeleteTCB+0x54>
	}
 8004fc2:	bf00      	nop
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fd2:	4b0e      	ldr	r3, [pc, #56]	; (800500c <prvResetNextTaskUnblockTime+0x40>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <prvResetNextTaskUnblockTime+0x14>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <prvResetNextTaskUnblockTime+0x16>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d004      	beq.n	8004ff0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <prvResetNextTaskUnblockTime+0x44>)
 8004fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fee:	e008      	b.n	8005002 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ff0:	4b06      	ldr	r3, [pc, #24]	; (800500c <prvResetNextTaskUnblockTime+0x40>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4a04      	ldr	r2, [pc, #16]	; (8005010 <prvResetNextTaskUnblockTime+0x44>)
 8005000:	6013      	str	r3, [r2, #0]
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr
 800500c:	20000e28 	.word	0x20000e28
 8005010:	20000e90 	.word	0x20000e90

08005014 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800501a:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <xTaskGetSchedulerState+0x34>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005022:	2301      	movs	r3, #1
 8005024:	607b      	str	r3, [r7, #4]
 8005026:	e008      	b.n	800503a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005028:	4b08      	ldr	r3, [pc, #32]	; (800504c <xTaskGetSchedulerState+0x38>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005030:	2302      	movs	r3, #2
 8005032:	607b      	str	r3, [r7, #4]
 8005034:	e001      	b.n	800503a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005036:	2300      	movs	r3, #0
 8005038:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800503a:	687b      	ldr	r3, [r7, #4]
	}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000e7c 	.word	0x20000e7c
 800504c:	20000e98 	.word	0x20000e98

08005050 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d056      	beq.n	8005114 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005066:	4b2e      	ldr	r3, [pc, #184]	; (8005120 <xTaskPriorityDisinherit+0xd0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	429a      	cmp	r2, r3
 800506e:	d00a      	beq.n	8005086 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	60fb      	str	r3, [r7, #12]
}
 8005082:	bf00      	nop
 8005084:	e7fe      	b.n	8005084 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10a      	bne.n	80050a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	60bb      	str	r3, [r7, #8]
}
 80050a0:	bf00      	nop
 80050a2:	e7fe      	b.n	80050a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a8:	1e5a      	subs	r2, r3, #1
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d02c      	beq.n	8005114 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d128      	bne.n	8005114 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3304      	adds	r3, #4
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fe fc7e 	bl	80039c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e4:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <xTaskPriorityDisinherit+0xd4>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d903      	bls.n	80050f4 <xTaskPriorityDisinherit+0xa4>
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	4a0c      	ldr	r2, [pc, #48]	; (8005124 <xTaskPriorityDisinherit+0xd4>)
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4a09      	ldr	r2, [pc, #36]	; (8005128 <xTaskPriorityDisinherit+0xd8>)
 8005102:	441a      	add	r2, r3
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	3304      	adds	r3, #4
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f7fe fc01 	bl	8003912 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005110:	2301      	movs	r3, #1
 8005112:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005114:	697b      	ldr	r3, [r7, #20]
	}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	2000099c 	.word	0x2000099c
 8005124:	20000e78 	.word	0x20000e78
 8005128:	200009a0 	.word	0x200009a0

0800512c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005136:	4b21      	ldr	r3, [pc, #132]	; (80051bc <prvAddCurrentTaskToDelayedList+0x90>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800513c:	4b20      	ldr	r3, [pc, #128]	; (80051c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3304      	adds	r3, #4
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe fc40 	bl	80039c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800514e:	d10a      	bne.n	8005166 <prvAddCurrentTaskToDelayedList+0x3a>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005156:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3304      	adds	r3, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4819      	ldr	r0, [pc, #100]	; (80051c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005160:	f7fe fbd7 	bl	8003912 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005164:	e026      	b.n	80051b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4413      	add	r3, r2
 800516c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800516e:	4b14      	ldr	r3, [pc, #80]	; (80051c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	429a      	cmp	r2, r3
 800517c:	d209      	bcs.n	8005192 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800517e:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f7fe fbe4 	bl	8003958 <vListInsert>
}
 8005190:	e010      	b.n	80051b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005192:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3304      	adds	r3, #4
 800519c:	4619      	mov	r1, r3
 800519e:	4610      	mov	r0, r2
 80051a0:	f7fe fbda 	bl	8003958 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051a4:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d202      	bcs.n	80051b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80051ae:	4a08      	ldr	r2, [pc, #32]	; (80051d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6013      	str	r3, [r2, #0]
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	20000e74 	.word	0x20000e74
 80051c0:	2000099c 	.word	0x2000099c
 80051c4:	20000e5c 	.word	0x20000e5c
 80051c8:	20000e2c 	.word	0x20000e2c
 80051cc:	20000e28 	.word	0x20000e28
 80051d0:	20000e90 	.word	0x20000e90

080051d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051de:	f000 facb 	bl	8005778 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051e2:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <xTimerCreateTimerTask+0x80>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d021      	beq.n	800522e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051f2:	1d3a      	adds	r2, r7, #4
 80051f4:	f107 0108 	add.w	r1, r7, #8
 80051f8:	f107 030c 	add.w	r3, r7, #12
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fe fb43 	bl	8003888 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	9202      	str	r2, [sp, #8]
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	2302      	movs	r3, #2
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	2300      	movs	r3, #0
 8005212:	460a      	mov	r2, r1
 8005214:	4910      	ldr	r1, [pc, #64]	; (8005258 <xTimerCreateTimerTask+0x84>)
 8005216:	4811      	ldr	r0, [pc, #68]	; (800525c <xTimerCreateTimerTask+0x88>)
 8005218:	f7ff f8e4 	bl	80043e4 <xTaskCreateStatic>
 800521c:	4603      	mov	r3, r0
 800521e:	4a10      	ldr	r2, [pc, #64]	; (8005260 <xTimerCreateTimerTask+0x8c>)
 8005220:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005222:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <xTimerCreateTimerTask+0x8c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800522a:	2301      	movs	r3, #1
 800522c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10a      	bne.n	800524a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	613b      	str	r3, [r7, #16]
}
 8005246:	bf00      	nop
 8005248:	e7fe      	b.n	8005248 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800524a:	697b      	ldr	r3, [r7, #20]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20000ecc 	.word	0x20000ecc
 8005258:	080061cc 	.word	0x080061cc
 800525c:	08005381 	.word	0x08005381
 8005260:	20000ed0 	.word	0x20000ed0

08005264 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	; 0x28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005272:	2300      	movs	r3, #0
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <xTimerGenericCommand+0x2e>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	623b      	str	r3, [r7, #32]
}
 800528e:	bf00      	nop
 8005290:	e7fe      	b.n	8005290 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005292:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <xTimerGenericCommand+0x98>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d02a      	beq.n	80052f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b05      	cmp	r3, #5
 80052aa:	dc18      	bgt.n	80052de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052ac:	f7ff feb2 	bl	8005014 <xTaskGetSchedulerState>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d109      	bne.n	80052ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052b6:	4b11      	ldr	r3, [pc, #68]	; (80052fc <xTimerGenericCommand+0x98>)
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	f107 0110 	add.w	r1, r7, #16
 80052be:	2300      	movs	r3, #0
 80052c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c2:	f7fe fcad 	bl	8003c20 <xQueueGenericSend>
 80052c6:	6278      	str	r0, [r7, #36]	; 0x24
 80052c8:	e012      	b.n	80052f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052ca:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <xTimerGenericCommand+0x98>)
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	f107 0110 	add.w	r1, r7, #16
 80052d2:	2300      	movs	r3, #0
 80052d4:	2200      	movs	r2, #0
 80052d6:	f7fe fca3 	bl	8003c20 <xQueueGenericSend>
 80052da:	6278      	str	r0, [r7, #36]	; 0x24
 80052dc:	e008      	b.n	80052f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052de:	4b07      	ldr	r3, [pc, #28]	; (80052fc <xTimerGenericCommand+0x98>)
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	f107 0110 	add.w	r1, r7, #16
 80052e6:	2300      	movs	r3, #0
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	f7fe fd97 	bl	8003e1c <xQueueGenericSendFromISR>
 80052ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3728      	adds	r7, #40	; 0x28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000ecc 	.word	0x20000ecc

08005300 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af02      	add	r7, sp, #8
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800530a:	4b1c      	ldr	r3, [pc, #112]	; (800537c <prvProcessExpiredTimer+0x7c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	3304      	adds	r3, #4
 8005318:	4618      	mov	r0, r3
 800531a:	f7fe fb55 	bl	80039c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d122      	bne.n	800536c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	18d1      	adds	r1, r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	6978      	ldr	r0, [r7, #20]
 8005334:	f000 f8c8 	bl	80054c8 <prvInsertTimerInActiveList>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d016      	beq.n	800536c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800533e:	2300      	movs	r3, #0
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	2300      	movs	r3, #0
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	2100      	movs	r1, #0
 8005348:	6978      	ldr	r0, [r7, #20]
 800534a:	f7ff ff8b 	bl	8005264 <xTimerGenericCommand>
 800534e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	60fb      	str	r3, [r7, #12]
}
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	6978      	ldr	r0, [r7, #20]
 8005372:	4798      	blx	r3
}
 8005374:	bf00      	nop
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	20000ec4 	.word	0x20000ec4

08005380 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005388:	f107 0308 	add.w	r3, r7, #8
 800538c:	4618      	mov	r0, r3
 800538e:	f000 f857 	bl	8005440 <prvGetNextExpireTime>
 8005392:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4619      	mov	r1, r3
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f803 	bl	80053a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800539e:	f000 f8d5 	bl	800554c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053a2:	e7f1      	b.n	8005388 <prvTimerTask+0x8>

080053a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80053ae:	f7ff fa4b 	bl	8004848 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053b2:	f107 0308 	add.w	r3, r7, #8
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 f866 	bl	8005488 <prvSampleTimeNow>
 80053bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d130      	bne.n	8005426 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <prvProcessTimerOrBlockTask+0x3c>
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d806      	bhi.n	80053e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053d2:	f7ff fa47 	bl	8004864 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff ff91 	bl	8005300 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053de:	e024      	b.n	800542a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d008      	beq.n	80053f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053e6:	4b13      	ldr	r3, [pc, #76]	; (8005434 <prvProcessTimerOrBlockTask+0x90>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	bf0c      	ite	eq
 80053f0:	2301      	moveq	r3, #1
 80053f2:	2300      	movne	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053f8:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <prvProcessTimerOrBlockTask+0x94>)
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	4619      	mov	r1, r3
 8005406:	f7fe ffb9 	bl	800437c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800540a:	f7ff fa2b 	bl	8004864 <xTaskResumeAll>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005414:	4b09      	ldr	r3, [pc, #36]	; (800543c <prvProcessTimerOrBlockTask+0x98>)
 8005416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	f3bf 8f6f 	isb	sy
}
 8005424:	e001      	b.n	800542a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005426:	f7ff fa1d 	bl	8004864 <xTaskResumeAll>
}
 800542a:	bf00      	nop
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000ec8 	.word	0x20000ec8
 8005438:	20000ecc 	.word	0x20000ecc
 800543c:	e000ed04 	.word	0xe000ed04

08005440 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005448:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <prvGetNextExpireTime+0x44>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	bf0c      	ite	eq
 8005452:	2301      	moveq	r3, #1
 8005454:	2300      	movne	r3, #0
 8005456:	b2db      	uxtb	r3, r3
 8005458:	461a      	mov	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d105      	bne.n	8005472 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005466:	4b07      	ldr	r3, [pc, #28]	; (8005484 <prvGetNextExpireTime+0x44>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e001      	b.n	8005476 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005476:	68fb      	ldr	r3, [r7, #12]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	20000ec4 	.word	0x20000ec4

08005488 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005490:	f7ff fa86 	bl	80049a0 <xTaskGetTickCount>
 8005494:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005496:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <prvSampleTimeNow+0x3c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	429a      	cmp	r2, r3
 800549e:	d205      	bcs.n	80054ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80054a0:	f000 f908 	bl	80056b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e002      	b.n	80054b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80054b2:	4a04      	ldr	r2, [pc, #16]	; (80054c4 <prvSampleTimeNow+0x3c>)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054b8:	68fb      	ldr	r3, [r7, #12]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000ed4 	.word	0x20000ed4

080054c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d812      	bhi.n	8005514 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	1ad2      	subs	r2, r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d302      	bcc.n	8005502 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80054fc:	2301      	movs	r3, #1
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e01b      	b.n	800553a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005502:	4b10      	ldr	r3, [pc, #64]	; (8005544 <prvInsertTimerInActiveList+0x7c>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3304      	adds	r3, #4
 800550a:	4619      	mov	r1, r3
 800550c:	4610      	mov	r0, r2
 800550e:	f7fe fa23 	bl	8003958 <vListInsert>
 8005512:	e012      	b.n	800553a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	429a      	cmp	r2, r3
 800551a:	d206      	bcs.n	800552a <prvInsertTimerInActiveList+0x62>
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d302      	bcc.n	800552a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005524:	2301      	movs	r3, #1
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e007      	b.n	800553a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800552a:	4b07      	ldr	r3, [pc, #28]	; (8005548 <prvInsertTimerInActiveList+0x80>)
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3304      	adds	r3, #4
 8005532:	4619      	mov	r1, r3
 8005534:	4610      	mov	r0, r2
 8005536:	f7fe fa0f 	bl	8003958 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800553a:	697b      	ldr	r3, [r7, #20]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20000ec8 	.word	0x20000ec8
 8005548:	20000ec4 	.word	0x20000ec4

0800554c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08e      	sub	sp, #56	; 0x38
 8005550:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005552:	e09d      	b.n	8005690 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	da18      	bge.n	800558c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800555a:	1d3b      	adds	r3, r7, #4
 800555c:	3304      	adds	r3, #4
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	61fb      	str	r3, [r7, #28]
}
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005582:	6850      	ldr	r0, [r2, #4]
 8005584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005586:	6892      	ldr	r2, [r2, #8]
 8005588:	4611      	mov	r1, r2
 800558a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	db7d      	blt.n	800568e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	3304      	adds	r3, #4
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe fa10 	bl	80039c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055a8:	463b      	mov	r3, r7
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff ff6c 	bl	8005488 <prvSampleTimeNow>
 80055b0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b09      	cmp	r3, #9
 80055b6:	d86b      	bhi.n	8005690 <prvProcessReceivedCommands+0x144>
 80055b8:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <prvProcessReceivedCommands+0x74>)
 80055ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055be:	bf00      	nop
 80055c0:	080055e9 	.word	0x080055e9
 80055c4:	080055e9 	.word	0x080055e9
 80055c8:	080055e9 	.word	0x080055e9
 80055cc:	08005691 	.word	0x08005691
 80055d0:	08005645 	.word	0x08005645
 80055d4:	0800567d 	.word	0x0800567d
 80055d8:	080055e9 	.word	0x080055e9
 80055dc:	080055e9 	.word	0x080055e9
 80055e0:	08005691 	.word	0x08005691
 80055e4:	08005645 	.word	0x08005645
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	18d1      	adds	r1, r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f6:	f7ff ff67 	bl	80054c8 <prvInsertTimerInActiveList>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d047      	beq.n	8005690 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005606:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d13f      	bne.n	8005690 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	441a      	add	r2, r3
 8005618:	2300      	movs	r3, #0
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	2300      	movs	r3, #0
 800561e:	2100      	movs	r1, #0
 8005620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005622:	f7ff fe1f 	bl	8005264 <xTimerGenericCommand>
 8005626:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d130      	bne.n	8005690 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	61bb      	str	r3, [r7, #24]
}
 8005640:	bf00      	nop
 8005642:	e7fe      	b.n	8005642 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	617b      	str	r3, [r7, #20]
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	699a      	ldr	r2, [r3, #24]
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	18d1      	adds	r1, r2, r3
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005676:	f7ff ff27 	bl	80054c8 <prvInsertTimerInActiveList>
					break;
 800567a:	e009      	b.n	8005690 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005682:	2b00      	cmp	r3, #0
 8005684:	d104      	bne.n	8005690 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005688:	f000 fb6c 	bl	8005d64 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800568c:	e000      	b.n	8005690 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800568e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <prvProcessReceivedCommands+0x164>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	1d39      	adds	r1, r7, #4
 8005696:	2200      	movs	r2, #0
 8005698:	4618      	mov	r0, r3
 800569a:	f7fe fc57 	bl	8003f4c <xQueueReceive>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f47f af57 	bne.w	8005554 <prvProcessReceivedCommands+0x8>
	}
}
 80056a6:	bf00      	nop
 80056a8:	bf00      	nop
 80056aa:	3730      	adds	r7, #48	; 0x30
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20000ecc 	.word	0x20000ecc

080056b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056ba:	e045      	b.n	8005748 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056bc:	4b2c      	ldr	r3, [pc, #176]	; (8005770 <prvSwitchTimerLists+0xbc>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056c6:	4b2a      	ldr	r3, [pc, #168]	; (8005770 <prvSwitchTimerLists+0xbc>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3304      	adds	r3, #4
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe f977 	bl	80039c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d12e      	bne.n	8005748 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4413      	add	r3, r2
 80056f2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d90e      	bls.n	800571a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005708:	4b19      	ldr	r3, [pc, #100]	; (8005770 <prvSwitchTimerLists+0xbc>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3304      	adds	r3, #4
 8005710:	4619      	mov	r1, r3
 8005712:	4610      	mov	r0, r2
 8005714:	f7fe f920 	bl	8003958 <vListInsert>
 8005718:	e016      	b.n	8005748 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800571a:	2300      	movs	r3, #0
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	2300      	movs	r3, #0
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	2100      	movs	r1, #0
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7ff fd9d 	bl	8005264 <xTimerGenericCommand>
 800572a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	603b      	str	r3, [r7, #0]
}
 8005744:	bf00      	nop
 8005746:	e7fe      	b.n	8005746 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005748:	4b09      	ldr	r3, [pc, #36]	; (8005770 <prvSwitchTimerLists+0xbc>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1b4      	bne.n	80056bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005752:	4b07      	ldr	r3, [pc, #28]	; (8005770 <prvSwitchTimerLists+0xbc>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <prvSwitchTimerLists+0xc0>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a04      	ldr	r2, [pc, #16]	; (8005770 <prvSwitchTimerLists+0xbc>)
 800575e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005760:	4a04      	ldr	r2, [pc, #16]	; (8005774 <prvSwitchTimerLists+0xc0>)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	6013      	str	r3, [r2, #0]
}
 8005766:	bf00      	nop
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20000ec4 	.word	0x20000ec4
 8005774:	20000ec8 	.word	0x20000ec8

08005778 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800577e:	f000 f92d 	bl	80059dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005782:	4b15      	ldr	r3, [pc, #84]	; (80057d8 <prvCheckForValidListAndQueue+0x60>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d120      	bne.n	80057cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800578a:	4814      	ldr	r0, [pc, #80]	; (80057dc <prvCheckForValidListAndQueue+0x64>)
 800578c:	f7fe f896 	bl	80038bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005790:	4813      	ldr	r0, [pc, #76]	; (80057e0 <prvCheckForValidListAndQueue+0x68>)
 8005792:	f7fe f893 	bl	80038bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005796:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <prvCheckForValidListAndQueue+0x6c>)
 8005798:	4a10      	ldr	r2, [pc, #64]	; (80057dc <prvCheckForValidListAndQueue+0x64>)
 800579a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800579c:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <prvCheckForValidListAndQueue+0x70>)
 800579e:	4a10      	ldr	r2, [pc, #64]	; (80057e0 <prvCheckForValidListAndQueue+0x68>)
 80057a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80057a2:	2300      	movs	r3, #0
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	4b11      	ldr	r3, [pc, #68]	; (80057ec <prvCheckForValidListAndQueue+0x74>)
 80057a8:	4a11      	ldr	r2, [pc, #68]	; (80057f0 <prvCheckForValidListAndQueue+0x78>)
 80057aa:	2110      	movs	r1, #16
 80057ac:	200a      	movs	r0, #10
 80057ae:	f7fe f99d 	bl	8003aec <xQueueGenericCreateStatic>
 80057b2:	4603      	mov	r3, r0
 80057b4:	4a08      	ldr	r2, [pc, #32]	; (80057d8 <prvCheckForValidListAndQueue+0x60>)
 80057b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057b8:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <prvCheckForValidListAndQueue+0x60>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <prvCheckForValidListAndQueue+0x60>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	490b      	ldr	r1, [pc, #44]	; (80057f4 <prvCheckForValidListAndQueue+0x7c>)
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fdb0 	bl	800432c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057cc:	f000 f936 	bl	8005a3c <vPortExitCritical>
}
 80057d0:	bf00      	nop
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000ecc 	.word	0x20000ecc
 80057dc:	20000e9c 	.word	0x20000e9c
 80057e0:	20000eb0 	.word	0x20000eb0
 80057e4:	20000ec4 	.word	0x20000ec4
 80057e8:	20000ec8 	.word	0x20000ec8
 80057ec:	20000f78 	.word	0x20000f78
 80057f0:	20000ed8 	.word	0x20000ed8
 80057f4:	080061d4 	.word	0x080061d4

080057f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3b04      	subs	r3, #4
 8005808:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3b04      	subs	r3, #4
 8005816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f023 0201 	bic.w	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	3b04      	subs	r3, #4
 8005826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005828:	4a08      	ldr	r2, [pc, #32]	; (800584c <pxPortInitialiseStack+0x54>)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3b14      	subs	r3, #20
 8005832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3b20      	subs	r3, #32
 800583e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005840:	68fb      	ldr	r3, [r7, #12]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr
 800584c:	08005851 	.word	0x08005851

08005850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005856:	2300      	movs	r3, #0
 8005858:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800585a:	4b12      	ldr	r3, [pc, #72]	; (80058a4 <prvTaskExitError+0x54>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005862:	d00a      	beq.n	800587a <prvTaskExitError+0x2a>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	60fb      	str	r3, [r7, #12]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <prvTaskExitError+0x28>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	60bb      	str	r3, [r7, #8]
}
 800588c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800588e:	bf00      	nop
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0fc      	beq.n	8005890 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005896:	bf00      	nop
 8005898:	bf00      	nop
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	bc80      	pop	{r7}
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	20000010 	.word	0x20000010
	...

080058b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <pxCurrentTCBConst2>)
 80058b2:	6819      	ldr	r1, [r3, #0]
 80058b4:	6808      	ldr	r0, [r1, #0]
 80058b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80058ba:	f380 8809 	msr	PSP, r0
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8811 	msr	BASEPRI, r0
 80058ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80058ce:	4770      	bx	lr

080058d0 <pxCurrentTCBConst2>:
 80058d0:	2000099c 	.word	0x2000099c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop

080058d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80058d8:	4806      	ldr	r0, [pc, #24]	; (80058f4 <prvPortStartFirstTask+0x1c>)
 80058da:	6800      	ldr	r0, [r0, #0]
 80058dc:	6800      	ldr	r0, [r0, #0]
 80058de:	f380 8808 	msr	MSP, r0
 80058e2:	b662      	cpsie	i
 80058e4:	b661      	cpsie	f
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	df00      	svc	0
 80058f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058f2:	bf00      	nop
 80058f4:	e000ed08 	.word	0xe000ed08

080058f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058fe:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <xPortStartScheduler+0xd0>)
 8005900:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	22ff      	movs	r2, #255	; 0xff
 800590e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005920:	b2da      	uxtb	r2, r3
 8005922:	4b2a      	ldr	r3, [pc, #168]	; (80059cc <xPortStartScheduler+0xd4>)
 8005924:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005926:	4b2a      	ldr	r3, [pc, #168]	; (80059d0 <xPortStartScheduler+0xd8>)
 8005928:	2207      	movs	r2, #7
 800592a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800592c:	e009      	b.n	8005942 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800592e:	4b28      	ldr	r3, [pc, #160]	; (80059d0 <xPortStartScheduler+0xd8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3b01      	subs	r3, #1
 8005934:	4a26      	ldr	r2, [pc, #152]	; (80059d0 <xPortStartScheduler+0xd8>)
 8005936:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	b2db      	uxtb	r3, r3
 8005940:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005942:	78fb      	ldrb	r3, [r7, #3]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594a:	2b80      	cmp	r3, #128	; 0x80
 800594c:	d0ef      	beq.n	800592e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800594e:	4b20      	ldr	r3, [pc, #128]	; (80059d0 <xPortStartScheduler+0xd8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f1c3 0307 	rsb	r3, r3, #7
 8005956:	2b04      	cmp	r3, #4
 8005958:	d00a      	beq.n	8005970 <xPortStartScheduler+0x78>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	60bb      	str	r3, [r7, #8]
}
 800596c:	bf00      	nop
 800596e:	e7fe      	b.n	800596e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005970:	4b17      	ldr	r3, [pc, #92]	; (80059d0 <xPortStartScheduler+0xd8>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	4a16      	ldr	r2, [pc, #88]	; (80059d0 <xPortStartScheduler+0xd8>)
 8005978:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800597a:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <xPortStartScheduler+0xd8>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005982:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <xPortStartScheduler+0xd8>)
 8005984:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	b2da      	uxtb	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800598e:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <xPortStartScheduler+0xdc>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a10      	ldr	r2, [pc, #64]	; (80059d4 <xPortStartScheduler+0xdc>)
 8005994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005998:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800599a:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <xPortStartScheduler+0xdc>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a0d      	ldr	r2, [pc, #52]	; (80059d4 <xPortStartScheduler+0xdc>)
 80059a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059a6:	f000 f8b9 	bl	8005b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <xPortStartScheduler+0xe0>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059b0:	f7ff ff92 	bl	80058d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059b4:	f7ff f8c0 	bl	8004b38 <vTaskSwitchContext>
	prvTaskExitError();
 80059b8:	f7ff ff4a 	bl	8005850 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	e000e400 	.word	0xe000e400
 80059cc:	20000fc8 	.word	0x20000fc8
 80059d0:	20000fcc 	.word	0x20000fcc
 80059d4:	e000ed20 	.word	0xe000ed20
 80059d8:	20000010 	.word	0x20000010

080059dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	607b      	str	r3, [r7, #4]
}
 80059f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059f6:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <vPortEnterCritical+0x58>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3301      	adds	r3, #1
 80059fc:	4a0d      	ldr	r2, [pc, #52]	; (8005a34 <vPortEnterCritical+0x58>)
 80059fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a00:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <vPortEnterCritical+0x58>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d10f      	bne.n	8005a28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a08:	4b0b      	ldr	r3, [pc, #44]	; (8005a38 <vPortEnterCritical+0x5c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	603b      	str	r3, [r7, #0]
}
 8005a24:	bf00      	nop
 8005a26:	e7fe      	b.n	8005a26 <vPortEnterCritical+0x4a>
	}
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20000010 	.word	0x20000010
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a42:	4b11      	ldr	r3, [pc, #68]	; (8005a88 <vPortExitCritical+0x4c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <vPortExitCritical+0x24>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	607b      	str	r3, [r7, #4]
}
 8005a5c:	bf00      	nop
 8005a5e:	e7fe      	b.n	8005a5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a60:	4b09      	ldr	r3, [pc, #36]	; (8005a88 <vPortExitCritical+0x4c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	4a08      	ldr	r2, [pc, #32]	; (8005a88 <vPortExitCritical+0x4c>)
 8005a68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a6a:	4b07      	ldr	r3, [pc, #28]	; (8005a88 <vPortExitCritical+0x4c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d105      	bne.n	8005a7e <vPortExitCritical+0x42>
 8005a72:	2300      	movs	r3, #0
 8005a74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	f383 8811 	msr	BASEPRI, r3
}
 8005a7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr
 8005a88:	20000010 	.word	0x20000010
 8005a8c:	00000000 	.word	0x00000000

08005a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a90:	f3ef 8009 	mrs	r0, PSP
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <pxCurrentTCBConst>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005aa0:	6010      	str	r0, [r2, #0]
 8005aa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005aa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005aaa:	f380 8811 	msr	BASEPRI, r0
 8005aae:	f7ff f843 	bl	8004b38 <vTaskSwitchContext>
 8005ab2:	f04f 0000 	mov.w	r0, #0
 8005ab6:	f380 8811 	msr	BASEPRI, r0
 8005aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005abe:	6819      	ldr	r1, [r3, #0]
 8005ac0:	6808      	ldr	r0, [r1, #0]
 8005ac2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ac6:	f380 8809 	msr	PSP, r0
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	4770      	bx	lr

08005ad0 <pxCurrentTCBConst>:
 8005ad0:	2000099c 	.word	0x2000099c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop

08005ad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	607b      	str	r3, [r7, #4]
}
 8005af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005af2:	f7fe ff63 	bl	80049bc <xTaskIncrementTick>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <xPortSysTickHandler+0x40>)
 8005afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	2300      	movs	r3, #0
 8005b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	f383 8811 	msr	BASEPRI, r3
}
 8005b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b10:	bf00      	nop
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	e000ed04 	.word	0xe000ed04

08005b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <vPortSetupTimerInterrupt+0x30>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b26:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <vPortSetupTimerInterrupt+0x34>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b2c:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <vPortSetupTimerInterrupt+0x38>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a09      	ldr	r2, [pc, #36]	; (8005b58 <vPortSetupTimerInterrupt+0x3c>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	099b      	lsrs	r3, r3, #6
 8005b38:	4a08      	ldr	r2, [pc, #32]	; (8005b5c <vPortSetupTimerInterrupt+0x40>)
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b3e:	4b03      	ldr	r3, [pc, #12]	; (8005b4c <vPortSetupTimerInterrupt+0x30>)
 8005b40:	2207      	movs	r2, #7
 8005b42:	601a      	str	r2, [r3, #0]
}
 8005b44:	bf00      	nop
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr
 8005b4c:	e000e010 	.word	0xe000e010
 8005b50:	e000e018 	.word	0xe000e018
 8005b54:	20000004 	.word	0x20000004
 8005b58:	10624dd3 	.word	0x10624dd3
 8005b5c:	e000e014 	.word	0xe000e014

08005b60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b66:	f3ef 8305 	mrs	r3, IPSR
 8005b6a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b0f      	cmp	r3, #15
 8005b70:	d914      	bls.n	8005b9c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b72:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <vPortValidateInterruptPriority+0x6c>)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b7c:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <vPortValidateInterruptPriority+0x70>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	7afa      	ldrb	r2, [r7, #11]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d20a      	bcs.n	8005b9c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	607b      	str	r3, [r7, #4]
}
 8005b98:	bf00      	nop
 8005b9a:	e7fe      	b.n	8005b9a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <vPortValidateInterruptPriority+0x74>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ba4:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <vPortValidateInterruptPriority+0x78>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d90a      	bls.n	8005bc2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	603b      	str	r3, [r7, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	e7fe      	b.n	8005bc0 <vPortValidateInterruptPriority+0x60>
	}
 8005bc2:	bf00      	nop
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr
 8005bcc:	e000e3f0 	.word	0xe000e3f0
 8005bd0:	20000fc8 	.word	0x20000fc8
 8005bd4:	e000ed0c 	.word	0xe000ed0c
 8005bd8:	20000fcc 	.word	0x20000fcc

08005bdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	; 0x28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005be8:	f7fe fe2e 	bl	8004848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005bec:	4b58      	ldr	r3, [pc, #352]	; (8005d50 <pvPortMalloc+0x174>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005bf4:	f000 f910 	bl	8005e18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bf8:	4b56      	ldr	r3, [pc, #344]	; (8005d54 <pvPortMalloc+0x178>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f040 808e 	bne.w	8005d22 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01d      	beq.n	8005c48 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c0c:	2208      	movs	r2, #8
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4413      	add	r3, r2
 8005c12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d014      	beq.n	8005c48 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f023 0307 	bic.w	r3, r3, #7
 8005c24:	3308      	adds	r3, #8
 8005c26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <pvPortMalloc+0x6c>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	617b      	str	r3, [r7, #20]
}
 8005c44:	bf00      	nop
 8005c46:	e7fe      	b.n	8005c46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d069      	beq.n	8005d22 <pvPortMalloc+0x146>
 8005c4e:	4b42      	ldr	r3, [pc, #264]	; (8005d58 <pvPortMalloc+0x17c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d864      	bhi.n	8005d22 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c58:	4b40      	ldr	r3, [pc, #256]	; (8005d5c <pvPortMalloc+0x180>)
 8005c5a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c5c:	4b3f      	ldr	r3, [pc, #252]	; (8005d5c <pvPortMalloc+0x180>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c62:	e004      	b.n	8005c6e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d903      	bls.n	8005c80 <pvPortMalloc+0xa4>
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1f1      	bne.n	8005c64 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c80:	4b33      	ldr	r3, [pc, #204]	; (8005d50 <pvPortMalloc+0x174>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d04b      	beq.n	8005d22 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2208      	movs	r2, #8
 8005c90:	4413      	add	r3, r2
 8005c92:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	1ad2      	subs	r2, r2, r3
 8005ca4:	2308      	movs	r3, #8
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d91f      	bls.n	8005cec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <pvPortMalloc+0xf8>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	613b      	str	r3, [r7, #16]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	1ad2      	subs	r2, r2, r3
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ce6:	69b8      	ldr	r0, [r7, #24]
 8005ce8:	f000 f8f8 	bl	8005edc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cec:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <pvPortMalloc+0x17c>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	4a18      	ldr	r2, [pc, #96]	; (8005d58 <pvPortMalloc+0x17c>)
 8005cf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cfa:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <pvPortMalloc+0x17c>)
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b18      	ldr	r3, [pc, #96]	; (8005d60 <pvPortMalloc+0x184>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d203      	bcs.n	8005d0e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d06:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <pvPortMalloc+0x17c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a15      	ldr	r2, [pc, #84]	; (8005d60 <pvPortMalloc+0x184>)
 8005d0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	4b10      	ldr	r3, [pc, #64]	; (8005d54 <pvPortMalloc+0x178>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d22:	f7fe fd9f 	bl	8004864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <pvPortMalloc+0x16a>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	60fb      	str	r3, [r7, #12]
}
 8005d42:	bf00      	nop
 8005d44:	e7fe      	b.n	8005d44 <pvPortMalloc+0x168>
	return pvReturn;
 8005d46:	69fb      	ldr	r3, [r7, #28]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3728      	adds	r7, #40	; 0x28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20001bd8 	.word	0x20001bd8
 8005d54:	20001be4 	.word	0x20001be4
 8005d58:	20001bdc 	.word	0x20001bdc
 8005d5c:	20001bd0 	.word	0x20001bd0
 8005d60:	20001be0 	.word	0x20001be0

08005d64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d048      	beq.n	8005e08 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d76:	2308      	movs	r3, #8
 8005d78:	425b      	negs	r3, r3
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	4b21      	ldr	r3, [pc, #132]	; (8005e10 <vPortFree+0xac>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <vPortFree+0x44>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60fb      	str	r3, [r7, #12]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <vPortFree+0x62>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	60bb      	str	r3, [r7, #8]
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <vPortFree+0xac>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d019      	beq.n	8005e08 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d115      	bne.n	8005e08 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <vPortFree+0xac>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	43db      	mvns	r3, r3
 8005de6:	401a      	ands	r2, r3
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005dec:	f7fe fd2c 	bl	8004848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <vPortFree+0xb0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4413      	add	r3, r2
 8005dfa:	4a06      	ldr	r2, [pc, #24]	; (8005e14 <vPortFree+0xb0>)
 8005dfc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dfe:	6938      	ldr	r0, [r7, #16]
 8005e00:	f000 f86c 	bl	8005edc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e04:	f7fe fd2e 	bl	8004864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e08:	bf00      	nop
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20001be4 	.word	0x20001be4
 8005e14:	20001bdc 	.word	0x20001bdc

08005e18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005e22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e24:	4b27      	ldr	r3, [pc, #156]	; (8005ec4 <prvHeapInit+0xac>)
 8005e26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00c      	beq.n	8005e4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3307      	adds	r3, #7
 8005e36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0307 	bic.w	r3, r3, #7
 8005e3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	4a1f      	ldr	r2, [pc, #124]	; (8005ec4 <prvHeapInit+0xac>)
 8005e48:	4413      	add	r3, r2
 8005e4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e50:	4a1d      	ldr	r2, [pc, #116]	; (8005ec8 <prvHeapInit+0xb0>)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e56:	4b1c      	ldr	r3, [pc, #112]	; (8005ec8 <prvHeapInit+0xb0>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	4413      	add	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e64:	2208      	movs	r2, #8
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1a9b      	subs	r3, r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 0307 	bic.w	r3, r3, #7
 8005e72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4a15      	ldr	r2, [pc, #84]	; (8005ecc <prvHeapInit+0xb4>)
 8005e78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e7a:	4b14      	ldr	r3, [pc, #80]	; (8005ecc <prvHeapInit+0xb4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e82:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <prvHeapInit+0xb4>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	1ad2      	subs	r2, r2, r3
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e98:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <prvHeapInit+0xb4>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	4a0a      	ldr	r2, [pc, #40]	; (8005ed0 <prvHeapInit+0xb8>)
 8005ea6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <prvHeapInit+0xbc>)
 8005eae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005eb0:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <prvHeapInit+0xc0>)
 8005eb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005eb6:	601a      	str	r2, [r3, #0]
}
 8005eb8:	bf00      	nop
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20000fd0 	.word	0x20000fd0
 8005ec8:	20001bd0 	.word	0x20001bd0
 8005ecc:	20001bd8 	.word	0x20001bd8
 8005ed0:	20001be0 	.word	0x20001be0
 8005ed4:	20001bdc 	.word	0x20001bdc
 8005ed8:	20001be4 	.word	0x20001be4

08005edc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ee4:	4b27      	ldr	r3, [pc, #156]	; (8005f84 <prvInsertBlockIntoFreeList+0xa8>)
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	e002      	b.n	8005ef0 <prvInsertBlockIntoFreeList+0x14>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d8f7      	bhi.n	8005eea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	4413      	add	r3, r2
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d108      	bne.n	8005f1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	441a      	add	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	441a      	add	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d118      	bne.n	8005f64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <prvInsertBlockIntoFreeList+0xac>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d00d      	beq.n	8005f5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	441a      	add	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	e008      	b.n	8005f6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <prvInsertBlockIntoFreeList+0xac>)
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	e003      	b.n	8005f6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d002      	beq.n	8005f7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f7a:	bf00      	nop
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr
 8005f84:	20001bd0 	.word	0x20001bd0
 8005f88:	20001bd8 	.word	0x20001bd8

08005f8c <__aeabi_atexit>:
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4601      	mov	r1, r0
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 b805 	b.w	8005fa0 <__cxa_atexit>

08005f96 <_ZdlPvj>:
 8005f96:	f000 b800 	b.w	8005f9a <_ZdlPv>

08005f9a <_ZdlPv>:
 8005f9a:	f000 b839 	b.w	8006010 <free>
	...

08005fa0 <__cxa_atexit>:
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	4804      	ldr	r0, [pc, #16]	; (8005fb8 <__cxa_atexit+0x18>)
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	b120      	cbz	r0, 8005fb4 <__cxa_atexit+0x14>
 8005faa:	460a      	mov	r2, r1
 8005fac:	2002      	movs	r0, #2
 8005fae:	4621      	mov	r1, r4
 8005fb0:	f3af 8000 	nop.w
 8005fb4:	bd10      	pop	{r4, pc}
 8005fb6:	bf00      	nop
 8005fb8:	00000000 	.word	0x00000000

08005fbc <__errno>:
 8005fbc:	4b01      	ldr	r3, [pc, #4]	; (8005fc4 <__errno+0x8>)
 8005fbe:	6818      	ldr	r0, [r3, #0]
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	20000014 	.word	0x20000014

08005fc8 <__libc_init_array>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	2600      	movs	r6, #0
 8005fcc:	4d0c      	ldr	r5, [pc, #48]	; (8006000 <__libc_init_array+0x38>)
 8005fce:	4c0d      	ldr	r4, [pc, #52]	; (8006004 <__libc_init_array+0x3c>)
 8005fd0:	1b64      	subs	r4, r4, r5
 8005fd2:	10a4      	asrs	r4, r4, #2
 8005fd4:	42a6      	cmp	r6, r4
 8005fd6:	d109      	bne.n	8005fec <__libc_init_array+0x24>
 8005fd8:	f000 f8da 	bl	8006190 <_init>
 8005fdc:	2600      	movs	r6, #0
 8005fde:	4d0a      	ldr	r5, [pc, #40]	; (8006008 <__libc_init_array+0x40>)
 8005fe0:	4c0a      	ldr	r4, [pc, #40]	; (800600c <__libc_init_array+0x44>)
 8005fe2:	1b64      	subs	r4, r4, r5
 8005fe4:	10a4      	asrs	r4, r4, #2
 8005fe6:	42a6      	cmp	r6, r4
 8005fe8:	d105      	bne.n	8005ff6 <__libc_init_array+0x2e>
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
 8005fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ff0:	4798      	blx	r3
 8005ff2:	3601      	adds	r6, #1
 8005ff4:	e7ee      	b.n	8005fd4 <__libc_init_array+0xc>
 8005ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ffa:	4798      	blx	r3
 8005ffc:	3601      	adds	r6, #1
 8005ffe:	e7f2      	b.n	8005fe6 <__libc_init_array+0x1e>
 8006000:	080063c4 	.word	0x080063c4
 8006004:	080063c4 	.word	0x080063c4
 8006008:	080063c4 	.word	0x080063c4
 800600c:	080063cc 	.word	0x080063cc

08006010 <free>:
 8006010:	4b02      	ldr	r3, [pc, #8]	; (800601c <free+0xc>)
 8006012:	4601      	mov	r1, r0
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	f000 b819 	b.w	800604c <_free_r>
 800601a:	bf00      	nop
 800601c:	20000014 	.word	0x20000014

08006020 <memcpy>:
 8006020:	440a      	add	r2, r1
 8006022:	4291      	cmp	r1, r2
 8006024:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006028:	d100      	bne.n	800602c <memcpy+0xc>
 800602a:	4770      	bx	lr
 800602c:	b510      	push	{r4, lr}
 800602e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006032:	4291      	cmp	r1, r2
 8006034:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006038:	d1f9      	bne.n	800602e <memcpy+0xe>
 800603a:	bd10      	pop	{r4, pc}

0800603c <memset>:
 800603c:	4603      	mov	r3, r0
 800603e:	4402      	add	r2, r0
 8006040:	4293      	cmp	r3, r2
 8006042:	d100      	bne.n	8006046 <memset+0xa>
 8006044:	4770      	bx	lr
 8006046:	f803 1b01 	strb.w	r1, [r3], #1
 800604a:	e7f9      	b.n	8006040 <memset+0x4>

0800604c <_free_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4605      	mov	r5, r0
 8006050:	2900      	cmp	r1, #0
 8006052:	d040      	beq.n	80060d6 <_free_r+0x8a>
 8006054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006058:	1f0c      	subs	r4, r1, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	bfb8      	it	lt
 800605e:	18e4      	addlt	r4, r4, r3
 8006060:	f000 f83c 	bl	80060dc <__malloc_lock>
 8006064:	4a1c      	ldr	r2, [pc, #112]	; (80060d8 <_free_r+0x8c>)
 8006066:	6813      	ldr	r3, [r2, #0]
 8006068:	b933      	cbnz	r3, 8006078 <_free_r+0x2c>
 800606a:	6063      	str	r3, [r4, #4]
 800606c:	6014      	str	r4, [r2, #0]
 800606e:	4628      	mov	r0, r5
 8006070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006074:	f000 b838 	b.w	80060e8 <__malloc_unlock>
 8006078:	42a3      	cmp	r3, r4
 800607a:	d908      	bls.n	800608e <_free_r+0x42>
 800607c:	6820      	ldr	r0, [r4, #0]
 800607e:	1821      	adds	r1, r4, r0
 8006080:	428b      	cmp	r3, r1
 8006082:	bf01      	itttt	eq
 8006084:	6819      	ldreq	r1, [r3, #0]
 8006086:	685b      	ldreq	r3, [r3, #4]
 8006088:	1809      	addeq	r1, r1, r0
 800608a:	6021      	streq	r1, [r4, #0]
 800608c:	e7ed      	b.n	800606a <_free_r+0x1e>
 800608e:	461a      	mov	r2, r3
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	b10b      	cbz	r3, 8006098 <_free_r+0x4c>
 8006094:	42a3      	cmp	r3, r4
 8006096:	d9fa      	bls.n	800608e <_free_r+0x42>
 8006098:	6811      	ldr	r1, [r2, #0]
 800609a:	1850      	adds	r0, r2, r1
 800609c:	42a0      	cmp	r0, r4
 800609e:	d10b      	bne.n	80060b8 <_free_r+0x6c>
 80060a0:	6820      	ldr	r0, [r4, #0]
 80060a2:	4401      	add	r1, r0
 80060a4:	1850      	adds	r0, r2, r1
 80060a6:	4283      	cmp	r3, r0
 80060a8:	6011      	str	r1, [r2, #0]
 80060aa:	d1e0      	bne.n	800606e <_free_r+0x22>
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	4401      	add	r1, r0
 80060b2:	6011      	str	r1, [r2, #0]
 80060b4:	6053      	str	r3, [r2, #4]
 80060b6:	e7da      	b.n	800606e <_free_r+0x22>
 80060b8:	d902      	bls.n	80060c0 <_free_r+0x74>
 80060ba:	230c      	movs	r3, #12
 80060bc:	602b      	str	r3, [r5, #0]
 80060be:	e7d6      	b.n	800606e <_free_r+0x22>
 80060c0:	6820      	ldr	r0, [r4, #0]
 80060c2:	1821      	adds	r1, r4, r0
 80060c4:	428b      	cmp	r3, r1
 80060c6:	bf01      	itttt	eq
 80060c8:	6819      	ldreq	r1, [r3, #0]
 80060ca:	685b      	ldreq	r3, [r3, #4]
 80060cc:	1809      	addeq	r1, r1, r0
 80060ce:	6021      	streq	r1, [r4, #0]
 80060d0:	6063      	str	r3, [r4, #4]
 80060d2:	6054      	str	r4, [r2, #4]
 80060d4:	e7cb      	b.n	800606e <_free_r+0x22>
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
 80060d8:	20001be8 	.word	0x20001be8

080060dc <__malloc_lock>:
 80060dc:	4801      	ldr	r0, [pc, #4]	; (80060e4 <__malloc_lock+0x8>)
 80060de:	f000 b809 	b.w	80060f4 <__retarget_lock_acquire_recursive>
 80060e2:	bf00      	nop
 80060e4:	20001bf0 	.word	0x20001bf0

080060e8 <__malloc_unlock>:
 80060e8:	4801      	ldr	r0, [pc, #4]	; (80060f0 <__malloc_unlock+0x8>)
 80060ea:	f000 b804 	b.w	80060f6 <__retarget_lock_release_recursive>
 80060ee:	bf00      	nop
 80060f0:	20001bf0 	.word	0x20001bf0

080060f4 <__retarget_lock_acquire_recursive>:
 80060f4:	4770      	bx	lr

080060f6 <__retarget_lock_release_recursive>:
 80060f6:	4770      	bx	lr

080060f8 <abort>:
 80060f8:	2006      	movs	r0, #6
 80060fa:	b508      	push	{r3, lr}
 80060fc:	f000 f82c 	bl	8006158 <raise>
 8006100:	2001      	movs	r0, #1
 8006102:	f7fb fefa 	bl	8001efa <_exit>

08006106 <_raise_r>:
 8006106:	291f      	cmp	r1, #31
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4604      	mov	r4, r0
 800610c:	460d      	mov	r5, r1
 800610e:	d904      	bls.n	800611a <_raise_r+0x14>
 8006110:	2316      	movs	r3, #22
 8006112:	6003      	str	r3, [r0, #0]
 8006114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006118:	bd38      	pop	{r3, r4, r5, pc}
 800611a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800611c:	b112      	cbz	r2, 8006124 <_raise_r+0x1e>
 800611e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006122:	b94b      	cbnz	r3, 8006138 <_raise_r+0x32>
 8006124:	4620      	mov	r0, r4
 8006126:	f000 f831 	bl	800618c <_getpid_r>
 800612a:	462a      	mov	r2, r5
 800612c:	4601      	mov	r1, r0
 800612e:	4620      	mov	r0, r4
 8006130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006134:	f000 b818 	b.w	8006168 <_kill_r>
 8006138:	2b01      	cmp	r3, #1
 800613a:	d00a      	beq.n	8006152 <_raise_r+0x4c>
 800613c:	1c59      	adds	r1, r3, #1
 800613e:	d103      	bne.n	8006148 <_raise_r+0x42>
 8006140:	2316      	movs	r3, #22
 8006142:	6003      	str	r3, [r0, #0]
 8006144:	2001      	movs	r0, #1
 8006146:	e7e7      	b.n	8006118 <_raise_r+0x12>
 8006148:	2400      	movs	r4, #0
 800614a:	4628      	mov	r0, r5
 800614c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006150:	4798      	blx	r3
 8006152:	2000      	movs	r0, #0
 8006154:	e7e0      	b.n	8006118 <_raise_r+0x12>
	...

08006158 <raise>:
 8006158:	4b02      	ldr	r3, [pc, #8]	; (8006164 <raise+0xc>)
 800615a:	4601      	mov	r1, r0
 800615c:	6818      	ldr	r0, [r3, #0]
 800615e:	f7ff bfd2 	b.w	8006106 <_raise_r>
 8006162:	bf00      	nop
 8006164:	20000014 	.word	0x20000014

08006168 <_kill_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	2300      	movs	r3, #0
 800616c:	4d06      	ldr	r5, [pc, #24]	; (8006188 <_kill_r+0x20>)
 800616e:	4604      	mov	r4, r0
 8006170:	4608      	mov	r0, r1
 8006172:	4611      	mov	r1, r2
 8006174:	602b      	str	r3, [r5, #0]
 8006176:	f7fb feb0 	bl	8001eda <_kill>
 800617a:	1c43      	adds	r3, r0, #1
 800617c:	d102      	bne.n	8006184 <_kill_r+0x1c>
 800617e:	682b      	ldr	r3, [r5, #0]
 8006180:	b103      	cbz	r3, 8006184 <_kill_r+0x1c>
 8006182:	6023      	str	r3, [r4, #0]
 8006184:	bd38      	pop	{r3, r4, r5, pc}
 8006186:	bf00      	nop
 8006188:	20001bec 	.word	0x20001bec

0800618c <_getpid_r>:
 800618c:	f7fb be9e 	b.w	8001ecc <_getpid>

08006190 <_init>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	bf00      	nop
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr

0800619c <_fini>:
 800619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619e:	bf00      	nop
 80061a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a2:	bc08      	pop	{r3}
 80061a4:	469e      	mov	lr, r3
 80061a6:	4770      	bx	lr
