
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010484  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08010674  08010674  00020674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000078  08010a34  08010a34  00020a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000110  08010aac  08010aac  00020aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010bbc  08010bbc  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010bbc  08010bbc  00020bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010bc4  08010bc4  00020bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08010bc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e98  200001ec  08010db4  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003084  08010db4  00033084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004590a  00000000  00000000  00030215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009795  00000000  00000000  00075b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002440  00000000  00000000  0007f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021a0  00000000  00000000  000816f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271dc  00000000  00000000  00083898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032d65  00000000  00000000  000aaa74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc987  00000000  00000000  000dd7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019a160  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b6cc  00000000  00000000  0019a1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001ec 	.word	0x200001ec
 800020c:	00000000 	.word	0x00000000
 8000210:	0801065c 	.word	0x0801065c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001f0 	.word	0x200001f0
 800022c:	0801065c 	.word	0x0801065c

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <selfrel_offset31>:
 8000240:	6803      	ldr	r3, [r0, #0]
 8000242:	005a      	lsls	r2, r3, #1
 8000244:	bf4c      	ite	mi
 8000246:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800024a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800024e:	4418      	add	r0, r3
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop

08000254 <search_EIT_table>:
 8000254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000258:	b339      	cbz	r1, 80002aa <search_EIT_table+0x56>
 800025a:	1e4f      	subs	r7, r1, #1
 800025c:	4604      	mov	r4, r0
 800025e:	4615      	mov	r5, r2
 8000260:	463e      	mov	r6, r7
 8000262:	f04f 0800 	mov.w	r8, #0
 8000266:	eb08 0106 	add.w	r1, r8, r6
 800026a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800026e:	1049      	asrs	r1, r1, #1
 8000270:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000274:	4648      	mov	r0, r9
 8000276:	f7ff ffe3 	bl	8000240 <selfrel_offset31>
 800027a:	4603      	mov	r3, r0
 800027c:	00c8      	lsls	r0, r1, #3
 800027e:	3008      	adds	r0, #8
 8000280:	428f      	cmp	r7, r1
 8000282:	4420      	add	r0, r4
 8000284:	d00b      	beq.n	800029e <search_EIT_table+0x4a>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d80b      	bhi.n	80002a2 <search_EIT_table+0x4e>
 800028a:	f7ff ffd9 	bl	8000240 <selfrel_offset31>
 800028e:	3801      	subs	r0, #1
 8000290:	42a8      	cmp	r0, r5
 8000292:	f101 0801 	add.w	r8, r1, #1
 8000296:	d3e6      	bcc.n	8000266 <search_EIT_table+0x12>
 8000298:	4648      	mov	r0, r9
 800029a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800029e:	42ab      	cmp	r3, r5
 80002a0:	d9fa      	bls.n	8000298 <search_EIT_table+0x44>
 80002a2:	4588      	cmp	r8, r1
 80002a4:	d001      	beq.n	80002aa <search_EIT_table+0x56>
 80002a6:	1e4e      	subs	r6, r1, #1
 80002a8:	e7dd      	b.n	8000266 <search_EIT_table+0x12>
 80002aa:	f04f 0900 	mov.w	r9, #0
 80002ae:	4648      	mov	r0, r9
 80002b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080002b4 <__gnu_unwind_get_pr_addr>:
 80002b4:	2801      	cmp	r0, #1
 80002b6:	d007      	beq.n	80002c8 <__gnu_unwind_get_pr_addr+0x14>
 80002b8:	2802      	cmp	r0, #2
 80002ba:	d007      	beq.n	80002cc <__gnu_unwind_get_pr_addr+0x18>
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <__gnu_unwind_get_pr_addr+0x1c>)
 80002be:	2800      	cmp	r0, #0
 80002c0:	bf0c      	ite	eq
 80002c2:	4618      	moveq	r0, r3
 80002c4:	2000      	movne	r0, #0
 80002c6:	4770      	bx	lr
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <__gnu_unwind_get_pr_addr+0x20>)
 80002ca:	4770      	bx	lr
 80002cc:	4802      	ldr	r0, [pc, #8]	; (80002d8 <__gnu_unwind_get_pr_addr+0x24>)
 80002ce:	4770      	bx	lr
 80002d0:	080009a5 	.word	0x080009a5
 80002d4:	080009a9 	.word	0x080009a9
 80002d8:	080009ad 	.word	0x080009ad

080002dc <get_eit_entry>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	4b24      	ldr	r3, [pc, #144]	; (8000370 <get_eit_entry+0x94>)
 80002e0:	4604      	mov	r4, r0
 80002e2:	b083      	sub	sp, #12
 80002e4:	1e8d      	subs	r5, r1, #2
 80002e6:	b33b      	cbz	r3, 8000338 <get_eit_entry+0x5c>
 80002e8:	4628      	mov	r0, r5
 80002ea:	a901      	add	r1, sp, #4
 80002ec:	f3af 8000 	nop.w
 80002f0:	b1e8      	cbz	r0, 800032e <get_eit_entry+0x52>
 80002f2:	9901      	ldr	r1, [sp, #4]
 80002f4:	462a      	mov	r2, r5
 80002f6:	f7ff ffad 	bl	8000254 <search_EIT_table>
 80002fa:	4601      	mov	r1, r0
 80002fc:	b1b8      	cbz	r0, 800032e <get_eit_entry+0x52>
 80002fe:	f7ff ff9f 	bl	8000240 <selfrel_offset31>
 8000302:	684b      	ldr	r3, [r1, #4]
 8000304:	64a0      	str	r0, [r4, #72]	; 0x48
 8000306:	2b01      	cmp	r3, #1
 8000308:	d02e      	beq.n	8000368 <get_eit_entry+0x8c>
 800030a:	2b00      	cmp	r3, #0
 800030c:	db27      	blt.n	800035e <get_eit_entry+0x82>
 800030e:	1d08      	adds	r0, r1, #4
 8000310:	f7ff ff96 	bl	8000240 <selfrel_offset31>
 8000314:	2300      	movs	r3, #0
 8000316:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800031a:	6803      	ldr	r3, [r0, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	db12      	blt.n	8000346 <get_eit_entry+0x6a>
 8000320:	f7ff ff8e 	bl	8000240 <selfrel_offset31>
 8000324:	4603      	mov	r3, r0
 8000326:	2000      	movs	r0, #0
 8000328:	6123      	str	r3, [r4, #16]
 800032a:	b003      	add	sp, #12
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	2300      	movs	r3, #0
 8000330:	2009      	movs	r0, #9
 8000332:	6123      	str	r3, [r4, #16]
 8000334:	b003      	add	sp, #12
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <get_eit_entry+0x98>)
 800033a:	490f      	ldr	r1, [pc, #60]	; (8000378 <get_eit_entry+0x9c>)
 800033c:	4618      	mov	r0, r3
 800033e:	1ac9      	subs	r1, r1, r3
 8000340:	10c9      	asrs	r1, r1, #3
 8000342:	9101      	str	r1, [sp, #4]
 8000344:	e7d6      	b.n	80002f4 <get_eit_entry+0x18>
 8000346:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800034a:	f7ff ffb3 	bl	80002b4 <__gnu_unwind_get_pr_addr>
 800034e:	2800      	cmp	r0, #0
 8000350:	4603      	mov	r3, r0
 8000352:	bf14      	ite	ne
 8000354:	2000      	movne	r0, #0
 8000356:	2009      	moveq	r0, #9
 8000358:	6123      	str	r3, [r4, #16]
 800035a:	b003      	add	sp, #12
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	2301      	movs	r3, #1
 8000360:	1d08      	adds	r0, r1, #4
 8000362:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000366:	e7d8      	b.n	800031a <get_eit_entry+0x3e>
 8000368:	2300      	movs	r3, #0
 800036a:	2005      	movs	r0, #5
 800036c:	6123      	str	r3, [r4, #16]
 800036e:	e7dc      	b.n	800032a <get_eit_entry+0x4e>
 8000370:	00000000 	.word	0x00000000
 8000374:	08010aac 	.word	0x08010aac
 8000378:	08010bbc 	.word	0x08010bbc

0800037c <restore_non_core_regs>:
 800037c:	6803      	ldr	r3, [r0, #0]
 800037e:	b510      	push	{r4, lr}
 8000380:	07da      	lsls	r2, r3, #31
 8000382:	4604      	mov	r4, r0
 8000384:	d406      	bmi.n	8000394 <restore_non_core_regs+0x18>
 8000386:	079b      	lsls	r3, r3, #30
 8000388:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800038c:	d509      	bpl.n	80003a2 <restore_non_core_regs+0x26>
 800038e:	f000 fc5d 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000392:	6823      	ldr	r3, [r4, #0]
 8000394:	0759      	lsls	r1, r3, #29
 8000396:	d509      	bpl.n	80003ac <restore_non_core_regs+0x30>
 8000398:	071a      	lsls	r2, r3, #28
 800039a:	d50e      	bpl.n	80003ba <restore_non_core_regs+0x3e>
 800039c:	06db      	lsls	r3, r3, #27
 800039e:	d513      	bpl.n	80003c8 <restore_non_core_regs+0x4c>
 80003a0:	bd10      	pop	{r4, pc}
 80003a2:	f000 fc4b 	bl	8000c3c <__gnu_Unwind_Restore_VFP>
 80003a6:	6823      	ldr	r3, [r4, #0]
 80003a8:	0759      	lsls	r1, r3, #29
 80003aa:	d4f5      	bmi.n	8000398 <restore_non_core_regs+0x1c>
 80003ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80003b0:	f000 fc54 	bl	8000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80003b4:	6823      	ldr	r3, [r4, #0]
 80003b6:	071a      	lsls	r2, r3, #28
 80003b8:	d4f0      	bmi.n	800039c <restore_non_core_regs+0x20>
 80003ba:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80003be:	f000 fc55 	bl	8000c6c <__gnu_Unwind_Restore_WMMXD>
 80003c2:	6823      	ldr	r3, [r4, #0]
 80003c4:	06db      	lsls	r3, r3, #27
 80003c6:	d4eb      	bmi.n	80003a0 <restore_non_core_regs+0x24>
 80003c8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80003cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003d0:	f000 bc90 	b.w	8000cf4 <__gnu_Unwind_Restore_WMMXC>

080003d4 <__gnu_unwind_24bit.constprop.0>:
 80003d4:	2009      	movs	r0, #9
 80003d6:	4770      	bx	lr

080003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80003d8:	4603      	mov	r3, r0
 80003da:	6800      	ldr	r0, [r0, #0]
 80003dc:	b100      	cbz	r0, 80003e0 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80003de:	4418      	add	r0, r3
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop

080003e4 <_Unwind_DebugHook>:
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop

080003e8 <unwind_phase2>:
 80003e8:	b570      	push	{r4, r5, r6, lr}
 80003ea:	4604      	mov	r4, r0
 80003ec:	460e      	mov	r6, r1
 80003ee:	4620      	mov	r0, r4
 80003f0:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80003f2:	f7ff ff73 	bl	80002dc <get_eit_entry>
 80003f6:	4605      	mov	r5, r0
 80003f8:	b998      	cbnz	r0, 8000422 <unwind_phase2+0x3a>
 80003fa:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 80003fe:	4632      	mov	r2, r6
 8000400:	4621      	mov	r1, r4
 8000402:	2001      	movs	r0, #1
 8000404:	6923      	ldr	r3, [r4, #16]
 8000406:	f8c4 c014 	str.w	ip, [r4, #20]
 800040a:	4798      	blx	r3
 800040c:	2808      	cmp	r0, #8
 800040e:	d0ee      	beq.n	80003ee <unwind_phase2+0x6>
 8000410:	2807      	cmp	r0, #7
 8000412:	d106      	bne.n	8000422 <unwind_phase2+0x3a>
 8000414:	4628      	mov	r0, r5
 8000416:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000418:	f7ff ffe4 	bl	80003e4 <_Unwind_DebugHook>
 800041c:	1d30      	adds	r0, r6, #4
 800041e:	f000 fc01 	bl	8000c24 <__restore_core_regs>
 8000422:	f00f fb9c 	bl	800fb5e <abort>
 8000426:	bf00      	nop

08000428 <unwind_phase2_forced>:
 8000428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800042c:	f04f 0a00 	mov.w	sl, #0
 8000430:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000434:	f10d 0e0c 	add.w	lr, sp, #12
 8000438:	f101 0c04 	add.w	ip, r1, #4
 800043c:	68c7      	ldr	r7, [r0, #12]
 800043e:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000442:	4606      	mov	r6, r0
 8000444:	4614      	mov	r4, r2
 8000446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800044a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800044e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000452:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000456:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800045a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800045e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000462:	ad02      	add	r5, sp, #8
 8000464:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000468:	f8c5 a000 	str.w	sl, [r5]
 800046c:	e021      	b.n	80004b2 <unwind_phase2_forced+0x8a>
 800046e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000470:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000474:	4629      	mov	r1, r5
 8000476:	6173      	str	r3, [r6, #20]
 8000478:	a87a      	add	r0, sp, #488	; 0x1e8
 800047a:	f00f fbcf 	bl	800fc1c <memcpy>
 800047e:	4631      	mov	r1, r6
 8000480:	4650      	mov	r0, sl
 8000482:	6933      	ldr	r3, [r6, #16]
 8000484:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000486:	4798      	blx	r3
 8000488:	9c88      	ldr	r4, [sp, #544]	; 0x220
 800048a:	4682      	mov	sl, r0
 800048c:	646c      	str	r4, [r5, #68]	; 0x44
 800048e:	4633      	mov	r3, r6
 8000490:	4632      	mov	r2, r6
 8000492:	4649      	mov	r1, r9
 8000494:	2001      	movs	r0, #1
 8000496:	e9cd 5800 	strd	r5, r8, [sp]
 800049a:	47b8      	blx	r7
 800049c:	4604      	mov	r4, r0
 800049e:	b9f0      	cbnz	r0, 80004de <unwind_phase2_forced+0xb6>
 80004a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80004a4:	4628      	mov	r0, r5
 80004a6:	a97a      	add	r1, sp, #488	; 0x1e8
 80004a8:	f00f fbb8 	bl	800fc1c <memcpy>
 80004ac:	f1ba 0f08 	cmp.w	sl, #8
 80004b0:	d11b      	bne.n	80004ea <unwind_phase2_forced+0xc2>
 80004b2:	4630      	mov	r0, r6
 80004b4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004b6:	f7ff ff11 	bl	80002dc <get_eit_entry>
 80004ba:	f104 0909 	add.w	r9, r4, #9
 80004be:	fa5f fa89 	uxtb.w	sl, r9
 80004c2:	4604      	mov	r4, r0
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d0d2      	beq.n	800046e <unwind_phase2_forced+0x46>
 80004c8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80004ca:	4633      	mov	r3, r6
 80004cc:	6469      	str	r1, [r5, #68]	; 0x44
 80004ce:	4632      	mov	r2, r6
 80004d0:	2001      	movs	r0, #1
 80004d2:	e9cd 5800 	strd	r5, r8, [sp]
 80004d6:	f04a 0110 	orr.w	r1, sl, #16
 80004da:	47b8      	blx	r7
 80004dc:	b100      	cbz	r0, 80004e0 <unwind_phase2_forced+0xb8>
 80004de:	2409      	movs	r4, #9
 80004e0:	4620      	mov	r0, r4
 80004e2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1ba 0f07 	cmp.w	sl, #7
 80004ee:	d1f6      	bne.n	80004de <unwind_phase2_forced+0xb6>
 80004f0:	4620      	mov	r0, r4
 80004f2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004f4:	f7ff ff76 	bl	80003e4 <_Unwind_DebugHook>
 80004f8:	a803      	add	r0, sp, #12
 80004fa:	f000 fb93 	bl	8000c24 <__restore_core_regs>
 80004fe:	bf00      	nop

08000500 <_Unwind_GetCFA>:
 8000500:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000502:	4770      	bx	lr

08000504 <__gnu_Unwind_RaiseException>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800050a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800050c:	b0f9      	sub	sp, #484	; 0x1e4
 800050e:	640b      	str	r3, [r1, #64]	; 0x40
 8000510:	ac01      	add	r4, sp, #4
 8000512:	f101 0c04 	add.w	ip, r1, #4
 8000516:	460e      	mov	r6, r1
 8000518:	4605      	mov	r5, r0
 800051a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000534:	9700      	str	r7, [sp, #0]
 8000536:	e006      	b.n	8000546 <__gnu_Unwind_RaiseException+0x42>
 8000538:	466a      	mov	r2, sp
 800053a:	4629      	mov	r1, r5
 800053c:	692b      	ldr	r3, [r5, #16]
 800053e:	4798      	blx	r3
 8000540:	2808      	cmp	r0, #8
 8000542:	4604      	mov	r4, r0
 8000544:	d108      	bne.n	8000558 <__gnu_Unwind_RaiseException+0x54>
 8000546:	4628      	mov	r0, r5
 8000548:	9910      	ldr	r1, [sp, #64]	; 0x40
 800054a:	f7ff fec7 	bl	80002dc <get_eit_entry>
 800054e:	2800      	cmp	r0, #0
 8000550:	d0f2      	beq.n	8000538 <__gnu_Unwind_RaiseException+0x34>
 8000552:	2009      	movs	r0, #9
 8000554:	b079      	add	sp, #484	; 0x1e4
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000558:	4668      	mov	r0, sp
 800055a:	f7ff ff0f 	bl	800037c <restore_non_core_regs>
 800055e:	2c06      	cmp	r4, #6
 8000560:	d1f7      	bne.n	8000552 <__gnu_Unwind_RaiseException+0x4e>
 8000562:	4631      	mov	r1, r6
 8000564:	4628      	mov	r0, r5
 8000566:	f7ff ff3f 	bl	80003e8 <unwind_phase2>
 800056a:	bf00      	nop

0800056c <__gnu_Unwind_ForcedUnwind>:
 800056c:	b410      	push	{r4}
 800056e:	4614      	mov	r4, r2
 8000570:	6184      	str	r4, [r0, #24]
 8000572:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000574:	60c1      	str	r1, [r0, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	641c      	str	r4, [r3, #64]	; 0x40
 800057a:	4619      	mov	r1, r3
 800057c:	bc10      	pop	{r4}
 800057e:	e753      	b.n	8000428 <unwind_phase2_forced>

08000580 <__gnu_Unwind_Resume>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	6943      	ldr	r3, [r0, #20]
 8000584:	68c6      	ldr	r6, [r0, #12]
 8000586:	640b      	str	r3, [r1, #64]	; 0x40
 8000588:	b9ae      	cbnz	r6, 80005b6 <__gnu_Unwind_Resume+0x36>
 800058a:	460a      	mov	r2, r1
 800058c:	6903      	ldr	r3, [r0, #16]
 800058e:	4604      	mov	r4, r0
 8000590:	460d      	mov	r5, r1
 8000592:	4601      	mov	r1, r0
 8000594:	2002      	movs	r0, #2
 8000596:	4798      	blx	r3
 8000598:	2807      	cmp	r0, #7
 800059a:	d005      	beq.n	80005a8 <__gnu_Unwind_Resume+0x28>
 800059c:	2808      	cmp	r0, #8
 800059e:	d10f      	bne.n	80005c0 <__gnu_Unwind_Resume+0x40>
 80005a0:	4629      	mov	r1, r5
 80005a2:	4620      	mov	r0, r4
 80005a4:	f7ff ff20 	bl	80003e8 <unwind_phase2>
 80005a8:	4630      	mov	r0, r6
 80005aa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80005ac:	f7ff ff1a 	bl	80003e4 <_Unwind_DebugHook>
 80005b0:	1d28      	adds	r0, r5, #4
 80005b2:	f000 fb37 	bl	8000c24 <__restore_core_regs>
 80005b6:	2201      	movs	r2, #1
 80005b8:	f7ff ff36 	bl	8000428 <unwind_phase2_forced>
 80005bc:	f00f facf 	bl	800fb5e <abort>
 80005c0:	f00f facd 	bl	800fb5e <abort>

080005c4 <__gnu_Unwind_Resume_or_Rethrow>:
 80005c4:	68c2      	ldr	r2, [r0, #12]
 80005c6:	b12a      	cbz	r2, 80005d4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80005c8:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 80005cc:	2200      	movs	r2, #0
 80005ce:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 80005d2:	e729      	b.n	8000428 <unwind_phase2_forced>
 80005d4:	e796      	b.n	8000504 <__gnu_Unwind_RaiseException>
 80005d6:	bf00      	nop

080005d8 <_Unwind_Complete>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_Unwind_DeleteException>:
 80005dc:	6883      	ldr	r3, [r0, #8]
 80005de:	4601      	mov	r1, r0
 80005e0:	b10b      	cbz	r3, 80005e6 <_Unwind_DeleteException+0xa>
 80005e2:	2001      	movs	r0, #1
 80005e4:	4718      	bx	r3
 80005e6:	4770      	bx	lr

080005e8 <_Unwind_VRS_Get>:
 80005e8:	2901      	cmp	r1, #1
 80005ea:	d012      	beq.n	8000612 <_Unwind_VRS_Get+0x2a>
 80005ec:	d809      	bhi.n	8000602 <_Unwind_VRS_Get+0x1a>
 80005ee:	b973      	cbnz	r3, 800060e <_Unwind_VRS_Get+0x26>
 80005f0:	2a0f      	cmp	r2, #15
 80005f2:	d80c      	bhi.n	800060e <_Unwind_VRS_Get+0x26>
 80005f4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005f8:	6842      	ldr	r2, [r0, #4]
 80005fa:	4618      	mov	r0, r3
 80005fc:	9b00      	ldr	r3, [sp, #0]
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	4770      	bx	lr
 8000602:	3903      	subs	r1, #3
 8000604:	2901      	cmp	r1, #1
 8000606:	bf94      	ite	ls
 8000608:	2001      	movls	r0, #1
 800060a:	2002      	movhi	r0, #2
 800060c:	4770      	bx	lr
 800060e:	2002      	movs	r0, #2
 8000610:	4770      	bx	lr
 8000612:	4608      	mov	r0, r1
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <_Unwind_GetGR>:
 8000618:	2300      	movs	r3, #0
 800061a:	b500      	push	{lr}
 800061c:	b085      	sub	sp, #20
 800061e:	460a      	mov	r2, r1
 8000620:	a903      	add	r1, sp, #12
 8000622:	9100      	str	r1, [sp, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	f7ff ffdf 	bl	80005e8 <_Unwind_VRS_Get>
 800062a:	9803      	ldr	r0, [sp, #12]
 800062c:	b005      	add	sp, #20
 800062e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000632:	bf00      	nop

08000634 <_Unwind_VRS_Set>:
 8000634:	2901      	cmp	r1, #1
 8000636:	d012      	beq.n	800065e <_Unwind_VRS_Set+0x2a>
 8000638:	d809      	bhi.n	800064e <_Unwind_VRS_Set+0x1a>
 800063a:	b973      	cbnz	r3, 800065a <_Unwind_VRS_Set+0x26>
 800063c:	2a0f      	cmp	r2, #15
 800063e:	d80c      	bhi.n	800065a <_Unwind_VRS_Set+0x26>
 8000640:	9900      	ldr	r1, [sp, #0]
 8000642:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000646:	6809      	ldr	r1, [r1, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	6051      	str	r1, [r2, #4]
 800064c:	4770      	bx	lr
 800064e:	3903      	subs	r1, #3
 8000650:	2901      	cmp	r1, #1
 8000652:	bf94      	ite	ls
 8000654:	2001      	movls	r0, #1
 8000656:	2002      	movhi	r0, #2
 8000658:	4770      	bx	lr
 800065a:	2002      	movs	r0, #2
 800065c:	4770      	bx	lr
 800065e:	4608      	mov	r0, r1
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop

08000664 <_Unwind_SetGR>:
 8000664:	2300      	movs	r3, #0
 8000666:	b510      	push	{r4, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	ac03      	add	r4, sp, #12
 800066c:	9203      	str	r2, [sp, #12]
 800066e:	9400      	str	r4, [sp, #0]
 8000670:	460a      	mov	r2, r1
 8000672:	4619      	mov	r1, r3
 8000674:	f7ff ffde 	bl	8000634 <_Unwind_VRS_Set>
 8000678:	b004      	add	sp, #16
 800067a:	bd10      	pop	{r4, pc}

0800067c <__gnu_Unwind_Backtrace>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000682:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000684:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000688:	6413      	str	r3, [r2, #64]	; 0x40
 800068a:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 800068e:	f102 0c04 	add.w	ip, r2, #4
 8000692:	4605      	mov	r5, r0
 8000694:	460c      	mov	r4, r1
 8000696:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800069a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800069e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006ae:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80006b2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80006b6:	9616      	str	r6, [sp, #88]	; 0x58
 80006b8:	e012      	b.n	80006e0 <__gnu_Unwind_Backtrace+0x64>
 80006ba:	210c      	movs	r1, #12
 80006bc:	a816      	add	r0, sp, #88	; 0x58
 80006be:	466a      	mov	r2, sp
 80006c0:	f7ff ffd0 	bl	8000664 <_Unwind_SetGR>
 80006c4:	4621      	mov	r1, r4
 80006c6:	a816      	add	r0, sp, #88	; 0x58
 80006c8:	47a8      	blx	r5
 80006ca:	b978      	cbnz	r0, 80006ec <__gnu_Unwind_Backtrace+0x70>
 80006cc:	4669      	mov	r1, sp
 80006ce:	2008      	movs	r0, #8
 80006d0:	9b04      	ldr	r3, [sp, #16]
 80006d2:	aa16      	add	r2, sp, #88	; 0x58
 80006d4:	4798      	blx	r3
 80006d6:	2805      	cmp	r0, #5
 80006d8:	4606      	mov	r6, r0
 80006da:	d008      	beq.n	80006ee <__gnu_Unwind_Backtrace+0x72>
 80006dc:	2809      	cmp	r0, #9
 80006de:	d005      	beq.n	80006ec <__gnu_Unwind_Backtrace+0x70>
 80006e0:	4668      	mov	r0, sp
 80006e2:	9926      	ldr	r1, [sp, #152]	; 0x98
 80006e4:	f7ff fdfa 	bl	80002dc <get_eit_entry>
 80006e8:	2800      	cmp	r0, #0
 80006ea:	d0e6      	beq.n	80006ba <__gnu_Unwind_Backtrace+0x3e>
 80006ec:	2609      	movs	r6, #9
 80006ee:	a816      	add	r0, sp, #88	; 0x58
 80006f0:	f7ff fe44 	bl	800037c <restore_non_core_regs>
 80006f4:	4630      	mov	r0, r6
 80006f6:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80006fa:	bd70      	pop	{r4, r5, r6, pc}

080006fc <__gnu_unwind_pr_common>:
 80006fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000700:	461e      	mov	r6, r3
 8000702:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000704:	b089      	sub	sp, #36	; 0x24
 8000706:	f854 3b04 	ldr.w	r3, [r4], #4
 800070a:	460d      	mov	r5, r1
 800070c:	4617      	mov	r7, r2
 800070e:	f000 0803 	and.w	r8, r0, #3
 8000712:	9406      	str	r4, [sp, #24]
 8000714:	2e00      	cmp	r6, #0
 8000716:	d079      	beq.n	800080c <__gnu_unwind_pr_common+0x110>
 8000718:	2202      	movs	r2, #2
 800071a:	f88d 201c 	strb.w	r2, [sp, #28]
 800071e:	0c1a      	lsrs	r2, r3, #16
 8000720:	f88d 201d 	strb.w	r2, [sp, #29]
 8000724:	041b      	lsls	r3, r3, #16
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	9305      	str	r3, [sp, #20]
 800072a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800072e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000730:	f1b8 0f02 	cmp.w	r8, #2
 8000734:	bf08      	it	eq
 8000736:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000738:	f013 0301 	ands.w	r3, r3, #1
 800073c:	d00c      	beq.n	8000758 <__gnu_unwind_pr_common+0x5c>
 800073e:	4638      	mov	r0, r7
 8000740:	a905      	add	r1, sp, #20
 8000742:	f000 fb71 	bl	8000e28 <__gnu_unwind_execute>
 8000746:	b918      	cbnz	r0, 8000750 <__gnu_unwind_pr_common+0x54>
 8000748:	2008      	movs	r0, #8
 800074a:	b009      	add	sp, #36	; 0x24
 800074c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000750:	2009      	movs	r0, #9
 8000752:	b009      	add	sp, #36	; 0x24
 8000754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000758:	f8d4 a000 	ldr.w	sl, [r4]
 800075c:	f1ba 0f00 	cmp.w	sl, #0
 8000760:	d0ed      	beq.n	800073e <__gnu_unwind_pr_common+0x42>
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	f000 0308 	and.w	r3, r0, #8
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	2e02      	cmp	r6, #2
 800076c:	d04a      	beq.n	8000804 <__gnu_unwind_pr_common+0x108>
 800076e:	f8b4 a000 	ldrh.w	sl, [r4]
 8000772:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000776:	3404      	adds	r4, #4
 8000778:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800077a:	210f      	movs	r1, #15
 800077c:	4638      	mov	r0, r7
 800077e:	f029 0b01 	bic.w	fp, r9, #1
 8000782:	4493      	add	fp, r2
 8000784:	f7ff ff48 	bl	8000618 <_Unwind_GetGR>
 8000788:	4583      	cmp	fp, r0
 800078a:	d839      	bhi.n	8000800 <__gnu_unwind_pr_common+0x104>
 800078c:	f02a 0201 	bic.w	r2, sl, #1
 8000790:	445a      	add	r2, fp
 8000792:	4282      	cmp	r2, r0
 8000794:	bf94      	ite	ls
 8000796:	2000      	movls	r0, #0
 8000798:	2001      	movhi	r0, #1
 800079a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	f00a 0a01 	and.w	sl, sl, #1
 80007a6:	ea43 030a 	orr.w	r3, r3, sl
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d049      	beq.n	8000842 <__gnu_unwind_pr_common+0x146>
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d032      	beq.n	8000818 <__gnu_unwind_pr_common+0x11c>
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1cc      	bne.n	8000750 <__gnu_unwind_pr_common+0x54>
 80007b6:	f1b8 0f00 	cmp.w	r8, #0
 80007ba:	d002      	beq.n	80007c2 <__gnu_unwind_pr_common+0xc6>
 80007bc:	2800      	cmp	r0, #0
 80007be:	f040 80ce 	bne.w	800095e <__gnu_unwind_pr_common+0x262>
 80007c2:	3404      	adds	r4, #4
 80007c4:	f8d4 a000 	ldr.w	sl, [r4]
 80007c8:	f1ba 0f00 	cmp.w	sl, #0
 80007cc:	d1cd      	bne.n	800076a <__gnu_unwind_pr_common+0x6e>
 80007ce:	4638      	mov	r0, r7
 80007d0:	a905      	add	r1, sp, #20
 80007d2:	f000 fb29 	bl	8000e28 <__gnu_unwind_execute>
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d1ba      	bne.n	8000750 <__gnu_unwind_pr_common+0x54>
 80007da:	9b01      	ldr	r3, [sp, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0b3      	beq.n	8000748 <__gnu_unwind_pr_common+0x4c>
 80007e0:	210f      	movs	r1, #15
 80007e2:	4638      	mov	r0, r7
 80007e4:	f7ff ff18 	bl	8000618 <_Unwind_GetGR>
 80007e8:	210e      	movs	r1, #14
 80007ea:	4602      	mov	r2, r0
 80007ec:	4638      	mov	r0, r7
 80007ee:	f7ff ff39 	bl	8000664 <_Unwind_SetGR>
 80007f2:	4638      	mov	r0, r7
 80007f4:	210f      	movs	r1, #15
 80007f6:	4a6a      	ldr	r2, [pc, #424]	; (80009a0 <__gnu_unwind_pr_common+0x2a4>)
 80007f8:	f7ff ff34 	bl	8000664 <_Unwind_SetGR>
 80007fc:	2007      	movs	r0, #7
 80007fe:	e7a8      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000800:	2000      	movs	r0, #0
 8000802:	e7ca      	b.n	800079a <__gnu_unwind_pr_common+0x9e>
 8000804:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000808:	3408      	adds	r4, #8
 800080a:	e7b5      	b.n	8000778 <__gnu_unwind_pr_common+0x7c>
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	9305      	str	r3, [sp, #20]
 8000810:	2303      	movs	r3, #3
 8000812:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000816:	e78a      	b.n	800072e <__gnu_unwind_pr_common+0x32>
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800081e:	f1b8 0f00 	cmp.w	r8, #0
 8000822:	d145      	bne.n	80008b0 <__gnu_unwind_pr_common+0x1b4>
 8000824:	b128      	cbz	r0, 8000832 <__gnu_unwind_pr_common+0x136>
 8000826:	9a02      	ldr	r2, [sp, #8]
 8000828:	2a00      	cmp	r2, #0
 800082a:	d05c      	beq.n	80008e6 <__gnu_unwind_pr_common+0x1ea>
 800082c:	f1bb 0f00 	cmp.w	fp, #0
 8000830:	d074      	beq.n	800091c <__gnu_unwind_pr_common+0x220>
 8000832:	2b00      	cmp	r3, #0
 8000834:	da00      	bge.n	8000838 <__gnu_unwind_pr_common+0x13c>
 8000836:	3404      	adds	r4, #4
 8000838:	f10b 0b01 	add.w	fp, fp, #1
 800083c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000840:	e7c0      	b.n	80007c4 <__gnu_unwind_pr_common+0xc8>
 8000842:	f1b8 0f00 	cmp.w	r8, #0
 8000846:	d119      	bne.n	800087c <__gnu_unwind_pr_common+0x180>
 8000848:	b1b0      	cbz	r0, 8000878 <__gnu_unwind_pr_common+0x17c>
 800084a:	6863      	ldr	r3, [r4, #4]
 800084c:	6822      	ldr	r2, [r4, #0]
 800084e:	1c99      	adds	r1, r3, #2
 8000850:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000854:	f43f af7c 	beq.w	8000750 <__gnu_unwind_pr_common+0x54>
 8000858:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800085c:	3301      	adds	r3, #1
 800085e:	9104      	str	r1, [sp, #16]
 8000860:	f000 8091 	beq.w	8000986 <__gnu_unwind_pr_common+0x28a>
 8000864:	1d20      	adds	r0, r4, #4
 8000866:	f7ff fdb7 	bl	80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800086a:	ab04      	add	r3, sp, #16
 800086c:	4601      	mov	r1, r0
 800086e:	4628      	mov	r0, r5
 8000870:	f3af 8000 	nop.w
 8000874:	2800      	cmp	r0, #0
 8000876:	d15c      	bne.n	8000932 <__gnu_unwind_pr_common+0x236>
 8000878:	3408      	adds	r4, #8
 800087a:	e7a3      	b.n	80007c4 <__gnu_unwind_pr_common+0xc8>
 800087c:	210d      	movs	r1, #13
 800087e:	4638      	mov	r0, r7
 8000880:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000884:	f7ff fec8 	bl	8000618 <_Unwind_GetGR>
 8000888:	4581      	cmp	r9, r0
 800088a:	d1f5      	bne.n	8000878 <__gnu_unwind_pr_common+0x17c>
 800088c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800088e:	429c      	cmp	r4, r3
 8000890:	d1f2      	bne.n	8000878 <__gnu_unwind_pr_common+0x17c>
 8000892:	4620      	mov	r0, r4
 8000894:	f7ff fcd4 	bl	8000240 <selfrel_offset31>
 8000898:	210f      	movs	r1, #15
 800089a:	4602      	mov	r2, r0
 800089c:	4638      	mov	r0, r7
 800089e:	f7ff fee1 	bl	8000664 <_Unwind_SetGR>
 80008a2:	4638      	mov	r0, r7
 80008a4:	462a      	mov	r2, r5
 80008a6:	2100      	movs	r1, #0
 80008a8:	f7ff fedc 	bl	8000664 <_Unwind_SetGR>
 80008ac:	2007      	movs	r0, #7
 80008ae:	e750      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 80008b0:	210d      	movs	r1, #13
 80008b2:	4638      	mov	r0, r7
 80008b4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80008b8:	f7ff feae 	bl	8000618 <_Unwind_GetGR>
 80008bc:	4581      	cmp	r9, r0
 80008be:	d001      	beq.n	80008c4 <__gnu_unwind_pr_common+0x1c8>
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	e7b6      	b.n	8000832 <__gnu_unwind_pr_common+0x136>
 80008c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008c6:	429c      	cmp	r4, r3
 80008c8:	d1fa      	bne.n	80008c0 <__gnu_unwind_pr_common+0x1c4>
 80008ca:	2304      	movs	r3, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80008d2:	18e3      	adds	r3, r4, r3
 80008d4:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80008d8:	636b      	str	r3, [r5, #52]	; 0x34
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db5a      	blt.n	8000996 <__gnu_unwind_pr_common+0x29a>
 80008e0:	2301      	movs	r3, #1
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	e7a8      	b.n	8000838 <__gnu_unwind_pr_common+0x13c>
 80008e6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80008ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80008ee:	4691      	mov	r9, r2
 80008f0:	46b0      	mov	r8, r6
 80008f2:	f104 0a04 	add.w	sl, r4, #4
 80008f6:	461e      	mov	r6, r3
 80008f8:	e00e      	b.n	8000918 <__gnu_unwind_pr_common+0x21c>
 80008fa:	4650      	mov	r0, sl
 80008fc:	9604      	str	r6, [sp, #16]
 80008fe:	f7ff fd6b 	bl	80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000902:	2200      	movs	r2, #0
 8000904:	4601      	mov	r1, r0
 8000906:	ab04      	add	r3, sp, #16
 8000908:	4628      	mov	r0, r5
 800090a:	f109 0901 	add.w	r9, r9, #1
 800090e:	f10a 0a04 	add.w	sl, sl, #4
 8000912:	f3af 8000 	nop.w
 8000916:	b9e8      	cbnz	r0, 8000954 <__gnu_unwind_pr_common+0x258>
 8000918:	45d9      	cmp	r9, fp
 800091a:	d1ee      	bne.n	80008fa <__gnu_unwind_pr_common+0x1fe>
 800091c:	210d      	movs	r1, #13
 800091e:	4638      	mov	r0, r7
 8000920:	f7ff fe7a 	bl	8000618 <_Unwind_GetGR>
 8000924:	4603      	mov	r3, r0
 8000926:	9a04      	ldr	r2, [sp, #16]
 8000928:	2006      	movs	r0, #6
 800092a:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 800092e:	622b      	str	r3, [r5, #32]
 8000930:	e70f      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000932:	4681      	mov	r9, r0
 8000934:	210d      	movs	r1, #13
 8000936:	4638      	mov	r0, r7
 8000938:	f7ff fe6e 	bl	8000618 <_Unwind_GetGR>
 800093c:	f1b9 0f02 	cmp.w	r9, #2
 8000940:	6228      	str	r0, [r5, #32]
 8000942:	d125      	bne.n	8000990 <__gnu_unwind_pr_common+0x294>
 8000944:	462b      	mov	r3, r5
 8000946:	9a04      	ldr	r2, [sp, #16]
 8000948:	f843 2f2c 	str.w	r2, [r3, #44]!
 800094c:	626b      	str	r3, [r5, #36]	; 0x24
 800094e:	2006      	movs	r0, #6
 8000950:	62ac      	str	r4, [r5, #40]	; 0x28
 8000952:	e6fe      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000954:	4646      	mov	r6, r8
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800095c:	e769      	b.n	8000832 <__gnu_unwind_pr_common+0x136>
 800095e:	4620      	mov	r0, r4
 8000960:	f7ff fc6e 	bl	8000240 <selfrel_offset31>
 8000964:	4602      	mov	r2, r0
 8000966:	3404      	adds	r4, #4
 8000968:	63ac      	str	r4, [r5, #56]	; 0x38
 800096a:	4628      	mov	r0, r5
 800096c:	4614      	mov	r4, r2
 800096e:	f3af 8000 	nop.w
 8000972:	2800      	cmp	r0, #0
 8000974:	f43f aeec 	beq.w	8000750 <__gnu_unwind_pr_common+0x54>
 8000978:	4638      	mov	r0, r7
 800097a:	4622      	mov	r2, r4
 800097c:	210f      	movs	r1, #15
 800097e:	f7ff fe71 	bl	8000664 <_Unwind_SetGR>
 8000982:	2007      	movs	r0, #7
 8000984:	e6e5      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000986:	210d      	movs	r1, #13
 8000988:	4638      	mov	r0, r7
 800098a:	f7ff fe45 	bl	8000618 <_Unwind_GetGR>
 800098e:	6228      	str	r0, [r5, #32]
 8000990:	9b04      	ldr	r3, [sp, #16]
 8000992:	626b      	str	r3, [r5, #36]	; 0x24
 8000994:	e7db      	b.n	800094e <__gnu_unwind_pr_common+0x252>
 8000996:	f10b 0001 	add.w	r0, fp, #1
 800099a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800099e:	e779      	b.n	8000894 <__gnu_unwind_pr_common+0x198>
 80009a0:	00000000 	.word	0x00000000

080009a4 <__aeabi_unwind_cpp_pr0>:
 80009a4:	2300      	movs	r3, #0
 80009a6:	e6a9      	b.n	80006fc <__gnu_unwind_pr_common>

080009a8 <__aeabi_unwind_cpp_pr1>:
 80009a8:	2301      	movs	r3, #1
 80009aa:	e6a7      	b.n	80006fc <__gnu_unwind_pr_common>

080009ac <__aeabi_unwind_cpp_pr2>:
 80009ac:	2302      	movs	r3, #2
 80009ae:	e6a5      	b.n	80006fc <__gnu_unwind_pr_common>

080009b0 <_Unwind_VRS_Pop>:
 80009b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009b4:	4606      	mov	r6, r0
 80009b6:	4615      	mov	r5, r2
 80009b8:	461c      	mov	r4, r3
 80009ba:	b0c3      	sub	sp, #268	; 0x10c
 80009bc:	2904      	cmp	r1, #4
 80009be:	f200 80b8 	bhi.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009c2:	e8df f001 	tbb	[pc, r1]
 80009c6:	569c      	.short	0x569c
 80009c8:	2db6      	.short	0x2db6
 80009ca:	03          	.byte	0x03
 80009cb:	00          	.byte	0x00
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	f040 80b0 	bne.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009d2:	2a10      	cmp	r2, #16
 80009d4:	f200 80ad 	bhi.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009d8:	6803      	ldr	r3, [r0, #0]
 80009da:	06d8      	lsls	r0, r3, #27
 80009dc:	f100 80f1 	bmi.w	8000bc2 <_Unwind_VRS_Pop+0x212>
 80009e0:	af20      	add	r7, sp, #128	; 0x80
 80009e2:	4638      	mov	r0, r7
 80009e4:	f000 f990 	bl	8000d08 <__gnu_Unwind_Save_WMMXC>
 80009e8:	2401      	movs	r4, #1
 80009ea:	4638      	mov	r0, r7
 80009ec:	2300      	movs	r3, #0
 80009ee:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80009f0:	fa04 f203 	lsl.w	r2, r4, r3
 80009f4:	422a      	tst	r2, r5
 80009f6:	f103 0301 	add.w	r3, r3, #1
 80009fa:	d005      	beq.n	8000a08 <_Unwind_VRS_Pop+0x58>
 80009fc:	460a      	mov	r2, r1
 80009fe:	f852 cb04 	ldr.w	ip, [r2], #4
 8000a02:	4611      	mov	r1, r2
 8000a04:	f8c0 c000 	str.w	ip, [r0]
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	f100 0004 	add.w	r0, r0, #4
 8000a0e:	d1ef      	bne.n	80009f0 <_Unwind_VRS_Pop+0x40>
 8000a10:	4638      	mov	r0, r7
 8000a12:	63b1      	str	r1, [r6, #56]	; 0x38
 8000a14:	f000 f96e 	bl	8000cf4 <__gnu_Unwind_Restore_WMMXC>
 8000a18:	2000      	movs	r0, #0
 8000a1a:	b043      	add	sp, #268	; 0x10c
 8000a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a20:	2c03      	cmp	r4, #3
 8000a22:	f040 8086 	bne.w	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a26:	b294      	uxth	r4, r2
 8000a28:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000a2c:	2b10      	cmp	r3, #16
 8000a2e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000a32:	d87e      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a34:	6803      	ldr	r3, [r0, #0]
 8000a36:	071f      	lsls	r7, r3, #28
 8000a38:	f100 80cb 	bmi.w	8000bd2 <_Unwind_VRS_Pop+0x222>
 8000a3c:	af20      	add	r7, sp, #128	; 0x80
 8000a3e:	4638      	mov	r0, r7
 8000a40:	f000 f936 	bl	8000cb0 <__gnu_Unwind_Save_WMMXD>
 8000a44:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000a46:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000a4a:	b154      	cbz	r4, 8000a62 <_Unwind_VRS_Pop+0xb2>
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000a52:	1ad0      	subs	r0, r2, r3
 8000a54:	00e4      	lsls	r4, r4, #3
 8000a56:	581d      	ldr	r5, [r3, r0]
 8000a58:	f843 5b04 	str.w	r5, [r3], #4
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d1fa      	bne.n	8000a56 <_Unwind_VRS_Pop+0xa6>
 8000a60:	4422      	add	r2, r4
 8000a62:	4638      	mov	r0, r7
 8000a64:	63b2      	str	r2, [r6, #56]	; 0x38
 8000a66:	f000 f901 	bl	8000c6c <__gnu_Unwind_Restore_WMMXD>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	b043      	add	sp, #268	; 0x10c
 8000a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a72:	2c01      	cmp	r4, #1
 8000a74:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000a78:	b295      	uxth	r5, r2
 8000a7a:	d056      	beq.n	8000b2a <_Unwind_VRS_Pop+0x17a>
 8000a7c:	2c05      	cmp	r4, #5
 8000a7e:	d158      	bne.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a80:	eb08 0905 	add.w	r9, r8, r5
 8000a84:	f1b9 0f20 	cmp.w	r9, #32
 8000a88:	d853      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a8a:	f1b8 0f0f 	cmp.w	r8, #15
 8000a8e:	d973      	bls.n	8000b78 <_Unwind_VRS_Pop+0x1c8>
 8000a90:	46a9      	mov	r9, r5
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f040 8084 	bne.w	8000ba0 <_Unwind_VRS_Pop+0x1f0>
 8000a98:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a9a:	b365      	cbz	r5, 8000af6 <_Unwind_VRS_Pop+0x146>
 8000a9c:	af20      	add	r7, sp, #128	; 0x80
 8000a9e:	f04f 0900 	mov.w	r9, #0
 8000aa2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000aa6:	3f04      	subs	r7, #4
 8000aa8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000aac:	f853 1b04 	ldr.w	r1, [r3], #4
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	f847 1f04 	str.w	r1, [r7, #4]!
 8000ab6:	d1f9      	bne.n	8000aac <_Unwind_VRS_Pop+0xfc>
 8000ab8:	f1b9 0f00 	cmp.w	r9, #0
 8000abc:	d00f      	beq.n	8000ade <_Unwind_VRS_Pop+0x12e>
 8000abe:	466f      	mov	r7, sp
 8000ac0:	4641      	mov	r1, r8
 8000ac2:	2910      	cmp	r1, #16
 8000ac4:	bf38      	it	cc
 8000ac6:	2110      	movcc	r1, #16
 8000ac8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000acc:	3984      	subs	r1, #132	; 0x84
 8000ace:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000ad2:	f853 0b04 	ldr.w	r0, [r3], #4
 8000ad6:	42ab      	cmp	r3, r5
 8000ad8:	f841 0f04 	str.w	r0, [r1, #4]!
 8000adc:	d1f9      	bne.n	8000ad2 <_Unwind_VRS_Pop+0x122>
 8000ade:	2c01      	cmp	r4, #1
 8000ae0:	d07f      	beq.n	8000be2 <_Unwind_VRS_Pop+0x232>
 8000ae2:	f1b8 0f0f 	cmp.w	r8, #15
 8000ae6:	63b5      	str	r5, [r6, #56]	; 0x38
 8000ae8:	d942      	bls.n	8000b70 <_Unwind_VRS_Pop+0x1c0>
 8000aea:	f1b9 0f00 	cmp.w	r9, #0
 8000aee:	d002      	beq.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000af0:	4668      	mov	r0, sp
 8000af2:	f000 f8b3 	bl	8000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000af6:	2000      	movs	r0, #0
 8000af8:	b043      	add	sp, #268	; 0x10c
 8000afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000afe:	b9c4      	cbnz	r4, 8000b32 <_Unwind_VRS_Pop+0x182>
 8000b00:	4623      	mov	r3, r4
 8000b02:	2401      	movs	r4, #1
 8000b04:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000b06:	1d37      	adds	r7, r6, #4
 8000b08:	b2a8      	uxth	r0, r5
 8000b0a:	fa04 f103 	lsl.w	r1, r4, r3
 8000b0e:	4201      	tst	r1, r0
 8000b10:	bf1c      	itt	ne
 8000b12:	f852 1b04 	ldrne.w	r1, [r2], #4
 8000b16:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	2b10      	cmp	r3, #16
 8000b1e:	d1f4      	bne.n	8000b0a <_Unwind_VRS_Pop+0x15a>
 8000b20:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000b24:	d1e7      	bne.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000b26:	63b2      	str	r2, [r6, #56]	; 0x38
 8000b28:	e004      	b.n	8000b34 <_Unwind_VRS_Pop+0x184>
 8000b2a:	eb08 0305 	add.w	r3, r8, r5
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d903      	bls.n	8000b3a <_Unwind_VRS_Pop+0x18a>
 8000b32:	2002      	movs	r0, #2
 8000b34:	b043      	add	sp, #268	; 0x10c
 8000b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b3a:	f1b8 0f0f 	cmp.w	r8, #15
 8000b3e:	d8f8      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000b40:	6833      	ldr	r3, [r6, #0]
 8000b42:	07da      	lsls	r2, r3, #31
 8000b44:	d506      	bpl.n	8000b54 <_Unwind_VRS_Pop+0x1a4>
 8000b46:	4630      	mov	r0, r6
 8000b48:	f023 0303 	bic.w	r3, r3, #3
 8000b4c:	f840 3b48 	str.w	r3, [r0], #72
 8000b50:	f000 f878 	bl	8000c44 <__gnu_Unwind_Save_VFP>
 8000b54:	af20      	add	r7, sp, #128	; 0x80
 8000b56:	4638      	mov	r0, r7
 8000b58:	f000 f874 	bl	8000c44 <__gnu_Unwind_Save_VFP>
 8000b5c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d19d      	bne.n	8000a9e <_Unwind_VRS_Pop+0xee>
 8000b62:	461d      	mov	r5, r3
 8000b64:	3504      	adds	r5, #4
 8000b66:	4638      	mov	r0, r7
 8000b68:	63b5      	str	r5, [r6, #56]	; 0x38
 8000b6a:	f000 f867 	bl	8000c3c <__gnu_Unwind_Restore_VFP>
 8000b6e:	e7c2      	b.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000b70:	a820      	add	r0, sp, #128	; 0x80
 8000b72:	f000 f86b 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000b76:	e7b8      	b.n	8000aea <_Unwind_VRS_Pop+0x13a>
 8000b78:	f1b9 0f10 	cmp.w	r9, #16
 8000b7c:	d93f      	bls.n	8000bfe <_Unwind_VRS_Pop+0x24e>
 8000b7e:	f1a9 0910 	sub.w	r9, r9, #16
 8000b82:	6833      	ldr	r3, [r6, #0]
 8000b84:	07d9      	lsls	r1, r3, #31
 8000b86:	d508      	bpl.n	8000b9a <_Unwind_VRS_Pop+0x1ea>
 8000b88:	4630      	mov	r0, r6
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f840 3b48 	str.w	r3, [r0], #72
 8000b96:	f000 f85d 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000b9a:	f1b9 0f00 	cmp.w	r9, #0
 8000b9e:	d031      	beq.n	8000c04 <_Unwind_VRS_Pop+0x254>
 8000ba0:	6833      	ldr	r3, [r6, #0]
 8000ba2:	075a      	lsls	r2, r3, #29
 8000ba4:	d41f      	bmi.n	8000be6 <_Unwind_VRS_Pop+0x236>
 8000ba6:	f1b8 0f0f 	cmp.w	r8, #15
 8000baa:	d924      	bls.n	8000bf6 <_Unwind_VRS_Pop+0x246>
 8000bac:	466f      	mov	r7, sp
 8000bae:	f1c8 0510 	rsb	r5, r8, #16
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	f000 f856 	bl	8000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000bbc:	dd80      	ble.n	8000ac0 <_Unwind_VRS_Pop+0x110>
 8000bbe:	af20      	add	r7, sp, #128	; 0x80
 8000bc0:	e76f      	b.n	8000aa2 <_Unwind_VRS_Pop+0xf2>
 8000bc2:	f023 0310 	bic.w	r3, r3, #16
 8000bc6:	6033      	str	r3, [r6, #0]
 8000bc8:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000bcc:	f000 f89c 	bl	8000d08 <__gnu_Unwind_Save_WMMXC>
 8000bd0:	e706      	b.n	80009e0 <_Unwind_VRS_Pop+0x30>
 8000bd2:	f023 0308 	bic.w	r3, r3, #8
 8000bd6:	6003      	str	r3, [r0, #0]
 8000bd8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000bdc:	f000 f868 	bl	8000cb0 <__gnu_Unwind_Save_WMMXD>
 8000be0:	e72c      	b.n	8000a3c <_Unwind_VRS_Pop+0x8c>
 8000be2:	af20      	add	r7, sp, #128	; 0x80
 8000be4:	e7be      	b.n	8000b64 <_Unwind_VRS_Pop+0x1b4>
 8000be6:	4630      	mov	r0, r6
 8000be8:	f023 0304 	bic.w	r3, r3, #4
 8000bec:	f840 3bd0 	str.w	r3, [r0], #208
 8000bf0:	f000 f838 	bl	8000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bf4:	e7d7      	b.n	8000ba6 <_Unwind_VRS_Pop+0x1f6>
 8000bf6:	a820      	add	r0, sp, #128	; 0x80
 8000bf8:	f000 f82c 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000bfc:	e7d6      	b.n	8000bac <_Unwind_VRS_Pop+0x1fc>
 8000bfe:	f04f 0900 	mov.w	r9, #0
 8000c02:	e7be      	b.n	8000b82 <_Unwind_VRS_Pop+0x1d2>
 8000c04:	f1b8 0f0f 	cmp.w	r8, #15
 8000c08:	f63f af46 	bhi.w	8000a98 <_Unwind_VRS_Pop+0xe8>
 8000c0c:	af20      	add	r7, sp, #128	; 0x80
 8000c0e:	4638      	mov	r0, r7
 8000c10:	f000 f820 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000c14:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	f47f af41 	bne.w	8000a9e <_Unwind_VRS_Pop+0xee>
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	f000 f815 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000c22:	e768      	b.n	8000af6 <_Unwind_VRS_Pop+0x146>

08000c24 <__restore_core_regs>:
 8000c24:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000c28:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000c2c:	469c      	mov	ip, r3
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000c34:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000c38:	46e5      	mov	sp, ip
 8000c3a:	bd00      	pop	{pc}

08000c3c <__gnu_Unwind_Restore_VFP>:
 8000c3c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <__gnu_Unwind_Save_VFP>:
 8000c44:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__gnu_Unwind_Restore_VFP_D>:
 8000c4c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__gnu_Unwind_Save_VFP_D>:
 8000c54:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000c5c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000c64:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__gnu_Unwind_Restore_WMMXD>:
 8000c6c:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c70:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c74:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c78:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c7c:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c80:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c84:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c88:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c8c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c90:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c94:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c98:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c9c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000ca0:	ecf0 d102 	ldfp	f5, [r0], #8
 8000ca4:	ecf0 e102 	ldfp	f6, [r0], #8
 8000ca8:	ecf0 f102 	ldfp	f7, [r0], #8
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__gnu_Unwind_Save_WMMXD>:
 8000cb0:	ece0 0102 	stfe	f0, [r0], #8
 8000cb4:	ece0 1102 	stfe	f1, [r0], #8
 8000cb8:	ece0 2102 	stfe	f2, [r0], #8
 8000cbc:	ece0 3102 	stfe	f3, [r0], #8
 8000cc0:	ece0 4102 	stfe	f4, [r0], #8
 8000cc4:	ece0 5102 	stfe	f5, [r0], #8
 8000cc8:	ece0 6102 	stfe	f6, [r0], #8
 8000ccc:	ece0 7102 	stfe	f7, [r0], #8
 8000cd0:	ece0 8102 	stfp	f0, [r0], #8
 8000cd4:	ece0 9102 	stfp	f1, [r0], #8
 8000cd8:	ece0 a102 	stfp	f2, [r0], #8
 8000cdc:	ece0 b102 	stfp	f3, [r0], #8
 8000ce0:	ece0 c102 	stfp	f4, [r0], #8
 8000ce4:	ece0 d102 	stfp	f5, [r0], #8
 8000ce8:	ece0 e102 	stfp	f6, [r0], #8
 8000cec:	ece0 f102 	stfp	f7, [r0], #8
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <__gnu_Unwind_Restore_WMMXC>:
 8000cf4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000cf8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000cfc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000d00:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__gnu_Unwind_Save_WMMXC>:
 8000d08:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000d0c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000d10:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000d14:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <_Unwind_RaiseException>:
 8000d1c:	46ec      	mov	ip, sp
 8000d1e:	b500      	push	{lr}
 8000d20:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d24:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d30:	a901      	add	r1, sp, #4
 8000d32:	f7ff fbe7 	bl	8000504 <__gnu_Unwind_RaiseException>
 8000d36:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d3a:	b012      	add	sp, #72	; 0x48
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <_Unwind_Resume>:
 8000d40:	46ec      	mov	ip, sp
 8000d42:	b500      	push	{lr}
 8000d44:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d48:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d54:	a901      	add	r1, sp, #4
 8000d56:	f7ff fc13 	bl	8000580 <__gnu_Unwind_Resume>
 8000d5a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d5e:	b012      	add	sp, #72	; 0x48
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <_Unwind_Resume_or_Rethrow>:
 8000d64:	46ec      	mov	ip, sp
 8000d66:	b500      	push	{lr}
 8000d68:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d6c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d78:	a901      	add	r1, sp, #4
 8000d7a:	f7ff fc23 	bl	80005c4 <__gnu_Unwind_Resume_or_Rethrow>
 8000d7e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d82:	b012      	add	sp, #72	; 0x48
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <_Unwind_ForcedUnwind>:
 8000d88:	46ec      	mov	ip, sp
 8000d8a:	b500      	push	{lr}
 8000d8c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d90:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d9c:	ab01      	add	r3, sp, #4
 8000d9e:	f7ff fbe5 	bl	800056c <__gnu_Unwind_ForcedUnwind>
 8000da2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000da6:	b012      	add	sp, #72	; 0x48
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <_Unwind_Backtrace>:
 8000dac:	46ec      	mov	ip, sp
 8000dae:	b500      	push	{lr}
 8000db0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000db4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000dc0:	aa01      	add	r2, sp, #4
 8000dc2:	f7ff fc5b 	bl	800067c <__gnu_Unwind_Backtrace>
 8000dc6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000dca:	b012      	add	sp, #72	; 0x48
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <next_unwind_byte>:
 8000dd0:	7a02      	ldrb	r2, [r0, #8]
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b97a      	cbnz	r2, 8000df6 <next_unwind_byte+0x26>
 8000dd6:	7a42      	ldrb	r2, [r0, #9]
 8000dd8:	b1a2      	cbz	r2, 8000e04 <next_unwind_byte+0x34>
 8000dda:	f04f 0c03 	mov.w	ip, #3
 8000dde:	6841      	ldr	r1, [r0, #4]
 8000de0:	3a01      	subs	r2, #1
 8000de2:	7242      	strb	r2, [r0, #9]
 8000de4:	6808      	ldr	r0, [r1, #0]
 8000de6:	1d0a      	adds	r2, r1, #4
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	0202      	lsls	r2, r0, #8
 8000dec:	f883 c008 	strb.w	ip, [r3, #8]
 8000df0:	0e00      	lsrs	r0, r0, #24
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	4770      	bx	lr
 8000df6:	6800      	ldr	r0, [r0, #0]
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	721a      	strb	r2, [r3, #8]
 8000dfc:	0202      	lsls	r2, r0, #8
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	0e00      	lsrs	r0, r0, #24
 8000e02:	4770      	bx	lr
 8000e04:	20b0      	movs	r0, #176	; 0xb0
 8000e06:	4770      	bx	lr

08000e08 <_Unwind_GetGR.constprop.0>:
 8000e08:	2300      	movs	r3, #0
 8000e0a:	b500      	push	{lr}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	a903      	add	r1, sp, #12
 8000e10:	9100      	str	r1, [sp, #0]
 8000e12:	220c      	movs	r2, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	f7ff fbe7 	bl	80005e8 <_Unwind_VRS_Get>
 8000e1a:	9803      	ldr	r0, [sp, #12]
 8000e1c:	b005      	add	sp, #20
 8000e1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e22:	bf00      	nop

08000e24 <unwind_UCB_from_context>:
 8000e24:	e7f0      	b.n	8000e08 <_Unwind_GetGR.constprop.0>
 8000e26:	bf00      	nop

08000e28 <__gnu_unwind_execute>:
 8000e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e2c:	f04f 0800 	mov.w	r8, #0
 8000e30:	4605      	mov	r5, r0
 8000e32:	460e      	mov	r6, r1
 8000e34:	b085      	sub	sp, #20
 8000e36:	4630      	mov	r0, r6
 8000e38:	f7ff ffca 	bl	8000dd0 <next_unwind_byte>
 8000e3c:	28b0      	cmp	r0, #176	; 0xb0
 8000e3e:	4604      	mov	r4, r0
 8000e40:	f000 80ba 	beq.w	8000fb8 <__gnu_unwind_execute+0x190>
 8000e44:	0607      	lsls	r7, r0, #24
 8000e46:	d520      	bpl.n	8000e8a <__gnu_unwind_execute+0x62>
 8000e48:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000e4c:	2b80      	cmp	r3, #128	; 0x80
 8000e4e:	d04d      	beq.n	8000eec <__gnu_unwind_execute+0xc4>
 8000e50:	2b90      	cmp	r3, #144	; 0x90
 8000e52:	d036      	beq.n	8000ec2 <__gnu_unwind_execute+0x9a>
 8000e54:	2ba0      	cmp	r3, #160	; 0xa0
 8000e56:	d060      	beq.n	8000f1a <__gnu_unwind_execute+0xf2>
 8000e58:	2bb0      	cmp	r3, #176	; 0xb0
 8000e5a:	d073      	beq.n	8000f44 <__gnu_unwind_execute+0x11c>
 8000e5c:	2bc0      	cmp	r3, #192	; 0xc0
 8000e5e:	f000 808a 	beq.w	8000f76 <__gnu_unwind_execute+0x14e>
 8000e62:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e66:	2bd0      	cmp	r3, #208	; 0xd0
 8000e68:	d10b      	bne.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000e6a:	f000 0207 	and.w	r2, r0, #7
 8000e6e:	3201      	adds	r2, #1
 8000e70:	2305      	movs	r3, #5
 8000e72:	2101      	movs	r1, #1
 8000e74:	4628      	mov	r0, r5
 8000e76:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e7a:	f7ff fd99 	bl	80009b0 <_Unwind_VRS_Pop>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d0d9      	beq.n	8000e36 <__gnu_unwind_execute+0xe>
 8000e82:	2009      	movs	r0, #9
 8000e84:	b005      	add	sp, #20
 8000e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e8a:	0083      	lsls	r3, r0, #2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	1d1f      	adds	r7, r3, #4
 8000e90:	2300      	movs	r3, #0
 8000e92:	f10d 090c 	add.w	r9, sp, #12
 8000e96:	4619      	mov	r1, r3
 8000e98:	220d      	movs	r2, #13
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f8cd 9000 	str.w	r9, [sp]
 8000ea0:	f7ff fba2 	bl	80005e8 <_Unwind_VRS_Get>
 8000ea4:	9b03      	ldr	r3, [sp, #12]
 8000ea6:	0660      	lsls	r0, r4, #25
 8000ea8:	bf4c      	ite	mi
 8000eaa:	1bdf      	submi	r7, r3, r7
 8000eac:	18ff      	addpl	r7, r7, r3
 8000eae:	2300      	movs	r3, #0
 8000eb0:	220d      	movs	r2, #13
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f8cd 9000 	str.w	r9, [sp]
 8000eba:	9703      	str	r7, [sp, #12]
 8000ebc:	f7ff fbba 	bl	8000634 <_Unwind_VRS_Set>
 8000ec0:	e7b9      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000ec2:	f000 030d 	and.w	r3, r0, #13
 8000ec6:	2b0d      	cmp	r3, #13
 8000ec8:	d0db      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	af03      	add	r7, sp, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f000 020f 	and.w	r2, r0, #15
 8000ed4:	9700      	str	r7, [sp, #0]
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	f7ff fb86 	bl	80005e8 <_Unwind_VRS_Get>
 8000edc:	2300      	movs	r3, #0
 8000ede:	220d      	movs	r2, #13
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	9700      	str	r7, [sp, #0]
 8000ee6:	f7ff fba5 	bl	8000634 <_Unwind_VRS_Set>
 8000eea:	e7a4      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000eec:	4630      	mov	r0, r6
 8000eee:	f7ff ff6f 	bl	8000dd0 <next_unwind_byte>
 8000ef2:	0224      	lsls	r4, r4, #8
 8000ef4:	4320      	orrs	r0, r4
 8000ef6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000efa:	d0c2      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000efc:	2300      	movs	r3, #0
 8000efe:	0104      	lsls	r4, r0, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4628      	mov	r0, r5
 8000f04:	b2a2      	uxth	r2, r4
 8000f06:	f7ff fd53 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d1b9      	bne.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f0e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000f12:	bf18      	it	ne
 8000f14:	f04f 0801 	movne.w	r8, #1
 8000f18:	e78d      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000f1a:	43c3      	mvns	r3, r0
 8000f1c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	411a      	asrs	r2, r3
 8000f26:	2300      	movs	r3, #0
 8000f28:	0701      	lsls	r1, r0, #28
 8000f2a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000f2e:	bf48      	it	mi
 8000f30:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000f34:	4628      	mov	r0, r5
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fd3a 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	f43f af7a 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000f42:	e79e      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f44:	28b1      	cmp	r0, #177	; 0xb1
 8000f46:	d03c      	beq.n	8000fc2 <__gnu_unwind_execute+0x19a>
 8000f48:	28b2      	cmp	r0, #178	; 0xb2
 8000f4a:	f000 80b0 	beq.w	80010ae <__gnu_unwind_execute+0x286>
 8000f4e:	28b3      	cmp	r0, #179	; 0xb3
 8000f50:	d04a      	beq.n	8000fe8 <__gnu_unwind_execute+0x1c0>
 8000f52:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000f56:	2bb4      	cmp	r3, #180	; 0xb4
 8000f58:	d093      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f000 0207 	and.w	r2, r0, #7
 8000f60:	441a      	add	r2, r3
 8000f62:	4628      	mov	r0, r5
 8000f64:	4619      	mov	r1, r3
 8000f66:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f6a:	f7ff fd21 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	f43f af61 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000f74:	e785      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f76:	28c6      	cmp	r0, #198	; 0xc6
 8000f78:	d04f      	beq.n	800101a <__gnu_unwind_execute+0x1f2>
 8000f7a:	28c7      	cmp	r0, #199	; 0xc7
 8000f7c:	d061      	beq.n	8001042 <__gnu_unwind_execute+0x21a>
 8000f7e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f82:	2bc0      	cmp	r3, #192	; 0xc0
 8000f84:	d070      	beq.n	8001068 <__gnu_unwind_execute+0x240>
 8000f86:	28c8      	cmp	r0, #200	; 0xc8
 8000f88:	d07c      	beq.n	8001084 <__gnu_unwind_execute+0x25c>
 8000f8a:	28c9      	cmp	r0, #201	; 0xc9
 8000f8c:	f47f af79 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000f90:	4630      	mov	r0, r6
 8000f92:	f7ff ff1d 	bl	8000dd0 <next_unwind_byte>
 8000f96:	2305      	movs	r3, #5
 8000f98:	4602      	mov	r2, r0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	0314      	lsls	r4, r2, #12
 8000fa0:	f002 020f 	and.w	r2, r2, #15
 8000fa4:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000fa8:	440a      	add	r2, r1
 8000faa:	4322      	orrs	r2, r4
 8000fac:	f7ff fd00 	bl	80009b0 <_Unwind_VRS_Pop>
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	f43f af40 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000fb6:	e764      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000fb8:	f1b8 0f00 	cmp.w	r8, #0
 8000fbc:	d01c      	beq.n	8000ff8 <__gnu_unwind_execute+0x1d0>
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	e760      	b.n	8000e84 <__gnu_unwind_execute+0x5c>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	f7ff ff04 	bl	8000dd0 <next_unwind_byte>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	f43f af59 	beq.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000fd0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fd4:	f47f af55 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f7ff fce8 	bl	80009b0 <_Unwind_VRS_Pop>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	f43f af28 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000fe6:	e74c      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f7ff fef1 	bl	8000dd0 <next_unwind_byte>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	e7d2      	b.n	8000f9e <__gnu_unwind_execute+0x176>
 8000ff8:	ac03      	add	r4, sp, #12
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	220e      	movs	r2, #14
 8000ffe:	4641      	mov	r1, r8
 8001000:	4628      	mov	r0, r5
 8001002:	9400      	str	r4, [sp, #0]
 8001004:	f7ff faf0 	bl	80005e8 <_Unwind_VRS_Get>
 8001008:	4643      	mov	r3, r8
 800100a:	220f      	movs	r2, #15
 800100c:	4628      	mov	r0, r5
 800100e:	4641      	mov	r1, r8
 8001010:	9400      	str	r4, [sp, #0]
 8001012:	f7ff fb0f 	bl	8000634 <_Unwind_VRS_Set>
 8001016:	4640      	mov	r0, r8
 8001018:	e734      	b.n	8000e84 <__gnu_unwind_execute+0x5c>
 800101a:	4630      	mov	r0, r6
 800101c:	f7ff fed8 	bl	8000dd0 <next_unwind_byte>
 8001020:	4602      	mov	r2, r0
 8001022:	2303      	movs	r3, #3
 8001024:	0314      	lsls	r4, r2, #12
 8001026:	f002 020f 	and.w	r2, r2, #15
 800102a:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 800102e:	3201      	adds	r2, #1
 8001030:	4628      	mov	r0, r5
 8001032:	4619      	mov	r1, r3
 8001034:	4322      	orrs	r2, r4
 8001036:	f7ff fcbb 	bl	80009b0 <_Unwind_VRS_Pop>
 800103a:	2800      	cmp	r0, #0
 800103c:	f43f aefb 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001040:	e71f      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001042:	4630      	mov	r0, r6
 8001044:	f7ff fec4 	bl	8000dd0 <next_unwind_byte>
 8001048:	4602      	mov	r2, r0
 800104a:	2800      	cmp	r0, #0
 800104c:	f43f af19 	beq.w	8000e82 <__gnu_unwind_execute+0x5a>
 8001050:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001054:	f47f af15 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8001058:	2104      	movs	r1, #4
 800105a:	4628      	mov	r0, r5
 800105c:	f7ff fca8 	bl	80009b0 <_Unwind_VRS_Pop>
 8001060:	2800      	cmp	r0, #0
 8001062:	f43f aee8 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001066:	e70c      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001068:	2303      	movs	r3, #3
 800106a:	f000 020f 	and.w	r2, r0, #15
 800106e:	3201      	adds	r2, #1
 8001070:	4628      	mov	r0, r5
 8001072:	4619      	mov	r1, r3
 8001074:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001078:	f7ff fc9a 	bl	80009b0 <_Unwind_VRS_Pop>
 800107c:	2800      	cmp	r0, #0
 800107e:	f43f aeda 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001082:	e6fe      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001084:	4630      	mov	r0, r6
 8001086:	f7ff fea3 	bl	8000dd0 <next_unwind_byte>
 800108a:	4602      	mov	r2, r0
 800108c:	2101      	movs	r1, #1
 800108e:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8001092:	f002 020f 	and.w	r2, r2, #15
 8001096:	3410      	adds	r4, #16
 8001098:	440a      	add	r2, r1
 800109a:	2305      	movs	r3, #5
 800109c:	4628      	mov	r0, r5
 800109e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80010a2:	f7ff fc85 	bl	80009b0 <_Unwind_VRS_Pop>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	f43f aec5 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 80010ac:	e6e9      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 80010ae:	2300      	movs	r3, #0
 80010b0:	f10d 090c 	add.w	r9, sp, #12
 80010b4:	220d      	movs	r2, #13
 80010b6:	4619      	mov	r1, r3
 80010b8:	4628      	mov	r0, r5
 80010ba:	f8cd 9000 	str.w	r9, [sp]
 80010be:	f7ff fa93 	bl	80005e8 <_Unwind_VRS_Get>
 80010c2:	4630      	mov	r0, r6
 80010c4:	f7ff fe84 	bl	8000dd0 <next_unwind_byte>
 80010c8:	0602      	lsls	r2, r0, #24
 80010ca:	f04f 0402 	mov.w	r4, #2
 80010ce:	d50c      	bpl.n	80010ea <__gnu_unwind_execute+0x2c2>
 80010d0:	9b03      	ldr	r3, [sp, #12]
 80010d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80010d6:	40a0      	lsls	r0, r4
 80010d8:	4418      	add	r0, r3
 80010da:	9003      	str	r0, [sp, #12]
 80010dc:	4630      	mov	r0, r6
 80010de:	f7ff fe77 	bl	8000dd0 <next_unwind_byte>
 80010e2:	0603      	lsls	r3, r0, #24
 80010e4:	f104 0407 	add.w	r4, r4, #7
 80010e8:	d4f2      	bmi.n	80010d0 <__gnu_unwind_execute+0x2a8>
 80010ea:	9b03      	ldr	r3, [sp, #12]
 80010ec:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80010f0:	40a2      	lsls	r2, r4
 80010f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010f6:	441a      	add	r2, r3
 80010f8:	2300      	movs	r3, #0
 80010fa:	9203      	str	r2, [sp, #12]
 80010fc:	4628      	mov	r0, r5
 80010fe:	220d      	movs	r2, #13
 8001100:	4619      	mov	r1, r3
 8001102:	f8cd 9000 	str.w	r9, [sp]
 8001106:	f7ff fa95 	bl	8000634 <_Unwind_VRS_Set>
 800110a:	e694      	b.n	8000e36 <__gnu_unwind_execute+0xe>

0800110c <__gnu_unwind_frame>:
 800110c:	460b      	mov	r3, r1
 800110e:	f04f 0c03 	mov.w	ip, #3
 8001112:	b500      	push	{lr}
 8001114:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001116:	4618      	mov	r0, r3
 8001118:	6853      	ldr	r3, [r2, #4]
 800111a:	b085      	sub	sp, #20
 800111c:	3208      	adds	r2, #8
 800111e:	9202      	str	r2, [sp, #8]
 8001120:	a901      	add	r1, sp, #4
 8001122:	0e1a      	lsrs	r2, r3, #24
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	f88d c00c 	strb.w	ip, [sp, #12]
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	f88d 200d 	strb.w	r2, [sp, #13]
 8001130:	f7ff fe7a 	bl	8000e28 <__gnu_unwind_execute>
 8001134:	b005      	add	sp, #20
 8001136:	f85d fb04 	ldr.w	pc, [sp], #4
 800113a:	bf00      	nop

0800113c <_Unwind_GetRegionStart>:
 800113c:	b508      	push	{r3, lr}
 800113e:	f7ff fe71 	bl	8000e24 <unwind_UCB_from_context>
 8001142:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001144:	bd08      	pop	{r3, pc}
 8001146:	bf00      	nop

08001148 <_Unwind_GetLanguageSpecificData>:
 8001148:	b508      	push	{r3, lr}
 800114a:	f7ff fe6b 	bl	8000e24 <unwind_UCB_from_context>
 800114e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001150:	79c3      	ldrb	r3, [r0, #7]
 8001152:	3302      	adds	r3, #2
 8001154:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001158:	bd08      	pop	{r3, pc}
 800115a:	bf00      	nop

0800115c <_ZN3I2CC1Ev>:
	I2C_HandleTypeDef mI2C;
private:
	uint8_t mBuffer[16] = {0};

public:
	I2C() {}
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <_ZN3I2CC1Ev+0x28>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3358      	adds	r3, #88	; 0x58
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	08010850 	.word	0x08010850

08001188 <_ZN3I2C10setBusDataE17I2C_HandleTypeDef>:
	I2C( I2C_HandleTypeDef bus );
	virtual ~I2C();

	void setBusData( I2C_HandleTypeDef bus ) { mI2C = bus; }
 8001188:	b084      	sub	sp, #16
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	f107 0014 	add.w	r0, r7, #20
 8001196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3304      	adds	r3, #4
 800119e:	f107 0114 	add.w	r1, r7, #20
 80011a2:	2254      	movs	r2, #84	; 0x54
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00e fd39 	bl	800fc1c <memcpy>
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011b4:	b004      	add	sp, #16
 80011b6:	4770      	bx	lr

080011b8 <_ZN7Display6setLCDEP3LCD>:
		SCREEN_MAIN = 0
	};

	Display();
	virtual ~Display();
	void setLCD( LCD *lcd ) { mLCD = lcd; }
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <_ZN3LED6setPinEt>:
public:
	LED();
	LED( GPIO_TypeDef*, uint16_t pin );
	virtual ~LED();

	void setPin( uint16_t pin ) { mPin = pin; }
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	807b      	strh	r3, [r7, #2]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	887a      	ldrh	r2, [r7, #2]
 80011e2:	811a      	strh	r2, [r3, #8]
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <_ZN3LED7setPortEP12GPIO_TypeDef>:
	void setPort( GPIO_TypeDef* port ) { mPort = port; }
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	6039      	str	r1, [r7, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>:
	void setPortAndPin( GPIO_TypeDef* port, uint16_t pin ) { setPin( pin ); setPort( port ); }
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	4613      	mov	r3, r2
 8001214:	80fb      	strh	r3, [r7, #6]
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	4619      	mov	r1, r3
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f7ff ffd9 	bl	80011d2 <_ZN3LED6setPinEt>
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f7ff ffe3 	bl	80011ee <_ZN3LED7setPortEP12GPIO_TypeDef>
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <_ZN5Audio10setDecoderEP12DolbyDecoder>:
public:
	Audio( Amplifier *amp );
	virtual ~Audio();

	virtual void run();
	virtual void setDecoder( DolbyDecoder *decoder ) { mDecoder = decoder; }
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <_ZN5Audio6setDACEP6DAC_IC>:
	virtual void setDAC( DAC_IC *dac ) { mDAC = dac; }
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <_ZN9AmplifierC1Ev>:
#include "I2CDevice.h"
#include "DACPCM1681.h"
#include "DolbyDecoderSTA310.h"
#include "usbd_cdc_if.h"

Amplifier::Amplifier() : mUI( this ), mAudio( this ), mDAC( 0 ), mDecoder( 0 ),  mLastVolumeTimer( 0 ), mCurrentVolume( 50 ) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <_ZN9AmplifierC1Ev+0x78>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3304      	adds	r3, #4
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4618      	mov	r0, r3
 800127a:	f001 fc17 	bl	8002aac <_ZN2UIC1EP9Amplifier>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	330c      	adds	r3, #12
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fc9e 	bl	8001bc4 <_ZN7DisplayC1Ev>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3320      	adds	r3, #32
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f99e 	bl	80015d0 <_ZN5AudioC1EP9Amplifier>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3334      	adds	r3, #52	; 0x34
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fb89 	bl	80029b0 <_ZN3LEDC1Ev>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3344      	adds	r3, #68	; 0x44
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fb84 	bl	80029b0 <_ZN3LEDC1Ev>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3354      	adds	r3, #84	; 0x54
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff55 	bl	800115c <_ZN3I2CC1Ev>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2232      	movs	r2, #50	; 0x32
 80012ce:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	// TODO Auto-generated constructor stub
}
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	0801073c 	.word	0x0801073c

080012e0 <_ZN9AmplifierD1Ev>:

Amplifier::~Amplifier() {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	4a12      	ldr	r2, [pc, #72]	; (8001334 <_ZN9AmplifierD1Ev+0x54>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3354      	adds	r3, #84	; 0x54
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 f82c 	bl	8002350 <_ZN3I2CD1Ev>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3344      	adds	r3, #68	; 0x44
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 fb6f 	bl	80029e0 <_ZN3LEDD1Ev>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3334      	adds	r3, #52	; 0x34
 8001306:	4618      	mov	r0, r3
 8001308:	f001 fb6a 	bl	80029e0 <_ZN3LEDD1Ev>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3320      	adds	r3, #32
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f97b 	bl	800160c <_ZN5AudioD1Ev>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	330c      	adds	r3, #12
 800131a:	4618      	mov	r0, r3
 800131c:	f000 fc6e 	bl	8001bfc <_ZN7DisplayD1Ev>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3304      	adds	r3, #4
 8001324:	4618      	mov	r0, r3
 8001326:	f001 fbd5 	bl	8002ad4 <_ZN2UID1Ev>
	// TODO Auto-generated destructor stub
}
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	0801073c 	.word	0x0801073c

08001338 <_ZN9AmplifierD0Ev>:
Amplifier::~Amplifier() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
}
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ffcd 	bl	80012e0 <_ZN9AmplifierD1Ev>
 8001346:	21d0      	movs	r1, #208	; 0xd0
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f00e fb5a 	bl	800fa02 <_ZdlPvj>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <_ZN9Amplifier10initializeE17I2C_HandleTypeDef>:

void
Amplifier::initialize( I2C_HandleTypeDef bus ) {
 8001358:	b084      	sub	sp, #16
 800135a:	b5b0      	push	{r4, r5, r7, lr}
 800135c:	b094      	sub	sp, #80	; 0x50
 800135e:	af12      	add	r7, sp, #72	; 0x48
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	f107 001c 	add.w	r0, r7, #28
 8001366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	mDolbyLED.setPortAndPin( LED_MUTE_GPIO_Port, LED_MUTE_Pin );
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3334      	adds	r3, #52	; 0x34
 800136e:	2208      	movs	r2, #8
 8001370:	4938      	ldr	r1, [pc, #224]	; (8001454 <_ZN9Amplifier10initializeE17I2C_HandleTypeDef+0xfc>)
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff48 	bl	8001208 <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>

	// Take the I2C bus info and configure our internal I2C bus class
	mBusI2C.setBusData( bus );
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f103 0454 	add.w	r4, r3, #84	; 0x54
 800137e:	4668      	mov	r0, sp
 8001380:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001384:	2248      	movs	r2, #72	; 0x48
 8001386:	4619      	mov	r1, r3
 8001388:	f00e fc48 	bl	800fc1c <memcpy>
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001392:	4620      	mov	r0, r4
 8001394:	f7ff fef8 	bl	8001188 <_ZN3I2C10setBusDataE17I2C_HandleTypeDef>

	mDAC = new DAC_PCM1681( mBusI2C.makeDevice( 0x98 ) );
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3354      	adds	r3, #84	; 0x54
 800139c:	2198      	movs	r1, #152	; 0x98
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 f8aa 	bl	80024f8 <_ZN3I2C10makeDeviceEh>
 80013a4:	4605      	mov	r5, r0
 80013a6:	2010      	movs	r0, #16
 80013a8:	f00e fb2d 	bl	800fa06 <_Znwj>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461c      	mov	r4, r3
 80013b0:	4629      	mov	r1, r5
 80013b2:	4620      	mov	r0, r4
 80013b4:	f000 fa86 	bl	80018c4 <_ZN11DAC_PCM1681C1EP10I2C_Device>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
	mDecoder = new DolbyDecoder_STA310( mBusI2C.makeDevice( 0xe0 ) );
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3354      	adds	r3, #84	; 0x54
 80013c2:	21e0      	movs	r1, #224	; 0xe0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 f897 	bl	80024f8 <_ZN3I2C10makeDeviceEh>
 80013ca:	4605      	mov	r5, r0
 80013cc:	2014      	movs	r0, #20
 80013ce:	f00e fb1a 	bl	800fa06 <_Znwj>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461c      	mov	r4, r3
 80013d6:	4629      	mov	r1, r5
 80013d8:	4620      	mov	r0, r4
 80013da:	f000 fcc5 	bl	8001d68 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0

	// Configure the audio thread
	mAudio.setDecoder( mDecoder );
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f103 0220 	add.w	r2, r3, #32
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013f0:	4619      	mov	r1, r3
 80013f2:	4610      	mov	r0, r2
 80013f4:	f7ff ff1c 	bl	8001230 <_ZN5Audio10setDecoderEP12DolbyDecoder>
	mAudio.setDAC( mDAC );
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f103 0220 	add.w	r2, r3, #32
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f7ff ff1f 	bl	800124a <_ZN5Audio6setDACEP6DAC_IC>

	mLCD = new LCD( mBusI2C.makeDevice( LCD_I2C_ADDR ) );
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3354      	adds	r3, #84	; 0x54
 8001410:	214e      	movs	r1, #78	; 0x4e
 8001412:	4618      	mov	r0, r3
 8001414:	f001 f870 	bl	80024f8 <_ZN3I2C10makeDeviceEh>
 8001418:	4605      	mov	r5, r0
 800141a:	200c      	movs	r0, #12
 800141c:	f00e faf3 	bl	800fa06 <_Znwj>
 8001420:	4603      	mov	r3, r0
 8001422:	461c      	mov	r4, r3
 8001424:	4629      	mov	r1, r5
 8001426:	4620      	mov	r0, r4
 8001428:	f001 fa0e 	bl	8002848 <_ZN3LCDC1EP10I2C_Device>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
	mDisplay.setLCD( mLCD );
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f103 020c 	add.w	r2, r3, #12
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800143e:	4619      	mov	r1, r3
 8001440:	4610      	mov	r0, r2
 8001442:	f7ff feb9 	bl	80011b8 <_ZN7Display6setLCDEP3LCD>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001450:	b004      	add	sp, #16
 8001452:	4770      	bx	lr
 8001454:	40011000 	.word	0x40011000

08001458 <_ZN9Amplifier3runEv>:

void Amplifier::run() {
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	mLCD->initialize();
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	3308      	adds	r3, #8
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4610      	mov	r0, r2
 8001474:	4798      	blx	r3

	 HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_SET );
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147c:	4852      	ldr	r0, [pc, #328]	; (80015c8 <_ZN9Amplifier3runEv+0x170>)
 800147e:	f002 fcd9 	bl	8003e34 <HAL_GPIO_WritePin>

	 osDelay( 1000 );
 8001482:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001486:	f00b fa4f 	bl	800c928 <osDelay>

	 mLastVolumeTimer = TIM4->CNT;
 800148a:	4b50      	ldr	r3, [pc, #320]	; (80015cc <_ZN9Amplifier3runEv+0x174>)
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	461a      	mov	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	 mDisplay.updateVolume( mCurrentVolume );
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f103 020c 	add.w	r2, r3, #12
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f000 fbe0 	bl	8001c6a <_ZN7Display12updateVolumeEi>
	 mDisplay.update();
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	330c      	adds	r3, #12
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fbc4 	bl	8001c3c <_ZN7Display6updateEv>
		  HAL_GPIO_WritePin(LED_5CH_GPIO_Port, LED_5CH_Pin, GPIO_PIN_RESET);

		  osDelay( 100 );
		  */

			bool updatedVolume = false;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
			int timerValue = TIM4->CNT;
 80014b8:	4b44      	ldr	r3, [pc, #272]	; (80015cc <_ZN9Amplifier3runEv+0x174>)
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	60bb      	str	r3, [r7, #8]
			if ( mLastVolumeTimer < 50 && timerValue > 65500 ) {
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80014c4:	2b31      	cmp	r3, #49	; 0x31
 80014c6:	dc13      	bgt.n	80014f0 <_ZN9Amplifier3runEv+0x98>
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80014ce:	4293      	cmp	r3, r2
 80014d0:	dd0e      	ble.n	80014f0 <_ZN9Amplifier3runEv+0x98>
				// the value rolled backwards from 0 up to 64000, so this is a nudge down
				if ( mCurrentVolume > 0 ) mCurrentVolume--;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80014d8:	2b00      	cmp	r3, #0
 80014da:	dd06      	ble.n	80014ea <_ZN9Amplifier3runEv+0x92>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80014e2:	1e5a      	subs	r2, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
				updatedVolume = true;
 80014ea:	2301      	movs	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e04f      	b.n	8001590 <_ZN9Amplifier3runEv+0x138>
			} else if ( mLastVolumeTimer > 65500 && timerValue < 50 ) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80014f6:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80014fa:	4293      	cmp	r3, r2
 80014fc:	dd11      	ble.n	8001522 <_ZN9Amplifier3runEv+0xca>
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b31      	cmp	r3, #49	; 0x31
 8001502:	dc0e      	bgt.n	8001522 <_ZN9Amplifier3runEv+0xca>
				// the value rolled over the top, back to 0, so this is an increase
				if ( mCurrentVolume < 100 ) mCurrentVolume++;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800150a:	2b63      	cmp	r3, #99	; 0x63
 800150c:	dc06      	bgt.n	800151c <_ZN9Amplifier3runEv+0xc4>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
				updatedVolume = true;
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	e036      	b.n	8001590 <_ZN9Amplifier3runEv+0x138>
			} else if ( timerValue > mLastVolumeTimer && ( timerValue - mLastVolumeTimer ) > 3 ) {
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	429a      	cmp	r2, r3
 800152c:	dd15      	ble.n	800155a <_ZN9Amplifier3runEv+0x102>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b03      	cmp	r3, #3
 800153a:	dd0e      	ble.n	800155a <_ZN9Amplifier3runEv+0x102>
				// increase
				if ( mCurrentVolume < 100 ) mCurrentVolume++;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001542:	2b63      	cmp	r3, #99	; 0x63
 8001544:	dc06      	bgt.n	8001554 <_ZN9Amplifier3runEv+0xfc>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
				updatedVolume = true;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e01a      	b.n	8001590 <_ZN9Amplifier3runEv+0x138>
			} else if ( timerValue < mLastVolumeTimer && ( mLastVolumeTimer - timerValue ) > 3  ) {
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	429a      	cmp	r2, r3
 8001564:	da14      	bge.n	8001590 <_ZN9Amplifier3runEv+0x138>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b03      	cmp	r3, #3
 8001572:	dd0d      	ble.n	8001590 <_ZN9Amplifier3runEv+0x138>
				if ( mCurrentVolume > 0 ) mCurrentVolume--;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800157a:	2b00      	cmp	r3, #0
 800157c:	dd06      	ble.n	800158c <_ZN9Amplifier3runEv+0x134>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001584:	1e5a      	subs	r2, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
				updatedVolume = true;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
				// decrease
			}
			if ( updatedVolume ) {
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d014      	beq.n	80015c0 <_ZN9Amplifier3runEv+0x168>
				mLastVolumeTimer = timerValue;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
				mDisplay.updateVolume( mCurrentVolume );
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f103 020c 	add.w	r2, r3, #12
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f000 fb5c 	bl	8001c6a <_ZN7Display12updateVolumeEi>
				mDisplay.update();
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	330c      	adds	r3, #12
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fb40 	bl	8001c3c <_ZN7Display6updateEv>
				updatedVolume = false;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
			}

			osDelay( 5 );
 80015c0:	2005      	movs	r0, #5
 80015c2:	f00b f9b1 	bl	800c928 <osDelay>
	}
 80015c6:	e775      	b.n	80014b4 <_ZN9Amplifier3runEv+0x5c>
 80015c8:	40010800 	.word	0x40010800
 80015cc:	40000800 	.word	0x40000800

080015d0 <_ZN5AudioC1EP9Amplifier>:
 */

#include "Audio.h"
#include "cmsis_os.h"

Audio::Audio( Amplifier *amp ) : Runnable( amp ), mDecoder( 0 ), mDAC( 0 ), mHasBeenInitialized( false ) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6839      	ldr	r1, [r7, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 fa40 	bl	8002a64 <_ZN8RunnableC1EP9Amplifier>
 80015e4:	4a08      	ldr	r2, [pc, #32]	; (8001608 <_ZN5AudioC1EP9Amplifier+0x38>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	741a      	strb	r2, [r3, #16]
	// TODO Auto-generated constructor stub

}
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	08010754 	.word	0x08010754

0800160c <_ZN5AudioD1Ev>:

Audio::~Audio() {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	4a05      	ldr	r2, [pc, #20]	; (800162c <_ZN5AudioD1Ev+0x20>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4618      	mov	r0, r3
 800161e:	f001 fa35 	bl	8002a8c <_ZN8RunnableD1Ev>
	// TODO Auto-generated destructor stub
}
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	08010754 	.word	0x08010754

08001630 <_ZN5AudioD0Ev>:
Audio::~Audio() {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
}
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ffe7 	bl	800160c <_ZN5AudioD1Ev>
 800163e:	2114      	movs	r1, #20
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f00e f9de 	bl	800fa02 <_ZdlPvj>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_ZN5Audio3runEv>:


void
Audio::run() {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	// We need to start setting up the audio interfaces
	// First we'll configure the Dolby Decoder
	for(;;) {
		if ( !mHasBeenInitialized ) {
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7c1b      	ldrb	r3, [r3, #16]
 800165c:	f083 0301 	eor.w	r3, r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d049      	beq.n	80016fa <_ZN5Audio3runEv+0xaa>
			// Let's run the audio init.. we'll put this in the for loop in case for some reason we need to initialize again
			if ( mDAC && mDecoder ) {
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d045      	beq.n	80016fa <_ZN5Audio3runEv+0xaa>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d041      	beq.n	80016fa <_ZN5Audio3runEv+0xaa>
				// We have a valid DAC and a valid decoder.. for now both are required

				// Initialize the Dolby Decoder
				mDecoder->initialize();
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3308      	adds	r3, #8
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4610      	mov	r0, r2
 8001686:	4798      	blx	r3

				if ( mDecoder->isInitialized() ) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	330c      	adds	r3, #12
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4610      	mov	r0, r2
 8001698:	4798      	blx	r3
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d02c      	beq.n	80016fa <_ZN5Audio3runEv+0xaa>
					// This means the startup of the decoder was successful

					// Let's mute the output on the decoder
					mDecoder->mute( true );
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3310      	adds	r3, #16
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2101      	movs	r1, #1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4798      	blx	r3

					// Now let's pull the Decoder out of the IDLE state..
					mDecoder->run();
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3318      	adds	r3, #24
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4610      	mov	r0, r2
 80016c4:	4798      	blx	r3

					// Decoder should be sending a clock signal to the DAC chip, so it should be responsive
					// The datasheet says the DAC needs about 5ms to be responsive, so let's wait 10
					osDelay( 10 );
 80016c6:	200a      	movs	r0, #10
 80016c8:	f00b f92e 	bl	800c928 <osDelay>

					// Let's set a reasonable volume at first
					mDAC->setVolume( 25 );
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	332c      	adds	r3, #44	; 0x2c
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2119      	movs	r1, #25
 80016dc:	4610      	mov	r0, r2
 80016de:	4798      	blx	r3

					// Time to unleash the KRAKEN!  Let's start decoding...
					mDecoder->play();
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3314      	adds	r3, #20
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2101      	movs	r1, #1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4798      	blx	r3

					mHasBeenInitialized = true;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	741a      	strb	r2, [r3, #16]
				}
			}
		}

		osDelay(1);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f00b f914 	bl	800c928 <osDelay>
		if ( !mHasBeenInitialized ) {
 8001700:	e7aa      	b.n	8001658 <_ZN5Audio3runEv+0x8>

08001702 <_ZN6DAC_IC9isEnabledEv>:

	// the name for this DAC
	virtual std::string name() = 0;
	virtual void init() = 0;

	virtual bool isEnabled() { return true; }
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	2301      	movs	r3, #1
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <_ZN6DAC_IC6enableEb>:
	virtual void enable( bool state ) {};
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	70fb      	strb	r3, [r7, #3]
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <_ZN6DAC_IC14supportsFormatEh>:
	virtual bool supportsFormat( uint8_t format ) { return false; }
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	70fb      	strb	r3, [r7, #3]
 8001738:	2300      	movs	r3, #0
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <_ZN6DAC_IC14supportsVolumeEv>:
	virtual bool supportsVolume() { return false; }
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	2300      	movs	r3, #0
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <_ZN6DAC_IC12supportsMuteEv>:
	virtual bool supportsMute() { return false; }
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	2300      	movs	r3, #0
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <_ZN6DAC_IC8channelsEv>:
	virtual int channels() { return 0; }
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	2300      	movs	r3, #0
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <_ZN6DAC_IC16setChannelVolumeEii>:

	// volume is 0 to 63, where 0 is lowest and 63 is highest
	virtual void setChannelVolume( int channel, int volume ) {}
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <_ZN6DAC_IC9setVolumeEi>:

	// sets the volume on all channels
	virtual void setVolume( int volume ) {};
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <_ZN6DAC_IC11muteChannelEib>:

	virtual void muteChannel( int channel, bool enable ) {}
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	4613      	mov	r3, r2
 80017b6:	71fb      	strb	r3, [r7, #7]
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <_ZN6DAC_IC4muteEb>:
	virtual void mute( bool enable ) {}
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	70fb      	strb	r3, [r7, #3]
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <_ZN6DAC_IC9setFormatEh>:

	virtual void setFormat( uint8_t format ) {};
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
	...

080017f0 <_ZN6DAC_ICC1Ev>:
 *      Author: duane
 */

#include "DAC.h"

DAC_IC::DAC_IC() {
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <_ZN6DAC_ICC1Ev+0x1c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	08010770 	.word	0x08010770

08001810 <_ZN6DAC_ICD1Ev>:

DAC_IC::~DAC_IC() {
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <_ZN6DAC_ICD1Ev+0x1c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	08010770 	.word	0x08010770

08001830 <_ZN11DAC_PCM16819isEnabledEv>:
	DAC_PCM1681( I2C_Device *device );
	virtual ~DAC_PCM1681();

	virtual void init();

	virtual bool isEnabled() { return mEnabled; }
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7b5b      	ldrb	r3, [r3, #13]
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf14      	ite	ne
 8001840:	2301      	movne	r3, #1
 8001842:	2300      	moveq	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <_ZN11DAC_PCM168114supportsVolumeEv>:
	virtual void enable( bool state );

	virtual bool supportsFormat( uint8_t format );
	virtual bool supportsVolume() { return true; }
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	2301      	movs	r3, #1
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <_ZN11DAC_PCM168112supportsMuteEv>:
	virtual bool supportsMute() { return true; }
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	2301      	movs	r3, #1
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <_ZN11DAC_PCM16818channelsEv>:
	virtual int channels() { return 8; }
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	2308      	movs	r3, #8
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <_ZN11DAC_PCM16814nameB5cxx11Ev>:

	virtual std::string name() { return "PCM1681"; }
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	4618      	mov	r0, r3
 800189c:	f00e f8c7 	bl	800fa2e <_ZNSaIcEC1Ev>
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	461a      	mov	r2, r3
 80018a6:	4906      	ldr	r1, [pc, #24]	; (80018c0 <_ZN11DAC_PCM16814nameB5cxx11Ev+0x34>)
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f00e f91d 	bl	800fae8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	4618      	mov	r0, r3
 80018b4:	f00e f8bc 	bl	800fa30 <_ZNSaIcED1Ev>
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	08010674 	.word	0x08010674

080018c4 <_ZN11DAC_PCM1681C1EP10I2C_Device>:
#define PCM1681_REG_MUTE	7
#define PCM1681_REG_ENABLE	8
#define PCM1681_REG_FORMAT	9
#define PCM1681_REG_DAMS	13

DAC_PCM1681::DAC_PCM1681( I2C_Device *device ) : mDevice( device ), mEnabled( true ) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff8d 	bl	80017f0 <_ZN6DAC_ICC1Ev>
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <_ZN11DAC_PCM1681C1EP10I2C_Device+0x34>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	735a      	strb	r2, [r3, #13]
	// TODO Auto-generated constructor stub
	mMuteStatus = 0;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	731a      	strb	r2, [r3, #12]
}
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	080107b4 	.word	0x080107b4

080018fc <_ZN11DAC_PCM1681D1Ev>:

DAC_PCM1681::~DAC_PCM1681() {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	4a05      	ldr	r2, [pc, #20]	; (800191c <_ZN11DAC_PCM1681D1Ev+0x20>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff7f 	bl	8001810 <_ZN6DAC_ICD1Ev>
	// TODO Auto-generated destructor stub
}
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	080107b4 	.word	0x080107b4

08001920 <_ZN11DAC_PCM1681D0Ev>:
DAC_PCM1681::~DAC_PCM1681() {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
}
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ffe7 	bl	80018fc <_ZN11DAC_PCM1681D1Ev>
 800192e:	2110      	movs	r1, #16
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f00e f866 	bl	800fa02 <_ZdlPvj>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_ZN11DAC_PCM16816enableEb>:

void
DAC_PCM1681::enable( bool state ) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	70fb      	strb	r3, [r7, #3]
	if ( state ) {
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00a      	beq.n	8001968 <_ZN11DAC_PCM16816enableEb+0x28>
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0 );
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6898      	ldr	r0, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3318      	adds	r3, #24
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2200      	movs	r2, #0
 8001962:	2108      	movs	r1, #8
 8001964:	4798      	blx	r3
 8001966:	e009      	b.n	800197c <_ZN11DAC_PCM16816enableEb+0x3c>
	} else {
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0xff );
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6898      	ldr	r0, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3318      	adds	r3, #24
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	22ff      	movs	r2, #255	; 0xff
 8001978:	2108      	movs	r1, #8
 800197a:	4798      	blx	r3
	}

	mEnabled = state;
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	735a      	strb	r2, [r3, #13]
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_ZN11DAC_PCM168114supportsFormatEh>:

bool
DAC_PCM1681::supportsFormat( uint8_t format ) {
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	70fb      	strb	r3, [r7, #3]
	return ( format == DAC_IC::FORMAT_SONY || format == DAC_IC::FORMAT_I2S );
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <_ZN11DAC_PCM168114supportsFormatEh+0x18>
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <_ZN11DAC_PCM168114supportsFormatEh+0x1c>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <_ZN11DAC_PCM168114supportsFormatEh+0x1e>
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <_ZN11DAC_PCM16819setFormatEh>:

void
DAC_PCM1681::setFormat( uint8_t format ) {
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	460b      	mov	r3, r1
 80019bc:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	73fb      	strb	r3, [r7, #15]
	if ( format == FORMAT_SONY ) {
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_ZN11DAC_PCM16819setFormatEh+0x1c>
		value = 5;
 80019c8:	2305      	movs	r3, #5
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e004      	b.n	80019d8 <_ZN11DAC_PCM16819setFormatEh+0x26>
	} else if ( format == FORMAT_I2S ) {
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <_ZN11DAC_PCM16819setFormatEh+0x26>
		value = 4;
 80019d4:	2304      	movs	r3, #4
 80019d6:	73fb      	strb	r3, [r7, #15]
	}

	mDevice->writeRegister( PCM1681_REG_FORMAT, value );
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6898      	ldr	r0, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3318      	adds	r3, #24
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	2109      	movs	r1, #9
 80019ea:	4798      	blx	r3
}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_ZN11DAC_PCM16814initEv>:

void
DAC_PCM1681::init() {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	// do setup

	// set digital attenuation range of 0-63db in 0.5db increments
	mDevice->writeRegister( PCM1681_REG_DAMS, 0 );
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6898      	ldr	r0, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3318      	adds	r3, #24
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	210d      	movs	r1, #13
 8001a0e:	4798      	blx	r3

	setFormat( FORMAT_I2S );
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3338      	adds	r3, #56	; 0x38
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <_ZN11DAC_PCM168116setChannelVolumeEii>:

void
DAC_PCM1681::setChannelVolume( int channel, int volume ) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
	uint8_t reg = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	75fb      	strb	r3, [r7, #23]
	switch( channel ) {
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d820      	bhi.n	8001a80 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
 8001a3e:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <_ZN11DAC_PCM168116setChannelVolumeEii+0x1c>)
 8001a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a44:	08001a5d 	.word	0x08001a5d
 8001a48:	08001a63 	.word	0x08001a63
 8001a4c:	08001a69 	.word	0x08001a69
 8001a50:	08001a6f 	.word	0x08001a6f
 8001a54:	08001a75 	.word	0x08001a75
 8001a58:	08001a7b 	.word	0x08001a7b
		case FRONT_LEFT:
			reg = 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	75fb      	strb	r3, [r7, #23]
			break;
 8001a60:	e00e      	b.n	8001a80 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case FRONT_RIGHT:
			reg = 2;
 8001a62:	2302      	movs	r3, #2
 8001a64:	75fb      	strb	r3, [r7, #23]
			break;
 8001a66:	e00b      	b.n	8001a80 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_LEFT:
			reg = 3;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	75fb      	strb	r3, [r7, #23]
			break;
 8001a6c:	e008      	b.n	8001a80 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_RIGHT:
			reg = 4;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	75fb      	strb	r3, [r7, #23]
			break;
 8001a72:	e005      	b.n	8001a80 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case CENTER:
			reg = 5;
 8001a74:	2305      	movs	r3, #5
 8001a76:	75fb      	strb	r3, [r7, #23]
			break;
 8001a78:	e002      	b.n	8001a80 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case SUBWOOFER:
			reg = 6;
 8001a7a:	2306      	movs	r3, #6
 8001a7c:	75fb      	strb	r3, [r7, #23]
			break;
 8001a7e:	bf00      	nop
	}

	// Clamp the volume to the upper limit
	if ( volume > 127 ) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b7f      	cmp	r3, #127	; 0x7f
 8001a84:	dd01      	ble.n	8001a8a <_ZN11DAC_PCM168116setChannelVolumeEii+0x62>
		volume = 127;
 8001a86:	237f      	movs	r3, #127	; 0x7f
 8001a88:	607b      	str	r3, [r7, #4]
	}

	uint8_t volumeLevel = volume + 128;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	3b80      	subs	r3, #128	; 0x80
 8001a90:	75bb      	strb	r3, [r7, #22]
	mDevice->writeRegister( reg, volumeLevel );
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6898      	ldr	r0, [r3, #8]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	3318      	adds	r3, #24
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	7dba      	ldrb	r2, [r7, #22]
 8001aa2:	7df9      	ldrb	r1, [r7, #23]
 8001aa4:	4798      	blx	r3
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop

08001ab0 <_ZN11DAC_PCM16819setVolumeEi>:

void
DAC_PCM1681::setVolume( int volume ) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
	setChannelVolume( FRONT_LEFT, volume );
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3328      	adds	r3, #40	; 0x28
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
	setChannelVolume( FRONT_RIGHT, volume );
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3328      	adds	r3, #40	; 0x28
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	4798      	blx	r3
	setChannelVolume( REAR_LEFT, volume );
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3328      	adds	r3, #40	; 0x28
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	4798      	blx	r3
	setChannelVolume( REAR_RIGHT, volume );
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3328      	adds	r3, #40	; 0x28
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	2103      	movs	r1, #3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	4798      	blx	r3
	setChannelVolume( CENTER, volume );
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3328      	adds	r3, #40	; 0x28
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	2104      	movs	r1, #4
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	4798      	blx	r3
	setChannelVolume( SUBWOOFER, volume );
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3328      	adds	r3, #40	; 0x28
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	2105      	movs	r1, #5
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	4798      	blx	r3
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZN11DAC_PCM168111muteChannelEib>:

void
DAC_PCM1681::muteChannel( int channel, bool enable ) {
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	71fb      	strb	r3, [r7, #7]
	uint8_t mask =  ( 1 << ( channel ) );
 8001b30:	2201      	movs	r2, #1
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	75fb      	strb	r3, [r7, #23]
	if ( enable ) {
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <_ZN11DAC_PCM168111muteChannelEib+0x2e>
		// enable the bit representing this channel
		mMuteStatus = mMuteStatus & mask;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	7b1a      	ldrb	r2, [r3, #12]
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
 8001b46:	4013      	ands	r3, r2
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	731a      	strb	r2, [r3, #12]
 8001b4e:	e00b      	b.n	8001b68 <_ZN11DAC_PCM168111muteChannelEib+0x46>
	} else {
		// disable the bit representing the channel
		mMuteStatus = mMuteStatus & ~mask;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	7b1b      	ldrb	r3, [r3, #12]
 8001b54:	b25a      	sxtb	r2, r3
 8001b56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	b25b      	sxtb	r3, r3
 8001b5e:	4013      	ands	r3, r2
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	731a      	strb	r2, [r3, #12]
	}

	mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6898      	ldr	r0, [r3, #8]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3318      	adds	r3, #24
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	7b12      	ldrb	r2, [r2, #12]
 8001b7a:	2107      	movs	r1, #7
 8001b7c:	4798      	blx	r3
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_ZN11DAC_PCM16814muteEb>:

void
DAC_PCM1681::mute( bool enable ) {
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	70fb      	strb	r3, [r7, #3]
	 if ( enable ) {
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <_ZN11DAC_PCM16814muteEb+0x1a>
		 mMuteStatus = 0xff;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	22ff      	movs	r2, #255	; 0xff
 8001b9c:	731a      	strb	r2, [r3, #12]
 8001b9e:	e002      	b.n	8001ba6 <_ZN11DAC_PCM16814muteEb+0x20>
	 } else {
		 mMuteStatus = 0;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	731a      	strb	r2, [r3, #12]
	 }

	 mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6898      	ldr	r0, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	3318      	adds	r3, #24
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	7b12      	ldrb	r2, [r2, #12]
 8001bb8:	2107      	movs	r1, #7
 8001bba:	4798      	blx	r3
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_ZN7DisplayC1Ev>:
#include "Display.h"
#include "main.h"
#include "cmsis_os.h"
#include <stdio.h>

Display::Display() : mShouldUpdate( true ), mCurrentScreen( 0 ), mCurrentVolume( 50 ), mLCD( 0 ) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <_ZN7DisplayC1Ev+0x34>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	711a      	strb	r2, [r3, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2232      	movs	r2, #50	; 0x32
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
	// TODO Auto-generated constructor stub

}
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	080107f8 	.word	0x080107f8

08001bfc <_ZN7DisplayD1Ev>:

Display::~Display() {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <_ZN7DisplayD1Ev+0x1c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	080107f8 	.word	0x080107f8

08001c1c <_ZN7DisplayD0Ev>:
Display::~Display() {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
}
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ffe9 	bl	8001bfc <_ZN7DisplayD1Ev>
 8001c2a:	2114      	movs	r1, #20
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f00d fee8 	bl	800fa02 <_ZdlPvj>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZN7Display6updateEv>:

void
Display::update() {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	if ( mShouldUpdate ) {
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	791b      	ldrb	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00a      	beq.n	8001c62 <_ZN7Display6updateEv+0x26>
		switch( mCurrentScreen ) {
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d103      	bne.n	8001c5c <_ZN7Display6updateEv+0x20>
			case SCREEN_MAIN:
				updateMainScreen();
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f81d 	bl	8001c94 <_ZN7Display16updateMainScreenEv>
				break;
 8001c5a:	bf00      	nop
		}

		mShouldUpdate = false;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	711a      	strb	r2, [r3, #4]
	}

}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_ZN7Display12updateVolumeEi>:
Display::initialize() {

}

void
Display::updateVolume( int volume ) {
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
	if ( volume != mCurrentVolume ) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d002      	beq.n	8001c84 <_ZN7Display12updateVolumeEi+0x1a>
		mShouldUpdate = true;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	711a      	strb	r2, [r3, #4]
	}

	mCurrentVolume = volume;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	60da      	str	r2, [r3, #12]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <_ZN7Display16updateMainScreenEv>:

void
Display::updateMainScreen() {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b090      	sub	sp, #64	; 0x40
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	char s[50];

	mLCD->setCursor( 0, 0 );
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fd47 	bl	8002738 <_ZN3LCD9setCursorEhh>
	sprintf( s, "Volume %-3d          ", mCurrentVolume );
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	4915      	ldr	r1, [pc, #84]	; (8001d08 <_ZN7Display16updateMainScreenEv+0x74>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f00e f97b 	bl	800ffb0 <siprintf>
	mLCD->writeString( s );
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f107 020c 	add.w	r2, r7, #12
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fd75 	bl	80027b4 <_ZN3LCD11writeStringEPc>

	osDelay( 1 );
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f00a fe2c 	bl	800c928 <osDelay>
	mLCD->setCursor( 0, 3 );
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fd2d 	bl	8002738 <_ZN3LCD9setCursorEhh>
	sprintf( s, "6-Ch         Digital", mCurrentVolume );
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4909      	ldr	r1, [pc, #36]	; (8001d0c <_ZN7Display16updateMainScreenEv+0x78>)
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f00e f961 	bl	800ffb0 <siprintf>
	mLCD->writeString( s );
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f107 020c 	add.w	r2, r7, #12
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 fd5b 	bl	80027b4 <_ZN3LCD11writeStringEPc>
}
 8001cfe:	bf00      	nop
 8001d00:	3740      	adds	r7, #64	; 0x40
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	0801067c 	.word	0x0801067c
 8001d0c:	08010694 	.word	0x08010694

08001d10 <_ZN12DolbyDecoderC1Ev>:
 *      Author: duane
 */

#include "DolbyDecoder.h"

DolbyDecoder::DolbyDecoder() {
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <_ZN12DolbyDecoderC1Ev+0x1c>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	08010808 	.word	0x08010808

08001d30 <_ZN12DolbyDecoderD1Ev>:

DolbyDecoder::~DolbyDecoder() {
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <_ZN12DolbyDecoderD1Ev+0x1c>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	08010808 	.word	0x08010808

08001d50 <_ZN19DolbyDecoder_STA31013isInitializedEv>:
	virtual void initialize();
	virtual void mute( bool enable = true );
	virtual void run();
	virtual void play( bool enable = true );

	virtual bool isInitialized() { return mInitialized; }
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7a1b      	ldrb	r3, [r3, #8]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
	...

08001d68 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device>:
 */

#include "DolbyDecoderSTA310.h"
#include "cmsis_os.h"

DolbyDecoder_STA310::DolbyDecoder_STA310( I2C_Device *device ) :
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
	mDevice( device ), mInitialized( false ), mMuted( false ), mRunning( false ), mPlaying( false ), mIdent( 0 ), mSoftwareVersion( 0 ) {
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ffcb 	bl	8001d10 <_ZN12DolbyDecoderC1Ev>
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device+0x4c>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	721a      	strb	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	725a      	strb	r2, [r3, #9]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	729a      	strb	r2, [r3, #10]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	72da      	strb	r2, [r3, #11]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	731a      	strb	r2, [r3, #12]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	735a      	strb	r2, [r3, #13]
	// TODO Auto-generated constructor stub

}
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	0801082c 	.word	0x0801082c

08001db8 <_ZN19DolbyDecoder_STA310D1Ev>:

DolbyDecoder_STA310::~DolbyDecoder_STA310() {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <_ZN19DolbyDecoder_STA310D1Ev+0x20>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ffb1 	bl	8001d30 <_ZN12DolbyDecoderD1Ev>
	// TODO Auto-generated destructor stub
}
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	0801082c 	.word	0x0801082c

08001ddc <_ZN19DolbyDecoder_STA310D0Ev>:
DolbyDecoder_STA310::~DolbyDecoder_STA310() {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
}
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ffe7 	bl	8001db8 <_ZN19DolbyDecoder_STA310D1Ev>
 8001dea:	2114      	movs	r1, #20
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f00d fe08 	bl	800fa02 <_ZdlPvj>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZN19DolbyDecoder_STA3104muteEb>:

void
DolbyDecoder_STA310::mute( bool enable ) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <_ZN19DolbyDecoder_STA3104muteEb+0x28>
		mDevice->writeRegister( DolbyDecoder_STA310::MUTE, 1 );
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6858      	ldr	r0, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3318      	adds	r3, #24
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2114      	movs	r1, #20
 8001e20:	4798      	blx	r3
 8001e22:	e009      	b.n	8001e38 <_ZN19DolbyDecoder_STA3104muteEb+0x3c>
	} else {
		mDevice->writeRegister( DolbyDecoder_STA310::MUTE, 0 );
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6858      	ldr	r0, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	3318      	adds	r3, #24
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2200      	movs	r2, #0
 8001e34:	2114      	movs	r1, #20
 8001e36:	4798      	blx	r3
	}

	mMuted = enable;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	78fa      	ldrb	r2, [r7, #3]
 8001e3c:	725a      	strb	r2, [r3, #9]
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_ZN19DolbyDecoder_STA3104playEb>:

void
DolbyDecoder_STA310::play( bool enable ) {
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00a      	beq.n	8001e6e <_ZN19DolbyDecoder_STA3104playEb+0x28>
		mDevice->writeRegister( DolbyDecoder_STA310::PLAY, 1 );
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6858      	ldr	r0, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	3318      	adds	r3, #24
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2201      	movs	r2, #1
 8001e68:	2113      	movs	r1, #19
 8001e6a:	4798      	blx	r3
 8001e6c:	e009      	b.n	8001e82 <_ZN19DolbyDecoder_STA3104playEb+0x3c>
	} else {
		mDevice->writeRegister( DolbyDecoder_STA310::PLAY, 0 );
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6858      	ldr	r0, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3318      	adds	r3, #24
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2113      	movs	r1, #19
 8001e80:	4798      	blx	r3
	}

	mPlaying = enable;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	72da      	strb	r2, [r3, #11]
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_ZN19DolbyDecoder_STA3103runEv>:

void
DolbyDecoder_STA310::run() {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	if ( !mRunning ) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7a9b      	ldrb	r3, [r3, #10]
 8001e9c:	f083 0301 	eor.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00c      	beq.n	8001ec0 <_ZN19DolbyDecoder_STA3103runEv+0x30>
		mDevice->writeRegister( DolbyDecoder_STA310::RUN, 1 );
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6858      	ldr	r0, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3318      	adds	r3, #24
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2172      	movs	r1, #114	; 0x72
 8001eb8:	4798      	blx	r3
		mRunning = true;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	729a      	strb	r2, [r3, #10]

		// We are now running, the only way to stop is to do a reset of the chip
	}
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>:

void
DolbyDecoder_STA310::enableAudioPLL() {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	mDevice->writeRegister( DolbyDecoder_STA310::ENABLE_PLL, 1 );
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6858      	ldr	r0, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3318      	adds	r3, #24
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	21b5      	movs	r1, #181	; 0xb5
 8001ee2:	4798      	blx	r3
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_ZN19DolbyDecoder_STA31010initializeEv>:

void
DolbyDecoder_STA310::initialize() {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	softReset();
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f972 	bl	80021de <_ZN19DolbyDecoder_STA3109softResetEv>

	if ( mInitialized ) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7a1b      	ldrb	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d040      	beq.n	8001f84 <_ZN19DolbyDecoder_STA31010initializeEv+0x98>
		// perform startup routine
		mIdent = mDevice->readRegister( DolbyDecoder_STA310::IDENT );
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	331c      	adds	r3, #28
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2101      	movs	r1, #1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4798      	blx	r3
 8001f16:	4603      	mov	r3, r0
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	731a      	strb	r2, [r3, #12]
		mSoftwareVersion = mDevice->readRegister( DolbyDecoder_STA310::SOFTVER );
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	331c      	adds	r3, #28
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2171      	movs	r1, #113	; 0x71
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4798      	blx	r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	735a      	strb	r2, [r3, #13]

		// Enable the AUDIO PLL
		enableAudioPLL();
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ffc4 	bl	8001ec8 <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>
		configureAudioPLL();
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f943 	bl	80021cc <_ZN19DolbyDecoder_STA31017configureAudioPLLEv>
		configureInterrupts();
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f83c 	bl	8001fc4 <_ZN19DolbyDecoder_STA31019configureInterruptsEv>
		configureSync();
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f855 	bl	8001ffc <_ZN19DolbyDecoder_STA31013configureSyncEv>
		configurePCMOUT();
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f81a 	bl	8001f8c <_ZN19DolbyDecoder_STA31015configurePCMOUTEv>
		configureSPDIF();
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f8a5 	bl	80020a8 <_ZN19DolbyDecoder_STA31014configureSPDIFEv>
		configureDecoder();
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f886 	bl	8002070 <_ZN19DolbyDecoder_STA31016configureDecoderEv>
		configureAC3();
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8d9 	bl	800211c <_ZN19DolbyDecoder_STA31012configureAC3Ev>

		// Let's start the clocks
		// First, mute the output
		mute();
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3310      	adds	r3, #16
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2101      	movs	r1, #1
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3

		// Next, exit idle mode.  Since we are muted, the DAC clock will be started, but it will receive 0s
		run();
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	3318      	adds	r3, #24
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	4798      	blx	r3

		// To start actual decoding and DAC playing, we need to run play().  But we need to configure the DAC first
	}
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_ZN19DolbyDecoder_STA31015configurePCMOUTEv>:

void
DolbyDecoder_STA310::configurePCMOUT() {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	// Set PCM clock divider to support 384*Fs as 32 bits
	mDevice->writeRegister( DolbyDecoder_STA310::PCM_DIV, 2 );
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6858      	ldr	r0, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3318      	adds	r3, #24
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	2154      	movs	r1, #84	; 0x54
 8001fa6:	4798      	blx	r3

	// Set for 24 bit data
	mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 3 );
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6858      	ldr	r0, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3318      	adds	r3, #24
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	2155      	movs	r1, #85	; 0x55
 8001fba:	4798      	blx	r3
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <_ZN19DolbyDecoder_STA31019configureInterruptsEv>:

void
DolbyDecoder_STA310::configureInterrupts() {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	mDevice->writeRegister( DolbyDecoder_STA310::INT1, DolbyDecoder_STA310::ERR | DolbyDecoder_STA310::SFR );
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6858      	ldr	r0, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3318      	adds	r3, #24
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	220c      	movs	r2, #12
 8001fdc:	2107      	movs	r1, #7
 8001fde:	4798      	blx	r3
	mDevice->writeRegister( DolbyDecoder_STA310::INT2, DolbyDecoder_STA310::RST | DolbyDecoder_STA310::LCK );
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6858      	ldr	r0, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3318      	adds	r3, #24
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2230      	movs	r2, #48	; 0x30
 8001ff0:	2108      	movs	r1, #8
 8001ff2:	4798      	blx	r3
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZN19DolbyDecoder_STA31013configureSyncEv>:

void
DolbyDecoder_STA310::configureSync() {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	// Only 1 packet needed to synchronize stream
	mDevice->writeRegister( DolbyDecoder_STA310::PACKET_LOCK, 0 );
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6858      	ldr	r0, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3318      	adds	r3, #24
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2200      	movs	r2, #0
 8002014:	214f      	movs	r1, #79	; 0x4f
 8002016:	4798      	blx	r3

	// Only 1 packet for synchronization lock
	mDevice->writeRegister( DolbyDecoder_STA310::SYNC_LOCK, 0 );
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6858      	ldr	r0, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3318      	adds	r3, #24
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2200      	movs	r2, #0
 8002028:	2153      	movs	r1, #83	; 0x53
 800202a:	4798      	blx	r3

	// Disable only decoding one particular audio stream (i.e decode them all)
	mDevice->writeRegister( DolbyDecoder_STA310::ID_EN, 0 );
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6858      	ldr	r0, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3318      	adds	r3, #24
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2200      	movs	r2, #0
 800203c:	2150      	movs	r1, #80	; 0x50
 800203e:	4798      	blx	r3

	// Should be ignored if the ID_EN is set to 0, but also set ID of channel to 0
	mDevice->writeRegister( DolbyDecoder_STA310::ID, 0 );
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6858      	ldr	r0, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	3318      	adds	r3, #24
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2200      	movs	r2, #0
 8002050:	2151      	movs	r1, #81	; 0x51
 8002052:	4798      	blx	r3

	// Should be ignored if the ID_EN is set to 0, but also set ID extended to 0
	mDevice->writeRegister( DolbyDecoder_STA310::ID_EXT, 0 );
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6858      	ldr	r0, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3318      	adds	r3, #24
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2200      	movs	r2, #0
 8002064:	2152      	movs	r1, #82	; 0x52
 8002066:	4798      	blx	r3

}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_ZN19DolbyDecoder_STA31016configureDecoderEv>:

void
DolbyDecoder_STA310::configureDecoder() {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	// Set for SPDIF data format
	mDevice->writeRegister( DolbyDecoder_STA310::STREAM_SEL, 5 );
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6858      	ldr	r0, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3318      	adds	r3, #24
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2205      	movs	r2, #5
 8002088:	214c      	movs	r1, #76	; 0x4c
 800208a:	4798      	blx	r3

	// Set for Dolby Digital
	mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, 0 );
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6858      	ldr	r0, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3318      	adds	r3, #24
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2200      	movs	r2, #0
 800209c:	214d      	movs	r1, #77	; 0x4d
 800209e:	4798      	blx	r3
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_ZN19DolbyDecoder_STA31014configureSPDIFEv>:

void
DolbyDecoder_STA310::configureSPDIF() {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	// Configure the use of the SPDIF input and serial
	mDevice->writeRegister( DolbyDecoder_STA310::SIN_SETUP, 11 );
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6858      	ldr	r0, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3318      	adds	r3, #24
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	220b      	movs	r2, #11
 80020c0:	210c      	movs	r1, #12
 80020c2:	4798      	blx	r3

	// Must be set to 2 for SPDIF
	mDevice->writeRegister( DolbyDecoder_STA310::CAN_SETUP, 0 );
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6858      	ldr	r0, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3318      	adds	r3, #24
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2200      	movs	r2, #0
 80020d4:	210d      	movs	r1, #13
 80020d6:	4798      	blx	r3

	// Set up the PLL PCMCLK, PCMCLK FROM SPDIF, SYS CLOCK FROM PLL/2
	mDevice->writeRegister( DolbyDecoder_STA310::PLL_CTRL, 30 );
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6858      	ldr	r0, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3318      	adds	r3, #24
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	221e      	movs	r2, #30
 80020e8:	2112      	movs	r1, #18
 80020ea:	4798      	blx	r3

	// Enable auto detection on the stream
	mDevice->writeRegister( DolbyDecoder_STA310::AUTODETECT_ENA, 1 );
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6858      	ldr	r0, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3318      	adds	r3, #24
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2201      	movs	r2, #1
 80020fc:	21e0      	movs	r1, #224	; 0xe0
 80020fe:	4798      	blx	r3

	// Set SPDIF auto-detection sensitivity
	mDevice->writeRegister( DolbyDecoder_STA310::AUTODETECT_SENS, 0 );
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6858      	ldr	r0, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3318      	adds	r3, #24
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2200      	movs	r2, #0
 8002110:	21e1      	movs	r1, #225	; 0xe1
 8002112:	4798      	blx	r3
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <_ZN19DolbyDecoder_STA31012configureAC3Ev>:

void
DolbyDecoder_STA310::configureAC3() {
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	// Enable LFE
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DECODE_LFE, 1 );
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6858      	ldr	r0, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3318      	adds	r3, #24
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2201      	movs	r2, #1
 8002134:	2168      	movs	r1, #104	; 0x68
 8002136:	4798      	blx	r3

	// Configure for line out or spreakers
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_COMP_MOD, 2 );
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6858      	ldr	r0, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	3318      	adds	r3, #24
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2202      	movs	r2, #2
 8002148:	2169      	movs	r1, #105	; 0x69
 800214a:	4798      	blx	r3

	// Full dynamic range for loud sounds
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_HDR, 0 );
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6858      	ldr	r0, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3318      	adds	r3, #24
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	216a      	movs	r1, #106	; 0x6a
 800215e:	4798      	blx	r3

	// Don't boost low signals
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_LDR, 0 );
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6858      	ldr	r0, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3318      	adds	r3, #24
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	216b      	movs	r1, #107	; 0x6b
 8002172:	4798      	blx	r3

	// Mute audio output if stream errors are detected
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_RPC, 0 );
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6858      	ldr	r0, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3318      	adds	r3, #24
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2200      	movs	r2, #0
 8002184:	216c      	movs	r1, #108	; 0x6c
 8002186:	4798      	blx	r3

	// Karaoke aware
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_KARAOKE, 0 );
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6858      	ldr	r0, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3318      	adds	r3, #24
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	216d      	movs	r1, #109	; 0x6d
 800219a:	4798      	blx	r3

	// Output dual mode streams as stereo
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DUALMODE, 0 );
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6858      	ldr	r0, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	3318      	adds	r3, #24
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	216e      	movs	r1, #110	; 0x6e
 80021ae:	4798      	blx	r3

	// Set for a 5.1 downmix - this is useful to change if certain speakers are missing
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DOWNMIX, 7 );
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6858      	ldr	r0, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3318      	adds	r3, #24
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2207      	movs	r2, #7
 80021c0:	216f      	movs	r1, #111	; 0x6f
 80021c2:	4798      	blx	r3
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_ZN19DolbyDecoder_STA31017configureAudioPLLEv>:

void
DolbyDecoder_STA310::configureAudioPLL() {
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	// Our DAC supports 384*FS, so nothing to do here
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <_ZN19DolbyDecoder_STA3109softResetEv>:

void
DolbyDecoder_STA310::softReset() {
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	mInitialized = false;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	721a      	strb	r2, [r3, #8]

	// Perform soft mute on incoming framers
	mDevice->writeRegister( DolbyDecoder_STA310::SOFT_MUTE, 1 );
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6858      	ldr	r0, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3318      	adds	r3, #24
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2201      	movs	r2, #1
 80021fc:	2173      	movs	r1, #115	; 0x73
 80021fe:	4798      	blx	r3

	// Perform soft reset
	mDevice->writeRegister( DolbyDecoder_STA310::SOFT_RESET, 1 );
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6858      	ldr	r0, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3318      	adds	r3, #24
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2201      	movs	r2, #1
 8002210:	2110      	movs	r1, #16
 8002212:	4798      	blx	r3

	// Write magical breakpoint register
	mDevice->writeRegister( DolbyDecoder_STA310::BREAKPOINT, 8 );
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6858      	ldr	r0, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3318      	adds	r3, #24
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2208      	movs	r2, #8
 8002224:	212b      	movs	r1, #43	; 0x2b
 8002226:	4798      	blx	r3

	// Write clock command
	mDevice->writeRegister( DolbyDecoder_STA310::CLOCK_CMD, 0 );
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6858      	ldr	r0, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3318      	adds	r3, #24
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2200      	movs	r2, #0
 8002238:	213a      	movs	r1, #58	; 0x3a
 800223a:	4798      	blx	r3

	int attempts = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
	while ( attempts < 5 && !mInitialized ) {
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b04      	cmp	r3, #4
 8002244:	dc1d      	bgt.n	8002282 <_ZN19DolbyDecoder_STA3109softResetEv+0xa4>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7a1b      	ldrb	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d119      	bne.n	8002282 <_ZN19DolbyDecoder_STA3109softResetEv+0xa4>
		// We need to check for the device to say it's ready
		I2C_RESULT result = mDevice->readRegister( 0xff );
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	331c      	adds	r3, #28
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	21ff      	movs	r1, #255	; 0xff
 800225e:	4610      	mov	r0, r2
 8002260:	4798      	blx	r3
 8002262:	4603      	mov	r3, r0
 8002264:	817b      	strh	r3, [r7, #10]
		if ( result == 1 ) {
 8002266:	897b      	ldrh	r3, [r7, #10]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d103      	bne.n	8002274 <_ZN19DolbyDecoder_STA3109softResetEv+0x96>
			// Device is ready
			mInitialized = true;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	721a      	strb	r2, [r3, #8]
 8002272:	e7e5      	b.n	8002240 <_ZN19DolbyDecoder_STA3109softResetEv+0x62>
		} else {
			attempts++;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3301      	adds	r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
			// if it's not ready, let's wait 5ms and try again
			osDelay( 5 );
 800227a:	2005      	movs	r0, #5
 800227c:	f00a fb54 	bl	800c928 <osDelay>
	while ( attempts < 5 && !mInitialized ) {
 8002280:	e7de      	b.n	8002240 <_ZN19DolbyDecoder_STA3109softResetEv+0x62>
	}

	if ( !mInitialized ) {
		// this is an error condition we should deal with
	}
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <_ZN3I2CC1ERKS_>:
class I2C {
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <_ZN3I2CC1ERKS_+0x3c>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	1d10      	adds	r0, r2, #4
 80022a2:	3304      	adds	r3, #4
 80022a4:	2254      	movs	r2, #84	; 0x54
 80022a6:	4619      	mov	r1, r3
 80022a8:	f00d fcb8 	bl	800fc1c <memcpy>
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f102 0458 	add.w	r4, r2, #88	; 0x58
 80022b4:	3358      	adds	r3, #88	; 0x58
 80022b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd90      	pop	{r4, r7, pc}
 80022c6:	bf00      	nop
 80022c8:	08010850 	.word	0x08010850

080022cc <_ZN10I2C_DeviceC1E3I2Ch>:
	I2C mBus;
	I2C_ADDR mAddr;
public:
	I2C_Device( I2C bus ) : mBus( bus ), mAddr( 0 ) {}
	I2C_Device( I2C_ADDR addr );
	I2C_Device( I2C bus, I2C_ADDR addr ) : mBus( bus), mAddr( addr ) {}
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	4613      	mov	r3, r2
 80022d8:	71fb      	strb	r3, [r7, #7]
 80022da:	4a09      	ldr	r2, [pc, #36]	; (8002300 <_ZN10I2C_DeviceC1E3I2Ch+0x34>)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3304      	adds	r3, #4
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ffd0 	bl	800228c <_ZN3I2CC1ERKS_>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	79fa      	ldrb	r2, [r7, #7]
 80022f0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	08010860 	.word	0x08010860

08002304 <_ZN3I2CC1E17I2C_HandleTypeDef>:
#include "I2CDevice.h"
#include <memory>

#define I2C_ERROR -1

I2C::I2C( I2C_HandleTypeDef bus ) : mI2C( bus ) {
 8002304:	b084      	sub	sp, #16
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	f107 0014 	add.w	r0, r7, #20
 8002312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002316:	4a0d      	ldr	r2, [pc, #52]	; (800234c <_ZN3I2CC1E17I2C_HandleTypeDef+0x48>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3304      	adds	r3, #4
 8002320:	f107 0114 	add.w	r1, r7, #20
 8002324:	2254      	movs	r2, #84	; 0x54
 8002326:	4618      	mov	r0, r3
 8002328:	f00d fc78 	bl	800fc1c <memcpy>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3358      	adds	r3, #88	; 0x58
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub

}
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002346:	b004      	add	sp, #16
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	08010850 	.word	0x08010850

08002350 <_ZN3I2CD1Ev>:

I2C::~I2C() {
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <_ZN3I2CD1Ev+0x1c>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	08010850 	.word	0x08010850

08002370 <_ZN3I2CD0Ev>:
I2C::~I2C() {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
}
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ffe9 	bl	8002350 <_ZN3I2CD1Ev>
 800237e:	2168      	movs	r1, #104	; 0x68
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f00d fb3e 	bl	800fa02 <_ZdlPvj>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <_ZN3I2C8readByteEh>:

uint8_t
I2C::readByte( I2C_ADDR addr ) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af02      	add	r7, sp, #8
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
	int ret = HAL_I2C_Master_Receive( &mI2C, addr, mBuffer, 1, HAL_MAX_DELAY );
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	1d18      	adds	r0, r3, #4
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	b299      	uxth	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	f001 ff99 	bl	80042e8 <HAL_I2C_Master_Receive>
 80023b6:	4603      	mov	r3, r0
 80023b8:	60fb      	str	r3, [r7, #12]
	if ( ret == HAL_OK ) {
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d103      	bne.n	80023c8 <_ZN3I2C8readByteEh+0x38>
		return mBuffer[ 0 ];
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023c6:	e000      	b.n	80023ca <_ZN3I2C8readByteEh+0x3a>
	} else {
		return 0;
 80023c8:	2300      	movs	r3, #0
	}
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <_ZN3I2C9writeByteEhh>:

bool
I2C::writeByte( I2C_ADDR addr, uint8_t data ) {
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af02      	add	r7, sp, #8
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	70fb      	strb	r3, [r7, #3]
 80023de:	4613      	mov	r3, r2
 80023e0:	70bb      	strb	r3, [r7, #2]
	int ret = HAL_I2C_Master_Transmit( &mI2C, addr, &data, 1, HAL_MAX_DELAY );
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	1d18      	adds	r0, r3, #4
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	b299      	uxth	r1, r3
 80023ea:	1cba      	adds	r2, r7, #2
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2301      	movs	r3, #1
 80023f4:	f001 fe7a 	bl	80040ec <HAL_I2C_Master_Transmit>
 80023f8:	4603      	mov	r3, r0
 80023fa:	60fb      	str	r3, [r7, #12]
	return ( ret == HAL_OK );
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bf0c      	ite	eq
 8002402:	2301      	moveq	r3, #1
 8002404:	2300      	movne	r3, #0
 8002406:	b2db      	uxtb	r3, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_ZN3I2C9writeDataEhPhh>:

bool
I2C::writeData( I2C_ADDR addr, uint8_t *data, uint8_t size ) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	461a      	mov	r2, r3
 800241c:	460b      	mov	r3, r1
 800241e:	72fb      	strb	r3, [r7, #11]
 8002420:	4613      	mov	r3, r2
 8002422:	72bb      	strb	r3, [r7, #10]
	int ret = HAL_I2C_Master_Transmit( &mI2C, addr, data, size, HAL_MAX_DELAY );
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1d18      	adds	r0, r3, #4
 8002428:	7afb      	ldrb	r3, [r7, #11]
 800242a:	b299      	uxth	r1, r3
 800242c:	7abb      	ldrb	r3, [r7, #10]
 800242e:	b29b      	uxth	r3, r3
 8002430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002434:	9200      	str	r2, [sp, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	f001 fe58 	bl	80040ec <HAL_I2C_Master_Transmit>
 800243c:	4603      	mov	r3, r0
 800243e:	617b      	str	r3, [r7, #20]
	return ( ret == HAL_OK );
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	bf0c      	ite	eq
 8002446:	2301      	moveq	r3, #1
 8002448:	2300      	movne	r3, #0
 800244a:	b2db      	uxtb	r3, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_ZN3I2C13writeRegisterEhhh>:

bool
I2C::writeRegister( I2C_ADDR addr, uint8_t reg, uint8_t value ) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af04      	add	r7, sp, #16
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	4608      	mov	r0, r1
 800245e:	4611      	mov	r1, r2
 8002460:	461a      	mov	r2, r3
 8002462:	4603      	mov	r3, r0
 8002464:	70fb      	strb	r3, [r7, #3]
 8002466:	460b      	mov	r3, r1
 8002468:	70bb      	strb	r3, [r7, #2]
 800246a:	4613      	mov	r3, r2
 800246c:	707b      	strb	r3, [r7, #1]
	int ret =  HAL_I2C_Mem_Write( &mI2C, addr, reg, 1, &value, sizeof( value ), HAL_MAX_DELAY );
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	1d18      	adds	r0, r3, #4
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	b299      	uxth	r1, r3
 8002476:	78bb      	ldrb	r3, [r7, #2]
 8002478:	b29a      	uxth	r2, r3
 800247a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800247e:	9302      	str	r3, [sp, #8]
 8002480:	2301      	movs	r3, #1
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	1c7b      	adds	r3, r7, #1
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2301      	movs	r3, #1
 800248a:	f002 f98d 	bl	80047a8 <HAL_I2C_Mem_Write>
 800248e:	4603      	mov	r3, r0
 8002490:	60fb      	str	r3, [r7, #12]
	return ( ret == HAL_OK );
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_ZN3I2C12readRegisterEhh>:

I2C_RESULT
I2C::readRegister( I2C_ADDR addr, uint8_t reg ) {
 80024a6:	b590      	push	{r4, r7, lr}
 80024a8:	b089      	sub	sp, #36	; 0x24
 80024aa:	af04      	add	r7, sp, #16
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	70fb      	strb	r3, [r7, #3]
 80024b2:	4613      	mov	r3, r2
 80024b4:	70bb      	strb	r3, [r7, #2]
	int ret =  HAL_I2C_Mem_Read( &mI2C, addr, reg, 1, mBuffer, 1, HAL_MAX_DELAY );
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	1d18      	adds	r0, r3, #4
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	b299      	uxth	r1, r3
 80024be:	78bb      	ldrb	r3, [r7, #2]
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3358      	adds	r3, #88	; 0x58
 80024c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80024ca:	9402      	str	r4, [sp, #8]
 80024cc:	2401      	movs	r4, #1
 80024ce:	9401      	str	r4, [sp, #4]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2301      	movs	r3, #1
 80024d4:	f002 fa62 	bl	800499c <HAL_I2C_Mem_Read>
 80024d8:	4603      	mov	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]
	if ( ret == HAL_OK ) {
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <_ZN3I2C12readRegisterEhh+0x46>
		return mBuffer[0];
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	e001      	b.n	80024f0 <_ZN3I2C12readRegisterEhh+0x4a>
	} else {
		return I2C_ERROR;
 80024ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd90      	pop	{r4, r7, pc}

080024f8 <_ZN3I2C10makeDeviceEh>:

I2C_Device *
I2C::makeDevice( I2C_ADDR addr ) {
 80024f8:	b5b0      	push	{r4, r5, r7, lr}
 80024fa:	b0ae      	sub	sp, #184	; 0xb8
 80024fc:	af12      	add	r7, sp, #72	; 0x48
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
	return new I2C_Device( mI2C, addr );
 8002504:	687c      	ldr	r4, [r7, #4]
 8002506:	f107 0508 	add.w	r5, r7, #8
 800250a:	4668      	mov	r0, sp
 800250c:	f104 0310 	add.w	r3, r4, #16
 8002510:	2248      	movs	r2, #72	; 0x48
 8002512:	4619      	mov	r1, r3
 8002514:	f00d fb82 	bl	800fc1c <memcpy>
 8002518:	1d23      	adds	r3, r4, #4
 800251a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800251c:	4628      	mov	r0, r5
 800251e:	f7ff fef1 	bl	8002304 <_ZN3I2CC1E17I2C_HandleTypeDef>
 8002522:	f107 0408 	add.w	r4, r7, #8
 8002526:	2070      	movs	r0, #112	; 0x70
 8002528:	f00d fa6d 	bl	800fa06 <_Znwj>
 800252c:	4603      	mov	r3, r0
 800252e:	461d      	mov	r5, r3
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	461a      	mov	r2, r3
 8002534:	4621      	mov	r1, r4
 8002536:	4628      	mov	r0, r5
 8002538:	f7ff fec8 	bl	80022cc <_ZN10I2C_DeviceC1E3I2Ch>
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff05 	bl	8002350 <_ZN3I2CD1Ev>
 8002546:	462b      	mov	r3, r5
}
 8002548:	4618      	mov	r0, r3
 800254a:	3770      	adds	r7, #112	; 0x70
 800254c:	46bd      	mov	sp, r7
 800254e:	bdb0      	pop	{r4, r5, r7, pc}

08002550 <_ZN10I2C_Device7setAddrEh>:

	virtual ~I2C_Device();

	virtual void setAddr( I2C_ADDR addr ) { mAddr = addr; }
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
	...

08002570 <_ZN10I2C_DeviceD1Ev>:
I2C_Device::I2C_Device( I2C_ADDR addr ) : mAddr( addr ) {
	// TODO Auto-generated constructor stub

}

I2C_Device::~I2C_Device() {
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <_ZN10I2C_DeviceD1Ev+0x24>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fee4 	bl	8002350 <_ZN3I2CD1Ev>
	// TODO Auto-generated destructor stub
}
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	08010860 	.word	0x08010860

08002598 <_ZN10I2C_DeviceD0Ev>:
I2C_Device::~I2C_Device() {
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
}
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ffe5 	bl	8002570 <_ZN10I2C_DeviceD1Ev>
 80025a6:	2170      	movs	r1, #112	; 0x70
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f00d fa2a 	bl	800fa02 <_ZdlPvj>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <_ZN10I2C_Device9writeByteEh>:

bool
I2C_Device::writeByte( uint8_t data ) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	70fb      	strb	r3, [r7, #3]
	return mBus.writeByte( mAddr, data );
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	1d18      	adds	r0, r3, #4
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	4619      	mov	r1, r3
 80025d2:	f7ff fefe 	bl	80023d2 <_ZN3I2C9writeByteEhh>
 80025d6:	4603      	mov	r3, r0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_ZN10I2C_Device13writeRegisterEhh>:

bool
I2C_Device::writeRegister( uint8_t reg, uint8_t value ) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
 80025ec:	4613      	mov	r3, r2
 80025ee:	70bb      	strb	r3, [r7, #2]
	return mBus.writeRegister( mAddr, reg, value );
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	1d18      	adds	r0, r3, #4
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 80025fa:	78bb      	ldrb	r3, [r7, #2]
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	f7ff ff29 	bl	8002454 <_ZN3I2C13writeRegisterEhhh>
 8002602:	4603      	mov	r3, r0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_ZN10I2C_Device9writeDataEPhh>:

bool
I2C_Device::writeData( uint8_t *data, uint8_t size ) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	4613      	mov	r3, r2
 8002618:	71fb      	strb	r3, [r7, #7]
	return mBus.writeData( mAddr, data, size );
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1d18      	adds	r0, r3, #4
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	f7ff fef2 	bl	8002410 <_ZN3I2C9writeDataEhPhh>
 800262c:	4603      	mov	r3, r0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <_ZN10I2C_Device12readRegisterEh>:

I2C_RESULT
I2C_Device::readRegister( uint8_t reg ) {
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	70fb      	strb	r3, [r7, #3]
	return mBus.readRegister( mAddr, reg );
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	1d18      	adds	r0, r3, #4
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	4619      	mov	r1, r3
 8002650:	f7ff ff29 	bl	80024a6 <_ZN3I2C12readRegisterEhh>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <_ZN10I2C_Device8readByteEv>:

uint8_t
I2C_Device::readByte() {
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
	return mBus.readByte( mAddr );
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	1d1a      	adds	r2, r3, #4
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002670:	4619      	mov	r1, r3
 8002672:	4610      	mov	r0, r2
 8002674:	f7ff fe8c 	bl	8002390 <_ZN3I2C8readByteEh>
 8002678:	4603      	mov	r3, r0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <_ZN3LCD11sendCommandEh>:

#define LCD_DELAY 1


void
LCD::sendCommand( uint8_t command ) {
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (command&0xF0);
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	f023 030f 	bic.w	r3, r3, #15
 8002694:	73fb      	strb	r3, [r7, #15]
	data_l = ((command<<4)&0xF0);
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;	// en=1, rs=0
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	f043 030c 	orr.w	r3, r3, #12
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;	// en=0, rs=0
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	f043 0308 	orr.w	r3, r3, #8
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;	// en=1, rs=0
 80026b0:	7bbb      	ldrb	r3, [r7, #14]
 80026b2:	f043 030c 	orr.w	r3, r3, #12
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;	// en=0, rs=0
 80026ba:	7bbb      	ldrb	r3, [r7, #14]
 80026bc:	f043 0308 	orr.w	r3, r3, #8
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	72fb      	strb	r3, [r7, #11]

	mLCD->writeData( data_t, 4 );
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6858      	ldr	r0, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3314      	adds	r3, #20
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f107 0108 	add.w	r1, r7, #8
 80026d6:	2204      	movs	r2, #4
 80026d8:	4798      	blx	r3
	osDelay( LCD_DELAY );
 80026da:	2001      	movs	r0, #1
 80026dc:	f00a f924 	bl	800c928 <osDelay>
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_ZN3LCD15enableBacklightEb>:

void
LCD::enableBacklight( bool enable  ) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
	if ( enable ) {
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00d      	beq.n	800271a <_ZN3LCD15enableBacklightEb+0x32>
		value = 0x08;
 80026fe:	2308      	movs	r3, #8
 8002700:	73fb      	strb	r3, [r7, #15]
		mLCD->writeData( &value, 1 );
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6858      	ldr	r0, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3314      	adds	r3, #20
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f107 010f 	add.w	r1, r7, #15
 8002714:	2201      	movs	r2, #1
 8002716:	4798      	blx	r3
	} else {
		mLCD->writeData( &value, 1 );
	}
}
 8002718:	e00a      	b.n	8002730 <_ZN3LCD15enableBacklightEb+0x48>
		mLCD->writeData( &value, 1 );
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6858      	ldr	r0, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3314      	adds	r3, #20
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f107 010f 	add.w	r1, r7, #15
 800272c:	2201      	movs	r2, #1
 800272e:	4798      	blx	r3
}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <_ZN3LCD9setCursorEhh>:
	sendCommand( 0x01 );
	osDelay( LCD_DELAY );
}

void
LCD::setCursor( uint8_t x, uint8_t y ) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	70fb      	strb	r3, [r7, #3]
 8002744:	4613      	mov	r3, r2
 8002746:	70bb      	strb	r3, [r7, #2]
	int i = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
	switch ( y ) {
 800274c:	78bb      	ldrb	r3, [r7, #2]
 800274e:	2b03      	cmp	r3, #3
 8002750:	d81e      	bhi.n	8002790 <_ZN3LCD9setCursorEhh+0x58>
 8002752:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <_ZN3LCD9setCursorEhh+0x20>)
 8002754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002758:	08002769 	.word	0x08002769
 800275c:	08002773 	.word	0x08002773
 8002760:	0800277d 	.word	0x0800277d
 8002764:	08002787 	.word	0x08002787
		case 0:
			sendCommand( 0x80 );
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ff89 	bl	8002682 <_ZN3LCD11sendCommandEh>
			break;
 8002770:	e00e      	b.n	8002790 <_ZN3LCD9setCursorEhh+0x58>
		case 1:
			sendCommand( 0xC0 );
 8002772:	21c0      	movs	r1, #192	; 0xc0
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff84 	bl	8002682 <_ZN3LCD11sendCommandEh>
			break;
 800277a:	e009      	b.n	8002790 <_ZN3LCD9setCursorEhh+0x58>
		case 2:
			sendCommand( 0x94 );
 800277c:	2194      	movs	r1, #148	; 0x94
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ff7f 	bl	8002682 <_ZN3LCD11sendCommandEh>
			break;
 8002784:	e004      	b.n	8002790 <_ZN3LCD9setCursorEhh+0x58>
		case 3:
			sendCommand( 0xd4 );
 8002786:	21d4      	movs	r1, #212	; 0xd4
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff7a 	bl	8002682 <_ZN3LCD11sendCommandEh>
			break;
 800278e:	bf00      	nop
	}

	for( i = 0; i < x; i++ ) {
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	429a      	cmp	r2, r3
 800279a:	da07      	bge.n	80027ac <_ZN3LCD9setCursorEhh+0x74>
		sendCommand( 0x14 );
 800279c:	2114      	movs	r1, #20
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ff6f 	bl	8002682 <_ZN3LCD11sendCommandEh>
	for( i = 0; i < x; i++ ) {
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3301      	adds	r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	e7f3      	b.n	8002794 <_ZN3LCD9setCursorEhh+0x5c>
	}
}
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_ZN3LCD11writeStringEPc>:
//	sendCommand( 0x20 );
	osDelay( 10 );
}

void
LCD::writeString( char *string ) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
	while ( *string ) {
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <_ZN3LCD11writeStringEPc+0x24>
		sendData( *string++ );
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	603a      	str	r2, [r7, #0]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	4619      	mov	r1, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f805 	bl	80027e0 <_ZN3LCD8sendDataEc>
	while ( *string ) {
 80027d6:	e7f2      	b.n	80027be <_ZN3LCD11writeStringEPc+0xa>
	}
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_ZN3LCD8sendDataEc>:

void
LCD::sendData( char data ) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = ( data & 0xF0 );
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f023 030f 	bic.w	r3, r3, #15
 80027f2:	73fb      	strb	r3, [r7, #15]
	data_l = ( ( data << 4 ) & 0xF0);
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;	// en=1, rs=0
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	f043 030d 	orr.w	r3, r3, #13
 8002800:	b2db      	uxtb	r3, r3
 8002802:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;	// en=0, rs=0
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	f043 0309 	orr.w	r3, r3, #9
 800280a:	b2db      	uxtb	r3, r3
 800280c:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;	// en=1, rs=0
 800280e:	7bbb      	ldrb	r3, [r7, #14]
 8002810:	f043 030d 	orr.w	r3, r3, #13
 8002814:	b2db      	uxtb	r3, r3
 8002816:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;	// en=0, rs=0
 8002818:	7bbb      	ldrb	r3, [r7, #14]
 800281a:	f043 0309 	orr.w	r3, r3, #9
 800281e:	b2db      	uxtb	r3, r3
 8002820:	72fb      	strb	r3, [r7, #11]

	mLCD->writeData( data_t, 4 );
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6858      	ldr	r0, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3314      	adds	r3, #20
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f107 0108 	add.w	r1, r7, #8
 8002834:	2204      	movs	r2, #4
 8002836:	4798      	blx	r3
	osDelay( LCD_DELAY );
 8002838:	2001      	movs	r0, #1
 800283a:	f00a f875 	bl	800c928 <osDelay>
}
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <_ZN3LCDC1EP10I2C_Device>:

}
 *
 */

LCD::LCD( I2C_Device *lcd ) : mLCD( lcd ), mCount( 0 ) {
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	4a07      	ldr	r2, [pc, #28]	; (8002870 <_ZN3LCDC1EP10I2C_Device+0x28>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
	// TODO Auto-generated constructor stub

}
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	08010888 	.word	0x08010888

08002874 <_ZN3LCDD1Ev>:

LCD::~LCD() {
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <_ZN3LCDD1Ev+0x1c>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	08010888 	.word	0x08010888

08002894 <_ZN3LCDD0Ev>:
LCD::~LCD() {
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
}
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ffe9 	bl	8002874 <_ZN3LCDD1Ev>
 80028a2:	210c      	movs	r1, #12
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f00d f8ac 	bl	800fa02 <_ZdlPvj>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <_ZN3LCD10initializeEv>:
	sprintf( s, "Count %5d         ", mCount++ );
	writeString( s );
}

void
LCD::initialize() {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	osDelay( 1000 );
 80028bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028c0:	f00a f832 	bl	800c928 <osDelay>


	sendCommand( 0x30 );
 80028c4:	2130      	movs	r1, #48	; 0x30
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff fedb 	bl	8002682 <_ZN3LCD11sendCommandEh>
	osDelay( 10 );
 80028cc:	200a      	movs	r0, #10
 80028ce:	f00a f82b 	bl	800c928 <osDelay>
	sendCommand( 0x30 );
 80028d2:	2130      	movs	r1, #48	; 0x30
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff fed4 	bl	8002682 <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 80028da:	2005      	movs	r0, #5
 80028dc:	f00a f824 	bl	800c928 <osDelay>
	sendCommand( 0x30 );
 80028e0:	2130      	movs	r1, #48	; 0x30
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff fecd 	bl	8002682 <_ZN3LCD11sendCommandEh>
	osDelay( 10 );
 80028e8:	200a      	movs	r0, #10
 80028ea:	f00a f81d 	bl	800c928 <osDelay>
	sendCommand( 0x20 );
 80028ee:	2120      	movs	r1, #32
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fec6 	bl	8002682 <_ZN3LCD11sendCommandEh>
	osDelay( 10 );
 80028f6:	200a      	movs	r0, #10
 80028f8:	f00a f816 	bl	800c928 <osDelay>


	enableBacklight( false );
 80028fc:	2100      	movs	r1, #0
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff fef2 	bl	80026e8 <_ZN3LCD15enableBacklightEb>

	osDelay( 250 );
 8002904:	20fa      	movs	r0, #250	; 0xfa
 8002906:	f00a f80f 	bl	800c928 <osDelay>

	sendCommand( 0x28 );
 800290a:	2128      	movs	r1, #40	; 0x28
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff feb8 	bl	8002682 <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 8002912:	2005      	movs	r0, #5
 8002914:	f00a f808 	bl	800c928 <osDelay>
	sendCommand( 0x08 );
 8002918:	2108      	movs	r1, #8
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff feb1 	bl	8002682 <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 8002920:	2005      	movs	r0, #5
 8002922:	f00a f801 	bl	800c928 <osDelay>
	sendCommand( 0x01 );
 8002926:	2101      	movs	r1, #1
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff feaa 	bl	8002682 <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 800292e:	2005      	movs	r0, #5
 8002930:	f009 fffa 	bl	800c928 <osDelay>

	sendCommand( 0x06 );
 8002934:	2106      	movs	r1, #6
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fea3 	bl	8002682 <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 800293c:	2005      	movs	r0, #5
 800293e:	f009 fff3 	bl	800c928 <osDelay>
	sendCommand( 0x0c );
 8002942:	210c      	movs	r1, #12
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff fe9c 	bl	8002682 <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 800294a:	2005      	movs	r0, #5
 800294c:	f009 ffec 	bl	800c928 <osDelay>
	sendCommand( 0x01 );
 8002950:	2101      	movs	r1, #1
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff fe95 	bl	8002682 <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 8002958:	2005      	movs	r0, #5
 800295a:	f009 ffe5 	bl	800c928 <osDelay>

	osDelay( 250 );
 800295e:	20fa      	movs	r0, #250	; 0xfa
 8002960:	f009 ffe2 	bl	800c928 <osDelay>

	enableBacklight( true );
 8002964:	2101      	movs	r1, #1
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff febe 	bl	80026e8 <_ZN3LCD15enableBacklightEb>
	lcd_send_cmd (0x20);  // 4bit mode
	HAL_Delay(10);
 *
 *
 */
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <_ZN3LED6enableEv>:

	virtual void enable() { setState( true ); }
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3310      	adds	r3, #16
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2101      	movs	r1, #1
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <_ZN3LED7disableEv>:
	virtual void disable() { setState( false ); }
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3310      	adds	r3, #16
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2100      	movs	r1, #0
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_ZN3LEDC1Ev>:
 */

#include "LED.h"
#include "main.h"

LED::LED() : mPort( 0 ), mPin( 0 ), mCurrentState( 0 ) {
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	4a08      	ldr	r2, [pc, #32]	; (80029dc <_ZN3LEDC1Ev+0x2c>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	811a      	strh	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub

}
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	0801089c 	.word	0x0801089c

080029e0 <_ZN3LEDD1Ev>:

LED::LED( GPIO_TypeDef* port, uint16_t pin ) : mPort( port ), mPin( pin ), mCurrentState( 0 ) {

}

LED::~LED() {
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <_ZN3LEDD1Ev+0x1c>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	0801089c 	.word	0x0801089c

08002a00 <_ZN3LEDD0Ev>:
LED::~LED() {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
}
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ffe9 	bl	80029e0 <_ZN3LEDD1Ev>
 8002a0e:	2110      	movs	r1, #16
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f00c fff6 	bl	800fa02 <_ZdlPvj>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <_ZN3LED8setStateEb>:

void
LED::setState( bool enable ) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <_ZN3LED8setStateEb+0x24>
		HAL_GPIO_WritePin( mPort, mPin, GPIO_PIN_SET );
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6858      	ldr	r0, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	891b      	ldrh	r3, [r3, #8]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f001 f9f9 	bl	8003e34 <HAL_GPIO_WritePin>
 8002a42:	e007      	b.n	8002a54 <_ZN3LED8setStateEb+0x34>
	} else {
		HAL_GPIO_WritePin( mPort, mPin, GPIO_PIN_RESET );
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6858      	ldr	r0, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	891b      	ldrh	r3, [r3, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f001 f9f0 	bl	8003e34 <HAL_GPIO_WritePin>
	}

	mCurrentState = enable;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60da      	str	r2, [r3, #12]
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <_ZN8RunnableC1EP9Amplifier>:
 */

#include "Runnable.h"
#include "Amplifier.h"

Runnable::Runnable( Amplifier *amp ) : mAmplifier( amp ) {
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
 8002a6e:	4a06      	ldr	r2, [pc, #24]	; (8002a88 <_ZN8RunnableC1EP9Amplifier+0x24>)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	605a      	str	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	080108b8 	.word	0x080108b8

08002a8c <_ZN8RunnableD1Ev>:

Runnable::~Runnable() {
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <_ZN8RunnableD1Ev+0x1c>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	080108b8 	.word	0x080108b8

08002aac <_ZN2UIC1EP9Amplifier>:

#include "UI.h"
#include "main.h"
#include "cmsis_os.h"

UI::UI( Amplifier *amp ) : Runnable( amp ) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6839      	ldr	r1, [r7, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ffd2 	bl	8002a64 <_ZN8RunnableC1EP9Amplifier>
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <_ZN2UIC1EP9Amplifier+0x24>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	080108cc 	.word	0x080108cc

08002ad4 <_ZN2UID1Ev>:

UI::~UI() {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	4a05      	ldr	r2, [pc, #20]	; (8002af4 <_ZN2UID1Ev+0x20>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ffd1 	bl	8002a8c <_ZN8RunnableD1Ev>
	// TODO Auto-generated destructor stub
}
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	080108cc 	.word	0x080108cc

08002af8 <_ZN2UID0Ev>:
UI::~UI() {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
}
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ffe7 	bl	8002ad4 <_ZN2UID1Ev>
 8002b06:	2108      	movs	r1, #8
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f00c ff7a 	bl	800fa02 <_ZdlPvj>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <_ZN2UI3runEv>:

void UI::run() {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	for(;;) {
		osDelay(1);
 8002b20:	2001      	movs	r0, #1
 8002b22:	f009 ff01 	bl	800c928 <osDelay>
 8002b26:	e7fb      	b.n	8002b20 <_ZN2UI3runEv+0x8>

08002b28 <_ZN9Amplifier5getUIEv>:

public:
	Amplifier();
	virtual ~Amplifier();

	UI &getUI() { return mUI; }
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <_ZN9Amplifier8getAudioEv>:
	Display &getDisplay() { return mDisplay; }
	Audio &getAudio() { return mAudio; }
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3320      	adds	r3, #32
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b093      	sub	sp, #76	; 0x4c
 8002b58:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b5a:	f000 fe67 	bl	800382c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b5e:	f000 f84f 	bl	8002c00 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b62:	f000 fa4f 	bl	8003004 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8002b66:	f000 f8eb 	bl	8002d40 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8002b6a:	f000 f925 	bl	8002db8 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 8002b6e:	f000 f95f 	bl	8002e30 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8002b72:	f000 f9bb 	bl	8002eec <_ZL12MX_TIM4_Initv>
  MX_USART3_UART_Init();
 8002b76:	f000 fa17 	bl	8002fa8 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 8002b7a:	f000 f8ad 	bl	8002cd8 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  // The main amplifier class

  amplifier.initialize( hi2c1 );
 8002b7e:	4c15      	ldr	r4, [pc, #84]	; (8002bd4 <main+0x80>)
 8002b80:	4668      	mov	r0, sp
 8002b82:	f104 030c 	add.w	r3, r4, #12
 8002b86:	2248      	movs	r2, #72	; 0x48
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f00d f847 	bl	800fc1c <memcpy>
 8002b8e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002b92:	4811      	ldr	r0, [pc, #68]	; (8002bd8 <main+0x84>)
 8002b94:	f7fe fbe0 	bl	8001358 <_ZN9Amplifier10initializeE17I2C_HandleTypeDef>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002b98:	f009 fdb6 	bl	800c708 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002b9c:	4a0f      	ldr	r2, [pc, #60]	; (8002bdc <main+0x88>)
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	480f      	ldr	r0, [pc, #60]	; (8002be0 <main+0x8c>)
 8002ba2:	f009 fe17 	bl	800c7d4 <osThreadNew>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <main+0x90>)
 8002baa:	6013      	str	r3, [r2, #0]

  /* creation of audio */
  audioHandle = osThreadNew(startAudio, NULL, &audio_attributes);
 8002bac:	4a0e      	ldr	r2, [pc, #56]	; (8002be8 <main+0x94>)
 8002bae:	2100      	movs	r1, #0
 8002bb0:	480e      	ldr	r0, [pc, #56]	; (8002bec <main+0x98>)
 8002bb2:	f009 fe0f 	bl	800c7d4 <osThreadNew>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	; (8002bf0 <main+0x9c>)
 8002bba:	6013      	str	r3, [r2, #0]

  /* creation of UI */
  UIHandle = osThreadNew(startUI, NULL, &UI_attributes);
 8002bbc:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <main+0xa0>)
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	480d      	ldr	r0, [pc, #52]	; (8002bf8 <main+0xa4>)
 8002bc2:	f009 fe07 	bl	800c7d4 <osThreadNew>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4a0c      	ldr	r2, [pc, #48]	; (8002bfc <main+0xa8>)
 8002bca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002bcc:	f009 fdce 	bl	800c76c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <main+0x7c>
 8002bd2:	bf00      	nop
 8002bd4:	20000208 	.word	0x20000208
 8002bd8:	200003ec 	.word	0x200003ec
 8002bdc:	080108d8 	.word	0x080108d8
 8002be0:	080031d5 	.word	0x080031d5
 8002be4:	200003e0 	.word	0x200003e0
 8002be8:	080108fc 	.word	0x080108fc
 8002bec:	08003201 	.word	0x08003201
 8002bf0:	200003e4 	.word	0x200003e4
 8002bf4:	08010920 	.word	0x08010920
 8002bf8:	08003229 	.word	0x08003229
 8002bfc:	200003e8 	.word	0x200003e8

08002c00 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b096      	sub	sp, #88	; 0x58
 8002c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c0a:	2228      	movs	r2, #40	; 0x28
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f00d f82c 	bl	800fc6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c14:	f107 031c 	add.w	r3, r7, #28
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	611a      	str	r2, [r3, #16]
 8002c32:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c34:	2301      	movs	r3, #1
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c42:	2301      	movs	r3, #1
 8002c44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c46:	2302      	movs	r3, #2
 8002c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8002c50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c54:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 fa74 	bl	8007148 <HAL_RCC_OscConfig>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf14      	ite	ne
 8002c66:	2301      	movne	r3, #1
 8002c68:	2300      	moveq	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8002c70:	f000 faee 	bl	8003250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c74:	230f      	movs	r3, #15
 8002c76:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c86:	2300      	movs	r3, #0
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c8a:	f107 031c 	add.w	r3, r7, #28
 8002c8e:	2101      	movs	r1, #1
 8002c90:	4618      	mov	r0, r3
 8002c92:	f004 fcdb 	bl	800764c <HAL_RCC_ClockConfig>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8002ca6:	f000 fad3 	bl	8003250 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002caa:	2310      	movs	r3, #16
 8002cac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002cae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cb2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f004 fe62 	bl	8007980 <HAL_RCCEx_PeriphCLKConfig>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	bf14      	ite	ne
 8002cc2:	2301      	movne	r3, #1
 8002cc4:	2300      	moveq	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 8002ccc:	f000 fac0 	bl	8003250 <Error_Handler>
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	3758      	adds	r7, #88	; 0x58
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cdc:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <_ZL12MX_I2C1_Initv+0x5c>)
 8002cde:	4a16      	ldr	r2, [pc, #88]	; (8002d38 <_ZL12MX_I2C1_Initv+0x60>)
 8002ce0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002ce2:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <_ZL12MX_I2C1_Initv+0x5c>)
 8002ce4:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <_ZL12MX_I2C1_Initv+0x64>)
 8002ce6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <_ZL12MX_I2C1_Initv+0x5c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002cee:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <_ZL12MX_I2C1_Initv+0x5c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <_ZL12MX_I2C1_Initv+0x5c>)
 8002cf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <_ZL12MX_I2C1_Initv+0x5c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <_ZL12MX_I2C1_Initv+0x5c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d08:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <_ZL12MX_I2C1_Initv+0x5c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <_ZL12MX_I2C1_Initv+0x5c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d14:	4807      	ldr	r0, [pc, #28]	; (8002d34 <_ZL12MX_I2C1_Initv+0x5c>)
 8002d16:	f001 f8a5 	bl	8003e64 <HAL_I2C_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002d2a:	f000 fa91 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000208 	.word	0x20000208
 8002d38:	40005400 	.word	0x40005400
 8002d3c:	000186a0 	.word	0x000186a0

08002d40 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d44:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <_ZL12MX_SPI1_Initv+0x70>)
 8002d46:	4a1b      	ldr	r2, [pc, #108]	; (8002db4 <_ZL12MX_SPI1_Initv+0x74>)
 8002d48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d4a:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <_ZL12MX_SPI1_Initv+0x70>)
 8002d4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d52:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <_ZL12MX_SPI1_Initv+0x70>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d58:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <_ZL12MX_SPI1_Initv+0x70>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <_ZL12MX_SPI1_Initv+0x70>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <_ZL12MX_SPI1_Initv+0x70>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <_ZL12MX_SPI1_Initv+0x70>)
 8002d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002d72:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <_ZL12MX_SPI1_Initv+0x70>)
 8002d74:	2208      	movs	r2, #8
 8002d76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d78:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <_ZL12MX_SPI1_Initv+0x70>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <_ZL12MX_SPI1_Initv+0x70>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <_ZL12MX_SPI1_Initv+0x70>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <_ZL12MX_SPI1_Initv+0x70>)
 8002d8c:	220a      	movs	r2, #10
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d90:	4807      	ldr	r0, [pc, #28]	; (8002db0 <_ZL12MX_SPI1_Initv+0x70>)
 8002d92:	f004 feab 	bl	8007aec <HAL_SPI_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8002da6:	f000 fa53 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	2000025c 	.word	0x2000025c
 8002db4:	40013000 	.word	0x40013000

08002db8 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <_ZL12MX_SPI2_Initv+0x70>)
 8002dbe:	4a1b      	ldr	r2, [pc, #108]	; (8002e2c <_ZL12MX_SPI2_Initv+0x74>)
 8002dc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002dc2:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <_ZL12MX_SPI2_Initv+0x70>)
 8002dc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002dc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <_ZL12MX_SPI2_Initv+0x70>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dd0:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <_ZL12MX_SPI2_Initv+0x70>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <_ZL12MX_SPI2_Initv+0x70>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <_ZL12MX_SPI2_Initv+0x70>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <_ZL12MX_SPI2_Initv+0x70>)
 8002de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dea:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <_ZL12MX_SPI2_Initv+0x70>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002df0:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <_ZL12MX_SPI2_Initv+0x70>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002df6:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <_ZL12MX_SPI2_Initv+0x70>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <_ZL12MX_SPI2_Initv+0x70>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <_ZL12MX_SPI2_Initv+0x70>)
 8002e04:	220a      	movs	r2, #10
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e08:	4807      	ldr	r0, [pc, #28]	; (8002e28 <_ZL12MX_SPI2_Initv+0x70>)
 8002e0a:	f004 fe6f 	bl	8007aec <HAL_SPI_Init>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8002e1e:	f000 fa17 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	200002b4 	.word	0x200002b4
 8002e2c:	40003800 	.word	0x40003800

08002e30 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08c      	sub	sp, #48	; 0x30
 8002e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e36:	f107 030c 	add.w	r3, r7, #12
 8002e3a:	2224      	movs	r2, #36	; 0x24
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f00c ff14 	bl	800fc6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002e4e:	4a26      	ldr	r2, [pc, #152]	; (8002ee8 <_ZL12MX_TIM3_Initv+0xb8>)
 8002e50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e52:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e5e:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e66:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e86:	2300      	movs	r3, #0
 8002e88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002e96:	f107 030c 	add.w	r3, r7, #12
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4811      	ldr	r0, [pc, #68]	; (8002ee4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002e9e:	f004 fea9 	bl	8007bf4 <HAL_TIM_Encoder_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8002eb2:	f000 f9cd 	bl	8003250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4808      	ldr	r0, [pc, #32]	; (8002ee4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002ec4:	f005 f9ba 	bl	800823c <HAL_TIMEx_MasterConfigSynchronization>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bf14      	ite	ne
 8002ece:	2301      	movne	r3, #1
 8002ed0:	2300      	moveq	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8002ed8:	f000 f9ba 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002edc:	bf00      	nop
 8002ede:	3730      	adds	r7, #48	; 0x30
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	2000030c 	.word	0x2000030c
 8002ee8:	40000400 	.word	0x40000400

08002eec <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08c      	sub	sp, #48	; 0x30
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ef2:	f107 030c 	add.w	r3, r7, #12
 8002ef6:	2224      	movs	r2, #36	; 0x24
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f00c feb6 	bl	800fc6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002f0a:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <_ZL12MX_TIM4_Initv+0xb8>)
 8002f0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002f0e:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f14:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002f1a:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f22:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002f2a:	2280      	movs	r2, #128	; 0x80
 8002f2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f36:	2301      	movs	r3, #1
 8002f38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8002f3e:	2305      	movs	r3, #5
 8002f40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f46:	2301      	movs	r3, #1
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8002f4e:	2305      	movs	r3, #5
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002f52:	f107 030c 	add.w	r3, r7, #12
 8002f56:	4619      	mov	r1, r3
 8002f58:	4811      	ldr	r0, [pc, #68]	; (8002fa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002f5a:	f004 fe4b 	bl	8007bf4 <HAL_TIM_Encoder_Init>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8002f6e:	f000 f96f 	bl	8003250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4808      	ldr	r0, [pc, #32]	; (8002fa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002f80:	f005 f95c 	bl	800823c <HAL_TIMEx_MasterConfigSynchronization>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf14      	ite	ne
 8002f8a:	2301      	movne	r3, #1
 8002f8c:	2300      	moveq	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8002f94:	f000 f95c 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f98:	bf00      	nop
 8002f9a:	3730      	adds	r7, #48	; 0x30
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000354 	.word	0x20000354
 8002fa4:	40000800 	.word	0x40000800

08002fa8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fac:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fae:	4a14      	ldr	r2, [pc, #80]	; (8003000 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002fb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002fb2:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fce:	220c      	movs	r2, #12
 8002fd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fde:	4807      	ldr	r0, [pc, #28]	; (8002ffc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fe0:	f005 f9aa 	bl	8008338 <HAL_UART_Init>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bf14      	ite	ne
 8002fea:	2301      	movne	r3, #1
 8002fec:	2300      	moveq	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002ff4:	f000 f92c 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ff8:	bf00      	nop
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	2000039c 	.word	0x2000039c
 8003000:	40004800 	.word	0x40004800

08003004 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300a:	f107 0318 	add.w	r3, r7, #24
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	609a      	str	r2, [r3, #8]
 8003016:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003018:	4b67      	ldr	r3, [pc, #412]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	4a66      	ldr	r2, [pc, #408]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 800301e:	f043 0310 	orr.w	r3, r3, #16
 8003022:	6193      	str	r3, [r2, #24]
 8003024:	4b64      	ldr	r3, [pc, #400]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003030:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4a60      	ldr	r2, [pc, #384]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003036:	f043 0304 	orr.w	r3, r3, #4
 800303a:	6193      	str	r3, [r2, #24]
 800303c:	4b5e      	ldr	r3, [pc, #376]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003048:	4b5b      	ldr	r3, [pc, #364]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	4a5a      	ldr	r2, [pc, #360]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 800304e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003052:	6193      	str	r3, [r2, #24]
 8003054:	4b58      	ldr	r3, [pc, #352]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003060:	4b55      	ldr	r3, [pc, #340]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	4a54      	ldr	r2, [pc, #336]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003066:	f043 0308 	orr.w	r3, r3, #8
 800306a:	6193      	str	r3, [r2, #24]
 800306c:	4b52      	ldr	r3, [pc, #328]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003078:	4b4f      	ldr	r3, [pc, #316]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	4a4e      	ldr	r2, [pc, #312]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 800307e:	f043 0320 	orr.w	r3, r3, #32
 8003082:	6193      	str	r3, [r2, #24]
 8003084:	4b4c      	ldr	r3, [pc, #304]	; (80031b8 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET);
 8003090:	2200      	movs	r2, #0
 8003092:	2108      	movs	r1, #8
 8003094:	4849      	ldr	r0, [pc, #292]	; (80031bc <_ZL12MX_GPIO_Initv+0x1b8>)
 8003096:	f000 fecd 	bl	8003e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 800309a:	2200      	movs	r2, #0
 800309c:	f248 011f 	movw	r1, #32799	; 0x801f
 80030a0:	4847      	ldr	r0, [pc, #284]	; (80031c0 <_ZL12MX_GPIO_Initv+0x1bc>)
 80030a2:	f000 fec7 	bl	8003e34 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|USB_PULLUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 80030a6:	2200      	movs	r2, #0
 80030a8:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 80030ac:	4845      	ldr	r0, [pc, #276]	; (80031c4 <_ZL12MX_GPIO_Initv+0x1c0>)
 80030ae:	f000 fec1 	bl	8003e34 <HAL_GPIO_WritePin>
                          |LED_POWER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_5CH_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
 80030b2:	2200      	movs	r2, #0
 80030b4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80030b8:	4843      	ldr	r0, [pc, #268]	; (80031c8 <_ZL12MX_GPIO_Initv+0x1c4>)
 80030ba:	f000 febb 	bl	8003e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_MUTE_Pin */
  GPIO_InitStruct.Pin = LED_MUTE_Pin;
 80030be:	2308      	movs	r3, #8
 80030c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c2:	2301      	movs	r3, #1
 80030c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ca:	2302      	movs	r3, #2
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_MUTE_GPIO_Port, &GPIO_InitStruct);
 80030ce:	f107 0318 	add.w	r3, r7, #24
 80030d2:	4619      	mov	r1, r3
 80030d4:	4839      	ldr	r0, [pc, #228]	; (80031bc <_ZL12MX_GPIO_Initv+0x1b8>)
 80030d6:	f000 fd19 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PCM_Pin LED_DOLBY_Pin PA2 LED_MUTEA3_Pin
                           PA4 USB_PULLUP_Pin */
  GPIO_InitStruct.Pin = LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 80030da:	f248 031f 	movw	r3, #32799	; 0x801f
 80030de:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|USB_PULLUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e0:	2301      	movs	r3, #1
 80030e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e8:	2302      	movs	r3, #2
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ec:	f107 0318 	add.w	r3, r7, #24
 80030f0:	4619      	mov	r1, r3
 80030f2:	4833      	ldr	r0, [pc, #204]	; (80031c0 <_ZL12MX_GPIO_Initv+0x1bc>)
 80030f4:	f000 fd0a 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SETTING_BATTERY_Pin */
  GPIO_InitStruct.Pin = SETTING_BATTERY_Pin;
 80030f8:	2310      	movs	r3, #16
 80030fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SETTING_BATTERY_GPIO_Port, &GPIO_InitStruct);
 8003104:	f107 0318 	add.w	r3, r7, #24
 8003108:	4619      	mov	r1, r3
 800310a:	482c      	ldr	r0, [pc, #176]	; (80031bc <_ZL12MX_GPIO_Initv+0x1b8>)
 800310c:	f000 fcfe 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_1_Pin LED_INPUT_2_Pin LED_INPUT_3_Pin LED_INPUT_4_Pin
                           LED_POWER_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 8003110:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 8003114:	61bb      	str	r3, [r7, #24]
                          |LED_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003116:	2301      	movs	r3, #1
 8003118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2302      	movs	r3, #2
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003122:	f107 0318 	add.w	r3, r7, #24
 8003126:	4619      	mov	r1, r3
 8003128:	4826      	ldr	r0, [pc, #152]	; (80031c4 <_ZL12MX_GPIO_Initv+0x1c0>)
 800312a:	f000 fcef 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_POWER_Pin */
  GPIO_InitStruct.Pin = BUTTON_POWER_Pin;
 800312e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_POWER_GPIO_Port, &GPIO_InitStruct);
 800313c:	f107 0318 	add.w	r3, r7, #24
 8003140:	4619      	mov	r1, r3
 8003142:	4820      	ldr	r0, [pc, #128]	; (80031c4 <_ZL12MX_GPIO_Initv+0x1c0>)
 8003144:	f000 fce2 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_5CH_Pin LED_RUN_Pin */
  GPIO_InitStruct.Pin = LED_5CH_Pin|LED_RUN_Pin;
 8003148:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800314c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314e:	2301      	movs	r3, #1
 8003150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	2302      	movs	r3, #2
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315a:	f107 0318 	add.w	r3, r7, #24
 800315e:	4619      	mov	r1, r3
 8003160:	4819      	ldr	r0, [pc, #100]	; (80031c8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8003162:	f000 fcd3 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_VOLUME_Pin BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_VOLUME_Pin|BUTTON_INPUT_Pin;
 8003166:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800316a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003170:	2301      	movs	r3, #1
 8003172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003174:	f107 0318 	add.w	r3, r7, #24
 8003178:	4619      	mov	r1, r3
 800317a:	4814      	ldr	r0, [pc, #80]	; (80031cc <_ZL12MX_GPIO_Initv+0x1c8>)
 800317c:	f000 fcc6 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : DOLBY_IRQ_Pin */
  GPIO_InitStruct.Pin = DOLBY_IRQ_Pin;
 8003180:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <_ZL12MX_GPIO_Initv+0x1cc>)
 8003188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DOLBY_IRQ_GPIO_Port, &GPIO_InitStruct);
 800318e:	f107 0318 	add.w	r3, r7, #24
 8003192:	4619      	mov	r1, r3
 8003194:	4809      	ldr	r0, [pc, #36]	; (80031bc <_ZL12MX_GPIO_Initv+0x1b8>)
 8003196:	f000 fcb9 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = PWM_BACKLIGHT_Pin;
 800319a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800319e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031a0:	2303      	movs	r3, #3
 80031a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWM_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80031a4:	f107 0318 	add.w	r3, r7, #24
 80031a8:	4619      	mov	r1, r3
 80031aa:	4807      	ldr	r0, [pc, #28]	; (80031c8 <_ZL12MX_GPIO_Initv+0x1c4>)
 80031ac:	f000 fcae 	bl	8003b0c <HAL_GPIO_Init>

}
 80031b0:	bf00      	nop
 80031b2:	3728      	adds	r7, #40	; 0x28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40011000 	.word	0x40011000
 80031c0:	40010800 	.word	0x40010800
 80031c4:	40011800 	.word	0x40011800
 80031c8:	40010c00 	.word	0x40010c00
 80031cc:	40011400 	.word	0x40011400
 80031d0:	10210000 	.word	0x10210000

080031d4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80031dc:	f00b ff96 	bl	800f10c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	// Star the volume control timer
	HAL_TIM_Encoder_Start_IT( &htim4, TIM_CHANNEL_ALL );
 80031e0:	213c      	movs	r1, #60	; 0x3c
 80031e2:	4805      	ldr	r0, [pc, #20]	; (80031f8 <_Z16StartDefaultTaskPv+0x24>)
 80031e4:	f004 fda8 	bl	8007d38 <HAL_TIM_Encoder_Start_IT>

	amplifier.run();
 80031e8:	4804      	ldr	r0, [pc, #16]	; (80031fc <_Z16StartDefaultTaskPv+0x28>)
 80031ea:	f7fe f935 	bl	8001458 <_ZN9Amplifier3runEv>
  /* USER CODE END 5 */
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000354 	.word	0x20000354
 80031fc:	200003ec 	.word	0x200003ec

08003200 <_Z10startAudioPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAudio */
void startAudio(void *argument)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAudio */
  /* Infinite loop */
	amplifier.getAudio().run();
 8003208:	4806      	ldr	r0, [pc, #24]	; (8003224 <_Z10startAudioPv+0x24>)
 800320a:	f7ff fc98 	bl	8002b3e <_ZN9Amplifier8getAudioEv>
 800320e:	4603      	mov	r3, r0
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	3208      	adds	r2, #8
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	4790      	blx	r2
  /* USER CODE END startAudio */
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	200003ec 	.word	0x200003ec

08003228 <_Z7startUIPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startUI */
void startUI(void *argument)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUI */
  /* Infinite loop */
	amplifier.getUI().run();
 8003230:	4806      	ldr	r0, [pc, #24]	; (800324c <_Z7startUIPv+0x24>)
 8003232:	f7ff fc79 	bl	8002b28 <_ZN9Amplifier5getUIEv>
 8003236:	4603      	mov	r3, r0
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	3208      	adds	r2, #8
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	4790      	blx	r2
  /* USER CODE END startUI */
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	200003ec 	.word	0x200003ec

08003250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003254:	b672      	cpsid	i
}
 8003256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003258:	e7fe      	b.n	8003258 <Error_Handler+0x8>
	...

0800325c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d10c      	bne.n	8003286 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003272:	4293      	cmp	r3, r2
 8003274:	d107      	bne.n	8003286 <_Z41__static_initialization_and_destruction_0ii+0x2a>
Amplifier amplifier;
 8003276:	4806      	ldr	r0, [pc, #24]	; (8003290 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003278:	f7fd fff4 	bl	8001264 <_ZN9AmplifierC1Ev>
 800327c:	4a05      	ldr	r2, [pc, #20]	; (8003294 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800327e:	4906      	ldr	r1, [pc, #24]	; (8003298 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003280:	4803      	ldr	r0, [pc, #12]	; (8003290 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003282:	f00c fbb9 	bl	800f9f8 <__aeabi_atexit>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	200003ec 	.word	0x200003ec
 8003294:	20000000 	.word	0x20000000
 8003298:	080012e1 	.word	0x080012e1

0800329c <_GLOBAL__sub_I_hi2c1>:
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
 80032a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80032a4:	2001      	movs	r0, #1
 80032a6:	f7ff ffd9 	bl	800325c <_Z41__static_initialization_and_destruction_0ii>
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032b2:	4b18      	ldr	r3, [pc, #96]	; (8003314 <HAL_MspInit+0x68>)
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_MspInit+0x68>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6193      	str	r3, [r2, #24]
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_MspInit+0x68>)
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_MspInit+0x68>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	4a11      	ldr	r2, [pc, #68]	; (8003314 <HAL_MspInit+0x68>)
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d4:	61d3      	str	r3, [r2, #28]
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <HAL_MspInit+0x68>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032e2:	2200      	movs	r2, #0
 80032e4:	210f      	movs	r1, #15
 80032e6:	f06f 0001 	mvn.w	r0, #1
 80032ea:	f000 fbd8 	bl	8003a9e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032ee:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <HAL_MspInit+0x6c>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	4a04      	ldr	r2, [pc, #16]	; (8003318 <HAL_MspInit+0x6c>)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
 8003318:	40010000 	.word	0x40010000

0800331c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	f107 0310 	add.w	r3, r7, #16
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a15      	ldr	r2, [pc, #84]	; (800338c <HAL_I2C_MspInit+0x70>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d123      	bne.n	8003384 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <HAL_I2C_MspInit+0x74>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	4a13      	ldr	r2, [pc, #76]	; (8003390 <HAL_I2C_MspInit+0x74>)
 8003342:	f043 0308 	orr.w	r3, r3, #8
 8003346:	6193      	str	r3, [r2, #24]
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <HAL_I2C_MspInit+0x74>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003354:	23c0      	movs	r3, #192	; 0xc0
 8003356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003358:	2312      	movs	r3, #18
 800335a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800335c:	2303      	movs	r3, #3
 800335e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	4619      	mov	r1, r3
 8003366:	480b      	ldr	r0, [pc, #44]	; (8003394 <HAL_I2C_MspInit+0x78>)
 8003368:	f000 fbd0 	bl	8003b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_I2C_MspInit+0x74>)
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	4a07      	ldr	r2, [pc, #28]	; (8003390 <HAL_I2C_MspInit+0x74>)
 8003372:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003376:	61d3      	str	r3, [r2, #28]
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_I2C_MspInit+0x74>)
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003384:	bf00      	nop
 8003386:	3720      	adds	r7, #32
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40005400 	.word	0x40005400
 8003390:	40021000 	.word	0x40021000
 8003394:	40010c00 	.word	0x40010c00

08003398 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a0:	f107 0318 	add.w	r3, r7, #24
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a37      	ldr	r2, [pc, #220]	; (8003490 <HAL_SPI_MspInit+0xf8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d130      	bne.n	800341a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033b8:	4b36      	ldr	r3, [pc, #216]	; (8003494 <HAL_SPI_MspInit+0xfc>)
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	4a35      	ldr	r2, [pc, #212]	; (8003494 <HAL_SPI_MspInit+0xfc>)
 80033be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033c2:	6193      	str	r3, [r2, #24]
 80033c4:	4b33      	ldr	r3, [pc, #204]	; (8003494 <HAL_SPI_MspInit+0xfc>)
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d0:	4b30      	ldr	r3, [pc, #192]	; (8003494 <HAL_SPI_MspInit+0xfc>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	4a2f      	ldr	r2, [pc, #188]	; (8003494 <HAL_SPI_MspInit+0xfc>)
 80033d6:	f043 0304 	orr.w	r3, r3, #4
 80033da:	6193      	str	r3, [r2, #24]
 80033dc:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <HAL_SPI_MspInit+0xfc>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80033e8:	23a0      	movs	r3, #160	; 0xa0
 80033ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ec:	2302      	movs	r3, #2
 80033ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033f0:	2303      	movs	r3, #3
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f4:	f107 0318 	add.w	r3, r7, #24
 80033f8:	4619      	mov	r1, r3
 80033fa:	4827      	ldr	r0, [pc, #156]	; (8003498 <HAL_SPI_MspInit+0x100>)
 80033fc:	f000 fb86 	bl	8003b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003400:	2340      	movs	r3, #64	; 0x40
 8003402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340c:	f107 0318 	add.w	r3, r7, #24
 8003410:	4619      	mov	r1, r3
 8003412:	4821      	ldr	r0, [pc, #132]	; (8003498 <HAL_SPI_MspInit+0x100>)
 8003414:	f000 fb7a 	bl	8003b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003418:	e036      	b.n	8003488 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1f      	ldr	r2, [pc, #124]	; (800349c <HAL_SPI_MspInit+0x104>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d131      	bne.n	8003488 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003424:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <HAL_SPI_MspInit+0xfc>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <HAL_SPI_MspInit+0xfc>)
 800342a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800342e:	61d3      	str	r3, [r2, #28]
 8003430:	4b18      	ldr	r3, [pc, #96]	; (8003494 <HAL_SPI_MspInit+0xfc>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343c:	4b15      	ldr	r3, [pc, #84]	; (8003494 <HAL_SPI_MspInit+0xfc>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <HAL_SPI_MspInit+0xfc>)
 8003442:	f043 0308 	orr.w	r3, r3, #8
 8003446:	6193      	str	r3, [r2, #24]
 8003448:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_SPI_MspInit+0xfc>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003454:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345a:	2302      	movs	r3, #2
 800345c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800345e:	2303      	movs	r3, #3
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003462:	f107 0318 	add.w	r3, r7, #24
 8003466:	4619      	mov	r1, r3
 8003468:	480d      	ldr	r0, [pc, #52]	; (80034a0 <HAL_SPI_MspInit+0x108>)
 800346a:	f000 fb4f 	bl	8003b0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800346e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347c:	f107 0318 	add.w	r3, r7, #24
 8003480:	4619      	mov	r1, r3
 8003482:	4807      	ldr	r0, [pc, #28]	; (80034a0 <HAL_SPI_MspInit+0x108>)
 8003484:	f000 fb42 	bl	8003b0c <HAL_GPIO_Init>
}
 8003488:	bf00      	nop
 800348a:	3728      	adds	r7, #40	; 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40013000 	.word	0x40013000
 8003494:	40021000 	.word	0x40021000
 8003498:	40010800 	.word	0x40010800
 800349c:	40003800 	.word	0x40003800
 80034a0:	40010c00 	.word	0x40010c00

080034a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08c      	sub	sp, #48	; 0x30
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 0318 	add.w	r3, r7, #24
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a43      	ldr	r2, [pc, #268]	; (80035cc <HAL_TIM_Encoder_MspInit+0x128>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d13e      	bne.n	8003542 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034c4:	4b42      	ldr	r3, [pc, #264]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x12c>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	4a41      	ldr	r2, [pc, #260]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x12c>)
 80034ca:	f043 0302 	orr.w	r3, r3, #2
 80034ce:	61d3      	str	r3, [r2, #28]
 80034d0:	4b3f      	ldr	r3, [pc, #252]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x12c>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034dc:	4b3c      	ldr	r3, [pc, #240]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x12c>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	4a3b      	ldr	r2, [pc, #236]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x12c>)
 80034e2:	f043 0310 	orr.w	r3, r3, #16
 80034e6:	6193      	str	r3, [r2, #24]
 80034e8:	4b39      	ldr	r3, [pc, #228]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x12c>)
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034f4:	23c0      	movs	r3, #192	; 0xc0
 80034f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003500:	f107 0318 	add.w	r3, r7, #24
 8003504:	4619      	mov	r1, r3
 8003506:	4833      	ldr	r0, [pc, #204]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x130>)
 8003508:	f000 fb00 	bl	8003b0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800350c:	4b32      	ldr	r3, [pc, #200]	; (80035d8 <HAL_TIM_Encoder_MspInit+0x134>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
 800352a:	4a2b      	ldr	r2, [pc, #172]	; (80035d8 <HAL_TIM_Encoder_MspInit+0x134>)
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003530:	2200      	movs	r2, #0
 8003532:	2105      	movs	r1, #5
 8003534:	201d      	movs	r0, #29
 8003536:	f000 fab2 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800353a:	201d      	movs	r0, #29
 800353c:	f000 facb 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003540:	e03f      	b.n	80035c2 <HAL_TIM_Encoder_MspInit+0x11e>
  else if(htim_encoder->Instance==TIM4)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a25      	ldr	r2, [pc, #148]	; (80035dc <HAL_TIM_Encoder_MspInit+0x138>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d13a      	bne.n	80035c2 <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800354c:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x12c>)
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003552:	f043 0304 	orr.w	r3, r3, #4
 8003556:	61d3      	str	r3, [r2, #28]
 8003558:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x12c>)
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003564:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	4a19      	ldr	r2, [pc, #100]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x12c>)
 800356a:	f043 0320 	orr.w	r3, r3, #32
 800356e:	6193      	str	r3, [r2, #24]
 8003570:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800357c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800358a:	f107 0318 	add.w	r3, r7, #24
 800358e:	4619      	mov	r1, r3
 8003590:	4813      	ldr	r0, [pc, #76]	; (80035e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8003592:	f000 fabb 	bl	8003b0c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8003596:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <HAL_TIM_Encoder_MspInit+0x134>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ac:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <HAL_TIM_Encoder_MspInit+0x134>)
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80035b2:	2200      	movs	r2, #0
 80035b4:	2105      	movs	r1, #5
 80035b6:	201e      	movs	r0, #30
 80035b8:	f000 fa71 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035bc:	201e      	movs	r0, #30
 80035be:	f000 fa8a 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
}
 80035c2:	bf00      	nop
 80035c4:	3730      	adds	r7, #48	; 0x30
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40000400 	.word	0x40000400
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40011000 	.word	0x40011000
 80035d8:	40010000 	.word	0x40010000
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40011400 	.word	0x40011400

080035e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	; 0x28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a25      	ldr	r2, [pc, #148]	; (8003694 <HAL_UART_MspInit+0xb0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d143      	bne.n	800368c <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003604:	4b24      	ldr	r3, [pc, #144]	; (8003698 <HAL_UART_MspInit+0xb4>)
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	4a23      	ldr	r2, [pc, #140]	; (8003698 <HAL_UART_MspInit+0xb4>)
 800360a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800360e:	61d3      	str	r3, [r2, #28]
 8003610:	4b21      	ldr	r3, [pc, #132]	; (8003698 <HAL_UART_MspInit+0xb4>)
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800361c:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <HAL_UART_MspInit+0xb4>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	4a1d      	ldr	r2, [pc, #116]	; (8003698 <HAL_UART_MspInit+0xb4>)
 8003622:	f043 0320 	orr.w	r3, r3, #32
 8003626:	6193      	str	r3, [r2, #24]
 8003628:	4b1b      	ldr	r3, [pc, #108]	; (8003698 <HAL_UART_MspInit+0xb4>)
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800363e:	2303      	movs	r3, #3
 8003640:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	4814      	ldr	r0, [pc, #80]	; (800369c <HAL_UART_MspInit+0xb8>)
 800364a:	f000 fa5f 	bl	8003b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800364e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	4619      	mov	r1, r3
 8003662:	480e      	ldr	r0, [pc, #56]	; (800369c <HAL_UART_MspInit+0xb8>)
 8003664:	f000 fa52 	bl	8003b0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_ENABLE();
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <HAL_UART_MspInit+0xbc>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
 8003686:	4a06      	ldr	r2, [pc, #24]	; (80036a0 <HAL_UART_MspInit+0xbc>)
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800368c:	bf00      	nop
 800368e:	3728      	adds	r7, #40	; 0x28
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40004800 	.word	0x40004800
 8003698:	40021000 	.word	0x40021000
 800369c:	40011400 	.word	0x40011400
 80036a0:	40010000 	.word	0x40010000

080036a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036a8:	e7fe      	b.n	80036a8 <NMI_Handler+0x4>

080036aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036aa:	b480      	push	{r7}
 80036ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036ae:	e7fe      	b.n	80036ae <HardFault_Handler+0x4>

080036b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036b4:	e7fe      	b.n	80036b4 <MemManage_Handler+0x4>

080036b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036b6:	b480      	push	{r7}
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036ba:	e7fe      	b.n	80036ba <BusFault_Handler+0x4>

080036bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036c0:	e7fe      	b.n	80036c0 <UsageFault_Handler+0x4>

080036c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036c2:	b480      	push	{r7}
 80036c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036d2:	f000 f8f1 	bl	80038b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80036d6:	f00a fd61 	bl	800e19c <xTaskGetSchedulerState>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d001      	beq.n	80036e4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80036e0:	f00b faba 	bl	800ec58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036e4:	bf00      	nop
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80036ec:	4802      	ldr	r0, [pc, #8]	; (80036f8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80036ee:	f002 f998 	bl	8005a22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20002b64 	.word	0x20002b64

080036fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003700:	4802      	ldr	r0, [pc, #8]	; (800370c <TIM3_IRQHandler+0x10>)
 8003702:	f004 fbc7 	bl	8007e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	2000030c 	.word	0x2000030c

08003710 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003714:	4802      	ldr	r0, [pc, #8]	; (8003720 <TIM4_IRQHandler+0x10>)
 8003716:	f004 fbbd 	bl	8007e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000354 	.word	0x20000354

08003724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
	return 1;
 8003728:	2301      	movs	r3, #1
}
 800372a:	4618      	mov	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr

08003732 <_kill>:

int _kill(int pid, int sig)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800373c:	f00c fa24 	bl	800fb88 <__errno>
 8003740:	4603      	mov	r3, r0
 8003742:	2216      	movs	r2, #22
 8003744:	601a      	str	r2, [r3, #0]
	return -1;
 8003746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <_exit>:

void _exit (int status)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800375a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ffe7 	bl	8003732 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003764:	e7fe      	b.n	8003764 <_exit+0x12>
	...

08003768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003770:	4a14      	ldr	r2, [pc, #80]	; (80037c4 <_sbrk+0x5c>)
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <_sbrk+0x60>)
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800377c:	4b13      	ldr	r3, [pc, #76]	; (80037cc <_sbrk+0x64>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d102      	bne.n	800378a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003784:	4b11      	ldr	r3, [pc, #68]	; (80037cc <_sbrk+0x64>)
 8003786:	4a12      	ldr	r2, [pc, #72]	; (80037d0 <_sbrk+0x68>)
 8003788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800378a:	4b10      	ldr	r3, [pc, #64]	; (80037cc <_sbrk+0x64>)
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4413      	add	r3, r2
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	429a      	cmp	r2, r3
 8003796:	d207      	bcs.n	80037a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003798:	f00c f9f6 	bl	800fb88 <__errno>
 800379c:	4603      	mov	r3, r0
 800379e:	220c      	movs	r2, #12
 80037a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037a6:	e009      	b.n	80037bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <_sbrk+0x64>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037ae:	4b07      	ldr	r3, [pc, #28]	; (80037cc <_sbrk+0x64>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	4a05      	ldr	r2, [pc, #20]	; (80037cc <_sbrk+0x64>)
 80037b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ba:	68fb      	ldr	r3, [r7, #12]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	20010000 	.word	0x20010000
 80037c8:	00000400 	.word	0x00000400
 80037cc:	200004bc 	.word	0x200004bc
 80037d0:	20003088 	.word	0x20003088

080037d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr

080037e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037e0:	480c      	ldr	r0, [pc, #48]	; (8003814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037e2:	490d      	ldr	r1, [pc, #52]	; (8003818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037e4:	4a0d      	ldr	r2, [pc, #52]	; (800381c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037e8:	e002      	b.n	80037f0 <LoopCopyDataInit>

080037ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ee:	3304      	adds	r3, #4

080037f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037f4:	d3f9      	bcc.n	80037ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037f6:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037f8:	4c0a      	ldr	r4, [pc, #40]	; (8003824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037fc:	e001      	b.n	8003802 <LoopFillZerobss>

080037fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003800:	3204      	adds	r2, #4

08003802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003804:	d3fb      	bcc.n	80037fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003806:	f7ff ffe5 	bl	80037d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800380a:	f00c f9c3 	bl	800fb94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800380e:	f7ff f9a1 	bl	8002b54 <main>
  bx lr
 8003812:	4770      	bx	lr
  ldr r0, =_sdata
 8003814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003818:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800381c:	08010bc8 	.word	0x08010bc8
  ldr r2, =_sbss
 8003820:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003824:	20003084 	.word	0x20003084

08003828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003828:	e7fe      	b.n	8003828 <ADC1_2_IRQHandler>
	...

0800382c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <HAL_Init+0x28>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a07      	ldr	r2, [pc, #28]	; (8003854 <HAL_Init+0x28>)
 8003836:	f043 0310 	orr.w	r3, r3, #16
 800383a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800383c:	2003      	movs	r0, #3
 800383e:	f000 f923 	bl	8003a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003842:	200f      	movs	r0, #15
 8003844:	f000 f808 	bl	8003858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003848:	f7ff fd30 	bl	80032ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40022000 	.word	0x40022000

08003858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_InitTick+0x54>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <HAL_InitTick+0x58>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4619      	mov	r1, r3
 800386a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800386e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003872:	fbb2 f3f3 	udiv	r3, r2, r3
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f93b 	bl	8003af2 <HAL_SYSTICK_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e00e      	b.n	80038a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b0f      	cmp	r3, #15
 800388a:	d80a      	bhi.n	80038a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800388c:	2200      	movs	r2, #0
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003894:	f000 f903 	bl	8003a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003898:	4a06      	ldr	r2, [pc, #24]	; (80038b4 <HAL_InitTick+0x5c>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e000      	b.n	80038a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20000004 	.word	0x20000004
 80038b0:	2000000c 	.word	0x2000000c
 80038b4:	20000008 	.word	0x20000008

080038b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_IncTick+0x1c>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_IncTick+0x20>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4413      	add	r3, r2
 80038c8:	4a03      	ldr	r2, [pc, #12]	; (80038d8 <HAL_IncTick+0x20>)
 80038ca:	6013      	str	r3, [r2, #0]
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	2000000c 	.word	0x2000000c
 80038d8:	200004c0 	.word	0x200004c0

080038dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return uwTick;
 80038e0:	4b02      	ldr	r3, [pc, #8]	; (80038ec <HAL_GetTick+0x10>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	200004c0 	.word	0x200004c0

080038f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <__NVIC_SetPriorityGrouping+0x44>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800390c:	4013      	ands	r3, r2
 800390e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800391c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003922:	4a04      	ldr	r2, [pc, #16]	; (8003934 <__NVIC_SetPriorityGrouping+0x44>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	60d3      	str	r3, [r2, #12]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800393c:	4b04      	ldr	r3, [pc, #16]	; (8003950 <__NVIC_GetPriorityGrouping+0x18>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	f003 0307 	and.w	r3, r3, #7
}
 8003946:	4618      	mov	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	2b00      	cmp	r3, #0
 8003964:	db0b      	blt.n	800397e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	f003 021f 	and.w	r2, r3, #31
 800396c:	4906      	ldr	r1, [pc, #24]	; (8003988 <__NVIC_EnableIRQ+0x34>)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2001      	movs	r0, #1
 8003976:	fa00 f202 	lsl.w	r2, r0, r2
 800397a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	e000e100 	.word	0xe000e100

0800398c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	6039      	str	r1, [r7, #0]
 8003996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399c:	2b00      	cmp	r3, #0
 800399e:	db0a      	blt.n	80039b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	490c      	ldr	r1, [pc, #48]	; (80039d8 <__NVIC_SetPriority+0x4c>)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	0112      	lsls	r2, r2, #4
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	440b      	add	r3, r1
 80039b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b4:	e00a      	b.n	80039cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	4908      	ldr	r1, [pc, #32]	; (80039dc <__NVIC_SetPriority+0x50>)
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	3b04      	subs	r3, #4
 80039c4:	0112      	lsls	r2, r2, #4
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	440b      	add	r3, r1
 80039ca:	761a      	strb	r2, [r3, #24]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000e100 	.word	0xe000e100
 80039dc:	e000ed00 	.word	0xe000ed00

080039e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b089      	sub	sp, #36	; 0x24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f1c3 0307 	rsb	r3, r3, #7
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	bf28      	it	cs
 80039fe:	2304      	movcs	r3, #4
 8003a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2b06      	cmp	r3, #6
 8003a08:	d902      	bls.n	8003a10 <NVIC_EncodePriority+0x30>
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3b03      	subs	r3, #3
 8003a0e:	e000      	b.n	8003a12 <NVIC_EncodePriority+0x32>
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	401a      	ands	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	43d9      	mvns	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a38:	4313      	orrs	r3, r2
         );
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3724      	adds	r7, #36	; 0x24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a54:	d301      	bcc.n	8003a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a56:	2301      	movs	r3, #1
 8003a58:	e00f      	b.n	8003a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <SysTick_Config+0x40>)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a62:	210f      	movs	r1, #15
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a68:	f7ff ff90 	bl	800398c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <SysTick_Config+0x40>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <SysTick_Config+0x40>)
 8003a74:	2207      	movs	r2, #7
 8003a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	e000e010 	.word	0xe000e010

08003a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ff2d 	bl	80038f0 <__NVIC_SetPriorityGrouping>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b086      	sub	sp, #24
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab0:	f7ff ff42 	bl	8003938 <__NVIC_GetPriorityGrouping>
 8003ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	6978      	ldr	r0, [r7, #20]
 8003abc:	f7ff ff90 	bl	80039e0 <NVIC_EncodePriority>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff5f 	bl	800398c <__NVIC_SetPriority>
}
 8003ace:	bf00      	nop
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	4603      	mov	r3, r0
 8003ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff35 	bl	8003954 <__NVIC_EnableIRQ>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff ffa2 	bl	8003a44 <SysTick_Config>
 8003b00:	4603      	mov	r3, r0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b08b      	sub	sp, #44	; 0x2c
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b16:	2300      	movs	r3, #0
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b1e:	e179      	b.n	8003e14 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b20:	2201      	movs	r2, #1
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	f040 8168 	bne.w	8003e0e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4a96      	ldr	r2, [pc, #600]	; (8003d9c <HAL_GPIO_Init+0x290>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d05e      	beq.n	8003c06 <HAL_GPIO_Init+0xfa>
 8003b48:	4a94      	ldr	r2, [pc, #592]	; (8003d9c <HAL_GPIO_Init+0x290>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d875      	bhi.n	8003c3a <HAL_GPIO_Init+0x12e>
 8003b4e:	4a94      	ldr	r2, [pc, #592]	; (8003da0 <HAL_GPIO_Init+0x294>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d058      	beq.n	8003c06 <HAL_GPIO_Init+0xfa>
 8003b54:	4a92      	ldr	r2, [pc, #584]	; (8003da0 <HAL_GPIO_Init+0x294>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d86f      	bhi.n	8003c3a <HAL_GPIO_Init+0x12e>
 8003b5a:	4a92      	ldr	r2, [pc, #584]	; (8003da4 <HAL_GPIO_Init+0x298>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d052      	beq.n	8003c06 <HAL_GPIO_Init+0xfa>
 8003b60:	4a90      	ldr	r2, [pc, #576]	; (8003da4 <HAL_GPIO_Init+0x298>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d869      	bhi.n	8003c3a <HAL_GPIO_Init+0x12e>
 8003b66:	4a90      	ldr	r2, [pc, #576]	; (8003da8 <HAL_GPIO_Init+0x29c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d04c      	beq.n	8003c06 <HAL_GPIO_Init+0xfa>
 8003b6c:	4a8e      	ldr	r2, [pc, #568]	; (8003da8 <HAL_GPIO_Init+0x29c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d863      	bhi.n	8003c3a <HAL_GPIO_Init+0x12e>
 8003b72:	4a8e      	ldr	r2, [pc, #568]	; (8003dac <HAL_GPIO_Init+0x2a0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d046      	beq.n	8003c06 <HAL_GPIO_Init+0xfa>
 8003b78:	4a8c      	ldr	r2, [pc, #560]	; (8003dac <HAL_GPIO_Init+0x2a0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d85d      	bhi.n	8003c3a <HAL_GPIO_Init+0x12e>
 8003b7e:	2b12      	cmp	r3, #18
 8003b80:	d82a      	bhi.n	8003bd8 <HAL_GPIO_Init+0xcc>
 8003b82:	2b12      	cmp	r3, #18
 8003b84:	d859      	bhi.n	8003c3a <HAL_GPIO_Init+0x12e>
 8003b86:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <HAL_GPIO_Init+0x80>)
 8003b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8c:	08003c07 	.word	0x08003c07
 8003b90:	08003be1 	.word	0x08003be1
 8003b94:	08003bf3 	.word	0x08003bf3
 8003b98:	08003c35 	.word	0x08003c35
 8003b9c:	08003c3b 	.word	0x08003c3b
 8003ba0:	08003c3b 	.word	0x08003c3b
 8003ba4:	08003c3b 	.word	0x08003c3b
 8003ba8:	08003c3b 	.word	0x08003c3b
 8003bac:	08003c3b 	.word	0x08003c3b
 8003bb0:	08003c3b 	.word	0x08003c3b
 8003bb4:	08003c3b 	.word	0x08003c3b
 8003bb8:	08003c3b 	.word	0x08003c3b
 8003bbc:	08003c3b 	.word	0x08003c3b
 8003bc0:	08003c3b 	.word	0x08003c3b
 8003bc4:	08003c3b 	.word	0x08003c3b
 8003bc8:	08003c3b 	.word	0x08003c3b
 8003bcc:	08003c3b 	.word	0x08003c3b
 8003bd0:	08003be9 	.word	0x08003be9
 8003bd4:	08003bfd 	.word	0x08003bfd
 8003bd8:	4a75      	ldr	r2, [pc, #468]	; (8003db0 <HAL_GPIO_Init+0x2a4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003bde:	e02c      	b.n	8003c3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	623b      	str	r3, [r7, #32]
          break;
 8003be6:	e029      	b.n	8003c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	3304      	adds	r3, #4
 8003bee:	623b      	str	r3, [r7, #32]
          break;
 8003bf0:	e024      	b.n	8003c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	623b      	str	r3, [r7, #32]
          break;
 8003bfa:	e01f      	b.n	8003c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	330c      	adds	r3, #12
 8003c02:	623b      	str	r3, [r7, #32]
          break;
 8003c04:	e01a      	b.n	8003c3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d102      	bne.n	8003c14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c0e:	2304      	movs	r3, #4
 8003c10:	623b      	str	r3, [r7, #32]
          break;
 8003c12:	e013      	b.n	8003c3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	611a      	str	r2, [r3, #16]
          break;
 8003c26:	e009      	b.n	8003c3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c28:	2308      	movs	r3, #8
 8003c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	615a      	str	r2, [r3, #20]
          break;
 8003c32:	e003      	b.n	8003c3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c34:	2300      	movs	r3, #0
 8003c36:	623b      	str	r3, [r7, #32]
          break;
 8003c38:	e000      	b.n	8003c3c <HAL_GPIO_Init+0x130>
          break;
 8003c3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2bff      	cmp	r3, #255	; 0xff
 8003c40:	d801      	bhi.n	8003c46 <HAL_GPIO_Init+0x13a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	e001      	b.n	8003c4a <HAL_GPIO_Init+0x13e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2bff      	cmp	r3, #255	; 0xff
 8003c50:	d802      	bhi.n	8003c58 <HAL_GPIO_Init+0x14c>
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	e002      	b.n	8003c5e <HAL_GPIO_Init+0x152>
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	3b08      	subs	r3, #8
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	210f      	movs	r1, #15
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	6a39      	ldr	r1, [r7, #32]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80c1 	beq.w	8003e0e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c8c:	4b49      	ldr	r3, [pc, #292]	; (8003db4 <HAL_GPIO_Init+0x2a8>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	4a48      	ldr	r2, [pc, #288]	; (8003db4 <HAL_GPIO_Init+0x2a8>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6193      	str	r3, [r2, #24]
 8003c98:	4b46      	ldr	r3, [pc, #280]	; (8003db4 <HAL_GPIO_Init+0x2a8>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ca4:	4a44      	ldr	r2, [pc, #272]	; (8003db8 <HAL_GPIO_Init+0x2ac>)
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	089b      	lsrs	r3, r3, #2
 8003caa:	3302      	adds	r3, #2
 8003cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	220f      	movs	r2, #15
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a3c      	ldr	r2, [pc, #240]	; (8003dbc <HAL_GPIO_Init+0x2b0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d01f      	beq.n	8003d10 <HAL_GPIO_Init+0x204>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a3b      	ldr	r2, [pc, #236]	; (8003dc0 <HAL_GPIO_Init+0x2b4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d019      	beq.n	8003d0c <HAL_GPIO_Init+0x200>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a3a      	ldr	r2, [pc, #232]	; (8003dc4 <HAL_GPIO_Init+0x2b8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d013      	beq.n	8003d08 <HAL_GPIO_Init+0x1fc>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a39      	ldr	r2, [pc, #228]	; (8003dc8 <HAL_GPIO_Init+0x2bc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00d      	beq.n	8003d04 <HAL_GPIO_Init+0x1f8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a38      	ldr	r2, [pc, #224]	; (8003dcc <HAL_GPIO_Init+0x2c0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d007      	beq.n	8003d00 <HAL_GPIO_Init+0x1f4>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a37      	ldr	r2, [pc, #220]	; (8003dd0 <HAL_GPIO_Init+0x2c4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d101      	bne.n	8003cfc <HAL_GPIO_Init+0x1f0>
 8003cf8:	2305      	movs	r3, #5
 8003cfa:	e00a      	b.n	8003d12 <HAL_GPIO_Init+0x206>
 8003cfc:	2306      	movs	r3, #6
 8003cfe:	e008      	b.n	8003d12 <HAL_GPIO_Init+0x206>
 8003d00:	2304      	movs	r3, #4
 8003d02:	e006      	b.n	8003d12 <HAL_GPIO_Init+0x206>
 8003d04:	2303      	movs	r3, #3
 8003d06:	e004      	b.n	8003d12 <HAL_GPIO_Init+0x206>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e002      	b.n	8003d12 <HAL_GPIO_Init+0x206>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_GPIO_Init+0x206>
 8003d10:	2300      	movs	r3, #0
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	f002 0203 	and.w	r2, r2, #3
 8003d18:	0092      	lsls	r2, r2, #2
 8003d1a:	4093      	lsls	r3, r2
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d22:	4925      	ldr	r1, [pc, #148]	; (8003db8 <HAL_GPIO_Init+0x2ac>)
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	3302      	adds	r3, #2
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d006      	beq.n	8003d4a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d3c:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <HAL_GPIO_Init+0x2c8>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	4924      	ldr	r1, [pc, #144]	; (8003dd4 <HAL_GPIO_Init+0x2c8>)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]
 8003d48:	e006      	b.n	8003d58 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d4a:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <HAL_GPIO_Init+0x2c8>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	43db      	mvns	r3, r3
 8003d52:	4920      	ldr	r1, [pc, #128]	; (8003dd4 <HAL_GPIO_Init+0x2c8>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d006      	beq.n	8003d72 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_GPIO_Init+0x2c8>)
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	491a      	ldr	r1, [pc, #104]	; (8003dd4 <HAL_GPIO_Init+0x2c8>)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
 8003d70:	e006      	b.n	8003d80 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d72:	4b18      	ldr	r3, [pc, #96]	; (8003dd4 <HAL_GPIO_Init+0x2c8>)
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	4916      	ldr	r1, [pc, #88]	; (8003dd4 <HAL_GPIO_Init+0x2c8>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d025      	beq.n	8003dd8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <HAL_GPIO_Init+0x2c8>)
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	4910      	ldr	r1, [pc, #64]	; (8003dd4 <HAL_GPIO_Init+0x2c8>)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]
 8003d98:	e025      	b.n	8003de6 <HAL_GPIO_Init+0x2da>
 8003d9a:	bf00      	nop
 8003d9c:	10320000 	.word	0x10320000
 8003da0:	10310000 	.word	0x10310000
 8003da4:	10220000 	.word	0x10220000
 8003da8:	10210000 	.word	0x10210000
 8003dac:	10120000 	.word	0x10120000
 8003db0:	10110000 	.word	0x10110000
 8003db4:	40021000 	.word	0x40021000
 8003db8:	40010000 	.word	0x40010000
 8003dbc:	40010800 	.word	0x40010800
 8003dc0:	40010c00 	.word	0x40010c00
 8003dc4:	40011000 	.word	0x40011000
 8003dc8:	40011400 	.word	0x40011400
 8003dcc:	40011800 	.word	0x40011800
 8003dd0:	40011c00 	.word	0x40011c00
 8003dd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003dd8:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <HAL_GPIO_Init+0x324>)
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	4913      	ldr	r1, [pc, #76]	; (8003e30 <HAL_GPIO_Init+0x324>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d006      	beq.n	8003e00 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003df2:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <HAL_GPIO_Init+0x324>)
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	490e      	ldr	r1, [pc, #56]	; (8003e30 <HAL_GPIO_Init+0x324>)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60cb      	str	r3, [r1, #12]
 8003dfe:	e006      	b.n	8003e0e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_GPIO_Init+0x324>)
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	4909      	ldr	r1, [pc, #36]	; (8003e30 <HAL_GPIO_Init+0x324>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	3301      	adds	r3, #1
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f47f ae7e 	bne.w	8003b20 <HAL_GPIO_Init+0x14>
  }
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	372c      	adds	r7, #44	; 0x2c
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr
 8003e30:	40010400 	.word	0x40010400

08003e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	807b      	strh	r3, [r7, #2]
 8003e40:	4613      	mov	r3, r2
 8003e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e44:	787b      	ldrb	r3, [r7, #1]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e4a:	887a      	ldrh	r2, [r7, #2]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e50:	e003      	b.n	8003e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e52:	887b      	ldrh	r3, [r7, #2]
 8003e54:	041a      	lsls	r2, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	611a      	str	r2, [r3, #16]
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e12b      	b.n	80040ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fa46 	bl	800331c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2224      	movs	r2, #36	; 0x24
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ec8:	f003 fd14 	bl	80078f4 <HAL_RCC_GetPCLK1Freq>
 8003ecc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4a81      	ldr	r2, [pc, #516]	; (80040d8 <HAL_I2C_Init+0x274>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d807      	bhi.n	8003ee8 <HAL_I2C_Init+0x84>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a80      	ldr	r2, [pc, #512]	; (80040dc <HAL_I2C_Init+0x278>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	bf94      	ite	ls
 8003ee0:	2301      	movls	r3, #1
 8003ee2:	2300      	movhi	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	e006      	b.n	8003ef6 <HAL_I2C_Init+0x92>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4a7d      	ldr	r2, [pc, #500]	; (80040e0 <HAL_I2C_Init+0x27c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	bf94      	ite	ls
 8003ef0:	2301      	movls	r3, #1
 8003ef2:	2300      	movhi	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e0e7      	b.n	80040ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4a78      	ldr	r2, [pc, #480]	; (80040e4 <HAL_I2C_Init+0x280>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	0c9b      	lsrs	r3, r3, #18
 8003f08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	4a6a      	ldr	r2, [pc, #424]	; (80040d8 <HAL_I2C_Init+0x274>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d802      	bhi.n	8003f38 <HAL_I2C_Init+0xd4>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	3301      	adds	r3, #1
 8003f36:	e009      	b.n	8003f4c <HAL_I2C_Init+0xe8>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f3e:	fb02 f303 	mul.w	r3, r2, r3
 8003f42:	4a69      	ldr	r2, [pc, #420]	; (80040e8 <HAL_I2C_Init+0x284>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	099b      	lsrs	r3, r3, #6
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	495c      	ldr	r1, [pc, #368]	; (80040d8 <HAL_I2C_Init+0x274>)
 8003f68:	428b      	cmp	r3, r1
 8003f6a:	d819      	bhi.n	8003fa0 <HAL_I2C_Init+0x13c>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1e59      	subs	r1, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f7a:	1c59      	adds	r1, r3, #1
 8003f7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f80:	400b      	ands	r3, r1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_I2C_Init+0x138>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1e59      	subs	r1, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f94:	3301      	adds	r3, #1
 8003f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f9a:	e051      	b.n	8004040 <HAL_I2C_Init+0x1dc>
 8003f9c:	2304      	movs	r3, #4
 8003f9e:	e04f      	b.n	8004040 <HAL_I2C_Init+0x1dc>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d111      	bne.n	8003fcc <HAL_I2C_Init+0x168>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1e58      	subs	r0, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6859      	ldr	r1, [r3, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	440b      	add	r3, r1
 8003fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fba:	3301      	adds	r3, #1
 8003fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	e012      	b.n	8003ff2 <HAL_I2C_Init+0x18e>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	1e58      	subs	r0, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6859      	ldr	r1, [r3, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	0099      	lsls	r1, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_Init+0x196>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e022      	b.n	8004040 <HAL_I2C_Init+0x1dc>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10e      	bne.n	8004020 <HAL_I2C_Init+0x1bc>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1e58      	subs	r0, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6859      	ldr	r1, [r3, #4]
 800400a:	460b      	mov	r3, r1
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	440b      	add	r3, r1
 8004010:	fbb0 f3f3 	udiv	r3, r0, r3
 8004014:	3301      	adds	r3, #1
 8004016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800401e:	e00f      	b.n	8004040 <HAL_I2C_Init+0x1dc>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1e58      	subs	r0, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6859      	ldr	r1, [r3, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	0099      	lsls	r1, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	fbb0 f3f3 	udiv	r3, r0, r3
 8004036:	3301      	adds	r3, #1
 8004038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	6809      	ldr	r1, [r1, #0]
 8004044:	4313      	orrs	r3, r2
 8004046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800406e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6911      	ldr	r1, [r2, #16]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	68d2      	ldr	r2, [r2, #12]
 800407a:	4311      	orrs	r1, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	430b      	orrs	r3, r1
 8004082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	000186a0 	.word	0x000186a0
 80040dc:	001e847f 	.word	0x001e847f
 80040e0:	003d08ff 	.word	0x003d08ff
 80040e4:	431bde83 	.word	0x431bde83
 80040e8:	10624dd3 	.word	0x10624dd3

080040ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	461a      	mov	r2, r3
 80040f8:	460b      	mov	r3, r1
 80040fa:	817b      	strh	r3, [r7, #10]
 80040fc:	4613      	mov	r3, r2
 80040fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004100:	f7ff fbec 	bl	80038dc <HAL_GetTick>
 8004104:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b20      	cmp	r3, #32
 8004110:	f040 80e0 	bne.w	80042d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2319      	movs	r3, #25
 800411a:	2201      	movs	r2, #1
 800411c:	4970      	ldr	r1, [pc, #448]	; (80042e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f001 f972 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800412a:	2302      	movs	r3, #2
 800412c:	e0d3      	b.n	80042d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_I2C_Master_Transmit+0x50>
 8004138:	2302      	movs	r3, #2
 800413a:	e0cc      	b.n	80042d6 <HAL_I2C_Master_Transmit+0x1ea>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b01      	cmp	r3, #1
 8004150:	d007      	beq.n	8004162 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004170:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2221      	movs	r2, #33	; 0x21
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2210      	movs	r2, #16
 800417e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	893a      	ldrh	r2, [r7, #8]
 8004192:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a50      	ldr	r2, [pc, #320]	; (80042e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80041a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041a4:	8979      	ldrh	r1, [r7, #10]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	6a3a      	ldr	r2, [r7, #32]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fe5e 	bl	8004e6c <I2C_MasterRequestWrite>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e08d      	b.n	80042d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041d0:	e066      	b.n	80042a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	6a39      	ldr	r1, [r7, #32]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f001 f9ec 	bl	80055b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00d      	beq.n	80041fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d107      	bne.n	80041fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e06b      	b.n	80042d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	781a      	ldrb	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d11b      	bne.n	8004274 <HAL_I2C_Master_Transmit+0x188>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d017      	beq.n	8004274 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	6a39      	ldr	r1, [r7, #32]
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f001 f9dc 	bl	8005636 <I2C_WaitOnBTFFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00d      	beq.n	80042a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	2b04      	cmp	r3, #4
 800428a:	d107      	bne.n	800429c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e01a      	b.n	80042d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d194      	bne.n	80041d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	00100002 	.word	0x00100002
 80042e4:	ffff0000 	.word	0xffff0000

080042e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08c      	sub	sp, #48	; 0x30
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	461a      	mov	r2, r3
 80042f4:	460b      	mov	r3, r1
 80042f6:	817b      	strh	r3, [r7, #10]
 80042f8:	4613      	mov	r3, r2
 80042fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004300:	f7ff faec 	bl	80038dc <HAL_GetTick>
 8004304:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b20      	cmp	r3, #32
 8004310:	f040 823f 	bne.w	8004792 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	2319      	movs	r3, #25
 800431a:	2201      	movs	r2, #1
 800431c:	497f      	ldr	r1, [pc, #508]	; (800451c <HAL_I2C_Master_Receive+0x234>)
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f001 f872 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800432a:	2302      	movs	r3, #2
 800432c:	e232      	b.n	8004794 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_I2C_Master_Receive+0x54>
 8004338:	2302      	movs	r3, #2
 800433a:	e22b      	b.n	8004794 <HAL_I2C_Master_Receive+0x4ac>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b01      	cmp	r3, #1
 8004350:	d007      	beq.n	8004362 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004370:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2222      	movs	r2, #34	; 0x22
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2210      	movs	r2, #16
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	893a      	ldrh	r2, [r7, #8]
 8004392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a5f      	ldr	r2, [pc, #380]	; (8004520 <HAL_I2C_Master_Receive+0x238>)
 80043a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043a4:	8979      	ldrh	r1, [r7, #10]
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fde0 	bl	8004f70 <I2C_MasterRequestRead>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e1ec      	b.n	8004794 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d113      	bne.n	80043ea <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e1c0      	b.n	800476c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d11e      	bne.n	8004430 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004400:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004402:	b672      	cpsid	i
}
 8004404:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800442c:	b662      	cpsie	i
}
 800442e:	e035      	b.n	800449c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004434:	2b02      	cmp	r3, #2
 8004436:	d11e      	bne.n	8004476 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004446:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004448:	b672      	cpsid	i
}
 800444a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004470:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004472:	b662      	cpsie	i
}
 8004474:	e012      	b.n	800449c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004484:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004486:	2300      	movs	r3, #0
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800449c:	e166      	b.n	800476c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	f200 811f 	bhi.w	80046e6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d123      	bne.n	80044f8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f001 f8ff 	bl	80056b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e167      	b.n	8004794 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044f6:	e139      	b.n	800476c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d152      	bne.n	80045a6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	2200      	movs	r2, #0
 8004508:	4906      	ldr	r1, [pc, #24]	; (8004524 <HAL_I2C_Master_Receive+0x23c>)
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 ff7c 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d008      	beq.n	8004528 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e13c      	b.n	8004794 <HAL_I2C_Master_Receive+0x4ac>
 800451a:	bf00      	nop
 800451c:	00100002 	.word	0x00100002
 8004520:	ffff0000 	.word	0xffff0000
 8004524:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004528:	b672      	cpsid	i
}
 800452a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800456e:	b662      	cpsie	i
}
 8004570:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045a4:	e0e2      	b.n	800476c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	2200      	movs	r2, #0
 80045ae:	497b      	ldr	r1, [pc, #492]	; (800479c <HAL_I2C_Master_Receive+0x4b4>)
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 ff29 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0e9      	b.n	8004794 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045d0:	b672      	cpsid	i
}
 80045d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004606:	4b66      	ldr	r3, [pc, #408]	; (80047a0 <HAL_I2C_Master_Receive+0x4b8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	08db      	lsrs	r3, r3, #3
 800460c:	4a65      	ldr	r2, [pc, #404]	; (80047a4 <HAL_I2C_Master_Receive+0x4bc>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	0a1a      	lsrs	r2, r3, #8
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	00da      	lsls	r2, r3, #3
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	3b01      	subs	r3, #1
 8004624:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d118      	bne.n	800465e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f043 0220 	orr.w	r2, r3, #32
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800464e:	b662      	cpsie	i
}
 8004650:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e09a      	b.n	8004794 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b04      	cmp	r3, #4
 800466a:	d1d9      	bne.n	8004620 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80046ae:	b662      	cpsie	i
}
 80046b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046e4:	e042      	b.n	800476c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 ffe4 	bl	80056b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e04c      	b.n	8004794 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	2b04      	cmp	r3, #4
 8004738:	d118      	bne.n	800476c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	f47f ae94 	bne.w	800449e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	e000      	b.n	8004794 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8004792:	2302      	movs	r3, #2
  }
}
 8004794:	4618      	mov	r0, r3
 8004796:	3728      	adds	r7, #40	; 0x28
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	00010004 	.word	0x00010004
 80047a0:	20000004 	.word	0x20000004
 80047a4:	14f8b589 	.word	0x14f8b589

080047a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	4608      	mov	r0, r1
 80047b2:	4611      	mov	r1, r2
 80047b4:	461a      	mov	r2, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	817b      	strh	r3, [r7, #10]
 80047ba:	460b      	mov	r3, r1
 80047bc:	813b      	strh	r3, [r7, #8]
 80047be:	4613      	mov	r3, r2
 80047c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047c2:	f7ff f88b 	bl	80038dc <HAL_GetTick>
 80047c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	f040 80d9 	bne.w	8004988 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	2319      	movs	r3, #25
 80047dc:	2201      	movs	r2, #1
 80047de:	496d      	ldr	r1, [pc, #436]	; (8004994 <HAL_I2C_Mem_Write+0x1ec>)
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fe11 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
 80047ee:	e0cc      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_I2C_Mem_Write+0x56>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e0c5      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b01      	cmp	r3, #1
 8004812:	d007      	beq.n	8004824 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004832:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2221      	movs	r2, #33	; 0x21
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2240      	movs	r2, #64	; 0x40
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a3a      	ldr	r2, [r7, #32]
 800484e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004854:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a4d      	ldr	r2, [pc, #308]	; (8004998 <HAL_I2C_Mem_Write+0x1f0>)
 8004864:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004866:	88f8      	ldrh	r0, [r7, #6]
 8004868:	893a      	ldrh	r2, [r7, #8]
 800486a:	8979      	ldrh	r1, [r7, #10]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	4603      	mov	r3, r0
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 fc48 	bl	800510c <I2C_RequestMemoryWrite>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d052      	beq.n	8004928 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e081      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 fe92 	bl	80055b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00d      	beq.n	80048b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	2b04      	cmp	r3, #4
 800489c:	d107      	bne.n	80048ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e06b      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d11b      	bne.n	8004928 <HAL_I2C_Mem_Write+0x180>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d017      	beq.n	8004928 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	781a      	ldrb	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1aa      	bne.n	8004886 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fe7e 	bl	8005636 <I2C_WaitOnBTFFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00d      	beq.n	800495c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	2b04      	cmp	r3, #4
 8004946:	d107      	bne.n	8004958 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004956:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e016      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	e000      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004988:	2302      	movs	r3, #2
  }
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	00100002 	.word	0x00100002
 8004998:	ffff0000 	.word	0xffff0000

0800499c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08c      	sub	sp, #48	; 0x30
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	4608      	mov	r0, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	461a      	mov	r2, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	817b      	strh	r3, [r7, #10]
 80049ae:	460b      	mov	r3, r1
 80049b0:	813b      	strh	r3, [r7, #8]
 80049b2:	4613      	mov	r3, r2
 80049b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049ba:	f7fe ff8f 	bl	80038dc <HAL_GetTick>
 80049be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	f040 8244 	bne.w	8004e56 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	2319      	movs	r3, #25
 80049d4:	2201      	movs	r2, #1
 80049d6:	4982      	ldr	r1, [pc, #520]	; (8004be0 <HAL_I2C_Mem_Read+0x244>)
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fd15 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80049e4:	2302      	movs	r3, #2
 80049e6:	e237      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_I2C_Mem_Read+0x5a>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e230      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d007      	beq.n	8004a1c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2222      	movs	r2, #34	; 0x22
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2240      	movs	r2, #64	; 0x40
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4a62      	ldr	r2, [pc, #392]	; (8004be4 <HAL_I2C_Mem_Read+0x248>)
 8004a5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a5e:	88f8      	ldrh	r0, [r7, #6]
 8004a60:	893a      	ldrh	r2, [r7, #8]
 8004a62:	8979      	ldrh	r1, [r7, #10]
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fbe2 	bl	8005238 <I2C_RequestMemoryRead>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e1ec      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d113      	bne.n	8004aae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	61fb      	str	r3, [r7, #28]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	e1c0      	b.n	8004e30 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d11e      	bne.n	8004af4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ac6:	b672      	cpsid	i
}
 8004ac8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aca:	2300      	movs	r3, #0
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004af0:	b662      	cpsie	i
}
 8004af2:	e035      	b.n	8004b60 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d11e      	bne.n	8004b3a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b0c:	b672      	cpsid	i
}
 8004b0e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b36:	b662      	cpsie	i
}
 8004b38:	e012      	b.n	8004b60 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b48:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004b60:	e166      	b.n	8004e30 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	f200 811f 	bhi.w	8004daa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d123      	bne.n	8004bbc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 fd9d 	bl	80056b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e167      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bba:	e139      	b.n	8004e30 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d152      	bne.n	8004c6a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bca:	2200      	movs	r2, #0
 8004bcc:	4906      	ldr	r1, [pc, #24]	; (8004be8 <HAL_I2C_Mem_Read+0x24c>)
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 fc1a 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e13c      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
 8004bde:	bf00      	nop
 8004be0:	00100002 	.word	0x00100002
 8004be4:	ffff0000 	.word	0xffff0000
 8004be8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004bec:	b672      	cpsid	i
}
 8004bee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c32:	b662      	cpsie	i
}
 8004c34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c68:	e0e2      	b.n	8004e30 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	2200      	movs	r2, #0
 8004c72:	497b      	ldr	r1, [pc, #492]	; (8004e60 <HAL_I2C_Mem_Read+0x4c4>)
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 fbc7 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0e9      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c94:	b672      	cpsid	i
}
 8004c96:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cca:	4b66      	ldr	r3, [pc, #408]	; (8004e64 <HAL_I2C_Mem_Read+0x4c8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	08db      	lsrs	r3, r3, #3
 8004cd0:	4a65      	ldr	r2, [pc, #404]	; (8004e68 <HAL_I2C_Mem_Read+0x4cc>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	0a1a      	lsrs	r2, r3, #8
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	00da      	lsls	r2, r3, #3
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d118      	bne.n	8004d22 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f043 0220 	orr.w	r2, r3, #32
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004d12:	b662      	cpsie	i
}
 8004d14:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e09a      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d1d9      	bne.n	8004ce4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d72:	b662      	cpsie	i
}
 8004d74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004da8:	e042      	b.n	8004e30 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 fc82 	bl	80056b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e04c      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d118      	bne.n	8004e30 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f47f ae94 	bne.w	8004b62 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e000      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
  }
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3728      	adds	r7, #40	; 0x28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	00010004 	.word	0x00010004
 8004e64:	20000004 	.word	0x20000004
 8004e68:	14f8b589 	.word	0x14f8b589

08004e6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	607a      	str	r2, [r7, #4]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d006      	beq.n	8004e96 <I2C_MasterRequestWrite+0x2a>
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d003      	beq.n	8004e96 <I2C_MasterRequestWrite+0x2a>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e94:	d108      	bne.n	8004ea8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e00b      	b.n	8004ec0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	2b12      	cmp	r3, #18
 8004eae:	d107      	bne.n	8004ec0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ebe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fa9b 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00d      	beq.n	8004ef4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee6:	d103      	bne.n	8004ef0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e035      	b.n	8004f60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004efc:	d108      	bne.n	8004f10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004efe:	897b      	ldrh	r3, [r7, #10]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f0c:	611a      	str	r2, [r3, #16]
 8004f0e:	e01b      	b.n	8004f48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f10:	897b      	ldrh	r3, [r7, #10]
 8004f12:	11db      	asrs	r3, r3, #7
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	f003 0306 	and.w	r3, r3, #6
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f063 030f 	orn	r3, r3, #15
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	490e      	ldr	r1, [pc, #56]	; (8004f68 <I2C_MasterRequestWrite+0xfc>)
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fac1 	bl	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e010      	b.n	8004f60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f3e:	897b      	ldrh	r3, [r7, #10]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	4907      	ldr	r1, [pc, #28]	; (8004f6c <I2C_MasterRequestWrite+0x100>)
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 fab1 	bl	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	00010008 	.word	0x00010008
 8004f6c:	00010002 	.word	0x00010002

08004f70 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f94:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d006      	beq.n	8004faa <I2C_MasterRequestRead+0x3a>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d003      	beq.n	8004faa <I2C_MasterRequestRead+0x3a>
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fa8:	d108      	bne.n	8004fbc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	e00b      	b.n	8004fd4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	2b11      	cmp	r3, #17
 8004fc2:	d107      	bne.n	8004fd4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 fa11 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00d      	beq.n	8005008 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffa:	d103      	bne.n	8005004 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005002:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e079      	b.n	80050fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005010:	d108      	bne.n	8005024 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005012:	897b      	ldrh	r3, [r7, #10]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	611a      	str	r2, [r3, #16]
 8005022:	e05f      	b.n	80050e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005024:	897b      	ldrh	r3, [r7, #10]
 8005026:	11db      	asrs	r3, r3, #7
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f003 0306 	and.w	r3, r3, #6
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f063 030f 	orn	r3, r3, #15
 8005034:	b2da      	uxtb	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	4930      	ldr	r1, [pc, #192]	; (8005104 <I2C_MasterRequestRead+0x194>)
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 fa37 	bl	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e054      	b.n	80050fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005052:	897b      	ldrh	r3, [r7, #10]
 8005054:	b2da      	uxtb	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	4929      	ldr	r1, [pc, #164]	; (8005108 <I2C_MasterRequestRead+0x198>)
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fa27 	bl	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e044      	b.n	80050fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005096:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f9af 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00d      	beq.n	80050cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050be:	d103      	bne.n	80050c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e017      	b.n	80050fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80050cc:	897b      	ldrh	r3, [r7, #10]
 80050ce:	11db      	asrs	r3, r3, #7
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	f003 0306 	and.w	r3, r3, #6
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	f063 030e 	orn	r3, r3, #14
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	4907      	ldr	r1, [pc, #28]	; (8005108 <I2C_MasterRequestRead+0x198>)
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f9e3 	bl	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	00010008 	.word	0x00010008
 8005108:	00010002 	.word	0x00010002

0800510c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	4608      	mov	r0, r1
 8005116:	4611      	mov	r1, r2
 8005118:	461a      	mov	r2, r3
 800511a:	4603      	mov	r3, r0
 800511c:	817b      	strh	r3, [r7, #10]
 800511e:	460b      	mov	r3, r1
 8005120:	813b      	strh	r3, [r7, #8]
 8005122:	4613      	mov	r3, r2
 8005124:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005134:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	2200      	movs	r2, #0
 800513e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f960 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800515c:	d103      	bne.n	8005166 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005164:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e05f      	b.n	800522a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800516a:	897b      	ldrh	r3, [r7, #10]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	461a      	mov	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005178:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	6a3a      	ldr	r2, [r7, #32]
 800517e:	492d      	ldr	r1, [pc, #180]	; (8005234 <I2C_RequestMemoryWrite+0x128>)
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f998 	bl	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e04c      	b.n	800522a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a8:	6a39      	ldr	r1, [r7, #32]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 fa02 	bl	80055b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00d      	beq.n	80051d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d107      	bne.n	80051ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e02b      	b.n	800522a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d105      	bne.n	80051e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051d8:	893b      	ldrh	r3, [r7, #8]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	611a      	str	r2, [r3, #16]
 80051e2:	e021      	b.n	8005228 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051e4:	893b      	ldrh	r3, [r7, #8]
 80051e6:	0a1b      	lsrs	r3, r3, #8
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f4:	6a39      	ldr	r1, [r7, #32]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f9dc 	bl	80055b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00d      	beq.n	800521e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	2b04      	cmp	r3, #4
 8005208:	d107      	bne.n	800521a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005218:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e005      	b.n	800522a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800521e:	893b      	ldrh	r3, [r7, #8]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	00010002 	.word	0x00010002

08005238 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	4608      	mov	r0, r1
 8005242:	4611      	mov	r1, r2
 8005244:	461a      	mov	r2, r3
 8005246:	4603      	mov	r3, r0
 8005248:	817b      	strh	r3, [r7, #10]
 800524a:	460b      	mov	r3, r1
 800524c:	813b      	strh	r3, [r7, #8]
 800524e:	4613      	mov	r3, r2
 8005250:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005260:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005270:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	2200      	movs	r2, #0
 800527a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f8c2 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00d      	beq.n	80052a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005298:	d103      	bne.n	80052a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e0aa      	b.n	80053fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052a6:	897b      	ldrh	r3, [r7, #10]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	6a3a      	ldr	r2, [r7, #32]
 80052ba:	4952      	ldr	r1, [pc, #328]	; (8005404 <I2C_RequestMemoryRead+0x1cc>)
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f8fa 	bl	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e097      	b.n	80053fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e4:	6a39      	ldr	r1, [r7, #32]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f964 	bl	80055b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00d      	beq.n	800530e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d107      	bne.n	800530a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005308:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e076      	b.n	80053fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d105      	bne.n	8005320 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005314:	893b      	ldrh	r3, [r7, #8]
 8005316:	b2da      	uxtb	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	611a      	str	r2, [r3, #16]
 800531e:	e021      	b.n	8005364 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005320:	893b      	ldrh	r3, [r7, #8]
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	b29b      	uxth	r3, r3
 8005326:	b2da      	uxtb	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800532e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005330:	6a39      	ldr	r1, [r7, #32]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f93e 	bl	80055b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	2b04      	cmp	r3, #4
 8005344:	d107      	bne.n	8005356 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005354:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e050      	b.n	80053fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800535a:	893b      	ldrh	r3, [r7, #8]
 800535c:	b2da      	uxtb	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005366:	6a39      	ldr	r1, [r7, #32]
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f923 	bl	80055b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00d      	beq.n	8005390 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	2b04      	cmp	r3, #4
 800537a:	d107      	bne.n	800538c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800538a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e035      	b.n	80053fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800539e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f82b 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c6:	d103      	bne.n	80053d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e013      	b.n	80053fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053d4:	897b      	ldrh	r3, [r7, #10]
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	6a3a      	ldr	r2, [r7, #32]
 80053e8:	4906      	ldr	r1, [pc, #24]	; (8005404 <I2C_RequestMemoryRead+0x1cc>)
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f863 	bl	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	00010002 	.word	0x00010002

08005408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005418:	e025      	b.n	8005466 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005420:	d021      	beq.n	8005466 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005422:	f7fe fa5b 	bl	80038dc <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d302      	bcc.n	8005438 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d116      	bne.n	8005466 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f043 0220 	orr.w	r2, r3, #32
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e023      	b.n	80054ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	0c1b      	lsrs	r3, r3, #16
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	d10d      	bne.n	800548c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	43da      	mvns	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4013      	ands	r3, r2
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	bf0c      	ite	eq
 8005482:	2301      	moveq	r3, #1
 8005484:	2300      	movne	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	e00c      	b.n	80054a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	43da      	mvns	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4013      	ands	r3, r2
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	bf0c      	ite	eq
 800549e:	2301      	moveq	r3, #1
 80054a0:	2300      	movne	r3, #0
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	461a      	mov	r2, r3
 80054a6:	79fb      	ldrb	r3, [r7, #7]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d0b6      	beq.n	800541a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054c4:	e051      	b.n	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d4:	d123      	bne.n	800551e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f043 0204 	orr.w	r2, r3, #4
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e046      	b.n	80055ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005524:	d021      	beq.n	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005526:	f7fe f9d9 	bl	80038dc <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d116      	bne.n	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e020      	b.n	80055ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	0c1b      	lsrs	r3, r3, #16
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	d10c      	bne.n	800558e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	43da      	mvns	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	bf14      	ite	ne
 8005586:	2301      	movne	r3, #1
 8005588:	2300      	moveq	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	e00b      	b.n	80055a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	43da      	mvns	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	4013      	ands	r3, r2
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf14      	ite	ne
 80055a0:	2301      	movne	r3, #1
 80055a2:	2300      	moveq	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d18d      	bne.n	80054c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055c0:	e02d      	b.n	800561e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f8ce 	bl	8005764 <I2C_IsAcknowledgeFailed>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e02d      	b.n	800562e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055d8:	d021      	beq.n	800561e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055da:	f7fe f97f 	bl	80038dc <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d302      	bcc.n	80055f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d116      	bne.n	800561e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f043 0220 	orr.w	r2, r3, #32
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e007      	b.n	800562e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005628:	2b80      	cmp	r3, #128	; 0x80
 800562a:	d1ca      	bne.n	80055c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005642:	e02d      	b.n	80056a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f88d 	bl	8005764 <I2C_IsAcknowledgeFailed>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e02d      	b.n	80056b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800565a:	d021      	beq.n	80056a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565c:	f7fe f93e 	bl	80038dc <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	429a      	cmp	r2, r3
 800566a:	d302      	bcc.n	8005672 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d116      	bne.n	80056a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	f043 0220 	orr.w	r2, r3, #32
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e007      	b.n	80056b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d1ca      	bne.n	8005644 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056c4:	e042      	b.n	800574c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	d119      	bne.n	8005708 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0210 	mvn.w	r2, #16
 80056dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e029      	b.n	800575c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005708:	f7fe f8e8 	bl	80038dc <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	429a      	cmp	r2, r3
 8005716:	d302      	bcc.n	800571e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d116      	bne.n	800574c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	f043 0220 	orr.w	r2, r3, #32
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e007      	b.n	800575c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d1b5      	bne.n	80056c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800577a:	d11b      	bne.n	80057b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005784:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	f043 0204 	orr.w	r2, r3, #4
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057c2:	b08b      	sub	sp, #44	; 0x2c
 80057c4:	af06      	add	r7, sp, #24
 80057c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e0fd      	b.n	80059ce <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f009 fe5c 	bl	800f4a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2203      	movs	r2, #3
 80057f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f002 fe9f 	bl	800853c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	687e      	ldr	r6, [r7, #4]
 8005806:	466d      	mov	r5, sp
 8005808:	f106 0410 	add.w	r4, r6, #16
 800580c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800580e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	602b      	str	r3, [r5, #0]
 8005814:	1d33      	adds	r3, r6, #4
 8005816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005818:	6838      	ldr	r0, [r7, #0]
 800581a:	f002 fe69 	bl	80084f0 <USB_CoreInit>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e0ce      	b.n	80059ce <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2100      	movs	r1, #0
 8005836:	4618      	mov	r0, r3
 8005838:	f002 fe9a 	bl	8008570 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800583c:	2300      	movs	r3, #0
 800583e:	73fb      	strb	r3, [r7, #15]
 8005840:	e04c      	b.n	80058dc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	440b      	add	r3, r1
 8005852:	3301      	adds	r3, #1
 8005854:	2201      	movs	r2, #1
 8005856:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	440b      	add	r3, r1
 8005868:	7bfa      	ldrb	r2, [r7, #15]
 800586a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800586c:	7bfa      	ldrb	r2, [r7, #15]
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	b298      	uxth	r0, r3
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	440b      	add	r3, r1
 800587e:	3336      	adds	r3, #54	; 0x36
 8005880:	4602      	mov	r2, r0
 8005882:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	440b      	add	r3, r1
 8005894:	3303      	adds	r3, #3
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800589a:	7bfa      	ldrb	r2, [r7, #15]
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	440b      	add	r3, r1
 80058a8:	3338      	adds	r3, #56	; 0x38
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80058ae:	7bfa      	ldrb	r2, [r7, #15]
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	440b      	add	r3, r1
 80058bc:	333c      	adds	r3, #60	; 0x3c
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058c2:	7bfa      	ldrb	r2, [r7, #15]
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	440b      	add	r3, r1
 80058d0:	3340      	adds	r3, #64	; 0x40
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	3301      	adds	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
 80058dc:	7bfa      	ldrb	r2, [r7, #15]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d3ad      	bcc.n	8005842 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]
 80058ea:	e044      	b.n	8005976 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058ec:	7bfa      	ldrb	r2, [r7, #15]
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	4613      	mov	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	440b      	add	r3, r1
 80058fa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80058fe:	2200      	movs	r2, #0
 8005900:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005902:	7bfa      	ldrb	r2, [r7, #15]
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	440b      	add	r3, r1
 8005910:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005914:	7bfa      	ldrb	r2, [r7, #15]
 8005916:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005918:	7bfa      	ldrb	r2, [r7, #15]
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	440b      	add	r3, r1
 8005926:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800592a:	2200      	movs	r2, #0
 800592c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800592e:	7bfa      	ldrb	r2, [r7, #15]
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	440b      	add	r3, r1
 800593c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005944:	7bfa      	ldrb	r2, [r7, #15]
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	440b      	add	r3, r1
 8005952:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800595a:	7bfa      	ldrb	r2, [r7, #15]
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	440b      	add	r3, r1
 8005968:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	3301      	adds	r3, #1
 8005974:	73fb      	strb	r3, [r7, #15]
 8005976:	7bfa      	ldrb	r2, [r7, #15]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	d3b5      	bcc.n	80058ec <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	687e      	ldr	r6, [r7, #4]
 8005988:	466d      	mov	r5, sp
 800598a:	f106 0410 	add.w	r4, r6, #16
 800598e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	602b      	str	r3, [r5, #0]
 8005996:	1d33      	adds	r3, r6, #4
 8005998:	cb0e      	ldmia	r3, {r1, r2, r3}
 800599a:	6838      	ldr	r0, [r7, #0]
 800599c:	f002 fdf4 	bl	8008588 <USB_DevInit>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2202      	movs	r2, #2
 80059aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e00d      	b.n	80059ce <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f005 faa6 	bl	800af18 <USB_DevDisconnect>

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_PCD_Start+0x16>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e016      	b.n	8005a1a <HAL_PCD_Start+0x44>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f002 fd89 	bl	8008510 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80059fe:	2101      	movs	r1, #1
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f009 ffc2 	bl	800f98a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f005 fa7a 	bl	800af04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b088      	sub	sp, #32
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f005 fa7c 	bl	800af2c <USB_ReadInterrupts>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a3e:	d102      	bne.n	8005a46 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fb5f 	bl	8006104 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f005 fa6e 	bl	800af2c <USB_ReadInterrupts>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a5a:	d112      	bne.n	8005a82 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a6e:	b292      	uxth	r2, r2
 8005a70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f009 fd90 	bl	800f59a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f923 	bl	8005cc8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f005 fa50 	bl	800af2c <USB_ReadInterrupts>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a96:	d10b      	bne.n	8005ab0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005aaa:	b292      	uxth	r2, r2
 8005aac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f005 fa39 	bl	800af2c <USB_ReadInterrupts>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac4:	d10b      	bne.n	8005ade <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ad8:	b292      	uxth	r2, r2
 8005ada:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f005 fa22 	bl	800af2c <USB_ReadInterrupts>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af2:	d126      	bne.n	8005b42 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0204 	bic.w	r2, r2, #4
 8005b06:	b292      	uxth	r2, r2
 8005b08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0208 	bic.w	r2, r2, #8
 8005b1e:	b292      	uxth	r2, r2
 8005b20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f009 fd71 	bl	800f60c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b3c:	b292      	uxth	r2, r2
 8005b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f005 f9f0 	bl	800af2c <USB_ReadInterrupts>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b56:	f040 8082 	bne.w	8005c5e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	77fb      	strb	r3, [r7, #31]
 8005b5e:	e010      	b.n	8005b82 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	461a      	mov	r2, r3
 8005b66:	7ffb      	ldrb	r3, [r7, #31]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	441a      	add	r2, r3
 8005b6c:	7ffb      	ldrb	r3, [r7, #31]
 8005b6e:	8812      	ldrh	r2, [r2, #0]
 8005b70:	b292      	uxth	r2, r2
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	3320      	adds	r3, #32
 8005b76:	443b      	add	r3, r7
 8005b78:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8005b7c:	7ffb      	ldrb	r3, [r7, #31]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	77fb      	strb	r3, [r7, #31]
 8005b82:	7ffb      	ldrb	r3, [r7, #31]
 8005b84:	2b07      	cmp	r3, #7
 8005b86:	d9eb      	bls.n	8005b60 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	b292      	uxth	r2, r2
 8005b9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0201 	bic.w	r2, r2, #1
 8005bb2:	b292      	uxth	r2, r2
 8005bb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005bb8:	bf00      	nop
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0f6      	beq.n	8005bba <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bde:	b292      	uxth	r2, r2
 8005be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005be4:	2300      	movs	r3, #0
 8005be6:	77fb      	strb	r3, [r7, #31]
 8005be8:	e00f      	b.n	8005c0a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005bea:	7ffb      	ldrb	r3, [r7, #31]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6812      	ldr	r2, [r2, #0]
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	7ffa      	ldrb	r2, [r7, #31]
 8005bf4:	0092      	lsls	r2, r2, #2
 8005bf6:	440a      	add	r2, r1
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	3320      	adds	r3, #32
 8005bfc:	443b      	add	r3, r7
 8005bfe:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005c02:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005c04:	7ffb      	ldrb	r3, [r7, #31]
 8005c06:	3301      	adds	r3, #1
 8005c08:	77fb      	strb	r3, [r7, #31]
 8005c0a:	7ffb      	ldrb	r3, [r7, #31]
 8005c0c:	2b07      	cmp	r3, #7
 8005c0e:	d9ec      	bls.n	8005bea <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0208 	orr.w	r2, r2, #8
 8005c22:	b292      	uxth	r2, r2
 8005c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c3a:	b292      	uxth	r2, r2
 8005c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0204 	orr.w	r2, r2, #4
 8005c52:	b292      	uxth	r2, r2
 8005c54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f009 fcbd 	bl	800f5d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f005 f962 	bl	800af2c <USB_ReadInterrupts>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c72:	d10e      	bne.n	8005c92 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c86:	b292      	uxth	r2, r2
 8005c88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f009 fc76 	bl	800f57e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f005 f948 	bl	800af2c <USB_ReadInterrupts>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca6:	d10b      	bne.n	8005cc0 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cba:	b292      	uxth	r2, r2
 8005cbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005cc0:	bf00      	nop
 8005cc2:	3720      	adds	r7, #32
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_PCD_SetAddress+0x1a>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e013      	b.n	8005d0a <HAL_PCD_SetAddress+0x42>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	78fa      	ldrb	r2, [r7, #3]
 8005cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	78fa      	ldrb	r2, [r7, #3]
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f005 f8ef 	bl	800aede <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	4608      	mov	r0, r1
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	461a      	mov	r2, r3
 8005d20:	4603      	mov	r3, r0
 8005d22:	70fb      	strb	r3, [r7, #3]
 8005d24:	460b      	mov	r3, r1
 8005d26:	803b      	strh	r3, [r7, #0]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	da0e      	bge.n	8005d56 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	4613      	mov	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2201      	movs	r2, #1
 8005d52:	705a      	strb	r2, [r3, #1]
 8005d54:	e00e      	b.n	8005d74 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	f003 0207 	and.w	r2, r3, #7
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d80:	883a      	ldrh	r2, [r7, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	78ba      	ldrb	r2, [r7, #2]
 8005d8a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d9e:	78bb      	ldrb	r3, [r7, #2]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d102      	bne.n	8005daa <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_PCD_EP_Open+0xa6>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e00e      	b.n	8005dd6 <HAL_PCD_EP_Open+0xc4>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68f9      	ldr	r1, [r7, #12]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f002 fbfe 	bl	80085c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005dd4:	7afb      	ldrb	r3, [r7, #11]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	da0e      	bge.n	8005e10 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	705a      	strb	r2, [r3, #1]
 8005e0e:	e00e      	b.n	8005e2e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	f003 0207 	and.w	r2, r3, #7
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	4413      	add	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_PCD_EP_Close+0x6a>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e00e      	b.n	8005e66 <HAL_PCD_EP_Close+0x88>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68f9      	ldr	r1, [r7, #12]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f002 ff20 	bl	8008c9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b086      	sub	sp, #24
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e7e:	7afb      	ldrb	r3, [r7, #11]
 8005e80:	f003 0207 	and.w	r2, r3, #7
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eae:	7afb      	ldrb	r3, [r7, #11]
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005eba:	7afb      	ldrb	r3, [r7, #11]
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d106      	bne.n	8005ed2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6979      	ldr	r1, [r7, #20]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f003 f8d2 	bl	8009074 <USB_EPStartXfer>
 8005ed0:	e005      	b.n	8005ede <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6979      	ldr	r1, [r7, #20]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f003 f8cb 	bl	8009074 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	f003 0207 	and.w	r2, r3, #7
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	4613      	mov	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	440b      	add	r3, r1
 8005f06:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005f0a:	681b      	ldr	r3, [r3, #0]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr

08005f16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b086      	sub	sp, #24
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
 8005f22:	460b      	mov	r3, r1
 8005f24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f26:	7afb      	ldrb	r3, [r7, #11]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f62:	7afb      	ldrb	r3, [r7, #11]
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f6e:	7afb      	ldrb	r3, [r7, #11]
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d106      	bne.n	8005f86 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6979      	ldr	r1, [r7, #20]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f003 f878 	bl	8009074 <USB_EPStartXfer>
 8005f84:	e005      	b.n	8005f92 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6979      	ldr	r1, [r7, #20]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f003 f871 	bl	8009074 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	f003 0207 	and.w	r2, r3, #7
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d901      	bls.n	8005fba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e04c      	b.n	8006054 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	da0e      	bge.n	8005fe0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	705a      	strb	r2, [r3, #1]
 8005fde:	e00c      	b.n	8005ffa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005fe0:	78fa      	ldrb	r2, [r7, #3]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	b2da      	uxtb	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_PCD_EP_SetStall+0x7e>
 8006016:	2302      	movs	r3, #2
 8006018:	e01c      	b.n	8006054 <HAL_PCD_EP_SetStall+0xb8>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68f9      	ldr	r1, [r7, #12]
 8006028:	4618      	mov	r0, r3
 800602a:	f004 fe5b 	bl	800ace4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	2b00      	cmp	r3, #0
 8006036:	d108      	bne.n	800604a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006042:	4619      	mov	r1, r3
 8006044:	4610      	mov	r0, r2
 8006046:	f004 ff80 	bl	800af4a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006068:	78fb      	ldrb	r3, [r7, #3]
 800606a:	f003 020f 	and.w	r2, r3, #15
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	429a      	cmp	r2, r3
 8006074:	d901      	bls.n	800607a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e040      	b.n	80060fc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800607a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800607e:	2b00      	cmp	r3, #0
 8006080:	da0e      	bge.n	80060a0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	4613      	mov	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	4413      	add	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2201      	movs	r2, #1
 800609c:	705a      	strb	r2, [r3, #1]
 800609e:	e00e      	b.n	80060be <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	f003 0207 	and.w	r2, r3, #7
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	4413      	add	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	f003 0307 	and.w	r3, r3, #7
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d101      	bne.n	80060de <HAL_PCD_EP_ClrStall+0x82>
 80060da:	2302      	movs	r3, #2
 80060dc:	e00e      	b.n	80060fc <HAL_PCD_EP_ClrStall+0xa0>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68f9      	ldr	r1, [r7, #12]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f004 fe49 	bl	800ad84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08e      	sub	sp, #56	; 0x38
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800610c:	e2ec      	b.n	80066e8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006116:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006118:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800611a:	b2db      	uxtb	r3, r3
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8006124:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006128:	2b00      	cmp	r3, #0
 800612a:	f040 8161 	bne.w	80063f0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800612e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	2b00      	cmp	r3, #0
 8006136:	d152      	bne.n	80061de <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006148:	81fb      	strh	r3, [r7, #14]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	89fb      	ldrh	r3, [r7, #14]
 8006150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006158:	b29b      	uxth	r3, r3
 800615a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3328      	adds	r3, #40	; 0x28
 8006160:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800616a:	b29b      	uxth	r3, r3
 800616c:	461a      	mov	r2, r3
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	4413      	add	r3, r2
 8006176:	3302      	adds	r3, #2
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6812      	ldr	r2, [r2, #0]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	695a      	ldr	r2, [r3, #20]
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	441a      	add	r2, r3
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800619c:	2100      	movs	r1, #0
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f009 f9d3 	bl	800f54a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 829b 	beq.w	80066e8 <PCD_EP_ISR_Handler+0x5e4>
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f040 8296 	bne.w	80066e8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	b292      	uxth	r2, r2
 80061d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80061dc:	e284      	b.n	80066e8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80061ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80061f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d034      	beq.n	8006262 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006200:	b29b      	uxth	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	4413      	add	r3, r2
 800620c:	3306      	adds	r3, #6
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006236:	b29b      	uxth	r3, r3
 8006238:	f004 fed7 	bl	800afea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29a      	uxth	r2, r3
 8006244:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006248:	4013      	ands	r3, r2
 800624a:	823b      	strh	r3, [r7, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	8a3a      	ldrh	r2, [r7, #16]
 8006252:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006256:	b292      	uxth	r2, r2
 8006258:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f009 f948 	bl	800f4f0 <HAL_PCD_SetupStageCallback>
 8006260:	e242      	b.n	80066e8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006262:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006266:	2b00      	cmp	r3, #0
 8006268:	f280 823e 	bge.w	80066e8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b29a      	uxth	r2, r3
 8006274:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006278:	4013      	ands	r3, r2
 800627a:	83bb      	strh	r3, [r7, #28]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	8bba      	ldrh	r2, [r7, #28]
 8006282:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006286:	b292      	uxth	r2, r2
 8006288:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006292:	b29b      	uxth	r3, r3
 8006294:	461a      	mov	r2, r3
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	4413      	add	r3, r2
 800629e:	3306      	adds	r3, #6
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d019      	beq.n	80062f2 <PCD_EP_ISR_Handler+0x1ee>
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d015      	beq.n	80062f2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	6959      	ldr	r1, [r3, #20]
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f004 fe87 	bl	800afea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	441a      	add	r2, r3
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80062ea:	2100      	movs	r1, #0
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f009 f911 	bl	800f514 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f040 81f2 	bne.w	80066e8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	61bb      	str	r3, [r7, #24]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006312:	b29b      	uxth	r3, r3
 8006314:	461a      	mov	r2, r3
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	4413      	add	r3, r2
 800631a:	61bb      	str	r3, [r7, #24]
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d112      	bne.n	8006352 <PCD_EP_ISR_Handler+0x24e>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006336:	b29a      	uxth	r2, r3
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	801a      	strh	r2, [r3, #0]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	b29b      	uxth	r3, r3
 8006342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634a:	b29a      	uxth	r2, r3
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	801a      	strh	r2, [r3, #0]
 8006350:	e02f      	b.n	80063b2 <PCD_EP_ISR_Handler+0x2ae>
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b3e      	cmp	r3, #62	; 0x3e
 8006358:	d813      	bhi.n	8006382 <PCD_EP_ISR_Handler+0x27e>
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	085b      	lsrs	r3, r3, #1
 8006360:	633b      	str	r3, [r7, #48]	; 0x30
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <PCD_EP_ISR_Handler+0x270>
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	3301      	adds	r3, #1
 8006372:	633b      	str	r3, [r7, #48]	; 0x30
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	b29b      	uxth	r3, r3
 8006378:	029b      	lsls	r3, r3, #10
 800637a:	b29a      	uxth	r2, r3
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	e017      	b.n	80063b2 <PCD_EP_ISR_Handler+0x2ae>
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	633b      	str	r3, [r7, #48]	; 0x30
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 031f 	and.w	r3, r3, #31
 8006392:	2b00      	cmp	r3, #0
 8006394:	d102      	bne.n	800639c <PCD_EP_ISR_Handler+0x298>
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	3b01      	subs	r3, #1
 800639a:	633b      	str	r3, [r7, #48]	; 0x30
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	b29b      	uxth	r3, r3
 80063a0:	029b      	lsls	r3, r3, #10
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c2:	827b      	strh	r3, [r7, #18]
 80063c4:	8a7b      	ldrh	r3, [r7, #18]
 80063c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063ca:	827b      	strh	r3, [r7, #18]
 80063cc:	8a7b      	ldrh	r3, [r7, #18]
 80063ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063d2:	827b      	strh	r3, [r7, #18]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	8a7b      	ldrh	r3, [r7, #18]
 80063da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	8013      	strh	r3, [r2, #0]
 80063ee:	e17b      	b.n	80066e8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006402:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006406:	2b00      	cmp	r3, #0
 8006408:	f280 80ea 	bge.w	80065e0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29a      	uxth	r2, r3
 800641e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006422:	4013      	ands	r3, r2
 8006424:	853b      	strh	r3, [r7, #40]	; 0x28
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006436:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800643a:	b292      	uxth	r2, r2
 800643c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800643e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	4413      	add	r3, r2
 8006452:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	7b1b      	ldrb	r3, [r3, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d122      	bne.n	80064a2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006464:	b29b      	uxth	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	4413      	add	r3, r2
 8006470:	3306      	adds	r3, #6
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006484:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8006486:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 8087 	beq.w	800659c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	6959      	ldr	r1, [r3, #20]
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	88da      	ldrh	r2, [r3, #6]
 800649a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800649c:	f004 fda5 	bl	800afea <USB_ReadPMA>
 80064a0:	e07c      	b.n	800659c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	78db      	ldrb	r3, [r3, #3]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d108      	bne.n	80064bc <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80064aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80064ac:	461a      	mov	r2, r3
 80064ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f927 	bl	8006704 <HAL_PCD_EP_DB_Receive>
 80064b6:	4603      	mov	r3, r0
 80064b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80064ba:	e06f      	b.n	800659c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	461a      	mov	r2, r3
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	441a      	add	r2, r3
 80064e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d021      	beq.n	800655a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800651e:	b29b      	uxth	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	4413      	add	r3, r2
 800652a:	3302      	adds	r3, #2
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800653e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006540:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006542:	2b00      	cmp	r3, #0
 8006544:	d02a      	beq.n	800659c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	6959      	ldr	r1, [r3, #20]
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	891a      	ldrh	r2, [r3, #8]
 8006552:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006554:	f004 fd49 	bl	800afea <USB_ReadPMA>
 8006558:	e020      	b.n	800659c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006562:	b29b      	uxth	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	4413      	add	r3, r2
 800656e:	3306      	adds	r3, #6
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006582:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006584:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006586:	2b00      	cmp	r3, #0
 8006588:	d008      	beq.n	800659c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	6959      	ldr	r1, [r3, #20]
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	895a      	ldrh	r2, [r3, #10]
 8006596:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006598:	f004 fd27 	bl	800afea <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80065a2:	441a      	add	r2, r3
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	695a      	ldr	r2, [r3, #20]
 80065ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80065ae:	441a      	add	r2, r3
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <PCD_EP_ISR_Handler+0x4c2>
 80065bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d206      	bcs.n	80065d4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f008 ffa1 	bl	800f514 <HAL_PCD_DataOutStageCallback>
 80065d2:	e005      	b.n	80065e0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065da:	4618      	mov	r0, r3
 80065dc:	f002 fd4a 	bl	8009074 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80065e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80065e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d07e      	beq.n	80066e8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80065ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	4413      	add	r3, r2
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	843b      	strh	r3, [r7, #32]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	441a      	add	r2, r3
 8006628:	8c3b      	ldrh	r3, [r7, #32]
 800662a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006632:	b29b      	uxth	r3, r3
 8006634:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	78db      	ldrb	r3, [r3, #3]
 800663a:	2b03      	cmp	r3, #3
 800663c:	d00c      	beq.n	8006658 <PCD_EP_ISR_Handler+0x554>
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	78db      	ldrb	r3, [r3, #3]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d008      	beq.n	8006658 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800664a:	2b02      	cmp	r3, #2
 800664c:	d146      	bne.n	80066dc <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800664e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006654:	2b00      	cmp	r3, #0
 8006656:	d141      	bne.n	80066dc <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006660:	b29b      	uxth	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	4413      	add	r3, r2
 800666c:	3302      	adds	r3, #2
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006680:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	699a      	ldr	r2, [r3, #24]
 8006686:	8bfb      	ldrh	r3, [r7, #30]
 8006688:	429a      	cmp	r2, r3
 800668a:	d906      	bls.n	800669a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	699a      	ldr	r2, [r3, #24]
 8006690:	8bfb      	ldrh	r3, [r7, #30]
 8006692:	1ad2      	subs	r2, r2, r3
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	619a      	str	r2, [r3, #24]
 8006698:	e002      	b.n	80066a0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	2200      	movs	r2, #0
 800669e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d106      	bne.n	80066b6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f008 ff4b 	bl	800f54a <HAL_PCD_DataInStageCallback>
 80066b4:	e018      	b.n	80066e8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	8bfb      	ldrh	r3, [r7, #30]
 80066bc:	441a      	add	r2, r3
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	69da      	ldr	r2, [r3, #28]
 80066c6:	8bfb      	ldrh	r3, [r7, #30]
 80066c8:	441a      	add	r2, r3
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066d4:	4618      	mov	r0, r3
 80066d6:	f002 fccd 	bl	8009074 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80066da:	e005      	b.n	80066e8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80066dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80066de:	461a      	mov	r2, r3
 80066e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f91b 	bl	800691e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	b21b      	sxth	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f6ff ad0a 	blt.w	800610e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3738      	adds	r7, #56	; 0x38
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	4613      	mov	r3, r2
 8006710:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d07e      	beq.n	800681a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006724:	b29b      	uxth	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	4413      	add	r3, r2
 8006730:	3302      	adds	r3, #2
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	6812      	ldr	r2, [r2, #0]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006744:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	8b7b      	ldrh	r3, [r7, #26]
 800674c:	429a      	cmp	r2, r3
 800674e:	d306      	bcc.n	800675e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	699a      	ldr	r2, [r3, #24]
 8006754:	8b7b      	ldrh	r3, [r7, #26]
 8006756:	1ad2      	subs	r2, r2, r3
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	619a      	str	r2, [r3, #24]
 800675c:	e002      	b.n	8006764 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2200      	movs	r2, #0
 8006762:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d123      	bne.n	80067b4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006786:	833b      	strh	r3, [r7, #24]
 8006788:	8b3b      	ldrh	r3, [r7, #24]
 800678a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800678e:	833b      	strh	r3, [r7, #24]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	441a      	add	r2, r3
 800679e:	8b3b      	ldrh	r3, [r7, #24]
 80067a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80067b4:	88fb      	ldrh	r3, [r7, #6]
 80067b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01f      	beq.n	80067fe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d8:	82fb      	strh	r3, [r7, #22]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	441a      	add	r2, r3
 80067e8:	8afb      	ldrh	r3, [r7, #22]
 80067ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80067fe:	8b7b      	ldrh	r3, [r7, #26]
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8087 	beq.w	8006914 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	6959      	ldr	r1, [r3, #20]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	891a      	ldrh	r2, [r3, #8]
 8006812:	8b7b      	ldrh	r3, [r7, #26]
 8006814:	f004 fbe9 	bl	800afea <USB_ReadPMA>
 8006818:	e07c      	b.n	8006914 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006822:	b29b      	uxth	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	4413      	add	r3, r2
 800682e:	3306      	adds	r3, #6
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	6812      	ldr	r2, [r2, #0]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006842:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	699a      	ldr	r2, [r3, #24]
 8006848:	8b7b      	ldrh	r3, [r7, #26]
 800684a:	429a      	cmp	r2, r3
 800684c:	d306      	bcc.n	800685c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	8b7b      	ldrh	r3, [r7, #26]
 8006854:	1ad2      	subs	r2, r2, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	619a      	str	r2, [r3, #24]
 800685a:	e002      	b.n	8006862 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2200      	movs	r2, #0
 8006860:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d123      	bne.n	80068b2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	b29b      	uxth	r3, r3
 800687c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006884:	83fb      	strh	r3, [r7, #30]
 8006886:	8bfb      	ldrh	r3, [r7, #30]
 8006888:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800688c:	83fb      	strh	r3, [r7, #30]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	441a      	add	r2, r3
 800689c:	8bfb      	ldrh	r3, [r7, #30]
 800689e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d11f      	bne.n	80068fc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	461a      	mov	r2, r3
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d6:	83bb      	strh	r3, [r7, #28]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	441a      	add	r2, r3
 80068e6:	8bbb      	ldrh	r3, [r7, #28]
 80068e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80068fc:	8b7b      	ldrh	r3, [r7, #26]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d008      	beq.n	8006914 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	6959      	ldr	r1, [r3, #20]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	895a      	ldrh	r2, [r3, #10]
 800690e:	8b7b      	ldrh	r3, [r7, #26]
 8006910:	f004 fb6b 	bl	800afea <USB_ReadPMA>
    }
  }

  return count;
 8006914:	8b7b      	ldrh	r3, [r7, #26]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3720      	adds	r7, #32
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b0a2      	sub	sp, #136	; 0x88
 8006922:	af00      	add	r7, sp, #0
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	4613      	mov	r3, r2
 800692a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800692c:	88fb      	ldrh	r3, [r7, #6]
 800692e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 81c7 	beq.w	8006cc6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006940:	b29b      	uxth	r3, r3
 8006942:	461a      	mov	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	4413      	add	r3, r2
 800694c:	3302      	adds	r3, #2
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006960:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	699a      	ldr	r2, [r3, #24]
 8006968:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800696c:	429a      	cmp	r2, r3
 800696e:	d907      	bls.n	8006980 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	699a      	ldr	r2, [r3, #24]
 8006974:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006978:	1ad2      	subs	r2, r2, r3
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	619a      	str	r2, [r3, #24]
 800697e:	e002      	b.n	8006986 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2200      	movs	r2, #0
 8006984:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 80b9 	bne.w	8006b02 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d126      	bne.n	80069e6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	62bb      	str	r3, [r7, #40]	; 0x28
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	4413      	add	r3, r2
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	011a      	lsls	r2, r3, #4
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	4413      	add	r3, r2
 80069ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069be:	627b      	str	r3, [r7, #36]	; 0x24
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	801a      	strh	r2, [r3, #0]
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069de:	b29a      	uxth	r2, r3
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	e01a      	b.n	8006a1c <HAL_PCD_EP_DB_Transmit+0xfe>
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	785b      	ldrb	r3, [r3, #1]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d116      	bne.n	8006a1c <HAL_PCD_EP_DB_Transmit+0xfe>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	633b      	str	r3, [r7, #48]	; 0x30
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	4413      	add	r3, r2
 8006a04:	633b      	str	r3, [r7, #48]	; 0x30
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	011a      	lsls	r2, r3, #4
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	4413      	add	r3, r2
 8006a10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	2200      	movs	r2, #0
 8006a1a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	623b      	str	r3, [r7, #32]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	785b      	ldrb	r3, [r3, #1]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d126      	bne.n	8006a78 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	61bb      	str	r3, [r7, #24]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	4413      	add	r3, r2
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	011a      	lsls	r2, r3, #4
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	801a      	strh	r2, [r3, #0]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	801a      	strh	r2, [r3, #0]
 8006a76:	e017      	b.n	8006aa8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	785b      	ldrb	r3, [r3, #1]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d113      	bne.n	8006aa8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	4413      	add	r3, r2
 8006a90:	623b      	str	r3, [r7, #32]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	011a      	lsls	r2, r3, #4
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006aa0:	61fb      	str	r3, [r7, #28]
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	4619      	mov	r1, r3
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f008 fd4b 	bl	800f54a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ab4:	88fb      	ldrh	r3, [r7, #6]
 8006ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 82d4 	beq.w	8007068 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ada:	827b      	strh	r3, [r7, #18]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	441a      	add	r2, r3
 8006aea:	8a7b      	ldrh	r3, [r7, #18]
 8006aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006af4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	8013      	strh	r3, [r2, #0]
 8006b00:	e2b2      	b.n	8007068 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b02:	88fb      	ldrh	r3, [r7, #6]
 8006b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d021      	beq.n	8006b50 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	441a      	add	r2, r3
 8006b38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	f040 8286 	bne.w	8007068 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	695a      	ldr	r2, [r3, #20]
 8006b60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b64:	441a      	add	r2, r3
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	69da      	ldr	r2, [r3, #28]
 8006b6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b72:	441a      	add	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	6a1a      	ldr	r2, [r3, #32]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d309      	bcc.n	8006b98 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	6a1a      	ldr	r2, [r3, #32]
 8006b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b90:	1ad2      	subs	r2, r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	621a      	str	r2, [r3, #32]
 8006b96:	e015      	b.n	8006bc4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d107      	bne.n	8006bb0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8006ba0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ba4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006bae:	e009      	b.n	8006bc4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	785b      	ldrb	r3, [r3, #1]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d155      	bne.n	8006c78 <HAL_PCD_EP_DB_Transmit+0x35a>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be0:	4413      	add	r3, r2
 8006be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	011a      	lsls	r2, r3, #4
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	4413      	add	r3, r2
 8006bee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d112      	bne.n	8006c20 <HAL_PCD_EP_DB_Transmit+0x302>
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c08:	801a      	strh	r2, [r3, #0]
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1c:	801a      	strh	r2, [r3, #0]
 8006c1e:	e047      	b.n	8006cb0 <HAL_PCD_EP_DB_Transmit+0x392>
 8006c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c22:	2b3e      	cmp	r3, #62	; 0x3e
 8006c24:	d811      	bhi.n	8006c4a <HAL_PCD_EP_DB_Transmit+0x32c>
 8006c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c28:	085b      	lsrs	r3, r3, #1
 8006c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <HAL_PCD_EP_DB_Transmit+0x31e>
 8006c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c38:	3301      	adds	r3, #1
 8006c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	029b      	lsls	r3, r3, #10
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	e032      	b.n	8006cb0 <HAL_PCD_EP_DB_Transmit+0x392>
 8006c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c4c:	095b      	lsrs	r3, r3, #5
 8006c4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c52:	f003 031f 	and.w	r3, r3, #31
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d102      	bne.n	8006c60 <HAL_PCD_EP_DB_Transmit+0x342>
 8006c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	029b      	lsls	r3, r3, #10
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c74:	801a      	strh	r2, [r3, #0]
 8006c76:	e01b      	b.n	8006cb0 <HAL_PCD_EP_DB_Transmit+0x392>
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	785b      	ldrb	r3, [r3, #1]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d117      	bne.n	8006cb0 <HAL_PCD_EP_DB_Transmit+0x392>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	643b      	str	r3, [r7, #64]	; 0x40
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	461a      	mov	r2, r3
 8006c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c94:	4413      	add	r3, r2
 8006c96:	643b      	str	r3, [r7, #64]	; 0x40
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	011a      	lsls	r2, r3, #4
 8006c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cae:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6818      	ldr	r0, [r3, #0]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	6959      	ldr	r1, [r3, #20]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	891a      	ldrh	r2, [r3, #8]
 8006cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f004 f94e 	bl	800af60 <USB_WritePMA>
 8006cc4:	e1d0      	b.n	8007068 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	4413      	add	r3, r2
 8006cda:	3306      	adds	r3, #6
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	6812      	ldr	r2, [r2, #0]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d307      	bcc.n	8006d0e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d06:	1ad2      	subs	r2, r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	619a      	str	r2, [r3, #24]
 8006d0c:	e002      	b.n	8006d14 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2200      	movs	r2, #0
 8006d12:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f040 80c4 	bne.w	8006ea6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d126      	bne.n	8006d74 <HAL_PCD_EP_DB_Transmit+0x456>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d3a:	4413      	add	r3, r2
 8006d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	011a      	lsls	r2, r3, #4
 8006d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d46:	4413      	add	r3, r2
 8006d48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d70:	801a      	strh	r2, [r3, #0]
 8006d72:	e01a      	b.n	8006daa <HAL_PCD_EP_DB_Transmit+0x48c>
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	785b      	ldrb	r3, [r3, #1]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d116      	bne.n	8006daa <HAL_PCD_EP_DB_Transmit+0x48c>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	677b      	str	r3, [r7, #116]	; 0x74
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d90:	4413      	add	r3, r2
 8006d92:	677b      	str	r3, [r7, #116]	; 0x74
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	011a      	lsls	r2, r3, #4
 8006d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006da2:	673b      	str	r3, [r7, #112]	; 0x70
 8006da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006da6:	2200      	movs	r2, #0
 8006da8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	67bb      	str	r3, [r7, #120]	; 0x78
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	785b      	ldrb	r3, [r3, #1]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d12f      	bne.n	8006e18 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	011a      	lsls	r2, r3, #4
 8006ddc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006de0:	4413      	add	r3, r2
 8006de2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006de6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dfc:	801a      	strh	r2, [r3, #0]
 8006dfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e14:	801a      	strh	r2, [r3, #0]
 8006e16:	e017      	b.n	8006e48 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d113      	bne.n	8006e48 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e2e:	4413      	add	r3, r2
 8006e30:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	011a      	lsls	r2, r3, #4
 8006e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e44:	2200      	movs	r2, #0
 8006e46:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f008 fb7b 	bl	800f54a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006e54:	88fb      	ldrh	r3, [r7, #6]
 8006e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f040 8104 	bne.w	8007068 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	441a      	add	r2, r3
 8006e8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	8013      	strh	r3, [r2, #0]
 8006ea4:	e0e0      	b.n	8007068 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006ea6:	88fb      	ldrh	r3, [r7, #6]
 8006ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d121      	bne.n	8006ef4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	441a      	add	r2, r3
 8006edc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	f040 80b4 	bne.w	8007068 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	695a      	ldr	r2, [r3, #20]
 8006f04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f08:	441a      	add	r2, r3
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	69da      	ldr	r2, [r3, #28]
 8006f12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f16:	441a      	add	r2, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	6a1a      	ldr	r2, [r3, #32]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d309      	bcc.n	8006f3c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	6a1a      	ldr	r2, [r3, #32]
 8006f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f34:	1ad2      	subs	r2, r2, r3
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	621a      	str	r2, [r3, #32]
 8006f3a:	e015      	b.n	8006f68 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d107      	bne.n	8006f54 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8006f44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f48:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006f52:	e009      	b.n	8006f68 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	785b      	ldrb	r3, [r3, #1]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d155      	bne.n	8007022 <HAL_PCD_EP_DB_Transmit+0x704>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f8a:	4413      	add	r3, r2
 8006f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	011a      	lsls	r2, r3, #4
 8006f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f96:	4413      	add	r3, r2
 8006f98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d112      	bne.n	8006fca <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006fa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fc6:	801a      	strh	r2, [r3, #0]
 8006fc8:	e044      	b.n	8007054 <HAL_PCD_EP_DB_Transmit+0x736>
 8006fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fcc:	2b3e      	cmp	r3, #62	; 0x3e
 8006fce:	d811      	bhi.n	8006ff4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd2:	085b      	lsrs	r3, r3, #1
 8006fd4:	657b      	str	r3, [r7, #84]	; 0x54
 8006fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	657b      	str	r3, [r7, #84]	; 0x54
 8006fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	029b      	lsls	r3, r3, #10
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	e02f      	b.n	8007054 <HAL_PCD_EP_DB_Transmit+0x736>
 8006ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ff6:	095b      	lsrs	r3, r3, #5
 8006ff8:	657b      	str	r3, [r7, #84]	; 0x54
 8006ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ffc:	f003 031f 	and.w	r3, r3, #31
 8007000:	2b00      	cmp	r3, #0
 8007002:	d102      	bne.n	800700a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8007004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007006:	3b01      	subs	r3, #1
 8007008:	657b      	str	r3, [r7, #84]	; 0x54
 800700a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800700c:	b29b      	uxth	r3, r3
 800700e:	029b      	lsls	r3, r3, #10
 8007010:	b29b      	uxth	r3, r3
 8007012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701a:	b29a      	uxth	r2, r3
 800701c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	e018      	b.n	8007054 <HAL_PCD_EP_DB_Transmit+0x736>
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d114      	bne.n	8007054 <HAL_PCD_EP_DB_Transmit+0x736>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007032:	b29b      	uxth	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007038:	4413      	add	r3, r2
 800703a:	667b      	str	r3, [r7, #100]	; 0x64
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	011a      	lsls	r2, r3, #4
 8007042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007044:	4413      	add	r3, r2
 8007046:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800704a:	663b      	str	r3, [r7, #96]	; 0x60
 800704c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800704e:	b29a      	uxth	r2, r3
 8007050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007052:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	6959      	ldr	r1, [r3, #20]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	895a      	ldrh	r2, [r3, #10]
 8007060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007062:	b29b      	uxth	r3, r3
 8007064:	f003 ff7c 	bl	800af60 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	b29b      	uxth	r3, r3
 800707a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007082:	823b      	strh	r3, [r7, #16]
 8007084:	8a3b      	ldrh	r3, [r7, #16]
 8007086:	f083 0310 	eor.w	r3, r3, #16
 800708a:	823b      	strh	r3, [r7, #16]
 800708c:	8a3b      	ldrh	r3, [r7, #16]
 800708e:	f083 0320 	eor.w	r3, r3, #32
 8007092:	823b      	strh	r3, [r7, #16]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	441a      	add	r2, r3
 80070a2:	8a3b      	ldrh	r3, [r7, #16]
 80070a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3788      	adds	r7, #136	; 0x88
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b087      	sub	sp, #28
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	607b      	str	r3, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	817b      	strh	r3, [r7, #10]
 80070d0:	4613      	mov	r3, r2
 80070d2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80070d4:	897b      	ldrh	r3, [r7, #10]
 80070d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070da:	b29b      	uxth	r3, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00b      	beq.n	80070f8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070e0:	897b      	ldrh	r3, [r7, #10]
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	00db      	lsls	r3, r3, #3
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]
 80070f6:	e009      	b.n	800710c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80070f8:	897a      	ldrh	r2, [r7, #10]
 80070fa:	4613      	mov	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	4413      	add	r3, r2
 800710a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800710c:	893b      	ldrh	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d107      	bne.n	8007122 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2200      	movs	r2, #0
 8007116:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	b29a      	uxth	r2, r3
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	80da      	strh	r2, [r3, #6]
 8007120:	e00b      	b.n	800713a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2201      	movs	r2, #1
 8007126:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	b29a      	uxth	r2, r3
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	b29a      	uxth	r2, r3
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	371c      	adds	r7, #28
 8007140:	46bd      	mov	sp, r7
 8007142:	bc80      	pop	{r7}
 8007144:	4770      	bx	lr
	...

08007148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e272      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 8087 	beq.w	8007276 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007168:	4b92      	ldr	r3, [pc, #584]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f003 030c 	and.w	r3, r3, #12
 8007170:	2b04      	cmp	r3, #4
 8007172:	d00c      	beq.n	800718e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007174:	4b8f      	ldr	r3, [pc, #572]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f003 030c 	and.w	r3, r3, #12
 800717c:	2b08      	cmp	r3, #8
 800717e:	d112      	bne.n	80071a6 <HAL_RCC_OscConfig+0x5e>
 8007180:	4b8c      	ldr	r3, [pc, #560]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800718c:	d10b      	bne.n	80071a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800718e:	4b89      	ldr	r3, [pc, #548]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d06c      	beq.n	8007274 <HAL_RCC_OscConfig+0x12c>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d168      	bne.n	8007274 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e24c      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ae:	d106      	bne.n	80071be <HAL_RCC_OscConfig+0x76>
 80071b0:	4b80      	ldr	r3, [pc, #512]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a7f      	ldr	r2, [pc, #508]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 80071b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071ba:	6013      	str	r3, [r2, #0]
 80071bc:	e02e      	b.n	800721c <HAL_RCC_OscConfig+0xd4>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10c      	bne.n	80071e0 <HAL_RCC_OscConfig+0x98>
 80071c6:	4b7b      	ldr	r3, [pc, #492]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a7a      	ldr	r2, [pc, #488]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 80071cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	4b78      	ldr	r3, [pc, #480]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a77      	ldr	r2, [pc, #476]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 80071d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	e01d      	b.n	800721c <HAL_RCC_OscConfig+0xd4>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071e8:	d10c      	bne.n	8007204 <HAL_RCC_OscConfig+0xbc>
 80071ea:	4b72      	ldr	r3, [pc, #456]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a71      	ldr	r2, [pc, #452]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 80071f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071f4:	6013      	str	r3, [r2, #0]
 80071f6:	4b6f      	ldr	r3, [pc, #444]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a6e      	ldr	r2, [pc, #440]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 80071fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	e00b      	b.n	800721c <HAL_RCC_OscConfig+0xd4>
 8007204:	4b6b      	ldr	r3, [pc, #428]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a6a      	ldr	r2, [pc, #424]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 800720a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	4b68      	ldr	r3, [pc, #416]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a67      	ldr	r2, [pc, #412]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 8007216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800721a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d013      	beq.n	800724c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007224:	f7fc fb5a 	bl	80038dc <HAL_GetTick>
 8007228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800722a:	e008      	b.n	800723e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800722c:	f7fc fb56 	bl	80038dc <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b64      	cmp	r3, #100	; 0x64
 8007238:	d901      	bls.n	800723e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e200      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800723e:	4b5d      	ldr	r3, [pc, #372]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0f0      	beq.n	800722c <HAL_RCC_OscConfig+0xe4>
 800724a:	e014      	b.n	8007276 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800724c:	f7fc fb46 	bl	80038dc <HAL_GetTick>
 8007250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007252:	e008      	b.n	8007266 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007254:	f7fc fb42 	bl	80038dc <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b64      	cmp	r3, #100	; 0x64
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e1ec      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007266:	4b53      	ldr	r3, [pc, #332]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1f0      	bne.n	8007254 <HAL_RCC_OscConfig+0x10c>
 8007272:	e000      	b.n	8007276 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d063      	beq.n	800734a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007282:	4b4c      	ldr	r3, [pc, #304]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f003 030c 	and.w	r3, r3, #12
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00b      	beq.n	80072a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800728e:	4b49      	ldr	r3, [pc, #292]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f003 030c 	and.w	r3, r3, #12
 8007296:	2b08      	cmp	r3, #8
 8007298:	d11c      	bne.n	80072d4 <HAL_RCC_OscConfig+0x18c>
 800729a:	4b46      	ldr	r3, [pc, #280]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d116      	bne.n	80072d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072a6:	4b43      	ldr	r3, [pc, #268]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d005      	beq.n	80072be <HAL_RCC_OscConfig+0x176>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d001      	beq.n	80072be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e1c0      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072be:	4b3d      	ldr	r3, [pc, #244]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4939      	ldr	r1, [pc, #228]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072d2:	e03a      	b.n	800734a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d020      	beq.n	800731e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072dc:	4b36      	ldr	r3, [pc, #216]	; (80073b8 <HAL_RCC_OscConfig+0x270>)
 80072de:	2201      	movs	r2, #1
 80072e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e2:	f7fc fafb 	bl	80038dc <HAL_GetTick>
 80072e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e8:	e008      	b.n	80072fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072ea:	f7fc faf7 	bl	80038dc <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d901      	bls.n	80072fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e1a1      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072fc:	4b2d      	ldr	r3, [pc, #180]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0f0      	beq.n	80072ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007308:	4b2a      	ldr	r3, [pc, #168]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	4927      	ldr	r1, [pc, #156]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 8007318:	4313      	orrs	r3, r2
 800731a:	600b      	str	r3, [r1, #0]
 800731c:	e015      	b.n	800734a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800731e:	4b26      	ldr	r3, [pc, #152]	; (80073b8 <HAL_RCC_OscConfig+0x270>)
 8007320:	2200      	movs	r2, #0
 8007322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007324:	f7fc fada 	bl	80038dc <HAL_GetTick>
 8007328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800732a:	e008      	b.n	800733e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800732c:	f7fc fad6 	bl	80038dc <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e180      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800733e:	4b1d      	ldr	r3, [pc, #116]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1f0      	bne.n	800732c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d03a      	beq.n	80073cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d019      	beq.n	8007392 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800735e:	4b17      	ldr	r3, [pc, #92]	; (80073bc <HAL_RCC_OscConfig+0x274>)
 8007360:	2201      	movs	r2, #1
 8007362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007364:	f7fc faba 	bl	80038dc <HAL_GetTick>
 8007368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800736c:	f7fc fab6 	bl	80038dc <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e160      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800737e:	4b0d      	ldr	r3, [pc, #52]	; (80073b4 <HAL_RCC_OscConfig+0x26c>)
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d0f0      	beq.n	800736c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800738a:	2001      	movs	r0, #1
 800738c:	f000 fada 	bl	8007944 <RCC_Delay>
 8007390:	e01c      	b.n	80073cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007392:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <HAL_RCC_OscConfig+0x274>)
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007398:	f7fc faa0 	bl	80038dc <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800739e:	e00f      	b.n	80073c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073a0:	f7fc fa9c 	bl	80038dc <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d908      	bls.n	80073c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e146      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
 80073b2:	bf00      	nop
 80073b4:	40021000 	.word	0x40021000
 80073b8:	42420000 	.word	0x42420000
 80073bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073c0:	4b92      	ldr	r3, [pc, #584]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e9      	bne.n	80073a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0304 	and.w	r3, r3, #4
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 80a6 	beq.w	8007526 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073da:	2300      	movs	r3, #0
 80073dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073de:	4b8b      	ldr	r3, [pc, #556]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10d      	bne.n	8007406 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073ea:	4b88      	ldr	r3, [pc, #544]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	4a87      	ldr	r2, [pc, #540]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 80073f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f4:	61d3      	str	r3, [r2, #28]
 80073f6:	4b85      	ldr	r3, [pc, #532]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073fe:	60bb      	str	r3, [r7, #8]
 8007400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007402:	2301      	movs	r3, #1
 8007404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007406:	4b82      	ldr	r3, [pc, #520]	; (8007610 <HAL_RCC_OscConfig+0x4c8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740e:	2b00      	cmp	r3, #0
 8007410:	d118      	bne.n	8007444 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007412:	4b7f      	ldr	r3, [pc, #508]	; (8007610 <HAL_RCC_OscConfig+0x4c8>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a7e      	ldr	r2, [pc, #504]	; (8007610 <HAL_RCC_OscConfig+0x4c8>)
 8007418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800741c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800741e:	f7fc fa5d 	bl	80038dc <HAL_GetTick>
 8007422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007424:	e008      	b.n	8007438 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007426:	f7fc fa59 	bl	80038dc <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	2b64      	cmp	r3, #100	; 0x64
 8007432:	d901      	bls.n	8007438 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e103      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007438:	4b75      	ldr	r3, [pc, #468]	; (8007610 <HAL_RCC_OscConfig+0x4c8>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0f0      	beq.n	8007426 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d106      	bne.n	800745a <HAL_RCC_OscConfig+0x312>
 800744c:	4b6f      	ldr	r3, [pc, #444]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	4a6e      	ldr	r2, [pc, #440]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 8007452:	f043 0301 	orr.w	r3, r3, #1
 8007456:	6213      	str	r3, [r2, #32]
 8007458:	e02d      	b.n	80074b6 <HAL_RCC_OscConfig+0x36e>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10c      	bne.n	800747c <HAL_RCC_OscConfig+0x334>
 8007462:	4b6a      	ldr	r3, [pc, #424]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	4a69      	ldr	r2, [pc, #420]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	6213      	str	r3, [r2, #32]
 800746e:	4b67      	ldr	r3, [pc, #412]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	4a66      	ldr	r2, [pc, #408]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 8007474:	f023 0304 	bic.w	r3, r3, #4
 8007478:	6213      	str	r3, [r2, #32]
 800747a:	e01c      	b.n	80074b6 <HAL_RCC_OscConfig+0x36e>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	2b05      	cmp	r3, #5
 8007482:	d10c      	bne.n	800749e <HAL_RCC_OscConfig+0x356>
 8007484:	4b61      	ldr	r3, [pc, #388]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	4a60      	ldr	r2, [pc, #384]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 800748a:	f043 0304 	orr.w	r3, r3, #4
 800748e:	6213      	str	r3, [r2, #32]
 8007490:	4b5e      	ldr	r3, [pc, #376]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	4a5d      	ldr	r2, [pc, #372]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 8007496:	f043 0301 	orr.w	r3, r3, #1
 800749a:	6213      	str	r3, [r2, #32]
 800749c:	e00b      	b.n	80074b6 <HAL_RCC_OscConfig+0x36e>
 800749e:	4b5b      	ldr	r3, [pc, #364]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	4a5a      	ldr	r2, [pc, #360]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 80074a4:	f023 0301 	bic.w	r3, r3, #1
 80074a8:	6213      	str	r3, [r2, #32]
 80074aa:	4b58      	ldr	r3, [pc, #352]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	4a57      	ldr	r2, [pc, #348]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 80074b0:	f023 0304 	bic.w	r3, r3, #4
 80074b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d015      	beq.n	80074ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074be:	f7fc fa0d 	bl	80038dc <HAL_GetTick>
 80074c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074c4:	e00a      	b.n	80074dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074c6:	f7fc fa09 	bl	80038dc <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d901      	bls.n	80074dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e0b1      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074dc:	4b4b      	ldr	r3, [pc, #300]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d0ee      	beq.n	80074c6 <HAL_RCC_OscConfig+0x37e>
 80074e8:	e014      	b.n	8007514 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074ea:	f7fc f9f7 	bl	80038dc <HAL_GetTick>
 80074ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074f0:	e00a      	b.n	8007508 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074f2:	f7fc f9f3 	bl	80038dc <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007500:	4293      	cmp	r3, r2
 8007502:	d901      	bls.n	8007508 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e09b      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007508:	4b40      	ldr	r3, [pc, #256]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1ee      	bne.n	80074f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007514:	7dfb      	ldrb	r3, [r7, #23]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d105      	bne.n	8007526 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800751a:	4b3c      	ldr	r3, [pc, #240]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	4a3b      	ldr	r2, [pc, #236]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 8007520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007524:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 8087 	beq.w	800763e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007530:	4b36      	ldr	r3, [pc, #216]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f003 030c 	and.w	r3, r3, #12
 8007538:	2b08      	cmp	r3, #8
 800753a:	d061      	beq.n	8007600 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d146      	bne.n	80075d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007544:	4b33      	ldr	r3, [pc, #204]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800754a:	f7fc f9c7 	bl	80038dc <HAL_GetTick>
 800754e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007550:	e008      	b.n	8007564 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007552:	f7fc f9c3 	bl	80038dc <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d901      	bls.n	8007564 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e06d      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007564:	4b29      	ldr	r3, [pc, #164]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f0      	bne.n	8007552 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007578:	d108      	bne.n	800758c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800757a:	4b24      	ldr	r3, [pc, #144]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	4921      	ldr	r1, [pc, #132]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 8007588:	4313      	orrs	r3, r2
 800758a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800758c:	4b1f      	ldr	r3, [pc, #124]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a19      	ldr	r1, [r3, #32]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	430b      	orrs	r3, r1
 800759e:	491b      	ldr	r1, [pc, #108]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075a4:	4b1b      	ldr	r3, [pc, #108]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80075a6:	2201      	movs	r2, #1
 80075a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075aa:	f7fc f997 	bl	80038dc <HAL_GetTick>
 80075ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80075b0:	e008      	b.n	80075c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075b2:	f7fc f993 	bl	80038dc <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d901      	bls.n	80075c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e03d      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80075c4:	4b11      	ldr	r3, [pc, #68]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0f0      	beq.n	80075b2 <HAL_RCC_OscConfig+0x46a>
 80075d0:	e035      	b.n	800763e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075d2:	4b10      	ldr	r3, [pc, #64]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075d8:	f7fc f980 	bl	80038dc <HAL_GetTick>
 80075dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075e0:	f7fc f97c 	bl	80038dc <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e026      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075f2:	4b06      	ldr	r3, [pc, #24]	; (800760c <HAL_RCC_OscConfig+0x4c4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1f0      	bne.n	80075e0 <HAL_RCC_OscConfig+0x498>
 80075fe:	e01e      	b.n	800763e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d107      	bne.n	8007618 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e019      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
 800760c:	40021000 	.word	0x40021000
 8007610:	40007000 	.word	0x40007000
 8007614:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007618:	4b0b      	ldr	r3, [pc, #44]	; (8007648 <HAL_RCC_OscConfig+0x500>)
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	429a      	cmp	r2, r3
 800762a:	d106      	bne.n	800763a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007636:	429a      	cmp	r2, r3
 8007638:	d001      	beq.n	800763e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e000      	b.n	8007640 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40021000 	.word	0x40021000

0800764c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e0d0      	b.n	8007802 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007660:	4b6a      	ldr	r3, [pc, #424]	; (800780c <HAL_RCC_ClockConfig+0x1c0>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d910      	bls.n	8007690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800766e:	4b67      	ldr	r3, [pc, #412]	; (800780c <HAL_RCC_ClockConfig+0x1c0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f023 0207 	bic.w	r2, r3, #7
 8007676:	4965      	ldr	r1, [pc, #404]	; (800780c <HAL_RCC_ClockConfig+0x1c0>)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	4313      	orrs	r3, r2
 800767c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800767e:	4b63      	ldr	r3, [pc, #396]	; (800780c <HAL_RCC_ClockConfig+0x1c0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d001      	beq.n	8007690 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e0b8      	b.n	8007802 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d020      	beq.n	80076de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076a8:	4b59      	ldr	r3, [pc, #356]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	4a58      	ldr	r2, [pc, #352]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 80076ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80076b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0308 	and.w	r3, r3, #8
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076c0:	4b53      	ldr	r3, [pc, #332]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	4a52      	ldr	r2, [pc, #328]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 80076c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80076ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076cc:	4b50      	ldr	r3, [pc, #320]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	494d      	ldr	r1, [pc, #308]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d040      	beq.n	800776c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d107      	bne.n	8007702 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076f2:	4b47      	ldr	r3, [pc, #284]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d115      	bne.n	800772a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e07f      	b.n	8007802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d107      	bne.n	800771a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800770a:	4b41      	ldr	r3, [pc, #260]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e073      	b.n	8007802 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800771a:	4b3d      	ldr	r3, [pc, #244]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e06b      	b.n	8007802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800772a:	4b39      	ldr	r3, [pc, #228]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f023 0203 	bic.w	r2, r3, #3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	4936      	ldr	r1, [pc, #216]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 8007738:	4313      	orrs	r3, r2
 800773a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800773c:	f7fc f8ce 	bl	80038dc <HAL_GetTick>
 8007740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007742:	e00a      	b.n	800775a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007744:	f7fc f8ca 	bl	80038dc <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007752:	4293      	cmp	r3, r2
 8007754:	d901      	bls.n	800775a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e053      	b.n	8007802 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800775a:	4b2d      	ldr	r3, [pc, #180]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f003 020c 	and.w	r2, r3, #12
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	429a      	cmp	r2, r3
 800776a:	d1eb      	bne.n	8007744 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800776c:	4b27      	ldr	r3, [pc, #156]	; (800780c <HAL_RCC_ClockConfig+0x1c0>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d210      	bcs.n	800779c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800777a:	4b24      	ldr	r3, [pc, #144]	; (800780c <HAL_RCC_ClockConfig+0x1c0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f023 0207 	bic.w	r2, r3, #7
 8007782:	4922      	ldr	r1, [pc, #136]	; (800780c <HAL_RCC_ClockConfig+0x1c0>)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	4313      	orrs	r3, r2
 8007788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800778a:	4b20      	ldr	r3, [pc, #128]	; (800780c <HAL_RCC_ClockConfig+0x1c0>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d001      	beq.n	800779c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e032      	b.n	8007802 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d008      	beq.n	80077ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077a8:	4b19      	ldr	r3, [pc, #100]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	4916      	ldr	r1, [pc, #88]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0308 	and.w	r3, r3, #8
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80077c6:	4b12      	ldr	r3, [pc, #72]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	490e      	ldr	r1, [pc, #56]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80077da:	f000 f821 	bl	8007820 <HAL_RCC_GetSysClockFreq>
 80077de:	4602      	mov	r2, r0
 80077e0:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	091b      	lsrs	r3, r3, #4
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	490a      	ldr	r1, [pc, #40]	; (8007814 <HAL_RCC_ClockConfig+0x1c8>)
 80077ec:	5ccb      	ldrb	r3, [r1, r3]
 80077ee:	fa22 f303 	lsr.w	r3, r2, r3
 80077f2:	4a09      	ldr	r2, [pc, #36]	; (8007818 <HAL_RCC_ClockConfig+0x1cc>)
 80077f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80077f6:	4b09      	ldr	r3, [pc, #36]	; (800781c <HAL_RCC_ClockConfig+0x1d0>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fc f82c 	bl	8003858 <HAL_InitTick>

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	40022000 	.word	0x40022000
 8007810:	40021000 	.word	0x40021000
 8007814:	08010944 	.word	0x08010944
 8007818:	20000004 	.word	0x20000004
 800781c:	20000008 	.word	0x20000008

08007820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007820:	b490      	push	{r4, r7}
 8007822:	b08a      	sub	sp, #40	; 0x28
 8007824:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007826:	4b29      	ldr	r3, [pc, #164]	; (80078cc <HAL_RCC_GetSysClockFreq+0xac>)
 8007828:	1d3c      	adds	r4, r7, #4
 800782a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800782c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007830:	f240 2301 	movw	r3, #513	; 0x201
 8007834:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	61fb      	str	r3, [r7, #28]
 800783a:	2300      	movs	r3, #0
 800783c:	61bb      	str	r3, [r7, #24]
 800783e:	2300      	movs	r3, #0
 8007840:	627b      	str	r3, [r7, #36]	; 0x24
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800784a:	4b21      	ldr	r3, [pc, #132]	; (80078d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f003 030c 	and.w	r3, r3, #12
 8007856:	2b04      	cmp	r3, #4
 8007858:	d002      	beq.n	8007860 <HAL_RCC_GetSysClockFreq+0x40>
 800785a:	2b08      	cmp	r3, #8
 800785c:	d003      	beq.n	8007866 <HAL_RCC_GetSysClockFreq+0x46>
 800785e:	e02b      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007860:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007862:	623b      	str	r3, [r7, #32]
      break;
 8007864:	e02b      	b.n	80078be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	0c9b      	lsrs	r3, r3, #18
 800786a:	f003 030f 	and.w	r3, r3, #15
 800786e:	3328      	adds	r3, #40	; 0x28
 8007870:	443b      	add	r3, r7
 8007872:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007876:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d012      	beq.n	80078a8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007882:	4b13      	ldr	r3, [pc, #76]	; (80078d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	0c5b      	lsrs	r3, r3, #17
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	3328      	adds	r3, #40	; 0x28
 800788e:	443b      	add	r3, r7
 8007890:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007894:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	4a0e      	ldr	r2, [pc, #56]	; (80078d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800789a:	fb03 f202 	mul.w	r2, r3, r2
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
 80078a6:	e004      	b.n	80078b2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	4a0b      	ldr	r2, [pc, #44]	; (80078d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078ac:	fb02 f303 	mul.w	r3, r2, r3
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	623b      	str	r3, [r7, #32]
      break;
 80078b6:	e002      	b.n	80078be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80078b8:	4b08      	ldr	r3, [pc, #32]	; (80078dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80078ba:	623b      	str	r3, [r7, #32]
      break;
 80078bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078be:	6a3b      	ldr	r3, [r7, #32]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3728      	adds	r7, #40	; 0x28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bc90      	pop	{r4, r7}
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	080106c4 	.word	0x080106c4
 80078d0:	40021000 	.word	0x40021000
 80078d4:	00f42400 	.word	0x00f42400
 80078d8:	003d0900 	.word	0x003d0900
 80078dc:	007a1200 	.word	0x007a1200

080078e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078e0:	b480      	push	{r7}
 80078e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078e4:	4b02      	ldr	r3, [pc, #8]	; (80078f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80078e6:	681b      	ldr	r3, [r3, #0]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bc80      	pop	{r7}
 80078ee:	4770      	bx	lr
 80078f0:	20000004 	.word	0x20000004

080078f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80078f8:	f7ff fff2 	bl	80078e0 <HAL_RCC_GetHCLKFreq>
 80078fc:	4602      	mov	r2, r0
 80078fe:	4b05      	ldr	r3, [pc, #20]	; (8007914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	0a1b      	lsrs	r3, r3, #8
 8007904:	f003 0307 	and.w	r3, r3, #7
 8007908:	4903      	ldr	r1, [pc, #12]	; (8007918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800790a:	5ccb      	ldrb	r3, [r1, r3]
 800790c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007910:	4618      	mov	r0, r3
 8007912:	bd80      	pop	{r7, pc}
 8007914:	40021000 	.word	0x40021000
 8007918:	08010954 	.word	0x08010954

0800791c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007920:	f7ff ffde 	bl	80078e0 <HAL_RCC_GetHCLKFreq>
 8007924:	4602      	mov	r2, r0
 8007926:	4b05      	ldr	r3, [pc, #20]	; (800793c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	0adb      	lsrs	r3, r3, #11
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	4903      	ldr	r1, [pc, #12]	; (8007940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007932:	5ccb      	ldrb	r3, [r1, r3]
 8007934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007938:	4618      	mov	r0, r3
 800793a:	bd80      	pop	{r7, pc}
 800793c:	40021000 	.word	0x40021000
 8007940:	08010954 	.word	0x08010954

08007944 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <RCC_Delay+0x34>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a0a      	ldr	r2, [pc, #40]	; (800797c <RCC_Delay+0x38>)
 8007952:	fba2 2303 	umull	r2, r3, r2, r3
 8007956:	0a5b      	lsrs	r3, r3, #9
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	fb02 f303 	mul.w	r3, r2, r3
 800795e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007960:	bf00      	nop
  }
  while (Delay --);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	1e5a      	subs	r2, r3, #1
 8007966:	60fa      	str	r2, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1f9      	bne.n	8007960 <RCC_Delay+0x1c>
}
 800796c:	bf00      	nop
 800796e:	bf00      	nop
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	bc80      	pop	{r7}
 8007976:	4770      	bx	lr
 8007978:	20000004 	.word	0x20000004
 800797c:	10624dd3 	.word	0x10624dd3

08007980 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d07d      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800799c:	2300      	movs	r3, #0
 800799e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079a0:	4b4f      	ldr	r3, [pc, #316]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10d      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ac:	4b4c      	ldr	r3, [pc, #304]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079ae:	69db      	ldr	r3, [r3, #28]
 80079b0:	4a4b      	ldr	r2, [pc, #300]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b6:	61d3      	str	r3, [r2, #28]
 80079b8:	4b49      	ldr	r3, [pc, #292]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c0:	60bb      	str	r3, [r7, #8]
 80079c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079c4:	2301      	movs	r3, #1
 80079c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079c8:	4b46      	ldr	r3, [pc, #280]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d118      	bne.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079d4:	4b43      	ldr	r3, [pc, #268]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a42      	ldr	r2, [pc, #264]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079e0:	f7fb ff7c 	bl	80038dc <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079e6:	e008      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079e8:	f7fb ff78 	bl	80038dc <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b64      	cmp	r3, #100	; 0x64
 80079f4:	d901      	bls.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e06d      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079fa:	4b3a      	ldr	r3, [pc, #232]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0f0      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a06:	4b36      	ldr	r3, [pc, #216]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d02e      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d027      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a24:	4b2e      	ldr	r3, [pc, #184]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a2e:	4b2e      	ldr	r3, [pc, #184]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a34:	4b2c      	ldr	r3, [pc, #176]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007a3a:	4a29      	ldr	r2, [pc, #164]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d014      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a4a:	f7fb ff47 	bl	80038dc <HAL_GetTick>
 8007a4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a50:	e00a      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a52:	f7fb ff43 	bl	80038dc <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d901      	bls.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e036      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a68:	4b1d      	ldr	r3, [pc, #116]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d0ee      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a74:	4b1a      	ldr	r3, [pc, #104]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	4917      	ldr	r1, [pc, #92]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007a86:	7dfb      	ldrb	r3, [r7, #23]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d105      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a8c:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	4a13      	ldr	r2, [pc, #76]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d008      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007aa4:	4b0e      	ldr	r3, [pc, #56]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	490b      	ldr	r1, [pc, #44]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0310 	and.w	r3, r3, #16
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d008      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ac2:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	4904      	ldr	r1, [pc, #16]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	40021000 	.word	0x40021000
 8007ae4:	40007000 	.word	0x40007000
 8007ae8:	42420440 	.word	0x42420440

08007aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e076      	b.n	8007bec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d108      	bne.n	8007b18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b0e:	d009      	beq.n	8007b24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	61da      	str	r2, [r3, #28]
 8007b16:	e005      	b.n	8007b24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d106      	bne.n	8007b44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7fb fc2a 	bl	8003398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2202      	movs	r2, #2
 8007b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	431a      	orrs	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b94:	431a      	orrs	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba8:	ea42 0103 	orr.w	r1, r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	0c1a      	lsrs	r2, r3, #16
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f002 0204 	and.w	r2, r2, #4
 8007bca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	69da      	ldr	r2, [r3, #28]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e093      	b.n	8007d30 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d106      	bne.n	8007c22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7fb fc41 	bl	80034a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2202      	movs	r2, #2
 8007c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	6812      	ldr	r2, [r2, #0]
 8007c34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c38:	f023 0307 	bic.w	r3, r3, #7
 8007c3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	3304      	adds	r3, #4
 8007c46:	4619      	mov	r1, r3
 8007c48:	4610      	mov	r0, r2
 8007c4a:	f000 fa59 	bl	8008100 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c76:	f023 0303 	bic.w	r3, r3, #3
 8007c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	689a      	ldr	r2, [r3, #8]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	4313      	orrs	r3, r2
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007c94:	f023 030c 	bic.w	r3, r3, #12
 8007c98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ca0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ca4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	021b      	lsls	r3, r3, #8
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	011a      	lsls	r2, r3, #4
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	031b      	lsls	r3, r3, #12
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007cd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	011b      	lsls	r3, r3, #4
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d110      	bne.n	8007d8a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d102      	bne.n	8007d74 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d6e:	7b7b      	ldrb	r3, [r7, #13]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d001      	beq.n	8007d78 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e089      	b.n	8007e8c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d88:	e031      	b.n	8007dee <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	d110      	bne.n	8007db2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d102      	bne.n	8007d9c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d96:	7b3b      	ldrb	r3, [r7, #12]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d001      	beq.n	8007da0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e075      	b.n	8007e8c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007db0:	e01d      	b.n	8007dee <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d108      	bne.n	8007dca <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d105      	bne.n	8007dca <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dbe:	7b7b      	ldrb	r3, [r7, #13]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d102      	bne.n	8007dca <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007dc4:	7b3b      	ldrb	r3, [r7, #12]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d001      	beq.n	8007dce <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e05e      	b.n	8007e8c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2202      	movs	r2, #2
 8007dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2202      	movs	r2, #2
 8007de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2202      	movs	r2, #2
 8007dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d003      	beq.n	8007dfc <HAL_TIM_Encoder_Start_IT+0xc4>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2b04      	cmp	r3, #4
 8007df8:	d010      	beq.n	8007e1c <HAL_TIM_Encoder_Start_IT+0xe4>
 8007dfa:	e01f      	b.n	8007e3c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2201      	movs	r2, #1
 8007e02:	2100      	movs	r1, #0
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 f9f5 	bl	80081f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f042 0202 	orr.w	r2, r2, #2
 8007e18:	60da      	str	r2, [r3, #12]
      break;
 8007e1a:	e02e      	b.n	8007e7a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2201      	movs	r2, #1
 8007e22:	2104      	movs	r1, #4
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 f9e5 	bl	80081f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68da      	ldr	r2, [r3, #12]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f042 0204 	orr.w	r2, r2, #4
 8007e38:	60da      	str	r2, [r3, #12]
      break;
 8007e3a:	e01e      	b.n	8007e7a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2201      	movs	r2, #1
 8007e42:	2100      	movs	r1, #0
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 f9d5 	bl	80081f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	2104      	movs	r1, #4
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 f9ce 	bl	80081f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0202 	orr.w	r2, r2, #2
 8007e66:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68da      	ldr	r2, [r3, #12]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0204 	orr.w	r2, r2, #4
 8007e76:	60da      	str	r2, [r3, #12]
      break;
 8007e78:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f042 0201 	orr.w	r2, r2, #1
 8007e88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d122      	bne.n	8007ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f003 0302 	and.w	r3, r3, #2
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d11b      	bne.n	8007ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f06f 0202 	mvn.w	r2, #2
 8007ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f8f6 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
 8007edc:	e005      	b.n	8007eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f8e9 	bl	80080b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f8f8 	bl	80080da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d122      	bne.n	8007f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f003 0304 	and.w	r3, r3, #4
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	d11b      	bne.n	8007f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f06f 0204 	mvn.w	r2, #4
 8007f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2202      	movs	r2, #2
 8007f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f8cc 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
 8007f30:	e005      	b.n	8007f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f8bf 	bl	80080b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f8ce 	bl	80080da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b08      	cmp	r3, #8
 8007f50:	d122      	bne.n	8007f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d11b      	bne.n	8007f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f06f 0208 	mvn.w	r2, #8
 8007f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2204      	movs	r2, #4
 8007f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f8a2 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
 8007f84:	e005      	b.n	8007f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f895 	bl	80080b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f8a4 	bl	80080da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	f003 0310 	and.w	r3, r3, #16
 8007fa2:	2b10      	cmp	r3, #16
 8007fa4:	d122      	bne.n	8007fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f003 0310 	and.w	r3, r3, #16
 8007fb0:	2b10      	cmp	r3, #16
 8007fb2:	d11b      	bne.n	8007fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f06f 0210 	mvn.w	r2, #16
 8007fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f878 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
 8007fd8:	e005      	b.n	8007fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f86b 	bl	80080b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f87a 	bl	80080da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d10e      	bne.n	8008018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b01      	cmp	r3, #1
 8008006:	d107      	bne.n	8008018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f06f 0201 	mvn.w	r2, #1
 8008010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f846 	bl	80080a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008022:	2b80      	cmp	r3, #128	; 0x80
 8008024:	d10e      	bne.n	8008044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008030:	2b80      	cmp	r3, #128	; 0x80
 8008032:	d107      	bne.n	8008044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800803c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f971 	bl	8008326 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804e:	2b40      	cmp	r3, #64	; 0x40
 8008050:	d10e      	bne.n	8008070 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805c:	2b40      	cmp	r3, #64	; 0x40
 800805e:	d107      	bne.n	8008070 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f83e 	bl	80080ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b20      	cmp	r3, #32
 800807c:	d10e      	bne.n	800809c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0320 	and.w	r3, r3, #32
 8008088:	2b20      	cmp	r3, #32
 800808a:	d107      	bne.n	800809c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0220 	mvn.w	r2, #32
 8008094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f93c 	bl	8008314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bc80      	pop	{r7}
 80080b4:	4770      	bx	lr

080080b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc80      	pop	{r7}
 80080c6:	4770      	bx	lr

080080c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr

080080da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bc80      	pop	{r7}
 80080ea:	4770      	bx	lr

080080ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr
	...

08008100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a33      	ldr	r2, [pc, #204]	; (80081e0 <TIM_Base_SetConfig+0xe0>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d013      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a32      	ldr	r2, [pc, #200]	; (80081e4 <TIM_Base_SetConfig+0xe4>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00f      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008126:	d00b      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a2f      	ldr	r2, [pc, #188]	; (80081e8 <TIM_Base_SetConfig+0xe8>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d007      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a2e      	ldr	r2, [pc, #184]	; (80081ec <TIM_Base_SetConfig+0xec>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d003      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a2d      	ldr	r2, [pc, #180]	; (80081f0 <TIM_Base_SetConfig+0xf0>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d108      	bne.n	8008152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	4313      	orrs	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a22      	ldr	r2, [pc, #136]	; (80081e0 <TIM_Base_SetConfig+0xe0>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d013      	beq.n	8008182 <TIM_Base_SetConfig+0x82>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a21      	ldr	r2, [pc, #132]	; (80081e4 <TIM_Base_SetConfig+0xe4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00f      	beq.n	8008182 <TIM_Base_SetConfig+0x82>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008168:	d00b      	beq.n	8008182 <TIM_Base_SetConfig+0x82>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a1e      	ldr	r2, [pc, #120]	; (80081e8 <TIM_Base_SetConfig+0xe8>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d007      	beq.n	8008182 <TIM_Base_SetConfig+0x82>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a1d      	ldr	r2, [pc, #116]	; (80081ec <TIM_Base_SetConfig+0xec>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d003      	beq.n	8008182 <TIM_Base_SetConfig+0x82>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a1c      	ldr	r2, [pc, #112]	; (80081f0 <TIM_Base_SetConfig+0xf0>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d108      	bne.n	8008194 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a09      	ldr	r2, [pc, #36]	; (80081e0 <TIM_Base_SetConfig+0xe0>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d003      	beq.n	80081c8 <TIM_Base_SetConfig+0xc8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a08      	ldr	r2, [pc, #32]	; (80081e4 <TIM_Base_SetConfig+0xe4>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d103      	bne.n	80081d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	691a      	ldr	r2, [r3, #16]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	615a      	str	r2, [r3, #20]
}
 80081d6:	bf00      	nop
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	bc80      	pop	{r7}
 80081de:	4770      	bx	lr
 80081e0:	40012c00 	.word	0x40012c00
 80081e4:	40013400 	.word	0x40013400
 80081e8:	40000400 	.word	0x40000400
 80081ec:	40000800 	.word	0x40000800
 80081f0:	40000c00 	.word	0x40000c00

080081f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	f003 031f 	and.w	r3, r3, #31
 8008206:	2201      	movs	r2, #1
 8008208:	fa02 f303 	lsl.w	r3, r2, r3
 800820c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6a1a      	ldr	r2, [r3, #32]
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	43db      	mvns	r3, r3
 8008216:	401a      	ands	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6a1a      	ldr	r2, [r3, #32]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f003 031f 	and.w	r3, r3, #31
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	fa01 f303 	lsl.w	r3, r1, r3
 800822c:	431a      	orrs	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	621a      	str	r2, [r3, #32]
}
 8008232:	bf00      	nop
 8008234:	371c      	adds	r7, #28
 8008236:	46bd      	mov	sp, r7
 8008238:	bc80      	pop	{r7}
 800823a:	4770      	bx	lr

0800823c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800824c:	2b01      	cmp	r3, #1
 800824e:	d101      	bne.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008250:	2302      	movs	r3, #2
 8008252:	e050      	b.n	80082f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a1b      	ldr	r2, [pc, #108]	; (8008300 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d018      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a19      	ldr	r2, [pc, #100]	; (8008304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d013      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082aa:	d00e      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a15      	ldr	r2, [pc, #84]	; (8008308 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d009      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a14      	ldr	r2, [pc, #80]	; (800830c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d004      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a12      	ldr	r2, [pc, #72]	; (8008310 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d10c      	bne.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bc80      	pop	{r7}
 80082fe:	4770      	bx	lr
 8008300:	40012c00 	.word	0x40012c00
 8008304:	40013400 	.word	0x40013400
 8008308:	40000400 	.word	0x40000400
 800830c:	40000800 	.word	0x40000800
 8008310:	40000c00 	.word	0x40000c00

08008314 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	bc80      	pop	{r7}
 8008324:	4770      	bx	lr

08008326 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	bc80      	pop	{r7}
 8008336:	4770      	bx	lr

08008338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e03f      	b.n	80083ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d106      	bne.n	8008364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7fb f940 	bl	80035e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2224      	movs	r2, #36	; 0x24
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68da      	ldr	r2, [r3, #12]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800837a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f829 	bl	80083d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	695a      	ldr	r2, [r3, #20]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2220      	movs	r2, #32
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2220      	movs	r2, #32
 80083c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	689a      	ldr	r2, [r3, #8]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	431a      	orrs	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	4313      	orrs	r3, r2
 8008402:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800840e:	f023 030c 	bic.w	r3, r3, #12
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	6812      	ldr	r2, [r2, #0]
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	430b      	orrs	r3, r1
 800841a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	699a      	ldr	r2, [r3, #24]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	430a      	orrs	r2, r1
 8008430:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a2c      	ldr	r2, [pc, #176]	; (80084e8 <UART_SetConfig+0x114>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d103      	bne.n	8008444 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800843c:	f7ff fa6e 	bl	800791c <HAL_RCC_GetPCLK2Freq>
 8008440:	60f8      	str	r0, [r7, #12]
 8008442:	e002      	b.n	800844a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008444:	f7ff fa56 	bl	80078f4 <HAL_RCC_GetPCLK1Freq>
 8008448:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	4613      	mov	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	009a      	lsls	r2, r3, #2
 8008454:	441a      	add	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008460:	4a22      	ldr	r2, [pc, #136]	; (80084ec <UART_SetConfig+0x118>)
 8008462:	fba2 2303 	umull	r2, r3, r2, r3
 8008466:	095b      	lsrs	r3, r3, #5
 8008468:	0119      	lsls	r1, r3, #4
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	4613      	mov	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	009a      	lsls	r2, r3, #2
 8008474:	441a      	add	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008480:	4b1a      	ldr	r3, [pc, #104]	; (80084ec <UART_SetConfig+0x118>)
 8008482:	fba3 0302 	umull	r0, r3, r3, r2
 8008486:	095b      	lsrs	r3, r3, #5
 8008488:	2064      	movs	r0, #100	; 0x64
 800848a:	fb00 f303 	mul.w	r3, r0, r3
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	3332      	adds	r3, #50	; 0x32
 8008494:	4a15      	ldr	r2, [pc, #84]	; (80084ec <UART_SetConfig+0x118>)
 8008496:	fba2 2303 	umull	r2, r3, r2, r3
 800849a:	095b      	lsrs	r3, r3, #5
 800849c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084a0:	4419      	add	r1, r3
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	4613      	mov	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	009a      	lsls	r2, r3, #2
 80084ac:	441a      	add	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80084b8:	4b0c      	ldr	r3, [pc, #48]	; (80084ec <UART_SetConfig+0x118>)
 80084ba:	fba3 0302 	umull	r0, r3, r3, r2
 80084be:	095b      	lsrs	r3, r3, #5
 80084c0:	2064      	movs	r0, #100	; 0x64
 80084c2:	fb00 f303 	mul.w	r3, r0, r3
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	3332      	adds	r3, #50	; 0x32
 80084cc:	4a07      	ldr	r2, [pc, #28]	; (80084ec <UART_SetConfig+0x118>)
 80084ce:	fba2 2303 	umull	r2, r3, r2, r3
 80084d2:	095b      	lsrs	r3, r3, #5
 80084d4:	f003 020f 	and.w	r2, r3, #15
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	440a      	add	r2, r1
 80084de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80084e0:	bf00      	nop
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	40013800 	.word	0x40013800
 80084ec:	51eb851f 	.word	0x51eb851f

080084f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80084f0:	b084      	sub	sp, #16
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	f107 0014 	add.w	r0, r7, #20
 80084fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	bc80      	pop	{r7}
 800850c:	b004      	add	sp, #16
 800850e:	4770      	bx	lr

08008510 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008520:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008524:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	b29a      	uxth	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	bc80      	pop	{r7}
 800853a:	4770      	bx	lr

0800853c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008544:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008548:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008550:	b29a      	uxth	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	b29b      	uxth	r3, r3
 8008556:	43db      	mvns	r3, r3
 8008558:	b29b      	uxth	r3, r3
 800855a:	4013      	ands	r3, r2
 800855c:	b29a      	uxth	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr

08008570 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	bc80      	pop	{r7}
 8008586:	4770      	bx	lr

08008588 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008588:	b084      	sub	sp, #16
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	f107 0014 	add.w	r0, r7, #20
 8008596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bc80      	pop	{r7}
 80085c4:	b004      	add	sp, #16
 80085c6:	4770      	bx	lr

080085c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b09b      	sub	sp, #108	; 0x6c
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4413      	add	r3, r2
 80085e2:	881b      	ldrh	r3, [r3, #0]
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80085ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	78db      	ldrb	r3, [r3, #3]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d81f      	bhi.n	800863a <USB_ActivateEndpoint+0x72>
 80085fa:	a201      	add	r2, pc, #4	; (adr r2, 8008600 <USB_ActivateEndpoint+0x38>)
 80085fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008600:	08008611 	.word	0x08008611
 8008604:	0800862d 	.word	0x0800862d
 8008608:	08008643 	.word	0x08008643
 800860c:	0800861f 	.word	0x0800861f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008610:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008618:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800861c:	e012      	b.n	8008644 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800861e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008622:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008626:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800862a:	e00b      	b.n	8008644 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800862c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008630:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008634:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008638:	e004      	b.n	8008644 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8008640:	e000      	b.n	8008644 <USB_ActivateEndpoint+0x7c>
      break;
 8008642:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	441a      	add	r2, r3
 800864e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800865a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800865e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008662:	b29b      	uxth	r3, r3
 8008664:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	881b      	ldrh	r3, [r3, #0]
 8008672:	b29b      	uxth	r3, r3
 8008674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800867c:	b29a      	uxth	r2, r3
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	b29b      	uxth	r3, r3
 8008684:	4313      	orrs	r3, r2
 8008686:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	441a      	add	r2, r3
 8008694:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800869c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	7b1b      	ldrb	r3, [r3, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f040 8149 	bne.w	8008948 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	785b      	ldrb	r3, [r3, #1]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 8084 	beq.w	80087c8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	461a      	mov	r2, r3
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	4413      	add	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	011a      	lsls	r2, r3, #4
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	88db      	ldrh	r3, [r3, #6]
 80086e8:	085b      	lsrs	r3, r3, #1
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	81fb      	strh	r3, [r7, #14]
 8008702:	89fb      	ldrh	r3, [r7, #14]
 8008704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008708:	2b00      	cmp	r3, #0
 800870a:	d01b      	beq.n	8008744 <USB_ActivateEndpoint+0x17c>
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	b29b      	uxth	r3, r3
 800871a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008722:	81bb      	strh	r3, [r7, #12]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	441a      	add	r2, r3
 800872e:	89bb      	ldrh	r3, [r7, #12]
 8008730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800873c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008740:	b29b      	uxth	r3, r3
 8008742:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	78db      	ldrb	r3, [r3, #3]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d020      	beq.n	800878e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	b29b      	uxth	r3, r3
 800875a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800875e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008762:	813b      	strh	r3, [r7, #8]
 8008764:	893b      	ldrh	r3, [r7, #8]
 8008766:	f083 0320 	eor.w	r3, r3, #32
 800876a:	813b      	strh	r3, [r7, #8]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	441a      	add	r2, r3
 8008776:	893b      	ldrh	r3, [r7, #8]
 8008778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008788:	b29b      	uxth	r3, r3
 800878a:	8013      	strh	r3, [r2, #0]
 800878c:	e27f      	b.n	8008c8e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	881b      	ldrh	r3, [r3, #0]
 800879a:	b29b      	uxth	r3, r3
 800879c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a4:	817b      	strh	r3, [r7, #10]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	441a      	add	r2, r3
 80087b0:	897b      	ldrh	r3, [r7, #10]
 80087b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	8013      	strh	r3, [r2, #0]
 80087c6:	e262      	b.n	8008c8e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	461a      	mov	r2, r3
 80087d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d8:	4413      	add	r3, r2
 80087da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	011a      	lsls	r2, r3, #4
 80087e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80087ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	88db      	ldrh	r3, [r3, #6]
 80087f0:	085b      	lsrs	r3, r3, #1
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008806:	b29b      	uxth	r3, r3
 8008808:	461a      	mov	r2, r3
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	4413      	add	r3, r2
 800880e:	627b      	str	r3, [r7, #36]	; 0x24
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	011a      	lsls	r2, r3, #4
 8008816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008818:	4413      	add	r3, r2
 800881a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800881e:	623b      	str	r3, [r7, #32]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d112      	bne.n	800884e <USB_ActivateEndpoint+0x286>
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	b29b      	uxth	r3, r3
 800882e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008832:	b29a      	uxth	r2, r3
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	801a      	strh	r2, [r3, #0]
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29b      	uxth	r3, r3
 800883e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008846:	b29a      	uxth	r2, r3
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	801a      	strh	r2, [r3, #0]
 800884c:	e02f      	b.n	80088ae <USB_ActivateEndpoint+0x2e6>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	2b3e      	cmp	r3, #62	; 0x3e
 8008854:	d813      	bhi.n	800887e <USB_ActivateEndpoint+0x2b6>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	085b      	lsrs	r3, r3, #1
 800885c:	663b      	str	r3, [r7, #96]	; 0x60
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	2b00      	cmp	r3, #0
 8008868:	d002      	beq.n	8008870 <USB_ActivateEndpoint+0x2a8>
 800886a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800886c:	3301      	adds	r3, #1
 800886e:	663b      	str	r3, [r7, #96]	; 0x60
 8008870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008872:	b29b      	uxth	r3, r3
 8008874:	029b      	lsls	r3, r3, #10
 8008876:	b29a      	uxth	r2, r3
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	801a      	strh	r2, [r3, #0]
 800887c:	e017      	b.n	80088ae <USB_ActivateEndpoint+0x2e6>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	095b      	lsrs	r3, r3, #5
 8008884:	663b      	str	r3, [r7, #96]	; 0x60
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f003 031f 	and.w	r3, r3, #31
 800888e:	2b00      	cmp	r3, #0
 8008890:	d102      	bne.n	8008898 <USB_ActivateEndpoint+0x2d0>
 8008892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008894:	3b01      	subs	r3, #1
 8008896:	663b      	str	r3, [r7, #96]	; 0x60
 8008898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800889a:	b29b      	uxth	r3, r3
 800889c:	029b      	lsls	r3, r3, #10
 800889e:	b29b      	uxth	r3, r3
 80088a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	6a3b      	ldr	r3, [r7, #32]
 80088ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	881b      	ldrh	r3, [r3, #0]
 80088ba:	83fb      	strh	r3, [r7, #30]
 80088bc:	8bfb      	ldrh	r3, [r7, #30]
 80088be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01b      	beq.n	80088fe <USB_ActivateEndpoint+0x336>
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088dc:	83bb      	strh	r3, [r7, #28]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	441a      	add	r2, r3
 80088e8:	8bbb      	ldrh	r3, [r7, #28]
 80088ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	b29b      	uxth	r3, r3
 800890c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008914:	837b      	strh	r3, [r7, #26]
 8008916:	8b7b      	ldrh	r3, [r7, #26]
 8008918:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800891c:	837b      	strh	r3, [r7, #26]
 800891e:	8b7b      	ldrh	r3, [r7, #26]
 8008920:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008924:	837b      	strh	r3, [r7, #26]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	441a      	add	r2, r3
 8008930:	8b7b      	ldrh	r3, [r7, #26]
 8008932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800893a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800893e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008942:	b29b      	uxth	r3, r3
 8008944:	8013      	strh	r3, [r2, #0]
 8008946:	e1a2      	b.n	8008c8e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	b29b      	uxth	r3, r3
 8008956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800895a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	441a      	add	r2, r3
 800896c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008978:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800897c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008980:	b29b      	uxth	r3, r3
 8008982:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	65bb      	str	r3, [r7, #88]	; 0x58
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800898e:	b29b      	uxth	r3, r3
 8008990:	461a      	mov	r2, r3
 8008992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008994:	4413      	add	r3, r2
 8008996:	65bb      	str	r3, [r7, #88]	; 0x58
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	011a      	lsls	r2, r3, #4
 800899e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089a6:	657b      	str	r3, [r7, #84]	; 0x54
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	891b      	ldrh	r3, [r3, #8]
 80089ac:	085b      	lsrs	r3, r3, #1
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	005b      	lsls	r3, r3, #1
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089b6:	801a      	strh	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	653b      	str	r3, [r7, #80]	; 0x50
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	461a      	mov	r2, r3
 80089c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c8:	4413      	add	r3, r2
 80089ca:	653b      	str	r3, [r7, #80]	; 0x50
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	011a      	lsls	r2, r3, #4
 80089d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80089da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	895b      	ldrh	r3, [r3, #10]
 80089e0:	085b      	lsrs	r3, r3, #1
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	785b      	ldrb	r3, [r3, #1]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f040 8091 	bne.w	8008b18 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008a04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d01b      	beq.n	8008a46 <USB_ActivateEndpoint+0x47e>
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	881b      	ldrh	r3, [r3, #0]
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a24:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	441a      	add	r2, r3
 8008a30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	873b      	strh	r3, [r7, #56]	; 0x38
 8008a54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d01b      	beq.n	8008a96 <USB_ActivateEndpoint+0x4ce>
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a74:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	441a      	add	r2, r3
 8008a80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aac:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008aae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008ab0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ab4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008ab6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008ab8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008abc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	441a      	add	r2, r3
 8008ac8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008af4:	867b      	strh	r3, [r7, #50]	; 0x32
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	441a      	add	r2, r3
 8008b00:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	8013      	strh	r3, [r2, #0]
 8008b16:	e0ba      	b.n	8008c8e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008b28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d01d      	beq.n	8008b70 <USB_ActivateEndpoint+0x5a8>
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b4a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	441a      	add	r2, r3
 8008b58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008b80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01d      	beq.n	8008bc8 <USB_ActivateEndpoint+0x600>
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	441a      	add	r2, r3
 8008bb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	78db      	ldrb	r3, [r3, #3]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d024      	beq.n	8008c1a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008be6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008bea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008bee:	f083 0320 	eor.w	r3, r3, #32
 8008bf2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	441a      	add	r2, r3
 8008c00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	8013      	strh	r3, [r2, #0]
 8008c18:	e01d      	b.n	8008c56 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	441a      	add	r2, r3
 8008c3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	441a      	add	r2, r3
 8008c78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008c8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	376c      	adds	r7, #108	; 0x6c
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bc80      	pop	{r7}
 8008c9a:	4770      	bx	lr

08008c9c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b08d      	sub	sp, #52	; 0x34
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	7b1b      	ldrb	r3, [r3, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f040 808e 	bne.w	8008dcc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	785b      	ldrb	r3, [r3, #1]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d044      	beq.n	8008d42 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	81bb      	strh	r3, [r7, #12]
 8008cc6:	89bb      	ldrh	r3, [r7, #12]
 8008cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01b      	beq.n	8008d08 <USB_DeactivateEndpoint+0x6c>
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce6:	817b      	strh	r3, [r7, #10]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	441a      	add	r2, r3
 8008cf2:	897b      	ldrh	r3, [r7, #10]
 8008cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d1e:	813b      	strh	r3, [r7, #8]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	441a      	add	r2, r3
 8008d2a:	893b      	ldrh	r3, [r7, #8]
 8008d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	8013      	strh	r3, [r2, #0]
 8008d40:	e192      	b.n	8009068 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	827b      	strh	r3, [r7, #18]
 8008d50:	8a7b      	ldrh	r3, [r7, #18]
 8008d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01b      	beq.n	8008d92 <USB_DeactivateEndpoint+0xf6>
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d70:	823b      	strh	r3, [r7, #16]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	441a      	add	r2, r3
 8008d7c:	8a3b      	ldrh	r3, [r7, #16]
 8008d7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da8:	81fb      	strh	r3, [r7, #14]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	441a      	add	r2, r3
 8008db4:	89fb      	ldrh	r3, [r7, #14]
 8008db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	8013      	strh	r3, [r2, #0]
 8008dca:	e14d      	b.n	8009068 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	785b      	ldrb	r3, [r3, #1]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f040 80a5 	bne.w	8008f20 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	843b      	strh	r3, [r7, #32]
 8008de4:	8c3b      	ldrh	r3, [r7, #32]
 8008de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d01b      	beq.n	8008e26 <USB_DeactivateEndpoint+0x18a>
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e04:	83fb      	strh	r3, [r7, #30]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	441a      	add	r2, r3
 8008e10:	8bfb      	ldrh	r3, [r7, #30]
 8008e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	83bb      	strh	r3, [r7, #28]
 8008e34:	8bbb      	ldrh	r3, [r7, #28]
 8008e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d01b      	beq.n	8008e76 <USB_DeactivateEndpoint+0x1da>
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e54:	837b      	strh	r3, [r7, #26]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	441a      	add	r2, r3
 8008e60:	8b7b      	ldrh	r3, [r7, #26]
 8008e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e8c:	833b      	strh	r3, [r7, #24]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	441a      	add	r2, r3
 8008e98:	8b3b      	ldrh	r3, [r7, #24]
 8008e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ea6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec4:	82fb      	strh	r3, [r7, #22]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	441a      	add	r2, r3
 8008ed0:	8afb      	ldrh	r3, [r7, #22]
 8008ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008efc:	82bb      	strh	r3, [r7, #20]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	441a      	add	r2, r3
 8008f08:	8abb      	ldrh	r3, [r7, #20]
 8008f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	8013      	strh	r3, [r2, #0]
 8008f1e:	e0a3      	b.n	8009068 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	881b      	ldrh	r3, [r3, #0]
 8008f2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008f2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d01b      	beq.n	8008f70 <USB_DeactivateEndpoint+0x2d4>
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	441a      	add	r2, r3
 8008f5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008f7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d01b      	beq.n	8008fc0 <USB_DeactivateEndpoint+0x324>
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	441a      	add	r2, r3
 8008faa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	441a      	add	r2, r3
 8008fe2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	b29b      	uxth	r3, r3
 8009006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800900a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800900e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	441a      	add	r2, r3
 800901a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800901c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800902c:	b29b      	uxth	r3, r3
 800902e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	881b      	ldrh	r3, [r3, #0]
 800903c:	b29b      	uxth	r3, r3
 800903e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009046:	847b      	strh	r3, [r7, #34]	; 0x22
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	441a      	add	r2, r3
 8009052:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800905c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009064:	b29b      	uxth	r3, r3
 8009066:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3734      	adds	r7, #52	; 0x34
 800906e:	46bd      	mov	sp, r7
 8009070:	bc80      	pop	{r7}
 8009072:	4770      	bx	lr

08009074 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b0cc      	sub	sp, #304	; 0x130
 8009078:	af00      	add	r7, sp, #0
 800907a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800907e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009082:	6018      	str	r0, [r3, #0]
 8009084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009088:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800908c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800908e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	785b      	ldrb	r3, [r3, #1]
 800909a:	2b01      	cmp	r3, #1
 800909c:	f041 817d 	bne.w	800a39a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80090a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	699a      	ldr	r2, [r3, #24]
 80090ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d908      	bls.n	80090ce <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80090bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80090cc:	e007      	b.n	80090de <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80090ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80090de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	7b1b      	ldrb	r3, [r3, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d152      	bne.n	8009194 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80090ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6959      	ldr	r1, [r3, #20]
 80090fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	88da      	ldrh	r2, [r3, #6]
 8009106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800910a:	b29b      	uxth	r3, r3
 800910c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009110:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009114:	6800      	ldr	r0, [r0, #0]
 8009116:	f001 ff23 	bl	800af60 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800911a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800911e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009122:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009126:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800912a:	6812      	ldr	r2, [r2, #0]
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009132:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800913c:	b29b      	uxth	r3, r3
 800913e:	4619      	mov	r1, r3
 8009140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009144:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009148:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800914c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8009150:	6812      	ldr	r2, [r2, #0]
 8009152:	440a      	add	r2, r1
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800915a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	011a      	lsls	r2, r3, #4
 8009164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009168:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4413      	add	r3, r2
 8009170:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009178:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009182:	b29a      	uxth	r2, r3
 8009184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009188:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	801a      	strh	r2, [r3, #0]
 8009190:	f001 b8b5 	b.w	800a2fe <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009198:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	78db      	ldrb	r3, [r3, #3]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	f040 84c6 	bne.w	8009b32 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80091a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6a1a      	ldr	r2, [r3, #32]
 80091b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	429a      	cmp	r2, r3
 80091c0:	f240 8443 	bls.w	8009a4a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80091c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80091ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	441a      	add	r2, r3
 8009208:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800920c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009214:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800921c:	b29b      	uxth	r3, r3
 800921e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6a1a      	ldr	r2, [r3, #32]
 800922c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009230:	1ad2      	subs	r2, r2, r3
 8009232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800923e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009242:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800924c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	b29b      	uxth	r3, r3
 800925c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 823e 	beq.w	80096e2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800926a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800926e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009272:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009276:	6812      	ldr	r2, [r2, #0]
 8009278:	601a      	str	r2, [r3, #0]
 800927a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800927e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	785b      	ldrb	r3, [r3, #1]
 8009286:	2b00      	cmp	r3, #0
 8009288:	f040 809a 	bne.w	80093c0 <USB_EPStartXfer+0x34c>
 800928c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009294:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009298:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800929c:	6812      	ldr	r2, [r2, #0]
 800929e:	601a      	str	r2, [r3, #0]
 80092a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	4619      	mov	r1, r3
 80092b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092be:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80092c2:	6812      	ldr	r2, [r2, #0]
 80092c4:	440a      	add	r2, r1
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	011a      	lsls	r2, r3, #4
 80092d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4413      	add	r3, r2
 80092e2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80092e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80092ee:	601a      	str	r2, [r3, #0]
 80092f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d122      	bne.n	800933e <USB_EPStartXfer+0x2ca>
 80092f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	881b      	ldrh	r3, [r3, #0]
 8009304:	b29b      	uxth	r3, r3
 8009306:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800930a:	b29a      	uxth	r2, r3
 800930c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009310:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	801a      	strh	r2, [r3, #0]
 8009318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	881b      	ldrh	r3, [r3, #0]
 8009324:	b29b      	uxth	r3, r3
 8009326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800932a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800932e:	b29a      	uxth	r2, r3
 8009330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009334:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	801a      	strh	r2, [r3, #0]
 800933c:	e079      	b.n	8009432 <USB_EPStartXfer+0x3be>
 800933e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009342:	2b3e      	cmp	r3, #62	; 0x3e
 8009344:	d81b      	bhi.n	800937e <USB_EPStartXfer+0x30a>
 8009346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800934a:	085b      	lsrs	r3, r3, #1
 800934c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	2b00      	cmp	r3, #0
 800935a:	d004      	beq.n	8009366 <USB_EPStartXfer+0x2f2>
 800935c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009360:	3301      	adds	r3, #1
 8009362:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009366:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800936a:	b29b      	uxth	r3, r3
 800936c:	029b      	lsls	r3, r3, #10
 800936e:	b29a      	uxth	r2, r3
 8009370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009374:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	801a      	strh	r2, [r3, #0]
 800937c:	e059      	b.n	8009432 <USB_EPStartXfer+0x3be>
 800937e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009382:	095b      	lsrs	r3, r3, #5
 8009384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938c:	f003 031f 	and.w	r3, r3, #31
 8009390:	2b00      	cmp	r3, #0
 8009392:	d104      	bne.n	800939e <USB_EPStartXfer+0x32a>
 8009394:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009398:	3b01      	subs	r3, #1
 800939a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800939e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	029b      	lsls	r3, r3, #10
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	801a      	strh	r2, [r3, #0]
 80093be:	e038      	b.n	8009432 <USB_EPStartXfer+0x3be>
 80093c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	785b      	ldrb	r3, [r3, #1]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d130      	bne.n	8009432 <USB_EPStartXfer+0x3be>
 80093d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093de:	b29b      	uxth	r3, r3
 80093e0:	4619      	mov	r1, r3
 80093e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093e6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80093ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093ee:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80093f2:	6812      	ldr	r2, [r2, #0]
 80093f4:	440a      	add	r2, r1
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	011a      	lsls	r2, r3, #4
 8009406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800940a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4413      	add	r3, r2
 8009412:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800941a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800941e:	601a      	str	r2, [r3, #0]
 8009420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009424:	b29a      	uxth	r2, r3
 8009426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800942a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	895b      	ldrh	r3, [r3, #10]
 800943e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6959      	ldr	r1, [r3, #20]
 800944e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009452:	b29b      	uxth	r3, r3
 8009454:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009458:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800945c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009460:	6800      	ldr	r0, [r0, #0]
 8009462:	f001 fd7d 	bl	800af60 <USB_WritePMA>
            ep->xfer_buff += len;
 8009466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800946a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	695a      	ldr	r2, [r3, #20]
 8009472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009476:	441a      	add	r2, r3
 8009478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800947c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6a1a      	ldr	r2, [r3, #32]
 8009490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	429a      	cmp	r2, r3
 800949e:	d90f      	bls.n	80094c0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80094a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6a1a      	ldr	r2, [r3, #32]
 80094ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094b0:	1ad2      	subs	r2, r2, r3
 80094b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	621a      	str	r2, [r3, #32]
 80094be:	e00e      	b.n	80094de <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80094c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6a1b      	ldr	r3, [r3, #32]
 80094cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80094d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2200      	movs	r2, #0
 80094dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	785b      	ldrb	r3, [r3, #1]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f040 809a 	bne.w	8009624 <USB_EPStartXfer+0x5b0>
 80094f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80094f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80094fc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009500:	6812      	ldr	r2, [r2, #0]
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009512:	b29b      	uxth	r3, r3
 8009514:	4619      	mov	r1, r3
 8009516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800951a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800951e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009522:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8009526:	6812      	ldr	r2, [r2, #0]
 8009528:	440a      	add	r2, r1
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	011a      	lsls	r2, r3, #4
 800953a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800953e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4413      	add	r3, r2
 8009546:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800954a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800954e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009558:	2b00      	cmp	r3, #0
 800955a:	d122      	bne.n	80095a2 <USB_EPStartXfer+0x52e>
 800955c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009560:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	881b      	ldrh	r3, [r3, #0]
 8009568:	b29b      	uxth	r3, r3
 800956a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800956e:	b29a      	uxth	r2, r3
 8009570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009574:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	801a      	strh	r2, [r3, #0]
 800957c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009580:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	b29b      	uxth	r3, r3
 800958a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800958e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009592:	b29a      	uxth	r2, r3
 8009594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009598:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	801a      	strh	r2, [r3, #0]
 80095a0:	e083      	b.n	80096aa <USB_EPStartXfer+0x636>
 80095a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a6:	2b3e      	cmp	r3, #62	; 0x3e
 80095a8:	d81b      	bhi.n	80095e2 <USB_EPStartXfer+0x56e>
 80095aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ae:	085b      	lsrs	r3, r3, #1
 80095b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80095b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095b8:	f003 0301 	and.w	r3, r3, #1
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d004      	beq.n	80095ca <USB_EPStartXfer+0x556>
 80095c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80095c4:	3301      	adds	r3, #1
 80095c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80095ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	029b      	lsls	r3, r3, #10
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	801a      	strh	r2, [r3, #0]
 80095e0:	e063      	b.n	80096aa <USB_EPStartXfer+0x636>
 80095e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095e6:	095b      	lsrs	r3, r3, #5
 80095e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80095ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095f0:	f003 031f 	and.w	r3, r3, #31
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d104      	bne.n	8009602 <USB_EPStartXfer+0x58e>
 80095f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80095fc:	3b01      	subs	r3, #1
 80095fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009602:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009606:	b29b      	uxth	r3, r3
 8009608:	029b      	lsls	r3, r3, #10
 800960a:	b29b      	uxth	r3, r3
 800960c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009614:	b29a      	uxth	r2, r3
 8009616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	801a      	strh	r2, [r3, #0]
 8009622:	e042      	b.n	80096aa <USB_EPStartXfer+0x636>
 8009624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	785b      	ldrb	r3, [r3, #1]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d13a      	bne.n	80096aa <USB_EPStartXfer+0x636>
 8009634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009638:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800963c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009640:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009644:	6812      	ldr	r2, [r2, #0]
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800964c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009656:	b29b      	uxth	r3, r3
 8009658:	4619      	mov	r1, r3
 800965a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800965e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009662:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009666:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800966a:	6812      	ldr	r2, [r2, #0]
 800966c:	440a      	add	r2, r1
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	011a      	lsls	r2, r3, #4
 800967e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009682:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4413      	add	r3, r2
 800968a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800968e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009692:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800969c:	b29a      	uxth	r2, r3
 800969e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80096aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	891b      	ldrh	r3, [r3, #8]
 80096b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6959      	ldr	r1, [r3, #20]
 80096c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80096d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80096d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80096d8:	6800      	ldr	r0, [r0, #0]
 80096da:	f001 fc41 	bl	800af60 <USB_WritePMA>
 80096de:	f000 be0e 	b.w	800a2fe <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80096e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	785b      	ldrb	r3, [r3, #1]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d16d      	bne.n	80097ce <USB_EPStartXfer+0x75a>
 80096f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80096fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009702:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800970c:	b29b      	uxth	r3, r3
 800970e:	461a      	mov	r2, r3
 8009710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009712:	4413      	add	r3, r2
 8009714:	64bb      	str	r3, [r7, #72]	; 0x48
 8009716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800971a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	011a      	lsls	r2, r3, #4
 8009724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009726:	4413      	add	r3, r2
 8009728:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800972c:	647b      	str	r3, [r7, #68]	; 0x44
 800972e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009732:	2b00      	cmp	r3, #0
 8009734:	d112      	bne.n	800975c <USB_EPStartXfer+0x6e8>
 8009736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	b29b      	uxth	r3, r3
 800973c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009740:	b29a      	uxth	r2, r3
 8009742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009744:	801a      	strh	r2, [r3, #0]
 8009746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009748:	881b      	ldrh	r3, [r3, #0]
 800974a:	b29b      	uxth	r3, r3
 800974c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009754:	b29a      	uxth	r2, r3
 8009756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009758:	801a      	strh	r2, [r3, #0]
 800975a:	e063      	b.n	8009824 <USB_EPStartXfer+0x7b0>
 800975c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009760:	2b3e      	cmp	r3, #62	; 0x3e
 8009762:	d817      	bhi.n	8009794 <USB_EPStartXfer+0x720>
 8009764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009768:	085b      	lsrs	r3, r3, #1
 800976a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800976e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d004      	beq.n	8009784 <USB_EPStartXfer+0x710>
 800977a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800977e:	3301      	adds	r3, #1
 8009780:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009784:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009788:	b29b      	uxth	r3, r3
 800978a:	029b      	lsls	r3, r3, #10
 800978c:	b29a      	uxth	r2, r3
 800978e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009790:	801a      	strh	r2, [r3, #0]
 8009792:	e047      	b.n	8009824 <USB_EPStartXfer+0x7b0>
 8009794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009798:	095b      	lsrs	r3, r3, #5
 800979a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800979e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097a2:	f003 031f 	and.w	r3, r3, #31
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d104      	bne.n	80097b4 <USB_EPStartXfer+0x740>
 80097aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80097ae:	3b01      	subs	r3, #1
 80097b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80097b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	029b      	lsls	r3, r3, #10
 80097bc:	b29b      	uxth	r3, r3
 80097be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097ca:	801a      	strh	r2, [r3, #0]
 80097cc:	e02a      	b.n	8009824 <USB_EPStartXfer+0x7b0>
 80097ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	785b      	ldrb	r3, [r3, #1]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d122      	bne.n	8009824 <USB_EPStartXfer+0x7b0>
 80097de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	653b      	str	r3, [r7, #80]	; 0x50
 80097ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	461a      	mov	r2, r3
 80097fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097fe:	4413      	add	r3, r2
 8009800:	653b      	str	r3, [r7, #80]	; 0x50
 8009802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	011a      	lsls	r2, r3, #4
 8009810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009812:	4413      	add	r3, r2
 8009814:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009818:	64fb      	str	r3, [r7, #76]	; 0x4c
 800981a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800981e:	b29a      	uxth	r2, r3
 8009820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009822:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	891b      	ldrh	r3, [r3, #8]
 8009830:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009838:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6959      	ldr	r1, [r3, #20]
 8009840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009844:	b29b      	uxth	r3, r3
 8009846:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800984a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800984e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009852:	6800      	ldr	r0, [r0, #0]
 8009854:	f001 fb84 	bl	800af60 <USB_WritePMA>
            ep->xfer_buff += len;
 8009858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800985c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	695a      	ldr	r2, [r3, #20]
 8009864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009868:	441a      	add	r2, r3
 800986a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800986e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800987a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6a1a      	ldr	r2, [r3, #32]
 8009882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	429a      	cmp	r2, r3
 8009890:	d90f      	bls.n	80098b2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8009892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6a1a      	ldr	r2, [r3, #32]
 800989e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098a2:	1ad2      	subs	r2, r2, r3
 80098a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	621a      	str	r2, [r3, #32]
 80098b0:	e00e      	b.n	80098d0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80098b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80098c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2200      	movs	r2, #0
 80098ce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80098d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	643b      	str	r3, [r7, #64]	; 0x40
 80098dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	785b      	ldrb	r3, [r3, #1]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d16d      	bne.n	80099c8 <USB_EPStartXfer+0x954>
 80098ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80098f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009906:	b29b      	uxth	r3, r3
 8009908:	461a      	mov	r2, r3
 800990a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990c:	4413      	add	r3, r2
 800990e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	011a      	lsls	r2, r3, #4
 800991e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009920:	4413      	add	r3, r2
 8009922:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009926:	637b      	str	r3, [r7, #52]	; 0x34
 8009928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800992c:	2b00      	cmp	r3, #0
 800992e:	d112      	bne.n	8009956 <USB_EPStartXfer+0x8e2>
 8009930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	b29b      	uxth	r3, r3
 8009936:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800993a:	b29a      	uxth	r2, r3
 800993c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993e:	801a      	strh	r2, [r3, #0]
 8009940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	b29b      	uxth	r3, r3
 8009946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800994a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800994e:	b29a      	uxth	r2, r3
 8009950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009952:	801a      	strh	r2, [r3, #0]
 8009954:	e05d      	b.n	8009a12 <USB_EPStartXfer+0x99e>
 8009956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800995a:	2b3e      	cmp	r3, #62	; 0x3e
 800995c:	d817      	bhi.n	800998e <USB_EPStartXfer+0x91a>
 800995e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009962:	085b      	lsrs	r3, r3, #1
 8009964:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	d004      	beq.n	800997e <USB_EPStartXfer+0x90a>
 8009974:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009978:	3301      	adds	r3, #1
 800997a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800997e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009982:	b29b      	uxth	r3, r3
 8009984:	029b      	lsls	r3, r3, #10
 8009986:	b29a      	uxth	r2, r3
 8009988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998a:	801a      	strh	r2, [r3, #0]
 800998c:	e041      	b.n	8009a12 <USB_EPStartXfer+0x99e>
 800998e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009992:	095b      	lsrs	r3, r3, #5
 8009994:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800999c:	f003 031f 	and.w	r3, r3, #31
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d104      	bne.n	80099ae <USB_EPStartXfer+0x93a>
 80099a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80099a8:	3b01      	subs	r3, #1
 80099aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80099ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	029b      	lsls	r3, r3, #10
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c4:	801a      	strh	r2, [r3, #0]
 80099c6:	e024      	b.n	8009a12 <USB_EPStartXfer+0x99e>
 80099c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	785b      	ldrb	r3, [r3, #1]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d11c      	bne.n	8009a12 <USB_EPStartXfer+0x99e>
 80099d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	461a      	mov	r2, r3
 80099ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099ec:	4413      	add	r3, r2
 80099ee:	643b      	str	r3, [r7, #64]	; 0x40
 80099f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	011a      	lsls	r2, r3, #4
 80099fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a00:	4413      	add	r3, r2
 8009a02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	895b      	ldrh	r3, [r3, #10]
 8009a1e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6959      	ldr	r1, [r3, #20]
 8009a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009a38:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009a3c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009a40:	6800      	ldr	r0, [r0, #0]
 8009a42:	f001 fa8d 	bl	800af60 <USB_WritePMA>
 8009a46:	f000 bc5a 	b.w	800a2fe <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a80:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	441a      	add	r2, r3
 8009a9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ac6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ad6:	4413      	add	r3, r2
 8009ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	011a      	lsls	r2, r3, #4
 8009ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009aea:	4413      	add	r3, r2
 8009aec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009af0:	65bb      	str	r3, [r7, #88]	; 0x58
 8009af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009afa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	891b      	ldrh	r3, [r3, #8]
 8009b08:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6959      	ldr	r1, [r3, #20]
 8009b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009b22:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009b26:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009b2a:	6800      	ldr	r0, [r0, #0]
 8009b2c:	f001 fa18 	bl	800af60 <USB_WritePMA>
 8009b30:	e3e5      	b.n	800a2fe <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b58:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	441a      	add	r2, r3
 8009b76:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b82:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6a1a      	ldr	r2, [r3, #32]
 8009b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b9e:	1ad2      	subs	r2, r2, r3
 8009ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ba4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 81bc 	beq.w	8009f4c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009be6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	785b      	ldrb	r3, [r3, #1]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d16d      	bne.n	8009cce <USB_EPStartXfer+0xc5a>
 8009bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8009bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	461a      	mov	r2, r3
 8009c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c12:	4413      	add	r3, r2
 8009c14:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	011a      	lsls	r2, r3, #4
 8009c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c26:	4413      	add	r3, r2
 8009c28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c2c:	677b      	str	r3, [r7, #116]	; 0x74
 8009c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d112      	bne.n	8009c5c <USB_EPStartXfer+0xbe8>
 8009c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c38:	881b      	ldrh	r3, [r3, #0]
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c44:	801a      	strh	r2, [r3, #0]
 8009c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c48:	881b      	ldrh	r3, [r3, #0]
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c58:	801a      	strh	r2, [r3, #0]
 8009c5a:	e060      	b.n	8009d1e <USB_EPStartXfer+0xcaa>
 8009c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c60:	2b3e      	cmp	r3, #62	; 0x3e
 8009c62:	d817      	bhi.n	8009c94 <USB_EPStartXfer+0xc20>
 8009c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c68:	085b      	lsrs	r3, r3, #1
 8009c6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d004      	beq.n	8009c84 <USB_EPStartXfer+0xc10>
 8009c7a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009c7e:	3301      	adds	r3, #1
 8009c80:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009c84:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	029b      	lsls	r3, r3, #10
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c90:	801a      	strh	r2, [r3, #0]
 8009c92:	e044      	b.n	8009d1e <USB_EPStartXfer+0xcaa>
 8009c94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c98:	095b      	lsrs	r3, r3, #5
 8009c9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ca2:	f003 031f 	and.w	r3, r3, #31
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d104      	bne.n	8009cb4 <USB_EPStartXfer+0xc40>
 8009caa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009cb4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	029b      	lsls	r3, r3, #10
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cca:	801a      	strh	r2, [r3, #0]
 8009ccc:	e027      	b.n	8009d1e <USB_EPStartXfer+0xcaa>
 8009cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	785b      	ldrb	r3, [r3, #1]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d11f      	bne.n	8009d1e <USB_EPStartXfer+0xcaa>
 8009cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ce2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	011a      	lsls	r2, r3, #4
 8009d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	895b      	ldrh	r3, [r3, #10]
 8009d2a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6959      	ldr	r1, [r3, #20]
 8009d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009d44:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009d48:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009d4c:	6800      	ldr	r0, [r0, #0]
 8009d4e:	f001 f907 	bl	800af60 <USB_WritePMA>
          ep->xfer_buff += len;
 8009d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	695a      	ldr	r2, [r3, #20]
 8009d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d62:	441a      	add	r2, r3
 8009d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	6a1a      	ldr	r2, [r3, #32]
 8009d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d90f      	bls.n	8009dac <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8009d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6a1a      	ldr	r2, [r3, #32]
 8009d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d9c:	1ad2      	subs	r2, r2, r3
 8009d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	621a      	str	r2, [r3, #32]
 8009daa:	e00e      	b.n	8009dca <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8009dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009db0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6a1b      	ldr	r3, [r3, #32]
 8009db8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 8295 	beq.w	800a2fe <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	785b      	ldrb	r3, [r3, #1]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d16d      	bne.n	8009ec0 <USB_EPStartXfer+0xe4c>
 8009de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009de8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	66bb      	str	r3, [r7, #104]	; 0x68
 8009df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	461a      	mov	r2, r3
 8009e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e04:	4413      	add	r3, r2
 8009e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	011a      	lsls	r2, r3, #4
 8009e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e18:	4413      	add	r3, r2
 8009e1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e1e:	667b      	str	r3, [r7, #100]	; 0x64
 8009e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d112      	bne.n	8009e4e <USB_EPStartXfer+0xdda>
 8009e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e36:	801a      	strh	r2, [r3, #0]
 8009e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e3a:	881b      	ldrh	r3, [r3, #0]
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e4a:	801a      	strh	r2, [r3, #0]
 8009e4c:	e063      	b.n	8009f16 <USB_EPStartXfer+0xea2>
 8009e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e52:	2b3e      	cmp	r3, #62	; 0x3e
 8009e54:	d817      	bhi.n	8009e86 <USB_EPStartXfer+0xe12>
 8009e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e5a:	085b      	lsrs	r3, r3, #1
 8009e5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e64:	f003 0301 	and.w	r3, r3, #1
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d004      	beq.n	8009e76 <USB_EPStartXfer+0xe02>
 8009e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e70:	3301      	adds	r3, #1
 8009e72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	029b      	lsls	r3, r3, #10
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e82:	801a      	strh	r2, [r3, #0]
 8009e84:	e047      	b.n	8009f16 <USB_EPStartXfer+0xea2>
 8009e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e8a:	095b      	lsrs	r3, r3, #5
 8009e8c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e94:	f003 031f 	and.w	r3, r3, #31
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d104      	bne.n	8009ea6 <USB_EPStartXfer+0xe32>
 8009e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	029b      	lsls	r3, r3, #10
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ebc:	801a      	strh	r2, [r3, #0]
 8009ebe:	e02a      	b.n	8009f16 <USB_EPStartXfer+0xea2>
 8009ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	785b      	ldrb	r3, [r3, #1]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d122      	bne.n	8009f16 <USB_EPStartXfer+0xea2>
 8009ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ed4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	673b      	str	r3, [r7, #112]	; 0x70
 8009edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ee0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	461a      	mov	r2, r3
 8009eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ef0:	4413      	add	r3, r2
 8009ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8009ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	011a      	lsls	r2, r3, #4
 8009f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f04:	4413      	add	r3, r2
 8009f06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	891b      	ldrh	r3, [r3, #8]
 8009f22:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6959      	ldr	r1, [r3, #20]
 8009f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009f3c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009f40:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009f44:	6800      	ldr	r0, [r0, #0]
 8009f46:	f001 f80b 	bl	800af60 <USB_WritePMA>
 8009f4a:	e1d8      	b.n	800a2fe <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	785b      	ldrb	r3, [r3, #1]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d178      	bne.n	800a04e <USB_EPStartXfer+0xfda>
 8009f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f80:	4413      	add	r3, r2
 8009f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	011a      	lsls	r2, r3, #4
 8009f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f98:	4413      	add	r3, r2
 8009f9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d116      	bne.n	8009fd8 <USB_EPStartXfer+0xf64>
 8009faa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fae:	881b      	ldrh	r3, [r3, #0]
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fbc:	801a      	strh	r2, [r3, #0]
 8009fbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fc2:	881b      	ldrh	r3, [r3, #0]
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fd4:	801a      	strh	r2, [r3, #0]
 8009fd6:	e06b      	b.n	800a0b0 <USB_EPStartXfer+0x103c>
 8009fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fdc:	2b3e      	cmp	r3, #62	; 0x3e
 8009fde:	d818      	bhi.n	800a012 <USB_EPStartXfer+0xf9e>
 8009fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fe4:	085b      	lsrs	r3, r3, #1
 8009fe6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d004      	beq.n	800a000 <USB_EPStartXfer+0xf8c>
 8009ff6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a000:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a004:	b29b      	uxth	r3, r3
 800a006:	029b      	lsls	r3, r3, #10
 800a008:	b29a      	uxth	r2, r3
 800a00a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a00e:	801a      	strh	r2, [r3, #0]
 800a010:	e04e      	b.n	800a0b0 <USB_EPStartXfer+0x103c>
 800a012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a016:	095b      	lsrs	r3, r3, #5
 800a018:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a01c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a020:	f003 031f 	and.w	r3, r3, #31
 800a024:	2b00      	cmp	r3, #0
 800a026:	d104      	bne.n	800a032 <USB_EPStartXfer+0xfbe>
 800a028:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a02c:	3b01      	subs	r3, #1
 800a02e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a032:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a036:	b29b      	uxth	r3, r3
 800a038:	029b      	lsls	r3, r3, #10
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a044:	b29a      	uxth	r2, r3
 800a046:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a04a:	801a      	strh	r2, [r3, #0]
 800a04c:	e030      	b.n	800a0b0 <USB_EPStartXfer+0x103c>
 800a04e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	785b      	ldrb	r3, [r3, #1]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d128      	bne.n	800a0b0 <USB_EPStartXfer+0x103c>
 800a05e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a062:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a06c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a070:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	461a      	mov	r2, r3
 800a07e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a082:	4413      	add	r3, r2
 800a084:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a08c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	011a      	lsls	r2, r3, #4
 800a096:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a09a:	4413      	add	r3, r2
 800a09c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a0a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a0a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a0ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a0b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	891b      	ldrh	r3, [r3, #8]
 800a0bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6959      	ldr	r1, [r3, #20]
 800a0cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a0d6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a0da:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a0de:	6800      	ldr	r0, [r0, #0]
 800a0e0:	f000 ff3e 	bl	800af60 <USB_WritePMA>
          ep->xfer_buff += len;
 800a0e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	695a      	ldr	r2, [r3, #20]
 800a0f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0f4:	441a      	add	r2, r3
 800a0f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800a102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6a1a      	ldr	r2, [r3, #32]
 800a10e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d90f      	bls.n	800a13e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800a11e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6a1a      	ldr	r2, [r3, #32]
 800a12a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a12e:	1ad2      	subs	r2, r2, r3
 800a130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	621a      	str	r2, [r3, #32]
 800a13c:	e00e      	b.n	800a15c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800a13e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800a14e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2200      	movs	r2, #0
 800a15a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800a15c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 80cc 	beq.w	800a2fe <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a16a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	785b      	ldrb	r3, [r3, #1]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d178      	bne.n	800a276 <USB_EPStartXfer+0x1202>
 800a184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a188:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a196:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	011a      	lsls	r2, r3, #4
 800a1bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a1c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d116      	bne.n	800a200 <USB_EPStartXfer+0x118c>
 800a1d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1d6:	881b      	ldrh	r3, [r3, #0]
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1e4:	801a      	strh	r2, [r3, #0]
 800a1e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1fc:	801a      	strh	r2, [r3, #0]
 800a1fe:	e064      	b.n	800a2ca <USB_EPStartXfer+0x1256>
 800a200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a204:	2b3e      	cmp	r3, #62	; 0x3e
 800a206:	d818      	bhi.n	800a23a <USB_EPStartXfer+0x11c6>
 800a208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a20c:	085b      	lsrs	r3, r3, #1
 800a20e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d004      	beq.n	800a228 <USB_EPStartXfer+0x11b4>
 800a21e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a222:	3301      	adds	r3, #1
 800a224:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	029b      	lsls	r3, r3, #10
 800a230:	b29a      	uxth	r2, r3
 800a232:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a236:	801a      	strh	r2, [r3, #0]
 800a238:	e047      	b.n	800a2ca <USB_EPStartXfer+0x1256>
 800a23a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a23e:	095b      	lsrs	r3, r3, #5
 800a240:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a248:	f003 031f 	and.w	r3, r3, #31
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d104      	bne.n	800a25a <USB_EPStartXfer+0x11e6>
 800a250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a254:	3b01      	subs	r3, #1
 800a256:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a25a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a25e:	b29b      	uxth	r3, r3
 800a260:	029b      	lsls	r3, r3, #10
 800a262:	b29b      	uxth	r3, r3
 800a264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a272:	801a      	strh	r2, [r3, #0]
 800a274:	e029      	b.n	800a2ca <USB_EPStartXfer+0x1256>
 800a276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a27a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	785b      	ldrb	r3, [r3, #1]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d121      	bne.n	800a2ca <USB_EPStartXfer+0x1256>
 800a286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a28a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a294:	b29b      	uxth	r3, r3
 800a296:	461a      	mov	r2, r3
 800a298:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a29c:	4413      	add	r3, r2
 800a29e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a2a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	011a      	lsls	r2, r3, #4
 800a2b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a2b4:	4413      	add	r3, r2
 800a2b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a2ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a2be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a2ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	895b      	ldrh	r3, [r3, #10]
 800a2d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6959      	ldr	r1, [r3, #20]
 800a2e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a2f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a2f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a2f8:	6800      	ldr	r0, [r0, #0]
 800a2fa:	f000 fe31 	bl	800af60 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a2fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a302:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a30c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	881b      	ldrh	r3, [r3, #0]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a320:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a32c:	8013      	strh	r3, [r2, #0]
 800a32e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a332:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a336:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a33a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a33e:	8812      	ldrh	r2, [r2, #0]
 800a340:	f082 0210 	eor.w	r2, r2, #16
 800a344:	801a      	strh	r2, [r3, #0]
 800a346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a34a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a34e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a352:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a356:	8812      	ldrh	r2, [r2, #0]
 800a358:	f082 0220 	eor.w	r2, r2, #32
 800a35c:	801a      	strh	r2, [r3, #0]
 800a35e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a362:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a36c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	441a      	add	r2, r3
 800a378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a37c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a380:	881b      	ldrh	r3, [r3, #0]
 800a382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a38a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a38e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a392:	b29b      	uxth	r3, r3
 800a394:	8013      	strh	r3, [r2, #0]
 800a396:	f000 bc9f 	b.w	800acd8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a39a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a39e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	7b1b      	ldrb	r3, [r3, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f040 80ae 	bne.w	800a508 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a3ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	699a      	ldr	r2, [r3, #24]
 800a3b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d917      	bls.n	800a3f8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800a3c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800a3d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	699a      	ldr	r2, [r3, #24]
 800a3e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3e8:	1ad2      	subs	r2, r2, r3
 800a3ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	619a      	str	r2, [r3, #24]
 800a3f6:	e00e      	b.n	800a416 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800a3f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800a408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a40c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2200      	movs	r2, #0
 800a414:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a41a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a428:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a432:	b29b      	uxth	r3, r3
 800a434:	461a      	mov	r2, r3
 800a436:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a43a:	4413      	add	r3, r2
 800a43c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	011a      	lsls	r2, r3, #4
 800a44e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a452:	4413      	add	r3, r2
 800a454:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a45c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a460:	2b00      	cmp	r3, #0
 800a462:	d116      	bne.n	800a492 <USB_EPStartXfer+0x141e>
 800a464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a470:	b29a      	uxth	r2, r3
 800a472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a476:	801a      	strh	r2, [r3, #0]
 800a478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	b29b      	uxth	r3, r3
 800a480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a488:	b29a      	uxth	r2, r3
 800a48a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a48e:	801a      	strh	r2, [r3, #0]
 800a490:	e3e8      	b.n	800ac64 <USB_EPStartXfer+0x1bf0>
 800a492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a496:	2b3e      	cmp	r3, #62	; 0x3e
 800a498:	d818      	bhi.n	800a4cc <USB_EPStartXfer+0x1458>
 800a49a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a49e:	085b      	lsrs	r3, r3, #1
 800a4a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a4a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d004      	beq.n	800a4ba <USB_EPStartXfer+0x1446>
 800a4b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a4ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	029b      	lsls	r3, r3, #10
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4c8:	801a      	strh	r2, [r3, #0]
 800a4ca:	e3cb      	b.n	800ac64 <USB_EPStartXfer+0x1bf0>
 800a4cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4d0:	095b      	lsrs	r3, r3, #5
 800a4d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a4d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4da:	f003 031f 	and.w	r3, r3, #31
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d104      	bne.n	800a4ec <USB_EPStartXfer+0x1478>
 800a4e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a4ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	029b      	lsls	r3, r3, #10
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a504:	801a      	strh	r2, [r3, #0]
 800a506:	e3ad      	b.n	800ac64 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a50c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	78db      	ldrb	r3, [r3, #3]
 800a514:	2b02      	cmp	r3, #2
 800a516:	f040 8200 	bne.w	800a91a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a51a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a51e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	785b      	ldrb	r3, [r3, #1]
 800a526:	2b00      	cmp	r3, #0
 800a528:	f040 8091 	bne.w	800a64e <USB_EPStartXfer+0x15da>
 800a52c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a530:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a53a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a53e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a548:	b29b      	uxth	r3, r3
 800a54a:	461a      	mov	r2, r3
 800a54c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a550:	4413      	add	r3, r2
 800a552:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a55a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	011a      	lsls	r2, r3, #4
 800a564:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a568:	4413      	add	r3, r2
 800a56a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a56e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d116      	bne.n	800a5b0 <USB_EPStartXfer+0x153c>
 800a582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a58e:	b29a      	uxth	r2, r3
 800a590:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a594:	801a      	strh	r2, [r3, #0]
 800a596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a59a:	881b      	ldrh	r3, [r3, #0]
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5ac:	801a      	strh	r2, [r3, #0]
 800a5ae:	e083      	b.n	800a6b8 <USB_EPStartXfer+0x1644>
 800a5b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	2b3e      	cmp	r3, #62	; 0x3e
 800a5be:	d820      	bhi.n	800a602 <USB_EPStartXfer+0x158e>
 800a5c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	085b      	lsrs	r3, r3, #1
 800a5ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a5d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	f003 0301 	and.w	r3, r3, #1
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d004      	beq.n	800a5f0 <USB_EPStartXfer+0x157c>
 800a5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	029b      	lsls	r3, r3, #10
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5fe:	801a      	strh	r2, [r3, #0]
 800a600:	e05a      	b.n	800a6b8 <USB_EPStartXfer+0x1644>
 800a602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	095b      	lsrs	r3, r3, #5
 800a610:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	f003 031f 	and.w	r3, r3, #31
 800a624:	2b00      	cmp	r3, #0
 800a626:	d104      	bne.n	800a632 <USB_EPStartXfer+0x15be>
 800a628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62c:	3b01      	subs	r3, #1
 800a62e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a636:	b29b      	uxth	r3, r3
 800a638:	029b      	lsls	r3, r3, #10
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a644:	b29a      	uxth	r2, r3
 800a646:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a64a:	801a      	strh	r2, [r3, #0]
 800a64c:	e034      	b.n	800a6b8 <USB_EPStartXfer+0x1644>
 800a64e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	785b      	ldrb	r3, [r3, #1]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d12c      	bne.n	800a6b8 <USB_EPStartXfer+0x1644>
 800a65e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a662:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a66c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a670:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	461a      	mov	r2, r3
 800a67e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a682:	4413      	add	r3, r2
 800a684:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a68c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	011a      	lsls	r2, r3, #4
 800a696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a69a:	4413      	add	r3, r2
 800a69c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a6a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a6b6:	801a      	strh	r2, [r3, #0]
 800a6b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a6c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	785b      	ldrb	r3, [r3, #1]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f040 8091 	bne.w	800a7fa <USB_EPStartXfer+0x1786>
 800a6d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a6e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	011a      	lsls	r2, r3, #4
 800a710:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a714:	4413      	add	r3, r2
 800a716:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a71a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a71e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d116      	bne.n	800a75c <USB_EPStartXfer+0x16e8>
 800a72e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a732:	881b      	ldrh	r3, [r3, #0]
 800a734:	b29b      	uxth	r3, r3
 800a736:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a740:	801a      	strh	r2, [r3, #0]
 800a742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a746:	881b      	ldrh	r3, [r3, #0]
 800a748:	b29b      	uxth	r3, r3
 800a74a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a74e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a752:	b29a      	uxth	r2, r3
 800a754:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a758:	801a      	strh	r2, [r3, #0]
 800a75a:	e07c      	b.n	800a856 <USB_EPStartXfer+0x17e2>
 800a75c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	2b3e      	cmp	r3, #62	; 0x3e
 800a76a:	d820      	bhi.n	800a7ae <USB_EPStartXfer+0x173a>
 800a76c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a770:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	085b      	lsrs	r3, r3, #1
 800a77a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a77e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d004      	beq.n	800a79c <USB_EPStartXfer+0x1728>
 800a792:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a796:	3301      	adds	r3, #1
 800a798:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a79c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	029b      	lsls	r3, r3, #10
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a7aa:	801a      	strh	r2, [r3, #0]
 800a7ac:	e053      	b.n	800a856 <USB_EPStartXfer+0x17e2>
 800a7ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	095b      	lsrs	r3, r3, #5
 800a7bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a7c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	f003 031f 	and.w	r3, r3, #31
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d104      	bne.n	800a7de <USB_EPStartXfer+0x176a>
 800a7d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a7de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	029b      	lsls	r3, r3, #10
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a7f6:	801a      	strh	r2, [r3, #0]
 800a7f8:	e02d      	b.n	800a856 <USB_EPStartXfer+0x17e2>
 800a7fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	785b      	ldrb	r3, [r3, #1]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d125      	bne.n	800a856 <USB_EPStartXfer+0x17e2>
 800a80a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a80e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a818:	b29b      	uxth	r3, r3
 800a81a:	461a      	mov	r2, r3
 800a81c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a820:	4413      	add	r3, r2
 800a822:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a82a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	011a      	lsls	r2, r3, #4
 800a834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a838:	4413      	add	r3, r2
 800a83a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a83e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	b29a      	uxth	r2, r3
 800a850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a854:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a85a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	69db      	ldr	r3, [r3, #28]
 800a862:	2b00      	cmp	r3, #0
 800a864:	f000 81fe 	beq.w	800ac64 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a86c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	881b      	ldrh	r3, [r3, #0]
 800a884:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a888:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a88c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a890:	2b00      	cmp	r3, #0
 800a892:	d005      	beq.n	800a8a0 <USB_EPStartXfer+0x182c>
 800a894:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10d      	bne.n	800a8bc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a8a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a8a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f040 81db 	bne.w	800ac64 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a8ae:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a8b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f040 81d4 	bne.w	800ac64 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a8bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	4413      	add	r3, r2
 800a8d6:	881b      	ldrh	r3, [r3, #0]
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8e2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a8e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	441a      	add	r2, r3
 800a900:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a90c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a910:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a914:	b29b      	uxth	r3, r3
 800a916:	8013      	strh	r3, [r2, #0]
 800a918:	e1a4      	b.n	800ac64 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a91a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a91e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	78db      	ldrb	r3, [r3, #3]
 800a926:	2b01      	cmp	r3, #1
 800a928:	f040 819a 	bne.w	800ac60 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a92c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	699a      	ldr	r2, [r3, #24]
 800a938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a93c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	429a      	cmp	r2, r3
 800a946:	d917      	bls.n	800a978 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a94c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a95c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	699a      	ldr	r2, [r3, #24]
 800a964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a968:	1ad2      	subs	r2, r2, r3
 800a96a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a96e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	619a      	str	r2, [r3, #24]
 800a976:	e00e      	b.n	800a996 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a97c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	699b      	ldr	r3, [r3, #24]
 800a984:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a98c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2200      	movs	r2, #0
 800a994:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a99a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	785b      	ldrb	r3, [r3, #1]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d178      	bne.n	800aa98 <USB_EPStartXfer+0x1a24>
 800a9a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a9b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a9d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	011a      	lsls	r2, r3, #4
 800a9de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a9e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a9ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d116      	bne.n	800aa22 <USB_EPStartXfer+0x19ae>
 800a9f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a9f8:	881b      	ldrh	r3, [r3, #0]
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa06:	801a      	strh	r2, [r3, #0]
 800aa08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa18:	b29a      	uxth	r2, r3
 800aa1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa1e:	801a      	strh	r2, [r3, #0]
 800aa20:	e06b      	b.n	800aafa <USB_EPStartXfer+0x1a86>
 800aa22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa26:	2b3e      	cmp	r3, #62	; 0x3e
 800aa28:	d818      	bhi.n	800aa5c <USB_EPStartXfer+0x19e8>
 800aa2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa2e:	085b      	lsrs	r3, r3, #1
 800aa30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d004      	beq.n	800aa4a <USB_EPStartXfer+0x19d6>
 800aa40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa44:	3301      	adds	r3, #1
 800aa46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	029b      	lsls	r3, r3, #10
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa58:	801a      	strh	r2, [r3, #0]
 800aa5a:	e04e      	b.n	800aafa <USB_EPStartXfer+0x1a86>
 800aa5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa60:	095b      	lsrs	r3, r3, #5
 800aa62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa6a:	f003 031f 	and.w	r3, r3, #31
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d104      	bne.n	800aa7c <USB_EPStartXfer+0x1a08>
 800aa72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa76:	3b01      	subs	r3, #1
 800aa78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	029b      	lsls	r3, r3, #10
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa94:	801a      	strh	r2, [r3, #0]
 800aa96:	e030      	b.n	800aafa <USB_EPStartXfer+0x1a86>
 800aa98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	785b      	ldrb	r3, [r3, #1]
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d128      	bne.n	800aafa <USB_EPStartXfer+0x1a86>
 800aaa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	461a      	mov	r2, r3
 800aac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aacc:	4413      	add	r3, r2
 800aace:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	011a      	lsls	r2, r3, #4
 800aae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aae4:	4413      	add	r3, r2
 800aae6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aaea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aaee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aaf2:	b29a      	uxth	r2, r3
 800aaf4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aaf8:	801a      	strh	r2, [r3, #0]
 800aafa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aafe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ab08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	785b      	ldrb	r3, [r3, #1]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d178      	bne.n	800ac0a <USB_EPStartXfer+0x1b96>
 800ab18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ab26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	461a      	mov	r2, r3
 800ab38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ab42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	011a      	lsls	r2, r3, #4
 800ab50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab54:	4413      	add	r3, r2
 800ab56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ab5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d116      	bne.n	800ab94 <USB_EPStartXfer+0x1b20>
 800ab66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab78:	801a      	strh	r2, [r3, #0]
 800ab7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab7e:	881b      	ldrh	r3, [r3, #0]
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab90:	801a      	strh	r2, [r3, #0]
 800ab92:	e067      	b.n	800ac64 <USB_EPStartXfer+0x1bf0>
 800ab94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab98:	2b3e      	cmp	r3, #62	; 0x3e
 800ab9a:	d818      	bhi.n	800abce <USB_EPStartXfer+0x1b5a>
 800ab9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aba0:	085b      	lsrs	r3, r3, #1
 800aba2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d004      	beq.n	800abbc <USB_EPStartXfer+0x1b48>
 800abb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800abb6:	3301      	adds	r3, #1
 800abb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800abbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	029b      	lsls	r3, r3, #10
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800abca:	801a      	strh	r2, [r3, #0]
 800abcc:	e04a      	b.n	800ac64 <USB_EPStartXfer+0x1bf0>
 800abce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abd2:	095b      	lsrs	r3, r3, #5
 800abd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800abd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abdc:	f003 031f 	and.w	r3, r3, #31
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d104      	bne.n	800abee <USB_EPStartXfer+0x1b7a>
 800abe4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800abe8:	3b01      	subs	r3, #1
 800abea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800abee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	029b      	lsls	r3, r3, #10
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac06:	801a      	strh	r2, [r3, #0]
 800ac08:	e02c      	b.n	800ac64 <USB_EPStartXfer+0x1bf0>
 800ac0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	785b      	ldrb	r3, [r3, #1]
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d124      	bne.n	800ac64 <USB_EPStartXfer+0x1bf0>
 800ac1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac30:	4413      	add	r3, r2
 800ac32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	011a      	lsls	r2, r3, #4
 800ac44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac48:	4413      	add	r3, r2
 800ac4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ac4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac56:	b29a      	uxth	r2, r3
 800ac58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac5c:	801a      	strh	r2, [r3, #0]
 800ac5e:	e001      	b.n	800ac64 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e03a      	b.n	800acda <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800ac8e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ac92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ac96:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800ac9a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ac9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aca2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800aca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	441a      	add	r2, r3
 800acc0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800acc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800accc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	785b      	ldrb	r3, [r3, #1]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d020      	beq.n	800ad38 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	4413      	add	r3, r2
 800ad00:	881b      	ldrh	r3, [r3, #0]
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad0c:	81bb      	strh	r3, [r7, #12]
 800ad0e:	89bb      	ldrh	r3, [r7, #12]
 800ad10:	f083 0310 	eor.w	r3, r3, #16
 800ad14:	81bb      	strh	r3, [r7, #12]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	441a      	add	r2, r3
 800ad20:	89bb      	ldrh	r3, [r7, #12]
 800ad22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	8013      	strh	r3, [r2, #0]
 800ad36:	e01f      	b.n	800ad78 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad4e:	81fb      	strh	r3, [r7, #14]
 800ad50:	89fb      	ldrh	r3, [r7, #14]
 800ad52:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ad56:	81fb      	strh	r3, [r7, #14]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	441a      	add	r2, r3
 800ad62:	89fb      	ldrh	r3, [r7, #14]
 800ad64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bc80      	pop	{r7}
 800ad82:	4770      	bx	lr

0800ad84 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b087      	sub	sp, #28
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	7b1b      	ldrb	r3, [r3, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f040 809d 	bne.w	800aed2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	785b      	ldrb	r3, [r3, #1]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d04c      	beq.n	800ae3a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	823b      	strh	r3, [r7, #16]
 800adae:	8a3b      	ldrh	r3, [r7, #16]
 800adb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d01b      	beq.n	800adf0 <USB_EPClearStall+0x6c>
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	881b      	ldrh	r3, [r3, #0]
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adce:	81fb      	strh	r3, [r7, #14]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	441a      	add	r2, r3
 800adda:	89fb      	ldrh	r3, [r7, #14]
 800addc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ade0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ade4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ade8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800adec:	b29b      	uxth	r3, r3
 800adee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	78db      	ldrb	r3, [r3, #3]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d06c      	beq.n	800aed2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae0e:	81bb      	strh	r3, [r7, #12]
 800ae10:	89bb      	ldrh	r3, [r7, #12]
 800ae12:	f083 0320 	eor.w	r3, r3, #32
 800ae16:	81bb      	strh	r3, [r7, #12]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	441a      	add	r2, r3
 800ae22:	89bb      	ldrh	r3, [r7, #12]
 800ae24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	8013      	strh	r3, [r2, #0]
 800ae38:	e04b      	b.n	800aed2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	881b      	ldrh	r3, [r3, #0]
 800ae46:	82fb      	strh	r3, [r7, #22]
 800ae48:	8afb      	ldrh	r3, [r7, #22]
 800ae4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d01b      	beq.n	800ae8a <USB_EPClearStall+0x106>
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	881b      	ldrh	r3, [r3, #0]
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae68:	82bb      	strh	r3, [r7, #20]
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	441a      	add	r2, r3
 800ae74:	8abb      	ldrh	r3, [r7, #20]
 800ae76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	881b      	ldrh	r3, [r3, #0]
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aea0:	827b      	strh	r3, [r7, #18]
 800aea2:	8a7b      	ldrh	r3, [r7, #18]
 800aea4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aea8:	827b      	strh	r3, [r7, #18]
 800aeaa:	8a7b      	ldrh	r3, [r7, #18]
 800aeac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aeb0:	827b      	strh	r3, [r7, #18]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	441a      	add	r2, r3
 800aebc:	8a7b      	ldrh	r3, [r7, #18]
 800aebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aece:	b29b      	uxth	r3, r3
 800aed0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	371c      	adds	r7, #28
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bc80      	pop	{r7}
 800aedc:	4770      	bx	lr

0800aede <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800aede:	b480      	push	{r7}
 800aee0:	b083      	sub	sp, #12
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	460b      	mov	r3, r1
 800aee8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800aeea:	78fb      	ldrb	r3, [r7, #3]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d103      	bne.n	800aef8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2280      	movs	r2, #128	; 0x80
 800aef4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	bc80      	pop	{r7}
 800af02:	4770      	bx	lr

0800af04 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	370c      	adds	r7, #12
 800af12:	46bd      	mov	sp, r7
 800af14:	bc80      	pop	{r7}
 800af16:	4770      	bx	lr

0800af18 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	370c      	adds	r7, #12
 800af26:	46bd      	mov	sp, r7
 800af28:	bc80      	pop	{r7}
 800af2a:	4770      	bx	lr

0800af2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800af3e:	68fb      	ldr	r3, [r7, #12]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	bc80      	pop	{r7}
 800af48:	4770      	bx	lr

0800af4a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800af4a:	b480      	push	{r7}
 800af4c:	b083      	sub	sp, #12
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bc80      	pop	{r7}
 800af5e:	4770      	bx	lr

0800af60 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800af60:	b480      	push	{r7}
 800af62:	b08d      	sub	sp, #52	; 0x34
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	4611      	mov	r1, r2
 800af6c:	461a      	mov	r2, r3
 800af6e:	460b      	mov	r3, r1
 800af70:	80fb      	strh	r3, [r7, #6]
 800af72:	4613      	mov	r3, r2
 800af74:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800af76:	88bb      	ldrh	r3, [r7, #4]
 800af78:	3301      	adds	r3, #1
 800af7a:	085b      	lsrs	r3, r3, #1
 800af7c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af86:	88fb      	ldrh	r3, [r7, #6]
 800af88:	005a      	lsls	r2, r3, #1
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	4413      	add	r3, r2
 800af8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af92:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800af94:	6a3b      	ldr	r3, [r7, #32]
 800af96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af98:	e01e      	b.n	800afd8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	3301      	adds	r3, #1
 800afa4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800afa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	b29b      	uxth	r3, r3
 800afac:	021b      	lsls	r3, r3, #8
 800afae:	b29b      	uxth	r3, r3
 800afb0:	461a      	mov	r2, r3
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	b29a      	uxth	r2, r3
 800afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800afc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc2:	3302      	adds	r3, #2
 800afc4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800afc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc8:	3302      	adds	r3, #2
 800afca:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afce:	3301      	adds	r3, #1
 800afd0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800afd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd4:	3b01      	subs	r3, #1
 800afd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1dd      	bne.n	800af9a <USB_WritePMA+0x3a>
  }
}
 800afde:	bf00      	nop
 800afe0:	bf00      	nop
 800afe2:	3734      	adds	r7, #52	; 0x34
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bc80      	pop	{r7}
 800afe8:	4770      	bx	lr

0800afea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800afea:	b480      	push	{r7}
 800afec:	b08b      	sub	sp, #44	; 0x2c
 800afee:	af00      	add	r7, sp, #0
 800aff0:	60f8      	str	r0, [r7, #12]
 800aff2:	60b9      	str	r1, [r7, #8]
 800aff4:	4611      	mov	r1, r2
 800aff6:	461a      	mov	r2, r3
 800aff8:	460b      	mov	r3, r1
 800affa:	80fb      	strh	r3, [r7, #6]
 800affc:	4613      	mov	r3, r2
 800affe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b000:	88bb      	ldrh	r3, [r7, #4]
 800b002:	085b      	lsrs	r3, r3, #1
 800b004:	b29b      	uxth	r3, r3
 800b006:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b010:	88fb      	ldrh	r3, [r7, #6]
 800b012:	005a      	lsls	r2, r3, #1
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b01c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	627b      	str	r3, [r7, #36]	; 0x24
 800b022:	e01b      	b.n	800b05c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b024:	6a3b      	ldr	r3, [r7, #32]
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b02c:	6a3b      	ldr	r3, [r7, #32]
 800b02e:	3302      	adds	r3, #2
 800b030:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	b2da      	uxtb	r2, r3
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	3301      	adds	r3, #1
 800b03e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	0a1b      	lsrs	r3, r3, #8
 800b044:	b2da      	uxtb	r2, r3
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	3301      	adds	r3, #1
 800b04e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	3302      	adds	r3, #2
 800b054:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800b056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b058:	3b01      	subs	r3, #1
 800b05a:	627b      	str	r3, [r7, #36]	; 0x24
 800b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1e0      	bne.n	800b024 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b062:	88bb      	ldrh	r3, [r7, #4]
 800b064:	f003 0301 	and.w	r3, r3, #1
 800b068:	b29b      	uxth	r3, r3
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d007      	beq.n	800b07e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800b06e:	6a3b      	ldr	r3, [r7, #32]
 800b070:	881b      	ldrh	r3, [r3, #0]
 800b072:	b29b      	uxth	r3, r3
 800b074:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	701a      	strb	r2, [r3, #0]
  }
}
 800b07e:	bf00      	nop
 800b080:	372c      	adds	r7, #44	; 0x2c
 800b082:	46bd      	mov	sp, r7
 800b084:	bc80      	pop	{r7}
 800b086:	4770      	bx	lr

0800b088 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	460b      	mov	r3, r1
 800b092:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b094:	2300      	movs	r3, #0
 800b096:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	7c1b      	ldrb	r3, [r3, #16]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d115      	bne.n	800b0cc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b0a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0a4:	2202      	movs	r2, #2
 800b0a6:	2181      	movs	r1, #129	; 0x81
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f004 fb32 	bl	800f712 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b0b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0b8:	2202      	movs	r2, #2
 800b0ba:	2101      	movs	r1, #1
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f004 fb28 	bl	800f712 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b0ca:	e012      	b.n	800b0f2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b0cc:	2340      	movs	r3, #64	; 0x40
 800b0ce:	2202      	movs	r2, #2
 800b0d0:	2181      	movs	r1, #129	; 0x81
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f004 fb1d 	bl	800f712 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b0de:	2340      	movs	r3, #64	; 0x40
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	2101      	movs	r1, #1
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f004 fb14 	bl	800f712 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b0f2:	2308      	movs	r3, #8
 800b0f4:	2203      	movs	r2, #3
 800b0f6:	2182      	movs	r1, #130	; 0x82
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f004 fb0a 	bl	800f712 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2201      	movs	r2, #1
 800b102:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b104:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b108:	f004 fc2a 	bl	800f960 <USBD_static_malloc>
 800b10c:	4602      	mov	r2, r0
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d102      	bne.n	800b124 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b11e:	2301      	movs	r3, #1
 800b120:	73fb      	strb	r3, [r7, #15]
 800b122:	e026      	b.n	800b172 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b12a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	2200      	movs	r2, #0
 800b13a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	2200      	movs	r2, #0
 800b142:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	7c1b      	ldrb	r3, [r3, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d109      	bne.n	800b162 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b154:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b158:	2101      	movs	r1, #1
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f004 fbca 	bl	800f8f4 <USBD_LL_PrepareReceive>
 800b160:	e007      	b.n	800b172 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b168:	2340      	movs	r3, #64	; 0x40
 800b16a:	2101      	movs	r1, #1
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f004 fbc1 	bl	800f8f4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b172:	7bfb      	ldrb	r3, [r7, #15]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	460b      	mov	r3, r1
 800b186:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b188:	2300      	movs	r3, #0
 800b18a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b18c:	2181      	movs	r1, #129	; 0x81
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f004 fae5 	bl	800f75e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b19a:	2101      	movs	r1, #1
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f004 fade 	bl	800f75e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b1aa:	2182      	movs	r1, #130	; 0x82
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f004 fad6 	bl	800f75e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00e      	beq.n	800b1e0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f004 fbd0 	bl	800f978 <USBD_static_free>
    pdev->pClassData = NULL;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b086      	sub	sp, #24
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1fa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b200:	2300      	movs	r3, #0
 800b202:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b204:	2300      	movs	r3, #0
 800b206:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b210:	2b00      	cmp	r3, #0
 800b212:	d039      	beq.n	800b288 <USBD_CDC_Setup+0x9e>
 800b214:	2b20      	cmp	r3, #32
 800b216:	d17f      	bne.n	800b318 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	88db      	ldrh	r3, [r3, #6]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d029      	beq.n	800b274 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	b25b      	sxtb	r3, r3
 800b226:	2b00      	cmp	r3, #0
 800b228:	da11      	bge.n	800b24e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b236:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	88d2      	ldrh	r2, [r2, #6]
 800b23c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b23e:	6939      	ldr	r1, [r7, #16]
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	88db      	ldrh	r3, [r3, #6]
 800b244:	461a      	mov	r2, r3
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f001 f9d9 	bl	800c5fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b24c:	e06b      	b.n	800b326 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	785a      	ldrb	r2, [r3, #1]
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	88db      	ldrh	r3, [r3, #6]
 800b25c:	b2da      	uxtb	r2, r3
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b264:	6939      	ldr	r1, [r7, #16]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	88db      	ldrh	r3, [r3, #6]
 800b26a:	461a      	mov	r2, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f001 f9f4 	bl	800c65a <USBD_CtlPrepareRx>
      break;
 800b272:	e058      	b.n	800b326 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	7850      	ldrb	r0, [r2, #1]
 800b280:	2200      	movs	r2, #0
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	4798      	blx	r3
      break;
 800b286:	e04e      	b.n	800b326 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	785b      	ldrb	r3, [r3, #1]
 800b28c:	2b0b      	cmp	r3, #11
 800b28e:	d02e      	beq.n	800b2ee <USBD_CDC_Setup+0x104>
 800b290:	2b0b      	cmp	r3, #11
 800b292:	dc38      	bgt.n	800b306 <USBD_CDC_Setup+0x11c>
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <USBD_CDC_Setup+0xb4>
 800b298:	2b0a      	cmp	r3, #10
 800b29a:	d014      	beq.n	800b2c6 <USBD_CDC_Setup+0xdc>
 800b29c:	e033      	b.n	800b306 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2a4:	2b03      	cmp	r3, #3
 800b2a6:	d107      	bne.n	800b2b8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b2a8:	f107 030c 	add.w	r3, r7, #12
 800b2ac:	2202      	movs	r2, #2
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f001 f9a4 	bl	800c5fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2b6:	e02e      	b.n	800b316 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f001 f935 	bl	800c52a <USBD_CtlError>
            ret = USBD_FAIL;
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	75fb      	strb	r3, [r7, #23]
          break;
 800b2c4:	e027      	b.n	800b316 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2cc:	2b03      	cmp	r3, #3
 800b2ce:	d107      	bne.n	800b2e0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b2d0:	f107 030f 	add.w	r3, r7, #15
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f001 f990 	bl	800c5fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2de:	e01a      	b.n	800b316 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b2e0:	6839      	ldr	r1, [r7, #0]
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f001 f921 	bl	800c52a <USBD_CtlError>
            ret = USBD_FAIL;
 800b2e8:	2302      	movs	r3, #2
 800b2ea:	75fb      	strb	r3, [r7, #23]
          break;
 800b2ec:	e013      	b.n	800b316 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2f4:	2b03      	cmp	r3, #3
 800b2f6:	d00d      	beq.n	800b314 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f001 f915 	bl	800c52a <USBD_CtlError>
            ret = USBD_FAIL;
 800b300:	2302      	movs	r3, #2
 800b302:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b304:	e006      	b.n	800b314 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b306:	6839      	ldr	r1, [r7, #0]
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f001 f90e 	bl	800c52a <USBD_CtlError>
          ret = USBD_FAIL;
 800b30e:	2302      	movs	r3, #2
 800b310:	75fb      	strb	r3, [r7, #23]
          break;
 800b312:	e000      	b.n	800b316 <USBD_CDC_Setup+0x12c>
          break;
 800b314:	bf00      	nop
      }
      break;
 800b316:	e006      	b.n	800b326 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f001 f905 	bl	800c52a <USBD_CtlError>
      ret = USBD_FAIL;
 800b320:	2302      	movs	r3, #2
 800b322:	75fb      	strb	r3, [r7, #23]
      break;
 800b324:	bf00      	nop
  }

  return ret;
 800b326:	7dfb      	ldrb	r3, [r7, #23]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3718      	adds	r7, #24
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	460b      	mov	r3, r1
 800b33a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b342:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b34a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b352:	2b00      	cmp	r3, #0
 800b354:	d03a      	beq.n	800b3cc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b356:	78fa      	ldrb	r2, [r7, #3]
 800b358:	6879      	ldr	r1, [r7, #4]
 800b35a:	4613      	mov	r3, r2
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	4413      	add	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	440b      	add	r3, r1
 800b364:	331c      	adds	r3, #28
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d029      	beq.n	800b3c0 <USBD_CDC_DataIn+0x90>
 800b36c:	78fa      	ldrb	r2, [r7, #3]
 800b36e:	6879      	ldr	r1, [r7, #4]
 800b370:	4613      	mov	r3, r2
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4413      	add	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	440b      	add	r3, r1
 800b37a:	331c      	adds	r3, #28
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	78f9      	ldrb	r1, [r7, #3]
 800b380:	68b8      	ldr	r0, [r7, #8]
 800b382:	460b      	mov	r3, r1
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	440b      	add	r3, r1
 800b388:	00db      	lsls	r3, r3, #3
 800b38a:	4403      	add	r3, r0
 800b38c:	3338      	adds	r3, #56	; 0x38
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	fbb2 f1f3 	udiv	r1, r2, r3
 800b394:	fb01 f303 	mul.w	r3, r1, r3
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d110      	bne.n	800b3c0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b39e:	78fa      	ldrb	r2, [r7, #3]
 800b3a0:	6879      	ldr	r1, [r7, #4]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	440b      	add	r3, r1
 800b3ac:	331c      	adds	r3, #28
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b3b2:	78f9      	ldrb	r1, [r7, #3]
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f004 fa78 	bl	800f8ae <USBD_LL_Transmit>
 800b3be:	e003      	b.n	800b3c8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	e000      	b.n	800b3ce <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b3cc:	2302      	movs	r3, #2
  }
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	460b      	mov	r3, r1
 800b3e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3e8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b3ea:	78fb      	ldrb	r3, [r7, #3]
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f004 faa3 	bl	800f93a <USBD_LL_GetRxDataSize>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00d      	beq.n	800b422 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b41a:	4611      	mov	r1, r2
 800b41c:	4798      	blx	r3

    return USBD_OK;
 800b41e:	2300      	movs	r3, #0
 800b420:	e000      	b.n	800b424 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b422:	2302      	movs	r3, #2
  }
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b43a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b442:	2b00      	cmp	r3, #0
 800b444:	d015      	beq.n	800b472 <USBD_CDC_EP0_RxReady+0x46>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b44c:	2bff      	cmp	r3, #255	; 0xff
 800b44e:	d010      	beq.n	800b472 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b45e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b466:	b292      	uxth	r2, r2
 800b468:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	22ff      	movs	r2, #255	; 0xff
 800b46e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b472:	2300      	movs	r3, #0
}
 800b474:	4618      	mov	r0, r3
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2243      	movs	r2, #67	; 0x43
 800b488:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b48a:	4b03      	ldr	r3, [pc, #12]	; (800b498 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	bc80      	pop	{r7}
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	20000098 	.word	0x20000098

0800b49c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2243      	movs	r2, #67	; 0x43
 800b4a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b4aa:	4b03      	ldr	r3, [pc, #12]	; (800b4b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bc80      	pop	{r7}
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	20000054 	.word	0x20000054

0800b4bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2243      	movs	r2, #67	; 0x43
 800b4c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b4ca:	4b03      	ldr	r3, [pc, #12]	; (800b4d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bc80      	pop	{r7}
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	200000dc 	.word	0x200000dc

0800b4dc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	220a      	movs	r2, #10
 800b4e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b4ea:	4b03      	ldr	r3, [pc, #12]	; (800b4f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bc80      	pop	{r7}
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	20000010 	.word	0x20000010

0800b4fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b506:	2302      	movs	r3, #2
 800b508:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d005      	beq.n	800b51c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b518:	2300      	movs	r3, #0
 800b51a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	bc80      	pop	{r7}
 800b526:	4770      	bx	lr

0800b528 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b528:	b480      	push	{r7}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	4613      	mov	r3, r2
 800b534:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b53c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b546:	88fa      	ldrh	r2, [r7, #6]
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	4618      	mov	r0, r3
 800b552:	371c      	adds	r7, #28
 800b554:	46bd      	mov	sp, r7
 800b556:	bc80      	pop	{r7}
 800b558:	4770      	bx	lr

0800b55a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b55a:	b480      	push	{r7}
 800b55c:	b085      	sub	sp, #20
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
 800b562:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b56a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3714      	adds	r7, #20
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bc80      	pop	{r7}
 800b57e:	4770      	bx	lr

0800b580 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b58e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b596:	2b00      	cmp	r3, #0
 800b598:	d017      	beq.n	800b5ca <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	7c1b      	ldrb	r3, [r3, #16]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d109      	bne.n	800b5b6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b5a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f004 f9a0 	bl	800f8f4 <USBD_LL_PrepareReceive>
 800b5b4:	e007      	b.n	800b5c6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b5bc:	2340      	movs	r3, #64	; 0x40
 800b5be:	2101      	movs	r1, #1
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f004 f997 	bl	800f8f4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	e000      	b.n	800b5cc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b5ca:	2302      	movs	r3, #2
  }
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d101      	bne.n	800b5ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	e01a      	b.n	800b622 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d003      	beq.n	800b5fe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d003      	beq.n	800b60c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	68ba      	ldr	r2, [r7, #8]
 800b608:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2201      	movs	r2, #1
 800b610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	79fa      	ldrb	r2, [r7, #7]
 800b618:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f004 f804 	bl	800f628 <USBD_LL_Init>

  return USBD_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b62a:	b480      	push	{r7}
 800b62c:	b085      	sub	sp, #20
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
 800b632:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b634:	2300      	movs	r3, #0
 800b636:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d006      	beq.n	800b64c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	73fb      	strb	r3, [r7, #15]
 800b64a:	e001      	b.n	800b650 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b64c:	2302      	movs	r3, #2
 800b64e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b650:	7bfb      	ldrb	r3, [r7, #15]
}
 800b652:	4618      	mov	r0, r3
 800b654:	3714      	adds	r7, #20
 800b656:	46bd      	mov	sp, r7
 800b658:	bc80      	pop	{r7}
 800b65a:	4770      	bx	lr

0800b65c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f004 f839 	bl	800f6dc <USBD_LL_Start>

  return USBD_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	370c      	adds	r7, #12
 800b682:	46bd      	mov	sp, r7
 800b684:	bc80      	pop	{r7}
 800b686:	4770      	bx	lr

0800b688 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	460b      	mov	r3, r1
 800b692:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b694:	2302      	movs	r3, #2
 800b696:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00c      	beq.n	800b6bc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	78fa      	ldrb	r2, [r7, #3]
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	4798      	blx	r3
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d101      	bne.n	800b6bc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b082      	sub	sp, #8
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	78fa      	ldrb	r2, [r7, #3]
 800b6dc:	4611      	mov	r1, r2
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	4798      	blx	r3

  return USBD_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b6fc:	6839      	ldr	r1, [r7, #0]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 fed7 	bl	800c4b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b712:	461a      	mov	r2, r3
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b720:	f003 031f 	and.w	r3, r3, #31
 800b724:	2b02      	cmp	r3, #2
 800b726:	d016      	beq.n	800b756 <USBD_LL_SetupStage+0x6a>
 800b728:	2b02      	cmp	r3, #2
 800b72a:	d81c      	bhi.n	800b766 <USBD_LL_SetupStage+0x7a>
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d002      	beq.n	800b736 <USBD_LL_SetupStage+0x4a>
 800b730:	2b01      	cmp	r3, #1
 800b732:	d008      	beq.n	800b746 <USBD_LL_SetupStage+0x5a>
 800b734:	e017      	b.n	800b766 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b73c:	4619      	mov	r1, r3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f9ca 	bl	800bad8 <USBD_StdDevReq>
      break;
 800b744:	e01a      	b.n	800b77c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fa2c 	bl	800bbac <USBD_StdItfReq>
      break;
 800b754:	e012      	b.n	800b77c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 fa6c 	bl	800bc3c <USBD_StdEPReq>
      break;
 800b764:	e00a      	b.n	800b77c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b76c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b770:	b2db      	uxtb	r3, r3
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f004 f811 	bl	800f79c <USBD_LL_StallEP>
      break;
 800b77a:	bf00      	nop
  }

  return USBD_OK;
 800b77c:	2300      	movs	r3, #0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b086      	sub	sp, #24
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	60f8      	str	r0, [r7, #12]
 800b78e:	460b      	mov	r3, r1
 800b790:	607a      	str	r2, [r7, #4]
 800b792:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b794:	7afb      	ldrb	r3, [r7, #11]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d14b      	bne.n	800b832 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b7a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7a8:	2b03      	cmp	r3, #3
 800b7aa:	d134      	bne.n	800b816 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	68da      	ldr	r2, [r3, #12]
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	691b      	ldr	r3, [r3, #16]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d919      	bls.n	800b7ec <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	68da      	ldr	r2, [r3, #12]
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	691b      	ldr	r3, [r3, #16]
 800b7c0:	1ad2      	subs	r2, r2, r3
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	68da      	ldr	r2, [r3, #12]
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d203      	bcs.n	800b7da <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	e002      	b.n	800b7e0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	6879      	ldr	r1, [r7, #4]
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f000 ff56 	bl	800c696 <USBD_CtlContinueRx>
 800b7ea:	e038      	b.n	800b85e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00a      	beq.n	800b80e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b7fe:	2b03      	cmp	r3, #3
 800b800:	d105      	bne.n	800b80e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b808:	691b      	ldr	r3, [r3, #16]
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f000 ff53 	bl	800c6ba <USBD_CtlSendStatus>
 800b814:	e023      	b.n	800b85e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b81c:	2b05      	cmp	r3, #5
 800b81e:	d11e      	bne.n	800b85e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2200      	movs	r2, #0
 800b824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b828:	2100      	movs	r1, #0
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f003 ffb6 	bl	800f79c <USBD_LL_StallEP>
 800b830:	e015      	b.n	800b85e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b838:	699b      	ldr	r3, [r3, #24]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00d      	beq.n	800b85a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b844:	2b03      	cmp	r3, #3
 800b846:	d108      	bne.n	800b85a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	7afa      	ldrb	r2, [r7, #11]
 800b852:	4611      	mov	r1, r2
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	4798      	blx	r3
 800b858:	e001      	b.n	800b85e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b85a:	2302      	movs	r3, #2
 800b85c:	e000      	b.n	800b860 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3718      	adds	r7, #24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	460b      	mov	r3, r1
 800b872:	607a      	str	r2, [r7, #4]
 800b874:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b876:	7afb      	ldrb	r3, [r7, #11]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d17f      	bne.n	800b97c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	3314      	adds	r3, #20
 800b880:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d15c      	bne.n	800b946 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	68da      	ldr	r2, [r3, #12]
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	691b      	ldr	r3, [r3, #16]
 800b894:	429a      	cmp	r2, r3
 800b896:	d915      	bls.n	800b8c4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	68da      	ldr	r2, [r3, #12]
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	1ad2      	subs	r2, r2, r3
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	6879      	ldr	r1, [r7, #4]
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f000 fec0 	bl	800c636 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f004 f819 	bl	800f8f4 <USBD_LL_PrepareReceive>
 800b8c2:	e04e      	b.n	800b962 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	6912      	ldr	r2, [r2, #16]
 800b8cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8d0:	fb01 f202 	mul.w	r2, r1, r2
 800b8d4:	1a9b      	subs	r3, r3, r2
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d11c      	bne.n	800b914 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	689a      	ldr	r2, [r3, #8]
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d316      	bcc.n	800b914 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	689a      	ldr	r2, [r3, #8]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d20f      	bcs.n	800b914 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	68f8      	ldr	r0, [r7, #12]
 800b8fa:	f000 fe9c 	bl	800c636 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2200      	movs	r2, #0
 800b902:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b906:	2300      	movs	r3, #0
 800b908:	2200      	movs	r2, #0
 800b90a:	2100      	movs	r1, #0
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f003 fff1 	bl	800f8f4 <USBD_LL_PrepareReceive>
 800b912:	e026      	b.n	800b962 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00a      	beq.n	800b936 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b926:	2b03      	cmp	r3, #3
 800b928:	d105      	bne.n	800b936 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b936:	2180      	movs	r1, #128	; 0x80
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f003 ff2f 	bl	800f79c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f000 fece 	bl	800c6e0 <USBD_CtlReceiveStatus>
 800b944:	e00d      	b.n	800b962 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b94c:	2b04      	cmp	r3, #4
 800b94e:	d004      	beq.n	800b95a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b956:	2b00      	cmp	r3, #0
 800b958:	d103      	bne.n	800b962 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b95a:	2180      	movs	r1, #128	; 0x80
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f003 ff1d 	bl	800f79c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d11d      	bne.n	800b9a8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f7ff fe81 	bl	800b674 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2200      	movs	r2, #0
 800b976:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b97a:	e015      	b.n	800b9a8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b982:	695b      	ldr	r3, [r3, #20]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00d      	beq.n	800b9a4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b98e:	2b03      	cmp	r3, #3
 800b990:	d108      	bne.n	800b9a4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b998:	695b      	ldr	r3, [r3, #20]
 800b99a:	7afa      	ldrb	r2, [r7, #11]
 800b99c:	4611      	mov	r1, r2
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	4798      	blx	r3
 800b9a2:	e001      	b.n	800b9a8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	e000      	b.n	800b9aa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3718      	adds	r7, #24
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b082      	sub	sp, #8
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9ba:	2340      	movs	r3, #64	; 0x40
 800b9bc:	2200      	movs	r2, #0
 800b9be:	2100      	movs	r1, #0
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f003 fea6 	bl	800f712 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2240      	movs	r2, #64	; 0x40
 800b9d2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9d6:	2340      	movs	r3, #64	; 0x40
 800b9d8:	2200      	movs	r2, #0
 800b9da:	2180      	movs	r1, #128	; 0x80
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f003 fe98 	bl	800f712 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2240      	movs	r2, #64	; 0x40
 800b9ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d009      	beq.n	800ba2a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	6852      	ldr	r2, [r2, #4]
 800ba22:	b2d2      	uxtb	r2, r2
 800ba24:	4611      	mov	r1, r2
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	4798      	blx	r3
  }

  return USBD_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	78fa      	ldrb	r2, [r7, #3]
 800ba44:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ba46:	2300      	movs	r3, #0
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bc80      	pop	{r7}
 800ba50:	4770      	bx	lr

0800ba52 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b083      	sub	sp, #12
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2204      	movs	r2, #4
 800ba6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bc80      	pop	{r7}
 800ba78:	4770      	bx	lr

0800ba7a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ba7a:	b480      	push	{r7}
 800ba7c:	b083      	sub	sp, #12
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba88:	2b04      	cmp	r3, #4
 800ba8a:	d105      	bne.n	800ba98 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bc80      	pop	{r7}
 800baa2:	4770      	bx	lr

0800baa4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bab2:	2b03      	cmp	r3, #3
 800bab4:	d10b      	bne.n	800bace <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800babc:	69db      	ldr	r3, [r3, #28]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d005      	beq.n	800bace <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bac8:	69db      	ldr	r3, [r3, #28]
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800baee:	2b40      	cmp	r3, #64	; 0x40
 800baf0:	d005      	beq.n	800bafe <USBD_StdDevReq+0x26>
 800baf2:	2b40      	cmp	r3, #64	; 0x40
 800baf4:	d84f      	bhi.n	800bb96 <USBD_StdDevReq+0xbe>
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d009      	beq.n	800bb0e <USBD_StdDevReq+0x36>
 800bafa:	2b20      	cmp	r3, #32
 800bafc:	d14b      	bne.n	800bb96 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	6839      	ldr	r1, [r7, #0]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	4798      	blx	r3
      break;
 800bb0c:	e048      	b.n	800bba0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	785b      	ldrb	r3, [r3, #1]
 800bb12:	2b09      	cmp	r3, #9
 800bb14:	d839      	bhi.n	800bb8a <USBD_StdDevReq+0xb2>
 800bb16:	a201      	add	r2, pc, #4	; (adr r2, 800bb1c <USBD_StdDevReq+0x44>)
 800bb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb1c:	0800bb6d 	.word	0x0800bb6d
 800bb20:	0800bb81 	.word	0x0800bb81
 800bb24:	0800bb8b 	.word	0x0800bb8b
 800bb28:	0800bb77 	.word	0x0800bb77
 800bb2c:	0800bb8b 	.word	0x0800bb8b
 800bb30:	0800bb4f 	.word	0x0800bb4f
 800bb34:	0800bb45 	.word	0x0800bb45
 800bb38:	0800bb8b 	.word	0x0800bb8b
 800bb3c:	0800bb63 	.word	0x0800bb63
 800bb40:	0800bb59 	.word	0x0800bb59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bb44:	6839      	ldr	r1, [r7, #0]
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f9dc 	bl	800bf04 <USBD_GetDescriptor>
          break;
 800bb4c:	e022      	b.n	800bb94 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fb3f 	bl	800c1d4 <USBD_SetAddress>
          break;
 800bb56:	e01d      	b.n	800bb94 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bb58:	6839      	ldr	r1, [r7, #0]
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 fb7e 	bl	800c25c <USBD_SetConfig>
          break;
 800bb60:	e018      	b.n	800bb94 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bb62:	6839      	ldr	r1, [r7, #0]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fc07 	bl	800c378 <USBD_GetConfig>
          break;
 800bb6a:	e013      	b.n	800bb94 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bb6c:	6839      	ldr	r1, [r7, #0]
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fc37 	bl	800c3e2 <USBD_GetStatus>
          break;
 800bb74:	e00e      	b.n	800bb94 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb76:	6839      	ldr	r1, [r7, #0]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fc65 	bl	800c448 <USBD_SetFeature>
          break;
 800bb7e:	e009      	b.n	800bb94 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 fc74 	bl	800c470 <USBD_ClrFeature>
          break;
 800bb88:	e004      	b.n	800bb94 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bb8a:	6839      	ldr	r1, [r7, #0]
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fccc 	bl	800c52a <USBD_CtlError>
          break;
 800bb92:	bf00      	nop
      }
      break;
 800bb94:	e004      	b.n	800bba0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bb96:	6839      	ldr	r1, [r7, #0]
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 fcc6 	bl	800c52a <USBD_CtlError>
      break;
 800bb9e:	bf00      	nop
  }

  return ret;
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop

0800bbac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbc2:	2b40      	cmp	r3, #64	; 0x40
 800bbc4:	d005      	beq.n	800bbd2 <USBD_StdItfReq+0x26>
 800bbc6:	2b40      	cmp	r3, #64	; 0x40
 800bbc8:	d82e      	bhi.n	800bc28 <USBD_StdItfReq+0x7c>
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <USBD_StdItfReq+0x26>
 800bbce:	2b20      	cmp	r3, #32
 800bbd0:	d12a      	bne.n	800bc28 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	d81d      	bhi.n	800bc1a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	889b      	ldrh	r3, [r3, #4]
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d813      	bhi.n	800bc10 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	6839      	ldr	r1, [r7, #0]
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	4798      	blx	r3
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	88db      	ldrh	r3, [r3, #6]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d110      	bne.n	800bc24 <USBD_StdItfReq+0x78>
 800bc02:	7bfb      	ldrb	r3, [r7, #15]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10d      	bne.n	800bc24 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 fd56 	bl	800c6ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bc0e:	e009      	b.n	800bc24 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bc10:	6839      	ldr	r1, [r7, #0]
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 fc89 	bl	800c52a <USBD_CtlError>
          break;
 800bc18:	e004      	b.n	800bc24 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bc1a:	6839      	ldr	r1, [r7, #0]
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 fc84 	bl	800c52a <USBD_CtlError>
          break;
 800bc22:	e000      	b.n	800bc26 <USBD_StdItfReq+0x7a>
          break;
 800bc24:	bf00      	nop
      }
      break;
 800bc26:	e004      	b.n	800bc32 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bc28:	6839      	ldr	r1, [r7, #0]
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fc7d 	bl	800c52a <USBD_CtlError>
      break;
 800bc30:	bf00      	nop
  }

  return USBD_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	889b      	ldrh	r3, [r3, #4]
 800bc4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc58:	2b40      	cmp	r3, #64	; 0x40
 800bc5a:	d007      	beq.n	800bc6c <USBD_StdEPReq+0x30>
 800bc5c:	2b40      	cmp	r3, #64	; 0x40
 800bc5e:	f200 8146 	bhi.w	800beee <USBD_StdEPReq+0x2b2>
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00a      	beq.n	800bc7c <USBD_StdEPReq+0x40>
 800bc66:	2b20      	cmp	r3, #32
 800bc68:	f040 8141 	bne.w	800beee <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	6839      	ldr	r1, [r7, #0]
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	4798      	blx	r3
      break;
 800bc7a:	e13d      	b.n	800bef8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc84:	2b20      	cmp	r3, #32
 800bc86:	d10a      	bne.n	800bc9e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	6839      	ldr	r1, [r7, #0]
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	4798      	blx	r3
 800bc96:	4603      	mov	r3, r0
 800bc98:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
 800bc9c:	e12d      	b.n	800befa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	785b      	ldrb	r3, [r3, #1]
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	d007      	beq.n	800bcb6 <USBD_StdEPReq+0x7a>
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	f300 811b 	bgt.w	800bee2 <USBD_StdEPReq+0x2a6>
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d072      	beq.n	800bd96 <USBD_StdEPReq+0x15a>
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d03a      	beq.n	800bd2a <USBD_StdEPReq+0xee>
 800bcb4:	e115      	b.n	800bee2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d002      	beq.n	800bcc6 <USBD_StdEPReq+0x8a>
 800bcc0:	2b03      	cmp	r3, #3
 800bcc2:	d015      	beq.n	800bcf0 <USBD_StdEPReq+0xb4>
 800bcc4:	e02b      	b.n	800bd1e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcc6:	7bbb      	ldrb	r3, [r7, #14]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00c      	beq.n	800bce6 <USBD_StdEPReq+0xaa>
 800bccc:	7bbb      	ldrb	r3, [r7, #14]
 800bcce:	2b80      	cmp	r3, #128	; 0x80
 800bcd0:	d009      	beq.n	800bce6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bcd2:	7bbb      	ldrb	r3, [r7, #14]
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f003 fd60 	bl	800f79c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bcdc:	2180      	movs	r1, #128	; 0x80
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f003 fd5c 	bl	800f79c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bce4:	e020      	b.n	800bd28 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bce6:	6839      	ldr	r1, [r7, #0]
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 fc1e 	bl	800c52a <USBD_CtlError>
              break;
 800bcee:	e01b      	b.n	800bd28 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	885b      	ldrh	r3, [r3, #2]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d10e      	bne.n	800bd16 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bcf8:	7bbb      	ldrb	r3, [r7, #14]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00b      	beq.n	800bd16 <USBD_StdEPReq+0xda>
 800bcfe:	7bbb      	ldrb	r3, [r7, #14]
 800bd00:	2b80      	cmp	r3, #128	; 0x80
 800bd02:	d008      	beq.n	800bd16 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	88db      	ldrh	r3, [r3, #6]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d104      	bne.n	800bd16 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bd0c:	7bbb      	ldrb	r3, [r7, #14]
 800bd0e:	4619      	mov	r1, r3
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f003 fd43 	bl	800f79c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fccf 	bl	800c6ba <USBD_CtlSendStatus>

              break;
 800bd1c:	e004      	b.n	800bd28 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fc02 	bl	800c52a <USBD_CtlError>
              break;
 800bd26:	bf00      	nop
          }
          break;
 800bd28:	e0e0      	b.n	800beec <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd30:	2b02      	cmp	r3, #2
 800bd32:	d002      	beq.n	800bd3a <USBD_StdEPReq+0xfe>
 800bd34:	2b03      	cmp	r3, #3
 800bd36:	d015      	beq.n	800bd64 <USBD_StdEPReq+0x128>
 800bd38:	e026      	b.n	800bd88 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd3a:	7bbb      	ldrb	r3, [r7, #14]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00c      	beq.n	800bd5a <USBD_StdEPReq+0x11e>
 800bd40:	7bbb      	ldrb	r3, [r7, #14]
 800bd42:	2b80      	cmp	r3, #128	; 0x80
 800bd44:	d009      	beq.n	800bd5a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bd46:	7bbb      	ldrb	r3, [r7, #14]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f003 fd26 	bl	800f79c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bd50:	2180      	movs	r1, #128	; 0x80
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f003 fd22 	bl	800f79c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd58:	e01c      	b.n	800bd94 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bd5a:	6839      	ldr	r1, [r7, #0]
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 fbe4 	bl	800c52a <USBD_CtlError>
              break;
 800bd62:	e017      	b.n	800bd94 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	885b      	ldrh	r3, [r3, #2]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d112      	bne.n	800bd92 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd6c:	7bbb      	ldrb	r3, [r7, #14]
 800bd6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d004      	beq.n	800bd80 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd76:	7bbb      	ldrb	r3, [r7, #14]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f003 fd2d 	bl	800f7da <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 fc9a 	bl	800c6ba <USBD_CtlSendStatus>
              }
              break;
 800bd86:	e004      	b.n	800bd92 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bd88:	6839      	ldr	r1, [r7, #0]
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 fbcd 	bl	800c52a <USBD_CtlError>
              break;
 800bd90:	e000      	b.n	800bd94 <USBD_StdEPReq+0x158>
              break;
 800bd92:	bf00      	nop
          }
          break;
 800bd94:	e0aa      	b.n	800beec <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d002      	beq.n	800bda6 <USBD_StdEPReq+0x16a>
 800bda0:	2b03      	cmp	r3, #3
 800bda2:	d032      	beq.n	800be0a <USBD_StdEPReq+0x1ce>
 800bda4:	e097      	b.n	800bed6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bda6:	7bbb      	ldrb	r3, [r7, #14]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d007      	beq.n	800bdbc <USBD_StdEPReq+0x180>
 800bdac:	7bbb      	ldrb	r3, [r7, #14]
 800bdae:	2b80      	cmp	r3, #128	; 0x80
 800bdb0:	d004      	beq.n	800bdbc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bdb2:	6839      	ldr	r1, [r7, #0]
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 fbb8 	bl	800c52a <USBD_CtlError>
                break;
 800bdba:	e091      	b.n	800bee0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	da0b      	bge.n	800bddc <USBD_StdEPReq+0x1a0>
 800bdc4:	7bbb      	ldrb	r3, [r7, #14]
 800bdc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdca:	4613      	mov	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	3310      	adds	r3, #16
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	3304      	adds	r3, #4
 800bdda:	e00b      	b.n	800bdf4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
 800bdde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bde2:	4613      	mov	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4413      	add	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2202      	movs	r2, #2
 800be00:	4619      	mov	r1, r3
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fbfb 	bl	800c5fe <USBD_CtlSendData>
              break;
 800be08:	e06a      	b.n	800bee0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800be0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	da11      	bge.n	800be36 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be12:	7bbb      	ldrb	r3, [r7, #14]
 800be14:	f003 020f 	and.w	r2, r3, #15
 800be18:	6879      	ldr	r1, [r7, #4]
 800be1a:	4613      	mov	r3, r2
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	4413      	add	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	440b      	add	r3, r1
 800be24:	3318      	adds	r3, #24
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d117      	bne.n	800be5c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fb7b 	bl	800c52a <USBD_CtlError>
                  break;
 800be34:	e054      	b.n	800bee0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be36:	7bbb      	ldrb	r3, [r7, #14]
 800be38:	f003 020f 	and.w	r2, r3, #15
 800be3c:	6879      	ldr	r1, [r7, #4]
 800be3e:	4613      	mov	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	440b      	add	r3, r1
 800be48:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d104      	bne.n	800be5c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 fb68 	bl	800c52a <USBD_CtlError>
                  break;
 800be5a:	e041      	b.n	800bee0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be60:	2b00      	cmp	r3, #0
 800be62:	da0b      	bge.n	800be7c <USBD_StdEPReq+0x240>
 800be64:	7bbb      	ldrb	r3, [r7, #14]
 800be66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be6a:	4613      	mov	r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	3310      	adds	r3, #16
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	4413      	add	r3, r2
 800be78:	3304      	adds	r3, #4
 800be7a:	e00b      	b.n	800be94 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be7c:	7bbb      	ldrb	r3, [r7, #14]
 800be7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be82:	4613      	mov	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4413      	add	r3, r2
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	4413      	add	r3, r2
 800be92:	3304      	adds	r3, #4
 800be94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be96:	7bbb      	ldrb	r3, [r7, #14]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d002      	beq.n	800bea2 <USBD_StdEPReq+0x266>
 800be9c:	7bbb      	ldrb	r3, [r7, #14]
 800be9e:	2b80      	cmp	r3, #128	; 0x80
 800bea0:	d103      	bne.n	800beaa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	2200      	movs	r2, #0
 800bea6:	601a      	str	r2, [r3, #0]
 800bea8:	e00e      	b.n	800bec8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800beaa:	7bbb      	ldrb	r3, [r7, #14]
 800beac:	4619      	mov	r1, r3
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f003 fcb2 	bl	800f818 <USBD_LL_IsStallEP>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d003      	beq.n	800bec2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	2201      	movs	r2, #1
 800bebe:	601a      	str	r2, [r3, #0]
 800bec0:	e002      	b.n	800bec8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	2200      	movs	r2, #0
 800bec6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	2202      	movs	r2, #2
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fb95 	bl	800c5fe <USBD_CtlSendData>
              break;
 800bed4:	e004      	b.n	800bee0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fb26 	bl	800c52a <USBD_CtlError>
              break;
 800bede:	bf00      	nop
          }
          break;
 800bee0:	e004      	b.n	800beec <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fb20 	bl	800c52a <USBD_CtlError>
          break;
 800beea:	bf00      	nop
      }
      break;
 800beec:	e004      	b.n	800bef8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800beee:	6839      	ldr	r1, [r7, #0]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 fb1a 	bl	800c52a <USBD_CtlError>
      break;
 800bef6:	bf00      	nop
  }

  return ret;
 800bef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
	...

0800bf04 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bf12:	2300      	movs	r3, #0
 800bf14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf16:	2300      	movs	r3, #0
 800bf18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	885b      	ldrh	r3, [r3, #2]
 800bf1e:	0a1b      	lsrs	r3, r3, #8
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	3b01      	subs	r3, #1
 800bf24:	2b06      	cmp	r3, #6
 800bf26:	f200 8128 	bhi.w	800c17a <USBD_GetDescriptor+0x276>
 800bf2a:	a201      	add	r2, pc, #4	; (adr r2, 800bf30 <USBD_GetDescriptor+0x2c>)
 800bf2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf30:	0800bf4d 	.word	0x0800bf4d
 800bf34:	0800bf65 	.word	0x0800bf65
 800bf38:	0800bfa5 	.word	0x0800bfa5
 800bf3c:	0800c17b 	.word	0x0800c17b
 800bf40:	0800c17b 	.word	0x0800c17b
 800bf44:	0800c11b 	.word	0x0800c11b
 800bf48:	0800c147 	.word	0x0800c147
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	7c12      	ldrb	r2, [r2, #16]
 800bf58:	f107 0108 	add.w	r1, r7, #8
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	4798      	blx	r3
 800bf60:	60f8      	str	r0, [r7, #12]
      break;
 800bf62:	e112      	b.n	800c18a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	7c1b      	ldrb	r3, [r3, #16]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d10d      	bne.n	800bf88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf74:	f107 0208 	add.w	r2, r7, #8
 800bf78:	4610      	mov	r0, r2
 800bf7a:	4798      	blx	r3
 800bf7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	3301      	adds	r3, #1
 800bf82:	2202      	movs	r2, #2
 800bf84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bf86:	e100      	b.n	800c18a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf90:	f107 0208 	add.w	r2, r7, #8
 800bf94:	4610      	mov	r0, r2
 800bf96:	4798      	blx	r3
 800bf98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	2202      	movs	r2, #2
 800bfa0:	701a      	strb	r2, [r3, #0]
      break;
 800bfa2:	e0f2      	b.n	800c18a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	885b      	ldrh	r3, [r3, #2]
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	2b05      	cmp	r3, #5
 800bfac:	f200 80ac 	bhi.w	800c108 <USBD_GetDescriptor+0x204>
 800bfb0:	a201      	add	r2, pc, #4	; (adr r2, 800bfb8 <USBD_GetDescriptor+0xb4>)
 800bfb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb6:	bf00      	nop
 800bfb8:	0800bfd1 	.word	0x0800bfd1
 800bfbc:	0800c005 	.word	0x0800c005
 800bfc0:	0800c039 	.word	0x0800c039
 800bfc4:	0800c06d 	.word	0x0800c06d
 800bfc8:	0800c0a1 	.word	0x0800c0a1
 800bfcc:	0800c0d5 	.word	0x0800c0d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00b      	beq.n	800bff4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	7c12      	ldrb	r2, [r2, #16]
 800bfe8:	f107 0108 	add.w	r1, r7, #8
 800bfec:	4610      	mov	r0, r2
 800bfee:	4798      	blx	r3
 800bff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bff2:	e091      	b.n	800c118 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fa97 	bl	800c52a <USBD_CtlError>
            err++;
 800bffc:	7afb      	ldrb	r3, [r7, #11]
 800bffe:	3301      	adds	r3, #1
 800c000:	72fb      	strb	r3, [r7, #11]
          break;
 800c002:	e089      	b.n	800c118 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00b      	beq.n	800c028 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	7c12      	ldrb	r2, [r2, #16]
 800c01c:	f107 0108 	add.w	r1, r7, #8
 800c020:	4610      	mov	r0, r2
 800c022:	4798      	blx	r3
 800c024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c026:	e077      	b.n	800c118 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c028:	6839      	ldr	r1, [r7, #0]
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 fa7d 	bl	800c52a <USBD_CtlError>
            err++;
 800c030:	7afb      	ldrb	r3, [r7, #11]
 800c032:	3301      	adds	r3, #1
 800c034:	72fb      	strb	r3, [r7, #11]
          break;
 800c036:	e06f      	b.n	800c118 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00b      	beq.n	800c05c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	7c12      	ldrb	r2, [r2, #16]
 800c050:	f107 0108 	add.w	r1, r7, #8
 800c054:	4610      	mov	r0, r2
 800c056:	4798      	blx	r3
 800c058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c05a:	e05d      	b.n	800c118 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c05c:	6839      	ldr	r1, [r7, #0]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fa63 	bl	800c52a <USBD_CtlError>
            err++;
 800c064:	7afb      	ldrb	r3, [r7, #11]
 800c066:	3301      	adds	r3, #1
 800c068:	72fb      	strb	r3, [r7, #11]
          break;
 800c06a:	e055      	b.n	800c118 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c072:	691b      	ldr	r3, [r3, #16]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00b      	beq.n	800c090 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c07e:	691b      	ldr	r3, [r3, #16]
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	7c12      	ldrb	r2, [r2, #16]
 800c084:	f107 0108 	add.w	r1, r7, #8
 800c088:	4610      	mov	r0, r2
 800c08a:	4798      	blx	r3
 800c08c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c08e:	e043      	b.n	800c118 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fa49 	bl	800c52a <USBD_CtlError>
            err++;
 800c098:	7afb      	ldrb	r3, [r7, #11]
 800c09a:	3301      	adds	r3, #1
 800c09c:	72fb      	strb	r3, [r7, #11]
          break;
 800c09e:	e03b      	b.n	800c118 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0a6:	695b      	ldr	r3, [r3, #20]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00b      	beq.n	800c0c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0b2:	695b      	ldr	r3, [r3, #20]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	7c12      	ldrb	r2, [r2, #16]
 800c0b8:	f107 0108 	add.w	r1, r7, #8
 800c0bc:	4610      	mov	r0, r2
 800c0be:	4798      	blx	r3
 800c0c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0c2:	e029      	b.n	800c118 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fa2f 	bl	800c52a <USBD_CtlError>
            err++;
 800c0cc:	7afb      	ldrb	r3, [r7, #11]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	72fb      	strb	r3, [r7, #11]
          break;
 800c0d2:	e021      	b.n	800c118 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d00b      	beq.n	800c0f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0e6:	699b      	ldr	r3, [r3, #24]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	7c12      	ldrb	r2, [r2, #16]
 800c0ec:	f107 0108 	add.w	r1, r7, #8
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	4798      	blx	r3
 800c0f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0f6:	e00f      	b.n	800c118 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0f8:	6839      	ldr	r1, [r7, #0]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 fa15 	bl	800c52a <USBD_CtlError>
            err++;
 800c100:	7afb      	ldrb	r3, [r7, #11]
 800c102:	3301      	adds	r3, #1
 800c104:	72fb      	strb	r3, [r7, #11]
          break;
 800c106:	e007      	b.n	800c118 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 fa0d 	bl	800c52a <USBD_CtlError>
          err++;
 800c110:	7afb      	ldrb	r3, [r7, #11]
 800c112:	3301      	adds	r3, #1
 800c114:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c116:	e038      	b.n	800c18a <USBD_GetDescriptor+0x286>
 800c118:	e037      	b.n	800c18a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	7c1b      	ldrb	r3, [r3, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d109      	bne.n	800c136 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c12a:	f107 0208 	add.w	r2, r7, #8
 800c12e:	4610      	mov	r0, r2
 800c130:	4798      	blx	r3
 800c132:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c134:	e029      	b.n	800c18a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 f9f6 	bl	800c52a <USBD_CtlError>
        err++;
 800c13e:	7afb      	ldrb	r3, [r7, #11]
 800c140:	3301      	adds	r3, #1
 800c142:	72fb      	strb	r3, [r7, #11]
      break;
 800c144:	e021      	b.n	800c18a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	7c1b      	ldrb	r3, [r3, #16]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10d      	bne.n	800c16a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c156:	f107 0208 	add.w	r2, r7, #8
 800c15a:	4610      	mov	r0, r2
 800c15c:	4798      	blx	r3
 800c15e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	3301      	adds	r3, #1
 800c164:	2207      	movs	r2, #7
 800c166:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c168:	e00f      	b.n	800c18a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c16a:	6839      	ldr	r1, [r7, #0]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 f9dc 	bl	800c52a <USBD_CtlError>
        err++;
 800c172:	7afb      	ldrb	r3, [r7, #11]
 800c174:	3301      	adds	r3, #1
 800c176:	72fb      	strb	r3, [r7, #11]
      break;
 800c178:	e007      	b.n	800c18a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 f9d4 	bl	800c52a <USBD_CtlError>
      err++;
 800c182:	7afb      	ldrb	r3, [r7, #11]
 800c184:	3301      	adds	r3, #1
 800c186:	72fb      	strb	r3, [r7, #11]
      break;
 800c188:	bf00      	nop
  }

  if (err != 0U)
 800c18a:	7afb      	ldrb	r3, [r7, #11]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d11c      	bne.n	800c1ca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c190:	893b      	ldrh	r3, [r7, #8]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d011      	beq.n	800c1ba <USBD_GetDescriptor+0x2b6>
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	88db      	ldrh	r3, [r3, #6]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00d      	beq.n	800c1ba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	88da      	ldrh	r2, [r3, #6]
 800c1a2:	893b      	ldrh	r3, [r7, #8]
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	bf28      	it	cs
 800c1a8:	4613      	movcs	r3, r2
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c1ae:	893b      	ldrh	r3, [r7, #8]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	68f9      	ldr	r1, [r7, #12]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fa22 	bl	800c5fe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	88db      	ldrh	r3, [r3, #6]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d104      	bne.n	800c1cc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fa79 	bl	800c6ba <USBD_CtlSendStatus>
 800c1c8:	e000      	b.n	800c1cc <USBD_GetDescriptor+0x2c8>
    return;
 800c1ca:	bf00      	nop
    }
  }
}
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop

0800c1d4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	889b      	ldrh	r3, [r3, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d130      	bne.n	800c248 <USBD_SetAddress+0x74>
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	88db      	ldrh	r3, [r3, #6]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d12c      	bne.n	800c248 <USBD_SetAddress+0x74>
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	885b      	ldrh	r3, [r3, #2]
 800c1f2:	2b7f      	cmp	r3, #127	; 0x7f
 800c1f4:	d828      	bhi.n	800c248 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	885b      	ldrh	r3, [r3, #2]
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c200:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c208:	2b03      	cmp	r3, #3
 800c20a:	d104      	bne.n	800c216 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c20c:	6839      	ldr	r1, [r7, #0]
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 f98b 	bl	800c52a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c214:	e01d      	b.n	800c252 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	7bfa      	ldrb	r2, [r7, #15]
 800c21a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
 800c220:	4619      	mov	r1, r3
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f003 fb24 	bl	800f870 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fa46 	bl	800c6ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c22e:	7bfb      	ldrb	r3, [r7, #15]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d004      	beq.n	800c23e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2202      	movs	r2, #2
 800c238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c23c:	e009      	b.n	800c252 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2201      	movs	r2, #1
 800c242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c246:	e004      	b.n	800c252 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c248:	6839      	ldr	r1, [r7, #0]
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 f96d 	bl	800c52a <USBD_CtlError>
  }
}
 800c250:	bf00      	nop
 800c252:	bf00      	nop
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
	...

0800c25c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	885b      	ldrh	r3, [r3, #2]
 800c26a:	b2da      	uxtb	r2, r3
 800c26c:	4b41      	ldr	r3, [pc, #260]	; (800c374 <USBD_SetConfig+0x118>)
 800c26e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c270:	4b40      	ldr	r3, [pc, #256]	; (800c374 <USBD_SetConfig+0x118>)
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	2b01      	cmp	r3, #1
 800c276:	d904      	bls.n	800c282 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c278:	6839      	ldr	r1, [r7, #0]
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f955 	bl	800c52a <USBD_CtlError>
 800c280:	e075      	b.n	800c36e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c288:	2b02      	cmp	r3, #2
 800c28a:	d002      	beq.n	800c292 <USBD_SetConfig+0x36>
 800c28c:	2b03      	cmp	r3, #3
 800c28e:	d023      	beq.n	800c2d8 <USBD_SetConfig+0x7c>
 800c290:	e062      	b.n	800c358 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c292:	4b38      	ldr	r3, [pc, #224]	; (800c374 <USBD_SetConfig+0x118>)
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d01a      	beq.n	800c2d0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c29a:	4b36      	ldr	r3, [pc, #216]	; (800c374 <USBD_SetConfig+0x118>)
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	461a      	mov	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2203      	movs	r2, #3
 800c2a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c2ac:	4b31      	ldr	r3, [pc, #196]	; (800c374 <USBD_SetConfig+0x118>)
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f7ff f9e8 	bl	800b688 <USBD_SetClassConfig>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d104      	bne.n	800c2c8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 f932 	bl	800c52a <USBD_CtlError>
            return;
 800c2c6:	e052      	b.n	800c36e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 f9f6 	bl	800c6ba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c2ce:	e04e      	b.n	800c36e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f9f2 	bl	800c6ba <USBD_CtlSendStatus>
        break;
 800c2d6:	e04a      	b.n	800c36e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c2d8:	4b26      	ldr	r3, [pc, #152]	; (800c374 <USBD_SetConfig+0x118>)
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d112      	bne.n	800c306 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2202      	movs	r2, #2
 800c2e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c2e8:	4b22      	ldr	r3, [pc, #136]	; (800c374 <USBD_SetConfig+0x118>)
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c2f2:	4b20      	ldr	r3, [pc, #128]	; (800c374 <USBD_SetConfig+0x118>)
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f7ff f9e4 	bl	800b6c6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f9db 	bl	800c6ba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c304:	e033      	b.n	800c36e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c306:	4b1b      	ldr	r3, [pc, #108]	; (800c374 <USBD_SetConfig+0x118>)
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	461a      	mov	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	429a      	cmp	r2, r3
 800c312:	d01d      	beq.n	800c350 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f7ff f9d2 	bl	800b6c6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c322:	4b14      	ldr	r3, [pc, #80]	; (800c374 <USBD_SetConfig+0x118>)
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	461a      	mov	r2, r3
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c32c:	4b11      	ldr	r3, [pc, #68]	; (800c374 <USBD_SetConfig+0x118>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	4619      	mov	r1, r3
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f7ff f9a8 	bl	800b688 <USBD_SetClassConfig>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	d104      	bne.n	800c348 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 f8f2 	bl	800c52a <USBD_CtlError>
            return;
 800c346:	e012      	b.n	800c36e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 f9b6 	bl	800c6ba <USBD_CtlSendStatus>
        break;
 800c34e:	e00e      	b.n	800c36e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 f9b2 	bl	800c6ba <USBD_CtlSendStatus>
        break;
 800c356:	e00a      	b.n	800c36e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c358:	6839      	ldr	r1, [r7, #0]
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 f8e5 	bl	800c52a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c360:	4b04      	ldr	r3, [pc, #16]	; (800c374 <USBD_SetConfig+0x118>)
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	4619      	mov	r1, r3
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7ff f9ad 	bl	800b6c6 <USBD_ClrClassConfig>
        break;
 800c36c:	bf00      	nop
    }
  }
}
 800c36e:	3708      	adds	r7, #8
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	200004c4 	.word	0x200004c4

0800c378 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	88db      	ldrh	r3, [r3, #6]
 800c386:	2b01      	cmp	r3, #1
 800c388:	d004      	beq.n	800c394 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 f8cc 	bl	800c52a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c392:	e022      	b.n	800c3da <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c39a:	2b02      	cmp	r3, #2
 800c39c:	dc02      	bgt.n	800c3a4 <USBD_GetConfig+0x2c>
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	dc03      	bgt.n	800c3aa <USBD_GetConfig+0x32>
 800c3a2:	e015      	b.n	800c3d0 <USBD_GetConfig+0x58>
 800c3a4:	2b03      	cmp	r3, #3
 800c3a6:	d00b      	beq.n	800c3c0 <USBD_GetConfig+0x48>
 800c3a8:	e012      	b.n	800c3d0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	3308      	adds	r3, #8
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 f920 	bl	800c5fe <USBD_CtlSendData>
        break;
 800c3be:	e00c      	b.n	800c3da <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 f918 	bl	800c5fe <USBD_CtlSendData>
        break;
 800c3ce:	e004      	b.n	800c3da <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c3d0:	6839      	ldr	r1, [r7, #0]
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 f8a9 	bl	800c52a <USBD_CtlError>
        break;
 800c3d8:	bf00      	nop
}
 800c3da:	bf00      	nop
 800c3dc:	3708      	adds	r7, #8
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b082      	sub	sp, #8
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	2b02      	cmp	r3, #2
 800c3f6:	d81e      	bhi.n	800c436 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	88db      	ldrh	r3, [r3, #6]
 800c3fc:	2b02      	cmp	r3, #2
 800c3fe:	d004      	beq.n	800c40a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c400:	6839      	ldr	r1, [r7, #0]
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 f891 	bl	800c52a <USBD_CtlError>
        break;
 800c408:	e01a      	b.n	800c440 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c416:	2b00      	cmp	r3, #0
 800c418:	d005      	beq.n	800c426 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	f043 0202 	orr.w	r2, r3, #2
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	330c      	adds	r3, #12
 800c42a:	2202      	movs	r2, #2
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f8e5 	bl	800c5fe <USBD_CtlSendData>
      break;
 800c434:	e004      	b.n	800c440 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c436:	6839      	ldr	r1, [r7, #0]
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 f876 	bl	800c52a <USBD_CtlError>
      break;
 800c43e:	bf00      	nop
  }
}
 800c440:	bf00      	nop
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	885b      	ldrh	r3, [r3, #2]
 800c456:	2b01      	cmp	r3, #1
 800c458:	d106      	bne.n	800c468 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2201      	movs	r2, #1
 800c45e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 f929 	bl	800c6ba <USBD_CtlSendStatus>
  }
}
 800c468:	bf00      	nop
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c480:	3b01      	subs	r3, #1
 800c482:	2b02      	cmp	r3, #2
 800c484:	d80b      	bhi.n	800c49e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	885b      	ldrh	r3, [r3, #2]
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d10c      	bne.n	800c4a8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 f90f 	bl	800c6ba <USBD_CtlSendStatus>
      }
      break;
 800c49c:	e004      	b.n	800c4a8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c49e:	6839      	ldr	r1, [r7, #0]
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 f842 	bl	800c52a <USBD_CtlError>
      break;
 800c4a6:	e000      	b.n	800c4aa <USBD_ClrFeature+0x3a>
      break;
 800c4a8:	bf00      	nop
  }
}
 800c4aa:	bf00      	nop
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c4b2:	b480      	push	{r7}
 800c4b4:	b083      	sub	sp, #12
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	781a      	ldrb	r2, [r3, #0]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	785a      	ldrb	r2, [r3, #1]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	3302      	adds	r3, #2
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	3303      	adds	r3, #3
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	021b      	lsls	r3, r3, #8
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	4413      	add	r3, r2
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	3305      	adds	r3, #5
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	021b      	lsls	r3, r3, #8
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	4413      	add	r3, r2
 800c4fe:	b29a      	uxth	r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	3306      	adds	r3, #6
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	3307      	adds	r3, #7
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	b29b      	uxth	r3, r3
 800c514:	021b      	lsls	r3, r3, #8
 800c516:	b29b      	uxth	r3, r3
 800c518:	4413      	add	r3, r2
 800c51a:	b29a      	uxth	r2, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	80da      	strh	r2, [r3, #6]

}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	bc80      	pop	{r7}
 800c528:	4770      	bx	lr

0800c52a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b082      	sub	sp, #8
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
 800c532:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c534:	2180      	movs	r1, #128	; 0x80
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f003 f930 	bl	800f79c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c53c:	2100      	movs	r1, #0
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f003 f92c 	bl	800f79c <USBD_LL_StallEP>
}
 800c544:	bf00      	nop
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b086      	sub	sp, #24
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c558:	2300      	movs	r3, #0
 800c55a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d032      	beq.n	800c5c8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f000 f834 	bl	800c5d0 <USBD_GetLen>
 800c568:	4603      	mov	r3, r0
 800c56a:	3301      	adds	r3, #1
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	005b      	lsls	r3, r3, #1
 800c570:	b29a      	uxth	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c576:	7dfb      	ldrb	r3, [r7, #23]
 800c578:	1c5a      	adds	r2, r3, #1
 800c57a:	75fa      	strb	r2, [r7, #23]
 800c57c:	461a      	mov	r2, r3
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	4413      	add	r3, r2
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	7812      	ldrb	r2, [r2, #0]
 800c586:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c588:	7dfb      	ldrb	r3, [r7, #23]
 800c58a:	1c5a      	adds	r2, r3, #1
 800c58c:	75fa      	strb	r2, [r7, #23]
 800c58e:	461a      	mov	r2, r3
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	4413      	add	r3, r2
 800c594:	2203      	movs	r2, #3
 800c596:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c598:	e012      	b.n	800c5c0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	1c5a      	adds	r2, r3, #1
 800c59e:	60fa      	str	r2, [r7, #12]
 800c5a0:	7dfa      	ldrb	r2, [r7, #23]
 800c5a2:	1c51      	adds	r1, r2, #1
 800c5a4:	75f9      	strb	r1, [r7, #23]
 800c5a6:	4611      	mov	r1, r2
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	440a      	add	r2, r1
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c5b0:	7dfb      	ldrb	r3, [r7, #23]
 800c5b2:	1c5a      	adds	r2, r3, #1
 800c5b4:	75fa      	strb	r2, [r7, #23]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	2200      	movs	r2, #0
 800c5be:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d1e8      	bne.n	800c59a <USBD_GetString+0x4e>
    }
  }
}
 800c5c8:	bf00      	nop
 800c5ca:	3718      	adds	r7, #24
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c5dc:	e005      	b.n	800c5ea <USBD_GetLen+0x1a>
  {
    len++;
 800c5de:	7bfb      	ldrb	r3, [r7, #15]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1f5      	bne.n	800c5de <USBD_GetLen+0xe>
  }

  return len;
 800c5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bc80      	pop	{r7}
 800c5fc:	4770      	bx	lr

0800c5fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	60f8      	str	r0, [r7, #12]
 800c606:	60b9      	str	r1, [r7, #8]
 800c608:	4613      	mov	r3, r2
 800c60a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2202      	movs	r2, #2
 800c610:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c614:	88fa      	ldrh	r2, [r7, #6]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c61a:	88fa      	ldrh	r2, [r7, #6]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c620:	88fb      	ldrh	r3, [r7, #6]
 800c622:	68ba      	ldr	r2, [r7, #8]
 800c624:	2100      	movs	r1, #0
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f003 f941 	bl	800f8ae <USBD_LL_Transmit>

  return USBD_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b084      	sub	sp, #16
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	60f8      	str	r0, [r7, #12]
 800c63e:	60b9      	str	r1, [r7, #8]
 800c640:	4613      	mov	r3, r2
 800c642:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c644:	88fb      	ldrh	r3, [r7, #6]
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	2100      	movs	r1, #0
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f003 f92f 	bl	800f8ae <USBD_LL_Transmit>

  return USBD_OK;
 800c650:	2300      	movs	r3, #0
}
 800c652:	4618      	mov	r0, r3
 800c654:	3710      	adds	r7, #16
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}

0800c65a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b084      	sub	sp, #16
 800c65e:	af00      	add	r7, sp, #0
 800c660:	60f8      	str	r0, [r7, #12]
 800c662:	60b9      	str	r1, [r7, #8]
 800c664:	4613      	mov	r3, r2
 800c666:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2203      	movs	r2, #3
 800c66c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c670:	88fa      	ldrh	r2, [r7, #6]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c678:	88fa      	ldrh	r2, [r7, #6]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c680:	88fb      	ldrh	r3, [r7, #6]
 800c682:	68ba      	ldr	r2, [r7, #8]
 800c684:	2100      	movs	r1, #0
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f003 f934 	bl	800f8f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b084      	sub	sp, #16
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	60f8      	str	r0, [r7, #12]
 800c69e:	60b9      	str	r1, [r7, #8]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c6a4:	88fb      	ldrh	r3, [r7, #6]
 800c6a6:	68ba      	ldr	r2, [r7, #8]
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f003 f922 	bl	800f8f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b082      	sub	sp, #8
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2204      	movs	r2, #4
 800c6c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f003 f8ec 	bl	800f8ae <USBD_LL_Transmit>

  return USBD_OK;
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2205      	movs	r2, #5
 800c6ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f003 f8fc 	bl	800f8f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6fc:	2300      	movs	r3, #0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
	...

0800c708 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c70e:	f3ef 8305 	mrs	r3, IPSR
 800c712:	60bb      	str	r3, [r7, #8]
  return(result);
 800c714:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10f      	bne.n	800c73a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c71a:	f3ef 8310 	mrs	r3, PRIMASK
 800c71e:	607b      	str	r3, [r7, #4]
  return(result);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d109      	bne.n	800c73a <osKernelInitialize+0x32>
 800c726:	4b10      	ldr	r3, [pc, #64]	; (800c768 <osKernelInitialize+0x60>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2b02      	cmp	r3, #2
 800c72c:	d109      	bne.n	800c742 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c72e:	f3ef 8311 	mrs	r3, BASEPRI
 800c732:	603b      	str	r3, [r7, #0]
  return(result);
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d003      	beq.n	800c742 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800c73a:	f06f 0305 	mvn.w	r3, #5
 800c73e:	60fb      	str	r3, [r7, #12]
 800c740:	e00c      	b.n	800c75c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c742:	4b09      	ldr	r3, [pc, #36]	; (800c768 <osKernelInitialize+0x60>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d105      	bne.n	800c756 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800c74a:	4b07      	ldr	r3, [pc, #28]	; (800c768 <osKernelInitialize+0x60>)
 800c74c:	2201      	movs	r2, #1
 800c74e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c750:	2300      	movs	r3, #0
 800c752:	60fb      	str	r3, [r7, #12]
 800c754:	e002      	b.n	800c75c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800c756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c75a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c75c:	68fb      	ldr	r3, [r7, #12]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3714      	adds	r7, #20
 800c762:	46bd      	mov	sp, r7
 800c764:	bc80      	pop	{r7}
 800c766:	4770      	bx	lr
 800c768:	200004c8 	.word	0x200004c8

0800c76c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c772:	f3ef 8305 	mrs	r3, IPSR
 800c776:	60bb      	str	r3, [r7, #8]
  return(result);
 800c778:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d10f      	bne.n	800c79e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c77e:	f3ef 8310 	mrs	r3, PRIMASK
 800c782:	607b      	str	r3, [r7, #4]
  return(result);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d109      	bne.n	800c79e <osKernelStart+0x32>
 800c78a:	4b11      	ldr	r3, [pc, #68]	; (800c7d0 <osKernelStart+0x64>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b02      	cmp	r3, #2
 800c790:	d109      	bne.n	800c7a6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c792:	f3ef 8311 	mrs	r3, BASEPRI
 800c796:	603b      	str	r3, [r7, #0]
  return(result);
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d003      	beq.n	800c7a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800c79e:	f06f 0305 	mvn.w	r3, #5
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	e00e      	b.n	800c7c4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800c7a6:	4b0a      	ldr	r3, [pc, #40]	; (800c7d0 <osKernelStart+0x64>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d107      	bne.n	800c7be <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800c7ae:	4b08      	ldr	r3, [pc, #32]	; (800c7d0 <osKernelStart+0x64>)
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800c7b4:	f001 f890 	bl	800d8d8 <vTaskStartScheduler>
      stat = osOK;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	60fb      	str	r3, [r7, #12]
 800c7bc:	e002      	b.n	800c7c4 <osKernelStart+0x58>
    } else {
      stat = osError;
 800c7be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	200004c8 	.word	0x200004c8

0800c7d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b092      	sub	sp, #72	; 0x48
 800c7d8:	af04      	add	r7, sp, #16
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7e4:	f3ef 8305 	mrs	r3, IPSR
 800c7e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	f040 8094 	bne.w	800c91a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7f2:	f3ef 8310 	mrs	r3, PRIMASK
 800c7f6:	623b      	str	r3, [r7, #32]
  return(result);
 800c7f8:	6a3b      	ldr	r3, [r7, #32]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f040 808d 	bne.w	800c91a <osThreadNew+0x146>
 800c800:	4b48      	ldr	r3, [pc, #288]	; (800c924 <osThreadNew+0x150>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b02      	cmp	r3, #2
 800c806:	d106      	bne.n	800c816 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c808:	f3ef 8311 	mrs	r3, BASEPRI
 800c80c:	61fb      	str	r3, [r7, #28]
  return(result);
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	2b00      	cmp	r3, #0
 800c812:	f040 8082 	bne.w	800c91a <osThreadNew+0x146>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d07e      	beq.n	800c91a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800c81c:	2380      	movs	r3, #128	; 0x80
 800c81e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800c820:	2318      	movs	r3, #24
 800c822:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800c824:	2300      	movs	r3, #0
 800c826:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800c828:	f107 031b 	add.w	r3, r7, #27
 800c82c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800c82e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c832:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d045      	beq.n	800c8c6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d002      	beq.n	800c848 <osThreadNew+0x74>
        name = attr->name;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	699b      	ldr	r3, [r3, #24]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d002      	beq.n	800c856 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	699b      	ldr	r3, [r3, #24]
 800c854:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d008      	beq.n	800c86e <osThreadNew+0x9a>
 800c85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85e:	2b38      	cmp	r3, #56	; 0x38
 800c860:	d805      	bhi.n	800c86e <osThreadNew+0x9a>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	f003 0301 	and.w	r3, r3, #1
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d001      	beq.n	800c872 <osThreadNew+0x9e>
        return (NULL);
 800c86e:	2300      	movs	r3, #0
 800c870:	e054      	b.n	800c91c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	695b      	ldr	r3, [r3, #20]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d003      	beq.n	800c882 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	695b      	ldr	r3, [r3, #20]
 800c87e:	089b      	lsrs	r3, r3, #2
 800c880:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00e      	beq.n	800c8a8 <osThreadNew+0xd4>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	68db      	ldr	r3, [r3, #12]
 800c88e:	2bbb      	cmp	r3, #187	; 0xbb
 800c890:	d90a      	bls.n	800c8a8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c896:	2b00      	cmp	r3, #0
 800c898:	d006      	beq.n	800c8a8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	695b      	ldr	r3, [r3, #20]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d002      	beq.n	800c8a8 <osThreadNew+0xd4>
        mem = 1;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8a6:	e010      	b.n	800c8ca <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10c      	bne.n	800c8ca <osThreadNew+0xf6>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d108      	bne.n	800c8ca <osThreadNew+0xf6>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	691b      	ldr	r3, [r3, #16]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d104      	bne.n	800c8ca <osThreadNew+0xf6>
          mem = 0;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8c4:	e001      	b.n	800c8ca <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800c8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d110      	bne.n	800c8f2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c8d8:	9202      	str	r2, [sp, #8]
 800c8da:	9301      	str	r3, [sp, #4]
 800c8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f000 fe12 	bl	800d510 <xTaskCreateStatic>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	617b      	str	r3, [r7, #20]
 800c8f0:	e013      	b.n	800c91a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800c8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d110      	bne.n	800c91a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	f107 0314 	add.w	r3, r7, #20
 800c900:	9301      	str	r3, [sp, #4]
 800c902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c904:	9300      	str	r3, [sp, #0]
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	f000 fe5c 	bl	800d5c8 <xTaskCreate>
 800c910:	4603      	mov	r3, r0
 800c912:	2b01      	cmp	r3, #1
 800c914:	d001      	beq.n	800c91a <osThreadNew+0x146>
          hTask = NULL;
 800c916:	2300      	movs	r3, #0
 800c918:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c91a:	697b      	ldr	r3, [r7, #20]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3738      	adds	r7, #56	; 0x38
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	200004c8 	.word	0x200004c8

0800c928 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c930:	f3ef 8305 	mrs	r3, IPSR
 800c934:	613b      	str	r3, [r7, #16]
  return(result);
 800c936:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10f      	bne.n	800c95c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c93c:	f3ef 8310 	mrs	r3, PRIMASK
 800c940:	60fb      	str	r3, [r7, #12]
  return(result);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d109      	bne.n	800c95c <osDelay+0x34>
 800c948:	4b0d      	ldr	r3, [pc, #52]	; (800c980 <osDelay+0x58>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d109      	bne.n	800c964 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c950:	f3ef 8311 	mrs	r3, BASEPRI
 800c954:	60bb      	str	r3, [r7, #8]
  return(result);
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d003      	beq.n	800c964 <osDelay+0x3c>
    stat = osErrorISR;
 800c95c:	f06f 0305 	mvn.w	r3, #5
 800c960:	617b      	str	r3, [r7, #20]
 800c962:	e007      	b.n	800c974 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800c964:	2300      	movs	r3, #0
 800c966:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d002      	beq.n	800c974 <osDelay+0x4c>
      vTaskDelay(ticks);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 ff7e 	bl	800d870 <vTaskDelay>
    }
  }

  return (stat);
 800c974:	697b      	ldr	r3, [r7, #20]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3718      	adds	r7, #24
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	200004c8 	.word	0x200004c8

0800c984 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	4a06      	ldr	r2, [pc, #24]	; (800c9ac <vApplicationGetIdleTaskMemory+0x28>)
 800c994:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	4a05      	ldr	r2, [pc, #20]	; (800c9b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800c99a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2280      	movs	r2, #128	; 0x80
 800c9a0:	601a      	str	r2, [r3, #0]
}
 800c9a2:	bf00      	nop
 800c9a4:	3714      	adds	r7, #20
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bc80      	pop	{r7}
 800c9aa:	4770      	bx	lr
 800c9ac:	200004cc 	.word	0x200004cc
 800c9b0:	20000588 	.word	0x20000588

0800c9b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	4a07      	ldr	r2, [pc, #28]	; (800c9e0 <vApplicationGetTimerTaskMemory+0x2c>)
 800c9c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	4a06      	ldr	r2, [pc, #24]	; (800c9e4 <vApplicationGetTimerTaskMemory+0x30>)
 800c9ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c9d2:	601a      	str	r2, [r3, #0]
}
 800c9d4:	bf00      	nop
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bc80      	pop	{r7}
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	20000788 	.word	0x20000788
 800c9e4:	20000844 	.word	0x20000844

0800c9e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f103 0208 	add.w	r2, r3, #8
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f103 0208 	add.w	r2, r3, #8
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f103 0208 	add.w	r2, r3, #8
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bc80      	pop	{r7}
 800ca24:	4770      	bx	lr

0800ca26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca26:	b480      	push	{r7}
 800ca28:	b083      	sub	sp, #12
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2200      	movs	r2, #0
 800ca32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca34:	bf00      	nop
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bc80      	pop	{r7}
 800ca3c:	4770      	bx	lr

0800ca3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca3e:	b480      	push	{r7}
 800ca40:	b085      	sub	sp, #20
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	689a      	ldr	r2, [r3, #8]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	683a      	ldr	r2, [r7, #0]
 800ca62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	683a      	ldr	r2, [r7, #0]
 800ca68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	1c5a      	adds	r2, r3, #1
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	601a      	str	r2, [r3, #0]
}
 800ca7a:	bf00      	nop
 800ca7c:	3714      	adds	r7, #20
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bc80      	pop	{r7}
 800ca82:	4770      	bx	lr

0800ca84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca9a:	d103      	bne.n	800caa4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	691b      	ldr	r3, [r3, #16]
 800caa0:	60fb      	str	r3, [r7, #12]
 800caa2:	e00c      	b.n	800cabe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	3308      	adds	r3, #8
 800caa8:	60fb      	str	r3, [r7, #12]
 800caaa:	e002      	b.n	800cab2 <vListInsert+0x2e>
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	60fb      	str	r3, [r7, #12]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	68ba      	ldr	r2, [r7, #8]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d2f6      	bcs.n	800caac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	685a      	ldr	r2, [r3, #4]
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	683a      	ldr	r2, [r7, #0]
 800cacc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	1c5a      	adds	r2, r3, #1
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	601a      	str	r2, [r3, #0]
}
 800caea:	bf00      	nop
 800caec:	3714      	adds	r7, #20
 800caee:	46bd      	mov	sp, r7
 800caf0:	bc80      	pop	{r7}
 800caf2:	4770      	bx	lr

0800caf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	6892      	ldr	r2, [r2, #8]
 800cb0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	6852      	ldr	r2, [r2, #4]
 800cb14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d103      	bne.n	800cb28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	689a      	ldr	r2, [r3, #8]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	1e5a      	subs	r2, r3, #1
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3714      	adds	r7, #20
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bc80      	pop	{r7}
 800cb44:	4770      	bx	lr
	...

0800cb48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10a      	bne.n	800cb72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb60:	f383 8811 	msr	BASEPRI, r3
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cb6e:	bf00      	nop
 800cb70:	e7fe      	b.n	800cb70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cb72:	f001 fff3 	bl	800eb5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb7e:	68f9      	ldr	r1, [r7, #12]
 800cb80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb82:	fb01 f303 	mul.w	r3, r1, r3
 800cb86:	441a      	add	r2, r3
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba2:	3b01      	subs	r3, #1
 800cba4:	68f9      	ldr	r1, [r7, #12]
 800cba6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cba8:	fb01 f303 	mul.w	r3, r1, r3
 800cbac:	441a      	add	r2, r3
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	22ff      	movs	r2, #255	; 0xff
 800cbb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	22ff      	movs	r2, #255	; 0xff
 800cbbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d114      	bne.n	800cbf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d01a      	beq.n	800cc06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	3310      	adds	r3, #16
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f001 f91b 	bl	800de10 <xTaskRemoveFromEventList>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d012      	beq.n	800cc06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cbe0:	4b0c      	ldr	r3, [pc, #48]	; (800cc14 <xQueueGenericReset+0xcc>)
 800cbe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbe6:	601a      	str	r2, [r3, #0]
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	e009      	b.n	800cc06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	3310      	adds	r3, #16
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7ff fef6 	bl	800c9e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	3324      	adds	r3, #36	; 0x24
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7ff fef1 	bl	800c9e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc06:	f001 ffd9 	bl	800ebbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc0a:	2301      	movs	r3, #1
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3710      	adds	r7, #16
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	e000ed04 	.word	0xe000ed04

0800cc18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b08e      	sub	sp, #56	; 0x38
 800cc1c:	af02      	add	r7, sp, #8
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
 800cc24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d10a      	bne.n	800cc42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc3e:	bf00      	nop
 800cc40:	e7fe      	b.n	800cc40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d10a      	bne.n	800cc5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4c:	f383 8811 	msr	BASEPRI, r3
 800cc50:	f3bf 8f6f 	isb	sy
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc5a:	bf00      	nop
 800cc5c:	e7fe      	b.n	800cc5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d002      	beq.n	800cc6a <xQueueGenericCreateStatic+0x52>
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d001      	beq.n	800cc6e <xQueueGenericCreateStatic+0x56>
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e000      	b.n	800cc70 <xQueueGenericCreateStatic+0x58>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d10a      	bne.n	800cc8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc78:	f383 8811 	msr	BASEPRI, r3
 800cc7c:	f3bf 8f6f 	isb	sy
 800cc80:	f3bf 8f4f 	dsb	sy
 800cc84:	623b      	str	r3, [r7, #32]
}
 800cc86:	bf00      	nop
 800cc88:	e7fe      	b.n	800cc88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d102      	bne.n	800cc96 <xQueueGenericCreateStatic+0x7e>
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d101      	bne.n	800cc9a <xQueueGenericCreateStatic+0x82>
 800cc96:	2301      	movs	r3, #1
 800cc98:	e000      	b.n	800cc9c <xQueueGenericCreateStatic+0x84>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d10a      	bne.n	800ccb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	61fb      	str	r3, [r7, #28]
}
 800ccb2:	bf00      	nop
 800ccb4:	e7fe      	b.n	800ccb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ccb6:	2350      	movs	r3, #80	; 0x50
 800ccb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	2b50      	cmp	r3, #80	; 0x50
 800ccbe:	d00a      	beq.n	800ccd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	61bb      	str	r3, [r7, #24]
}
 800ccd2:	bf00      	nop
 800ccd4:	e7fe      	b.n	800ccd4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ccda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d00d      	beq.n	800ccfc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce2:	2201      	movs	r2, #1
 800cce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cce8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ccec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccee:	9300      	str	r3, [sp, #0]
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	68b9      	ldr	r1, [r7, #8]
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f000 f805 	bl	800cd06 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3730      	adds	r7, #48	; 0x30
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b084      	sub	sp, #16
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	60f8      	str	r0, [r7, #12]
 800cd0e:	60b9      	str	r1, [r7, #8]
 800cd10:	607a      	str	r2, [r7, #4]
 800cd12:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d103      	bne.n	800cd22 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd1a:	69bb      	ldr	r3, [r7, #24]
 800cd1c:	69ba      	ldr	r2, [r7, #24]
 800cd1e:	601a      	str	r2, [r3, #0]
 800cd20:	e002      	b.n	800cd28 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	68fa      	ldr	r2, [r7, #12]
 800cd2c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	68ba      	ldr	r2, [r7, #8]
 800cd32:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd34:	2101      	movs	r1, #1
 800cd36:	69b8      	ldr	r0, [r7, #24]
 800cd38:	f7ff ff06 	bl	800cb48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cd3c:	69bb      	ldr	r3, [r7, #24]
 800cd3e:	78fa      	ldrb	r2, [r7, #3]
 800cd40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd44:	bf00      	nop
 800cd46:	3710      	adds	r7, #16
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b08e      	sub	sp, #56	; 0x38
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
 800cd58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10a      	bne.n	800cd7e <xQueueGenericSend+0x32>
	__asm volatile
 800cd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6c:	f383 8811 	msr	BASEPRI, r3
 800cd70:	f3bf 8f6f 	isb	sy
 800cd74:	f3bf 8f4f 	dsb	sy
 800cd78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd7a:	bf00      	nop
 800cd7c:	e7fe      	b.n	800cd7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d103      	bne.n	800cd8c <xQueueGenericSend+0x40>
 800cd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d101      	bne.n	800cd90 <xQueueGenericSend+0x44>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e000      	b.n	800cd92 <xQueueGenericSend+0x46>
 800cd90:	2300      	movs	r3, #0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d10a      	bne.n	800cdac <xQueueGenericSend+0x60>
	__asm volatile
 800cd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9a:	f383 8811 	msr	BASEPRI, r3
 800cd9e:	f3bf 8f6f 	isb	sy
 800cda2:	f3bf 8f4f 	dsb	sy
 800cda6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cda8:	bf00      	nop
 800cdaa:	e7fe      	b.n	800cdaa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d103      	bne.n	800cdba <xQueueGenericSend+0x6e>
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d101      	bne.n	800cdbe <xQueueGenericSend+0x72>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e000      	b.n	800cdc0 <xQueueGenericSend+0x74>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10a      	bne.n	800cdda <xQueueGenericSend+0x8e>
	__asm volatile
 800cdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc8:	f383 8811 	msr	BASEPRI, r3
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	f3bf 8f4f 	dsb	sy
 800cdd4:	623b      	str	r3, [r7, #32]
}
 800cdd6:	bf00      	nop
 800cdd8:	e7fe      	b.n	800cdd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdda:	f001 f9df 	bl	800e19c <xTaskGetSchedulerState>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d102      	bne.n	800cdea <xQueueGenericSend+0x9e>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d101      	bne.n	800cdee <xQueueGenericSend+0xa2>
 800cdea:	2301      	movs	r3, #1
 800cdec:	e000      	b.n	800cdf0 <xQueueGenericSend+0xa4>
 800cdee:	2300      	movs	r3, #0
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10a      	bne.n	800ce0a <xQueueGenericSend+0xbe>
	__asm volatile
 800cdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf8:	f383 8811 	msr	BASEPRI, r3
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	f3bf 8f4f 	dsb	sy
 800ce04:	61fb      	str	r3, [r7, #28]
}
 800ce06:	bf00      	nop
 800ce08:	e7fe      	b.n	800ce08 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce0a:	f001 fea7 	bl	800eb5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d302      	bcc.n	800ce20 <xQueueGenericSend+0xd4>
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d129      	bne.n	800ce74 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce20:	683a      	ldr	r2, [r7, #0]
 800ce22:	68b9      	ldr	r1, [r7, #8]
 800ce24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce26:	f000 fa07 	bl	800d238 <prvCopyDataToQueue>
 800ce2a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d010      	beq.n	800ce56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce36:	3324      	adds	r3, #36	; 0x24
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f000 ffe9 	bl	800de10 <xTaskRemoveFromEventList>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d013      	beq.n	800ce6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce44:	4b3f      	ldr	r3, [pc, #252]	; (800cf44 <xQueueGenericSend+0x1f8>)
 800ce46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce4a:	601a      	str	r2, [r3, #0]
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	f3bf 8f6f 	isb	sy
 800ce54:	e00a      	b.n	800ce6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d007      	beq.n	800ce6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce5c:	4b39      	ldr	r3, [pc, #228]	; (800cf44 <xQueueGenericSend+0x1f8>)
 800ce5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce62:	601a      	str	r2, [r3, #0]
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce6c:	f001 fea6 	bl	800ebbc <vPortExitCritical>
				return pdPASS;
 800ce70:	2301      	movs	r3, #1
 800ce72:	e063      	b.n	800cf3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d103      	bne.n	800ce82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce7a:	f001 fe9f 	bl	800ebbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	e05c      	b.n	800cf3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d106      	bne.n	800ce96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce88:	f107 0314 	add.w	r3, r7, #20
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f001 f823 	bl	800ded8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce92:	2301      	movs	r3, #1
 800ce94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce96:	f001 fe91 	bl	800ebbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce9a:	f000 fd8d 	bl	800d9b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce9e:	f001 fe5d 	bl	800eb5c <vPortEnterCritical>
 800cea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cea8:	b25b      	sxtb	r3, r3
 800ceaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ceae:	d103      	bne.n	800ceb8 <xQueueGenericSend+0x16c>
 800ceb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cebe:	b25b      	sxtb	r3, r3
 800cec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cec4:	d103      	bne.n	800cece <xQueueGenericSend+0x182>
 800cec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec8:	2200      	movs	r2, #0
 800ceca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cece:	f001 fe75 	bl	800ebbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ced2:	1d3a      	adds	r2, r7, #4
 800ced4:	f107 0314 	add.w	r3, r7, #20
 800ced8:	4611      	mov	r1, r2
 800ceda:	4618      	mov	r0, r3
 800cedc:	f001 f812 	bl	800df04 <xTaskCheckForTimeOut>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d124      	bne.n	800cf30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cee8:	f000 fa9e 	bl	800d428 <prvIsQueueFull>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d018      	beq.n	800cf24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef4:	3310      	adds	r3, #16
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	4611      	mov	r1, r2
 800cefa:	4618      	mov	r0, r3
 800cefc:	f000 ff38 	bl	800dd70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf02:	f000 fa29 	bl	800d358 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf06:	f000 fd65 	bl	800d9d4 <xTaskResumeAll>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f47f af7c 	bne.w	800ce0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cf12:	4b0c      	ldr	r3, [pc, #48]	; (800cf44 <xQueueGenericSend+0x1f8>)
 800cf14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf18:	601a      	str	r2, [r3, #0]
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	e772      	b.n	800ce0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf26:	f000 fa17 	bl	800d358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf2a:	f000 fd53 	bl	800d9d4 <xTaskResumeAll>
 800cf2e:	e76c      	b.n	800ce0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf32:	f000 fa11 	bl	800d358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf36:	f000 fd4d 	bl	800d9d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf3a:	2300      	movs	r3, #0
		}
	}
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3738      	adds	r7, #56	; 0x38
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	e000ed04 	.word	0xe000ed04

0800cf48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b08e      	sub	sp, #56	; 0x38
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	607a      	str	r2, [r7, #4]
 800cf54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10a      	bne.n	800cf76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf64:	f383 8811 	msr	BASEPRI, r3
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf72:	bf00      	nop
 800cf74:	e7fe      	b.n	800cf74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d103      	bne.n	800cf84 <xQueueGenericSendFromISR+0x3c>
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d101      	bne.n	800cf88 <xQueueGenericSendFromISR+0x40>
 800cf84:	2301      	movs	r3, #1
 800cf86:	e000      	b.n	800cf8a <xQueueGenericSendFromISR+0x42>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10a      	bne.n	800cfa4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	623b      	str	r3, [r7, #32]
}
 800cfa0:	bf00      	nop
 800cfa2:	e7fe      	b.n	800cfa2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	d103      	bne.n	800cfb2 <xQueueGenericSendFromISR+0x6a>
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d101      	bne.n	800cfb6 <xQueueGenericSendFromISR+0x6e>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e000      	b.n	800cfb8 <xQueueGenericSendFromISR+0x70>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10a      	bne.n	800cfd2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc0:	f383 8811 	msr	BASEPRI, r3
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	61fb      	str	r3, [r7, #28]
}
 800cfce:	bf00      	nop
 800cfd0:	e7fe      	b.n	800cfd0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfd2:	f001 fe85 	bl	800ece0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cfd6:	f3ef 8211 	mrs	r2, BASEPRI
 800cfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfde:	f383 8811 	msr	BASEPRI, r3
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	61ba      	str	r2, [r7, #24]
 800cfec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cfee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cff0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d302      	bcc.n	800d004 <xQueueGenericSendFromISR+0xbc>
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	2b02      	cmp	r3, #2
 800d002:	d12c      	bne.n	800d05e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d00a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	68b9      	ldr	r1, [r7, #8]
 800d012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d014:	f000 f910 	bl	800d238 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d018:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d01c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d020:	d112      	bne.n	800d048 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d026:	2b00      	cmp	r3, #0
 800d028:	d016      	beq.n	800d058 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02c:	3324      	adds	r3, #36	; 0x24
 800d02e:	4618      	mov	r0, r3
 800d030:	f000 feee 	bl	800de10 <xTaskRemoveFromEventList>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00e      	beq.n	800d058 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00b      	beq.n	800d058 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2201      	movs	r2, #1
 800d044:	601a      	str	r2, [r3, #0]
 800d046:	e007      	b.n	800d058 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d048:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d04c:	3301      	adds	r3, #1
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	b25a      	sxtb	r2, r3
 800d052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d058:	2301      	movs	r3, #1
 800d05a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d05c:	e001      	b.n	800d062 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d05e:	2300      	movs	r3, #0
 800d060:	637b      	str	r3, [r7, #52]	; 0x34
 800d062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d064:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d06c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d070:	4618      	mov	r0, r3
 800d072:	3738      	adds	r7, #56	; 0x38
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b08c      	sub	sp, #48	; 0x30
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d084:	2300      	movs	r3, #0
 800d086:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10a      	bne.n	800d0a8 <xQueueReceive+0x30>
	__asm volatile
 800d092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d096:	f383 8811 	msr	BASEPRI, r3
 800d09a:	f3bf 8f6f 	isb	sy
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	623b      	str	r3, [r7, #32]
}
 800d0a4:	bf00      	nop
 800d0a6:	e7fe      	b.n	800d0a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d103      	bne.n	800d0b6 <xQueueReceive+0x3e>
 800d0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d101      	bne.n	800d0ba <xQueueReceive+0x42>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e000      	b.n	800d0bc <xQueueReceive+0x44>
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10a      	bne.n	800d0d6 <xQueueReceive+0x5e>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	61fb      	str	r3, [r7, #28]
}
 800d0d2:	bf00      	nop
 800d0d4:	e7fe      	b.n	800d0d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0d6:	f001 f861 	bl	800e19c <xTaskGetSchedulerState>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d102      	bne.n	800d0e6 <xQueueReceive+0x6e>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d101      	bne.n	800d0ea <xQueueReceive+0x72>
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e000      	b.n	800d0ec <xQueueReceive+0x74>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10a      	bne.n	800d106 <xQueueReceive+0x8e>
	__asm volatile
 800d0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	61bb      	str	r3, [r7, #24]
}
 800d102:	bf00      	nop
 800d104:	e7fe      	b.n	800d104 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800d106:	f001 fd29 	bl	800eb5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d10e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d112:	2b00      	cmp	r3, #0
 800d114:	d01f      	beq.n	800d156 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d116:	68b9      	ldr	r1, [r7, #8]
 800d118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d11a:	f000 f8f7 	bl	800d30c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	1e5a      	subs	r2, r3, #1
 800d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d124:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d128:	691b      	ldr	r3, [r3, #16]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00f      	beq.n	800d14e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d130:	3310      	adds	r3, #16
 800d132:	4618      	mov	r0, r3
 800d134:	f000 fe6c 	bl	800de10 <xTaskRemoveFromEventList>
 800d138:	4603      	mov	r3, r0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d007      	beq.n	800d14e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d13e:	4b3d      	ldr	r3, [pc, #244]	; (800d234 <xQueueReceive+0x1bc>)
 800d140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d144:	601a      	str	r2, [r3, #0]
 800d146:	f3bf 8f4f 	dsb	sy
 800d14a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d14e:	f001 fd35 	bl	800ebbc <vPortExitCritical>
				return pdPASS;
 800d152:	2301      	movs	r3, #1
 800d154:	e069      	b.n	800d22a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d103      	bne.n	800d164 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d15c:	f001 fd2e 	bl	800ebbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d160:	2300      	movs	r3, #0
 800d162:	e062      	b.n	800d22a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d166:	2b00      	cmp	r3, #0
 800d168:	d106      	bne.n	800d178 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d16a:	f107 0310 	add.w	r3, r7, #16
 800d16e:	4618      	mov	r0, r3
 800d170:	f000 feb2 	bl	800ded8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d174:	2301      	movs	r3, #1
 800d176:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d178:	f001 fd20 	bl	800ebbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d17c:	f000 fc1c 	bl	800d9b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d180:	f001 fcec 	bl	800eb5c <vPortEnterCritical>
 800d184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d18a:	b25b      	sxtb	r3, r3
 800d18c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d190:	d103      	bne.n	800d19a <xQueueReceive+0x122>
 800d192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d194:	2200      	movs	r2, #0
 800d196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1a0:	b25b      	sxtb	r3, r3
 800d1a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1a6:	d103      	bne.n	800d1b0 <xQueueReceive+0x138>
 800d1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1b0:	f001 fd04 	bl	800ebbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1b4:	1d3a      	adds	r2, r7, #4
 800d1b6:	f107 0310 	add.w	r3, r7, #16
 800d1ba:	4611      	mov	r1, r2
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f000 fea1 	bl	800df04 <xTaskCheckForTimeOut>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d123      	bne.n	800d210 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1ca:	f000 f917 	bl	800d3fc <prvIsQueueEmpty>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d017      	beq.n	800d204 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d6:	3324      	adds	r3, #36	; 0x24
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	4611      	mov	r1, r2
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f000 fdc7 	bl	800dd70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1e4:	f000 f8b8 	bl	800d358 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1e8:	f000 fbf4 	bl	800d9d4 <xTaskResumeAll>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d189      	bne.n	800d106 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d1f2:	4b10      	ldr	r3, [pc, #64]	; (800d234 <xQueueReceive+0x1bc>)
 800d1f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1f8:	601a      	str	r2, [r3, #0]
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	e780      	b.n	800d106 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d206:	f000 f8a7 	bl	800d358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d20a:	f000 fbe3 	bl	800d9d4 <xTaskResumeAll>
 800d20e:	e77a      	b.n	800d106 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d212:	f000 f8a1 	bl	800d358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d216:	f000 fbdd 	bl	800d9d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d21a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d21c:	f000 f8ee 	bl	800d3fc <prvIsQueueEmpty>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	f43f af6f 	beq.w	800d106 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d228:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3730      	adds	r7, #48	; 0x30
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	e000ed04 	.word	0xe000ed04

0800d238 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b086      	sub	sp, #24
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d244:	2300      	movs	r3, #0
 800d246:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d24c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10d      	bne.n	800d272 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d14d      	bne.n	800d2fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	4618      	mov	r0, r3
 800d264:	f000 ffb8 	bl	800e1d8 <xTaskPriorityDisinherit>
 800d268:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2200      	movs	r2, #0
 800d26e:	605a      	str	r2, [r3, #4]
 800d270:	e043      	b.n	800d2fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d119      	bne.n	800d2ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6898      	ldr	r0, [r3, #8]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d280:	461a      	mov	r2, r3
 800d282:	68b9      	ldr	r1, [r7, #8]
 800d284:	f002 fcca 	bl	800fc1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	689a      	ldr	r2, [r3, #8]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d290:	441a      	add	r2, r3
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	689a      	ldr	r2, [r3, #8]
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d32b      	bcc.n	800d2fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	609a      	str	r2, [r3, #8]
 800d2aa:	e026      	b.n	800d2fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	68d8      	ldr	r0, [r3, #12]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	68b9      	ldr	r1, [r7, #8]
 800d2b8:	f002 fcb0 	bl	800fc1c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	68da      	ldr	r2, [r3, #12]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c4:	425b      	negs	r3, r3
 800d2c6:	441a      	add	r2, r3
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	68da      	ldr	r2, [r3, #12]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d207      	bcs.n	800d2e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	685a      	ldr	r2, [r3, #4]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e0:	425b      	negs	r3, r3
 800d2e2:	441a      	add	r2, r3
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d105      	bne.n	800d2fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d002      	beq.n	800d2fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	1c5a      	adds	r2, r3, #1
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d302:	697b      	ldr	r3, [r7, #20]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3718      	adds	r7, #24
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d018      	beq.n	800d350 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	68da      	ldr	r2, [r3, #12]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d326:	441a      	add	r2, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	68da      	ldr	r2, [r3, #12]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	429a      	cmp	r2, r3
 800d336:	d303      	bcc.n	800d340 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	68d9      	ldr	r1, [r3, #12]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d348:	461a      	mov	r2, r3
 800d34a:	6838      	ldr	r0, [r7, #0]
 800d34c:	f002 fc66 	bl	800fc1c <memcpy>
	}
}
 800d350:	bf00      	nop
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d360:	f001 fbfc 	bl	800eb5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d36a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d36c:	e011      	b.n	800d392 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d372:	2b00      	cmp	r3, #0
 800d374:	d012      	beq.n	800d39c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	3324      	adds	r3, #36	; 0x24
 800d37a:	4618      	mov	r0, r3
 800d37c:	f000 fd48 	bl	800de10 <xTaskRemoveFromEventList>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d001      	beq.n	800d38a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d386:	f000 fe1f 	bl	800dfc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d38a:	7bfb      	ldrb	r3, [r7, #15]
 800d38c:	3b01      	subs	r3, #1
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d396:	2b00      	cmp	r3, #0
 800d398:	dce9      	bgt.n	800d36e <prvUnlockQueue+0x16>
 800d39a:	e000      	b.n	800d39e <prvUnlockQueue+0x46>
					break;
 800d39c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	22ff      	movs	r2, #255	; 0xff
 800d3a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d3a6:	f001 fc09 	bl	800ebbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d3aa:	f001 fbd7 	bl	800eb5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3b6:	e011      	b.n	800d3dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d012      	beq.n	800d3e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	3310      	adds	r3, #16
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f000 fd23 	bl	800de10 <xTaskRemoveFromEventList>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d001      	beq.n	800d3d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d3d0:	f000 fdfa 	bl	800dfc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d3d4:	7bbb      	ldrb	r3, [r7, #14]
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	dce9      	bgt.n	800d3b8 <prvUnlockQueue+0x60>
 800d3e4:	e000      	b.n	800d3e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d3e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	22ff      	movs	r2, #255	; 0xff
 800d3ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d3f0:	f001 fbe4 	bl	800ebbc <vPortExitCritical>
}
 800d3f4:	bf00      	nop
 800d3f6:	3710      	adds	r7, #16
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d404:	f001 fbaa 	bl	800eb5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d102      	bne.n	800d416 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d410:	2301      	movs	r3, #1
 800d412:	60fb      	str	r3, [r7, #12]
 800d414:	e001      	b.n	800d41a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d416:	2300      	movs	r3, #0
 800d418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d41a:	f001 fbcf 	bl	800ebbc <vPortExitCritical>

	return xReturn;
 800d41e:	68fb      	ldr	r3, [r7, #12]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d430:	f001 fb94 	bl	800eb5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d102      	bne.n	800d446 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d440:	2301      	movs	r3, #1
 800d442:	60fb      	str	r3, [r7, #12]
 800d444:	e001      	b.n	800d44a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d446:	2300      	movs	r3, #0
 800d448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d44a:	f001 fbb7 	bl	800ebbc <vPortExitCritical>

	return xReturn;
 800d44e:	68fb      	ldr	r3, [r7, #12]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3710      	adds	r7, #16
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d462:	2300      	movs	r3, #0
 800d464:	60fb      	str	r3, [r7, #12]
 800d466:	e014      	b.n	800d492 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d468:	4a0e      	ldr	r2, [pc, #56]	; (800d4a4 <vQueueAddToRegistry+0x4c>)
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d10b      	bne.n	800d48c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d474:	490b      	ldr	r1, [pc, #44]	; (800d4a4 <vQueueAddToRegistry+0x4c>)
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	683a      	ldr	r2, [r7, #0]
 800d47a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d47e:	4a09      	ldr	r2, [pc, #36]	; (800d4a4 <vQueueAddToRegistry+0x4c>)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	00db      	lsls	r3, r3, #3
 800d484:	4413      	add	r3, r2
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d48a:	e006      	b.n	800d49a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	3301      	adds	r3, #1
 800d490:	60fb      	str	r3, [r7, #12]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2b07      	cmp	r3, #7
 800d496:	d9e7      	bls.n	800d468 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d498:	bf00      	nop
 800d49a:	bf00      	nop
 800d49c:	3714      	adds	r7, #20
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bc80      	pop	{r7}
 800d4a2:	4770      	bx	lr
 800d4a4:	20000c44 	.word	0x20000c44

0800d4a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b086      	sub	sp, #24
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d4b8:	f001 fb50 	bl	800eb5c <vPortEnterCritical>
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4c2:	b25b      	sxtb	r3, r3
 800d4c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4c8:	d103      	bne.n	800d4d2 <vQueueWaitForMessageRestricted+0x2a>
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4d8:	b25b      	sxtb	r3, r3
 800d4da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4de:	d103      	bne.n	800d4e8 <vQueueWaitForMessageRestricted+0x40>
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4e8:	f001 fb68 	bl	800ebbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d106      	bne.n	800d502 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	3324      	adds	r3, #36	; 0x24
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	68b9      	ldr	r1, [r7, #8]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f000 fc5b 	bl	800ddb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d502:	6978      	ldr	r0, [r7, #20]
 800d504:	f7ff ff28 	bl	800d358 <prvUnlockQueue>
	}
 800d508:	bf00      	nop
 800d50a:	3718      	adds	r7, #24
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d510:	b580      	push	{r7, lr}
 800d512:	b08e      	sub	sp, #56	; 0x38
 800d514:	af04      	add	r7, sp, #16
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d520:	2b00      	cmp	r3, #0
 800d522:	d10a      	bne.n	800d53a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d528:	f383 8811 	msr	BASEPRI, r3
 800d52c:	f3bf 8f6f 	isb	sy
 800d530:	f3bf 8f4f 	dsb	sy
 800d534:	623b      	str	r3, [r7, #32]
}
 800d536:	bf00      	nop
 800d538:	e7fe      	b.n	800d538 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d10a      	bne.n	800d556 <xTaskCreateStatic+0x46>
	__asm volatile
 800d540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d544:	f383 8811 	msr	BASEPRI, r3
 800d548:	f3bf 8f6f 	isb	sy
 800d54c:	f3bf 8f4f 	dsb	sy
 800d550:	61fb      	str	r3, [r7, #28]
}
 800d552:	bf00      	nop
 800d554:	e7fe      	b.n	800d554 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d556:	23bc      	movs	r3, #188	; 0xbc
 800d558:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	2bbc      	cmp	r3, #188	; 0xbc
 800d55e:	d00a      	beq.n	800d576 <xTaskCreateStatic+0x66>
	__asm volatile
 800d560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d564:	f383 8811 	msr	BASEPRI, r3
 800d568:	f3bf 8f6f 	isb	sy
 800d56c:	f3bf 8f4f 	dsb	sy
 800d570:	61bb      	str	r3, [r7, #24]
}
 800d572:	bf00      	nop
 800d574:	e7fe      	b.n	800d574 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d01e      	beq.n	800d5ba <xTaskCreateStatic+0xaa>
 800d57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d01b      	beq.n	800d5ba <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d584:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d58a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58e:	2202      	movs	r2, #2
 800d590:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d594:	2300      	movs	r3, #0
 800d596:	9303      	str	r3, [sp, #12]
 800d598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59a:	9302      	str	r3, [sp, #8]
 800d59c:	f107 0314 	add.w	r3, r7, #20
 800d5a0:	9301      	str	r3, [sp, #4]
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a4:	9300      	str	r3, [sp, #0]
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	68b9      	ldr	r1, [r7, #8]
 800d5ac:	68f8      	ldr	r0, [r7, #12]
 800d5ae:	f000 f851 	bl	800d654 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5b4:	f000 f8ec 	bl	800d790 <prvAddNewTaskToReadyList>
 800d5b8:	e001      	b.n	800d5be <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d5be:	697b      	ldr	r3, [r7, #20]
	}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3728      	adds	r7, #40	; 0x28
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b08c      	sub	sp, #48	; 0x30
 800d5cc:	af04      	add	r7, sp, #16
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	603b      	str	r3, [r7, #0]
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5d8:	88fb      	ldrh	r3, [r7, #6]
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f001 fbbd 	bl	800ed5c <pvPortMalloc>
 800d5e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00e      	beq.n	800d608 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800d5ea:	20bc      	movs	r0, #188	; 0xbc
 800d5ec:	f001 fbb6 	bl	800ed5c <pvPortMalloc>
 800d5f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d003      	beq.n	800d600 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	697a      	ldr	r2, [r7, #20]
 800d5fc:	631a      	str	r2, [r3, #48]	; 0x30
 800d5fe:	e005      	b.n	800d60c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d600:	6978      	ldr	r0, [r7, #20]
 800d602:	f001 fc6f 	bl	800eee4 <vPortFree>
 800d606:	e001      	b.n	800d60c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d608:	2300      	movs	r3, #0
 800d60a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d017      	beq.n	800d642 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	2200      	movs	r2, #0
 800d616:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d61a:	88fa      	ldrh	r2, [r7, #6]
 800d61c:	2300      	movs	r3, #0
 800d61e:	9303      	str	r3, [sp, #12]
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	9302      	str	r3, [sp, #8]
 800d624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d626:	9301      	str	r3, [sp, #4]
 800d628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62a:	9300      	str	r3, [sp, #0]
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	68b9      	ldr	r1, [r7, #8]
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	f000 f80f 	bl	800d654 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d636:	69f8      	ldr	r0, [r7, #28]
 800d638:	f000 f8aa 	bl	800d790 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d63c:	2301      	movs	r3, #1
 800d63e:	61bb      	str	r3, [r7, #24]
 800d640:	e002      	b.n	800d648 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d646:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d648:	69bb      	ldr	r3, [r7, #24]
	}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3720      	adds	r7, #32
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
	...

0800d654 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b088      	sub	sp, #32
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
 800d660:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d664:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	461a      	mov	r2, r3
 800d66c:	21a5      	movs	r1, #165	; 0xa5
 800d66e:	f002 fafd 	bl	800fc6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d67c:	3b01      	subs	r3, #1
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	4413      	add	r3, r2
 800d682:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d684:	69bb      	ldr	r3, [r7, #24]
 800d686:	f023 0307 	bic.w	r3, r3, #7
 800d68a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d68c:	69bb      	ldr	r3, [r7, #24]
 800d68e:	f003 0307 	and.w	r3, r3, #7
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00a      	beq.n	800d6ac <prvInitialiseNewTask+0x58>
	__asm volatile
 800d696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69a:	f383 8811 	msr	BASEPRI, r3
 800d69e:	f3bf 8f6f 	isb	sy
 800d6a2:	f3bf 8f4f 	dsb	sy
 800d6a6:	617b      	str	r3, [r7, #20]
}
 800d6a8:	bf00      	nop
 800d6aa:	e7fe      	b.n	800d6aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	61fb      	str	r3, [r7, #28]
 800d6b0:	e012      	b.n	800d6d8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	4413      	add	r3, r2
 800d6b8:	7819      	ldrb	r1, [r3, #0]
 800d6ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	4413      	add	r3, r2
 800d6c0:	3334      	adds	r3, #52	; 0x34
 800d6c2:	460a      	mov	r2, r1
 800d6c4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d006      	beq.n	800d6e0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	61fb      	str	r3, [r7, #28]
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	2b0f      	cmp	r3, #15
 800d6dc:	d9e9      	bls.n	800d6b2 <prvInitialiseNewTask+0x5e>
 800d6de:	e000      	b.n	800d6e2 <prvInitialiseNewTask+0x8e>
		{
			break;
 800d6e0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ec:	2b37      	cmp	r3, #55	; 0x37
 800d6ee:	d901      	bls.n	800d6f4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d6f0:	2337      	movs	r3, #55	; 0x37
 800d6f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d702:	2200      	movs	r2, #0
 800d704:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d708:	3304      	adds	r3, #4
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7ff f98b 	bl	800ca26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d712:	3318      	adds	r3, #24
 800d714:	4618      	mov	r0, r3
 800d716:	f7ff f986 	bl	800ca26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d71e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d722:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d72e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d732:	2200      	movs	r2, #0
 800d734:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73a:	2200      	movs	r2, #0
 800d73c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d742:	3354      	adds	r3, #84	; 0x54
 800d744:	2260      	movs	r2, #96	; 0x60
 800d746:	2100      	movs	r1, #0
 800d748:	4618      	mov	r0, r3
 800d74a:	f002 fa8f 	bl	800fc6c <memset>
 800d74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d750:	4a0c      	ldr	r2, [pc, #48]	; (800d784 <prvInitialiseNewTask+0x130>)
 800d752:	659a      	str	r2, [r3, #88]	; 0x58
 800d754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d756:	4a0c      	ldr	r2, [pc, #48]	; (800d788 <prvInitialiseNewTask+0x134>)
 800d758:	65da      	str	r2, [r3, #92]	; 0x5c
 800d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75c:	4a0b      	ldr	r2, [pc, #44]	; (800d78c <prvInitialiseNewTask+0x138>)
 800d75e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d760:	683a      	ldr	r2, [r7, #0]
 800d762:	68f9      	ldr	r1, [r7, #12]
 800d764:	69b8      	ldr	r0, [r7, #24]
 800d766:	f001 f90b 	bl	800e980 <pxPortInitialiseStack>
 800d76a:	4602      	mov	r2, r0
 800d76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800d770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d772:	2b00      	cmp	r3, #0
 800d774:	d002      	beq.n	800d77c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d77a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d77c:	bf00      	nop
 800d77e:	3720      	adds	r7, #32
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	080109c0 	.word	0x080109c0
 800d788:	080109e0 	.word	0x080109e0
 800d78c:	080109a0 	.word	0x080109a0

0800d790 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d798:	f001 f9e0 	bl	800eb5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d79c:	4b2d      	ldr	r3, [pc, #180]	; (800d854 <prvAddNewTaskToReadyList+0xc4>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	4a2c      	ldr	r2, [pc, #176]	; (800d854 <prvAddNewTaskToReadyList+0xc4>)
 800d7a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d7a6:	4b2c      	ldr	r3, [pc, #176]	; (800d858 <prvAddNewTaskToReadyList+0xc8>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d109      	bne.n	800d7c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d7ae:	4a2a      	ldr	r2, [pc, #168]	; (800d858 <prvAddNewTaskToReadyList+0xc8>)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d7b4:	4b27      	ldr	r3, [pc, #156]	; (800d854 <prvAddNewTaskToReadyList+0xc4>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d110      	bne.n	800d7de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d7bc:	f000 fc28 	bl	800e010 <prvInitialiseTaskLists>
 800d7c0:	e00d      	b.n	800d7de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d7c2:	4b26      	ldr	r3, [pc, #152]	; (800d85c <prvAddNewTaskToReadyList+0xcc>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d109      	bne.n	800d7de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d7ca:	4b23      	ldr	r3, [pc, #140]	; (800d858 <prvAddNewTaskToReadyList+0xc8>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d802      	bhi.n	800d7de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d7d8:	4a1f      	ldr	r2, [pc, #124]	; (800d858 <prvAddNewTaskToReadyList+0xc8>)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d7de:	4b20      	ldr	r3, [pc, #128]	; (800d860 <prvAddNewTaskToReadyList+0xd0>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	4a1e      	ldr	r2, [pc, #120]	; (800d860 <prvAddNewTaskToReadyList+0xd0>)
 800d7e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d7e8:	4b1d      	ldr	r3, [pc, #116]	; (800d860 <prvAddNewTaskToReadyList+0xd0>)
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f4:	4b1b      	ldr	r3, [pc, #108]	; (800d864 <prvAddNewTaskToReadyList+0xd4>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d903      	bls.n	800d804 <prvAddNewTaskToReadyList+0x74>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d800:	4a18      	ldr	r2, [pc, #96]	; (800d864 <prvAddNewTaskToReadyList+0xd4>)
 800d802:	6013      	str	r3, [r2, #0]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d808:	4613      	mov	r3, r2
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	4413      	add	r3, r2
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	4a15      	ldr	r2, [pc, #84]	; (800d868 <prvAddNewTaskToReadyList+0xd8>)
 800d812:	441a      	add	r2, r3
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	3304      	adds	r3, #4
 800d818:	4619      	mov	r1, r3
 800d81a:	4610      	mov	r0, r2
 800d81c:	f7ff f90f 	bl	800ca3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d820:	f001 f9cc 	bl	800ebbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d824:	4b0d      	ldr	r3, [pc, #52]	; (800d85c <prvAddNewTaskToReadyList+0xcc>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00e      	beq.n	800d84a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d82c:	4b0a      	ldr	r3, [pc, #40]	; (800d858 <prvAddNewTaskToReadyList+0xc8>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d836:	429a      	cmp	r2, r3
 800d838:	d207      	bcs.n	800d84a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d83a:	4b0c      	ldr	r3, [pc, #48]	; (800d86c <prvAddNewTaskToReadyList+0xdc>)
 800d83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d840:	601a      	str	r2, [r3, #0]
 800d842:	f3bf 8f4f 	dsb	sy
 800d846:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d84a:	bf00      	nop
 800d84c:	3708      	adds	r7, #8
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	20001158 	.word	0x20001158
 800d858:	20000c84 	.word	0x20000c84
 800d85c:	20001164 	.word	0x20001164
 800d860:	20001174 	.word	0x20001174
 800d864:	20001160 	.word	0x20001160
 800d868:	20000c88 	.word	0x20000c88
 800d86c:	e000ed04 	.word	0xe000ed04

0800d870 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d878:	2300      	movs	r3, #0
 800d87a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d017      	beq.n	800d8b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d882:	4b13      	ldr	r3, [pc, #76]	; (800d8d0 <vTaskDelay+0x60>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d00a      	beq.n	800d8a0 <vTaskDelay+0x30>
	__asm volatile
 800d88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88e:	f383 8811 	msr	BASEPRI, r3
 800d892:	f3bf 8f6f 	isb	sy
 800d896:	f3bf 8f4f 	dsb	sy
 800d89a:	60bb      	str	r3, [r7, #8]
}
 800d89c:	bf00      	nop
 800d89e:	e7fe      	b.n	800d89e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d8a0:	f000 f88a 	bl	800d9b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d8a4:	2100      	movs	r1, #0
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 fd04 	bl	800e2b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d8ac:	f000 f892 	bl	800d9d4 <xTaskResumeAll>
 800d8b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d107      	bne.n	800d8c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d8b8:	4b06      	ldr	r3, [pc, #24]	; (800d8d4 <vTaskDelay+0x64>)
 800d8ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8be:	601a      	str	r2, [r3, #0]
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8c8:	bf00      	nop
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	20001180 	.word	0x20001180
 800d8d4:	e000ed04 	.word	0xe000ed04

0800d8d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b08a      	sub	sp, #40	; 0x28
 800d8dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d8e6:	463a      	mov	r2, r7
 800d8e8:	1d39      	adds	r1, r7, #4
 800d8ea:	f107 0308 	add.w	r3, r7, #8
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7ff f848 	bl	800c984 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d8f4:	6839      	ldr	r1, [r7, #0]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	68ba      	ldr	r2, [r7, #8]
 800d8fa:	9202      	str	r2, [sp, #8]
 800d8fc:	9301      	str	r3, [sp, #4]
 800d8fe:	2300      	movs	r3, #0
 800d900:	9300      	str	r3, [sp, #0]
 800d902:	2300      	movs	r3, #0
 800d904:	460a      	mov	r2, r1
 800d906:	4924      	ldr	r1, [pc, #144]	; (800d998 <vTaskStartScheduler+0xc0>)
 800d908:	4824      	ldr	r0, [pc, #144]	; (800d99c <vTaskStartScheduler+0xc4>)
 800d90a:	f7ff fe01 	bl	800d510 <xTaskCreateStatic>
 800d90e:	4603      	mov	r3, r0
 800d910:	4a23      	ldr	r2, [pc, #140]	; (800d9a0 <vTaskStartScheduler+0xc8>)
 800d912:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d914:	4b22      	ldr	r3, [pc, #136]	; (800d9a0 <vTaskStartScheduler+0xc8>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d002      	beq.n	800d922 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d91c:	2301      	movs	r3, #1
 800d91e:	617b      	str	r3, [r7, #20]
 800d920:	e001      	b.n	800d926 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d922:	2300      	movs	r3, #0
 800d924:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d102      	bne.n	800d932 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d92c:	f000 fd16 	bl	800e35c <xTimerCreateTimerTask>
 800d930:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	2b01      	cmp	r3, #1
 800d936:	d11b      	bne.n	800d970 <vTaskStartScheduler+0x98>
	__asm volatile
 800d938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d93c:	f383 8811 	msr	BASEPRI, r3
 800d940:	f3bf 8f6f 	isb	sy
 800d944:	f3bf 8f4f 	dsb	sy
 800d948:	613b      	str	r3, [r7, #16]
}
 800d94a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d94c:	4b15      	ldr	r3, [pc, #84]	; (800d9a4 <vTaskStartScheduler+0xcc>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	3354      	adds	r3, #84	; 0x54
 800d952:	4a15      	ldr	r2, [pc, #84]	; (800d9a8 <vTaskStartScheduler+0xd0>)
 800d954:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d956:	4b15      	ldr	r3, [pc, #84]	; (800d9ac <vTaskStartScheduler+0xd4>)
 800d958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d95c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d95e:	4b14      	ldr	r3, [pc, #80]	; (800d9b0 <vTaskStartScheduler+0xd8>)
 800d960:	2201      	movs	r2, #1
 800d962:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800d964:	4b13      	ldr	r3, [pc, #76]	; (800d9b4 <vTaskStartScheduler+0xdc>)
 800d966:	2200      	movs	r2, #0
 800d968:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d96a:	f001 f885 	bl	800ea78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d96e:	e00e      	b.n	800d98e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d976:	d10a      	bne.n	800d98e <vTaskStartScheduler+0xb6>
	__asm volatile
 800d978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97c:	f383 8811 	msr	BASEPRI, r3
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	60fb      	str	r3, [r7, #12]
}
 800d98a:	bf00      	nop
 800d98c:	e7fe      	b.n	800d98c <vTaskStartScheduler+0xb4>
}
 800d98e:	bf00      	nop
 800d990:	3718      	adds	r7, #24
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	080106d4 	.word	0x080106d4
 800d99c:	0800dfe1 	.word	0x0800dfe1
 800d9a0:	2000117c 	.word	0x2000117c
 800d9a4:	20000c84 	.word	0x20000c84
 800d9a8:	20000188 	.word	0x20000188
 800d9ac:	20001178 	.word	0x20001178
 800d9b0:	20001164 	.word	0x20001164
 800d9b4:	2000115c 	.word	0x2000115c

0800d9b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d9bc:	4b04      	ldr	r3, [pc, #16]	; (800d9d0 <vTaskSuspendAll+0x18>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	4a03      	ldr	r2, [pc, #12]	; (800d9d0 <vTaskSuspendAll+0x18>)
 800d9c4:	6013      	str	r3, [r2, #0]
}
 800d9c6:	bf00      	nop
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bc80      	pop	{r7}
 800d9cc:	4770      	bx	lr
 800d9ce:	bf00      	nop
 800d9d0:	20001180 	.word	0x20001180

0800d9d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d9e2:	4b42      	ldr	r3, [pc, #264]	; (800daec <xTaskResumeAll+0x118>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d10a      	bne.n	800da00 <xTaskResumeAll+0x2c>
	__asm volatile
 800d9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ee:	f383 8811 	msr	BASEPRI, r3
 800d9f2:	f3bf 8f6f 	isb	sy
 800d9f6:	f3bf 8f4f 	dsb	sy
 800d9fa:	603b      	str	r3, [r7, #0]
}
 800d9fc:	bf00      	nop
 800d9fe:	e7fe      	b.n	800d9fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da00:	f001 f8ac 	bl	800eb5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da04:	4b39      	ldr	r3, [pc, #228]	; (800daec <xTaskResumeAll+0x118>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	3b01      	subs	r3, #1
 800da0a:	4a38      	ldr	r2, [pc, #224]	; (800daec <xTaskResumeAll+0x118>)
 800da0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da0e:	4b37      	ldr	r3, [pc, #220]	; (800daec <xTaskResumeAll+0x118>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d162      	bne.n	800dadc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da16:	4b36      	ldr	r3, [pc, #216]	; (800daf0 <xTaskResumeAll+0x11c>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d05e      	beq.n	800dadc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da1e:	e02f      	b.n	800da80 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800da20:	4b34      	ldr	r3, [pc, #208]	; (800daf4 <xTaskResumeAll+0x120>)
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	68db      	ldr	r3, [r3, #12]
 800da26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	3318      	adds	r3, #24
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7ff f861 	bl	800caf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	3304      	adds	r3, #4
 800da36:	4618      	mov	r0, r3
 800da38:	f7ff f85c 	bl	800caf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da40:	4b2d      	ldr	r3, [pc, #180]	; (800daf8 <xTaskResumeAll+0x124>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	429a      	cmp	r2, r3
 800da46:	d903      	bls.n	800da50 <xTaskResumeAll+0x7c>
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4c:	4a2a      	ldr	r2, [pc, #168]	; (800daf8 <xTaskResumeAll+0x124>)
 800da4e:	6013      	str	r3, [r2, #0]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da54:	4613      	mov	r3, r2
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	4413      	add	r3, r2
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	4a27      	ldr	r2, [pc, #156]	; (800dafc <xTaskResumeAll+0x128>)
 800da5e:	441a      	add	r2, r3
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	3304      	adds	r3, #4
 800da64:	4619      	mov	r1, r3
 800da66:	4610      	mov	r0, r2
 800da68:	f7fe ffe9 	bl	800ca3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da70:	4b23      	ldr	r3, [pc, #140]	; (800db00 <xTaskResumeAll+0x12c>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da76:	429a      	cmp	r2, r3
 800da78:	d302      	bcc.n	800da80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800da7a:	4b22      	ldr	r3, [pc, #136]	; (800db04 <xTaskResumeAll+0x130>)
 800da7c:	2201      	movs	r2, #1
 800da7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da80:	4b1c      	ldr	r3, [pc, #112]	; (800daf4 <xTaskResumeAll+0x120>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d1cb      	bne.n	800da20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d001      	beq.n	800da92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800da8e:	f000 fb61 	bl	800e154 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800da92:	4b1d      	ldr	r3, [pc, #116]	; (800db08 <xTaskResumeAll+0x134>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d010      	beq.n	800dac0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800da9e:	f000 f845 	bl	800db2c <xTaskIncrementTick>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d002      	beq.n	800daae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800daa8:	4b16      	ldr	r3, [pc, #88]	; (800db04 <xTaskResumeAll+0x130>)
 800daaa:	2201      	movs	r2, #1
 800daac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	3b01      	subs	r3, #1
 800dab2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d1f1      	bne.n	800da9e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800daba:	4b13      	ldr	r3, [pc, #76]	; (800db08 <xTaskResumeAll+0x134>)
 800dabc:	2200      	movs	r2, #0
 800dabe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dac0:	4b10      	ldr	r3, [pc, #64]	; (800db04 <xTaskResumeAll+0x130>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d009      	beq.n	800dadc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dac8:	2301      	movs	r3, #1
 800daca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dacc:	4b0f      	ldr	r3, [pc, #60]	; (800db0c <xTaskResumeAll+0x138>)
 800dace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dad2:	601a      	str	r2, [r3, #0]
 800dad4:	f3bf 8f4f 	dsb	sy
 800dad8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dadc:	f001 f86e 	bl	800ebbc <vPortExitCritical>

	return xAlreadyYielded;
 800dae0:	68bb      	ldr	r3, [r7, #8]
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	20001180 	.word	0x20001180
 800daf0:	20001158 	.word	0x20001158
 800daf4:	20001118 	.word	0x20001118
 800daf8:	20001160 	.word	0x20001160
 800dafc:	20000c88 	.word	0x20000c88
 800db00:	20000c84 	.word	0x20000c84
 800db04:	2000116c 	.word	0x2000116c
 800db08:	20001168 	.word	0x20001168
 800db0c:	e000ed04 	.word	0xe000ed04

0800db10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800db16:	4b04      	ldr	r3, [pc, #16]	; (800db28 <xTaskGetTickCount+0x18>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800db1c:	687b      	ldr	r3, [r7, #4]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	370c      	adds	r7, #12
 800db22:	46bd      	mov	sp, r7
 800db24:	bc80      	pop	{r7}
 800db26:	4770      	bx	lr
 800db28:	2000115c 	.word	0x2000115c

0800db2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b086      	sub	sp, #24
 800db30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db32:	2300      	movs	r3, #0
 800db34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db36:	4b51      	ldr	r3, [pc, #324]	; (800dc7c <xTaskIncrementTick+0x150>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	f040 808e 	bne.w	800dc5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db40:	4b4f      	ldr	r3, [pc, #316]	; (800dc80 <xTaskIncrementTick+0x154>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	3301      	adds	r3, #1
 800db46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db48:	4a4d      	ldr	r2, [pc, #308]	; (800dc80 <xTaskIncrementTick+0x154>)
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d120      	bne.n	800db96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800db54:	4b4b      	ldr	r3, [pc, #300]	; (800dc84 <xTaskIncrementTick+0x158>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d00a      	beq.n	800db74 <xTaskIncrementTick+0x48>
	__asm volatile
 800db5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db62:	f383 8811 	msr	BASEPRI, r3
 800db66:	f3bf 8f6f 	isb	sy
 800db6a:	f3bf 8f4f 	dsb	sy
 800db6e:	603b      	str	r3, [r7, #0]
}
 800db70:	bf00      	nop
 800db72:	e7fe      	b.n	800db72 <xTaskIncrementTick+0x46>
 800db74:	4b43      	ldr	r3, [pc, #268]	; (800dc84 <xTaskIncrementTick+0x158>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	60fb      	str	r3, [r7, #12]
 800db7a:	4b43      	ldr	r3, [pc, #268]	; (800dc88 <xTaskIncrementTick+0x15c>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a41      	ldr	r2, [pc, #260]	; (800dc84 <xTaskIncrementTick+0x158>)
 800db80:	6013      	str	r3, [r2, #0]
 800db82:	4a41      	ldr	r2, [pc, #260]	; (800dc88 <xTaskIncrementTick+0x15c>)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6013      	str	r3, [r2, #0]
 800db88:	4b40      	ldr	r3, [pc, #256]	; (800dc8c <xTaskIncrementTick+0x160>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	3301      	adds	r3, #1
 800db8e:	4a3f      	ldr	r2, [pc, #252]	; (800dc8c <xTaskIncrementTick+0x160>)
 800db90:	6013      	str	r3, [r2, #0]
 800db92:	f000 fadf 	bl	800e154 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800db96:	4b3e      	ldr	r3, [pc, #248]	; (800dc90 <xTaskIncrementTick+0x164>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d34e      	bcc.n	800dc3e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dba0:	4b38      	ldr	r3, [pc, #224]	; (800dc84 <xTaskIncrementTick+0x158>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d101      	bne.n	800dbae <xTaskIncrementTick+0x82>
 800dbaa:	2301      	movs	r3, #1
 800dbac:	e000      	b.n	800dbb0 <xTaskIncrementTick+0x84>
 800dbae:	2300      	movs	r3, #0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d004      	beq.n	800dbbe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbb4:	4b36      	ldr	r3, [pc, #216]	; (800dc90 <xTaskIncrementTick+0x164>)
 800dbb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dbba:	601a      	str	r2, [r3, #0]
					break;
 800dbbc:	e03f      	b.n	800dc3e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dbbe:	4b31      	ldr	r3, [pc, #196]	; (800dc84 <xTaskIncrementTick+0x158>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	68db      	ldr	r3, [r3, #12]
 800dbc4:	68db      	ldr	r3, [r3, #12]
 800dbc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dbce:	693a      	ldr	r2, [r7, #16]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d203      	bcs.n	800dbde <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dbd6:	4a2e      	ldr	r2, [pc, #184]	; (800dc90 <xTaskIncrementTick+0x164>)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6013      	str	r3, [r2, #0]
						break;
 800dbdc:	e02f      	b.n	800dc3e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	3304      	adds	r3, #4
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fe ff86 	bl	800caf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d004      	beq.n	800dbfa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	3318      	adds	r3, #24
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7fe ff7d 	bl	800caf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbfe:	4b25      	ldr	r3, [pc, #148]	; (800dc94 <xTaskIncrementTick+0x168>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d903      	bls.n	800dc0e <xTaskIncrementTick+0xe2>
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc0a:	4a22      	ldr	r2, [pc, #136]	; (800dc94 <xTaskIncrementTick+0x168>)
 800dc0c:	6013      	str	r3, [r2, #0]
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc12:	4613      	mov	r3, r2
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	4413      	add	r3, r2
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	4a1f      	ldr	r2, [pc, #124]	; (800dc98 <xTaskIncrementTick+0x16c>)
 800dc1c:	441a      	add	r2, r3
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	3304      	adds	r3, #4
 800dc22:	4619      	mov	r1, r3
 800dc24:	4610      	mov	r0, r2
 800dc26:	f7fe ff0a 	bl	800ca3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc2e:	4b1b      	ldr	r3, [pc, #108]	; (800dc9c <xTaskIncrementTick+0x170>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d3b3      	bcc.n	800dba0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc3c:	e7b0      	b.n	800dba0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc3e:	4b17      	ldr	r3, [pc, #92]	; (800dc9c <xTaskIncrementTick+0x170>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc44:	4914      	ldr	r1, [pc, #80]	; (800dc98 <xTaskIncrementTick+0x16c>)
 800dc46:	4613      	mov	r3, r2
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	4413      	add	r3, r2
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	440b      	add	r3, r1
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d907      	bls.n	800dc66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800dc56:	2301      	movs	r3, #1
 800dc58:	617b      	str	r3, [r7, #20]
 800dc5a:	e004      	b.n	800dc66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dc5c:	4b10      	ldr	r3, [pc, #64]	; (800dca0 <xTaskIncrementTick+0x174>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	3301      	adds	r3, #1
 800dc62:	4a0f      	ldr	r2, [pc, #60]	; (800dca0 <xTaskIncrementTick+0x174>)
 800dc64:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dc66:	4b0f      	ldr	r3, [pc, #60]	; (800dca4 <xTaskIncrementTick+0x178>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d001      	beq.n	800dc72 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dc72:	697b      	ldr	r3, [r7, #20]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3718      	adds	r7, #24
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	20001180 	.word	0x20001180
 800dc80:	2000115c 	.word	0x2000115c
 800dc84:	20001110 	.word	0x20001110
 800dc88:	20001114 	.word	0x20001114
 800dc8c:	20001170 	.word	0x20001170
 800dc90:	20001178 	.word	0x20001178
 800dc94:	20001160 	.word	0x20001160
 800dc98:	20000c88 	.word	0x20000c88
 800dc9c:	20000c84 	.word	0x20000c84
 800dca0:	20001168 	.word	0x20001168
 800dca4:	2000116c 	.word	0x2000116c

0800dca8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dcae:	4b2a      	ldr	r3, [pc, #168]	; (800dd58 <vTaskSwitchContext+0xb0>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d003      	beq.n	800dcbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dcb6:	4b29      	ldr	r3, [pc, #164]	; (800dd5c <vTaskSwitchContext+0xb4>)
 800dcb8:	2201      	movs	r2, #1
 800dcba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dcbc:	e046      	b.n	800dd4c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800dcbe:	4b27      	ldr	r3, [pc, #156]	; (800dd5c <vTaskSwitchContext+0xb4>)
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800dcc4:	4b26      	ldr	r3, [pc, #152]	; (800dd60 <vTaskSwitchContext+0xb8>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	60fb      	str	r3, [r7, #12]
 800dcca:	e010      	b.n	800dcee <vTaskSwitchContext+0x46>
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d10a      	bne.n	800dce8 <vTaskSwitchContext+0x40>
	__asm volatile
 800dcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd6:	f383 8811 	msr	BASEPRI, r3
 800dcda:	f3bf 8f6f 	isb	sy
 800dcde:	f3bf 8f4f 	dsb	sy
 800dce2:	607b      	str	r3, [r7, #4]
}
 800dce4:	bf00      	nop
 800dce6:	e7fe      	b.n	800dce6 <vTaskSwitchContext+0x3e>
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	3b01      	subs	r3, #1
 800dcec:	60fb      	str	r3, [r7, #12]
 800dcee:	491d      	ldr	r1, [pc, #116]	; (800dd64 <vTaskSwitchContext+0xbc>)
 800dcf0:	68fa      	ldr	r2, [r7, #12]
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	4413      	add	r3, r2
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	440b      	add	r3, r1
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d0e4      	beq.n	800dccc <vTaskSwitchContext+0x24>
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	4613      	mov	r3, r2
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	4413      	add	r3, r2
 800dd0a:	009b      	lsls	r3, r3, #2
 800dd0c:	4a15      	ldr	r2, [pc, #84]	; (800dd64 <vTaskSwitchContext+0xbc>)
 800dd0e:	4413      	add	r3, r2
 800dd10:	60bb      	str	r3, [r7, #8]
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	685a      	ldr	r2, [r3, #4]
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	605a      	str	r2, [r3, #4]
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	685a      	ldr	r2, [r3, #4]
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	3308      	adds	r3, #8
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d104      	bne.n	800dd32 <vTaskSwitchContext+0x8a>
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	685a      	ldr	r2, [r3, #4]
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	605a      	str	r2, [r3, #4]
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	4a0b      	ldr	r2, [pc, #44]	; (800dd68 <vTaskSwitchContext+0xc0>)
 800dd3a:	6013      	str	r3, [r2, #0]
 800dd3c:	4a08      	ldr	r2, [pc, #32]	; (800dd60 <vTaskSwitchContext+0xb8>)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd42:	4b09      	ldr	r3, [pc, #36]	; (800dd68 <vTaskSwitchContext+0xc0>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	3354      	adds	r3, #84	; 0x54
 800dd48:	4a08      	ldr	r2, [pc, #32]	; (800dd6c <vTaskSwitchContext+0xc4>)
 800dd4a:	6013      	str	r3, [r2, #0]
}
 800dd4c:	bf00      	nop
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bc80      	pop	{r7}
 800dd54:	4770      	bx	lr
 800dd56:	bf00      	nop
 800dd58:	20001180 	.word	0x20001180
 800dd5c:	2000116c 	.word	0x2000116c
 800dd60:	20001160 	.word	0x20001160
 800dd64:	20000c88 	.word	0x20000c88
 800dd68:	20000c84 	.word	0x20000c84
 800dd6c:	20000188 	.word	0x20000188

0800dd70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d10a      	bne.n	800dd96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd84:	f383 8811 	msr	BASEPRI, r3
 800dd88:	f3bf 8f6f 	isb	sy
 800dd8c:	f3bf 8f4f 	dsb	sy
 800dd90:	60fb      	str	r3, [r7, #12]
}
 800dd92:	bf00      	nop
 800dd94:	e7fe      	b.n	800dd94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd96:	4b07      	ldr	r3, [pc, #28]	; (800ddb4 <vTaskPlaceOnEventList+0x44>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	3318      	adds	r3, #24
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7fe fe70 	bl	800ca84 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dda4:	2101      	movs	r1, #1
 800dda6:	6838      	ldr	r0, [r7, #0]
 800dda8:	f000 fa84 	bl	800e2b4 <prvAddCurrentTaskToDelayedList>
}
 800ddac:	bf00      	nop
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	20000c84 	.word	0x20000c84

0800ddb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b086      	sub	sp, #24
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d10a      	bne.n	800dde0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ddca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddce:	f383 8811 	msr	BASEPRI, r3
 800ddd2:	f3bf 8f6f 	isb	sy
 800ddd6:	f3bf 8f4f 	dsb	sy
 800ddda:	617b      	str	r3, [r7, #20]
}
 800dddc:	bf00      	nop
 800ddde:	e7fe      	b.n	800ddde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dde0:	4b0a      	ldr	r3, [pc, #40]	; (800de0c <vTaskPlaceOnEventListRestricted+0x54>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	3318      	adds	r3, #24
 800dde6:	4619      	mov	r1, r3
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f7fe fe28 	bl	800ca3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d002      	beq.n	800ddfa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ddf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ddf8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ddfa:	6879      	ldr	r1, [r7, #4]
 800ddfc:	68b8      	ldr	r0, [r7, #8]
 800ddfe:	f000 fa59 	bl	800e2b4 <prvAddCurrentTaskToDelayedList>
	}
 800de02:	bf00      	nop
 800de04:	3718      	adds	r7, #24
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	20000c84 	.word	0x20000c84

0800de10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	68db      	ldr	r3, [r3, #12]
 800de1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d10a      	bne.n	800de3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800de26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2a:	f383 8811 	msr	BASEPRI, r3
 800de2e:	f3bf 8f6f 	isb	sy
 800de32:	f3bf 8f4f 	dsb	sy
 800de36:	60fb      	str	r3, [r7, #12]
}
 800de38:	bf00      	nop
 800de3a:	e7fe      	b.n	800de3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	3318      	adds	r3, #24
 800de40:	4618      	mov	r0, r3
 800de42:	f7fe fe57 	bl	800caf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de46:	4b1e      	ldr	r3, [pc, #120]	; (800dec0 <xTaskRemoveFromEventList+0xb0>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d11d      	bne.n	800de8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	3304      	adds	r3, #4
 800de52:	4618      	mov	r0, r3
 800de54:	f7fe fe4e 	bl	800caf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de5c:	4b19      	ldr	r3, [pc, #100]	; (800dec4 <xTaskRemoveFromEventList+0xb4>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	429a      	cmp	r2, r3
 800de62:	d903      	bls.n	800de6c <xTaskRemoveFromEventList+0x5c>
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de68:	4a16      	ldr	r2, [pc, #88]	; (800dec4 <xTaskRemoveFromEventList+0xb4>)
 800de6a:	6013      	str	r3, [r2, #0]
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de70:	4613      	mov	r3, r2
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	4413      	add	r3, r2
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	4a13      	ldr	r2, [pc, #76]	; (800dec8 <xTaskRemoveFromEventList+0xb8>)
 800de7a:	441a      	add	r2, r3
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	3304      	adds	r3, #4
 800de80:	4619      	mov	r1, r3
 800de82:	4610      	mov	r0, r2
 800de84:	f7fe fddb 	bl	800ca3e <vListInsertEnd>
 800de88:	e005      	b.n	800de96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	3318      	adds	r3, #24
 800de8e:	4619      	mov	r1, r3
 800de90:	480e      	ldr	r0, [pc, #56]	; (800decc <xTaskRemoveFromEventList+0xbc>)
 800de92:	f7fe fdd4 	bl	800ca3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de9a:	4b0d      	ldr	r3, [pc, #52]	; (800ded0 <xTaskRemoveFromEventList+0xc0>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d905      	bls.n	800deb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dea4:	2301      	movs	r3, #1
 800dea6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dea8:	4b0a      	ldr	r3, [pc, #40]	; (800ded4 <xTaskRemoveFromEventList+0xc4>)
 800deaa:	2201      	movs	r2, #1
 800deac:	601a      	str	r2, [r3, #0]
 800deae:	e001      	b.n	800deb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800deb0:	2300      	movs	r3, #0
 800deb2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800deb4:	697b      	ldr	r3, [r7, #20]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3718      	adds	r7, #24
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	20001180 	.word	0x20001180
 800dec4:	20001160 	.word	0x20001160
 800dec8:	20000c88 	.word	0x20000c88
 800decc:	20001118 	.word	0x20001118
 800ded0:	20000c84 	.word	0x20000c84
 800ded4:	2000116c 	.word	0x2000116c

0800ded8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dee0:	4b06      	ldr	r3, [pc, #24]	; (800defc <vTaskInternalSetTimeOutState+0x24>)
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dee8:	4b05      	ldr	r3, [pc, #20]	; (800df00 <vTaskInternalSetTimeOutState+0x28>)
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	605a      	str	r2, [r3, #4]
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	bc80      	pop	{r7}
 800def8:	4770      	bx	lr
 800defa:	bf00      	nop
 800defc:	20001170 	.word	0x20001170
 800df00:	2000115c 	.word	0x2000115c

0800df04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b088      	sub	sp, #32
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d10a      	bne.n	800df2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800df14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df18:	f383 8811 	msr	BASEPRI, r3
 800df1c:	f3bf 8f6f 	isb	sy
 800df20:	f3bf 8f4f 	dsb	sy
 800df24:	613b      	str	r3, [r7, #16]
}
 800df26:	bf00      	nop
 800df28:	e7fe      	b.n	800df28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d10a      	bne.n	800df46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800df30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df34:	f383 8811 	msr	BASEPRI, r3
 800df38:	f3bf 8f6f 	isb	sy
 800df3c:	f3bf 8f4f 	dsb	sy
 800df40:	60fb      	str	r3, [r7, #12]
}
 800df42:	bf00      	nop
 800df44:	e7fe      	b.n	800df44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800df46:	f000 fe09 	bl	800eb5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800df4a:	4b1d      	ldr	r3, [pc, #116]	; (800dfc0 <xTaskCheckForTimeOut+0xbc>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	69ba      	ldr	r2, [r7, #24]
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df62:	d102      	bne.n	800df6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df64:	2300      	movs	r3, #0
 800df66:	61fb      	str	r3, [r7, #28]
 800df68:	e023      	b.n	800dfb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	4b15      	ldr	r3, [pc, #84]	; (800dfc4 <xTaskCheckForTimeOut+0xc0>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	429a      	cmp	r2, r3
 800df74:	d007      	beq.n	800df86 <xTaskCheckForTimeOut+0x82>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	69ba      	ldr	r2, [r7, #24]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d302      	bcc.n	800df86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df80:	2301      	movs	r3, #1
 800df82:	61fb      	str	r3, [r7, #28]
 800df84:	e015      	b.n	800dfb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	697a      	ldr	r2, [r7, #20]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d20b      	bcs.n	800dfa8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	1ad2      	subs	r2, r2, r3
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7ff ff9b 	bl	800ded8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	61fb      	str	r3, [r7, #28]
 800dfa6:	e004      	b.n	800dfb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dfb2:	f000 fe03 	bl	800ebbc <vPortExitCritical>

	return xReturn;
 800dfb6:	69fb      	ldr	r3, [r7, #28]
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3720      	adds	r7, #32
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}
 800dfc0:	2000115c 	.word	0x2000115c
 800dfc4:	20001170 	.word	0x20001170

0800dfc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dfc8:	b480      	push	{r7}
 800dfca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dfcc:	4b03      	ldr	r3, [pc, #12]	; (800dfdc <vTaskMissedYield+0x14>)
 800dfce:	2201      	movs	r2, #1
 800dfd0:	601a      	str	r2, [r3, #0]
}
 800dfd2:	bf00      	nop
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bc80      	pop	{r7}
 800dfd8:	4770      	bx	lr
 800dfda:	bf00      	nop
 800dfdc:	2000116c 	.word	0x2000116c

0800dfe0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dfe8:	f000 f852 	bl	800e090 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dfec:	4b06      	ldr	r3, [pc, #24]	; (800e008 <prvIdleTask+0x28>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d9f9      	bls.n	800dfe8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dff4:	4b05      	ldr	r3, [pc, #20]	; (800e00c <prvIdleTask+0x2c>)
 800dff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dffa:	601a      	str	r2, [r3, #0]
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e004:	e7f0      	b.n	800dfe8 <prvIdleTask+0x8>
 800e006:	bf00      	nop
 800e008:	20000c88 	.word	0x20000c88
 800e00c:	e000ed04 	.word	0xe000ed04

0800e010 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e016:	2300      	movs	r3, #0
 800e018:	607b      	str	r3, [r7, #4]
 800e01a:	e00c      	b.n	800e036 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	4613      	mov	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4413      	add	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	4a12      	ldr	r2, [pc, #72]	; (800e070 <prvInitialiseTaskLists+0x60>)
 800e028:	4413      	add	r3, r2
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fe fcdc 	bl	800c9e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	3301      	adds	r3, #1
 800e034:	607b      	str	r3, [r7, #4]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2b37      	cmp	r3, #55	; 0x37
 800e03a:	d9ef      	bls.n	800e01c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e03c:	480d      	ldr	r0, [pc, #52]	; (800e074 <prvInitialiseTaskLists+0x64>)
 800e03e:	f7fe fcd3 	bl	800c9e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e042:	480d      	ldr	r0, [pc, #52]	; (800e078 <prvInitialiseTaskLists+0x68>)
 800e044:	f7fe fcd0 	bl	800c9e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e048:	480c      	ldr	r0, [pc, #48]	; (800e07c <prvInitialiseTaskLists+0x6c>)
 800e04a:	f7fe fccd 	bl	800c9e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e04e:	480c      	ldr	r0, [pc, #48]	; (800e080 <prvInitialiseTaskLists+0x70>)
 800e050:	f7fe fcca 	bl	800c9e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e054:	480b      	ldr	r0, [pc, #44]	; (800e084 <prvInitialiseTaskLists+0x74>)
 800e056:	f7fe fcc7 	bl	800c9e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e05a:	4b0b      	ldr	r3, [pc, #44]	; (800e088 <prvInitialiseTaskLists+0x78>)
 800e05c:	4a05      	ldr	r2, [pc, #20]	; (800e074 <prvInitialiseTaskLists+0x64>)
 800e05e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e060:	4b0a      	ldr	r3, [pc, #40]	; (800e08c <prvInitialiseTaskLists+0x7c>)
 800e062:	4a05      	ldr	r2, [pc, #20]	; (800e078 <prvInitialiseTaskLists+0x68>)
 800e064:	601a      	str	r2, [r3, #0]
}
 800e066:	bf00      	nop
 800e068:	3708      	adds	r7, #8
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	20000c88 	.word	0x20000c88
 800e074:	200010e8 	.word	0x200010e8
 800e078:	200010fc 	.word	0x200010fc
 800e07c:	20001118 	.word	0x20001118
 800e080:	2000112c 	.word	0x2000112c
 800e084:	20001144 	.word	0x20001144
 800e088:	20001110 	.word	0x20001110
 800e08c:	20001114 	.word	0x20001114

0800e090 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e096:	e019      	b.n	800e0cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e098:	f000 fd60 	bl	800eb5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e09c:	4b10      	ldr	r3, [pc, #64]	; (800e0e0 <prvCheckTasksWaitingTermination+0x50>)
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	68db      	ldr	r3, [r3, #12]
 800e0a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	3304      	adds	r3, #4
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fe fd23 	bl	800caf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e0ae:	4b0d      	ldr	r3, [pc, #52]	; (800e0e4 <prvCheckTasksWaitingTermination+0x54>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	3b01      	subs	r3, #1
 800e0b4:	4a0b      	ldr	r2, [pc, #44]	; (800e0e4 <prvCheckTasksWaitingTermination+0x54>)
 800e0b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e0b8:	4b0b      	ldr	r3, [pc, #44]	; (800e0e8 <prvCheckTasksWaitingTermination+0x58>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	4a0a      	ldr	r2, [pc, #40]	; (800e0e8 <prvCheckTasksWaitingTermination+0x58>)
 800e0c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e0c2:	f000 fd7b 	bl	800ebbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 f810 	bl	800e0ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0cc:	4b06      	ldr	r3, [pc, #24]	; (800e0e8 <prvCheckTasksWaitingTermination+0x58>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d1e1      	bne.n	800e098 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e0d4:	bf00      	nop
 800e0d6:	bf00      	nop
 800e0d8:	3708      	adds	r7, #8
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	2000112c 	.word	0x2000112c
 800e0e4:	20001158 	.word	0x20001158
 800e0e8:	20001140 	.word	0x20001140

0800e0ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	3354      	adds	r3, #84	; 0x54
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f001 fea9 	bl	800fe50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e104:	2b00      	cmp	r3, #0
 800e106:	d108      	bne.n	800e11a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e10c:	4618      	mov	r0, r3
 800e10e:	f000 fee9 	bl	800eee4 <vPortFree>
				vPortFree( pxTCB );
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f000 fee6 	bl	800eee4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e118:	e018      	b.n	800e14c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e120:	2b01      	cmp	r3, #1
 800e122:	d103      	bne.n	800e12c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 fedd 	bl	800eee4 <vPortFree>
	}
 800e12a:	e00f      	b.n	800e14c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e132:	2b02      	cmp	r3, #2
 800e134:	d00a      	beq.n	800e14c <prvDeleteTCB+0x60>
	__asm volatile
 800e136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13a:	f383 8811 	msr	BASEPRI, r3
 800e13e:	f3bf 8f6f 	isb	sy
 800e142:	f3bf 8f4f 	dsb	sy
 800e146:	60fb      	str	r3, [r7, #12]
}
 800e148:	bf00      	nop
 800e14a:	e7fe      	b.n	800e14a <prvDeleteTCB+0x5e>
	}
 800e14c:	bf00      	nop
 800e14e:	3710      	adds	r7, #16
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e15a:	4b0e      	ldr	r3, [pc, #56]	; (800e194 <prvResetNextTaskUnblockTime+0x40>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d101      	bne.n	800e168 <prvResetNextTaskUnblockTime+0x14>
 800e164:	2301      	movs	r3, #1
 800e166:	e000      	b.n	800e16a <prvResetNextTaskUnblockTime+0x16>
 800e168:	2300      	movs	r3, #0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d004      	beq.n	800e178 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e16e:	4b0a      	ldr	r3, [pc, #40]	; (800e198 <prvResetNextTaskUnblockTime+0x44>)
 800e170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e174:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e176:	e008      	b.n	800e18a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e178:	4b06      	ldr	r3, [pc, #24]	; (800e194 <prvResetNextTaskUnblockTime+0x40>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	68db      	ldr	r3, [r3, #12]
 800e17e:	68db      	ldr	r3, [r3, #12]
 800e180:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	4a04      	ldr	r2, [pc, #16]	; (800e198 <prvResetNextTaskUnblockTime+0x44>)
 800e188:	6013      	str	r3, [r2, #0]
}
 800e18a:	bf00      	nop
 800e18c:	370c      	adds	r7, #12
 800e18e:	46bd      	mov	sp, r7
 800e190:	bc80      	pop	{r7}
 800e192:	4770      	bx	lr
 800e194:	20001110 	.word	0x20001110
 800e198:	20001178 	.word	0x20001178

0800e19c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e1a2:	4b0b      	ldr	r3, [pc, #44]	; (800e1d0 <xTaskGetSchedulerState+0x34>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d102      	bne.n	800e1b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	607b      	str	r3, [r7, #4]
 800e1ae:	e008      	b.n	800e1c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1b0:	4b08      	ldr	r3, [pc, #32]	; (800e1d4 <xTaskGetSchedulerState+0x38>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d102      	bne.n	800e1be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e1b8:	2302      	movs	r3, #2
 800e1ba:	607b      	str	r3, [r7, #4]
 800e1bc:	e001      	b.n	800e1c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e1c2:	687b      	ldr	r3, [r7, #4]
	}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bc80      	pop	{r7}
 800e1cc:	4770      	bx	lr
 800e1ce:	bf00      	nop
 800e1d0:	20001164 	.word	0x20001164
 800e1d4:	20001180 	.word	0x20001180

0800e1d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d056      	beq.n	800e29c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e1ee:	4b2e      	ldr	r3, [pc, #184]	; (800e2a8 <xTaskPriorityDisinherit+0xd0>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	693a      	ldr	r2, [r7, #16]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d00a      	beq.n	800e20e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fc:	f383 8811 	msr	BASEPRI, r3
 800e200:	f3bf 8f6f 	isb	sy
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	60fb      	str	r3, [r7, #12]
}
 800e20a:	bf00      	nop
 800e20c:	e7fe      	b.n	800e20c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e212:	2b00      	cmp	r3, #0
 800e214:	d10a      	bne.n	800e22c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21a:	f383 8811 	msr	BASEPRI, r3
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	60bb      	str	r3, [r7, #8]
}
 800e228:	bf00      	nop
 800e22a:	e7fe      	b.n	800e22a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e230:	1e5a      	subs	r2, r3, #1
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e23e:	429a      	cmp	r2, r3
 800e240:	d02c      	beq.n	800e29c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e246:	2b00      	cmp	r3, #0
 800e248:	d128      	bne.n	800e29c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	3304      	adds	r3, #4
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fe fc50 	bl	800caf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e260:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e26c:	4b0f      	ldr	r3, [pc, #60]	; (800e2ac <xTaskPriorityDisinherit+0xd4>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	429a      	cmp	r2, r3
 800e272:	d903      	bls.n	800e27c <xTaskPriorityDisinherit+0xa4>
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e278:	4a0c      	ldr	r2, [pc, #48]	; (800e2ac <xTaskPriorityDisinherit+0xd4>)
 800e27a:	6013      	str	r3, [r2, #0]
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e280:	4613      	mov	r3, r2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	4413      	add	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4a09      	ldr	r2, [pc, #36]	; (800e2b0 <xTaskPriorityDisinherit+0xd8>)
 800e28a:	441a      	add	r2, r3
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	3304      	adds	r3, #4
 800e290:	4619      	mov	r1, r3
 800e292:	4610      	mov	r0, r2
 800e294:	f7fe fbd3 	bl	800ca3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e298:	2301      	movs	r3, #1
 800e29a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e29c:	697b      	ldr	r3, [r7, #20]
	}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3718      	adds	r7, #24
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	20000c84 	.word	0x20000c84
 800e2ac:	20001160 	.word	0x20001160
 800e2b0:	20000c88 	.word	0x20000c88

0800e2b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e2be:	4b21      	ldr	r3, [pc, #132]	; (800e344 <prvAddCurrentTaskToDelayedList+0x90>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2c4:	4b20      	ldr	r3, [pc, #128]	; (800e348 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	3304      	adds	r3, #4
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7fe fc12 	bl	800caf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2d6:	d10a      	bne.n	800e2ee <prvAddCurrentTaskToDelayedList+0x3a>
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d007      	beq.n	800e2ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2de:	4b1a      	ldr	r3, [pc, #104]	; (800e348 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	3304      	adds	r3, #4
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	4819      	ldr	r0, [pc, #100]	; (800e34c <prvAddCurrentTaskToDelayedList+0x98>)
 800e2e8:	f7fe fba9 	bl	800ca3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e2ec:	e026      	b.n	800e33c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e2ee:	68fa      	ldr	r2, [r7, #12]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e2f6:	4b14      	ldr	r3, [pc, #80]	; (800e348 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	68ba      	ldr	r2, [r7, #8]
 800e2fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e2fe:	68ba      	ldr	r2, [r7, #8]
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	429a      	cmp	r2, r3
 800e304:	d209      	bcs.n	800e31a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e306:	4b12      	ldr	r3, [pc, #72]	; (800e350 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	4b0f      	ldr	r3, [pc, #60]	; (800e348 <prvAddCurrentTaskToDelayedList+0x94>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	3304      	adds	r3, #4
 800e310:	4619      	mov	r1, r3
 800e312:	4610      	mov	r0, r2
 800e314:	f7fe fbb6 	bl	800ca84 <vListInsert>
}
 800e318:	e010      	b.n	800e33c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e31a:	4b0e      	ldr	r3, [pc, #56]	; (800e354 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e31c:	681a      	ldr	r2, [r3, #0]
 800e31e:	4b0a      	ldr	r3, [pc, #40]	; (800e348 <prvAddCurrentTaskToDelayedList+0x94>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	3304      	adds	r3, #4
 800e324:	4619      	mov	r1, r3
 800e326:	4610      	mov	r0, r2
 800e328:	f7fe fbac 	bl	800ca84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e32c:	4b0a      	ldr	r3, [pc, #40]	; (800e358 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	68ba      	ldr	r2, [r7, #8]
 800e332:	429a      	cmp	r2, r3
 800e334:	d202      	bcs.n	800e33c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e336:	4a08      	ldr	r2, [pc, #32]	; (800e358 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	6013      	str	r3, [r2, #0]
}
 800e33c:	bf00      	nop
 800e33e:	3710      	adds	r7, #16
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	2000115c 	.word	0x2000115c
 800e348:	20000c84 	.word	0x20000c84
 800e34c:	20001144 	.word	0x20001144
 800e350:	20001114 	.word	0x20001114
 800e354:	20001110 	.word	0x20001110
 800e358:	20001178 	.word	0x20001178

0800e35c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b08a      	sub	sp, #40	; 0x28
 800e360:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e362:	2300      	movs	r3, #0
 800e364:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e366:	f000 facb 	bl	800e900 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e36a:	4b1c      	ldr	r3, [pc, #112]	; (800e3dc <xTimerCreateTimerTask+0x80>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d021      	beq.n	800e3b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e372:	2300      	movs	r3, #0
 800e374:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e376:	2300      	movs	r3, #0
 800e378:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e37a:	1d3a      	adds	r2, r7, #4
 800e37c:	f107 0108 	add.w	r1, r7, #8
 800e380:	f107 030c 	add.w	r3, r7, #12
 800e384:	4618      	mov	r0, r3
 800e386:	f7fe fb15 	bl	800c9b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e38a:	6879      	ldr	r1, [r7, #4]
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	68fa      	ldr	r2, [r7, #12]
 800e390:	9202      	str	r2, [sp, #8]
 800e392:	9301      	str	r3, [sp, #4]
 800e394:	2302      	movs	r3, #2
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	2300      	movs	r3, #0
 800e39a:	460a      	mov	r2, r1
 800e39c:	4910      	ldr	r1, [pc, #64]	; (800e3e0 <xTimerCreateTimerTask+0x84>)
 800e39e:	4811      	ldr	r0, [pc, #68]	; (800e3e4 <xTimerCreateTimerTask+0x88>)
 800e3a0:	f7ff f8b6 	bl	800d510 <xTaskCreateStatic>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	4a10      	ldr	r2, [pc, #64]	; (800e3e8 <xTimerCreateTimerTask+0x8c>)
 800e3a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e3aa:	4b0f      	ldr	r3, [pc, #60]	; (800e3e8 <xTimerCreateTimerTask+0x8c>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d001      	beq.n	800e3b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d10a      	bne.n	800e3d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c0:	f383 8811 	msr	BASEPRI, r3
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	f3bf 8f4f 	dsb	sy
 800e3cc:	613b      	str	r3, [r7, #16]
}
 800e3ce:	bf00      	nop
 800e3d0:	e7fe      	b.n	800e3d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e3d2:	697b      	ldr	r3, [r7, #20]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3718      	adds	r7, #24
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	200011b4 	.word	0x200011b4
 800e3e0:	080106dc 	.word	0x080106dc
 800e3e4:	0800e509 	.word	0x0800e509
 800e3e8:	200011b8 	.word	0x200011b8

0800e3ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b08a      	sub	sp, #40	; 0x28
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	607a      	str	r2, [r7, #4]
 800e3f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d10a      	bne.n	800e41a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e408:	f383 8811 	msr	BASEPRI, r3
 800e40c:	f3bf 8f6f 	isb	sy
 800e410:	f3bf 8f4f 	dsb	sy
 800e414:	623b      	str	r3, [r7, #32]
}
 800e416:	bf00      	nop
 800e418:	e7fe      	b.n	800e418 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e41a:	4b1a      	ldr	r3, [pc, #104]	; (800e484 <xTimerGenericCommand+0x98>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d02a      	beq.n	800e478 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	2b05      	cmp	r3, #5
 800e432:	dc18      	bgt.n	800e466 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e434:	f7ff feb2 	bl	800e19c <xTaskGetSchedulerState>
 800e438:	4603      	mov	r3, r0
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d109      	bne.n	800e452 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e43e:	4b11      	ldr	r3, [pc, #68]	; (800e484 <xTimerGenericCommand+0x98>)
 800e440:	6818      	ldr	r0, [r3, #0]
 800e442:	f107 0110 	add.w	r1, r7, #16
 800e446:	2300      	movs	r3, #0
 800e448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e44a:	f7fe fc7f 	bl	800cd4c <xQueueGenericSend>
 800e44e:	6278      	str	r0, [r7, #36]	; 0x24
 800e450:	e012      	b.n	800e478 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e452:	4b0c      	ldr	r3, [pc, #48]	; (800e484 <xTimerGenericCommand+0x98>)
 800e454:	6818      	ldr	r0, [r3, #0]
 800e456:	f107 0110 	add.w	r1, r7, #16
 800e45a:	2300      	movs	r3, #0
 800e45c:	2200      	movs	r2, #0
 800e45e:	f7fe fc75 	bl	800cd4c <xQueueGenericSend>
 800e462:	6278      	str	r0, [r7, #36]	; 0x24
 800e464:	e008      	b.n	800e478 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e466:	4b07      	ldr	r3, [pc, #28]	; (800e484 <xTimerGenericCommand+0x98>)
 800e468:	6818      	ldr	r0, [r3, #0]
 800e46a:	f107 0110 	add.w	r1, r7, #16
 800e46e:	2300      	movs	r3, #0
 800e470:	683a      	ldr	r2, [r7, #0]
 800e472:	f7fe fd69 	bl	800cf48 <xQueueGenericSendFromISR>
 800e476:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3728      	adds	r7, #40	; 0x28
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	200011b4 	.word	0x200011b4

0800e488 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b088      	sub	sp, #32
 800e48c:	af02      	add	r7, sp, #8
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e492:	4b1c      	ldr	r3, [pc, #112]	; (800e504 <prvProcessExpiredTimer+0x7c>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	68db      	ldr	r3, [r3, #12]
 800e49a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	3304      	adds	r3, #4
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7fe fb27 	bl	800caf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	69db      	ldr	r3, [r3, #28]
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d122      	bne.n	800e4f4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	699a      	ldr	r2, [r3, #24]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	18d1      	adds	r1, r2, r3
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	683a      	ldr	r2, [r7, #0]
 800e4ba:	6978      	ldr	r0, [r7, #20]
 800e4bc:	f000 f8c8 	bl	800e650 <prvInsertTimerInActiveList>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d016      	beq.n	800e4f4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	9300      	str	r3, [sp, #0]
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	2100      	movs	r1, #0
 800e4d0:	6978      	ldr	r0, [r7, #20]
 800e4d2:	f7ff ff8b 	bl	800e3ec <xTimerGenericCommand>
 800e4d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d10a      	bne.n	800e4f4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800e4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	60fb      	str	r3, [r7, #12]
}
 800e4f0:	bf00      	nop
 800e4f2:	e7fe      	b.n	800e4f2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f8:	6978      	ldr	r0, [r7, #20]
 800e4fa:	4798      	blx	r3
}
 800e4fc:	bf00      	nop
 800e4fe:	3718      	adds	r7, #24
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	200011ac 	.word	0x200011ac

0800e508 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e510:	f107 0308 	add.w	r3, r7, #8
 800e514:	4618      	mov	r0, r3
 800e516:	f000 f857 	bl	800e5c8 <prvGetNextExpireTime>
 800e51a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	4619      	mov	r1, r3
 800e520:	68f8      	ldr	r0, [r7, #12]
 800e522:	f000 f803 	bl	800e52c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e526:	f000 f8d5 	bl	800e6d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e52a:	e7f1      	b.n	800e510 <prvTimerTask+0x8>

0800e52c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e536:	f7ff fa3f 	bl	800d9b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e53a:	f107 0308 	add.w	r3, r7, #8
 800e53e:	4618      	mov	r0, r3
 800e540:	f000 f866 	bl	800e610 <prvSampleTimeNow>
 800e544:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d130      	bne.n	800e5ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d10a      	bne.n	800e568 <prvProcessTimerOrBlockTask+0x3c>
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	429a      	cmp	r2, r3
 800e558:	d806      	bhi.n	800e568 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e55a:	f7ff fa3b 	bl	800d9d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e55e:	68f9      	ldr	r1, [r7, #12]
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f7ff ff91 	bl	800e488 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e566:	e024      	b.n	800e5b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d008      	beq.n	800e580 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e56e:	4b13      	ldr	r3, [pc, #76]	; (800e5bc <prvProcessTimerOrBlockTask+0x90>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	bf0c      	ite	eq
 800e578:	2301      	moveq	r3, #1
 800e57a:	2300      	movne	r3, #0
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e580:	4b0f      	ldr	r3, [pc, #60]	; (800e5c0 <prvProcessTimerOrBlockTask+0x94>)
 800e582:	6818      	ldr	r0, [r3, #0]
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	1ad3      	subs	r3, r2, r3
 800e58a:	683a      	ldr	r2, [r7, #0]
 800e58c:	4619      	mov	r1, r3
 800e58e:	f7fe ff8b 	bl	800d4a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e592:	f7ff fa1f 	bl	800d9d4 <xTaskResumeAll>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10a      	bne.n	800e5b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e59c:	4b09      	ldr	r3, [pc, #36]	; (800e5c4 <prvProcessTimerOrBlockTask+0x98>)
 800e59e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5a2:	601a      	str	r2, [r3, #0]
 800e5a4:	f3bf 8f4f 	dsb	sy
 800e5a8:	f3bf 8f6f 	isb	sy
}
 800e5ac:	e001      	b.n	800e5b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e5ae:	f7ff fa11 	bl	800d9d4 <xTaskResumeAll>
}
 800e5b2:	bf00      	nop
 800e5b4:	3710      	adds	r7, #16
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	200011b0 	.word	0x200011b0
 800e5c0:	200011b4 	.word	0x200011b4
 800e5c4:	e000ed04 	.word	0xe000ed04

0800e5c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b085      	sub	sp, #20
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e5d0:	4b0e      	ldr	r3, [pc, #56]	; (800e60c <prvGetNextExpireTime+0x44>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	bf0c      	ite	eq
 800e5da:	2301      	moveq	r3, #1
 800e5dc:	2300      	movne	r3, #0
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d105      	bne.n	800e5fa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5ee:	4b07      	ldr	r3, [pc, #28]	; (800e60c <prvGetNextExpireTime+0x44>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	68db      	ldr	r3, [r3, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	60fb      	str	r3, [r7, #12]
 800e5f8:	e001      	b.n	800e5fe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
}
 800e600:	4618      	mov	r0, r3
 800e602:	3714      	adds	r7, #20
 800e604:	46bd      	mov	sp, r7
 800e606:	bc80      	pop	{r7}
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop
 800e60c:	200011ac 	.word	0x200011ac

0800e610 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e618:	f7ff fa7a 	bl	800db10 <xTaskGetTickCount>
 800e61c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e61e:	4b0b      	ldr	r3, [pc, #44]	; (800e64c <prvSampleTimeNow+0x3c>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	68fa      	ldr	r2, [r7, #12]
 800e624:	429a      	cmp	r2, r3
 800e626:	d205      	bcs.n	800e634 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e628:	f000 f908 	bl	800e83c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2201      	movs	r2, #1
 800e630:	601a      	str	r2, [r3, #0]
 800e632:	e002      	b.n	800e63a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e63a:	4a04      	ldr	r2, [pc, #16]	; (800e64c <prvSampleTimeNow+0x3c>)
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e640:	68fb      	ldr	r3, [r7, #12]
}
 800e642:	4618      	mov	r0, r3
 800e644:	3710      	adds	r7, #16
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	200011bc 	.word	0x200011bc

0800e650 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b086      	sub	sp, #24
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	607a      	str	r2, [r7, #4]
 800e65c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e65e:	2300      	movs	r3, #0
 800e660:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	68ba      	ldr	r2, [r7, #8]
 800e666:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	68fa      	ldr	r2, [r7, #12]
 800e66c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e66e:	68ba      	ldr	r2, [r7, #8]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	429a      	cmp	r2, r3
 800e674:	d812      	bhi.n	800e69c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	1ad2      	subs	r2, r2, r3
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	699b      	ldr	r3, [r3, #24]
 800e680:	429a      	cmp	r2, r3
 800e682:	d302      	bcc.n	800e68a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e684:	2301      	movs	r3, #1
 800e686:	617b      	str	r3, [r7, #20]
 800e688:	e01b      	b.n	800e6c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e68a:	4b10      	ldr	r3, [pc, #64]	; (800e6cc <prvInsertTimerInActiveList+0x7c>)
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	3304      	adds	r3, #4
 800e692:	4619      	mov	r1, r3
 800e694:	4610      	mov	r0, r2
 800e696:	f7fe f9f5 	bl	800ca84 <vListInsert>
 800e69a:	e012      	b.n	800e6c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d206      	bcs.n	800e6b2 <prvInsertTimerInActiveList+0x62>
 800e6a4:	68ba      	ldr	r2, [r7, #8]
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d302      	bcc.n	800e6b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	617b      	str	r3, [r7, #20]
 800e6b0:	e007      	b.n	800e6c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e6b2:	4b07      	ldr	r3, [pc, #28]	; (800e6d0 <prvInsertTimerInActiveList+0x80>)
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	3304      	adds	r3, #4
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	4610      	mov	r0, r2
 800e6be:	f7fe f9e1 	bl	800ca84 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e6c2:	697b      	ldr	r3, [r7, #20]
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3718      	adds	r7, #24
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	200011b0 	.word	0x200011b0
 800e6d0:	200011ac 	.word	0x200011ac

0800e6d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b08e      	sub	sp, #56	; 0x38
 800e6d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6da:	e09d      	b.n	800e818 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	da18      	bge.n	800e714 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e6e2:	1d3b      	adds	r3, r7, #4
 800e6e4:	3304      	adds	r3, #4
 800e6e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d10a      	bne.n	800e704 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f2:	f383 8811 	msr	BASEPRI, r3
 800e6f6:	f3bf 8f6f 	isb	sy
 800e6fa:	f3bf 8f4f 	dsb	sy
 800e6fe:	61fb      	str	r3, [r7, #28]
}
 800e700:	bf00      	nop
 800e702:	e7fe      	b.n	800e702 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e70a:	6850      	ldr	r0, [r2, #4]
 800e70c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e70e:	6892      	ldr	r2, [r2, #8]
 800e710:	4611      	mov	r1, r2
 800e712:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	db7d      	blt.n	800e816 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e720:	695b      	ldr	r3, [r3, #20]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d004      	beq.n	800e730 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e728:	3304      	adds	r3, #4
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fe f9e2 	bl	800caf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e730:	463b      	mov	r3, r7
 800e732:	4618      	mov	r0, r3
 800e734:	f7ff ff6c 	bl	800e610 <prvSampleTimeNow>
 800e738:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2b09      	cmp	r3, #9
 800e73e:	d86b      	bhi.n	800e818 <prvProcessReceivedCommands+0x144>
 800e740:	a201      	add	r2, pc, #4	; (adr r2, 800e748 <prvProcessReceivedCommands+0x74>)
 800e742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e746:	bf00      	nop
 800e748:	0800e771 	.word	0x0800e771
 800e74c:	0800e771 	.word	0x0800e771
 800e750:	0800e771 	.word	0x0800e771
 800e754:	0800e819 	.word	0x0800e819
 800e758:	0800e7cd 	.word	0x0800e7cd
 800e75c:	0800e805 	.word	0x0800e805
 800e760:	0800e771 	.word	0x0800e771
 800e764:	0800e771 	.word	0x0800e771
 800e768:	0800e819 	.word	0x0800e819
 800e76c:	0800e7cd 	.word	0x0800e7cd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e770:	68ba      	ldr	r2, [r7, #8]
 800e772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e774:	699b      	ldr	r3, [r3, #24]
 800e776:	18d1      	adds	r1, r2, r3
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e77c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e77e:	f7ff ff67 	bl	800e650 <prvInsertTimerInActiveList>
 800e782:	4603      	mov	r3, r0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d047      	beq.n	800e818 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e78e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e792:	69db      	ldr	r3, [r3, #28]
 800e794:	2b01      	cmp	r3, #1
 800e796:	d13f      	bne.n	800e818 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e798:	68ba      	ldr	r2, [r7, #8]
 800e79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79c:	699b      	ldr	r3, [r3, #24]
 800e79e:	441a      	add	r2, r3
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	9300      	str	r3, [sp, #0]
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	2100      	movs	r1, #0
 800e7a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7aa:	f7ff fe1f 	bl	800e3ec <xTimerGenericCommand>
 800e7ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e7b0:	6a3b      	ldr	r3, [r7, #32]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d130      	bne.n	800e818 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800e7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ba:	f383 8811 	msr	BASEPRI, r3
 800e7be:	f3bf 8f6f 	isb	sy
 800e7c2:	f3bf 8f4f 	dsb	sy
 800e7c6:	61bb      	str	r3, [r7, #24]
}
 800e7c8:	bf00      	nop
 800e7ca:	e7fe      	b.n	800e7ca <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e7cc:	68ba      	ldr	r2, [r7, #8]
 800e7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d4:	699b      	ldr	r3, [r3, #24]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d10a      	bne.n	800e7f0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800e7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7de:	f383 8811 	msr	BASEPRI, r3
 800e7e2:	f3bf 8f6f 	isb	sy
 800e7e6:	f3bf 8f4f 	dsb	sy
 800e7ea:	617b      	str	r3, [r7, #20]
}
 800e7ec:	bf00      	nop
 800e7ee:	e7fe      	b.n	800e7ee <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	699a      	ldr	r2, [r3, #24]
 800e7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f6:	18d1      	adds	r1, r2, r3
 800e7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7fe:	f7ff ff27 	bl	800e650 <prvInsertTimerInActiveList>
					break;
 800e802:	e009      	b.n	800e818 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e806:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d104      	bne.n	800e818 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800e80e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e810:	f000 fb68 	bl	800eee4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e814:	e000      	b.n	800e818 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e816:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e818:	4b07      	ldr	r3, [pc, #28]	; (800e838 <prvProcessReceivedCommands+0x164>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	1d39      	adds	r1, r7, #4
 800e81e:	2200      	movs	r2, #0
 800e820:	4618      	mov	r0, r3
 800e822:	f7fe fc29 	bl	800d078 <xQueueReceive>
 800e826:	4603      	mov	r3, r0
 800e828:	2b00      	cmp	r3, #0
 800e82a:	f47f af57 	bne.w	800e6dc <prvProcessReceivedCommands+0x8>
	}
}
 800e82e:	bf00      	nop
 800e830:	bf00      	nop
 800e832:	3730      	adds	r7, #48	; 0x30
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}
 800e838:	200011b4 	.word	0x200011b4

0800e83c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b088      	sub	sp, #32
 800e840:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e842:	e045      	b.n	800e8d0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e844:	4b2c      	ldr	r3, [pc, #176]	; (800e8f8 <prvSwitchTimerLists+0xbc>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	68db      	ldr	r3, [r3, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e84e:	4b2a      	ldr	r3, [pc, #168]	; (800e8f8 <prvSwitchTimerLists+0xbc>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	3304      	adds	r3, #4
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7fe f949 	bl	800caf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	69db      	ldr	r3, [r3, #28]
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d12e      	bne.n	800e8d0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	699b      	ldr	r3, [r3, #24]
 800e876:	693a      	ldr	r2, [r7, #16]
 800e878:	4413      	add	r3, r2
 800e87a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e87c:	68ba      	ldr	r2, [r7, #8]
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	429a      	cmp	r2, r3
 800e882:	d90e      	bls.n	800e8a2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	68ba      	ldr	r2, [r7, #8]
 800e888:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e890:	4b19      	ldr	r3, [pc, #100]	; (800e8f8 <prvSwitchTimerLists+0xbc>)
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	3304      	adds	r3, #4
 800e898:	4619      	mov	r1, r3
 800e89a:	4610      	mov	r0, r2
 800e89c:	f7fe f8f2 	bl	800ca84 <vListInsert>
 800e8a0:	e016      	b.n	800e8d0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	9300      	str	r3, [sp, #0]
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	693a      	ldr	r2, [r7, #16]
 800e8aa:	2100      	movs	r1, #0
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	f7ff fd9d 	bl	800e3ec <xTimerGenericCommand>
 800e8b2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d10a      	bne.n	800e8d0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800e8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8be:	f383 8811 	msr	BASEPRI, r3
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	f3bf 8f4f 	dsb	sy
 800e8ca:	603b      	str	r3, [r7, #0]
}
 800e8cc:	bf00      	nop
 800e8ce:	e7fe      	b.n	800e8ce <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8d0:	4b09      	ldr	r3, [pc, #36]	; (800e8f8 <prvSwitchTimerLists+0xbc>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1b4      	bne.n	800e844 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e8da:	4b07      	ldr	r3, [pc, #28]	; (800e8f8 <prvSwitchTimerLists+0xbc>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e8e0:	4b06      	ldr	r3, [pc, #24]	; (800e8fc <prvSwitchTimerLists+0xc0>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	4a04      	ldr	r2, [pc, #16]	; (800e8f8 <prvSwitchTimerLists+0xbc>)
 800e8e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e8e8:	4a04      	ldr	r2, [pc, #16]	; (800e8fc <prvSwitchTimerLists+0xc0>)
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	6013      	str	r3, [r2, #0]
}
 800e8ee:	bf00      	nop
 800e8f0:	3718      	adds	r7, #24
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	200011ac 	.word	0x200011ac
 800e8fc:	200011b0 	.word	0x200011b0

0800e900 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e906:	f000 f929 	bl	800eb5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e90a:	4b15      	ldr	r3, [pc, #84]	; (800e960 <prvCheckForValidListAndQueue+0x60>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d120      	bne.n	800e954 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e912:	4814      	ldr	r0, [pc, #80]	; (800e964 <prvCheckForValidListAndQueue+0x64>)
 800e914:	f7fe f868 	bl	800c9e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e918:	4813      	ldr	r0, [pc, #76]	; (800e968 <prvCheckForValidListAndQueue+0x68>)
 800e91a:	f7fe f865 	bl	800c9e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e91e:	4b13      	ldr	r3, [pc, #76]	; (800e96c <prvCheckForValidListAndQueue+0x6c>)
 800e920:	4a10      	ldr	r2, [pc, #64]	; (800e964 <prvCheckForValidListAndQueue+0x64>)
 800e922:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e924:	4b12      	ldr	r3, [pc, #72]	; (800e970 <prvCheckForValidListAndQueue+0x70>)
 800e926:	4a10      	ldr	r2, [pc, #64]	; (800e968 <prvCheckForValidListAndQueue+0x68>)
 800e928:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e92a:	2300      	movs	r3, #0
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	4b11      	ldr	r3, [pc, #68]	; (800e974 <prvCheckForValidListAndQueue+0x74>)
 800e930:	4a11      	ldr	r2, [pc, #68]	; (800e978 <prvCheckForValidListAndQueue+0x78>)
 800e932:	2110      	movs	r1, #16
 800e934:	200a      	movs	r0, #10
 800e936:	f7fe f96f 	bl	800cc18 <xQueueGenericCreateStatic>
 800e93a:	4603      	mov	r3, r0
 800e93c:	4a08      	ldr	r2, [pc, #32]	; (800e960 <prvCheckForValidListAndQueue+0x60>)
 800e93e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e940:	4b07      	ldr	r3, [pc, #28]	; (800e960 <prvCheckForValidListAndQueue+0x60>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d005      	beq.n	800e954 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e948:	4b05      	ldr	r3, [pc, #20]	; (800e960 <prvCheckForValidListAndQueue+0x60>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	490b      	ldr	r1, [pc, #44]	; (800e97c <prvCheckForValidListAndQueue+0x7c>)
 800e94e:	4618      	mov	r0, r3
 800e950:	f7fe fd82 	bl	800d458 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e954:	f000 f932 	bl	800ebbc <vPortExitCritical>
}
 800e958:	bf00      	nop
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	200011b4 	.word	0x200011b4
 800e964:	20001184 	.word	0x20001184
 800e968:	20001198 	.word	0x20001198
 800e96c:	200011ac 	.word	0x200011ac
 800e970:	200011b0 	.word	0x200011b0
 800e974:	20001260 	.word	0x20001260
 800e978:	200011c0 	.word	0x200011c0
 800e97c:	080106e4 	.word	0x080106e4

0800e980 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e980:	b480      	push	{r7}
 800e982:	b085      	sub	sp, #20
 800e984:	af00      	add	r7, sp, #0
 800e986:	60f8      	str	r0, [r7, #12]
 800e988:	60b9      	str	r1, [r7, #8]
 800e98a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	3b04      	subs	r3, #4
 800e990:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	3b04      	subs	r3, #4
 800e99e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	f023 0201 	bic.w	r2, r3, #1
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	3b04      	subs	r3, #4
 800e9ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e9b0:	4a08      	ldr	r2, [pc, #32]	; (800e9d4 <pxPortInitialiseStack+0x54>)
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	3b14      	subs	r3, #20
 800e9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e9bc:	687a      	ldr	r2, [r7, #4]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	3b20      	subs	r3, #32
 800e9c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3714      	adds	r7, #20
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bc80      	pop	{r7}
 800e9d2:	4770      	bx	lr
 800e9d4:	0800e9d9 	.word	0x0800e9d9

0800e9d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e9e2:	4b12      	ldr	r3, [pc, #72]	; (800ea2c <prvTaskExitError+0x54>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9ea:	d00a      	beq.n	800ea02 <prvTaskExitError+0x2a>
	__asm volatile
 800e9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f0:	f383 8811 	msr	BASEPRI, r3
 800e9f4:	f3bf 8f6f 	isb	sy
 800e9f8:	f3bf 8f4f 	dsb	sy
 800e9fc:	60fb      	str	r3, [r7, #12]
}
 800e9fe:	bf00      	nop
 800ea00:	e7fe      	b.n	800ea00 <prvTaskExitError+0x28>
	__asm volatile
 800ea02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	60bb      	str	r3, [r7, #8]
}
 800ea14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea16:	bf00      	nop
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d0fc      	beq.n	800ea18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea1e:	bf00      	nop
 800ea20:	bf00      	nop
 800ea22:	3714      	adds	r7, #20
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bc80      	pop	{r7}
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	20000120 	.word	0x20000120

0800ea30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ea30:	4b07      	ldr	r3, [pc, #28]	; (800ea50 <pxCurrentTCBConst2>)
 800ea32:	6819      	ldr	r1, [r3, #0]
 800ea34:	6808      	ldr	r0, [r1, #0]
 800ea36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ea3a:	f380 8809 	msr	PSP, r0
 800ea3e:	f3bf 8f6f 	isb	sy
 800ea42:	f04f 0000 	mov.w	r0, #0
 800ea46:	f380 8811 	msr	BASEPRI, r0
 800ea4a:	f04e 0e0d 	orr.w	lr, lr, #13
 800ea4e:	4770      	bx	lr

0800ea50 <pxCurrentTCBConst2>:
 800ea50:	20000c84 	.word	0x20000c84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ea54:	bf00      	nop
 800ea56:	bf00      	nop

0800ea58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800ea58:	4806      	ldr	r0, [pc, #24]	; (800ea74 <prvPortStartFirstTask+0x1c>)
 800ea5a:	6800      	ldr	r0, [r0, #0]
 800ea5c:	6800      	ldr	r0, [r0, #0]
 800ea5e:	f380 8808 	msr	MSP, r0
 800ea62:	b662      	cpsie	i
 800ea64:	b661      	cpsie	f
 800ea66:	f3bf 8f4f 	dsb	sy
 800ea6a:	f3bf 8f6f 	isb	sy
 800ea6e:	df00      	svc	0
 800ea70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ea72:	bf00      	nop
 800ea74:	e000ed08 	.word	0xe000ed08

0800ea78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ea7e:	4b32      	ldr	r3, [pc, #200]	; (800eb48 <xPortStartScheduler+0xd0>)
 800ea80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	22ff      	movs	r2, #255	; 0xff
 800ea8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ea98:	78fb      	ldrb	r3, [r7, #3]
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eaa0:	b2da      	uxtb	r2, r3
 800eaa2:	4b2a      	ldr	r3, [pc, #168]	; (800eb4c <xPortStartScheduler+0xd4>)
 800eaa4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eaa6:	4b2a      	ldr	r3, [pc, #168]	; (800eb50 <xPortStartScheduler+0xd8>)
 800eaa8:	2207      	movs	r2, #7
 800eaaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eaac:	e009      	b.n	800eac2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800eaae:	4b28      	ldr	r3, [pc, #160]	; (800eb50 <xPortStartScheduler+0xd8>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	3b01      	subs	r3, #1
 800eab4:	4a26      	ldr	r2, [pc, #152]	; (800eb50 <xPortStartScheduler+0xd8>)
 800eab6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eab8:	78fb      	ldrb	r3, [r7, #3]
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	005b      	lsls	r3, r3, #1
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eac2:	78fb      	ldrb	r3, [r7, #3]
 800eac4:	b2db      	uxtb	r3, r3
 800eac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaca:	2b80      	cmp	r3, #128	; 0x80
 800eacc:	d0ef      	beq.n	800eaae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eace:	4b20      	ldr	r3, [pc, #128]	; (800eb50 <xPortStartScheduler+0xd8>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f1c3 0307 	rsb	r3, r3, #7
 800ead6:	2b04      	cmp	r3, #4
 800ead8:	d00a      	beq.n	800eaf0 <xPortStartScheduler+0x78>
	__asm volatile
 800eada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eade:	f383 8811 	msr	BASEPRI, r3
 800eae2:	f3bf 8f6f 	isb	sy
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	60bb      	str	r3, [r7, #8]
}
 800eaec:	bf00      	nop
 800eaee:	e7fe      	b.n	800eaee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eaf0:	4b17      	ldr	r3, [pc, #92]	; (800eb50 <xPortStartScheduler+0xd8>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	021b      	lsls	r3, r3, #8
 800eaf6:	4a16      	ldr	r2, [pc, #88]	; (800eb50 <xPortStartScheduler+0xd8>)
 800eaf8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eafa:	4b15      	ldr	r3, [pc, #84]	; (800eb50 <xPortStartScheduler+0xd8>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb02:	4a13      	ldr	r2, [pc, #76]	; (800eb50 <xPortStartScheduler+0xd8>)
 800eb04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	b2da      	uxtb	r2, r3
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eb0e:	4b11      	ldr	r3, [pc, #68]	; (800eb54 <xPortStartScheduler+0xdc>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	4a10      	ldr	r2, [pc, #64]	; (800eb54 <xPortStartScheduler+0xdc>)
 800eb14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eb1a:	4b0e      	ldr	r3, [pc, #56]	; (800eb54 <xPortStartScheduler+0xdc>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	4a0d      	ldr	r2, [pc, #52]	; (800eb54 <xPortStartScheduler+0xdc>)
 800eb20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eb24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eb26:	f000 f8b9 	bl	800ec9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eb2a:	4b0b      	ldr	r3, [pc, #44]	; (800eb58 <xPortStartScheduler+0xe0>)
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eb30:	f7ff ff92 	bl	800ea58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eb34:	f7ff f8b8 	bl	800dca8 <vTaskSwitchContext>
	prvTaskExitError();
 800eb38:	f7ff ff4e 	bl	800e9d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eb3c:	2300      	movs	r3, #0
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	e000e400 	.word	0xe000e400
 800eb4c:	200012b0 	.word	0x200012b0
 800eb50:	200012b4 	.word	0x200012b4
 800eb54:	e000ed20 	.word	0xe000ed20
 800eb58:	20000120 	.word	0x20000120

0800eb5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
	__asm volatile
 800eb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb66:	f383 8811 	msr	BASEPRI, r3
 800eb6a:	f3bf 8f6f 	isb	sy
 800eb6e:	f3bf 8f4f 	dsb	sy
 800eb72:	607b      	str	r3, [r7, #4]
}
 800eb74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800eb76:	4b0f      	ldr	r3, [pc, #60]	; (800ebb4 <vPortEnterCritical+0x58>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	4a0d      	ldr	r2, [pc, #52]	; (800ebb4 <vPortEnterCritical+0x58>)
 800eb7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eb80:	4b0c      	ldr	r3, [pc, #48]	; (800ebb4 <vPortEnterCritical+0x58>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d10f      	bne.n	800eba8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eb88:	4b0b      	ldr	r3, [pc, #44]	; (800ebb8 <vPortEnterCritical+0x5c>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d00a      	beq.n	800eba8 <vPortEnterCritical+0x4c>
	__asm volatile
 800eb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb96:	f383 8811 	msr	BASEPRI, r3
 800eb9a:	f3bf 8f6f 	isb	sy
 800eb9e:	f3bf 8f4f 	dsb	sy
 800eba2:	603b      	str	r3, [r7, #0]
}
 800eba4:	bf00      	nop
 800eba6:	e7fe      	b.n	800eba6 <vPortEnterCritical+0x4a>
	}
}
 800eba8:	bf00      	nop
 800ebaa:	370c      	adds	r7, #12
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bc80      	pop	{r7}
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop
 800ebb4:	20000120 	.word	0x20000120
 800ebb8:	e000ed04 	.word	0xe000ed04

0800ebbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ebc2:	4b11      	ldr	r3, [pc, #68]	; (800ec08 <vPortExitCritical+0x4c>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d10a      	bne.n	800ebe0 <vPortExitCritical+0x24>
	__asm volatile
 800ebca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebce:	f383 8811 	msr	BASEPRI, r3
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	607b      	str	r3, [r7, #4]
}
 800ebdc:	bf00      	nop
 800ebde:	e7fe      	b.n	800ebde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ebe0:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <vPortExitCritical+0x4c>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	3b01      	subs	r3, #1
 800ebe6:	4a08      	ldr	r2, [pc, #32]	; (800ec08 <vPortExitCritical+0x4c>)
 800ebe8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ebea:	4b07      	ldr	r3, [pc, #28]	; (800ec08 <vPortExitCritical+0x4c>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d105      	bne.n	800ebfe <vPortExitCritical+0x42>
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	f383 8811 	msr	BASEPRI, r3
}
 800ebfc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ebfe:	bf00      	nop
 800ec00:	370c      	adds	r7, #12
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bc80      	pop	{r7}
 800ec06:	4770      	bx	lr
 800ec08:	20000120 	.word	0x20000120
 800ec0c:	00000000 	.word	0x00000000

0800ec10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ec10:	f3ef 8009 	mrs	r0, PSP
 800ec14:	f3bf 8f6f 	isb	sy
 800ec18:	4b0d      	ldr	r3, [pc, #52]	; (800ec50 <pxCurrentTCBConst>)
 800ec1a:	681a      	ldr	r2, [r3, #0]
 800ec1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ec20:	6010      	str	r0, [r2, #0]
 800ec22:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ec26:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ec2a:	f380 8811 	msr	BASEPRI, r0
 800ec2e:	f7ff f83b 	bl	800dca8 <vTaskSwitchContext>
 800ec32:	f04f 0000 	mov.w	r0, #0
 800ec36:	f380 8811 	msr	BASEPRI, r0
 800ec3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ec3e:	6819      	ldr	r1, [r3, #0]
 800ec40:	6808      	ldr	r0, [r1, #0]
 800ec42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ec46:	f380 8809 	msr	PSP, r0
 800ec4a:	f3bf 8f6f 	isb	sy
 800ec4e:	4770      	bx	lr

0800ec50 <pxCurrentTCBConst>:
 800ec50:	20000c84 	.word	0x20000c84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ec54:	bf00      	nop
 800ec56:	bf00      	nop

0800ec58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b082      	sub	sp, #8
 800ec5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ec5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec62:	f383 8811 	msr	BASEPRI, r3
 800ec66:	f3bf 8f6f 	isb	sy
 800ec6a:	f3bf 8f4f 	dsb	sy
 800ec6e:	607b      	str	r3, [r7, #4]
}
 800ec70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ec72:	f7fe ff5b 	bl	800db2c <xTaskIncrementTick>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d003      	beq.n	800ec84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ec7c:	4b06      	ldr	r3, [pc, #24]	; (800ec98 <xPortSysTickHandler+0x40>)
 800ec7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec82:	601a      	str	r2, [r3, #0]
 800ec84:	2300      	movs	r3, #0
 800ec86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	f383 8811 	msr	BASEPRI, r3
}
 800ec8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ec90:	bf00      	nop
 800ec92:	3708      	adds	r7, #8
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	e000ed04 	.word	0xe000ed04

0800ec9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eca0:	4b0a      	ldr	r3, [pc, #40]	; (800eccc <vPortSetupTimerInterrupt+0x30>)
 800eca2:	2200      	movs	r2, #0
 800eca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eca6:	4b0a      	ldr	r3, [pc, #40]	; (800ecd0 <vPortSetupTimerInterrupt+0x34>)
 800eca8:	2200      	movs	r2, #0
 800ecaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ecac:	4b09      	ldr	r3, [pc, #36]	; (800ecd4 <vPortSetupTimerInterrupt+0x38>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	4a09      	ldr	r2, [pc, #36]	; (800ecd8 <vPortSetupTimerInterrupt+0x3c>)
 800ecb2:	fba2 2303 	umull	r2, r3, r2, r3
 800ecb6:	099b      	lsrs	r3, r3, #6
 800ecb8:	4a08      	ldr	r2, [pc, #32]	; (800ecdc <vPortSetupTimerInterrupt+0x40>)
 800ecba:	3b01      	subs	r3, #1
 800ecbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ecbe:	4b03      	ldr	r3, [pc, #12]	; (800eccc <vPortSetupTimerInterrupt+0x30>)
 800ecc0:	2207      	movs	r2, #7
 800ecc2:	601a      	str	r2, [r3, #0]
}
 800ecc4:	bf00      	nop
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bc80      	pop	{r7}
 800ecca:	4770      	bx	lr
 800eccc:	e000e010 	.word	0xe000e010
 800ecd0:	e000e018 	.word	0xe000e018
 800ecd4:	20000004 	.word	0x20000004
 800ecd8:	10624dd3 	.word	0x10624dd3
 800ecdc:	e000e014 	.word	0xe000e014

0800ece0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ece0:	b480      	push	{r7}
 800ece2:	b085      	sub	sp, #20
 800ece4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ece6:	f3ef 8305 	mrs	r3, IPSR
 800ecea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2b0f      	cmp	r3, #15
 800ecf0:	d914      	bls.n	800ed1c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ecf2:	4a16      	ldr	r2, [pc, #88]	; (800ed4c <vPortValidateInterruptPriority+0x6c>)
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ecfc:	4b14      	ldr	r3, [pc, #80]	; (800ed50 <vPortValidateInterruptPriority+0x70>)
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	7afa      	ldrb	r2, [r7, #11]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d20a      	bcs.n	800ed1c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ed06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0a:	f383 8811 	msr	BASEPRI, r3
 800ed0e:	f3bf 8f6f 	isb	sy
 800ed12:	f3bf 8f4f 	dsb	sy
 800ed16:	607b      	str	r3, [r7, #4]
}
 800ed18:	bf00      	nop
 800ed1a:	e7fe      	b.n	800ed1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ed1c:	4b0d      	ldr	r3, [pc, #52]	; (800ed54 <vPortValidateInterruptPriority+0x74>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ed24:	4b0c      	ldr	r3, [pc, #48]	; (800ed58 <vPortValidateInterruptPriority+0x78>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d90a      	bls.n	800ed42 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ed2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed30:	f383 8811 	msr	BASEPRI, r3
 800ed34:	f3bf 8f6f 	isb	sy
 800ed38:	f3bf 8f4f 	dsb	sy
 800ed3c:	603b      	str	r3, [r7, #0]
}
 800ed3e:	bf00      	nop
 800ed40:	e7fe      	b.n	800ed40 <vPortValidateInterruptPriority+0x60>
	}
 800ed42:	bf00      	nop
 800ed44:	3714      	adds	r7, #20
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bc80      	pop	{r7}
 800ed4a:	4770      	bx	lr
 800ed4c:	e000e3f0 	.word	0xe000e3f0
 800ed50:	200012b0 	.word	0x200012b0
 800ed54:	e000ed0c 	.word	0xe000ed0c
 800ed58:	200012b4 	.word	0x200012b4

0800ed5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b08a      	sub	sp, #40	; 0x28
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ed64:	2300      	movs	r3, #0
 800ed66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ed68:	f7fe fe26 	bl	800d9b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ed6c:	4b58      	ldr	r3, [pc, #352]	; (800eed0 <pvPortMalloc+0x174>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d101      	bne.n	800ed78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ed74:	f000 f910 	bl	800ef98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ed78:	4b56      	ldr	r3, [pc, #344]	; (800eed4 <pvPortMalloc+0x178>)
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4013      	ands	r3, r2
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	f040 808e 	bne.w	800eea2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d01d      	beq.n	800edc8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ed8c:	2208      	movs	r2, #8
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	4413      	add	r3, r2
 800ed92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f003 0307 	and.w	r3, r3, #7
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d014      	beq.n	800edc8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f023 0307 	bic.w	r3, r3, #7
 800eda4:	3308      	adds	r3, #8
 800eda6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f003 0307 	and.w	r3, r3, #7
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d00a      	beq.n	800edc8 <pvPortMalloc+0x6c>
	__asm volatile
 800edb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	617b      	str	r3, [r7, #20]
}
 800edc4:	bf00      	nop
 800edc6:	e7fe      	b.n	800edc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d069      	beq.n	800eea2 <pvPortMalloc+0x146>
 800edce:	4b42      	ldr	r3, [pc, #264]	; (800eed8 <pvPortMalloc+0x17c>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d864      	bhi.n	800eea2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800edd8:	4b40      	ldr	r3, [pc, #256]	; (800eedc <pvPortMalloc+0x180>)
 800edda:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eddc:	4b3f      	ldr	r3, [pc, #252]	; (800eedc <pvPortMalloc+0x180>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ede2:	e004      	b.n	800edee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ede4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ede8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800edee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d903      	bls.n	800ee00 <pvPortMalloc+0xa4>
 800edf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d1f1      	bne.n	800ede4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ee00:	4b33      	ldr	r3, [pc, #204]	; (800eed0 <pvPortMalloc+0x174>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d04b      	beq.n	800eea2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ee0a:	6a3b      	ldr	r3, [r7, #32]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	2208      	movs	r2, #8
 800ee10:	4413      	add	r3, r2
 800ee12:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ee14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	6a3b      	ldr	r3, [r7, #32]
 800ee1a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ee1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1e:	685a      	ldr	r2, [r3, #4]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	1ad2      	subs	r2, r2, r3
 800ee24:	2308      	movs	r3, #8
 800ee26:	005b      	lsls	r3, r3, #1
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d91f      	bls.n	800ee6c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ee2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	4413      	add	r3, r2
 800ee32:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee34:	69bb      	ldr	r3, [r7, #24]
 800ee36:	f003 0307 	and.w	r3, r3, #7
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00a      	beq.n	800ee54 <pvPortMalloc+0xf8>
	__asm volatile
 800ee3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee42:	f383 8811 	msr	BASEPRI, r3
 800ee46:	f3bf 8f6f 	isb	sy
 800ee4a:	f3bf 8f4f 	dsb	sy
 800ee4e:	613b      	str	r3, [r7, #16]
}
 800ee50:	bf00      	nop
 800ee52:	e7fe      	b.n	800ee52 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ee54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee56:	685a      	ldr	r2, [r3, #4]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	1ad2      	subs	r2, r2, r3
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ee60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ee66:	69b8      	ldr	r0, [r7, #24]
 800ee68:	f000 f8f8 	bl	800f05c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ee6c:	4b1a      	ldr	r3, [pc, #104]	; (800eed8 <pvPortMalloc+0x17c>)
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	1ad3      	subs	r3, r2, r3
 800ee76:	4a18      	ldr	r2, [pc, #96]	; (800eed8 <pvPortMalloc+0x17c>)
 800ee78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ee7a:	4b17      	ldr	r3, [pc, #92]	; (800eed8 <pvPortMalloc+0x17c>)
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	4b18      	ldr	r3, [pc, #96]	; (800eee0 <pvPortMalloc+0x184>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d203      	bcs.n	800ee8e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ee86:	4b14      	ldr	r3, [pc, #80]	; (800eed8 <pvPortMalloc+0x17c>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a15      	ldr	r2, [pc, #84]	; (800eee0 <pvPortMalloc+0x184>)
 800ee8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ee8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee90:	685a      	ldr	r2, [r3, #4]
 800ee92:	4b10      	ldr	r3, [pc, #64]	; (800eed4 <pvPortMalloc+0x178>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	431a      	orrs	r2, r3
 800ee98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ee9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9e:	2200      	movs	r2, #0
 800eea0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eea2:	f7fe fd97 	bl	800d9d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	f003 0307 	and.w	r3, r3, #7
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d00a      	beq.n	800eec6 <pvPortMalloc+0x16a>
	__asm volatile
 800eeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb4:	f383 8811 	msr	BASEPRI, r3
 800eeb8:	f3bf 8f6f 	isb	sy
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	60fb      	str	r3, [r7, #12]
}
 800eec2:	bf00      	nop
 800eec4:	e7fe      	b.n	800eec4 <pvPortMalloc+0x168>
	return pvReturn;
 800eec6:	69fb      	ldr	r3, [r7, #28]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3728      	adds	r7, #40	; 0x28
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	20001ec0 	.word	0x20001ec0
 800eed4:	20001ecc 	.word	0x20001ecc
 800eed8:	20001ec4 	.word	0x20001ec4
 800eedc:	20001eb8 	.word	0x20001eb8
 800eee0:	20001ec8 	.word	0x20001ec8

0800eee4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b086      	sub	sp, #24
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d048      	beq.n	800ef88 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eef6:	2308      	movs	r3, #8
 800eef8:	425b      	negs	r3, r3
 800eefa:	697a      	ldr	r2, [r7, #20]
 800eefc:	4413      	add	r3, r2
 800eefe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	685a      	ldr	r2, [r3, #4]
 800ef08:	4b21      	ldr	r3, [pc, #132]	; (800ef90 <vPortFree+0xac>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4013      	ands	r3, r2
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d10a      	bne.n	800ef28 <vPortFree+0x44>
	__asm volatile
 800ef12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef16:	f383 8811 	msr	BASEPRI, r3
 800ef1a:	f3bf 8f6f 	isb	sy
 800ef1e:	f3bf 8f4f 	dsb	sy
 800ef22:	60fb      	str	r3, [r7, #12]
}
 800ef24:	bf00      	nop
 800ef26:	e7fe      	b.n	800ef26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d00a      	beq.n	800ef46 <vPortFree+0x62>
	__asm volatile
 800ef30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef34:	f383 8811 	msr	BASEPRI, r3
 800ef38:	f3bf 8f6f 	isb	sy
 800ef3c:	f3bf 8f4f 	dsb	sy
 800ef40:	60bb      	str	r3, [r7, #8]
}
 800ef42:	bf00      	nop
 800ef44:	e7fe      	b.n	800ef44 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	685a      	ldr	r2, [r3, #4]
 800ef4a:	4b11      	ldr	r3, [pc, #68]	; (800ef90 <vPortFree+0xac>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4013      	ands	r3, r2
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d019      	beq.n	800ef88 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d115      	bne.n	800ef88 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	685a      	ldr	r2, [r3, #4]
 800ef60:	4b0b      	ldr	r3, [pc, #44]	; (800ef90 <vPortFree+0xac>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	43db      	mvns	r3, r3
 800ef66:	401a      	ands	r2, r3
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ef6c:	f7fe fd24 	bl	800d9b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	685a      	ldr	r2, [r3, #4]
 800ef74:	4b07      	ldr	r3, [pc, #28]	; (800ef94 <vPortFree+0xb0>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4413      	add	r3, r2
 800ef7a:	4a06      	ldr	r2, [pc, #24]	; (800ef94 <vPortFree+0xb0>)
 800ef7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ef7e:	6938      	ldr	r0, [r7, #16]
 800ef80:	f000 f86c 	bl	800f05c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ef84:	f7fe fd26 	bl	800d9d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ef88:	bf00      	nop
 800ef8a:	3718      	adds	r7, #24
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	20001ecc 	.word	0x20001ecc
 800ef94:	20001ec4 	.word	0x20001ec4

0800ef98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b085      	sub	sp, #20
 800ef9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ef9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800efa2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800efa4:	4b27      	ldr	r3, [pc, #156]	; (800f044 <prvHeapInit+0xac>)
 800efa6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f003 0307 	and.w	r3, r3, #7
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d00c      	beq.n	800efcc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	3307      	adds	r3, #7
 800efb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f023 0307 	bic.w	r3, r3, #7
 800efbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800efc0:	68ba      	ldr	r2, [r7, #8]
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	1ad3      	subs	r3, r2, r3
 800efc6:	4a1f      	ldr	r2, [pc, #124]	; (800f044 <prvHeapInit+0xac>)
 800efc8:	4413      	add	r3, r2
 800efca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800efd0:	4a1d      	ldr	r2, [pc, #116]	; (800f048 <prvHeapInit+0xb0>)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800efd6:	4b1c      	ldr	r3, [pc, #112]	; (800f048 <prvHeapInit+0xb0>)
 800efd8:	2200      	movs	r2, #0
 800efda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	4413      	add	r3, r2
 800efe2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800efe4:	2208      	movs	r2, #8
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	1a9b      	subs	r3, r3, r2
 800efea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f023 0307 	bic.w	r3, r3, #7
 800eff2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	4a15      	ldr	r2, [pc, #84]	; (800f04c <prvHeapInit+0xb4>)
 800eff8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800effa:	4b14      	ldr	r3, [pc, #80]	; (800f04c <prvHeapInit+0xb4>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	2200      	movs	r2, #0
 800f000:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f002:	4b12      	ldr	r3, [pc, #72]	; (800f04c <prvHeapInit+0xb4>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2200      	movs	r2, #0
 800f008:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	68fa      	ldr	r2, [r7, #12]
 800f012:	1ad2      	subs	r2, r2, r3
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f018:	4b0c      	ldr	r3, [pc, #48]	; (800f04c <prvHeapInit+0xb4>)
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	685b      	ldr	r3, [r3, #4]
 800f024:	4a0a      	ldr	r2, [pc, #40]	; (800f050 <prvHeapInit+0xb8>)
 800f026:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	4a09      	ldr	r2, [pc, #36]	; (800f054 <prvHeapInit+0xbc>)
 800f02e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f030:	4b09      	ldr	r3, [pc, #36]	; (800f058 <prvHeapInit+0xc0>)
 800f032:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f036:	601a      	str	r2, [r3, #0]
}
 800f038:	bf00      	nop
 800f03a:	3714      	adds	r7, #20
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bc80      	pop	{r7}
 800f040:	4770      	bx	lr
 800f042:	bf00      	nop
 800f044:	200012b8 	.word	0x200012b8
 800f048:	20001eb8 	.word	0x20001eb8
 800f04c:	20001ec0 	.word	0x20001ec0
 800f050:	20001ec8 	.word	0x20001ec8
 800f054:	20001ec4 	.word	0x20001ec4
 800f058:	20001ecc 	.word	0x20001ecc

0800f05c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f05c:	b480      	push	{r7}
 800f05e:	b085      	sub	sp, #20
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f064:	4b27      	ldr	r3, [pc, #156]	; (800f104 <prvInsertBlockIntoFreeList+0xa8>)
 800f066:	60fb      	str	r3, [r7, #12]
 800f068:	e002      	b.n	800f070 <prvInsertBlockIntoFreeList+0x14>
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	60fb      	str	r3, [r7, #12]
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	687a      	ldr	r2, [r7, #4]
 800f076:	429a      	cmp	r2, r3
 800f078:	d8f7      	bhi.n	800f06a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	68ba      	ldr	r2, [r7, #8]
 800f084:	4413      	add	r3, r2
 800f086:	687a      	ldr	r2, [r7, #4]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d108      	bne.n	800f09e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	685a      	ldr	r2, [r3, #4]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	441a      	add	r2, r3
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	68ba      	ldr	r2, [r7, #8]
 800f0a8:	441a      	add	r2, r3
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d118      	bne.n	800f0e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	4b14      	ldr	r3, [pc, #80]	; (800f108 <prvInsertBlockIntoFreeList+0xac>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d00d      	beq.n	800f0da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	685a      	ldr	r2, [r3, #4]
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	441a      	add	r2, r3
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	601a      	str	r2, [r3, #0]
 800f0d8:	e008      	b.n	800f0ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f0da:	4b0b      	ldr	r3, [pc, #44]	; (800f108 <prvInsertBlockIntoFreeList+0xac>)
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	601a      	str	r2, [r3, #0]
 800f0e2:	e003      	b.n	800f0ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f0ec:	68fa      	ldr	r2, [r7, #12]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d002      	beq.n	800f0fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	687a      	ldr	r2, [r7, #4]
 800f0f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f0fa:	bf00      	nop
 800f0fc:	3714      	adds	r7, #20
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bc80      	pop	{r7}
 800f102:	4770      	bx	lr
 800f104:	20001eb8 	.word	0x20001eb8
 800f108:	20001ec0 	.word	0x20001ec0

0800f10c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f110:	2200      	movs	r2, #0
 800f112:	4912      	ldr	r1, [pc, #72]	; (800f15c <MX_USB_DEVICE_Init+0x50>)
 800f114:	4812      	ldr	r0, [pc, #72]	; (800f160 <MX_USB_DEVICE_Init+0x54>)
 800f116:	f7fc fa5d 	bl	800b5d4 <USBD_Init>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d001      	beq.n	800f124 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f120:	f7f4 f896 	bl	8003250 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f124:	490f      	ldr	r1, [pc, #60]	; (800f164 <MX_USB_DEVICE_Init+0x58>)
 800f126:	480e      	ldr	r0, [pc, #56]	; (800f160 <MX_USB_DEVICE_Init+0x54>)
 800f128:	f7fc fa7f 	bl	800b62a <USBD_RegisterClass>
 800f12c:	4603      	mov	r3, r0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d001      	beq.n	800f136 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f132:	f7f4 f88d 	bl	8003250 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f136:	490c      	ldr	r1, [pc, #48]	; (800f168 <MX_USB_DEVICE_Init+0x5c>)
 800f138:	4809      	ldr	r0, [pc, #36]	; (800f160 <MX_USB_DEVICE_Init+0x54>)
 800f13a:	f7fc f9df 	bl	800b4fc <USBD_CDC_RegisterInterface>
 800f13e:	4603      	mov	r3, r0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d001      	beq.n	800f148 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f144:	f7f4 f884 	bl	8003250 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f148:	4805      	ldr	r0, [pc, #20]	; (800f160 <MX_USB_DEVICE_Init+0x54>)
 800f14a:	f7fc fa87 	bl	800b65c <USBD_Start>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d001      	beq.n	800f158 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f154:	f7f4 f87c 	bl	8003250 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f158:	bf00      	nop
 800f15a:	bd80      	pop	{r7, pc}
 800f15c:	20000134 	.word	0x20000134
 800f160:	20001ed0 	.word	0x20001ed0
 800f164:	2000001c 	.word	0x2000001c
 800f168:	20000124 	.word	0x20000124

0800f16c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f170:	2200      	movs	r2, #0
 800f172:	4905      	ldr	r1, [pc, #20]	; (800f188 <CDC_Init_FS+0x1c>)
 800f174:	4805      	ldr	r0, [pc, #20]	; (800f18c <CDC_Init_FS+0x20>)
 800f176:	f7fc f9d7 	bl	800b528 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f17a:	4905      	ldr	r1, [pc, #20]	; (800f190 <CDC_Init_FS+0x24>)
 800f17c:	4803      	ldr	r0, [pc, #12]	; (800f18c <CDC_Init_FS+0x20>)
 800f17e:	f7fc f9ec 	bl	800b55a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f182:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f184:	4618      	mov	r0, r3
 800f186:	bd80      	pop	{r7, pc}
 800f188:	2000257c 	.word	0x2000257c
 800f18c:	20001ed0 	.word	0x20001ed0
 800f190:	20002194 	.word	0x20002194

0800f194 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f194:	b480      	push	{r7}
 800f196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f198:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bc80      	pop	{r7}
 800f1a0:	4770      	bx	lr
	...

0800f1a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	6039      	str	r1, [r7, #0]
 800f1ae:	71fb      	strb	r3, [r7, #7]
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f1b4:	79fb      	ldrb	r3, [r7, #7]
 800f1b6:	2b23      	cmp	r3, #35	; 0x23
 800f1b8:	d84a      	bhi.n	800f250 <CDC_Control_FS+0xac>
 800f1ba:	a201      	add	r2, pc, #4	; (adr r2, 800f1c0 <CDC_Control_FS+0x1c>)
 800f1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c0:	0800f251 	.word	0x0800f251
 800f1c4:	0800f251 	.word	0x0800f251
 800f1c8:	0800f251 	.word	0x0800f251
 800f1cc:	0800f251 	.word	0x0800f251
 800f1d0:	0800f251 	.word	0x0800f251
 800f1d4:	0800f251 	.word	0x0800f251
 800f1d8:	0800f251 	.word	0x0800f251
 800f1dc:	0800f251 	.word	0x0800f251
 800f1e0:	0800f251 	.word	0x0800f251
 800f1e4:	0800f251 	.word	0x0800f251
 800f1e8:	0800f251 	.word	0x0800f251
 800f1ec:	0800f251 	.word	0x0800f251
 800f1f0:	0800f251 	.word	0x0800f251
 800f1f4:	0800f251 	.word	0x0800f251
 800f1f8:	0800f251 	.word	0x0800f251
 800f1fc:	0800f251 	.word	0x0800f251
 800f200:	0800f251 	.word	0x0800f251
 800f204:	0800f251 	.word	0x0800f251
 800f208:	0800f251 	.word	0x0800f251
 800f20c:	0800f251 	.word	0x0800f251
 800f210:	0800f251 	.word	0x0800f251
 800f214:	0800f251 	.word	0x0800f251
 800f218:	0800f251 	.word	0x0800f251
 800f21c:	0800f251 	.word	0x0800f251
 800f220:	0800f251 	.word	0x0800f251
 800f224:	0800f251 	.word	0x0800f251
 800f228:	0800f251 	.word	0x0800f251
 800f22c:	0800f251 	.word	0x0800f251
 800f230:	0800f251 	.word	0x0800f251
 800f234:	0800f251 	.word	0x0800f251
 800f238:	0800f251 	.word	0x0800f251
 800f23c:	0800f251 	.word	0x0800f251
 800f240:	0800f251 	.word	0x0800f251
 800f244:	0800f251 	.word	0x0800f251
 800f248:	0800f251 	.word	0x0800f251
 800f24c:	0800f251 	.word	0x0800f251
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f250:	bf00      	nop
  }

  return (USBD_OK);
 800f252:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f254:	4618      	mov	r0, r3
 800f256:	370c      	adds	r7, #12
 800f258:	46bd      	mov	sp, r7
 800f25a:	bc80      	pop	{r7}
 800f25c:	4770      	bx	lr
 800f25e:	bf00      	nop

0800f260 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f26a:	6879      	ldr	r1, [r7, #4]
 800f26c:	4805      	ldr	r0, [pc, #20]	; (800f284 <CDC_Receive_FS+0x24>)
 800f26e:	f7fc f974 	bl	800b55a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f272:	4804      	ldr	r0, [pc, #16]	; (800f284 <CDC_Receive_FS+0x24>)
 800f274:	f7fc f984 	bl	800b580 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f278:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3708      	adds	r7, #8
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	20001ed0 	.word	0x20001ed0

0800f288 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f288:	b480      	push	{r7}
 800f28a:	b083      	sub	sp, #12
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	4603      	mov	r3, r0
 800f290:	6039      	str	r1, [r7, #0]
 800f292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	2212      	movs	r2, #18
 800f298:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f29a:	4b03      	ldr	r3, [pc, #12]	; (800f2a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	370c      	adds	r7, #12
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bc80      	pop	{r7}
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop
 800f2a8:	20000150 	.word	0x20000150

0800f2ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	6039      	str	r1, [r7, #0]
 800f2b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	2204      	movs	r2, #4
 800f2bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f2be:	4b03      	ldr	r3, [pc, #12]	; (800f2cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bc80      	pop	{r7}
 800f2c8:	4770      	bx	lr
 800f2ca:	bf00      	nop
 800f2cc:	20000164 	.word	0x20000164

0800f2d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	6039      	str	r1, [r7, #0]
 800f2da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f2dc:	79fb      	ldrb	r3, [r7, #7]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d105      	bne.n	800f2ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f2e2:	683a      	ldr	r2, [r7, #0]
 800f2e4:	4907      	ldr	r1, [pc, #28]	; (800f304 <USBD_FS_ProductStrDescriptor+0x34>)
 800f2e6:	4808      	ldr	r0, [pc, #32]	; (800f308 <USBD_FS_ProductStrDescriptor+0x38>)
 800f2e8:	f7fd f930 	bl	800c54c <USBD_GetString>
 800f2ec:	e004      	b.n	800f2f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f2ee:	683a      	ldr	r2, [r7, #0]
 800f2f0:	4904      	ldr	r1, [pc, #16]	; (800f304 <USBD_FS_ProductStrDescriptor+0x34>)
 800f2f2:	4805      	ldr	r0, [pc, #20]	; (800f308 <USBD_FS_ProductStrDescriptor+0x38>)
 800f2f4:	f7fd f92a 	bl	800c54c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f2f8:	4b02      	ldr	r3, [pc, #8]	; (800f304 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3708      	adds	r7, #8
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	20002964 	.word	0x20002964
 800f308:	080106ec 	.word	0x080106ec

0800f30c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	4603      	mov	r3, r0
 800f314:	6039      	str	r1, [r7, #0]
 800f316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f318:	683a      	ldr	r2, [r7, #0]
 800f31a:	4904      	ldr	r1, [pc, #16]	; (800f32c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f31c:	4804      	ldr	r0, [pc, #16]	; (800f330 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f31e:	f7fd f915 	bl	800c54c <USBD_GetString>
  return USBD_StrDesc;
 800f322:	4b02      	ldr	r3, [pc, #8]	; (800f32c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f324:	4618      	mov	r0, r3
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	20002964 	.word	0x20002964
 800f330:	08010704 	.word	0x08010704

0800f334 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b082      	sub	sp, #8
 800f338:	af00      	add	r7, sp, #0
 800f33a:	4603      	mov	r3, r0
 800f33c:	6039      	str	r1, [r7, #0]
 800f33e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	221a      	movs	r2, #26
 800f344:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f346:	f000 f843 	bl	800f3d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f34a:	4b02      	ldr	r3, [pc, #8]	; (800f354 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3708      	adds	r7, #8
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	20000168 	.word	0x20000168

0800f358 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	4603      	mov	r3, r0
 800f360:	6039      	str	r1, [r7, #0]
 800f362:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f364:	79fb      	ldrb	r3, [r7, #7]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d105      	bne.n	800f376 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f36a:	683a      	ldr	r2, [r7, #0]
 800f36c:	4907      	ldr	r1, [pc, #28]	; (800f38c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f36e:	4808      	ldr	r0, [pc, #32]	; (800f390 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f370:	f7fd f8ec 	bl	800c54c <USBD_GetString>
 800f374:	e004      	b.n	800f380 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f376:	683a      	ldr	r2, [r7, #0]
 800f378:	4904      	ldr	r1, [pc, #16]	; (800f38c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f37a:	4805      	ldr	r0, [pc, #20]	; (800f390 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f37c:	f7fd f8e6 	bl	800c54c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f380:	4b02      	ldr	r3, [pc, #8]	; (800f38c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f382:	4618      	mov	r0, r3
 800f384:	3708      	adds	r7, #8
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	20002964 	.word	0x20002964
 800f390:	08010718 	.word	0x08010718

0800f394 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	4603      	mov	r3, r0
 800f39c:	6039      	str	r1, [r7, #0]
 800f39e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f3a0:	79fb      	ldrb	r3, [r7, #7]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d105      	bne.n	800f3b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f3a6:	683a      	ldr	r2, [r7, #0]
 800f3a8:	4907      	ldr	r1, [pc, #28]	; (800f3c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f3aa:	4808      	ldr	r0, [pc, #32]	; (800f3cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f3ac:	f7fd f8ce 	bl	800c54c <USBD_GetString>
 800f3b0:	e004      	b.n	800f3bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f3b2:	683a      	ldr	r2, [r7, #0]
 800f3b4:	4904      	ldr	r1, [pc, #16]	; (800f3c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f3b6:	4805      	ldr	r0, [pc, #20]	; (800f3cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f3b8:	f7fd f8c8 	bl	800c54c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f3bc:	4b02      	ldr	r3, [pc, #8]	; (800f3c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3708      	adds	r7, #8
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	20002964 	.word	0x20002964
 800f3cc:	08010724 	.word	0x08010724

0800f3d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f3d6:	4b0f      	ldr	r3, [pc, #60]	; (800f414 <Get_SerialNum+0x44>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f3dc:	4b0e      	ldr	r3, [pc, #56]	; (800f418 <Get_SerialNum+0x48>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f3e2:	4b0e      	ldr	r3, [pc, #56]	; (800f41c <Get_SerialNum+0x4c>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f3e8:	68fa      	ldr	r2, [r7, #12]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d009      	beq.n	800f40a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f3f6:	2208      	movs	r2, #8
 800f3f8:	4909      	ldr	r1, [pc, #36]	; (800f420 <Get_SerialNum+0x50>)
 800f3fa:	68f8      	ldr	r0, [r7, #12]
 800f3fc:	f000 f814 	bl	800f428 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f400:	2204      	movs	r2, #4
 800f402:	4908      	ldr	r1, [pc, #32]	; (800f424 <Get_SerialNum+0x54>)
 800f404:	68b8      	ldr	r0, [r7, #8]
 800f406:	f000 f80f 	bl	800f428 <IntToUnicode>
  }
}
 800f40a:	bf00      	nop
 800f40c:	3710      	adds	r7, #16
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}
 800f412:	bf00      	nop
 800f414:	1ffff7e8 	.word	0x1ffff7e8
 800f418:	1ffff7ec 	.word	0x1ffff7ec
 800f41c:	1ffff7f0 	.word	0x1ffff7f0
 800f420:	2000016a 	.word	0x2000016a
 800f424:	2000017a 	.word	0x2000017a

0800f428 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f428:	b480      	push	{r7}
 800f42a:	b087      	sub	sp, #28
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	4613      	mov	r3, r2
 800f434:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f436:	2300      	movs	r3, #0
 800f438:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f43a:	2300      	movs	r3, #0
 800f43c:	75fb      	strb	r3, [r7, #23]
 800f43e:	e027      	b.n	800f490 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	0f1b      	lsrs	r3, r3, #28
 800f444:	2b09      	cmp	r3, #9
 800f446:	d80b      	bhi.n	800f460 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	0f1b      	lsrs	r3, r3, #28
 800f44c:	b2da      	uxtb	r2, r3
 800f44e:	7dfb      	ldrb	r3, [r7, #23]
 800f450:	005b      	lsls	r3, r3, #1
 800f452:	4619      	mov	r1, r3
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	440b      	add	r3, r1
 800f458:	3230      	adds	r2, #48	; 0x30
 800f45a:	b2d2      	uxtb	r2, r2
 800f45c:	701a      	strb	r2, [r3, #0]
 800f45e:	e00a      	b.n	800f476 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	0f1b      	lsrs	r3, r3, #28
 800f464:	b2da      	uxtb	r2, r3
 800f466:	7dfb      	ldrb	r3, [r7, #23]
 800f468:	005b      	lsls	r3, r3, #1
 800f46a:	4619      	mov	r1, r3
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	440b      	add	r3, r1
 800f470:	3237      	adds	r2, #55	; 0x37
 800f472:	b2d2      	uxtb	r2, r2
 800f474:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	011b      	lsls	r3, r3, #4
 800f47a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f47c:	7dfb      	ldrb	r3, [r7, #23]
 800f47e:	005b      	lsls	r3, r3, #1
 800f480:	3301      	adds	r3, #1
 800f482:	68ba      	ldr	r2, [r7, #8]
 800f484:	4413      	add	r3, r2
 800f486:	2200      	movs	r2, #0
 800f488:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f48a:	7dfb      	ldrb	r3, [r7, #23]
 800f48c:	3301      	adds	r3, #1
 800f48e:	75fb      	strb	r3, [r7, #23]
 800f490:	7dfa      	ldrb	r2, [r7, #23]
 800f492:	79fb      	ldrb	r3, [r7, #7]
 800f494:	429a      	cmp	r2, r3
 800f496:	d3d3      	bcc.n	800f440 <IntToUnicode+0x18>
  }
}
 800f498:	bf00      	nop
 800f49a:	bf00      	nop
 800f49c:	371c      	adds	r7, #28
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bc80      	pop	{r7}
 800f4a2:	4770      	bx	lr

0800f4a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	4a0d      	ldr	r2, [pc, #52]	; (800f4e8 <HAL_PCD_MspInit+0x44>)
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d113      	bne.n	800f4de <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f4b6:	4b0d      	ldr	r3, [pc, #52]	; (800f4ec <HAL_PCD_MspInit+0x48>)
 800f4b8:	69db      	ldr	r3, [r3, #28]
 800f4ba:	4a0c      	ldr	r2, [pc, #48]	; (800f4ec <HAL_PCD_MspInit+0x48>)
 800f4bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f4c0:	61d3      	str	r3, [r2, #28]
 800f4c2:	4b0a      	ldr	r3, [pc, #40]	; (800f4ec <HAL_PCD_MspInit+0x48>)
 800f4c4:	69db      	ldr	r3, [r3, #28]
 800f4c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f4ca:	60fb      	str	r3, [r7, #12]
 800f4cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	2105      	movs	r1, #5
 800f4d2:	2014      	movs	r0, #20
 800f4d4:	f7f4 fae3 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800f4d8:	2014      	movs	r0, #20
 800f4da:	f7f4 fafc 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f4de:	bf00      	nop
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
 800f4e6:	bf00      	nop
 800f4e8:	40005c00 	.word	0x40005c00
 800f4ec:	40021000 	.word	0x40021000

0800f4f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800f504:	4619      	mov	r1, r3
 800f506:	4610      	mov	r0, r2
 800f508:	f7fc f8f0 	bl	800b6ec <USBD_LL_SetupStage>
}
 800f50c:	bf00      	nop
 800f50e:	3708      	adds	r7, #8
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	460b      	mov	r3, r1
 800f51e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800f526:	78fa      	ldrb	r2, [r7, #3]
 800f528:	6879      	ldr	r1, [r7, #4]
 800f52a:	4613      	mov	r3, r2
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	4413      	add	r3, r2
 800f530:	00db      	lsls	r3, r3, #3
 800f532:	440b      	add	r3, r1
 800f534:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	78fb      	ldrb	r3, [r7, #3]
 800f53c:	4619      	mov	r1, r3
 800f53e:	f7fc f922 	bl	800b786 <USBD_LL_DataOutStage>
}
 800f542:	bf00      	nop
 800f544:	3708      	adds	r7, #8
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}

0800f54a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f54a:	b580      	push	{r7, lr}
 800f54c:	b082      	sub	sp, #8
 800f54e:	af00      	add	r7, sp, #0
 800f550:	6078      	str	r0, [r7, #4]
 800f552:	460b      	mov	r3, r1
 800f554:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800f55c:	78fa      	ldrb	r2, [r7, #3]
 800f55e:	6879      	ldr	r1, [r7, #4]
 800f560:	4613      	mov	r3, r2
 800f562:	009b      	lsls	r3, r3, #2
 800f564:	4413      	add	r3, r2
 800f566:	00db      	lsls	r3, r3, #3
 800f568:	440b      	add	r3, r1
 800f56a:	333c      	adds	r3, #60	; 0x3c
 800f56c:	681a      	ldr	r2, [r3, #0]
 800f56e:	78fb      	ldrb	r3, [r7, #3]
 800f570:	4619      	mov	r1, r3
 800f572:	f7fc f979 	bl	800b868 <USBD_LL_DataInStage>
}
 800f576:	bf00      	nop
 800f578:	3708      	adds	r7, #8
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}

0800f57e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f57e:	b580      	push	{r7, lr}
 800f580:	b082      	sub	sp, #8
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7fc fa89 	bl	800baa4 <USBD_LL_SOF>
}
 800f592:	bf00      	nop
 800f594:	3708      	adds	r7, #8
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b084      	sub	sp, #16
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	689b      	ldr	r3, [r3, #8]
 800f5aa:	2b02      	cmp	r3, #2
 800f5ac:	d001      	beq.n	800f5b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f5ae:	f7f3 fe4f 	bl	8003250 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800f5b8:	7bfa      	ldrb	r2, [r7, #15]
 800f5ba:	4611      	mov	r1, r2
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7fc fa39 	bl	800ba34 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7fc f9f2 	bl	800b9b2 <USBD_LL_Reset>
}
 800f5ce:	bf00      	nop
 800f5d0:	3710      	adds	r7, #16
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
	...

0800f5d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7fc fa33 	bl	800ba52 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	699b      	ldr	r3, [r3, #24]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d005      	beq.n	800f600 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f5f4:	4b04      	ldr	r3, [pc, #16]	; (800f608 <HAL_PCD_SuspendCallback+0x30>)
 800f5f6:	691b      	ldr	r3, [r3, #16]
 800f5f8:	4a03      	ldr	r2, [pc, #12]	; (800f608 <HAL_PCD_SuspendCallback+0x30>)
 800f5fa:	f043 0306 	orr.w	r3, r3, #6
 800f5fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f600:	bf00      	nop
 800f602:	3708      	adds	r7, #8
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	e000ed00 	.word	0xe000ed00

0800f60c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7fc fa2d 	bl	800ba7a <USBD_LL_Resume>
}
 800f620:	bf00      	nop
 800f622:	3708      	adds	r7, #8
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800f630:	4a28      	ldr	r2, [pc, #160]	; (800f6d4 <USBD_LL_Init+0xac>)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	4a26      	ldr	r2, [pc, #152]	; (800f6d4 <USBD_LL_Init+0xac>)
 800f63c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800f640:	4b24      	ldr	r3, [pc, #144]	; (800f6d4 <USBD_LL_Init+0xac>)
 800f642:	4a25      	ldr	r2, [pc, #148]	; (800f6d8 <USBD_LL_Init+0xb0>)
 800f644:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f646:	4b23      	ldr	r3, [pc, #140]	; (800f6d4 <USBD_LL_Init+0xac>)
 800f648:	2208      	movs	r2, #8
 800f64a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f64c:	4b21      	ldr	r3, [pc, #132]	; (800f6d4 <USBD_LL_Init+0xac>)
 800f64e:	2202      	movs	r2, #2
 800f650:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f652:	4b20      	ldr	r3, [pc, #128]	; (800f6d4 <USBD_LL_Init+0xac>)
 800f654:	2200      	movs	r2, #0
 800f656:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f658:	4b1e      	ldr	r3, [pc, #120]	; (800f6d4 <USBD_LL_Init+0xac>)
 800f65a:	2200      	movs	r2, #0
 800f65c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f65e:	4b1d      	ldr	r3, [pc, #116]	; (800f6d4 <USBD_LL_Init+0xac>)
 800f660:	2200      	movs	r2, #0
 800f662:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f664:	481b      	ldr	r0, [pc, #108]	; (800f6d4 <USBD_LL_Init+0xac>)
 800f666:	f7f6 f8ab 	bl	80057c0 <HAL_PCD_Init>
 800f66a:	4603      	mov	r3, r0
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d001      	beq.n	800f674 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800f670:	f7f3 fdee 	bl	8003250 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f67a:	2318      	movs	r3, #24
 800f67c:	2200      	movs	r2, #0
 800f67e:	2100      	movs	r1, #0
 800f680:	f7f7 fd1f 	bl	80070c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f68a:	2358      	movs	r3, #88	; 0x58
 800f68c:	2200      	movs	r2, #0
 800f68e:	2180      	movs	r1, #128	; 0x80
 800f690:	f7f7 fd17 	bl	80070c2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f69a:	23c0      	movs	r3, #192	; 0xc0
 800f69c:	2200      	movs	r2, #0
 800f69e:	2181      	movs	r1, #129	; 0x81
 800f6a0:	f7f7 fd0f 	bl	80070c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f6aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	2101      	movs	r1, #1
 800f6b2:	f7f7 fd06 	bl	80070c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f6bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	2182      	movs	r1, #130	; 0x82
 800f6c4:	f7f7 fcfd 	bl	80070c2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f6c8:	2300      	movs	r3, #0
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3708      	adds	r7, #8
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	20002b64 	.word	0x20002b64
 800f6d8:	40005c00 	.word	0x40005c00

0800f6dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b084      	sub	sp, #16
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7f6 f96f 	bl	80059d6 <HAL_PCD_Start>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6fc:	7bfb      	ldrb	r3, [r7, #15]
 800f6fe:	4618      	mov	r0, r3
 800f700:	f000 f94e 	bl	800f9a0 <USBD_Get_USB_Status>
 800f704:	4603      	mov	r3, r0
 800f706:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f708:	7bbb      	ldrb	r3, [r7, #14]
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}

0800f712 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f712:	b580      	push	{r7, lr}
 800f714:	b084      	sub	sp, #16
 800f716:	af00      	add	r7, sp, #0
 800f718:	6078      	str	r0, [r7, #4]
 800f71a:	4608      	mov	r0, r1
 800f71c:	4611      	mov	r1, r2
 800f71e:	461a      	mov	r2, r3
 800f720:	4603      	mov	r3, r0
 800f722:	70fb      	strb	r3, [r7, #3]
 800f724:	460b      	mov	r3, r1
 800f726:	70bb      	strb	r3, [r7, #2]
 800f728:	4613      	mov	r3, r2
 800f72a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f72c:	2300      	movs	r3, #0
 800f72e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f730:	2300      	movs	r3, #0
 800f732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f73a:	78bb      	ldrb	r3, [r7, #2]
 800f73c:	883a      	ldrh	r2, [r7, #0]
 800f73e:	78f9      	ldrb	r1, [r7, #3]
 800f740:	f7f6 fae7 	bl	8005d12 <HAL_PCD_EP_Open>
 800f744:	4603      	mov	r3, r0
 800f746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f748:	7bfb      	ldrb	r3, [r7, #15]
 800f74a:	4618      	mov	r0, r3
 800f74c:	f000 f928 	bl	800f9a0 <USBD_Get_USB_Status>
 800f750:	4603      	mov	r3, r0
 800f752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f754:	7bbb      	ldrb	r3, [r7, #14]
}
 800f756:	4618      	mov	r0, r3
 800f758:	3710      	adds	r7, #16
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}

0800f75e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f75e:	b580      	push	{r7, lr}
 800f760:	b084      	sub	sp, #16
 800f762:	af00      	add	r7, sp, #0
 800f764:	6078      	str	r0, [r7, #4]
 800f766:	460b      	mov	r3, r1
 800f768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f76a:	2300      	movs	r3, #0
 800f76c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f76e:	2300      	movs	r3, #0
 800f770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f778:	78fa      	ldrb	r2, [r7, #3]
 800f77a:	4611      	mov	r1, r2
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7f6 fb2e 	bl	8005dde <HAL_PCD_EP_Close>
 800f782:	4603      	mov	r3, r0
 800f784:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f786:	7bfb      	ldrb	r3, [r7, #15]
 800f788:	4618      	mov	r0, r3
 800f78a:	f000 f909 	bl	800f9a0 <USBD_Get_USB_Status>
 800f78e:	4603      	mov	r3, r0
 800f790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f792:	7bbb      	ldrb	r3, [r7, #14]
}
 800f794:	4618      	mov	r0, r3
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b084      	sub	sp, #16
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f7b6:	78fa      	ldrb	r2, [r7, #3]
 800f7b8:	4611      	mov	r1, r2
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7f6 fbee 	bl	8005f9c <HAL_PCD_EP_SetStall>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7c4:	7bfb      	ldrb	r3, [r7, #15]
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f000 f8ea 	bl	800f9a0 <USBD_Get_USB_Status>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3710      	adds	r7, #16
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b084      	sub	sp, #16
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]
 800f7e2:	460b      	mov	r3, r1
 800f7e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f7f4:	78fa      	ldrb	r2, [r7, #3]
 800f7f6:	4611      	mov	r1, r2
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7f6 fc2f 	bl	800605c <HAL_PCD_EP_ClrStall>
 800f7fe:	4603      	mov	r3, r0
 800f800:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f802:	7bfb      	ldrb	r3, [r7, #15]
 800f804:	4618      	mov	r0, r3
 800f806:	f000 f8cb 	bl	800f9a0 <USBD_Get_USB_Status>
 800f80a:	4603      	mov	r3, r0
 800f80c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f80e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f810:	4618      	mov	r0, r3
 800f812:	3710      	adds	r7, #16
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}

0800f818 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f818:	b480      	push	{r7}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	460b      	mov	r3, r1
 800f822:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f82a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f82c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f830:	2b00      	cmp	r3, #0
 800f832:	da0c      	bge.n	800f84e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f834:	78fb      	ldrb	r3, [r7, #3]
 800f836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f83a:	68f9      	ldr	r1, [r7, #12]
 800f83c:	1c5a      	adds	r2, r3, #1
 800f83e:	4613      	mov	r3, r2
 800f840:	009b      	lsls	r3, r3, #2
 800f842:	4413      	add	r3, r2
 800f844:	00db      	lsls	r3, r3, #3
 800f846:	440b      	add	r3, r1
 800f848:	3302      	adds	r3, #2
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	e00b      	b.n	800f866 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f84e:	78fb      	ldrb	r3, [r7, #3]
 800f850:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f854:	68f9      	ldr	r1, [r7, #12]
 800f856:	4613      	mov	r3, r2
 800f858:	009b      	lsls	r3, r3, #2
 800f85a:	4413      	add	r3, r2
 800f85c:	00db      	lsls	r3, r3, #3
 800f85e:	440b      	add	r3, r1
 800f860:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800f864:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f866:	4618      	mov	r0, r3
 800f868:	3714      	adds	r7, #20
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bc80      	pop	{r7}
 800f86e:	4770      	bx	lr

0800f870 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b084      	sub	sp, #16
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	460b      	mov	r3, r1
 800f87a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f87c:	2300      	movs	r3, #0
 800f87e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f880:	2300      	movs	r3, #0
 800f882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f88a:	78fa      	ldrb	r2, [r7, #3]
 800f88c:	4611      	mov	r1, r2
 800f88e:	4618      	mov	r0, r3
 800f890:	f7f6 fa1a 	bl	8005cc8 <HAL_PCD_SetAddress>
 800f894:	4603      	mov	r3, r0
 800f896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f898:	7bfb      	ldrb	r3, [r7, #15]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f000 f880 	bl	800f9a0 <USBD_Get_USB_Status>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3710      	adds	r7, #16
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}

0800f8ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f8ae:	b580      	push	{r7, lr}
 800f8b0:	b086      	sub	sp, #24
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	60f8      	str	r0, [r7, #12]
 800f8b6:	607a      	str	r2, [r7, #4]
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	72fb      	strb	r3, [r7, #11]
 800f8be:	4613      	mov	r3, r2
 800f8c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f8d0:	893b      	ldrh	r3, [r7, #8]
 800f8d2:	7af9      	ldrb	r1, [r7, #11]
 800f8d4:	687a      	ldr	r2, [r7, #4]
 800f8d6:	f7f6 fb1e 	bl	8005f16 <HAL_PCD_EP_Transmit>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8de:	7dfb      	ldrb	r3, [r7, #23]
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f000 f85d 	bl	800f9a0 <USBD_Get_USB_Status>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f8ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3718      	adds	r7, #24
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b086      	sub	sp, #24
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	607a      	str	r2, [r7, #4]
 800f8fe:	461a      	mov	r2, r3
 800f900:	460b      	mov	r3, r1
 800f902:	72fb      	strb	r3, [r7, #11]
 800f904:	4613      	mov	r3, r2
 800f906:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f908:	2300      	movs	r3, #0
 800f90a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f90c:	2300      	movs	r3, #0
 800f90e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f916:	893b      	ldrh	r3, [r7, #8]
 800f918:	7af9      	ldrb	r1, [r7, #11]
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	f7f6 faa7 	bl	8005e6e <HAL_PCD_EP_Receive>
 800f920:	4603      	mov	r3, r0
 800f922:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f924:	7dfb      	ldrb	r3, [r7, #23]
 800f926:	4618      	mov	r0, r3
 800f928:	f000 f83a 	bl	800f9a0 <USBD_Get_USB_Status>
 800f92c:	4603      	mov	r3, r0
 800f92e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f930:	7dbb      	ldrb	r3, [r7, #22]
}
 800f932:	4618      	mov	r0, r3
 800f934:	3718      	adds	r7, #24
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}

0800f93a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f93a:	b580      	push	{r7, lr}
 800f93c:	b082      	sub	sp, #8
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
 800f942:	460b      	mov	r3, r1
 800f944:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f94c:	78fa      	ldrb	r2, [r7, #3]
 800f94e:	4611      	mov	r1, r2
 800f950:	4618      	mov	r0, r3
 800f952:	f7f6 fac9 	bl	8005ee8 <HAL_PCD_EP_GetRxCount>
 800f956:	4603      	mov	r3, r0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3708      	adds	r7, #8
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f960:	b480      	push	{r7}
 800f962:	b083      	sub	sp, #12
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f968:	4b02      	ldr	r3, [pc, #8]	; (800f974 <USBD_static_malloc+0x14>)
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	370c      	adds	r7, #12
 800f96e:	46bd      	mov	sp, r7
 800f970:	bc80      	pop	{r7}
 800f972:	4770      	bx	lr
 800f974:	20002e50 	.word	0x20002e50

0800f978 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]

}
 800f980:	bf00      	nop
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	bc80      	pop	{r7}
 800f988:	4770      	bx	lr

0800f98a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f98a:	b480      	push	{r7}
 800f98c:	b083      	sub	sp, #12
 800f98e:	af00      	add	r7, sp, #0
 800f990:	6078      	str	r0, [r7, #4]
 800f992:	460b      	mov	r3, r1
 800f994:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800f996:	bf00      	nop
 800f998:	370c      	adds	r7, #12
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bc80      	pop	{r7}
 800f99e:	4770      	bx	lr

0800f9a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b085      	sub	sp, #20
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f9ae:	79fb      	ldrb	r3, [r7, #7]
 800f9b0:	2b03      	cmp	r3, #3
 800f9b2:	d817      	bhi.n	800f9e4 <USBD_Get_USB_Status+0x44>
 800f9b4:	a201      	add	r2, pc, #4	; (adr r2, 800f9bc <USBD_Get_USB_Status+0x1c>)
 800f9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ba:	bf00      	nop
 800f9bc:	0800f9cd 	.word	0x0800f9cd
 800f9c0:	0800f9d3 	.word	0x0800f9d3
 800f9c4:	0800f9d9 	.word	0x0800f9d9
 800f9c8:	0800f9df 	.word	0x0800f9df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f9d0:	e00b      	b.n	800f9ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f9d2:	2302      	movs	r3, #2
 800f9d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f9d6:	e008      	b.n	800f9ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	73fb      	strb	r3, [r7, #15]
    break;
 800f9dc:	e005      	b.n	800f9ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f9de:	2302      	movs	r3, #2
 800f9e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f9e2:	e002      	b.n	800f9ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f9e4:	2302      	movs	r3, #2
 800f9e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f9e8:	bf00      	nop
  }
  return usb_status;
 800f9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3714      	adds	r7, #20
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bc80      	pop	{r7}
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop

0800f9f8 <__aeabi_atexit>:
 800f9f8:	460b      	mov	r3, r1
 800f9fa:	4601      	mov	r1, r0
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f000 b8b5 	b.w	800fb6c <__cxa_atexit>

0800fa02 <_ZdlPvj>:
 800fa02:	f000 b886 	b.w	800fb12 <_ZdlPv>

0800fa06 <_Znwj>:
 800fa06:	2801      	cmp	r0, #1
 800fa08:	bf38      	it	cc
 800fa0a:	2001      	movcc	r0, #1
 800fa0c:	b510      	push	{r4, lr}
 800fa0e:	4604      	mov	r4, r0
 800fa10:	4620      	mov	r0, r4
 800fa12:	f000 f8e5 	bl	800fbe0 <malloc>
 800fa16:	b930      	cbnz	r0, 800fa26 <_Znwj+0x20>
 800fa18:	f000 f890 	bl	800fb3c <_ZSt15get_new_handlerv>
 800fa1c:	b908      	cbnz	r0, 800fa22 <_Znwj+0x1c>
 800fa1e:	f000 f89e 	bl	800fb5e <abort>
 800fa22:	4780      	blx	r0
 800fa24:	e7f4      	b.n	800fa10 <_Znwj+0xa>
 800fa26:	bd10      	pop	{r4, pc}

0800fa28 <__cxa_pure_virtual>:
 800fa28:	b508      	push	{r3, lr}
 800fa2a:	f000 f881 	bl	800fb30 <_ZSt9terminatev>

0800fa2e <_ZNSaIcEC1Ev>:
 800fa2e:	4770      	bx	lr

0800fa30 <_ZNSaIcED1Ev>:
 800fa30:	4770      	bx	lr

0800fa32 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800fa32:	b10a      	cbz	r2, 800fa38 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800fa34:	f000 b8f2 	b.w	800fc1c <memcpy>
 800fa38:	4770      	bx	lr
	...

0800fa3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800fa3c:	b508      	push	{r3, lr}
 800fa3e:	680b      	ldr	r3, [r1, #0]
 800fa40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa44:	d302      	bcc.n	800fa4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800fa46:	480d      	ldr	r0, [pc, #52]	; (800fa7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800fa48:	f000 f886 	bl	800fb58 <_ZSt20__throw_length_errorPKc>
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d90b      	bls.n	800fa68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800fa50:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800fa54:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800fa58:	d206      	bcs.n	800fa68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800fa5a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800fa5e:	bf2a      	itet	cs
 800fa60:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800fa64:	6008      	strcc	r0, [r1, #0]
 800fa66:	600b      	strcs	r3, [r1, #0]
 800fa68:	6808      	ldr	r0, [r1, #0]
 800fa6a:	3001      	adds	r0, #1
 800fa6c:	d501      	bpl.n	800fa72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800fa6e:	f000 f86d 	bl	800fb4c <_ZSt17__throw_bad_allocv>
 800fa72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fa76:	f7ff bfc6 	b.w	800fa06 <_Znwj>
 800fa7a:	bf00      	nop
 800fa7c:	0801095c 	.word	0x0801095c

0800fa80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800fa80:	2a01      	cmp	r2, #1
 800fa82:	b410      	push	{r4}
 800fa84:	d103      	bne.n	800fa8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 800fa86:	780a      	ldrb	r2, [r1, #0]
 800fa88:	bc10      	pop	{r4}
 800fa8a:	7002      	strb	r2, [r0, #0]
 800fa8c:	4770      	bx	lr
 800fa8e:	bc10      	pop	{r4}
 800fa90:	f7ff bfcf 	b.w	800fa32 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800fa94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800fa94:	b508      	push	{r3, lr}
 800fa96:	1a52      	subs	r2, r2, r1
 800fa98:	f7ff fff2 	bl	800fa80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fa9c:	bd08      	pop	{r3, pc}
	...

0800faa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800faa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800faa2:	4604      	mov	r4, r0
 800faa4:	4616      	mov	r6, r2
 800faa6:	460d      	mov	r5, r1
 800faa8:	b919      	cbnz	r1, 800fab2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800faaa:	b112      	cbz	r2, 800fab2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800faac:	480d      	ldr	r0, [pc, #52]	; (800fae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800faae:	f000 f850 	bl	800fb52 <_ZSt19__throw_logic_errorPKc>
 800fab2:	1b73      	subs	r3, r6, r5
 800fab4:	2b0f      	cmp	r3, #15
 800fab6:	9301      	str	r3, [sp, #4]
 800fab8:	d907      	bls.n	800faca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800faba:	2200      	movs	r2, #0
 800fabc:	4620      	mov	r0, r4
 800fabe:	a901      	add	r1, sp, #4
 800fac0:	f7ff ffbc 	bl	800fa3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800fac4:	9b01      	ldr	r3, [sp, #4]
 800fac6:	6020      	str	r0, [r4, #0]
 800fac8:	60a3      	str	r3, [r4, #8]
 800faca:	4632      	mov	r2, r6
 800facc:	4629      	mov	r1, r5
 800face:	6820      	ldr	r0, [r4, #0]
 800fad0:	f7ff ffe0 	bl	800fa94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800fad4:	2100      	movs	r1, #0
 800fad6:	9b01      	ldr	r3, [sp, #4]
 800fad8:	6822      	ldr	r2, [r4, #0]
 800fada:	6063      	str	r3, [r4, #4]
 800fadc:	54d1      	strb	r1, [r2, r3]
 800fade:	b002      	add	sp, #8
 800fae0:	bd70      	pop	{r4, r5, r6, pc}
 800fae2:	bf00      	nop
 800fae4:	08010974 	.word	0x08010974

0800fae8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800fae8:	b538      	push	{r3, r4, r5, lr}
 800faea:	f100 0308 	add.w	r3, r0, #8
 800faee:	4604      	mov	r4, r0
 800faf0:	460d      	mov	r5, r1
 800faf2:	6003      	str	r3, [r0, #0]
 800faf4:	b159      	cbz	r1, 800fb0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800faf6:	4608      	mov	r0, r1
 800faf8:	f7f0 fb9a 	bl	8000230 <strlen>
 800fafc:	182a      	adds	r2, r5, r0
 800fafe:	4620      	mov	r0, r4
 800fb00:	f04f 0300 	mov.w	r3, #0
 800fb04:	4629      	mov	r1, r5
 800fb06:	f7ff ffcb 	bl	800faa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	bd38      	pop	{r3, r4, r5, pc}
 800fb0e:	2201      	movs	r2, #1
 800fb10:	e7f5      	b.n	800fafe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800fb12 <_ZdlPv>:
 800fb12:	f000 b86d 	b.w	800fbf0 <free>

0800fb16 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800fb16:	b508      	push	{r3, lr}
 800fb18:	4780      	blx	r0
 800fb1a:	f000 f820 	bl	800fb5e <abort>
	...

0800fb20 <_ZSt13get_terminatev>:
 800fb20:	4b02      	ldr	r3, [pc, #8]	; (800fb2c <_ZSt13get_terminatev+0xc>)
 800fb22:	6818      	ldr	r0, [r3, #0]
 800fb24:	f3bf 8f5b 	dmb	ish
 800fb28:	4770      	bx	lr
 800fb2a:	bf00      	nop
 800fb2c:	20000184 	.word	0x20000184

0800fb30 <_ZSt9terminatev>:
 800fb30:	b508      	push	{r3, lr}
 800fb32:	f7ff fff5 	bl	800fb20 <_ZSt13get_terminatev>
 800fb36:	f7ff ffee 	bl	800fb16 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800fb3c <_ZSt15get_new_handlerv>:
 800fb3c:	4b02      	ldr	r3, [pc, #8]	; (800fb48 <_ZSt15get_new_handlerv+0xc>)
 800fb3e:	6818      	ldr	r0, [r3, #0]
 800fb40:	f3bf 8f5b 	dmb	ish
 800fb44:	4770      	bx	lr
 800fb46:	bf00      	nop
 800fb48:	20003070 	.word	0x20003070

0800fb4c <_ZSt17__throw_bad_allocv>:
 800fb4c:	b508      	push	{r3, lr}
 800fb4e:	f000 f806 	bl	800fb5e <abort>

0800fb52 <_ZSt19__throw_logic_errorPKc>:
 800fb52:	b508      	push	{r3, lr}
 800fb54:	f000 f803 	bl	800fb5e <abort>

0800fb58 <_ZSt20__throw_length_errorPKc>:
 800fb58:	b508      	push	{r3, lr}
 800fb5a:	f000 f800 	bl	800fb5e <abort>

0800fb5e <abort>:
 800fb5e:	2006      	movs	r0, #6
 800fb60:	b508      	push	{r3, lr}
 800fb62:	f000 fa09 	bl	800ff78 <raise>
 800fb66:	2001      	movs	r0, #1
 800fb68:	f7f3 fdf3 	bl	8003752 <_exit>

0800fb6c <__cxa_atexit>:
 800fb6c:	b510      	push	{r4, lr}
 800fb6e:	4604      	mov	r4, r0
 800fb70:	4804      	ldr	r0, [pc, #16]	; (800fb84 <__cxa_atexit+0x18>)
 800fb72:	4613      	mov	r3, r2
 800fb74:	b120      	cbz	r0, 800fb80 <__cxa_atexit+0x14>
 800fb76:	460a      	mov	r2, r1
 800fb78:	2002      	movs	r0, #2
 800fb7a:	4621      	mov	r1, r4
 800fb7c:	f3af 8000 	nop.w
 800fb80:	bd10      	pop	{r4, pc}
 800fb82:	bf00      	nop
 800fb84:	00000000 	.word	0x00000000

0800fb88 <__errno>:
 800fb88:	4b01      	ldr	r3, [pc, #4]	; (800fb90 <__errno+0x8>)
 800fb8a:	6818      	ldr	r0, [r3, #0]
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop
 800fb90:	20000188 	.word	0x20000188

0800fb94 <__libc_init_array>:
 800fb94:	b570      	push	{r4, r5, r6, lr}
 800fb96:	2600      	movs	r6, #0
 800fb98:	4d0c      	ldr	r5, [pc, #48]	; (800fbcc <__libc_init_array+0x38>)
 800fb9a:	4c0d      	ldr	r4, [pc, #52]	; (800fbd0 <__libc_init_array+0x3c>)
 800fb9c:	1b64      	subs	r4, r4, r5
 800fb9e:	10a4      	asrs	r4, r4, #2
 800fba0:	42a6      	cmp	r6, r4
 800fba2:	d109      	bne.n	800fbb8 <__libc_init_array+0x24>
 800fba4:	f000 fd5a 	bl	801065c <_init>
 800fba8:	2600      	movs	r6, #0
 800fbaa:	4d0a      	ldr	r5, [pc, #40]	; (800fbd4 <__libc_init_array+0x40>)
 800fbac:	4c0a      	ldr	r4, [pc, #40]	; (800fbd8 <__libc_init_array+0x44>)
 800fbae:	1b64      	subs	r4, r4, r5
 800fbb0:	10a4      	asrs	r4, r4, #2
 800fbb2:	42a6      	cmp	r6, r4
 800fbb4:	d105      	bne.n	800fbc2 <__libc_init_array+0x2e>
 800fbb6:	bd70      	pop	{r4, r5, r6, pc}
 800fbb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbbc:	4798      	blx	r3
 800fbbe:	3601      	adds	r6, #1
 800fbc0:	e7ee      	b.n	800fba0 <__libc_init_array+0xc>
 800fbc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbc6:	4798      	blx	r3
 800fbc8:	3601      	adds	r6, #1
 800fbca:	e7f2      	b.n	800fbb2 <__libc_init_array+0x1e>
 800fbcc:	08010bbc 	.word	0x08010bbc
 800fbd0:	08010bbc 	.word	0x08010bbc
 800fbd4:	08010bbc 	.word	0x08010bbc
 800fbd8:	08010bc4 	.word	0x08010bc4

0800fbdc <__retarget_lock_acquire_recursive>:
 800fbdc:	4770      	bx	lr

0800fbde <__retarget_lock_release_recursive>:
 800fbde:	4770      	bx	lr

0800fbe0 <malloc>:
 800fbe0:	4b02      	ldr	r3, [pc, #8]	; (800fbec <malloc+0xc>)
 800fbe2:	4601      	mov	r1, r0
 800fbe4:	6818      	ldr	r0, [r3, #0]
 800fbe6:	f000 b8b1 	b.w	800fd4c <_malloc_r>
 800fbea:	bf00      	nop
 800fbec:	20000188 	.word	0x20000188

0800fbf0 <free>:
 800fbf0:	4b02      	ldr	r3, [pc, #8]	; (800fbfc <free+0xc>)
 800fbf2:	4601      	mov	r1, r0
 800fbf4:	6818      	ldr	r0, [r3, #0]
 800fbf6:	f000 b841 	b.w	800fc7c <_free_r>
 800fbfa:	bf00      	nop
 800fbfc:	20000188 	.word	0x20000188

0800fc00 <memchr>:
 800fc00:	4603      	mov	r3, r0
 800fc02:	b510      	push	{r4, lr}
 800fc04:	b2c9      	uxtb	r1, r1
 800fc06:	4402      	add	r2, r0
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	d101      	bne.n	800fc12 <memchr+0x12>
 800fc0e:	2000      	movs	r0, #0
 800fc10:	e003      	b.n	800fc1a <memchr+0x1a>
 800fc12:	7804      	ldrb	r4, [r0, #0]
 800fc14:	3301      	adds	r3, #1
 800fc16:	428c      	cmp	r4, r1
 800fc18:	d1f6      	bne.n	800fc08 <memchr+0x8>
 800fc1a:	bd10      	pop	{r4, pc}

0800fc1c <memcpy>:
 800fc1c:	440a      	add	r2, r1
 800fc1e:	4291      	cmp	r1, r2
 800fc20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fc24:	d100      	bne.n	800fc28 <memcpy+0xc>
 800fc26:	4770      	bx	lr
 800fc28:	b510      	push	{r4, lr}
 800fc2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc2e:	4291      	cmp	r1, r2
 800fc30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc34:	d1f9      	bne.n	800fc2a <memcpy+0xe>
 800fc36:	bd10      	pop	{r4, pc}

0800fc38 <memmove>:
 800fc38:	4288      	cmp	r0, r1
 800fc3a:	b510      	push	{r4, lr}
 800fc3c:	eb01 0402 	add.w	r4, r1, r2
 800fc40:	d902      	bls.n	800fc48 <memmove+0x10>
 800fc42:	4284      	cmp	r4, r0
 800fc44:	4623      	mov	r3, r4
 800fc46:	d807      	bhi.n	800fc58 <memmove+0x20>
 800fc48:	1e43      	subs	r3, r0, #1
 800fc4a:	42a1      	cmp	r1, r4
 800fc4c:	d008      	beq.n	800fc60 <memmove+0x28>
 800fc4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc56:	e7f8      	b.n	800fc4a <memmove+0x12>
 800fc58:	4601      	mov	r1, r0
 800fc5a:	4402      	add	r2, r0
 800fc5c:	428a      	cmp	r2, r1
 800fc5e:	d100      	bne.n	800fc62 <memmove+0x2a>
 800fc60:	bd10      	pop	{r4, pc}
 800fc62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc6a:	e7f7      	b.n	800fc5c <memmove+0x24>

0800fc6c <memset>:
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	4402      	add	r2, r0
 800fc70:	4293      	cmp	r3, r2
 800fc72:	d100      	bne.n	800fc76 <memset+0xa>
 800fc74:	4770      	bx	lr
 800fc76:	f803 1b01 	strb.w	r1, [r3], #1
 800fc7a:	e7f9      	b.n	800fc70 <memset+0x4>

0800fc7c <_free_r>:
 800fc7c:	b538      	push	{r3, r4, r5, lr}
 800fc7e:	4605      	mov	r5, r0
 800fc80:	2900      	cmp	r1, #0
 800fc82:	d040      	beq.n	800fd06 <_free_r+0x8a>
 800fc84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc88:	1f0c      	subs	r4, r1, #4
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	bfb8      	it	lt
 800fc8e:	18e4      	addlt	r4, r4, r3
 800fc90:	f000 f9ae 	bl	800fff0 <__malloc_lock>
 800fc94:	4a1c      	ldr	r2, [pc, #112]	; (800fd08 <_free_r+0x8c>)
 800fc96:	6813      	ldr	r3, [r2, #0]
 800fc98:	b933      	cbnz	r3, 800fca8 <_free_r+0x2c>
 800fc9a:	6063      	str	r3, [r4, #4]
 800fc9c:	6014      	str	r4, [r2, #0]
 800fc9e:	4628      	mov	r0, r5
 800fca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fca4:	f000 b9aa 	b.w	800fffc <__malloc_unlock>
 800fca8:	42a3      	cmp	r3, r4
 800fcaa:	d908      	bls.n	800fcbe <_free_r+0x42>
 800fcac:	6820      	ldr	r0, [r4, #0]
 800fcae:	1821      	adds	r1, r4, r0
 800fcb0:	428b      	cmp	r3, r1
 800fcb2:	bf01      	itttt	eq
 800fcb4:	6819      	ldreq	r1, [r3, #0]
 800fcb6:	685b      	ldreq	r3, [r3, #4]
 800fcb8:	1809      	addeq	r1, r1, r0
 800fcba:	6021      	streq	r1, [r4, #0]
 800fcbc:	e7ed      	b.n	800fc9a <_free_r+0x1e>
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	b10b      	cbz	r3, 800fcc8 <_free_r+0x4c>
 800fcc4:	42a3      	cmp	r3, r4
 800fcc6:	d9fa      	bls.n	800fcbe <_free_r+0x42>
 800fcc8:	6811      	ldr	r1, [r2, #0]
 800fcca:	1850      	adds	r0, r2, r1
 800fccc:	42a0      	cmp	r0, r4
 800fcce:	d10b      	bne.n	800fce8 <_free_r+0x6c>
 800fcd0:	6820      	ldr	r0, [r4, #0]
 800fcd2:	4401      	add	r1, r0
 800fcd4:	1850      	adds	r0, r2, r1
 800fcd6:	4283      	cmp	r3, r0
 800fcd8:	6011      	str	r1, [r2, #0]
 800fcda:	d1e0      	bne.n	800fc9e <_free_r+0x22>
 800fcdc:	6818      	ldr	r0, [r3, #0]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	4401      	add	r1, r0
 800fce2:	6011      	str	r1, [r2, #0]
 800fce4:	6053      	str	r3, [r2, #4]
 800fce6:	e7da      	b.n	800fc9e <_free_r+0x22>
 800fce8:	d902      	bls.n	800fcf0 <_free_r+0x74>
 800fcea:	230c      	movs	r3, #12
 800fcec:	602b      	str	r3, [r5, #0]
 800fcee:	e7d6      	b.n	800fc9e <_free_r+0x22>
 800fcf0:	6820      	ldr	r0, [r4, #0]
 800fcf2:	1821      	adds	r1, r4, r0
 800fcf4:	428b      	cmp	r3, r1
 800fcf6:	bf01      	itttt	eq
 800fcf8:	6819      	ldreq	r1, [r3, #0]
 800fcfa:	685b      	ldreq	r3, [r3, #4]
 800fcfc:	1809      	addeq	r1, r1, r0
 800fcfe:	6021      	streq	r1, [r4, #0]
 800fd00:	6063      	str	r3, [r4, #4]
 800fd02:	6054      	str	r4, [r2, #4]
 800fd04:	e7cb      	b.n	800fc9e <_free_r+0x22>
 800fd06:	bd38      	pop	{r3, r4, r5, pc}
 800fd08:	20003078 	.word	0x20003078

0800fd0c <sbrk_aligned>:
 800fd0c:	b570      	push	{r4, r5, r6, lr}
 800fd0e:	4e0e      	ldr	r6, [pc, #56]	; (800fd48 <sbrk_aligned+0x3c>)
 800fd10:	460c      	mov	r4, r1
 800fd12:	6831      	ldr	r1, [r6, #0]
 800fd14:	4605      	mov	r5, r0
 800fd16:	b911      	cbnz	r1, 800fd1e <sbrk_aligned+0x12>
 800fd18:	f000 f8f6 	bl	800ff08 <_sbrk_r>
 800fd1c:	6030      	str	r0, [r6, #0]
 800fd1e:	4621      	mov	r1, r4
 800fd20:	4628      	mov	r0, r5
 800fd22:	f000 f8f1 	bl	800ff08 <_sbrk_r>
 800fd26:	1c43      	adds	r3, r0, #1
 800fd28:	d00a      	beq.n	800fd40 <sbrk_aligned+0x34>
 800fd2a:	1cc4      	adds	r4, r0, #3
 800fd2c:	f024 0403 	bic.w	r4, r4, #3
 800fd30:	42a0      	cmp	r0, r4
 800fd32:	d007      	beq.n	800fd44 <sbrk_aligned+0x38>
 800fd34:	1a21      	subs	r1, r4, r0
 800fd36:	4628      	mov	r0, r5
 800fd38:	f000 f8e6 	bl	800ff08 <_sbrk_r>
 800fd3c:	3001      	adds	r0, #1
 800fd3e:	d101      	bne.n	800fd44 <sbrk_aligned+0x38>
 800fd40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fd44:	4620      	mov	r0, r4
 800fd46:	bd70      	pop	{r4, r5, r6, pc}
 800fd48:	2000307c 	.word	0x2000307c

0800fd4c <_malloc_r>:
 800fd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd50:	1ccd      	adds	r5, r1, #3
 800fd52:	f025 0503 	bic.w	r5, r5, #3
 800fd56:	3508      	adds	r5, #8
 800fd58:	2d0c      	cmp	r5, #12
 800fd5a:	bf38      	it	cc
 800fd5c:	250c      	movcc	r5, #12
 800fd5e:	2d00      	cmp	r5, #0
 800fd60:	4607      	mov	r7, r0
 800fd62:	db01      	blt.n	800fd68 <_malloc_r+0x1c>
 800fd64:	42a9      	cmp	r1, r5
 800fd66:	d905      	bls.n	800fd74 <_malloc_r+0x28>
 800fd68:	230c      	movs	r3, #12
 800fd6a:	2600      	movs	r6, #0
 800fd6c:	603b      	str	r3, [r7, #0]
 800fd6e:	4630      	mov	r0, r6
 800fd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd74:	4e2e      	ldr	r6, [pc, #184]	; (800fe30 <_malloc_r+0xe4>)
 800fd76:	f000 f93b 	bl	800fff0 <__malloc_lock>
 800fd7a:	6833      	ldr	r3, [r6, #0]
 800fd7c:	461c      	mov	r4, r3
 800fd7e:	bb34      	cbnz	r4, 800fdce <_malloc_r+0x82>
 800fd80:	4629      	mov	r1, r5
 800fd82:	4638      	mov	r0, r7
 800fd84:	f7ff ffc2 	bl	800fd0c <sbrk_aligned>
 800fd88:	1c43      	adds	r3, r0, #1
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	d14d      	bne.n	800fe2a <_malloc_r+0xde>
 800fd8e:	6834      	ldr	r4, [r6, #0]
 800fd90:	4626      	mov	r6, r4
 800fd92:	2e00      	cmp	r6, #0
 800fd94:	d140      	bne.n	800fe18 <_malloc_r+0xcc>
 800fd96:	6823      	ldr	r3, [r4, #0]
 800fd98:	4631      	mov	r1, r6
 800fd9a:	4638      	mov	r0, r7
 800fd9c:	eb04 0803 	add.w	r8, r4, r3
 800fda0:	f000 f8b2 	bl	800ff08 <_sbrk_r>
 800fda4:	4580      	cmp	r8, r0
 800fda6:	d13a      	bne.n	800fe1e <_malloc_r+0xd2>
 800fda8:	6821      	ldr	r1, [r4, #0]
 800fdaa:	3503      	adds	r5, #3
 800fdac:	1a6d      	subs	r5, r5, r1
 800fdae:	f025 0503 	bic.w	r5, r5, #3
 800fdb2:	3508      	adds	r5, #8
 800fdb4:	2d0c      	cmp	r5, #12
 800fdb6:	bf38      	it	cc
 800fdb8:	250c      	movcc	r5, #12
 800fdba:	4638      	mov	r0, r7
 800fdbc:	4629      	mov	r1, r5
 800fdbe:	f7ff ffa5 	bl	800fd0c <sbrk_aligned>
 800fdc2:	3001      	adds	r0, #1
 800fdc4:	d02b      	beq.n	800fe1e <_malloc_r+0xd2>
 800fdc6:	6823      	ldr	r3, [r4, #0]
 800fdc8:	442b      	add	r3, r5
 800fdca:	6023      	str	r3, [r4, #0]
 800fdcc:	e00e      	b.n	800fdec <_malloc_r+0xa0>
 800fdce:	6822      	ldr	r2, [r4, #0]
 800fdd0:	1b52      	subs	r2, r2, r5
 800fdd2:	d41e      	bmi.n	800fe12 <_malloc_r+0xc6>
 800fdd4:	2a0b      	cmp	r2, #11
 800fdd6:	d916      	bls.n	800fe06 <_malloc_r+0xba>
 800fdd8:	1961      	adds	r1, r4, r5
 800fdda:	42a3      	cmp	r3, r4
 800fddc:	6025      	str	r5, [r4, #0]
 800fdde:	bf18      	it	ne
 800fde0:	6059      	strne	r1, [r3, #4]
 800fde2:	6863      	ldr	r3, [r4, #4]
 800fde4:	bf08      	it	eq
 800fde6:	6031      	streq	r1, [r6, #0]
 800fde8:	5162      	str	r2, [r4, r5]
 800fdea:	604b      	str	r3, [r1, #4]
 800fdec:	4638      	mov	r0, r7
 800fdee:	f104 060b 	add.w	r6, r4, #11
 800fdf2:	f000 f903 	bl	800fffc <__malloc_unlock>
 800fdf6:	f026 0607 	bic.w	r6, r6, #7
 800fdfa:	1d23      	adds	r3, r4, #4
 800fdfc:	1af2      	subs	r2, r6, r3
 800fdfe:	d0b6      	beq.n	800fd6e <_malloc_r+0x22>
 800fe00:	1b9b      	subs	r3, r3, r6
 800fe02:	50a3      	str	r3, [r4, r2]
 800fe04:	e7b3      	b.n	800fd6e <_malloc_r+0x22>
 800fe06:	6862      	ldr	r2, [r4, #4]
 800fe08:	42a3      	cmp	r3, r4
 800fe0a:	bf0c      	ite	eq
 800fe0c:	6032      	streq	r2, [r6, #0]
 800fe0e:	605a      	strne	r2, [r3, #4]
 800fe10:	e7ec      	b.n	800fdec <_malloc_r+0xa0>
 800fe12:	4623      	mov	r3, r4
 800fe14:	6864      	ldr	r4, [r4, #4]
 800fe16:	e7b2      	b.n	800fd7e <_malloc_r+0x32>
 800fe18:	4634      	mov	r4, r6
 800fe1a:	6876      	ldr	r6, [r6, #4]
 800fe1c:	e7b9      	b.n	800fd92 <_malloc_r+0x46>
 800fe1e:	230c      	movs	r3, #12
 800fe20:	4638      	mov	r0, r7
 800fe22:	603b      	str	r3, [r7, #0]
 800fe24:	f000 f8ea 	bl	800fffc <__malloc_unlock>
 800fe28:	e7a1      	b.n	800fd6e <_malloc_r+0x22>
 800fe2a:	6025      	str	r5, [r4, #0]
 800fe2c:	e7de      	b.n	800fdec <_malloc_r+0xa0>
 800fe2e:	bf00      	nop
 800fe30:	20003078 	.word	0x20003078

0800fe34 <cleanup_glue>:
 800fe34:	b538      	push	{r3, r4, r5, lr}
 800fe36:	460c      	mov	r4, r1
 800fe38:	6809      	ldr	r1, [r1, #0]
 800fe3a:	4605      	mov	r5, r0
 800fe3c:	b109      	cbz	r1, 800fe42 <cleanup_glue+0xe>
 800fe3e:	f7ff fff9 	bl	800fe34 <cleanup_glue>
 800fe42:	4621      	mov	r1, r4
 800fe44:	4628      	mov	r0, r5
 800fe46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe4a:	f7ff bf17 	b.w	800fc7c <_free_r>
	...

0800fe50 <_reclaim_reent>:
 800fe50:	4b2c      	ldr	r3, [pc, #176]	; (800ff04 <_reclaim_reent+0xb4>)
 800fe52:	b570      	push	{r4, r5, r6, lr}
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	4604      	mov	r4, r0
 800fe58:	4283      	cmp	r3, r0
 800fe5a:	d051      	beq.n	800ff00 <_reclaim_reent+0xb0>
 800fe5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fe5e:	b143      	cbz	r3, 800fe72 <_reclaim_reent+0x22>
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d14a      	bne.n	800fefc <_reclaim_reent+0xac>
 800fe66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe68:	6819      	ldr	r1, [r3, #0]
 800fe6a:	b111      	cbz	r1, 800fe72 <_reclaim_reent+0x22>
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	f7ff ff05 	bl	800fc7c <_free_r>
 800fe72:	6961      	ldr	r1, [r4, #20]
 800fe74:	b111      	cbz	r1, 800fe7c <_reclaim_reent+0x2c>
 800fe76:	4620      	mov	r0, r4
 800fe78:	f7ff ff00 	bl	800fc7c <_free_r>
 800fe7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fe7e:	b111      	cbz	r1, 800fe86 <_reclaim_reent+0x36>
 800fe80:	4620      	mov	r0, r4
 800fe82:	f7ff fefb 	bl	800fc7c <_free_r>
 800fe86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fe88:	b111      	cbz	r1, 800fe90 <_reclaim_reent+0x40>
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	f7ff fef6 	bl	800fc7c <_free_r>
 800fe90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fe92:	b111      	cbz	r1, 800fe9a <_reclaim_reent+0x4a>
 800fe94:	4620      	mov	r0, r4
 800fe96:	f7ff fef1 	bl	800fc7c <_free_r>
 800fe9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fe9c:	b111      	cbz	r1, 800fea4 <_reclaim_reent+0x54>
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f7ff feec 	bl	800fc7c <_free_r>
 800fea4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fea6:	b111      	cbz	r1, 800feae <_reclaim_reent+0x5e>
 800fea8:	4620      	mov	r0, r4
 800feaa:	f7ff fee7 	bl	800fc7c <_free_r>
 800feae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800feb0:	b111      	cbz	r1, 800feb8 <_reclaim_reent+0x68>
 800feb2:	4620      	mov	r0, r4
 800feb4:	f7ff fee2 	bl	800fc7c <_free_r>
 800feb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800feba:	b111      	cbz	r1, 800fec2 <_reclaim_reent+0x72>
 800febc:	4620      	mov	r0, r4
 800febe:	f7ff fedd 	bl	800fc7c <_free_r>
 800fec2:	69a3      	ldr	r3, [r4, #24]
 800fec4:	b1e3      	cbz	r3, 800ff00 <_reclaim_reent+0xb0>
 800fec6:	4620      	mov	r0, r4
 800fec8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800feca:	4798      	blx	r3
 800fecc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fece:	b1b9      	cbz	r1, 800ff00 <_reclaim_reent+0xb0>
 800fed0:	4620      	mov	r0, r4
 800fed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fed6:	f7ff bfad 	b.w	800fe34 <cleanup_glue>
 800feda:	5949      	ldr	r1, [r1, r5]
 800fedc:	b941      	cbnz	r1, 800fef0 <_reclaim_reent+0xa0>
 800fede:	3504      	adds	r5, #4
 800fee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fee2:	2d80      	cmp	r5, #128	; 0x80
 800fee4:	68d9      	ldr	r1, [r3, #12]
 800fee6:	d1f8      	bne.n	800feda <_reclaim_reent+0x8a>
 800fee8:	4620      	mov	r0, r4
 800feea:	f7ff fec7 	bl	800fc7c <_free_r>
 800feee:	e7ba      	b.n	800fe66 <_reclaim_reent+0x16>
 800fef0:	680e      	ldr	r6, [r1, #0]
 800fef2:	4620      	mov	r0, r4
 800fef4:	f7ff fec2 	bl	800fc7c <_free_r>
 800fef8:	4631      	mov	r1, r6
 800fefa:	e7ef      	b.n	800fedc <_reclaim_reent+0x8c>
 800fefc:	2500      	movs	r5, #0
 800fefe:	e7ef      	b.n	800fee0 <_reclaim_reent+0x90>
 800ff00:	bd70      	pop	{r4, r5, r6, pc}
 800ff02:	bf00      	nop
 800ff04:	20000188 	.word	0x20000188

0800ff08 <_sbrk_r>:
 800ff08:	b538      	push	{r3, r4, r5, lr}
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	4d05      	ldr	r5, [pc, #20]	; (800ff24 <_sbrk_r+0x1c>)
 800ff0e:	4604      	mov	r4, r0
 800ff10:	4608      	mov	r0, r1
 800ff12:	602b      	str	r3, [r5, #0]
 800ff14:	f7f3 fc28 	bl	8003768 <_sbrk>
 800ff18:	1c43      	adds	r3, r0, #1
 800ff1a:	d102      	bne.n	800ff22 <_sbrk_r+0x1a>
 800ff1c:	682b      	ldr	r3, [r5, #0]
 800ff1e:	b103      	cbz	r3, 800ff22 <_sbrk_r+0x1a>
 800ff20:	6023      	str	r3, [r4, #0]
 800ff22:	bd38      	pop	{r3, r4, r5, pc}
 800ff24:	20003080 	.word	0x20003080

0800ff28 <_raise_r>:
 800ff28:	291f      	cmp	r1, #31
 800ff2a:	b538      	push	{r3, r4, r5, lr}
 800ff2c:	4604      	mov	r4, r0
 800ff2e:	460d      	mov	r5, r1
 800ff30:	d904      	bls.n	800ff3c <_raise_r+0x14>
 800ff32:	2316      	movs	r3, #22
 800ff34:	6003      	str	r3, [r0, #0]
 800ff36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff3a:	bd38      	pop	{r3, r4, r5, pc}
 800ff3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ff3e:	b112      	cbz	r2, 800ff46 <_raise_r+0x1e>
 800ff40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff44:	b94b      	cbnz	r3, 800ff5a <_raise_r+0x32>
 800ff46:	4620      	mov	r0, r4
 800ff48:	f000 f830 	bl	800ffac <_getpid_r>
 800ff4c:	462a      	mov	r2, r5
 800ff4e:	4601      	mov	r1, r0
 800ff50:	4620      	mov	r0, r4
 800ff52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff56:	f000 b817 	b.w	800ff88 <_kill_r>
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d00a      	beq.n	800ff74 <_raise_r+0x4c>
 800ff5e:	1c59      	adds	r1, r3, #1
 800ff60:	d103      	bne.n	800ff6a <_raise_r+0x42>
 800ff62:	2316      	movs	r3, #22
 800ff64:	6003      	str	r3, [r0, #0]
 800ff66:	2001      	movs	r0, #1
 800ff68:	e7e7      	b.n	800ff3a <_raise_r+0x12>
 800ff6a:	2400      	movs	r4, #0
 800ff6c:	4628      	mov	r0, r5
 800ff6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff72:	4798      	blx	r3
 800ff74:	2000      	movs	r0, #0
 800ff76:	e7e0      	b.n	800ff3a <_raise_r+0x12>

0800ff78 <raise>:
 800ff78:	4b02      	ldr	r3, [pc, #8]	; (800ff84 <raise+0xc>)
 800ff7a:	4601      	mov	r1, r0
 800ff7c:	6818      	ldr	r0, [r3, #0]
 800ff7e:	f7ff bfd3 	b.w	800ff28 <_raise_r>
 800ff82:	bf00      	nop
 800ff84:	20000188 	.word	0x20000188

0800ff88 <_kill_r>:
 800ff88:	b538      	push	{r3, r4, r5, lr}
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	4d06      	ldr	r5, [pc, #24]	; (800ffa8 <_kill_r+0x20>)
 800ff8e:	4604      	mov	r4, r0
 800ff90:	4608      	mov	r0, r1
 800ff92:	4611      	mov	r1, r2
 800ff94:	602b      	str	r3, [r5, #0]
 800ff96:	f7f3 fbcc 	bl	8003732 <_kill>
 800ff9a:	1c43      	adds	r3, r0, #1
 800ff9c:	d102      	bne.n	800ffa4 <_kill_r+0x1c>
 800ff9e:	682b      	ldr	r3, [r5, #0]
 800ffa0:	b103      	cbz	r3, 800ffa4 <_kill_r+0x1c>
 800ffa2:	6023      	str	r3, [r4, #0]
 800ffa4:	bd38      	pop	{r3, r4, r5, pc}
 800ffa6:	bf00      	nop
 800ffa8:	20003080 	.word	0x20003080

0800ffac <_getpid_r>:
 800ffac:	f7f3 bbba 	b.w	8003724 <_getpid>

0800ffb0 <siprintf>:
 800ffb0:	b40e      	push	{r1, r2, r3}
 800ffb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ffb6:	b500      	push	{lr}
 800ffb8:	b09c      	sub	sp, #112	; 0x70
 800ffba:	ab1d      	add	r3, sp, #116	; 0x74
 800ffbc:	9002      	str	r0, [sp, #8]
 800ffbe:	9006      	str	r0, [sp, #24]
 800ffc0:	9107      	str	r1, [sp, #28]
 800ffc2:	9104      	str	r1, [sp, #16]
 800ffc4:	4808      	ldr	r0, [pc, #32]	; (800ffe8 <siprintf+0x38>)
 800ffc6:	4909      	ldr	r1, [pc, #36]	; (800ffec <siprintf+0x3c>)
 800ffc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffcc:	9105      	str	r1, [sp, #20]
 800ffce:	6800      	ldr	r0, [r0, #0]
 800ffd0:	a902      	add	r1, sp, #8
 800ffd2:	9301      	str	r3, [sp, #4]
 800ffd4:	f000 f874 	bl	80100c0 <_svfiprintf_r>
 800ffd8:	2200      	movs	r2, #0
 800ffda:	9b02      	ldr	r3, [sp, #8]
 800ffdc:	701a      	strb	r2, [r3, #0]
 800ffde:	b01c      	add	sp, #112	; 0x70
 800ffe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffe4:	b003      	add	sp, #12
 800ffe6:	4770      	bx	lr
 800ffe8:	20000188 	.word	0x20000188
 800ffec:	ffff0208 	.word	0xffff0208

0800fff0 <__malloc_lock>:
 800fff0:	4801      	ldr	r0, [pc, #4]	; (800fff8 <__malloc_lock+0x8>)
 800fff2:	f7ff bdf3 	b.w	800fbdc <__retarget_lock_acquire_recursive>
 800fff6:	bf00      	nop
 800fff8:	20003074 	.word	0x20003074

0800fffc <__malloc_unlock>:
 800fffc:	4801      	ldr	r0, [pc, #4]	; (8010004 <__malloc_unlock+0x8>)
 800fffe:	f7ff bdee 	b.w	800fbde <__retarget_lock_release_recursive>
 8010002:	bf00      	nop
 8010004:	20003074 	.word	0x20003074

08010008 <__ssputs_r>:
 8010008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801000c:	688e      	ldr	r6, [r1, #8]
 801000e:	4682      	mov	sl, r0
 8010010:	429e      	cmp	r6, r3
 8010012:	460c      	mov	r4, r1
 8010014:	4690      	mov	r8, r2
 8010016:	461f      	mov	r7, r3
 8010018:	d838      	bhi.n	801008c <__ssputs_r+0x84>
 801001a:	898a      	ldrh	r2, [r1, #12]
 801001c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010020:	d032      	beq.n	8010088 <__ssputs_r+0x80>
 8010022:	6825      	ldr	r5, [r4, #0]
 8010024:	6909      	ldr	r1, [r1, #16]
 8010026:	3301      	adds	r3, #1
 8010028:	eba5 0901 	sub.w	r9, r5, r1
 801002c:	6965      	ldr	r5, [r4, #20]
 801002e:	444b      	add	r3, r9
 8010030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010034:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010038:	106d      	asrs	r5, r5, #1
 801003a:	429d      	cmp	r5, r3
 801003c:	bf38      	it	cc
 801003e:	461d      	movcc	r5, r3
 8010040:	0553      	lsls	r3, r2, #21
 8010042:	d531      	bpl.n	80100a8 <__ssputs_r+0xa0>
 8010044:	4629      	mov	r1, r5
 8010046:	f7ff fe81 	bl	800fd4c <_malloc_r>
 801004a:	4606      	mov	r6, r0
 801004c:	b950      	cbnz	r0, 8010064 <__ssputs_r+0x5c>
 801004e:	230c      	movs	r3, #12
 8010050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010054:	f8ca 3000 	str.w	r3, [sl]
 8010058:	89a3      	ldrh	r3, [r4, #12]
 801005a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801005e:	81a3      	strh	r3, [r4, #12]
 8010060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010064:	464a      	mov	r2, r9
 8010066:	6921      	ldr	r1, [r4, #16]
 8010068:	f7ff fdd8 	bl	800fc1c <memcpy>
 801006c:	89a3      	ldrh	r3, [r4, #12]
 801006e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010076:	81a3      	strh	r3, [r4, #12]
 8010078:	6126      	str	r6, [r4, #16]
 801007a:	444e      	add	r6, r9
 801007c:	6026      	str	r6, [r4, #0]
 801007e:	463e      	mov	r6, r7
 8010080:	6165      	str	r5, [r4, #20]
 8010082:	eba5 0509 	sub.w	r5, r5, r9
 8010086:	60a5      	str	r5, [r4, #8]
 8010088:	42be      	cmp	r6, r7
 801008a:	d900      	bls.n	801008e <__ssputs_r+0x86>
 801008c:	463e      	mov	r6, r7
 801008e:	4632      	mov	r2, r6
 8010090:	4641      	mov	r1, r8
 8010092:	6820      	ldr	r0, [r4, #0]
 8010094:	f7ff fdd0 	bl	800fc38 <memmove>
 8010098:	68a3      	ldr	r3, [r4, #8]
 801009a:	2000      	movs	r0, #0
 801009c:	1b9b      	subs	r3, r3, r6
 801009e:	60a3      	str	r3, [r4, #8]
 80100a0:	6823      	ldr	r3, [r4, #0]
 80100a2:	4433      	add	r3, r6
 80100a4:	6023      	str	r3, [r4, #0]
 80100a6:	e7db      	b.n	8010060 <__ssputs_r+0x58>
 80100a8:	462a      	mov	r2, r5
 80100aa:	f000 fa9f 	bl	80105ec <_realloc_r>
 80100ae:	4606      	mov	r6, r0
 80100b0:	2800      	cmp	r0, #0
 80100b2:	d1e1      	bne.n	8010078 <__ssputs_r+0x70>
 80100b4:	4650      	mov	r0, sl
 80100b6:	6921      	ldr	r1, [r4, #16]
 80100b8:	f7ff fde0 	bl	800fc7c <_free_r>
 80100bc:	e7c7      	b.n	801004e <__ssputs_r+0x46>
	...

080100c0 <_svfiprintf_r>:
 80100c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c4:	4698      	mov	r8, r3
 80100c6:	898b      	ldrh	r3, [r1, #12]
 80100c8:	4607      	mov	r7, r0
 80100ca:	061b      	lsls	r3, r3, #24
 80100cc:	460d      	mov	r5, r1
 80100ce:	4614      	mov	r4, r2
 80100d0:	b09d      	sub	sp, #116	; 0x74
 80100d2:	d50e      	bpl.n	80100f2 <_svfiprintf_r+0x32>
 80100d4:	690b      	ldr	r3, [r1, #16]
 80100d6:	b963      	cbnz	r3, 80100f2 <_svfiprintf_r+0x32>
 80100d8:	2140      	movs	r1, #64	; 0x40
 80100da:	f7ff fe37 	bl	800fd4c <_malloc_r>
 80100de:	6028      	str	r0, [r5, #0]
 80100e0:	6128      	str	r0, [r5, #16]
 80100e2:	b920      	cbnz	r0, 80100ee <_svfiprintf_r+0x2e>
 80100e4:	230c      	movs	r3, #12
 80100e6:	603b      	str	r3, [r7, #0]
 80100e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100ec:	e0d1      	b.n	8010292 <_svfiprintf_r+0x1d2>
 80100ee:	2340      	movs	r3, #64	; 0x40
 80100f0:	616b      	str	r3, [r5, #20]
 80100f2:	2300      	movs	r3, #0
 80100f4:	9309      	str	r3, [sp, #36]	; 0x24
 80100f6:	2320      	movs	r3, #32
 80100f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100fc:	2330      	movs	r3, #48	; 0x30
 80100fe:	f04f 0901 	mov.w	r9, #1
 8010102:	f8cd 800c 	str.w	r8, [sp, #12]
 8010106:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80102ac <_svfiprintf_r+0x1ec>
 801010a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801010e:	4623      	mov	r3, r4
 8010110:	469a      	mov	sl, r3
 8010112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010116:	b10a      	cbz	r2, 801011c <_svfiprintf_r+0x5c>
 8010118:	2a25      	cmp	r2, #37	; 0x25
 801011a:	d1f9      	bne.n	8010110 <_svfiprintf_r+0x50>
 801011c:	ebba 0b04 	subs.w	fp, sl, r4
 8010120:	d00b      	beq.n	801013a <_svfiprintf_r+0x7a>
 8010122:	465b      	mov	r3, fp
 8010124:	4622      	mov	r2, r4
 8010126:	4629      	mov	r1, r5
 8010128:	4638      	mov	r0, r7
 801012a:	f7ff ff6d 	bl	8010008 <__ssputs_r>
 801012e:	3001      	adds	r0, #1
 8010130:	f000 80aa 	beq.w	8010288 <_svfiprintf_r+0x1c8>
 8010134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010136:	445a      	add	r2, fp
 8010138:	9209      	str	r2, [sp, #36]	; 0x24
 801013a:	f89a 3000 	ldrb.w	r3, [sl]
 801013e:	2b00      	cmp	r3, #0
 8010140:	f000 80a2 	beq.w	8010288 <_svfiprintf_r+0x1c8>
 8010144:	2300      	movs	r3, #0
 8010146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801014a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801014e:	f10a 0a01 	add.w	sl, sl, #1
 8010152:	9304      	str	r3, [sp, #16]
 8010154:	9307      	str	r3, [sp, #28]
 8010156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801015a:	931a      	str	r3, [sp, #104]	; 0x68
 801015c:	4654      	mov	r4, sl
 801015e:	2205      	movs	r2, #5
 8010160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010164:	4851      	ldr	r0, [pc, #324]	; (80102ac <_svfiprintf_r+0x1ec>)
 8010166:	f7ff fd4b 	bl	800fc00 <memchr>
 801016a:	9a04      	ldr	r2, [sp, #16]
 801016c:	b9d8      	cbnz	r0, 80101a6 <_svfiprintf_r+0xe6>
 801016e:	06d0      	lsls	r0, r2, #27
 8010170:	bf44      	itt	mi
 8010172:	2320      	movmi	r3, #32
 8010174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010178:	0711      	lsls	r1, r2, #28
 801017a:	bf44      	itt	mi
 801017c:	232b      	movmi	r3, #43	; 0x2b
 801017e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010182:	f89a 3000 	ldrb.w	r3, [sl]
 8010186:	2b2a      	cmp	r3, #42	; 0x2a
 8010188:	d015      	beq.n	80101b6 <_svfiprintf_r+0xf6>
 801018a:	4654      	mov	r4, sl
 801018c:	2000      	movs	r0, #0
 801018e:	f04f 0c0a 	mov.w	ip, #10
 8010192:	9a07      	ldr	r2, [sp, #28]
 8010194:	4621      	mov	r1, r4
 8010196:	f811 3b01 	ldrb.w	r3, [r1], #1
 801019a:	3b30      	subs	r3, #48	; 0x30
 801019c:	2b09      	cmp	r3, #9
 801019e:	d94e      	bls.n	801023e <_svfiprintf_r+0x17e>
 80101a0:	b1b0      	cbz	r0, 80101d0 <_svfiprintf_r+0x110>
 80101a2:	9207      	str	r2, [sp, #28]
 80101a4:	e014      	b.n	80101d0 <_svfiprintf_r+0x110>
 80101a6:	eba0 0308 	sub.w	r3, r0, r8
 80101aa:	fa09 f303 	lsl.w	r3, r9, r3
 80101ae:	4313      	orrs	r3, r2
 80101b0:	46a2      	mov	sl, r4
 80101b2:	9304      	str	r3, [sp, #16]
 80101b4:	e7d2      	b.n	801015c <_svfiprintf_r+0x9c>
 80101b6:	9b03      	ldr	r3, [sp, #12]
 80101b8:	1d19      	adds	r1, r3, #4
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	9103      	str	r1, [sp, #12]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	bfbb      	ittet	lt
 80101c2:	425b      	neglt	r3, r3
 80101c4:	f042 0202 	orrlt.w	r2, r2, #2
 80101c8:	9307      	strge	r3, [sp, #28]
 80101ca:	9307      	strlt	r3, [sp, #28]
 80101cc:	bfb8      	it	lt
 80101ce:	9204      	strlt	r2, [sp, #16]
 80101d0:	7823      	ldrb	r3, [r4, #0]
 80101d2:	2b2e      	cmp	r3, #46	; 0x2e
 80101d4:	d10c      	bne.n	80101f0 <_svfiprintf_r+0x130>
 80101d6:	7863      	ldrb	r3, [r4, #1]
 80101d8:	2b2a      	cmp	r3, #42	; 0x2a
 80101da:	d135      	bne.n	8010248 <_svfiprintf_r+0x188>
 80101dc:	9b03      	ldr	r3, [sp, #12]
 80101de:	3402      	adds	r4, #2
 80101e0:	1d1a      	adds	r2, r3, #4
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	9203      	str	r2, [sp, #12]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	bfb8      	it	lt
 80101ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80101ee:	9305      	str	r3, [sp, #20]
 80101f0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80102b0 <_svfiprintf_r+0x1f0>
 80101f4:	2203      	movs	r2, #3
 80101f6:	4650      	mov	r0, sl
 80101f8:	7821      	ldrb	r1, [r4, #0]
 80101fa:	f7ff fd01 	bl	800fc00 <memchr>
 80101fe:	b140      	cbz	r0, 8010212 <_svfiprintf_r+0x152>
 8010200:	2340      	movs	r3, #64	; 0x40
 8010202:	eba0 000a 	sub.w	r0, r0, sl
 8010206:	fa03 f000 	lsl.w	r0, r3, r0
 801020a:	9b04      	ldr	r3, [sp, #16]
 801020c:	3401      	adds	r4, #1
 801020e:	4303      	orrs	r3, r0
 8010210:	9304      	str	r3, [sp, #16]
 8010212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010216:	2206      	movs	r2, #6
 8010218:	4826      	ldr	r0, [pc, #152]	; (80102b4 <_svfiprintf_r+0x1f4>)
 801021a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801021e:	f7ff fcef 	bl	800fc00 <memchr>
 8010222:	2800      	cmp	r0, #0
 8010224:	d038      	beq.n	8010298 <_svfiprintf_r+0x1d8>
 8010226:	4b24      	ldr	r3, [pc, #144]	; (80102b8 <_svfiprintf_r+0x1f8>)
 8010228:	bb1b      	cbnz	r3, 8010272 <_svfiprintf_r+0x1b2>
 801022a:	9b03      	ldr	r3, [sp, #12]
 801022c:	3307      	adds	r3, #7
 801022e:	f023 0307 	bic.w	r3, r3, #7
 8010232:	3308      	adds	r3, #8
 8010234:	9303      	str	r3, [sp, #12]
 8010236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010238:	4433      	add	r3, r6
 801023a:	9309      	str	r3, [sp, #36]	; 0x24
 801023c:	e767      	b.n	801010e <_svfiprintf_r+0x4e>
 801023e:	460c      	mov	r4, r1
 8010240:	2001      	movs	r0, #1
 8010242:	fb0c 3202 	mla	r2, ip, r2, r3
 8010246:	e7a5      	b.n	8010194 <_svfiprintf_r+0xd4>
 8010248:	2300      	movs	r3, #0
 801024a:	f04f 0c0a 	mov.w	ip, #10
 801024e:	4619      	mov	r1, r3
 8010250:	3401      	adds	r4, #1
 8010252:	9305      	str	r3, [sp, #20]
 8010254:	4620      	mov	r0, r4
 8010256:	f810 2b01 	ldrb.w	r2, [r0], #1
 801025a:	3a30      	subs	r2, #48	; 0x30
 801025c:	2a09      	cmp	r2, #9
 801025e:	d903      	bls.n	8010268 <_svfiprintf_r+0x1a8>
 8010260:	2b00      	cmp	r3, #0
 8010262:	d0c5      	beq.n	80101f0 <_svfiprintf_r+0x130>
 8010264:	9105      	str	r1, [sp, #20]
 8010266:	e7c3      	b.n	80101f0 <_svfiprintf_r+0x130>
 8010268:	4604      	mov	r4, r0
 801026a:	2301      	movs	r3, #1
 801026c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010270:	e7f0      	b.n	8010254 <_svfiprintf_r+0x194>
 8010272:	ab03      	add	r3, sp, #12
 8010274:	9300      	str	r3, [sp, #0]
 8010276:	462a      	mov	r2, r5
 8010278:	4638      	mov	r0, r7
 801027a:	4b10      	ldr	r3, [pc, #64]	; (80102bc <_svfiprintf_r+0x1fc>)
 801027c:	a904      	add	r1, sp, #16
 801027e:	f3af 8000 	nop.w
 8010282:	1c42      	adds	r2, r0, #1
 8010284:	4606      	mov	r6, r0
 8010286:	d1d6      	bne.n	8010236 <_svfiprintf_r+0x176>
 8010288:	89ab      	ldrh	r3, [r5, #12]
 801028a:	065b      	lsls	r3, r3, #25
 801028c:	f53f af2c 	bmi.w	80100e8 <_svfiprintf_r+0x28>
 8010290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010292:	b01d      	add	sp, #116	; 0x74
 8010294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010298:	ab03      	add	r3, sp, #12
 801029a:	9300      	str	r3, [sp, #0]
 801029c:	462a      	mov	r2, r5
 801029e:	4638      	mov	r0, r7
 80102a0:	4b06      	ldr	r3, [pc, #24]	; (80102bc <_svfiprintf_r+0x1fc>)
 80102a2:	a904      	add	r1, sp, #16
 80102a4:	f000 f87c 	bl	80103a0 <_printf_i>
 80102a8:	e7eb      	b.n	8010282 <_svfiprintf_r+0x1c2>
 80102aa:	bf00      	nop
 80102ac:	08010a00 	.word	0x08010a00
 80102b0:	08010a06 	.word	0x08010a06
 80102b4:	08010a0a 	.word	0x08010a0a
 80102b8:	00000000 	.word	0x00000000
 80102bc:	08010009 	.word	0x08010009

080102c0 <_printf_common>:
 80102c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102c4:	4616      	mov	r6, r2
 80102c6:	4699      	mov	r9, r3
 80102c8:	688a      	ldr	r2, [r1, #8]
 80102ca:	690b      	ldr	r3, [r1, #16]
 80102cc:	4607      	mov	r7, r0
 80102ce:	4293      	cmp	r3, r2
 80102d0:	bfb8      	it	lt
 80102d2:	4613      	movlt	r3, r2
 80102d4:	6033      	str	r3, [r6, #0]
 80102d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80102da:	460c      	mov	r4, r1
 80102dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80102e0:	b10a      	cbz	r2, 80102e6 <_printf_common+0x26>
 80102e2:	3301      	adds	r3, #1
 80102e4:	6033      	str	r3, [r6, #0]
 80102e6:	6823      	ldr	r3, [r4, #0]
 80102e8:	0699      	lsls	r1, r3, #26
 80102ea:	bf42      	ittt	mi
 80102ec:	6833      	ldrmi	r3, [r6, #0]
 80102ee:	3302      	addmi	r3, #2
 80102f0:	6033      	strmi	r3, [r6, #0]
 80102f2:	6825      	ldr	r5, [r4, #0]
 80102f4:	f015 0506 	ands.w	r5, r5, #6
 80102f8:	d106      	bne.n	8010308 <_printf_common+0x48>
 80102fa:	f104 0a19 	add.w	sl, r4, #25
 80102fe:	68e3      	ldr	r3, [r4, #12]
 8010300:	6832      	ldr	r2, [r6, #0]
 8010302:	1a9b      	subs	r3, r3, r2
 8010304:	42ab      	cmp	r3, r5
 8010306:	dc28      	bgt.n	801035a <_printf_common+0x9a>
 8010308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801030c:	1e13      	subs	r3, r2, #0
 801030e:	6822      	ldr	r2, [r4, #0]
 8010310:	bf18      	it	ne
 8010312:	2301      	movne	r3, #1
 8010314:	0692      	lsls	r2, r2, #26
 8010316:	d42d      	bmi.n	8010374 <_printf_common+0xb4>
 8010318:	4649      	mov	r1, r9
 801031a:	4638      	mov	r0, r7
 801031c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010320:	47c0      	blx	r8
 8010322:	3001      	adds	r0, #1
 8010324:	d020      	beq.n	8010368 <_printf_common+0xa8>
 8010326:	6823      	ldr	r3, [r4, #0]
 8010328:	68e5      	ldr	r5, [r4, #12]
 801032a:	f003 0306 	and.w	r3, r3, #6
 801032e:	2b04      	cmp	r3, #4
 8010330:	bf18      	it	ne
 8010332:	2500      	movne	r5, #0
 8010334:	6832      	ldr	r2, [r6, #0]
 8010336:	f04f 0600 	mov.w	r6, #0
 801033a:	68a3      	ldr	r3, [r4, #8]
 801033c:	bf08      	it	eq
 801033e:	1aad      	subeq	r5, r5, r2
 8010340:	6922      	ldr	r2, [r4, #16]
 8010342:	bf08      	it	eq
 8010344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010348:	4293      	cmp	r3, r2
 801034a:	bfc4      	itt	gt
 801034c:	1a9b      	subgt	r3, r3, r2
 801034e:	18ed      	addgt	r5, r5, r3
 8010350:	341a      	adds	r4, #26
 8010352:	42b5      	cmp	r5, r6
 8010354:	d11a      	bne.n	801038c <_printf_common+0xcc>
 8010356:	2000      	movs	r0, #0
 8010358:	e008      	b.n	801036c <_printf_common+0xac>
 801035a:	2301      	movs	r3, #1
 801035c:	4652      	mov	r2, sl
 801035e:	4649      	mov	r1, r9
 8010360:	4638      	mov	r0, r7
 8010362:	47c0      	blx	r8
 8010364:	3001      	adds	r0, #1
 8010366:	d103      	bne.n	8010370 <_printf_common+0xb0>
 8010368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801036c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010370:	3501      	adds	r5, #1
 8010372:	e7c4      	b.n	80102fe <_printf_common+0x3e>
 8010374:	2030      	movs	r0, #48	; 0x30
 8010376:	18e1      	adds	r1, r4, r3
 8010378:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801037c:	1c5a      	adds	r2, r3, #1
 801037e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010382:	4422      	add	r2, r4
 8010384:	3302      	adds	r3, #2
 8010386:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801038a:	e7c5      	b.n	8010318 <_printf_common+0x58>
 801038c:	2301      	movs	r3, #1
 801038e:	4622      	mov	r2, r4
 8010390:	4649      	mov	r1, r9
 8010392:	4638      	mov	r0, r7
 8010394:	47c0      	blx	r8
 8010396:	3001      	adds	r0, #1
 8010398:	d0e6      	beq.n	8010368 <_printf_common+0xa8>
 801039a:	3601      	adds	r6, #1
 801039c:	e7d9      	b.n	8010352 <_printf_common+0x92>
	...

080103a0 <_printf_i>:
 80103a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80103a4:	7e0f      	ldrb	r7, [r1, #24]
 80103a6:	4691      	mov	r9, r2
 80103a8:	2f78      	cmp	r7, #120	; 0x78
 80103aa:	4680      	mov	r8, r0
 80103ac:	460c      	mov	r4, r1
 80103ae:	469a      	mov	sl, r3
 80103b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80103b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80103b6:	d807      	bhi.n	80103c8 <_printf_i+0x28>
 80103b8:	2f62      	cmp	r7, #98	; 0x62
 80103ba:	d80a      	bhi.n	80103d2 <_printf_i+0x32>
 80103bc:	2f00      	cmp	r7, #0
 80103be:	f000 80d9 	beq.w	8010574 <_printf_i+0x1d4>
 80103c2:	2f58      	cmp	r7, #88	; 0x58
 80103c4:	f000 80a4 	beq.w	8010510 <_printf_i+0x170>
 80103c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80103d0:	e03a      	b.n	8010448 <_printf_i+0xa8>
 80103d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80103d6:	2b15      	cmp	r3, #21
 80103d8:	d8f6      	bhi.n	80103c8 <_printf_i+0x28>
 80103da:	a101      	add	r1, pc, #4	; (adr r1, 80103e0 <_printf_i+0x40>)
 80103dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80103e0:	08010439 	.word	0x08010439
 80103e4:	0801044d 	.word	0x0801044d
 80103e8:	080103c9 	.word	0x080103c9
 80103ec:	080103c9 	.word	0x080103c9
 80103f0:	080103c9 	.word	0x080103c9
 80103f4:	080103c9 	.word	0x080103c9
 80103f8:	0801044d 	.word	0x0801044d
 80103fc:	080103c9 	.word	0x080103c9
 8010400:	080103c9 	.word	0x080103c9
 8010404:	080103c9 	.word	0x080103c9
 8010408:	080103c9 	.word	0x080103c9
 801040c:	0801055b 	.word	0x0801055b
 8010410:	0801047d 	.word	0x0801047d
 8010414:	0801053d 	.word	0x0801053d
 8010418:	080103c9 	.word	0x080103c9
 801041c:	080103c9 	.word	0x080103c9
 8010420:	0801057d 	.word	0x0801057d
 8010424:	080103c9 	.word	0x080103c9
 8010428:	0801047d 	.word	0x0801047d
 801042c:	080103c9 	.word	0x080103c9
 8010430:	080103c9 	.word	0x080103c9
 8010434:	08010545 	.word	0x08010545
 8010438:	682b      	ldr	r3, [r5, #0]
 801043a:	1d1a      	adds	r2, r3, #4
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	602a      	str	r2, [r5, #0]
 8010440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010448:	2301      	movs	r3, #1
 801044a:	e0a4      	b.n	8010596 <_printf_i+0x1f6>
 801044c:	6820      	ldr	r0, [r4, #0]
 801044e:	6829      	ldr	r1, [r5, #0]
 8010450:	0606      	lsls	r6, r0, #24
 8010452:	f101 0304 	add.w	r3, r1, #4
 8010456:	d50a      	bpl.n	801046e <_printf_i+0xce>
 8010458:	680e      	ldr	r6, [r1, #0]
 801045a:	602b      	str	r3, [r5, #0]
 801045c:	2e00      	cmp	r6, #0
 801045e:	da03      	bge.n	8010468 <_printf_i+0xc8>
 8010460:	232d      	movs	r3, #45	; 0x2d
 8010462:	4276      	negs	r6, r6
 8010464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010468:	230a      	movs	r3, #10
 801046a:	485e      	ldr	r0, [pc, #376]	; (80105e4 <_printf_i+0x244>)
 801046c:	e019      	b.n	80104a2 <_printf_i+0x102>
 801046e:	680e      	ldr	r6, [r1, #0]
 8010470:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010474:	602b      	str	r3, [r5, #0]
 8010476:	bf18      	it	ne
 8010478:	b236      	sxthne	r6, r6
 801047a:	e7ef      	b.n	801045c <_printf_i+0xbc>
 801047c:	682b      	ldr	r3, [r5, #0]
 801047e:	6820      	ldr	r0, [r4, #0]
 8010480:	1d19      	adds	r1, r3, #4
 8010482:	6029      	str	r1, [r5, #0]
 8010484:	0601      	lsls	r1, r0, #24
 8010486:	d501      	bpl.n	801048c <_printf_i+0xec>
 8010488:	681e      	ldr	r6, [r3, #0]
 801048a:	e002      	b.n	8010492 <_printf_i+0xf2>
 801048c:	0646      	lsls	r6, r0, #25
 801048e:	d5fb      	bpl.n	8010488 <_printf_i+0xe8>
 8010490:	881e      	ldrh	r6, [r3, #0]
 8010492:	2f6f      	cmp	r7, #111	; 0x6f
 8010494:	bf0c      	ite	eq
 8010496:	2308      	moveq	r3, #8
 8010498:	230a      	movne	r3, #10
 801049a:	4852      	ldr	r0, [pc, #328]	; (80105e4 <_printf_i+0x244>)
 801049c:	2100      	movs	r1, #0
 801049e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80104a2:	6865      	ldr	r5, [r4, #4]
 80104a4:	2d00      	cmp	r5, #0
 80104a6:	bfa8      	it	ge
 80104a8:	6821      	ldrge	r1, [r4, #0]
 80104aa:	60a5      	str	r5, [r4, #8]
 80104ac:	bfa4      	itt	ge
 80104ae:	f021 0104 	bicge.w	r1, r1, #4
 80104b2:	6021      	strge	r1, [r4, #0]
 80104b4:	b90e      	cbnz	r6, 80104ba <_printf_i+0x11a>
 80104b6:	2d00      	cmp	r5, #0
 80104b8:	d04d      	beq.n	8010556 <_printf_i+0x1b6>
 80104ba:	4615      	mov	r5, r2
 80104bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80104c0:	fb03 6711 	mls	r7, r3, r1, r6
 80104c4:	5dc7      	ldrb	r7, [r0, r7]
 80104c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80104ca:	4637      	mov	r7, r6
 80104cc:	42bb      	cmp	r3, r7
 80104ce:	460e      	mov	r6, r1
 80104d0:	d9f4      	bls.n	80104bc <_printf_i+0x11c>
 80104d2:	2b08      	cmp	r3, #8
 80104d4:	d10b      	bne.n	80104ee <_printf_i+0x14e>
 80104d6:	6823      	ldr	r3, [r4, #0]
 80104d8:	07de      	lsls	r6, r3, #31
 80104da:	d508      	bpl.n	80104ee <_printf_i+0x14e>
 80104dc:	6923      	ldr	r3, [r4, #16]
 80104de:	6861      	ldr	r1, [r4, #4]
 80104e0:	4299      	cmp	r1, r3
 80104e2:	bfde      	ittt	le
 80104e4:	2330      	movle	r3, #48	; 0x30
 80104e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80104ea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80104ee:	1b52      	subs	r2, r2, r5
 80104f0:	6122      	str	r2, [r4, #16]
 80104f2:	464b      	mov	r3, r9
 80104f4:	4621      	mov	r1, r4
 80104f6:	4640      	mov	r0, r8
 80104f8:	f8cd a000 	str.w	sl, [sp]
 80104fc:	aa03      	add	r2, sp, #12
 80104fe:	f7ff fedf 	bl	80102c0 <_printf_common>
 8010502:	3001      	adds	r0, #1
 8010504:	d14c      	bne.n	80105a0 <_printf_i+0x200>
 8010506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801050a:	b004      	add	sp, #16
 801050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010510:	4834      	ldr	r0, [pc, #208]	; (80105e4 <_printf_i+0x244>)
 8010512:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010516:	6829      	ldr	r1, [r5, #0]
 8010518:	6823      	ldr	r3, [r4, #0]
 801051a:	f851 6b04 	ldr.w	r6, [r1], #4
 801051e:	6029      	str	r1, [r5, #0]
 8010520:	061d      	lsls	r5, r3, #24
 8010522:	d514      	bpl.n	801054e <_printf_i+0x1ae>
 8010524:	07df      	lsls	r7, r3, #31
 8010526:	bf44      	itt	mi
 8010528:	f043 0320 	orrmi.w	r3, r3, #32
 801052c:	6023      	strmi	r3, [r4, #0]
 801052e:	b91e      	cbnz	r6, 8010538 <_printf_i+0x198>
 8010530:	6823      	ldr	r3, [r4, #0]
 8010532:	f023 0320 	bic.w	r3, r3, #32
 8010536:	6023      	str	r3, [r4, #0]
 8010538:	2310      	movs	r3, #16
 801053a:	e7af      	b.n	801049c <_printf_i+0xfc>
 801053c:	6823      	ldr	r3, [r4, #0]
 801053e:	f043 0320 	orr.w	r3, r3, #32
 8010542:	6023      	str	r3, [r4, #0]
 8010544:	2378      	movs	r3, #120	; 0x78
 8010546:	4828      	ldr	r0, [pc, #160]	; (80105e8 <_printf_i+0x248>)
 8010548:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801054c:	e7e3      	b.n	8010516 <_printf_i+0x176>
 801054e:	0659      	lsls	r1, r3, #25
 8010550:	bf48      	it	mi
 8010552:	b2b6      	uxthmi	r6, r6
 8010554:	e7e6      	b.n	8010524 <_printf_i+0x184>
 8010556:	4615      	mov	r5, r2
 8010558:	e7bb      	b.n	80104d2 <_printf_i+0x132>
 801055a:	682b      	ldr	r3, [r5, #0]
 801055c:	6826      	ldr	r6, [r4, #0]
 801055e:	1d18      	adds	r0, r3, #4
 8010560:	6961      	ldr	r1, [r4, #20]
 8010562:	6028      	str	r0, [r5, #0]
 8010564:	0635      	lsls	r5, r6, #24
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	d501      	bpl.n	801056e <_printf_i+0x1ce>
 801056a:	6019      	str	r1, [r3, #0]
 801056c:	e002      	b.n	8010574 <_printf_i+0x1d4>
 801056e:	0670      	lsls	r0, r6, #25
 8010570:	d5fb      	bpl.n	801056a <_printf_i+0x1ca>
 8010572:	8019      	strh	r1, [r3, #0]
 8010574:	2300      	movs	r3, #0
 8010576:	4615      	mov	r5, r2
 8010578:	6123      	str	r3, [r4, #16]
 801057a:	e7ba      	b.n	80104f2 <_printf_i+0x152>
 801057c:	682b      	ldr	r3, [r5, #0]
 801057e:	2100      	movs	r1, #0
 8010580:	1d1a      	adds	r2, r3, #4
 8010582:	602a      	str	r2, [r5, #0]
 8010584:	681d      	ldr	r5, [r3, #0]
 8010586:	6862      	ldr	r2, [r4, #4]
 8010588:	4628      	mov	r0, r5
 801058a:	f7ff fb39 	bl	800fc00 <memchr>
 801058e:	b108      	cbz	r0, 8010594 <_printf_i+0x1f4>
 8010590:	1b40      	subs	r0, r0, r5
 8010592:	6060      	str	r0, [r4, #4]
 8010594:	6863      	ldr	r3, [r4, #4]
 8010596:	6123      	str	r3, [r4, #16]
 8010598:	2300      	movs	r3, #0
 801059a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801059e:	e7a8      	b.n	80104f2 <_printf_i+0x152>
 80105a0:	462a      	mov	r2, r5
 80105a2:	4649      	mov	r1, r9
 80105a4:	4640      	mov	r0, r8
 80105a6:	6923      	ldr	r3, [r4, #16]
 80105a8:	47d0      	blx	sl
 80105aa:	3001      	adds	r0, #1
 80105ac:	d0ab      	beq.n	8010506 <_printf_i+0x166>
 80105ae:	6823      	ldr	r3, [r4, #0]
 80105b0:	079b      	lsls	r3, r3, #30
 80105b2:	d413      	bmi.n	80105dc <_printf_i+0x23c>
 80105b4:	68e0      	ldr	r0, [r4, #12]
 80105b6:	9b03      	ldr	r3, [sp, #12]
 80105b8:	4298      	cmp	r0, r3
 80105ba:	bfb8      	it	lt
 80105bc:	4618      	movlt	r0, r3
 80105be:	e7a4      	b.n	801050a <_printf_i+0x16a>
 80105c0:	2301      	movs	r3, #1
 80105c2:	4632      	mov	r2, r6
 80105c4:	4649      	mov	r1, r9
 80105c6:	4640      	mov	r0, r8
 80105c8:	47d0      	blx	sl
 80105ca:	3001      	adds	r0, #1
 80105cc:	d09b      	beq.n	8010506 <_printf_i+0x166>
 80105ce:	3501      	adds	r5, #1
 80105d0:	68e3      	ldr	r3, [r4, #12]
 80105d2:	9903      	ldr	r1, [sp, #12]
 80105d4:	1a5b      	subs	r3, r3, r1
 80105d6:	42ab      	cmp	r3, r5
 80105d8:	dcf2      	bgt.n	80105c0 <_printf_i+0x220>
 80105da:	e7eb      	b.n	80105b4 <_printf_i+0x214>
 80105dc:	2500      	movs	r5, #0
 80105de:	f104 0619 	add.w	r6, r4, #25
 80105e2:	e7f5      	b.n	80105d0 <_printf_i+0x230>
 80105e4:	08010a11 	.word	0x08010a11
 80105e8:	08010a22 	.word	0x08010a22

080105ec <_realloc_r>:
 80105ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105f0:	4680      	mov	r8, r0
 80105f2:	4614      	mov	r4, r2
 80105f4:	460e      	mov	r6, r1
 80105f6:	b921      	cbnz	r1, 8010602 <_realloc_r+0x16>
 80105f8:	4611      	mov	r1, r2
 80105fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105fe:	f7ff bba5 	b.w	800fd4c <_malloc_r>
 8010602:	b92a      	cbnz	r2, 8010610 <_realloc_r+0x24>
 8010604:	f7ff fb3a 	bl	800fc7c <_free_r>
 8010608:	4625      	mov	r5, r4
 801060a:	4628      	mov	r0, r5
 801060c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010610:	f000 f81b 	bl	801064a <_malloc_usable_size_r>
 8010614:	4284      	cmp	r4, r0
 8010616:	4607      	mov	r7, r0
 8010618:	d802      	bhi.n	8010620 <_realloc_r+0x34>
 801061a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801061e:	d812      	bhi.n	8010646 <_realloc_r+0x5a>
 8010620:	4621      	mov	r1, r4
 8010622:	4640      	mov	r0, r8
 8010624:	f7ff fb92 	bl	800fd4c <_malloc_r>
 8010628:	4605      	mov	r5, r0
 801062a:	2800      	cmp	r0, #0
 801062c:	d0ed      	beq.n	801060a <_realloc_r+0x1e>
 801062e:	42bc      	cmp	r4, r7
 8010630:	4622      	mov	r2, r4
 8010632:	4631      	mov	r1, r6
 8010634:	bf28      	it	cs
 8010636:	463a      	movcs	r2, r7
 8010638:	f7ff faf0 	bl	800fc1c <memcpy>
 801063c:	4631      	mov	r1, r6
 801063e:	4640      	mov	r0, r8
 8010640:	f7ff fb1c 	bl	800fc7c <_free_r>
 8010644:	e7e1      	b.n	801060a <_realloc_r+0x1e>
 8010646:	4635      	mov	r5, r6
 8010648:	e7df      	b.n	801060a <_realloc_r+0x1e>

0801064a <_malloc_usable_size_r>:
 801064a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801064e:	1f18      	subs	r0, r3, #4
 8010650:	2b00      	cmp	r3, #0
 8010652:	bfbc      	itt	lt
 8010654:	580b      	ldrlt	r3, [r1, r0]
 8010656:	18c0      	addlt	r0, r0, r3
 8010658:	4770      	bx	lr
	...

0801065c <_init>:
 801065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801065e:	bf00      	nop
 8010660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010662:	bc08      	pop	{r3}
 8010664:	469e      	mov	lr, r3
 8010666:	4770      	bx	lr

08010668 <_fini>:
 8010668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801066a:	bf00      	nop
 801066c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801066e:	bc08      	pop	{r3}
 8010670:	469e      	mov	lr, r3
 8010672:	4770      	bx	lr
