
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093c4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080095b4  080095b4  000195b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000060  08009a2c  08009a2c  00019a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000108  08009a8c  08009a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b94  08009b94  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009b94  08009b94  00019b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b9c  08009b9c  00019b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000273c  2000007c  08009c1c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200027b8  08009c1c  000227b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005ba5b  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a169  00000000  00000000  0007bb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  00085c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a20  00000000  00000000  000878b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025453  00000000  00000000  000892d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a1ef  00000000  00000000  000ae72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6762  00000000  00000000  000d891a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018f07c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094d0  00000000  00000000  0018f0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000007c 	.word	0x2000007c
 800020c:	00000000 	.word	0x00000000
 8000210:	0800959c 	.word	0x0800959c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000080 	.word	0x20000080
 800022c:	0800959c 	.word	0x0800959c

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <selfrel_offset31>:
 8000240:	6803      	ldr	r3, [r0, #0]
 8000242:	005a      	lsls	r2, r3, #1
 8000244:	bf4c      	ite	mi
 8000246:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800024a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800024e:	4418      	add	r0, r3
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop

08000254 <search_EIT_table>:
 8000254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000258:	b339      	cbz	r1, 80002aa <search_EIT_table+0x56>
 800025a:	1e4f      	subs	r7, r1, #1
 800025c:	4604      	mov	r4, r0
 800025e:	4615      	mov	r5, r2
 8000260:	463e      	mov	r6, r7
 8000262:	f04f 0800 	mov.w	r8, #0
 8000266:	eb08 0106 	add.w	r1, r8, r6
 800026a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800026e:	1049      	asrs	r1, r1, #1
 8000270:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000274:	4648      	mov	r0, r9
 8000276:	f7ff ffe3 	bl	8000240 <selfrel_offset31>
 800027a:	4603      	mov	r3, r0
 800027c:	00c8      	lsls	r0, r1, #3
 800027e:	3008      	adds	r0, #8
 8000280:	428f      	cmp	r7, r1
 8000282:	4420      	add	r0, r4
 8000284:	d00b      	beq.n	800029e <search_EIT_table+0x4a>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d80b      	bhi.n	80002a2 <search_EIT_table+0x4e>
 800028a:	f7ff ffd9 	bl	8000240 <selfrel_offset31>
 800028e:	3801      	subs	r0, #1
 8000290:	42a8      	cmp	r0, r5
 8000292:	f101 0801 	add.w	r8, r1, #1
 8000296:	d3e6      	bcc.n	8000266 <search_EIT_table+0x12>
 8000298:	4648      	mov	r0, r9
 800029a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800029e:	42ab      	cmp	r3, r5
 80002a0:	d9fa      	bls.n	8000298 <search_EIT_table+0x44>
 80002a2:	4588      	cmp	r8, r1
 80002a4:	d001      	beq.n	80002aa <search_EIT_table+0x56>
 80002a6:	1e4e      	subs	r6, r1, #1
 80002a8:	e7dd      	b.n	8000266 <search_EIT_table+0x12>
 80002aa:	f04f 0900 	mov.w	r9, #0
 80002ae:	4648      	mov	r0, r9
 80002b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080002b4 <__gnu_unwind_get_pr_addr>:
 80002b4:	2801      	cmp	r0, #1
 80002b6:	d007      	beq.n	80002c8 <__gnu_unwind_get_pr_addr+0x14>
 80002b8:	2802      	cmp	r0, #2
 80002ba:	d007      	beq.n	80002cc <__gnu_unwind_get_pr_addr+0x18>
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <__gnu_unwind_get_pr_addr+0x1c>)
 80002be:	2800      	cmp	r0, #0
 80002c0:	bf0c      	ite	eq
 80002c2:	4618      	moveq	r0, r3
 80002c4:	2000      	movne	r0, #0
 80002c6:	4770      	bx	lr
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <__gnu_unwind_get_pr_addr+0x20>)
 80002ca:	4770      	bx	lr
 80002cc:	4802      	ldr	r0, [pc, #8]	; (80002d8 <__gnu_unwind_get_pr_addr+0x24>)
 80002ce:	4770      	bx	lr
 80002d0:	080009a5 	.word	0x080009a5
 80002d4:	080009a9 	.word	0x080009a9
 80002d8:	080009ad 	.word	0x080009ad

080002dc <get_eit_entry>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	4b24      	ldr	r3, [pc, #144]	; (8000370 <get_eit_entry+0x94>)
 80002e0:	4604      	mov	r4, r0
 80002e2:	b083      	sub	sp, #12
 80002e4:	1e8d      	subs	r5, r1, #2
 80002e6:	b33b      	cbz	r3, 8000338 <get_eit_entry+0x5c>
 80002e8:	4628      	mov	r0, r5
 80002ea:	a901      	add	r1, sp, #4
 80002ec:	f3af 8000 	nop.w
 80002f0:	b1e8      	cbz	r0, 800032e <get_eit_entry+0x52>
 80002f2:	9901      	ldr	r1, [sp, #4]
 80002f4:	462a      	mov	r2, r5
 80002f6:	f7ff ffad 	bl	8000254 <search_EIT_table>
 80002fa:	4601      	mov	r1, r0
 80002fc:	b1b8      	cbz	r0, 800032e <get_eit_entry+0x52>
 80002fe:	f7ff ff9f 	bl	8000240 <selfrel_offset31>
 8000302:	684b      	ldr	r3, [r1, #4]
 8000304:	64a0      	str	r0, [r4, #72]	; 0x48
 8000306:	2b01      	cmp	r3, #1
 8000308:	d02e      	beq.n	8000368 <get_eit_entry+0x8c>
 800030a:	2b00      	cmp	r3, #0
 800030c:	db27      	blt.n	800035e <get_eit_entry+0x82>
 800030e:	1d08      	adds	r0, r1, #4
 8000310:	f7ff ff96 	bl	8000240 <selfrel_offset31>
 8000314:	2300      	movs	r3, #0
 8000316:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800031a:	6803      	ldr	r3, [r0, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	db12      	blt.n	8000346 <get_eit_entry+0x6a>
 8000320:	f7ff ff8e 	bl	8000240 <selfrel_offset31>
 8000324:	4603      	mov	r3, r0
 8000326:	2000      	movs	r0, #0
 8000328:	6123      	str	r3, [r4, #16]
 800032a:	b003      	add	sp, #12
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	2300      	movs	r3, #0
 8000330:	2009      	movs	r0, #9
 8000332:	6123      	str	r3, [r4, #16]
 8000334:	b003      	add	sp, #12
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <get_eit_entry+0x98>)
 800033a:	490f      	ldr	r1, [pc, #60]	; (8000378 <get_eit_entry+0x9c>)
 800033c:	4618      	mov	r0, r3
 800033e:	1ac9      	subs	r1, r1, r3
 8000340:	10c9      	asrs	r1, r1, #3
 8000342:	9101      	str	r1, [sp, #4]
 8000344:	e7d6      	b.n	80002f4 <get_eit_entry+0x18>
 8000346:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800034a:	f7ff ffb3 	bl	80002b4 <__gnu_unwind_get_pr_addr>
 800034e:	2800      	cmp	r0, #0
 8000350:	4603      	mov	r3, r0
 8000352:	bf14      	ite	ne
 8000354:	2000      	movne	r0, #0
 8000356:	2009      	moveq	r0, #9
 8000358:	6123      	str	r3, [r4, #16]
 800035a:	b003      	add	sp, #12
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	2301      	movs	r3, #1
 8000360:	1d08      	adds	r0, r1, #4
 8000362:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000366:	e7d8      	b.n	800031a <get_eit_entry+0x3e>
 8000368:	2300      	movs	r3, #0
 800036a:	2005      	movs	r0, #5
 800036c:	6123      	str	r3, [r4, #16]
 800036e:	e7dc      	b.n	800032a <get_eit_entry+0x4e>
 8000370:	00000000 	.word	0x00000000
 8000374:	08009a8c 	.word	0x08009a8c
 8000378:	08009b94 	.word	0x08009b94

0800037c <restore_non_core_regs>:
 800037c:	6803      	ldr	r3, [r0, #0]
 800037e:	b510      	push	{r4, lr}
 8000380:	07da      	lsls	r2, r3, #31
 8000382:	4604      	mov	r4, r0
 8000384:	d406      	bmi.n	8000394 <restore_non_core_regs+0x18>
 8000386:	079b      	lsls	r3, r3, #30
 8000388:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800038c:	d509      	bpl.n	80003a2 <restore_non_core_regs+0x26>
 800038e:	f000 fc5d 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000392:	6823      	ldr	r3, [r4, #0]
 8000394:	0759      	lsls	r1, r3, #29
 8000396:	d509      	bpl.n	80003ac <restore_non_core_regs+0x30>
 8000398:	071a      	lsls	r2, r3, #28
 800039a:	d50e      	bpl.n	80003ba <restore_non_core_regs+0x3e>
 800039c:	06db      	lsls	r3, r3, #27
 800039e:	d513      	bpl.n	80003c8 <restore_non_core_regs+0x4c>
 80003a0:	bd10      	pop	{r4, pc}
 80003a2:	f000 fc4b 	bl	8000c3c <__gnu_Unwind_Restore_VFP>
 80003a6:	6823      	ldr	r3, [r4, #0]
 80003a8:	0759      	lsls	r1, r3, #29
 80003aa:	d4f5      	bmi.n	8000398 <restore_non_core_regs+0x1c>
 80003ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80003b0:	f000 fc54 	bl	8000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80003b4:	6823      	ldr	r3, [r4, #0]
 80003b6:	071a      	lsls	r2, r3, #28
 80003b8:	d4f0      	bmi.n	800039c <restore_non_core_regs+0x20>
 80003ba:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80003be:	f000 fc55 	bl	8000c6c <__gnu_Unwind_Restore_WMMXD>
 80003c2:	6823      	ldr	r3, [r4, #0]
 80003c4:	06db      	lsls	r3, r3, #27
 80003c6:	d4eb      	bmi.n	80003a0 <restore_non_core_regs+0x24>
 80003c8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80003cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003d0:	f000 bc90 	b.w	8000cf4 <__gnu_Unwind_Restore_WMMXC>

080003d4 <__gnu_unwind_24bit.constprop.0>:
 80003d4:	2009      	movs	r0, #9
 80003d6:	4770      	bx	lr

080003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80003d8:	4603      	mov	r3, r0
 80003da:	6800      	ldr	r0, [r0, #0]
 80003dc:	b100      	cbz	r0, 80003e0 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80003de:	4418      	add	r0, r3
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop

080003e4 <_Unwind_DebugHook>:
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop

080003e8 <unwind_phase2>:
 80003e8:	b570      	push	{r4, r5, r6, lr}
 80003ea:	4604      	mov	r4, r0
 80003ec:	460e      	mov	r6, r1
 80003ee:	4620      	mov	r0, r4
 80003f0:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80003f2:	f7ff ff73 	bl	80002dc <get_eit_entry>
 80003f6:	4605      	mov	r5, r0
 80003f8:	b998      	cbnz	r0, 8000422 <unwind_phase2+0x3a>
 80003fa:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 80003fe:	4632      	mov	r2, r6
 8000400:	4621      	mov	r1, r4
 8000402:	2001      	movs	r0, #1
 8000404:	6923      	ldr	r3, [r4, #16]
 8000406:	f8c4 c014 	str.w	ip, [r4, #20]
 800040a:	4798      	blx	r3
 800040c:	2808      	cmp	r0, #8
 800040e:	d0ee      	beq.n	80003ee <unwind_phase2+0x6>
 8000410:	2807      	cmp	r0, #7
 8000412:	d106      	bne.n	8000422 <unwind_phase2+0x3a>
 8000414:	4628      	mov	r0, r5
 8000416:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000418:	f7ff ffe4 	bl	80003e4 <_Unwind_DebugHook>
 800041c:	1d30      	adds	r0, r6, #4
 800041e:	f000 fc01 	bl	8000c24 <__restore_core_regs>
 8000422:	f008 fb2c 	bl	8008a7e <abort>
 8000426:	bf00      	nop

08000428 <unwind_phase2_forced>:
 8000428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800042c:	f04f 0a00 	mov.w	sl, #0
 8000430:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000434:	f10d 0e0c 	add.w	lr, sp, #12
 8000438:	f101 0c04 	add.w	ip, r1, #4
 800043c:	68c7      	ldr	r7, [r0, #12]
 800043e:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000442:	4606      	mov	r6, r0
 8000444:	4614      	mov	r4, r2
 8000446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800044a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800044e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000452:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000456:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800045a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800045e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000462:	ad02      	add	r5, sp, #8
 8000464:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000468:	f8c5 a000 	str.w	sl, [r5]
 800046c:	e021      	b.n	80004b2 <unwind_phase2_forced+0x8a>
 800046e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000470:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000474:	4629      	mov	r1, r5
 8000476:	6173      	str	r3, [r6, #20]
 8000478:	a87a      	add	r0, sp, #488	; 0x1e8
 800047a:	f008 fb6f 	bl	8008b5c <memcpy>
 800047e:	4631      	mov	r1, r6
 8000480:	4650      	mov	r0, sl
 8000482:	6933      	ldr	r3, [r6, #16]
 8000484:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000486:	4798      	blx	r3
 8000488:	9c88      	ldr	r4, [sp, #544]	; 0x220
 800048a:	4682      	mov	sl, r0
 800048c:	646c      	str	r4, [r5, #68]	; 0x44
 800048e:	4633      	mov	r3, r6
 8000490:	4632      	mov	r2, r6
 8000492:	4649      	mov	r1, r9
 8000494:	2001      	movs	r0, #1
 8000496:	e9cd 5800 	strd	r5, r8, [sp]
 800049a:	47b8      	blx	r7
 800049c:	4604      	mov	r4, r0
 800049e:	b9f0      	cbnz	r0, 80004de <unwind_phase2_forced+0xb6>
 80004a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80004a4:	4628      	mov	r0, r5
 80004a6:	a97a      	add	r1, sp, #488	; 0x1e8
 80004a8:	f008 fb58 	bl	8008b5c <memcpy>
 80004ac:	f1ba 0f08 	cmp.w	sl, #8
 80004b0:	d11b      	bne.n	80004ea <unwind_phase2_forced+0xc2>
 80004b2:	4630      	mov	r0, r6
 80004b4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004b6:	f7ff ff11 	bl	80002dc <get_eit_entry>
 80004ba:	f104 0909 	add.w	r9, r4, #9
 80004be:	fa5f fa89 	uxtb.w	sl, r9
 80004c2:	4604      	mov	r4, r0
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d0d2      	beq.n	800046e <unwind_phase2_forced+0x46>
 80004c8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80004ca:	4633      	mov	r3, r6
 80004cc:	6469      	str	r1, [r5, #68]	; 0x44
 80004ce:	4632      	mov	r2, r6
 80004d0:	2001      	movs	r0, #1
 80004d2:	e9cd 5800 	strd	r5, r8, [sp]
 80004d6:	f04a 0110 	orr.w	r1, sl, #16
 80004da:	47b8      	blx	r7
 80004dc:	b100      	cbz	r0, 80004e0 <unwind_phase2_forced+0xb8>
 80004de:	2409      	movs	r4, #9
 80004e0:	4620      	mov	r0, r4
 80004e2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1ba 0f07 	cmp.w	sl, #7
 80004ee:	d1f6      	bne.n	80004de <unwind_phase2_forced+0xb6>
 80004f0:	4620      	mov	r0, r4
 80004f2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004f4:	f7ff ff76 	bl	80003e4 <_Unwind_DebugHook>
 80004f8:	a803      	add	r0, sp, #12
 80004fa:	f000 fb93 	bl	8000c24 <__restore_core_regs>
 80004fe:	bf00      	nop

08000500 <_Unwind_GetCFA>:
 8000500:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000502:	4770      	bx	lr

08000504 <__gnu_Unwind_RaiseException>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800050a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800050c:	b0f9      	sub	sp, #484	; 0x1e4
 800050e:	640b      	str	r3, [r1, #64]	; 0x40
 8000510:	ac01      	add	r4, sp, #4
 8000512:	f101 0c04 	add.w	ip, r1, #4
 8000516:	460e      	mov	r6, r1
 8000518:	4605      	mov	r5, r0
 800051a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000534:	9700      	str	r7, [sp, #0]
 8000536:	e006      	b.n	8000546 <__gnu_Unwind_RaiseException+0x42>
 8000538:	466a      	mov	r2, sp
 800053a:	4629      	mov	r1, r5
 800053c:	692b      	ldr	r3, [r5, #16]
 800053e:	4798      	blx	r3
 8000540:	2808      	cmp	r0, #8
 8000542:	4604      	mov	r4, r0
 8000544:	d108      	bne.n	8000558 <__gnu_Unwind_RaiseException+0x54>
 8000546:	4628      	mov	r0, r5
 8000548:	9910      	ldr	r1, [sp, #64]	; 0x40
 800054a:	f7ff fec7 	bl	80002dc <get_eit_entry>
 800054e:	2800      	cmp	r0, #0
 8000550:	d0f2      	beq.n	8000538 <__gnu_Unwind_RaiseException+0x34>
 8000552:	2009      	movs	r0, #9
 8000554:	b079      	add	sp, #484	; 0x1e4
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000558:	4668      	mov	r0, sp
 800055a:	f7ff ff0f 	bl	800037c <restore_non_core_regs>
 800055e:	2c06      	cmp	r4, #6
 8000560:	d1f7      	bne.n	8000552 <__gnu_Unwind_RaiseException+0x4e>
 8000562:	4631      	mov	r1, r6
 8000564:	4628      	mov	r0, r5
 8000566:	f7ff ff3f 	bl	80003e8 <unwind_phase2>
 800056a:	bf00      	nop

0800056c <__gnu_Unwind_ForcedUnwind>:
 800056c:	b410      	push	{r4}
 800056e:	4614      	mov	r4, r2
 8000570:	6184      	str	r4, [r0, #24]
 8000572:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000574:	60c1      	str	r1, [r0, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	641c      	str	r4, [r3, #64]	; 0x40
 800057a:	4619      	mov	r1, r3
 800057c:	bc10      	pop	{r4}
 800057e:	e753      	b.n	8000428 <unwind_phase2_forced>

08000580 <__gnu_Unwind_Resume>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	6943      	ldr	r3, [r0, #20]
 8000584:	68c6      	ldr	r6, [r0, #12]
 8000586:	640b      	str	r3, [r1, #64]	; 0x40
 8000588:	b9ae      	cbnz	r6, 80005b6 <__gnu_Unwind_Resume+0x36>
 800058a:	460a      	mov	r2, r1
 800058c:	6903      	ldr	r3, [r0, #16]
 800058e:	4604      	mov	r4, r0
 8000590:	460d      	mov	r5, r1
 8000592:	4601      	mov	r1, r0
 8000594:	2002      	movs	r0, #2
 8000596:	4798      	blx	r3
 8000598:	2807      	cmp	r0, #7
 800059a:	d005      	beq.n	80005a8 <__gnu_Unwind_Resume+0x28>
 800059c:	2808      	cmp	r0, #8
 800059e:	d10f      	bne.n	80005c0 <__gnu_Unwind_Resume+0x40>
 80005a0:	4629      	mov	r1, r5
 80005a2:	4620      	mov	r0, r4
 80005a4:	f7ff ff20 	bl	80003e8 <unwind_phase2>
 80005a8:	4630      	mov	r0, r6
 80005aa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80005ac:	f7ff ff1a 	bl	80003e4 <_Unwind_DebugHook>
 80005b0:	1d28      	adds	r0, r5, #4
 80005b2:	f000 fb37 	bl	8000c24 <__restore_core_regs>
 80005b6:	2201      	movs	r2, #1
 80005b8:	f7ff ff36 	bl	8000428 <unwind_phase2_forced>
 80005bc:	f008 fa5f 	bl	8008a7e <abort>
 80005c0:	f008 fa5d 	bl	8008a7e <abort>

080005c4 <__gnu_Unwind_Resume_or_Rethrow>:
 80005c4:	68c2      	ldr	r2, [r0, #12]
 80005c6:	b12a      	cbz	r2, 80005d4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80005c8:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 80005cc:	2200      	movs	r2, #0
 80005ce:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 80005d2:	e729      	b.n	8000428 <unwind_phase2_forced>
 80005d4:	e796      	b.n	8000504 <__gnu_Unwind_RaiseException>
 80005d6:	bf00      	nop

080005d8 <_Unwind_Complete>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_Unwind_DeleteException>:
 80005dc:	6883      	ldr	r3, [r0, #8]
 80005de:	4601      	mov	r1, r0
 80005e0:	b10b      	cbz	r3, 80005e6 <_Unwind_DeleteException+0xa>
 80005e2:	2001      	movs	r0, #1
 80005e4:	4718      	bx	r3
 80005e6:	4770      	bx	lr

080005e8 <_Unwind_VRS_Get>:
 80005e8:	2901      	cmp	r1, #1
 80005ea:	d012      	beq.n	8000612 <_Unwind_VRS_Get+0x2a>
 80005ec:	d809      	bhi.n	8000602 <_Unwind_VRS_Get+0x1a>
 80005ee:	b973      	cbnz	r3, 800060e <_Unwind_VRS_Get+0x26>
 80005f0:	2a0f      	cmp	r2, #15
 80005f2:	d80c      	bhi.n	800060e <_Unwind_VRS_Get+0x26>
 80005f4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005f8:	6842      	ldr	r2, [r0, #4]
 80005fa:	4618      	mov	r0, r3
 80005fc:	9b00      	ldr	r3, [sp, #0]
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	4770      	bx	lr
 8000602:	3903      	subs	r1, #3
 8000604:	2901      	cmp	r1, #1
 8000606:	bf94      	ite	ls
 8000608:	2001      	movls	r0, #1
 800060a:	2002      	movhi	r0, #2
 800060c:	4770      	bx	lr
 800060e:	2002      	movs	r0, #2
 8000610:	4770      	bx	lr
 8000612:	4608      	mov	r0, r1
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <_Unwind_GetGR>:
 8000618:	2300      	movs	r3, #0
 800061a:	b500      	push	{lr}
 800061c:	b085      	sub	sp, #20
 800061e:	460a      	mov	r2, r1
 8000620:	a903      	add	r1, sp, #12
 8000622:	9100      	str	r1, [sp, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	f7ff ffdf 	bl	80005e8 <_Unwind_VRS_Get>
 800062a:	9803      	ldr	r0, [sp, #12]
 800062c:	b005      	add	sp, #20
 800062e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000632:	bf00      	nop

08000634 <_Unwind_VRS_Set>:
 8000634:	2901      	cmp	r1, #1
 8000636:	d012      	beq.n	800065e <_Unwind_VRS_Set+0x2a>
 8000638:	d809      	bhi.n	800064e <_Unwind_VRS_Set+0x1a>
 800063a:	b973      	cbnz	r3, 800065a <_Unwind_VRS_Set+0x26>
 800063c:	2a0f      	cmp	r2, #15
 800063e:	d80c      	bhi.n	800065a <_Unwind_VRS_Set+0x26>
 8000640:	9900      	ldr	r1, [sp, #0]
 8000642:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000646:	6809      	ldr	r1, [r1, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	6051      	str	r1, [r2, #4]
 800064c:	4770      	bx	lr
 800064e:	3903      	subs	r1, #3
 8000650:	2901      	cmp	r1, #1
 8000652:	bf94      	ite	ls
 8000654:	2001      	movls	r0, #1
 8000656:	2002      	movhi	r0, #2
 8000658:	4770      	bx	lr
 800065a:	2002      	movs	r0, #2
 800065c:	4770      	bx	lr
 800065e:	4608      	mov	r0, r1
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop

08000664 <_Unwind_SetGR>:
 8000664:	2300      	movs	r3, #0
 8000666:	b510      	push	{r4, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	ac03      	add	r4, sp, #12
 800066c:	9203      	str	r2, [sp, #12]
 800066e:	9400      	str	r4, [sp, #0]
 8000670:	460a      	mov	r2, r1
 8000672:	4619      	mov	r1, r3
 8000674:	f7ff ffde 	bl	8000634 <_Unwind_VRS_Set>
 8000678:	b004      	add	sp, #16
 800067a:	bd10      	pop	{r4, pc}

0800067c <__gnu_Unwind_Backtrace>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000682:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000684:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000688:	6413      	str	r3, [r2, #64]	; 0x40
 800068a:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 800068e:	f102 0c04 	add.w	ip, r2, #4
 8000692:	4605      	mov	r5, r0
 8000694:	460c      	mov	r4, r1
 8000696:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800069a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800069e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006ae:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80006b2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80006b6:	9616      	str	r6, [sp, #88]	; 0x58
 80006b8:	e012      	b.n	80006e0 <__gnu_Unwind_Backtrace+0x64>
 80006ba:	210c      	movs	r1, #12
 80006bc:	a816      	add	r0, sp, #88	; 0x58
 80006be:	466a      	mov	r2, sp
 80006c0:	f7ff ffd0 	bl	8000664 <_Unwind_SetGR>
 80006c4:	4621      	mov	r1, r4
 80006c6:	a816      	add	r0, sp, #88	; 0x58
 80006c8:	47a8      	blx	r5
 80006ca:	b978      	cbnz	r0, 80006ec <__gnu_Unwind_Backtrace+0x70>
 80006cc:	4669      	mov	r1, sp
 80006ce:	2008      	movs	r0, #8
 80006d0:	9b04      	ldr	r3, [sp, #16]
 80006d2:	aa16      	add	r2, sp, #88	; 0x58
 80006d4:	4798      	blx	r3
 80006d6:	2805      	cmp	r0, #5
 80006d8:	4606      	mov	r6, r0
 80006da:	d008      	beq.n	80006ee <__gnu_Unwind_Backtrace+0x72>
 80006dc:	2809      	cmp	r0, #9
 80006de:	d005      	beq.n	80006ec <__gnu_Unwind_Backtrace+0x70>
 80006e0:	4668      	mov	r0, sp
 80006e2:	9926      	ldr	r1, [sp, #152]	; 0x98
 80006e4:	f7ff fdfa 	bl	80002dc <get_eit_entry>
 80006e8:	2800      	cmp	r0, #0
 80006ea:	d0e6      	beq.n	80006ba <__gnu_Unwind_Backtrace+0x3e>
 80006ec:	2609      	movs	r6, #9
 80006ee:	a816      	add	r0, sp, #88	; 0x58
 80006f0:	f7ff fe44 	bl	800037c <restore_non_core_regs>
 80006f4:	4630      	mov	r0, r6
 80006f6:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80006fa:	bd70      	pop	{r4, r5, r6, pc}

080006fc <__gnu_unwind_pr_common>:
 80006fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000700:	461e      	mov	r6, r3
 8000702:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000704:	b089      	sub	sp, #36	; 0x24
 8000706:	f854 3b04 	ldr.w	r3, [r4], #4
 800070a:	460d      	mov	r5, r1
 800070c:	4617      	mov	r7, r2
 800070e:	f000 0803 	and.w	r8, r0, #3
 8000712:	9406      	str	r4, [sp, #24]
 8000714:	2e00      	cmp	r6, #0
 8000716:	d079      	beq.n	800080c <__gnu_unwind_pr_common+0x110>
 8000718:	2202      	movs	r2, #2
 800071a:	f88d 201c 	strb.w	r2, [sp, #28]
 800071e:	0c1a      	lsrs	r2, r3, #16
 8000720:	f88d 201d 	strb.w	r2, [sp, #29]
 8000724:	041b      	lsls	r3, r3, #16
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	9305      	str	r3, [sp, #20]
 800072a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800072e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000730:	f1b8 0f02 	cmp.w	r8, #2
 8000734:	bf08      	it	eq
 8000736:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000738:	f013 0301 	ands.w	r3, r3, #1
 800073c:	d00c      	beq.n	8000758 <__gnu_unwind_pr_common+0x5c>
 800073e:	4638      	mov	r0, r7
 8000740:	a905      	add	r1, sp, #20
 8000742:	f000 fb71 	bl	8000e28 <__gnu_unwind_execute>
 8000746:	b918      	cbnz	r0, 8000750 <__gnu_unwind_pr_common+0x54>
 8000748:	2008      	movs	r0, #8
 800074a:	b009      	add	sp, #36	; 0x24
 800074c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000750:	2009      	movs	r0, #9
 8000752:	b009      	add	sp, #36	; 0x24
 8000754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000758:	f8d4 a000 	ldr.w	sl, [r4]
 800075c:	f1ba 0f00 	cmp.w	sl, #0
 8000760:	d0ed      	beq.n	800073e <__gnu_unwind_pr_common+0x42>
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	f000 0308 	and.w	r3, r0, #8
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	2e02      	cmp	r6, #2
 800076c:	d04a      	beq.n	8000804 <__gnu_unwind_pr_common+0x108>
 800076e:	f8b4 a000 	ldrh.w	sl, [r4]
 8000772:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000776:	3404      	adds	r4, #4
 8000778:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800077a:	210f      	movs	r1, #15
 800077c:	4638      	mov	r0, r7
 800077e:	f029 0b01 	bic.w	fp, r9, #1
 8000782:	4493      	add	fp, r2
 8000784:	f7ff ff48 	bl	8000618 <_Unwind_GetGR>
 8000788:	4583      	cmp	fp, r0
 800078a:	d839      	bhi.n	8000800 <__gnu_unwind_pr_common+0x104>
 800078c:	f02a 0201 	bic.w	r2, sl, #1
 8000790:	445a      	add	r2, fp
 8000792:	4282      	cmp	r2, r0
 8000794:	bf94      	ite	ls
 8000796:	2000      	movls	r0, #0
 8000798:	2001      	movhi	r0, #1
 800079a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	f00a 0a01 	and.w	sl, sl, #1
 80007a6:	ea43 030a 	orr.w	r3, r3, sl
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d049      	beq.n	8000842 <__gnu_unwind_pr_common+0x146>
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d032      	beq.n	8000818 <__gnu_unwind_pr_common+0x11c>
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1cc      	bne.n	8000750 <__gnu_unwind_pr_common+0x54>
 80007b6:	f1b8 0f00 	cmp.w	r8, #0
 80007ba:	d002      	beq.n	80007c2 <__gnu_unwind_pr_common+0xc6>
 80007bc:	2800      	cmp	r0, #0
 80007be:	f040 80ce 	bne.w	800095e <__gnu_unwind_pr_common+0x262>
 80007c2:	3404      	adds	r4, #4
 80007c4:	f8d4 a000 	ldr.w	sl, [r4]
 80007c8:	f1ba 0f00 	cmp.w	sl, #0
 80007cc:	d1cd      	bne.n	800076a <__gnu_unwind_pr_common+0x6e>
 80007ce:	4638      	mov	r0, r7
 80007d0:	a905      	add	r1, sp, #20
 80007d2:	f000 fb29 	bl	8000e28 <__gnu_unwind_execute>
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d1ba      	bne.n	8000750 <__gnu_unwind_pr_common+0x54>
 80007da:	9b01      	ldr	r3, [sp, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0b3      	beq.n	8000748 <__gnu_unwind_pr_common+0x4c>
 80007e0:	210f      	movs	r1, #15
 80007e2:	4638      	mov	r0, r7
 80007e4:	f7ff ff18 	bl	8000618 <_Unwind_GetGR>
 80007e8:	210e      	movs	r1, #14
 80007ea:	4602      	mov	r2, r0
 80007ec:	4638      	mov	r0, r7
 80007ee:	f7ff ff39 	bl	8000664 <_Unwind_SetGR>
 80007f2:	4638      	mov	r0, r7
 80007f4:	210f      	movs	r1, #15
 80007f6:	4a6a      	ldr	r2, [pc, #424]	; (80009a0 <__gnu_unwind_pr_common+0x2a4>)
 80007f8:	f7ff ff34 	bl	8000664 <_Unwind_SetGR>
 80007fc:	2007      	movs	r0, #7
 80007fe:	e7a8      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000800:	2000      	movs	r0, #0
 8000802:	e7ca      	b.n	800079a <__gnu_unwind_pr_common+0x9e>
 8000804:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000808:	3408      	adds	r4, #8
 800080a:	e7b5      	b.n	8000778 <__gnu_unwind_pr_common+0x7c>
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	9305      	str	r3, [sp, #20]
 8000810:	2303      	movs	r3, #3
 8000812:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000816:	e78a      	b.n	800072e <__gnu_unwind_pr_common+0x32>
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800081e:	f1b8 0f00 	cmp.w	r8, #0
 8000822:	d145      	bne.n	80008b0 <__gnu_unwind_pr_common+0x1b4>
 8000824:	b128      	cbz	r0, 8000832 <__gnu_unwind_pr_common+0x136>
 8000826:	9a02      	ldr	r2, [sp, #8]
 8000828:	2a00      	cmp	r2, #0
 800082a:	d05c      	beq.n	80008e6 <__gnu_unwind_pr_common+0x1ea>
 800082c:	f1bb 0f00 	cmp.w	fp, #0
 8000830:	d074      	beq.n	800091c <__gnu_unwind_pr_common+0x220>
 8000832:	2b00      	cmp	r3, #0
 8000834:	da00      	bge.n	8000838 <__gnu_unwind_pr_common+0x13c>
 8000836:	3404      	adds	r4, #4
 8000838:	f10b 0b01 	add.w	fp, fp, #1
 800083c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000840:	e7c0      	b.n	80007c4 <__gnu_unwind_pr_common+0xc8>
 8000842:	f1b8 0f00 	cmp.w	r8, #0
 8000846:	d119      	bne.n	800087c <__gnu_unwind_pr_common+0x180>
 8000848:	b1b0      	cbz	r0, 8000878 <__gnu_unwind_pr_common+0x17c>
 800084a:	6863      	ldr	r3, [r4, #4]
 800084c:	6822      	ldr	r2, [r4, #0]
 800084e:	1c99      	adds	r1, r3, #2
 8000850:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000854:	f43f af7c 	beq.w	8000750 <__gnu_unwind_pr_common+0x54>
 8000858:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800085c:	3301      	adds	r3, #1
 800085e:	9104      	str	r1, [sp, #16]
 8000860:	f000 8091 	beq.w	8000986 <__gnu_unwind_pr_common+0x28a>
 8000864:	1d20      	adds	r0, r4, #4
 8000866:	f7ff fdb7 	bl	80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800086a:	ab04      	add	r3, sp, #16
 800086c:	4601      	mov	r1, r0
 800086e:	4628      	mov	r0, r5
 8000870:	f3af 8000 	nop.w
 8000874:	2800      	cmp	r0, #0
 8000876:	d15c      	bne.n	8000932 <__gnu_unwind_pr_common+0x236>
 8000878:	3408      	adds	r4, #8
 800087a:	e7a3      	b.n	80007c4 <__gnu_unwind_pr_common+0xc8>
 800087c:	210d      	movs	r1, #13
 800087e:	4638      	mov	r0, r7
 8000880:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000884:	f7ff fec8 	bl	8000618 <_Unwind_GetGR>
 8000888:	4581      	cmp	r9, r0
 800088a:	d1f5      	bne.n	8000878 <__gnu_unwind_pr_common+0x17c>
 800088c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800088e:	429c      	cmp	r4, r3
 8000890:	d1f2      	bne.n	8000878 <__gnu_unwind_pr_common+0x17c>
 8000892:	4620      	mov	r0, r4
 8000894:	f7ff fcd4 	bl	8000240 <selfrel_offset31>
 8000898:	210f      	movs	r1, #15
 800089a:	4602      	mov	r2, r0
 800089c:	4638      	mov	r0, r7
 800089e:	f7ff fee1 	bl	8000664 <_Unwind_SetGR>
 80008a2:	4638      	mov	r0, r7
 80008a4:	462a      	mov	r2, r5
 80008a6:	2100      	movs	r1, #0
 80008a8:	f7ff fedc 	bl	8000664 <_Unwind_SetGR>
 80008ac:	2007      	movs	r0, #7
 80008ae:	e750      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 80008b0:	210d      	movs	r1, #13
 80008b2:	4638      	mov	r0, r7
 80008b4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80008b8:	f7ff feae 	bl	8000618 <_Unwind_GetGR>
 80008bc:	4581      	cmp	r9, r0
 80008be:	d001      	beq.n	80008c4 <__gnu_unwind_pr_common+0x1c8>
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	e7b6      	b.n	8000832 <__gnu_unwind_pr_common+0x136>
 80008c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008c6:	429c      	cmp	r4, r3
 80008c8:	d1fa      	bne.n	80008c0 <__gnu_unwind_pr_common+0x1c4>
 80008ca:	2304      	movs	r3, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80008d2:	18e3      	adds	r3, r4, r3
 80008d4:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80008d8:	636b      	str	r3, [r5, #52]	; 0x34
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db5a      	blt.n	8000996 <__gnu_unwind_pr_common+0x29a>
 80008e0:	2301      	movs	r3, #1
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	e7a8      	b.n	8000838 <__gnu_unwind_pr_common+0x13c>
 80008e6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80008ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80008ee:	4691      	mov	r9, r2
 80008f0:	46b0      	mov	r8, r6
 80008f2:	f104 0a04 	add.w	sl, r4, #4
 80008f6:	461e      	mov	r6, r3
 80008f8:	e00e      	b.n	8000918 <__gnu_unwind_pr_common+0x21c>
 80008fa:	4650      	mov	r0, sl
 80008fc:	9604      	str	r6, [sp, #16]
 80008fe:	f7ff fd6b 	bl	80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000902:	2200      	movs	r2, #0
 8000904:	4601      	mov	r1, r0
 8000906:	ab04      	add	r3, sp, #16
 8000908:	4628      	mov	r0, r5
 800090a:	f109 0901 	add.w	r9, r9, #1
 800090e:	f10a 0a04 	add.w	sl, sl, #4
 8000912:	f3af 8000 	nop.w
 8000916:	b9e8      	cbnz	r0, 8000954 <__gnu_unwind_pr_common+0x258>
 8000918:	45d9      	cmp	r9, fp
 800091a:	d1ee      	bne.n	80008fa <__gnu_unwind_pr_common+0x1fe>
 800091c:	210d      	movs	r1, #13
 800091e:	4638      	mov	r0, r7
 8000920:	f7ff fe7a 	bl	8000618 <_Unwind_GetGR>
 8000924:	4603      	mov	r3, r0
 8000926:	9a04      	ldr	r2, [sp, #16]
 8000928:	2006      	movs	r0, #6
 800092a:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 800092e:	622b      	str	r3, [r5, #32]
 8000930:	e70f      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000932:	4681      	mov	r9, r0
 8000934:	210d      	movs	r1, #13
 8000936:	4638      	mov	r0, r7
 8000938:	f7ff fe6e 	bl	8000618 <_Unwind_GetGR>
 800093c:	f1b9 0f02 	cmp.w	r9, #2
 8000940:	6228      	str	r0, [r5, #32]
 8000942:	d125      	bne.n	8000990 <__gnu_unwind_pr_common+0x294>
 8000944:	462b      	mov	r3, r5
 8000946:	9a04      	ldr	r2, [sp, #16]
 8000948:	f843 2f2c 	str.w	r2, [r3, #44]!
 800094c:	626b      	str	r3, [r5, #36]	; 0x24
 800094e:	2006      	movs	r0, #6
 8000950:	62ac      	str	r4, [r5, #40]	; 0x28
 8000952:	e6fe      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000954:	4646      	mov	r6, r8
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800095c:	e769      	b.n	8000832 <__gnu_unwind_pr_common+0x136>
 800095e:	4620      	mov	r0, r4
 8000960:	f7ff fc6e 	bl	8000240 <selfrel_offset31>
 8000964:	4602      	mov	r2, r0
 8000966:	3404      	adds	r4, #4
 8000968:	63ac      	str	r4, [r5, #56]	; 0x38
 800096a:	4628      	mov	r0, r5
 800096c:	4614      	mov	r4, r2
 800096e:	f3af 8000 	nop.w
 8000972:	2800      	cmp	r0, #0
 8000974:	f43f aeec 	beq.w	8000750 <__gnu_unwind_pr_common+0x54>
 8000978:	4638      	mov	r0, r7
 800097a:	4622      	mov	r2, r4
 800097c:	210f      	movs	r1, #15
 800097e:	f7ff fe71 	bl	8000664 <_Unwind_SetGR>
 8000982:	2007      	movs	r0, #7
 8000984:	e6e5      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000986:	210d      	movs	r1, #13
 8000988:	4638      	mov	r0, r7
 800098a:	f7ff fe45 	bl	8000618 <_Unwind_GetGR>
 800098e:	6228      	str	r0, [r5, #32]
 8000990:	9b04      	ldr	r3, [sp, #16]
 8000992:	626b      	str	r3, [r5, #36]	; 0x24
 8000994:	e7db      	b.n	800094e <__gnu_unwind_pr_common+0x252>
 8000996:	f10b 0001 	add.w	r0, fp, #1
 800099a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800099e:	e779      	b.n	8000894 <__gnu_unwind_pr_common+0x198>
 80009a0:	00000000 	.word	0x00000000

080009a4 <__aeabi_unwind_cpp_pr0>:
 80009a4:	2300      	movs	r3, #0
 80009a6:	e6a9      	b.n	80006fc <__gnu_unwind_pr_common>

080009a8 <__aeabi_unwind_cpp_pr1>:
 80009a8:	2301      	movs	r3, #1
 80009aa:	e6a7      	b.n	80006fc <__gnu_unwind_pr_common>

080009ac <__aeabi_unwind_cpp_pr2>:
 80009ac:	2302      	movs	r3, #2
 80009ae:	e6a5      	b.n	80006fc <__gnu_unwind_pr_common>

080009b0 <_Unwind_VRS_Pop>:
 80009b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009b4:	4606      	mov	r6, r0
 80009b6:	4615      	mov	r5, r2
 80009b8:	461c      	mov	r4, r3
 80009ba:	b0c3      	sub	sp, #268	; 0x10c
 80009bc:	2904      	cmp	r1, #4
 80009be:	f200 80b8 	bhi.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009c2:	e8df f001 	tbb	[pc, r1]
 80009c6:	569c      	.short	0x569c
 80009c8:	2db6      	.short	0x2db6
 80009ca:	03          	.byte	0x03
 80009cb:	00          	.byte	0x00
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	f040 80b0 	bne.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009d2:	2a10      	cmp	r2, #16
 80009d4:	f200 80ad 	bhi.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009d8:	6803      	ldr	r3, [r0, #0]
 80009da:	06d8      	lsls	r0, r3, #27
 80009dc:	f100 80f1 	bmi.w	8000bc2 <_Unwind_VRS_Pop+0x212>
 80009e0:	af20      	add	r7, sp, #128	; 0x80
 80009e2:	4638      	mov	r0, r7
 80009e4:	f000 f990 	bl	8000d08 <__gnu_Unwind_Save_WMMXC>
 80009e8:	2401      	movs	r4, #1
 80009ea:	4638      	mov	r0, r7
 80009ec:	2300      	movs	r3, #0
 80009ee:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80009f0:	fa04 f203 	lsl.w	r2, r4, r3
 80009f4:	422a      	tst	r2, r5
 80009f6:	f103 0301 	add.w	r3, r3, #1
 80009fa:	d005      	beq.n	8000a08 <_Unwind_VRS_Pop+0x58>
 80009fc:	460a      	mov	r2, r1
 80009fe:	f852 cb04 	ldr.w	ip, [r2], #4
 8000a02:	4611      	mov	r1, r2
 8000a04:	f8c0 c000 	str.w	ip, [r0]
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	f100 0004 	add.w	r0, r0, #4
 8000a0e:	d1ef      	bne.n	80009f0 <_Unwind_VRS_Pop+0x40>
 8000a10:	4638      	mov	r0, r7
 8000a12:	63b1      	str	r1, [r6, #56]	; 0x38
 8000a14:	f000 f96e 	bl	8000cf4 <__gnu_Unwind_Restore_WMMXC>
 8000a18:	2000      	movs	r0, #0
 8000a1a:	b043      	add	sp, #268	; 0x10c
 8000a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a20:	2c03      	cmp	r4, #3
 8000a22:	f040 8086 	bne.w	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a26:	b294      	uxth	r4, r2
 8000a28:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000a2c:	2b10      	cmp	r3, #16
 8000a2e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000a32:	d87e      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a34:	6803      	ldr	r3, [r0, #0]
 8000a36:	071f      	lsls	r7, r3, #28
 8000a38:	f100 80cb 	bmi.w	8000bd2 <_Unwind_VRS_Pop+0x222>
 8000a3c:	af20      	add	r7, sp, #128	; 0x80
 8000a3e:	4638      	mov	r0, r7
 8000a40:	f000 f936 	bl	8000cb0 <__gnu_Unwind_Save_WMMXD>
 8000a44:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000a46:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000a4a:	b154      	cbz	r4, 8000a62 <_Unwind_VRS_Pop+0xb2>
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000a52:	1ad0      	subs	r0, r2, r3
 8000a54:	00e4      	lsls	r4, r4, #3
 8000a56:	581d      	ldr	r5, [r3, r0]
 8000a58:	f843 5b04 	str.w	r5, [r3], #4
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d1fa      	bne.n	8000a56 <_Unwind_VRS_Pop+0xa6>
 8000a60:	4422      	add	r2, r4
 8000a62:	4638      	mov	r0, r7
 8000a64:	63b2      	str	r2, [r6, #56]	; 0x38
 8000a66:	f000 f901 	bl	8000c6c <__gnu_Unwind_Restore_WMMXD>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	b043      	add	sp, #268	; 0x10c
 8000a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a72:	2c01      	cmp	r4, #1
 8000a74:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000a78:	b295      	uxth	r5, r2
 8000a7a:	d056      	beq.n	8000b2a <_Unwind_VRS_Pop+0x17a>
 8000a7c:	2c05      	cmp	r4, #5
 8000a7e:	d158      	bne.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a80:	eb08 0905 	add.w	r9, r8, r5
 8000a84:	f1b9 0f20 	cmp.w	r9, #32
 8000a88:	d853      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a8a:	f1b8 0f0f 	cmp.w	r8, #15
 8000a8e:	d973      	bls.n	8000b78 <_Unwind_VRS_Pop+0x1c8>
 8000a90:	46a9      	mov	r9, r5
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f040 8084 	bne.w	8000ba0 <_Unwind_VRS_Pop+0x1f0>
 8000a98:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a9a:	b365      	cbz	r5, 8000af6 <_Unwind_VRS_Pop+0x146>
 8000a9c:	af20      	add	r7, sp, #128	; 0x80
 8000a9e:	f04f 0900 	mov.w	r9, #0
 8000aa2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000aa6:	3f04      	subs	r7, #4
 8000aa8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000aac:	f853 1b04 	ldr.w	r1, [r3], #4
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	f847 1f04 	str.w	r1, [r7, #4]!
 8000ab6:	d1f9      	bne.n	8000aac <_Unwind_VRS_Pop+0xfc>
 8000ab8:	f1b9 0f00 	cmp.w	r9, #0
 8000abc:	d00f      	beq.n	8000ade <_Unwind_VRS_Pop+0x12e>
 8000abe:	466f      	mov	r7, sp
 8000ac0:	4641      	mov	r1, r8
 8000ac2:	2910      	cmp	r1, #16
 8000ac4:	bf38      	it	cc
 8000ac6:	2110      	movcc	r1, #16
 8000ac8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000acc:	3984      	subs	r1, #132	; 0x84
 8000ace:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000ad2:	f853 0b04 	ldr.w	r0, [r3], #4
 8000ad6:	42ab      	cmp	r3, r5
 8000ad8:	f841 0f04 	str.w	r0, [r1, #4]!
 8000adc:	d1f9      	bne.n	8000ad2 <_Unwind_VRS_Pop+0x122>
 8000ade:	2c01      	cmp	r4, #1
 8000ae0:	d07f      	beq.n	8000be2 <_Unwind_VRS_Pop+0x232>
 8000ae2:	f1b8 0f0f 	cmp.w	r8, #15
 8000ae6:	63b5      	str	r5, [r6, #56]	; 0x38
 8000ae8:	d942      	bls.n	8000b70 <_Unwind_VRS_Pop+0x1c0>
 8000aea:	f1b9 0f00 	cmp.w	r9, #0
 8000aee:	d002      	beq.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000af0:	4668      	mov	r0, sp
 8000af2:	f000 f8b3 	bl	8000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000af6:	2000      	movs	r0, #0
 8000af8:	b043      	add	sp, #268	; 0x10c
 8000afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000afe:	b9c4      	cbnz	r4, 8000b32 <_Unwind_VRS_Pop+0x182>
 8000b00:	4623      	mov	r3, r4
 8000b02:	2401      	movs	r4, #1
 8000b04:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000b06:	1d37      	adds	r7, r6, #4
 8000b08:	b2a8      	uxth	r0, r5
 8000b0a:	fa04 f103 	lsl.w	r1, r4, r3
 8000b0e:	4201      	tst	r1, r0
 8000b10:	bf1c      	itt	ne
 8000b12:	f852 1b04 	ldrne.w	r1, [r2], #4
 8000b16:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	2b10      	cmp	r3, #16
 8000b1e:	d1f4      	bne.n	8000b0a <_Unwind_VRS_Pop+0x15a>
 8000b20:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000b24:	d1e7      	bne.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000b26:	63b2      	str	r2, [r6, #56]	; 0x38
 8000b28:	e004      	b.n	8000b34 <_Unwind_VRS_Pop+0x184>
 8000b2a:	eb08 0305 	add.w	r3, r8, r5
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d903      	bls.n	8000b3a <_Unwind_VRS_Pop+0x18a>
 8000b32:	2002      	movs	r0, #2
 8000b34:	b043      	add	sp, #268	; 0x10c
 8000b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b3a:	f1b8 0f0f 	cmp.w	r8, #15
 8000b3e:	d8f8      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000b40:	6833      	ldr	r3, [r6, #0]
 8000b42:	07da      	lsls	r2, r3, #31
 8000b44:	d506      	bpl.n	8000b54 <_Unwind_VRS_Pop+0x1a4>
 8000b46:	4630      	mov	r0, r6
 8000b48:	f023 0303 	bic.w	r3, r3, #3
 8000b4c:	f840 3b48 	str.w	r3, [r0], #72
 8000b50:	f000 f878 	bl	8000c44 <__gnu_Unwind_Save_VFP>
 8000b54:	af20      	add	r7, sp, #128	; 0x80
 8000b56:	4638      	mov	r0, r7
 8000b58:	f000 f874 	bl	8000c44 <__gnu_Unwind_Save_VFP>
 8000b5c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d19d      	bne.n	8000a9e <_Unwind_VRS_Pop+0xee>
 8000b62:	461d      	mov	r5, r3
 8000b64:	3504      	adds	r5, #4
 8000b66:	4638      	mov	r0, r7
 8000b68:	63b5      	str	r5, [r6, #56]	; 0x38
 8000b6a:	f000 f867 	bl	8000c3c <__gnu_Unwind_Restore_VFP>
 8000b6e:	e7c2      	b.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000b70:	a820      	add	r0, sp, #128	; 0x80
 8000b72:	f000 f86b 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000b76:	e7b8      	b.n	8000aea <_Unwind_VRS_Pop+0x13a>
 8000b78:	f1b9 0f10 	cmp.w	r9, #16
 8000b7c:	d93f      	bls.n	8000bfe <_Unwind_VRS_Pop+0x24e>
 8000b7e:	f1a9 0910 	sub.w	r9, r9, #16
 8000b82:	6833      	ldr	r3, [r6, #0]
 8000b84:	07d9      	lsls	r1, r3, #31
 8000b86:	d508      	bpl.n	8000b9a <_Unwind_VRS_Pop+0x1ea>
 8000b88:	4630      	mov	r0, r6
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f840 3b48 	str.w	r3, [r0], #72
 8000b96:	f000 f85d 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000b9a:	f1b9 0f00 	cmp.w	r9, #0
 8000b9e:	d031      	beq.n	8000c04 <_Unwind_VRS_Pop+0x254>
 8000ba0:	6833      	ldr	r3, [r6, #0]
 8000ba2:	075a      	lsls	r2, r3, #29
 8000ba4:	d41f      	bmi.n	8000be6 <_Unwind_VRS_Pop+0x236>
 8000ba6:	f1b8 0f0f 	cmp.w	r8, #15
 8000baa:	d924      	bls.n	8000bf6 <_Unwind_VRS_Pop+0x246>
 8000bac:	466f      	mov	r7, sp
 8000bae:	f1c8 0510 	rsb	r5, r8, #16
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	f000 f856 	bl	8000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000bbc:	dd80      	ble.n	8000ac0 <_Unwind_VRS_Pop+0x110>
 8000bbe:	af20      	add	r7, sp, #128	; 0x80
 8000bc0:	e76f      	b.n	8000aa2 <_Unwind_VRS_Pop+0xf2>
 8000bc2:	f023 0310 	bic.w	r3, r3, #16
 8000bc6:	6033      	str	r3, [r6, #0]
 8000bc8:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000bcc:	f000 f89c 	bl	8000d08 <__gnu_Unwind_Save_WMMXC>
 8000bd0:	e706      	b.n	80009e0 <_Unwind_VRS_Pop+0x30>
 8000bd2:	f023 0308 	bic.w	r3, r3, #8
 8000bd6:	6003      	str	r3, [r0, #0]
 8000bd8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000bdc:	f000 f868 	bl	8000cb0 <__gnu_Unwind_Save_WMMXD>
 8000be0:	e72c      	b.n	8000a3c <_Unwind_VRS_Pop+0x8c>
 8000be2:	af20      	add	r7, sp, #128	; 0x80
 8000be4:	e7be      	b.n	8000b64 <_Unwind_VRS_Pop+0x1b4>
 8000be6:	4630      	mov	r0, r6
 8000be8:	f023 0304 	bic.w	r3, r3, #4
 8000bec:	f840 3bd0 	str.w	r3, [r0], #208
 8000bf0:	f000 f838 	bl	8000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bf4:	e7d7      	b.n	8000ba6 <_Unwind_VRS_Pop+0x1f6>
 8000bf6:	a820      	add	r0, sp, #128	; 0x80
 8000bf8:	f000 f82c 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000bfc:	e7d6      	b.n	8000bac <_Unwind_VRS_Pop+0x1fc>
 8000bfe:	f04f 0900 	mov.w	r9, #0
 8000c02:	e7be      	b.n	8000b82 <_Unwind_VRS_Pop+0x1d2>
 8000c04:	f1b8 0f0f 	cmp.w	r8, #15
 8000c08:	f63f af46 	bhi.w	8000a98 <_Unwind_VRS_Pop+0xe8>
 8000c0c:	af20      	add	r7, sp, #128	; 0x80
 8000c0e:	4638      	mov	r0, r7
 8000c10:	f000 f820 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000c14:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	f47f af41 	bne.w	8000a9e <_Unwind_VRS_Pop+0xee>
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	f000 f815 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000c22:	e768      	b.n	8000af6 <_Unwind_VRS_Pop+0x146>

08000c24 <__restore_core_regs>:
 8000c24:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000c28:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000c2c:	469c      	mov	ip, r3
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000c34:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000c38:	46e5      	mov	sp, ip
 8000c3a:	bd00      	pop	{pc}

08000c3c <__gnu_Unwind_Restore_VFP>:
 8000c3c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <__gnu_Unwind_Save_VFP>:
 8000c44:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__gnu_Unwind_Restore_VFP_D>:
 8000c4c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__gnu_Unwind_Save_VFP_D>:
 8000c54:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000c5c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000c64:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__gnu_Unwind_Restore_WMMXD>:
 8000c6c:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c70:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c74:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c78:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c7c:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c80:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c84:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c88:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c8c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c90:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c94:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c98:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c9c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000ca0:	ecf0 d102 	ldfp	f5, [r0], #8
 8000ca4:	ecf0 e102 	ldfp	f6, [r0], #8
 8000ca8:	ecf0 f102 	ldfp	f7, [r0], #8
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__gnu_Unwind_Save_WMMXD>:
 8000cb0:	ece0 0102 	stfe	f0, [r0], #8
 8000cb4:	ece0 1102 	stfe	f1, [r0], #8
 8000cb8:	ece0 2102 	stfe	f2, [r0], #8
 8000cbc:	ece0 3102 	stfe	f3, [r0], #8
 8000cc0:	ece0 4102 	stfe	f4, [r0], #8
 8000cc4:	ece0 5102 	stfe	f5, [r0], #8
 8000cc8:	ece0 6102 	stfe	f6, [r0], #8
 8000ccc:	ece0 7102 	stfe	f7, [r0], #8
 8000cd0:	ece0 8102 	stfp	f0, [r0], #8
 8000cd4:	ece0 9102 	stfp	f1, [r0], #8
 8000cd8:	ece0 a102 	stfp	f2, [r0], #8
 8000cdc:	ece0 b102 	stfp	f3, [r0], #8
 8000ce0:	ece0 c102 	stfp	f4, [r0], #8
 8000ce4:	ece0 d102 	stfp	f5, [r0], #8
 8000ce8:	ece0 e102 	stfp	f6, [r0], #8
 8000cec:	ece0 f102 	stfp	f7, [r0], #8
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <__gnu_Unwind_Restore_WMMXC>:
 8000cf4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000cf8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000cfc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000d00:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__gnu_Unwind_Save_WMMXC>:
 8000d08:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000d0c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000d10:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000d14:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <_Unwind_RaiseException>:
 8000d1c:	46ec      	mov	ip, sp
 8000d1e:	b500      	push	{lr}
 8000d20:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d24:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d30:	a901      	add	r1, sp, #4
 8000d32:	f7ff fbe7 	bl	8000504 <__gnu_Unwind_RaiseException>
 8000d36:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d3a:	b012      	add	sp, #72	; 0x48
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <_Unwind_Resume>:
 8000d40:	46ec      	mov	ip, sp
 8000d42:	b500      	push	{lr}
 8000d44:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d48:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d54:	a901      	add	r1, sp, #4
 8000d56:	f7ff fc13 	bl	8000580 <__gnu_Unwind_Resume>
 8000d5a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d5e:	b012      	add	sp, #72	; 0x48
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <_Unwind_Resume_or_Rethrow>:
 8000d64:	46ec      	mov	ip, sp
 8000d66:	b500      	push	{lr}
 8000d68:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d6c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d78:	a901      	add	r1, sp, #4
 8000d7a:	f7ff fc23 	bl	80005c4 <__gnu_Unwind_Resume_or_Rethrow>
 8000d7e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d82:	b012      	add	sp, #72	; 0x48
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <_Unwind_ForcedUnwind>:
 8000d88:	46ec      	mov	ip, sp
 8000d8a:	b500      	push	{lr}
 8000d8c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d90:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d9c:	ab01      	add	r3, sp, #4
 8000d9e:	f7ff fbe5 	bl	800056c <__gnu_Unwind_ForcedUnwind>
 8000da2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000da6:	b012      	add	sp, #72	; 0x48
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <_Unwind_Backtrace>:
 8000dac:	46ec      	mov	ip, sp
 8000dae:	b500      	push	{lr}
 8000db0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000db4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000dc0:	aa01      	add	r2, sp, #4
 8000dc2:	f7ff fc5b 	bl	800067c <__gnu_Unwind_Backtrace>
 8000dc6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000dca:	b012      	add	sp, #72	; 0x48
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <next_unwind_byte>:
 8000dd0:	7a02      	ldrb	r2, [r0, #8]
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b97a      	cbnz	r2, 8000df6 <next_unwind_byte+0x26>
 8000dd6:	7a42      	ldrb	r2, [r0, #9]
 8000dd8:	b1a2      	cbz	r2, 8000e04 <next_unwind_byte+0x34>
 8000dda:	f04f 0c03 	mov.w	ip, #3
 8000dde:	6841      	ldr	r1, [r0, #4]
 8000de0:	3a01      	subs	r2, #1
 8000de2:	7242      	strb	r2, [r0, #9]
 8000de4:	6808      	ldr	r0, [r1, #0]
 8000de6:	1d0a      	adds	r2, r1, #4
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	0202      	lsls	r2, r0, #8
 8000dec:	f883 c008 	strb.w	ip, [r3, #8]
 8000df0:	0e00      	lsrs	r0, r0, #24
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	4770      	bx	lr
 8000df6:	6800      	ldr	r0, [r0, #0]
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	721a      	strb	r2, [r3, #8]
 8000dfc:	0202      	lsls	r2, r0, #8
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	0e00      	lsrs	r0, r0, #24
 8000e02:	4770      	bx	lr
 8000e04:	20b0      	movs	r0, #176	; 0xb0
 8000e06:	4770      	bx	lr

08000e08 <_Unwind_GetGR.constprop.0>:
 8000e08:	2300      	movs	r3, #0
 8000e0a:	b500      	push	{lr}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	a903      	add	r1, sp, #12
 8000e10:	9100      	str	r1, [sp, #0]
 8000e12:	220c      	movs	r2, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	f7ff fbe7 	bl	80005e8 <_Unwind_VRS_Get>
 8000e1a:	9803      	ldr	r0, [sp, #12]
 8000e1c:	b005      	add	sp, #20
 8000e1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e22:	bf00      	nop

08000e24 <unwind_UCB_from_context>:
 8000e24:	e7f0      	b.n	8000e08 <_Unwind_GetGR.constprop.0>
 8000e26:	bf00      	nop

08000e28 <__gnu_unwind_execute>:
 8000e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e2c:	f04f 0800 	mov.w	r8, #0
 8000e30:	4605      	mov	r5, r0
 8000e32:	460e      	mov	r6, r1
 8000e34:	b085      	sub	sp, #20
 8000e36:	4630      	mov	r0, r6
 8000e38:	f7ff ffca 	bl	8000dd0 <next_unwind_byte>
 8000e3c:	28b0      	cmp	r0, #176	; 0xb0
 8000e3e:	4604      	mov	r4, r0
 8000e40:	f000 80ba 	beq.w	8000fb8 <__gnu_unwind_execute+0x190>
 8000e44:	0607      	lsls	r7, r0, #24
 8000e46:	d520      	bpl.n	8000e8a <__gnu_unwind_execute+0x62>
 8000e48:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000e4c:	2b80      	cmp	r3, #128	; 0x80
 8000e4e:	d04d      	beq.n	8000eec <__gnu_unwind_execute+0xc4>
 8000e50:	2b90      	cmp	r3, #144	; 0x90
 8000e52:	d036      	beq.n	8000ec2 <__gnu_unwind_execute+0x9a>
 8000e54:	2ba0      	cmp	r3, #160	; 0xa0
 8000e56:	d060      	beq.n	8000f1a <__gnu_unwind_execute+0xf2>
 8000e58:	2bb0      	cmp	r3, #176	; 0xb0
 8000e5a:	d073      	beq.n	8000f44 <__gnu_unwind_execute+0x11c>
 8000e5c:	2bc0      	cmp	r3, #192	; 0xc0
 8000e5e:	f000 808a 	beq.w	8000f76 <__gnu_unwind_execute+0x14e>
 8000e62:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e66:	2bd0      	cmp	r3, #208	; 0xd0
 8000e68:	d10b      	bne.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000e6a:	f000 0207 	and.w	r2, r0, #7
 8000e6e:	3201      	adds	r2, #1
 8000e70:	2305      	movs	r3, #5
 8000e72:	2101      	movs	r1, #1
 8000e74:	4628      	mov	r0, r5
 8000e76:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e7a:	f7ff fd99 	bl	80009b0 <_Unwind_VRS_Pop>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d0d9      	beq.n	8000e36 <__gnu_unwind_execute+0xe>
 8000e82:	2009      	movs	r0, #9
 8000e84:	b005      	add	sp, #20
 8000e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e8a:	0083      	lsls	r3, r0, #2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	1d1f      	adds	r7, r3, #4
 8000e90:	2300      	movs	r3, #0
 8000e92:	f10d 090c 	add.w	r9, sp, #12
 8000e96:	4619      	mov	r1, r3
 8000e98:	220d      	movs	r2, #13
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f8cd 9000 	str.w	r9, [sp]
 8000ea0:	f7ff fba2 	bl	80005e8 <_Unwind_VRS_Get>
 8000ea4:	9b03      	ldr	r3, [sp, #12]
 8000ea6:	0660      	lsls	r0, r4, #25
 8000ea8:	bf4c      	ite	mi
 8000eaa:	1bdf      	submi	r7, r3, r7
 8000eac:	18ff      	addpl	r7, r7, r3
 8000eae:	2300      	movs	r3, #0
 8000eb0:	220d      	movs	r2, #13
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f8cd 9000 	str.w	r9, [sp]
 8000eba:	9703      	str	r7, [sp, #12]
 8000ebc:	f7ff fbba 	bl	8000634 <_Unwind_VRS_Set>
 8000ec0:	e7b9      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000ec2:	f000 030d 	and.w	r3, r0, #13
 8000ec6:	2b0d      	cmp	r3, #13
 8000ec8:	d0db      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	af03      	add	r7, sp, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f000 020f 	and.w	r2, r0, #15
 8000ed4:	9700      	str	r7, [sp, #0]
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	f7ff fb86 	bl	80005e8 <_Unwind_VRS_Get>
 8000edc:	2300      	movs	r3, #0
 8000ede:	220d      	movs	r2, #13
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	9700      	str	r7, [sp, #0]
 8000ee6:	f7ff fba5 	bl	8000634 <_Unwind_VRS_Set>
 8000eea:	e7a4      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000eec:	4630      	mov	r0, r6
 8000eee:	f7ff ff6f 	bl	8000dd0 <next_unwind_byte>
 8000ef2:	0224      	lsls	r4, r4, #8
 8000ef4:	4320      	orrs	r0, r4
 8000ef6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000efa:	d0c2      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000efc:	2300      	movs	r3, #0
 8000efe:	0104      	lsls	r4, r0, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4628      	mov	r0, r5
 8000f04:	b2a2      	uxth	r2, r4
 8000f06:	f7ff fd53 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d1b9      	bne.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f0e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000f12:	bf18      	it	ne
 8000f14:	f04f 0801 	movne.w	r8, #1
 8000f18:	e78d      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000f1a:	43c3      	mvns	r3, r0
 8000f1c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	411a      	asrs	r2, r3
 8000f26:	2300      	movs	r3, #0
 8000f28:	0701      	lsls	r1, r0, #28
 8000f2a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000f2e:	bf48      	it	mi
 8000f30:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000f34:	4628      	mov	r0, r5
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fd3a 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	f43f af7a 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000f42:	e79e      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f44:	28b1      	cmp	r0, #177	; 0xb1
 8000f46:	d03c      	beq.n	8000fc2 <__gnu_unwind_execute+0x19a>
 8000f48:	28b2      	cmp	r0, #178	; 0xb2
 8000f4a:	f000 80b0 	beq.w	80010ae <__gnu_unwind_execute+0x286>
 8000f4e:	28b3      	cmp	r0, #179	; 0xb3
 8000f50:	d04a      	beq.n	8000fe8 <__gnu_unwind_execute+0x1c0>
 8000f52:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000f56:	2bb4      	cmp	r3, #180	; 0xb4
 8000f58:	d093      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f000 0207 	and.w	r2, r0, #7
 8000f60:	441a      	add	r2, r3
 8000f62:	4628      	mov	r0, r5
 8000f64:	4619      	mov	r1, r3
 8000f66:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f6a:	f7ff fd21 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	f43f af61 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000f74:	e785      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f76:	28c6      	cmp	r0, #198	; 0xc6
 8000f78:	d04f      	beq.n	800101a <__gnu_unwind_execute+0x1f2>
 8000f7a:	28c7      	cmp	r0, #199	; 0xc7
 8000f7c:	d061      	beq.n	8001042 <__gnu_unwind_execute+0x21a>
 8000f7e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f82:	2bc0      	cmp	r3, #192	; 0xc0
 8000f84:	d070      	beq.n	8001068 <__gnu_unwind_execute+0x240>
 8000f86:	28c8      	cmp	r0, #200	; 0xc8
 8000f88:	d07c      	beq.n	8001084 <__gnu_unwind_execute+0x25c>
 8000f8a:	28c9      	cmp	r0, #201	; 0xc9
 8000f8c:	f47f af79 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000f90:	4630      	mov	r0, r6
 8000f92:	f7ff ff1d 	bl	8000dd0 <next_unwind_byte>
 8000f96:	2305      	movs	r3, #5
 8000f98:	4602      	mov	r2, r0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	0314      	lsls	r4, r2, #12
 8000fa0:	f002 020f 	and.w	r2, r2, #15
 8000fa4:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000fa8:	440a      	add	r2, r1
 8000faa:	4322      	orrs	r2, r4
 8000fac:	f7ff fd00 	bl	80009b0 <_Unwind_VRS_Pop>
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	f43f af40 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000fb6:	e764      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000fb8:	f1b8 0f00 	cmp.w	r8, #0
 8000fbc:	d01c      	beq.n	8000ff8 <__gnu_unwind_execute+0x1d0>
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	e760      	b.n	8000e84 <__gnu_unwind_execute+0x5c>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	f7ff ff04 	bl	8000dd0 <next_unwind_byte>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	f43f af59 	beq.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000fd0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fd4:	f47f af55 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f7ff fce8 	bl	80009b0 <_Unwind_VRS_Pop>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	f43f af28 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000fe6:	e74c      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f7ff fef1 	bl	8000dd0 <next_unwind_byte>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	e7d2      	b.n	8000f9e <__gnu_unwind_execute+0x176>
 8000ff8:	ac03      	add	r4, sp, #12
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	220e      	movs	r2, #14
 8000ffe:	4641      	mov	r1, r8
 8001000:	4628      	mov	r0, r5
 8001002:	9400      	str	r4, [sp, #0]
 8001004:	f7ff faf0 	bl	80005e8 <_Unwind_VRS_Get>
 8001008:	4643      	mov	r3, r8
 800100a:	220f      	movs	r2, #15
 800100c:	4628      	mov	r0, r5
 800100e:	4641      	mov	r1, r8
 8001010:	9400      	str	r4, [sp, #0]
 8001012:	f7ff fb0f 	bl	8000634 <_Unwind_VRS_Set>
 8001016:	4640      	mov	r0, r8
 8001018:	e734      	b.n	8000e84 <__gnu_unwind_execute+0x5c>
 800101a:	4630      	mov	r0, r6
 800101c:	f7ff fed8 	bl	8000dd0 <next_unwind_byte>
 8001020:	4602      	mov	r2, r0
 8001022:	2303      	movs	r3, #3
 8001024:	0314      	lsls	r4, r2, #12
 8001026:	f002 020f 	and.w	r2, r2, #15
 800102a:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 800102e:	3201      	adds	r2, #1
 8001030:	4628      	mov	r0, r5
 8001032:	4619      	mov	r1, r3
 8001034:	4322      	orrs	r2, r4
 8001036:	f7ff fcbb 	bl	80009b0 <_Unwind_VRS_Pop>
 800103a:	2800      	cmp	r0, #0
 800103c:	f43f aefb 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001040:	e71f      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001042:	4630      	mov	r0, r6
 8001044:	f7ff fec4 	bl	8000dd0 <next_unwind_byte>
 8001048:	4602      	mov	r2, r0
 800104a:	2800      	cmp	r0, #0
 800104c:	f43f af19 	beq.w	8000e82 <__gnu_unwind_execute+0x5a>
 8001050:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001054:	f47f af15 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8001058:	2104      	movs	r1, #4
 800105a:	4628      	mov	r0, r5
 800105c:	f7ff fca8 	bl	80009b0 <_Unwind_VRS_Pop>
 8001060:	2800      	cmp	r0, #0
 8001062:	f43f aee8 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001066:	e70c      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001068:	2303      	movs	r3, #3
 800106a:	f000 020f 	and.w	r2, r0, #15
 800106e:	3201      	adds	r2, #1
 8001070:	4628      	mov	r0, r5
 8001072:	4619      	mov	r1, r3
 8001074:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001078:	f7ff fc9a 	bl	80009b0 <_Unwind_VRS_Pop>
 800107c:	2800      	cmp	r0, #0
 800107e:	f43f aeda 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001082:	e6fe      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001084:	4630      	mov	r0, r6
 8001086:	f7ff fea3 	bl	8000dd0 <next_unwind_byte>
 800108a:	4602      	mov	r2, r0
 800108c:	2101      	movs	r1, #1
 800108e:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8001092:	f002 020f 	and.w	r2, r2, #15
 8001096:	3410      	adds	r4, #16
 8001098:	440a      	add	r2, r1
 800109a:	2305      	movs	r3, #5
 800109c:	4628      	mov	r0, r5
 800109e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80010a2:	f7ff fc85 	bl	80009b0 <_Unwind_VRS_Pop>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	f43f aec5 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 80010ac:	e6e9      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 80010ae:	2300      	movs	r3, #0
 80010b0:	f10d 090c 	add.w	r9, sp, #12
 80010b4:	220d      	movs	r2, #13
 80010b6:	4619      	mov	r1, r3
 80010b8:	4628      	mov	r0, r5
 80010ba:	f8cd 9000 	str.w	r9, [sp]
 80010be:	f7ff fa93 	bl	80005e8 <_Unwind_VRS_Get>
 80010c2:	4630      	mov	r0, r6
 80010c4:	f7ff fe84 	bl	8000dd0 <next_unwind_byte>
 80010c8:	0602      	lsls	r2, r0, #24
 80010ca:	f04f 0402 	mov.w	r4, #2
 80010ce:	d50c      	bpl.n	80010ea <__gnu_unwind_execute+0x2c2>
 80010d0:	9b03      	ldr	r3, [sp, #12]
 80010d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80010d6:	40a0      	lsls	r0, r4
 80010d8:	4418      	add	r0, r3
 80010da:	9003      	str	r0, [sp, #12]
 80010dc:	4630      	mov	r0, r6
 80010de:	f7ff fe77 	bl	8000dd0 <next_unwind_byte>
 80010e2:	0603      	lsls	r3, r0, #24
 80010e4:	f104 0407 	add.w	r4, r4, #7
 80010e8:	d4f2      	bmi.n	80010d0 <__gnu_unwind_execute+0x2a8>
 80010ea:	9b03      	ldr	r3, [sp, #12]
 80010ec:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80010f0:	40a2      	lsls	r2, r4
 80010f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010f6:	441a      	add	r2, r3
 80010f8:	2300      	movs	r3, #0
 80010fa:	9203      	str	r2, [sp, #12]
 80010fc:	4628      	mov	r0, r5
 80010fe:	220d      	movs	r2, #13
 8001100:	4619      	mov	r1, r3
 8001102:	f8cd 9000 	str.w	r9, [sp]
 8001106:	f7ff fa95 	bl	8000634 <_Unwind_VRS_Set>
 800110a:	e694      	b.n	8000e36 <__gnu_unwind_execute+0xe>

0800110c <__gnu_unwind_frame>:
 800110c:	460b      	mov	r3, r1
 800110e:	f04f 0c03 	mov.w	ip, #3
 8001112:	b500      	push	{lr}
 8001114:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001116:	4618      	mov	r0, r3
 8001118:	6853      	ldr	r3, [r2, #4]
 800111a:	b085      	sub	sp, #20
 800111c:	3208      	adds	r2, #8
 800111e:	9202      	str	r2, [sp, #8]
 8001120:	a901      	add	r1, sp, #4
 8001122:	0e1a      	lsrs	r2, r3, #24
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	f88d c00c 	strb.w	ip, [sp, #12]
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	f88d 200d 	strb.w	r2, [sp, #13]
 8001130:	f7ff fe7a 	bl	8000e28 <__gnu_unwind_execute>
 8001134:	b005      	add	sp, #20
 8001136:	f85d fb04 	ldr.w	pc, [sp], #4
 800113a:	bf00      	nop

0800113c <_Unwind_GetRegionStart>:
 800113c:	b508      	push	{r3, lr}
 800113e:	f7ff fe71 	bl	8000e24 <unwind_UCB_from_context>
 8001142:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001144:	bd08      	pop	{r3, pc}
 8001146:	bf00      	nop

08001148 <_Unwind_GetLanguageSpecificData>:
 8001148:	b508      	push	{r3, lr}
 800114a:	f7ff fe6b 	bl	8000e24 <unwind_UCB_from_context>
 800114e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001150:	79c3      	ldrb	r3, [r0, #7]
 8001152:	3302      	adds	r3, #2
 8001154:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001158:	bd08      	pop	{r3, pc}
 800115a:	bf00      	nop

0800115c <_ZN7Display6setLCDEP3LCD>:
		SCREEN_MAIN = 1
	};

	Display();
	virtual ~Display();
	void setLCD( LCD *lcd ) { mLCD = lcd; }
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <_ZN3LED6setPinEt>:
public:
	LED();
	LED( GPIO_TypeDef*, uint16_t pin );
	virtual ~LED();

	void setPin( uint16_t pin ) { mPin = pin; }
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	887a      	ldrh	r2, [r7, #2]
 8001186:	811a      	strh	r2, [r3, #8]
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <_ZN3LED7setPortEP12GPIO_TypeDef>:
	void setPort( GPIO_TypeDef* port ) { mPort = port; }
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>:
	void setPortAndPin( GPIO_TypeDef* port, uint16_t pin ) { setPin( pin ); setPort( port ); }
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	4613      	mov	r3, r2
 80011b8:	80fb      	strh	r3, [r7, #6]
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	4619      	mov	r1, r3
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f7ff ffd9 	bl	8001176 <_ZN3LED6setPinEt>
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffe3 	bl	8001192 <_ZN3LED7setPortEP12GPIO_TypeDef>
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_ZN5Audio10setDecoderEP12DolbyDecoder>:
	virtual ~Audio();

	virtual void tick();
	virtual void preTick();

	virtual void setDecoder( DolbyDecoder *decoder ) { mDecoder = decoder; }
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <_ZN5Audio6setDACEP6DAC_IC>:
	virtual void setDAC( DAC_IC *dac ) { mDAC = dac; }
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	6039      	str	r1, [r7, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <_ZN9AmplifierC1Ev>:
#include "DACPCM1681.h"
#include "DolbyDecoderSTA310.h"
//#include "usbd_cdc_if.h"
#include "Debug.h"

Amplifier::Amplifier() :
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	mAudio( this ),
	mDAC( 0 ),
	mDecoder( 0 ),
	mLastVolumeTimer( 0 ),
	mCurrentVolume( 100 ),
	mSamplingFrequency( 0 ) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fe8a 	bl	8001f2c <_ZN13DecoderEventsC1Ev>
 8001218:	4a26      	ldr	r2, [pc, #152]	; (80012b4 <_ZN9AmplifierC1Ev+0xac>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3304      	adds	r3, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fea2 	bl	8001f6c <_ZN7DisplayC1Ev>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	334c      	adds	r3, #76	; 0x4c
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fa1e 	bl	8001670 <_ZN5AudioC1EP9Amplifier>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	669a      	str	r2, [r3, #104]	; 0x68
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	679a      	str	r2, [r3, #120]	; 0x78
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2264      	movs	r2, #100	; 0x64
 800124a:	67da      	str	r2, [r3, #124]	; 0x7c
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3380      	adds	r3, #128	; 0x80
 8001250:	2403      	movs	r4, #3
 8001252:	461d      	mov	r5, r3
 8001254:	2c00      	cmp	r4, #0
 8001256:	db05      	blt.n	8001264 <_ZN9AmplifierC1Ev+0x5c>
 8001258:	4628      	mov	r0, r5
 800125a:	f002 fb27 	bl	80038ac <_ZN3LEDC1Ev>
 800125e:	3510      	adds	r5, #16
 8001260:	3c01      	subs	r4, #1
 8001262:	e7f7      	b.n	8001254 <_ZN9AmplifierC1Ev+0x4c>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	33c0      	adds	r3, #192	; 0xc0
 8001268:	2404      	movs	r4, #4
 800126a:	461d      	mov	r5, r3
 800126c:	2c00      	cmp	r4, #0
 800126e:	db05      	blt.n	800127c <_ZN9AmplifierC1Ev+0x74>
 8001270:	4628      	mov	r0, r5
 8001272:	f002 fb1b 	bl	80038ac <_ZN3LEDC1Ev>
 8001276:	3510      	adds	r5, #16
 8001278:	3c01      	subs	r4, #1
 800127a:	e7f7      	b.n	800126c <_ZN9AmplifierC1Ev+0x64>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001282:	4618      	mov	r0, r3
 8001284:	f007 fb44 	bl	8008910 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	// TODO Auto-generated constructor stub
	mBusI2C = new I2C_Bitbang( 48000000 );
 8001290:	200c      	movs	r0, #12
 8001292:	f007 faba 	bl	800880a <_Znwj>
 8001296:	4603      	mov	r3, r0
 8001298:	461c      	mov	r4, r3
 800129a:	2200      	movs	r2, #0
 800129c:	4906      	ldr	r1, [pc, #24]	; (80012b8 <_ZN9AmplifierC1Ev+0xb0>)
 800129e:	4620      	mov	r0, r4
 80012a0:	f001 ff2e 	bl	8003100 <_ZN11I2C_BitbangC1Emh>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	665c      	str	r4, [r3, #100]	; 0x64
}
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bdb0      	pop	{r4, r5, r7, pc}
 80012b2:	bf00      	nop
 80012b4:	080096d0 	.word	0x080096d0
 80012b8:	02dc6c00 	.word	0x02dc6c00

080012bc <_ZN9AmplifierD1Ev>:

Amplifier::~Amplifier() {
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <_ZN9AmplifierD1Ev+0x88>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80012d0:	4618      	mov	r0, r3
 80012d2:	f007 fb24 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	33c0      	adds	r3, #192	; 0xc0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00d      	beq.n	80012fa <_ZN9AmplifierD1Ev+0x3e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	33c0      	adds	r3, #192	; 0xc0
 80012e2:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	33c0      	adds	r3, #192	; 0xc0
 80012ea:	429c      	cmp	r4, r3
 80012ec:	d005      	beq.n	80012fa <_ZN9AmplifierD1Ev+0x3e>
 80012ee:	3c10      	subs	r4, #16
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4620      	mov	r0, r4
 80012f6:	4798      	blx	r3
 80012f8:	e7f5      	b.n	80012e6 <_ZN9AmplifierD1Ev+0x2a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3380      	adds	r3, #128	; 0x80
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00d      	beq.n	800131e <_ZN9AmplifierD1Ev+0x62>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3380      	adds	r3, #128	; 0x80
 8001306:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3380      	adds	r3, #128	; 0x80
 800130e:	429c      	cmp	r4, r3
 8001310:	d005      	beq.n	800131e <_ZN9AmplifierD1Ev+0x62>
 8001312:	3c10      	subs	r4, #16
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4620      	mov	r0, r4
 800131a:	4798      	blx	r3
 800131c:	e7f5      	b.n	800130a <_ZN9AmplifierD1Ev+0x4e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	334c      	adds	r3, #76	; 0x4c
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f9c4 	bl	80016b0 <_ZN5AudioD1Ev>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3304      	adds	r3, #4
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fe41 	bl	8001fb4 <_ZN7DisplayD1Ev>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fe09 	bl	8001f4c <_ZN13DecoderEventsD1Ev>
	// TODO Auto-generated destructor stub
}
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bd90      	pop	{r4, r7, pc}
 8001344:	080096d0 	.word	0x080096d0

08001348 <_ZN9AmplifierD0Ev>:
Amplifier::~Amplifier() {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
}
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ffb3 	bl	80012bc <_ZN9AmplifierD1Ev>
 8001356:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f007 fa53 	bl	8008806 <_ZdlPvj>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_ZN9Amplifier20onSamplingRateChangeEm>:

void
Amplifier::onSamplingRateChange( uint32_t samplingRate ) {
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
	mDisplay.setSamplingRate( samplingRate );
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3304      	adds	r3, #4
 8001378:	6839      	ldr	r1, [r7, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fe82 	bl	8002084 <_ZN7Display15setSamplingRateEm>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_ZN9Amplifier17onAlgorithmChangeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void
Amplifier::onAlgorithmChange( const std::string &algorithm ) {
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
	mDisplay.setAlgorithm( algorithm );
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	1d1c      	adds	r4, r3, #4
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	6839      	ldr	r1, [r7, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f007 fb01 	bl	80089a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	4619      	mov	r1, r3
 80013a8:	4620      	mov	r0, r4
 80013aa:	f000 fe80 	bl	80020ae <_ZN7Display12setAlgorithmENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	4618      	mov	r0, r3
 80013b4:	f007 fab3 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80013b8:	bf00      	nop
 80013ba:	3724      	adds	r7, #36	; 0x24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd90      	pop	{r4, r7, pc}

080013c0 <_ZN9Amplifier10initializeEv>:

void
Amplifier::initialize() {
 80013c0:	b5b0      	push	{r4, r5, r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	DEBUG_STR( "Initializing amplifier" );
	// Take the I2C bus info and configure our internal I2C bus class
	//mBusI2C.setBusData( bus );
	mDAC = new DAC_PCM1681( mBusI2C->makeDevice( 0x4c << 1 ) );
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013cc:	2198      	movs	r1, #152	; 0x98
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 fe24 	bl	800301c <_ZN3I2C10makeDeviceEh>
 80013d4:	4605      	mov	r5, r0
 80013d6:	2010      	movs	r0, #16
 80013d8:	f007 fa17 	bl	800880a <_Znwj>
 80013dc:	4603      	mov	r3, r0
 80013de:	461c      	mov	r4, r3
 80013e0:	4629      	mov	r1, r5
 80013e2:	4620      	mov	r0, r4
 80013e4:	f000 fc22 	bl	8001c2c <_ZN11DAC_PCM1681C1EP10I2C_Device>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	669c      	str	r4, [r3, #104]	; 0x68
	//mDecoder = new DolbyDecoder_STA310( mBusI2C.makeDevice( 0x60 << 1 ) );
	mDecoder = new DolbyDecoder_STA310( mBusI2C->makeDevice( 0x5c << 1 ) );
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013f0:	21b8      	movs	r1, #184	; 0xb8
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fe12 	bl	800301c <_ZN3I2C10makeDeviceEh>
 80013f8:	4605      	mov	r5, r0
 80013fa:	2018      	movs	r0, #24
 80013fc:	f007 fa05 	bl	800880a <_Znwj>
 8001400:	4603      	mov	r3, r0
 8001402:	461c      	mov	r4, r3
 8001404:	4629      	mov	r1, r5
 8001406:	4620      	mov	r0, r4
 8001408:	f000 ffc4 	bl	8002394 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	66dc      	str	r4, [r3, #108]	; 0x6c

	mDecoder->setEventHandler( this );
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3328      	adds	r3, #40	; 0x28
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4610      	mov	r0, r2
 8001422:	4798      	blx	r3

	// Configure the audio thread
	mAudio.setDecoder( mDecoder );
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800142e:	4619      	mov	r1, r3
 8001430:	4610      	mov	r0, r2
 8001432:	f7ff fecf 	bl	80011d4 <_ZN5Audio10setDecoderEP12DolbyDecoder>
	mAudio.setDAC( mDAC );
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001440:	4619      	mov	r1, r3
 8001442:	4610      	mov	r0, r2
 8001444:	f7ff fed3 	bl	80011ee <_ZN5Audio6setDACEP6DAC_IC>

	mLCD = new LCD( mBusI2C->makeDevice( LCD_I2C_ADDR ) );
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800144c:	214e      	movs	r1, #78	; 0x4e
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fde4 	bl	800301c <_ZN3I2C10makeDeviceEh>
 8001454:	4605      	mov	r5, r0
 8001456:	200c      	movs	r0, #12
 8001458:	f007 f9d7 	bl	800880a <_Znwj>
 800145c:	4603      	mov	r3, r0
 800145e:	461c      	mov	r4, r3
 8001460:	4629      	mov	r1, r5
 8001462:	4620      	mov	r0, r4
 8001464:	f002 f98a 	bl	800377c <_ZN3LCDC1EP10I2C_Device>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	675c      	str	r4, [r3, #116]	; 0x74
	mDisplay.setLCD( mLCD );
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	1d1a      	adds	r2, r3, #4
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001474:	4619      	mov	r1, r3
 8001476:	4610      	mov	r0, r2
 8001478:	f7ff fe70 	bl	800115c <_ZN7Display6setLCDEP3LCD>

	mVolumeEncoder = new Encoder();
 800147c:	2008      	movs	r0, #8
 800147e:	f007 f9c4 	bl	800880a <_Znwj>
 8001482:	4603      	mov	r3, r0
 8001484:	461c      	mov	r4, r3
 8001486:	4620      	mov	r0, r4
 8001488:	f001 fd16 	bl	8002eb8 <_ZN7EncoderC1Ev>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	671c      	str	r4, [r3, #112]	; 0x70

	mInputLEDs[ INPUT_STEREO_1 ].setPortAndPin( LED_INPUT_1_GPIO_Port, LED_INPUT_1_Pin );
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	33c0      	adds	r3, #192	; 0xc0
 8001494:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001498:	4922      	ldr	r1, [pc, #136]	; (8001524 <_ZN9Amplifier10initializeEv+0x164>)
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fe86 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
	mInputLEDs[ INPUT_STEREO_2 ].setPortAndPin( LED_INPUT_2_GPIO_Port, LED_INPUT_2_Pin );
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	33d0      	adds	r3, #208	; 0xd0
 80014a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a8:	491e      	ldr	r1, [pc, #120]	; (8001524 <_ZN9Amplifier10initializeEv+0x164>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fe7e 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
	mInputLEDs[ INPUT_STEREO_3 ].setPortAndPin( LED_INPUT_3_GPIO_Port, LED_INPUT_3_Pin );
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	33e0      	adds	r3, #224	; 0xe0
 80014b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014b8:	491a      	ldr	r1, [pc, #104]	; (8001524 <_ZN9Amplifier10initializeEv+0x164>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fe76 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
	mInputLEDs[ INPUT_STEREO_4 ].setPortAndPin( LED_INPUT_4_GPIO_Port, LED_INPUT_4_Pin );
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	33f0      	adds	r3, #240	; 0xf0
 80014c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c8:	4916      	ldr	r1, [pc, #88]	; (8001524 <_ZN9Amplifier10initializeEv+0x164>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fe6e 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
	mInputLEDs[ INPUT_6CH ].setPortAndPin( LED_INPUT_6CH_GPIO_Port, LED_INPUT_6CH_Pin );
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80014d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014da:	4913      	ldr	r1, [pc, #76]	; (8001528 <_ZN9Amplifier10initializeEv+0x168>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fe65 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>

	mStatusLEDs[ STATUS_DOLBY ].setPortAndPin( LED_DOLBY_GPIO_Port, LED_DOLBY_Pin );
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	33a0      	adds	r3, #160	; 0xa0
 80014e6:	2202      	movs	r2, #2
 80014e8:	4910      	ldr	r1, [pc, #64]	; (800152c <_ZN9Amplifier10initializeEv+0x16c>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fe5e 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
	mStatusLEDs[ STATUS_PCM ].setPortAndPin( LED_PCM_GPIO_Port, LED_PCM_Pin );
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3390      	adds	r3, #144	; 0x90
 80014f4:	2201      	movs	r2, #1
 80014f6:	490d      	ldr	r1, [pc, #52]	; (800152c <_ZN9Amplifier10initializeEv+0x16c>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fe57 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
	mStatusLEDs[ STATUS_MUTE ].setPortAndPin( LED_MUTE_GPIO_Port, LED_MUTE_Pin );
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3380      	adds	r3, #128	; 0x80
 8001502:	2208      	movs	r2, #8
 8001504:	490a      	ldr	r1, [pc, #40]	; (8001530 <_ZN9Amplifier10initializeEv+0x170>)
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fe50 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
	mStatusLEDs[ STATUS_RUN ].setPortAndPin( LED_RUN_GPIO_Port, LED_RUN_Pin );
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	33b0      	adds	r3, #176	; 0xb0
 8001510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001514:	4904      	ldr	r1, [pc, #16]	; (8001528 <_ZN9Amplifier10initializeEv+0x168>)
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fe48 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bdb0      	pop	{r4, r5, r7, pc}
 8001524:	40011800 	.word	0x40011800
 8001528:	40010c00 	.word	0x40010c00
 800152c:	40010800 	.word	0x40010800
 8001530:	40011000 	.word	0x40011000

08001534 <_ZN9Amplifier13onInformationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void
Amplifier::onInformation( const std::string &info ) {
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	mDisplay.setInitString( info );
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	1d1c      	adds	r4, r3, #4
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	6839      	ldr	r1, [r7, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f007 fa2b 	bl	80089a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	4619      	mov	r1, r3
 8001554:	4620      	mov	r0, r4
 8001556:	f000 fd83 	bl	8002060 <_ZN7Display13setInitStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4618      	mov	r0, r3
 8001560:	f007 f9dd 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
//	mDisplay.update();
}
 8001564:	bf00      	nop
 8001566:	3724      	adds	r7, #36	; 0x24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd90      	pop	{r4, r7, pc}

0800156c <_ZN9Amplifier7preTickEv>:

void
Amplifier::preTick() {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

	mLCD->initialize();
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3308      	adds	r3, #8
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4610      	mov	r0, r2
 8001584:	4798      	blx	r3

	mStatusLEDs[ STATUS_RUN ].enable();
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001592:	3308      	adds	r3, #8
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4610      	mov	r0, r2
 8001598:	4798      	blx	r3

//	mDisplay.setInitString( "LCD Initializing" );

	mDisplay.setScreen( Display::SCREEN_MAIN );
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3304      	adds	r3, #4
 800159e:	2101      	movs	r1, #1
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fd4d 	bl	8002040 <_ZN7Display9setScreenEi>
	mDisplay.updateVolume( mCurrentVolume );
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	1d1a      	adds	r2, r3, #4
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80015ae:	4619      	mov	r1, r3
 80015b0:	4610      	mov	r0, r2
 80015b2:	f000 fd9c 	bl	80020ee <_ZN7Display12updateVolumeEi>
	mDisplay.update();
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3304      	adds	r3, #4
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fd22 	bl	8002004 <_ZN7Display6updateEv>

	mAudio.setVolume( mCurrentVolume );
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80015ca:	4619      	mov	r1, r3
 80015cc:	4610      	mov	r0, r2
 80015ce:	f000 f9e7 	bl	80019a0 <_ZN5Audio9setVolumeEi>

//	mDisplay.setInitString( "LCD Done Init" );
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <_ZN9Amplifier4tickEv>:

void Amplifier::tick() {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
		uint32_t currentCount = (uint32_t)TIM4->CNT;
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <_ZN9Amplifier4tickEv+0x90>)
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	60fb      	str	r3, [r7, #12]
		ENCODER_VALUE encoderChange = mVolumeEncoder->checkEncoder( currentCount );
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3308      	adds	r3, #8
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68f9      	ldr	r1, [r7, #12]
 80015fa:	4610      	mov	r0, r2
 80015fc:	4798      	blx	r3
 80015fe:	60b8      	str	r0, [r7, #8]
		if ( encoderChange == Encoder::ENCODER_INCREASE ) {
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <_ZN9Amplifier4tickEv+0x3e>
			if ( mCurrentVolume < 100) mCurrentVolume++;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800160a:	2b63      	cmp	r3, #99	; 0x63
 800160c:	dc11      	bgt.n	8001632 <_ZN9Amplifier4tickEv+0x56>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	67da      	str	r2, [r3, #124]	; 0x7c
 8001618:	e00b      	b.n	8001632 <_ZN9Amplifier4tickEv+0x56>
		} else if ( encoderChange == Encoder::ENCODER_DECREASE ) {
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d108      	bne.n	8001632 <_ZN9Amplifier4tickEv+0x56>
			if ( mCurrentVolume > 0 ) mCurrentVolume--;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001624:	2b00      	cmp	r3, #0
 8001626:	dd04      	ble.n	8001632 <_ZN9Amplifier4tickEv+0x56>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800162c:	1e5a      	subs	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	67da      	str	r2, [r3, #124]	; 0x7c
		}

		if ( encoderChange != Encoder::ENCODER_NOCHANGE ) {
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d010      	beq.n	800165a <_ZN9Amplifier4tickEv+0x7e>
			mDisplay.updateVolume( mCurrentVolume );
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	1d1a      	adds	r2, r3, #4
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001640:	4619      	mov	r1, r3
 8001642:	4610      	mov	r0, r2
 8001644:	f000 fd53 	bl	80020ee <_ZN7Display12updateVolumeEi>
			mAudio.setVolume( mCurrentVolume );
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001652:	4619      	mov	r1, r3
 8001654:	4610      	mov	r0, r2
 8001656:	f000 f9a3 	bl	80019a0 <_ZN5Audio9setVolumeEi>
		}

		mDisplay.update();
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3304      	adds	r3, #4
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fcd0 	bl	8002004 <_ZN7Display6updateEv>
}
 8001664:	bf00      	nop
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40000800 	.word	0x40000800

08001670 <_ZN5AudioC1EP9Amplifier>:
#include "Audio.h"
#include "main.h"
#include "cmsis_os.h"
#include "Debug.h"

Audio::Audio( Amplifier *amp ) : Runnable( amp ), mDecoder( 0 ), mDAC( 0 ), mHasBeenInitialized( false ), mTick( 0 ) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6839      	ldr	r1, [r7, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f002 f96e 	bl	8003960 <_ZN8RunnableC1EP9Amplifier>
 8001684:	4a09      	ldr	r2, [pc, #36]	; (80016ac <_ZN5AudioC1EP9Amplifier+0x3c>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	741a      	strb	r2, [r3, #16]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
	// TODO Auto-generated constructor stub

}
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	080096f8 	.word	0x080096f8

080016b0 <_ZN5AudioD1Ev>:

Audio::~Audio() {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <_ZN5AudioD1Ev+0x20>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f002 f961 	bl	8003988 <_ZN8RunnableD1Ev>
	// TODO Auto-generated destructor stub
}
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	080096f8 	.word	0x080096f8

080016d4 <_ZN5AudioD0Ev>:
Audio::~Audio() {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
}
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ffe7 	bl	80016b0 <_ZN5AudioD1Ev>
 80016e2:	2118      	movs	r1, #24
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f007 f88e 	bl	8008806 <_ZdlPvj>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <_ZN5Audio7preTickEv>:

void
Audio::preTick() {
 80016f4:	b5b0      	push	{r4, r5, r7, lr}
 80016f6:	b0ac      	sub	sp, #176	; 0xb0
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	//if ( mEventHandler ) mEventHandler->onInformation( "Starting audio setup" );
	if ( !mHasBeenInitialized ) {
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7c1b      	ldrb	r3, [r3, #16]
 8001700:	f083 0301 	eor.w	r3, r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 813a 	beq.w	8001980 <_ZN5Audio7preTickEv+0x28c>
		// Let's run the audio init.. we'll put this in the for loop in case for some reason we need to initialize again
		if ( mDAC && mDecoder ) {
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 8135 	beq.w	8001980 <_ZN5Audio7preTickEv+0x28c>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8130 	beq.w	8001980 <_ZN5Audio7preTickEv+0x28c>
			// We have a valid DAC and a valid decoder.. for now both are required

			 DEBUG_STR( "In main loop" );
			//if ( mEventHandler ) mEventHandler->onInformation( "Setting up Dolby Decoder" );
			// Initialize the Dolby Decoder
			mDecoder->setInformation( "Init Decoder" );
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689d      	ldr	r5, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3324      	adds	r3, #36	; 0x24
 800172c:	681c      	ldr	r4, [r3, #0]
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	4618      	mov	r0, r3
 8001734:	f007 f87d 	bl	8008832 <_ZNSaIcEC1Ev>
 8001738:	f107 0220 	add.w	r2, r7, #32
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	4991      	ldr	r1, [pc, #580]	; (8001988 <_ZN5Audio7preTickEv+0x294>)
 8001742:	4618      	mov	r0, r3
 8001744:	f007 f960 	bl	8008a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	4619      	mov	r1, r3
 800174e:	4628      	mov	r0, r5
 8001750:	47a0      	blx	r4
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	4618      	mov	r0, r3
 8001758:	f007 f8e1 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800175c:	f107 0320 	add.w	r3, r7, #32
 8001760:	4618      	mov	r0, r3
 8001762:	f007 f867 	bl	8008834 <_ZNSaIcED1Ev>
			mDecoder->initialize();
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3308      	adds	r3, #8
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4610      	mov	r0, r2
 8001776:	4798      	blx	r3

			osDelay( 250 );
 8001778:	20fa      	movs	r0, #250	; 0xfa
 800177a:	f004 fc45 	bl	8006008 <osDelay>

			mDecoder->setInformation( "Init DAC" );
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689d      	ldr	r5, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3324      	adds	r3, #36	; 0x24
 800178a:	681c      	ldr	r4, [r3, #0]
 800178c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001790:	4618      	mov	r0, r3
 8001792:	f007 f84e 	bl	8008832 <_ZNSaIcEC1Ev>
 8001796:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800179a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179e:	497b      	ldr	r1, [pc, #492]	; (800198c <_ZN5Audio7preTickEv+0x298>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f007 f931 	bl	8008a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	4619      	mov	r1, r3
 80017ac:	4628      	mov	r0, r5
 80017ae:	47a0      	blx	r4
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4618      	mov	r0, r3
 80017b6:	f007 f8b2 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017be:	4618      	mov	r0, r3
 80017c0:	f007 f838 	bl	8008834 <_ZNSaIcED1Ev>
			 DEBUG_STR( "Initializing DAC" );
			mDAC->init();
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	330c      	adds	r3, #12
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4610      	mov	r0, r2
 80017d4:	4798      	blx	r3

			if ( mDecoder->isInitialized() ) {
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	330c      	adds	r3, #12
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4610      	mov	r0, r2
 80017e6:	4798      	blx	r3
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 80c8 	beq.w	8001980 <_ZN5Audio7preTickEv+0x28c>
				// Let's mute the output on the decoder
				//mDecoder->mute( true );

				// Decoder should be sending a clock signal to the DAC chip, so it should be responsive
				// The datasheet says the DAC needs about 5ms to be responsive, so let's wait 10
				mDecoder->setInformation( "ready run" );
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689d      	ldr	r5, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3324      	adds	r3, #36	; 0x24
 80017fc:	681c      	ldr	r4, [r3, #0]
 80017fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001802:	4618      	mov	r0, r3
 8001804:	f007 f815 	bl	8008832 <_ZNSaIcEC1Ev>
 8001808:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800180c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001810:	495f      	ldr	r1, [pc, #380]	; (8001990 <_ZN5Audio7preTickEv+0x29c>)
 8001812:	4618      	mov	r0, r3
 8001814:	f007 f8f8 	bl	8008a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001818:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800181c:	4619      	mov	r1, r3
 800181e:	4628      	mov	r0, r5
 8001820:	47a0      	blx	r4
 8001822:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001826:	4618      	mov	r0, r3
 8001828:	f007 f879 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800182c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001830:	4618      	mov	r0, r3
 8001832:	f006 ffff 	bl	8008834 <_ZNSaIcED1Ev>
				osDelay( 10 );
 8001836:	200a      	movs	r0, #10
 8001838:	f004 fbe6 	bl	8006008 <osDelay>

				// Now let's pull the Decoder out of the IDLE state

				 DEBUG_STR( "...disabling mute" );

				mDecoder->mute( false );
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3310      	adds	r3, #16
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2100      	movs	r1, #0
 800184c:	4610      	mov	r0, r2
 800184e:	4798      	blx	r3
				mDecoder->play();
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3314      	adds	r3, #20
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2101      	movs	r1, #1
 8001860:	4610      	mov	r0, r2
 8001862:	4798      	blx	r3
				mDecoder->run();
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3318      	adds	r3, #24
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4610      	mov	r0, r2
 8001874:	4798      	blx	r3

				osDelay( 50 );
 8001876:	2032      	movs	r0, #50	; 0x32
 8001878:	f004 fbc6 	bl	8006008 <osDelay>



				mDecoder->setInformation( "Running" );
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689d      	ldr	r5, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3324      	adds	r3, #36	; 0x24
 8001888:	681c      	ldr	r4, [r3, #0]
 800188a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800188e:	4618      	mov	r0, r3
 8001890:	f006 ffcf 	bl	8008832 <_ZNSaIcEC1Ev>
 8001894:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001898:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800189c:	493d      	ldr	r1, [pc, #244]	; (8001994 <_ZN5Audio7preTickEv+0x2a0>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f007 f8b2 	bl	8008a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80018a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018a8:	4619      	mov	r1, r3
 80018aa:	4628      	mov	r0, r5
 80018ac:	47a0      	blx	r4
 80018ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018b2:	4618      	mov	r0, r3
 80018b4:	f007 f833 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80018b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018bc:	4618      	mov	r0, r3
 80018be:	f006 ffb9 	bl	8008834 <_ZNSaIcED1Ev>

				 DEBUG_STR( "...setting run" );


				osDelay( 50 );
 80018c2:	2032      	movs	r0, #50	; 0x32
 80018c4:	f004 fba0 	bl	8006008 <osDelay>

				mHasBeenInitialized = true;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	741a      	strb	r2, [r3, #16]

				mDecoder->setInformation( "Setting Volume" );
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689d      	ldr	r5, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	3324      	adds	r3, #36	; 0x24
 80018da:	681c      	ldr	r4, [r3, #0]
 80018dc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018e0:	4618      	mov	r0, r3
 80018e2:	f006 ffa6 	bl	8008832 <_ZNSaIcEC1Ev>
 80018e6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80018ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018ee:	492a      	ldr	r1, [pc, #168]	; (8001998 <_ZN5Audio7preTickEv+0x2a4>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f007 f889 	bl	8008a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80018f6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018fa:	4619      	mov	r1, r3
 80018fc:	4628      	mov	r0, r5
 80018fe:	47a0      	blx	r4
 8001900:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001904:	4618      	mov	r0, r3
 8001906:	f007 f80a 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800190a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800190e:	4618      	mov	r0, r3
 8001910:	f006 ff90 	bl	8008834 <_ZNSaIcED1Ev>

				//mDAC->setVolume( 127 );

				 DEBUG_STR( "Playing" );

				mDecoder->setInformation( "Playing" );
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689d      	ldr	r5, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3324      	adds	r3, #36	; 0x24
 8001920:	681c      	ldr	r4, [r3, #0]
 8001922:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001926:	4618      	mov	r0, r3
 8001928:	f006 ff83 	bl	8008832 <_ZNSaIcEC1Ev>
 800192c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001930:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001934:	4919      	ldr	r1, [pc, #100]	; (800199c <_ZN5Audio7preTickEv+0x2a8>)
 8001936:	4618      	mov	r0, r3
 8001938:	f007 f866 	bl	8008a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800193c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001940:	4619      	mov	r1, r3
 8001942:	4628      	mov	r0, r5
 8001944:	47a0      	blx	r4
 8001946:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800194a:	4618      	mov	r0, r3
 800194c:	f006 ffe7 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001950:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001954:	4618      	mov	r0, r3
 8001956:	f006 ff6d 	bl	8008834 <_ZNSaIcED1Ev>

				mDAC->enable( true );
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3314      	adds	r3, #20
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2101      	movs	r1, #1
 800196a:	4610      	mov	r0, r2
 800196c:	4798      	blx	r3

				mDecoder->reset();
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	332c      	adds	r3, #44	; 0x2c
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4610      	mov	r0, r2
 800197e:	4798      	blx	r3
			}
		}
	}
}
 8001980:	bf00      	nop
 8001982:	37b0      	adds	r7, #176	; 0xb0
 8001984:	46bd      	mov	sp, r7
 8001986:	bdb0      	pop	{r4, r5, r7, pc}
 8001988:	080095b4 	.word	0x080095b4
 800198c:	080095c4 	.word	0x080095c4
 8001990:	080095d0 	.word	0x080095d0
 8001994:	080095dc 	.word	0x080095dc
 8001998:	080095e4 	.word	0x080095e4
 800199c:	080095f4 	.word	0x080095f4

080019a0 <_ZN5Audio9setVolumeEi>:

void
Audio::setVolume( int volume ) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
	int ourVol = (127*volume)/100;
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	4613      	mov	r3, r2
 80019ae:	01db      	lsls	r3, r3, #7
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <_ZN5Audio9setVolumeEi+0x48>)
 80019b4:	fb82 1203 	smull	r1, r2, r2, r3
 80019b8:	1152      	asrs	r2, r2, #5
 80019ba:	17db      	asrs	r3, r3, #31
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	60fb      	str	r3, [r7, #12]
	if ( ourVol > 127 ) ourVol = 127;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b7f      	cmp	r3, #127	; 0x7f
 80019c4:	dd01      	ble.n	80019ca <_ZN5Audio9setVolumeEi+0x2a>
 80019c6:	237f      	movs	r3, #127	; 0x7f
 80019c8:	60fb      	str	r3, [r7, #12]
	mDAC->setVolume( volume );
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	332c      	adds	r3, #44	; 0x2c
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6839      	ldr	r1, [r7, #0]
 80019da:	4610      	mov	r0, r2
 80019dc:	4798      	blx	r3
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	51eb851f 	.word	0x51eb851f

080019ec <_ZN5Audio4tickEv>:

void
Audio::tick() {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	// We need to start setting up the audio interfaces
	// First we'll configure the Dolby Decoder
		if ( mDecoder && mHasBeenInitialized ) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d022      	beq.n	8001a42 <_ZN5Audio4tickEv+0x56>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7c1b      	ldrb	r3, [r3, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d01e      	beq.n	8001a42 <_ZN5Audio4tickEv+0x56>
			mDecoder->checkForInterrupt();
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	331c      	adds	r3, #28
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4610      	mov	r0, r2
 8001a14:	4798      	blx	r3

			if ( mTick % 5000 == 0 ) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <_ZN5Audio4tickEv+0x68>)
 8001a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a20:	0b1b      	lsrs	r3, r3, #12
 8001a22:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d108      	bne.n	8001a42 <_ZN5Audio4tickEv+0x56>
				mDecoder->checkFormat();
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	3320      	adds	r3, #32
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4798      	blx	r3
			}
		}

		mTick = mTick + 1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	615a      	str	r2, [r3, #20]
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	d1b71759 	.word	0xd1b71759

08001a58 <_ZN5Audio5startEv>:

void
Audio::start() {
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
//	mHasBeenInitialized = true;
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <_ZN6DAC_IC9isEnabledEv>:

	// the name for this DAC
	virtual std::string name() = 0;
	virtual void init() = 0;

	virtual bool isEnabled() { return true; }
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	2301      	movs	r3, #1
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <_ZN6DAC_IC6enableEb>:
	virtual void enable( bool state ) {};
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	460b      	mov	r3, r1
 8001a88:	70fb      	strb	r3, [r7, #3]
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <_ZN6DAC_IC14supportsFormatEh>:
	virtual bool supportsFormat( uint8_t format ) { return false; }
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	70fb      	strb	r3, [r7, #3]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <_ZN6DAC_IC14supportsVolumeEv>:
	virtual bool supportsVolume() { return false; }
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <_ZN6DAC_IC12supportsMuteEv>:
	virtual bool supportsMute() { return false; }
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <_ZN6DAC_IC8channelsEv>:
	virtual int channels() { return 0; }
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	2300      	movs	r3, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <_ZN6DAC_IC16setChannelVolumeEii>:

	// volume is 0 to 63, where 0 is lowest and 63 is highest
	virtual void setChannelVolume( int channel, int volume ) {}
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <_ZN6DAC_IC9setVolumeEi>:

	// sets the volume on all channels
	virtual void setVolume( int volume ) {};
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <_ZN6DAC_IC11muteChannelEib>:

	virtual void muteChannel( int channel, bool enable ) {}
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <_ZN6DAC_IC4muteEb>:
	virtual void mute( bool enable ) {}
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	70fb      	strb	r3, [r7, #3]
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <_ZN6DAC_IC9setFormatEh>:

	virtual void setFormat( uint8_t format ) {};
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
	...

08001b58 <_ZN6DAC_ICC1Ev>:
 *      Author: duane
 */

#include "DAC.h"

DAC_IC::DAC_IC() {
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <_ZN6DAC_ICC1Ev+0x1c>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	08009720 	.word	0x08009720

08001b78 <_ZN6DAC_ICD1Ev>:

DAC_IC::~DAC_IC() {
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <_ZN6DAC_ICD1Ev+0x1c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	08009720 	.word	0x08009720

08001b98 <_ZN11DAC_PCM16819isEnabledEv>:
	DAC_PCM1681( I2C_Device *device );
	virtual ~DAC_PCM1681();

	virtual void init();

	virtual bool isEnabled() { return mEnabled; }
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7b5b      	ldrb	r3, [r3, #13]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf14      	ite	ne
 8001ba8:	2301      	movne	r3, #1
 8001baa:	2300      	moveq	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <_ZN11DAC_PCM168114supportsVolumeEv>:
	virtual void enable( bool state );

	virtual bool supportsFormat( uint8_t format );
	virtual bool supportsVolume() { return true; }
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <_ZN11DAC_PCM168112supportsMuteEv>:
	virtual bool supportsMute() { return true; }
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <_ZN11DAC_PCM16818channelsEv>:
	virtual int channels() { return 8; }
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	2308      	movs	r3, #8
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <_ZN11DAC_PCM16814nameB5cxx11Ev>:

	virtual std::string name() { return "PCM1681"; }
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4618      	mov	r0, r3
 8001c04:	f006 fe15 	bl	8008832 <_ZNSaIcEC1Ev>
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4906      	ldr	r1, [pc, #24]	; (8001c28 <_ZN11DAC_PCM16814nameB5cxx11Ev+0x34>)
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f006 fef9 	bl	8008a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f006 fe0a 	bl	8008834 <_ZNSaIcED1Ev>
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	080095fc 	.word	0x080095fc

08001c2c <_ZN11DAC_PCM1681C1EP10I2C_Device>:
#define PCM1681_REG_ENABLE	8
#define PCM1681_REG_FORMAT	9
#define PCM1681_REG_OVER	12
#define PCM1681_REG_DAMS	13

DAC_PCM1681::DAC_PCM1681( I2C_Device *device ) : mDevice( device ), mEnabled( true ) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff8d 	bl	8001b58 <_ZN6DAC_ICC1Ev>
 8001c3e:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <_ZN11DAC_PCM1681C1EP10I2C_Device+0x34>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	735a      	strb	r2, [r3, #13]
	// TODO Auto-generated constructor stub
	mMuteStatus = 0;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	731a      	strb	r2, [r3, #12]
}
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	08009764 	.word	0x08009764

08001c64 <_ZN11DAC_PCM1681D1Ev>:

DAC_PCM1681::~DAC_PCM1681() {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <_ZN11DAC_PCM1681D1Ev+0x20>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff7f 	bl	8001b78 <_ZN6DAC_ICD1Ev>
	// TODO Auto-generated destructor stub
}
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	08009764 	.word	0x08009764

08001c88 <_ZN11DAC_PCM1681D0Ev>:
DAC_PCM1681::~DAC_PCM1681() {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
}
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ffe7 	bl	8001c64 <_ZN11DAC_PCM1681D1Ev>
 8001c96:	2110      	movs	r1, #16
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f006 fdb4 	bl	8008806 <_ZdlPvj>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_ZN11DAC_PCM16816enableEb>:

void
DAC_PCM1681::enable( bool state ) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
	if ( state ) {
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00a      	beq.n	8001cd0 <_ZN11DAC_PCM16816enableEb+0x28>
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0 );
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6898      	ldr	r0, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3310      	adds	r3, #16
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2108      	movs	r1, #8
 8001ccc:	4798      	blx	r3
 8001cce:	e009      	b.n	8001ce4 <_ZN11DAC_PCM16816enableEb+0x3c>
	} else {
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0xff );
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6898      	ldr	r0, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3310      	adds	r3, #16
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	22ff      	movs	r2, #255	; 0xff
 8001ce0:	2108      	movs	r1, #8
 8001ce2:	4798      	blx	r3
	}

	mEnabled = state;
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	735a      	strb	r2, [r3, #13]
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_ZN11DAC_PCM168114supportsFormatEh>:

bool
DAC_PCM1681::supportsFormat( uint8_t format ) {
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
	return ( format == DAC_IC::FORMAT_SONY || format == DAC_IC::FORMAT_I2S );
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <_ZN11DAC_PCM168114supportsFormatEh+0x18>
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <_ZN11DAC_PCM168114supportsFormatEh+0x1c>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <_ZN11DAC_PCM168114supportsFormatEh+0x1e>
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <_ZN11DAC_PCM16819setFormatEh>:

void
DAC_PCM1681::setFormat( uint8_t format ) {
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	70fb      	strb	r3, [r7, #3]
	 DEBUG_STR( "Setting format" );
	uint8_t value = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]
	if ( format == FORMAT_SONY ) {
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_ZN11DAC_PCM16819setFormatEh+0x1c>
		value = 5;
 8001d30:	2305      	movs	r3, #5
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	e004      	b.n	8001d40 <_ZN11DAC_PCM16819setFormatEh+0x26>
	} else if ( format == FORMAT_I2S ) {
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <_ZN11DAC_PCM16819setFormatEh+0x26>
		value = 4;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	73fb      	strb	r3, [r7, #15]
	}

	mDevice->writeRegister( PCM1681_REG_FORMAT, value );
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6898      	ldr	r0, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3310      	adds	r3, #16
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	2109      	movs	r1, #9
 8001d52:	4798      	blx	r3
	mDevice->writeRegister( PCM1681_REG_OVER, 1 );
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6898      	ldr	r0, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3310      	adds	r3, #16
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	210c      	movs	r1, #12
 8001d66:	4798      	blx	r3
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_ZN11DAC_PCM16814initEv>:

void
DAC_PCM1681::init() {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	// do setup
	setFormat( FORMAT_I2S );
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3338      	adds	r3, #56	; 0x38
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	4798      	blx	r3

}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <_ZN11DAC_PCM168116setChannelVolumeEii>:

void
DAC_PCM1681::setChannelVolume( int channel, int volume ) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
	uint8_t reg = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	75fb      	strb	r3, [r7, #23]
	switch( channel ) {
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	d820      	bhi.n	8001de8 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
 8001da6:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <_ZN11DAC_PCM168116setChannelVolumeEii+0x1c>)
 8001da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dac:	08001dc5 	.word	0x08001dc5
 8001db0:	08001dcb 	.word	0x08001dcb
 8001db4:	08001dd1 	.word	0x08001dd1
 8001db8:	08001dd7 	.word	0x08001dd7
 8001dbc:	08001ddd 	.word	0x08001ddd
 8001dc0:	08001de3 	.word	0x08001de3
		case FRONT_LEFT:
			reg = 1;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	75fb      	strb	r3, [r7, #23]
			break;
 8001dc8:	e00e      	b.n	8001de8 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case FRONT_RIGHT:
			reg = 2;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	75fb      	strb	r3, [r7, #23]
			break;
 8001dce:	e00b      	b.n	8001de8 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_LEFT:
			reg = 3;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	75fb      	strb	r3, [r7, #23]
			break;
 8001dd4:	e008      	b.n	8001de8 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_RIGHT:
			reg = 4;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	75fb      	strb	r3, [r7, #23]
			break;
 8001dda:	e005      	b.n	8001de8 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case CENTER:
			reg = 5;
 8001ddc:	2305      	movs	r3, #5
 8001dde:	75fb      	strb	r3, [r7, #23]
			break;
 8001de0:	e002      	b.n	8001de8 <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case SUBWOOFER:
			reg = 6;
 8001de2:	2306      	movs	r3, #6
 8001de4:	75fb      	strb	r3, [r7, #23]
			break;
 8001de6:	bf00      	nop
	}

	// Clamp the volume to the upper limit
	if ( volume > 127 ) {
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b7f      	cmp	r3, #127	; 0x7f
 8001dec:	dd01      	ble.n	8001df2 <_ZN11DAC_PCM168116setChannelVolumeEii+0x62>
		volume = 127;
 8001dee:	237f      	movs	r3, #127	; 0x7f
 8001df0:	607b      	str	r3, [r7, #4]
	}

	uint8_t volumeLevel = volume + 128;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	3b80      	subs	r3, #128	; 0x80
 8001df8:	75bb      	strb	r3, [r7, #22]
	mDevice->writeRegister( reg, volumeLevel );
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6898      	ldr	r0, [r3, #8]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3310      	adds	r3, #16
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	7dba      	ldrb	r2, [r7, #22]
 8001e0a:	7df9      	ldrb	r1, [r7, #23]
 8001e0c:	4798      	blx	r3
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop

08001e18 <_ZN11DAC_PCM16819setVolumeEi>:

void
DAC_PCM1681::setVolume( int volume ) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
	setChannelVolume( FRONT_LEFT, volume );
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3328      	adds	r3, #40	; 0x28
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	4798      	blx	r3
	setChannelVolume( FRONT_RIGHT, volume );
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3328      	adds	r3, #40	; 0x28
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	4798      	blx	r3
	setChannelVolume( REAR_LEFT, volume );
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	3328      	adds	r3, #40	; 0x28
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	4798      	blx	r3
	setChannelVolume( REAR_RIGHT, volume );
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3328      	adds	r3, #40	; 0x28
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	2103      	movs	r1, #3
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
	setChannelVolume( CENTER, volume );
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3328      	adds	r3, #40	; 0x28
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	4798      	blx	r3
	setChannelVolume( SUBWOOFER, volume );
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3328      	adds	r3, #40	; 0x28
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	2105      	movs	r1, #5
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_ZN11DAC_PCM168111muteChannelEib>:

void
DAC_PCM1681::muteChannel( int channel, bool enable ) {
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	4613      	mov	r3, r2
 8001e96:	71fb      	strb	r3, [r7, #7]
	uint8_t mask =  ( 1 << ( channel ) );
 8001e98:	2201      	movs	r2, #1
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	75fb      	strb	r3, [r7, #23]
	if ( enable ) {
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <_ZN11DAC_PCM168111muteChannelEib+0x2e>
		// enable the bit representing this channel
		mMuteStatus = mMuteStatus & mask;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	7b1a      	ldrb	r2, [r3, #12]
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	731a      	strb	r2, [r3, #12]
 8001eb6:	e00b      	b.n	8001ed0 <_ZN11DAC_PCM168111muteChannelEib+0x46>
	} else {
		// disable the bit representing the channel
		mMuteStatus = mMuteStatus & ~mask;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	7b1b      	ldrb	r3, [r3, #12]
 8001ebc:	b25a      	sxtb	r2, r3
 8001ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	b25b      	sxtb	r3, r3
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	b25b      	sxtb	r3, r3
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	731a      	strb	r2, [r3, #12]
	}

	mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6898      	ldr	r0, [r3, #8]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3310      	adds	r3, #16
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	7b12      	ldrb	r2, [r2, #12]
 8001ee2:	2107      	movs	r1, #7
 8001ee4:	4798      	blx	r3
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_ZN11DAC_PCM16814muteEb>:

void
DAC_PCM1681::mute( bool enable ) {
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	70fb      	strb	r3, [r7, #3]
	 if ( enable ) {
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <_ZN11DAC_PCM16814muteEb+0x1a>
		 mMuteStatus = 0xff;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	22ff      	movs	r2, #255	; 0xff
 8001f04:	731a      	strb	r2, [r3, #12]
 8001f06:	e002      	b.n	8001f0e <_ZN11DAC_PCM16814muteEb+0x20>
	 } else {
		 mMuteStatus = 0;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	731a      	strb	r2, [r3, #12]
	 }

	mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6898      	ldr	r0, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	3310      	adds	r3, #16
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	7b12      	ldrb	r2, [r2, #12]
 8001f20:	2107      	movs	r1, #7
 8001f22:	4798      	blx	r3
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_ZN13DecoderEventsC1Ev>:
 *      Author: duane
 */

#include "DecoderEvents.h"

DecoderEvents::DecoderEvents() {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <_ZN13DecoderEventsC1Ev+0x1c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	080097a8 	.word	0x080097a8

08001f4c <_ZN13DecoderEventsD1Ev>:

DecoderEvents::~DecoderEvents() {
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <_ZN13DecoderEventsD1Ev+0x1c>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	080097a8 	.word	0x080097a8

08001f6c <_ZN7DisplayC1Ev>:
#include "Display.h"
#include "main.h"
#include <stdio.h>
#include "Debug.h"

Display::Display() : mShouldUpdate( true ), mCurrentScreen( INIT_SCREEN ), mCurrentVolume( 50 ), mLCD( 0 ) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <_ZN7DisplayC1Ev+0x44>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	711a      	strb	r2, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2232      	movs	r2, #50	; 0x32
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3318      	adds	r3, #24
 8001f96:	4618      	mov	r0, r3
 8001f98:	f006 fcba 	bl	8008910 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3330      	adds	r3, #48	; 0x30
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f006 fcb5 	bl	8008910 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub

}
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	080097c4 	.word	0x080097c4

08001fb4 <_ZN7DisplayD1Ev>:

Display::~Display() {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	4a08      	ldr	r2, [pc, #32]	; (8001fe0 <_ZN7DisplayD1Ev+0x2c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3330      	adds	r3, #48	; 0x30
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f006 fca9 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3318      	adds	r3, #24
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f006 fca4 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	// TODO Auto-generated destructor stub
}
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	080097c4 	.word	0x080097c4

08001fe4 <_ZN7DisplayD0Ev>:
Display::~Display() {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
}
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ffe1 	bl	8001fb4 <_ZN7DisplayD1Ev>
 8001ff2:	2148      	movs	r1, #72	; 0x48
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f006 fc06 	bl	8008806 <_ZdlPvj>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_ZN7Display6updateEv>:

void
Display::update() {
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	if ( mShouldUpdate ) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	791b      	ldrb	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d011      	beq.n	8002038 <_ZN7Display6updateEv+0x34>
		switch( mCurrentScreen ) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <_ZN7Display6updateEv+0x1e>
 800201c:	2b01      	cmp	r3, #1
 800201e:	d004      	beq.n	800202a <_ZN7Display6updateEv+0x26>
 8002020:	e007      	b.n	8002032 <_ZN7Display6updateEv+0x2e>
			case INIT_SCREEN:
				updateInitScreen();
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f878 	bl	8002118 <_ZN7Display16updateInitScreenEv>
			break;
 8002028:	e003      	b.n	8002032 <_ZN7Display6updateEv+0x2e>
			case SCREEN_MAIN:
				updateMainScreen();
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f8b2 	bl	8002194 <_ZN7Display16updateMainScreenEv>
				break;
 8002030:	bf00      	nop
		}

		mShouldUpdate = false;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	711a      	strb	r2, [r3, #4]
	}

}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <_ZN7Display9setScreenEi>:

void
Display::setScreen( int screen ) {
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
	mCurrentScreen = screen;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	609a      	str	r2, [r3, #8]
	//mLCD->clearDisplay();
	mShouldUpdate = true;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	711a      	strb	r2, [r3, #4]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <_ZN7Display13setInitStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void
Display::setInitString( const std::string initString ) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
	mInitString = initString;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3330      	adds	r3, #48	; 0x30
 800206e:	6839      	ldr	r1, [r7, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f006 fc5a 	bl	800892a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	mShouldUpdate = true;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	711a      	strb	r2, [r3, #4]
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <_ZN7Display15setSamplingRateEm>:


void
Display::setSamplingRate( uint32_t samplingRate ) {
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
	// This will happen on another thread, the audio one, so in and out quickly
	if ( samplingRate != mSamplingRate ) {
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d005      	beq.n	80020a4 <_ZN7Display15setSamplingRateEm+0x20>
		mSamplingRate = samplingRate;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	615a      	str	r2, [r3, #20]
		mShouldUpdate = true;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	711a      	strb	r2, [r3, #4]
	}

}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <_ZN7Display12setAlgorithmENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void
Display::setAlgorithm( const std::string algorithm ) {
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
	// This will happen on another thread, the audio one, so in and out quickly
	if ( algorithm.compare( mAlgorithm ) != 0 ) {
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3318      	adds	r3, #24
 80020bc:	4619      	mov	r1, r3
 80020be:	6838      	ldr	r0, [r7, #0]
 80020c0:	f006 fc3d 	bl	800893e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf14      	ite	ne
 80020ca:	2301      	movne	r3, #1
 80020cc:	2300      	moveq	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <_ZN7Display12setAlgorithmENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
		mAlgorithm = algorithm;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3318      	adds	r3, #24
 80020d8:	6839      	ldr	r1, [r7, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f006 fc25 	bl	800892a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		mShouldUpdate = true;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	711a      	strb	r2, [r3, #4]
	}
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_ZN7Display12updateVolumeEi>:
	DEBUG_STR( "Initializing" );
	mLCD->initialize();
}

void
Display::updateVolume( int volume ) {
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
	if ( volume != mCurrentVolume ) {
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d002      	beq.n	8002108 <_ZN7Display12updateVolumeEi+0x1a>
		//DEBUG_STR( "Adjusting volume" );
		mShouldUpdate = true;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	711a      	strb	r2, [r3, #4]
	}

	mCurrentVolume = volume;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	60da      	str	r2, [r3, #12]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <_ZN7Display16updateInitScreenEv>:

void
Display::updateInitScreen() {
 8002118:	b580      	push	{r7, lr}
 800211a:	b090      	sub	sp, #64	; 0x40
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	char s[50];

	mLCD->setCursor( 0, 1 );
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2201      	movs	r2, #1
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f001 fa9f 	bl	800366c <_ZN3LCD9setCursorEhh>
	sprintf( s, "Initializing", mCurrentVolume );
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	4915      	ldr	r1, [pc, #84]	; (800218c <_ZN7Display16updateInitScreenEv+0x74>)
 8002138:	4618      	mov	r0, r3
 800213a:	f006 fed9 	bl	8008ef0 <siprintf>
	mLCD->writeString( s );
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f107 020c 	add.w	r2, r7, #12
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f001 facd 	bl	80036e8 <_ZN3LCD11writeStringEPc>

	mLCD->setCursor( 0, 1 );
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2201      	movs	r2, #1
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f001 fa88 	bl	800366c <_ZN3LCD9setCursorEhh>
	sprintf( s, "%-20s", mInitString.c_str() );
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3330      	adds	r3, #48	; 0x30
 8002160:	4618      	mov	r0, r3
 8002162:	f006 fbea 	bl	800893a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002166:	4602      	mov	r2, r0
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	4908      	ldr	r1, [pc, #32]	; (8002190 <_ZN7Display16updateInitScreenEv+0x78>)
 800216e:	4618      	mov	r0, r3
 8002170:	f006 febe 	bl	8008ef0 <siprintf>
	mLCD->writeString( s );
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f107 020c 	add.w	r2, r7, #12
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f001 fab2 	bl	80036e8 <_ZN3LCD11writeStringEPc>

}
 8002184:	bf00      	nop
 8002186:	3740      	adds	r7, #64	; 0x40
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	08009604 	.word	0x08009604
 8002190:	08009614 	.word	0x08009614

08002194 <_ZN7Display16updateMainScreenEv>:

void
Display::updateMainScreen() {
 8002194:	b580      	push	{r7, lr}
 8002196:	b094      	sub	sp, #80	; 0x50
 8002198:	af02      	add	r7, sp, #8
 800219a:	6078      	str	r0, [r7, #4]
	//DEBUG_STR( "Updating main screen" );

	char s[50];

	mLCD->setCursor( 0, 0 );
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2200      	movs	r2, #0
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f001 fa61 	bl	800366c <_ZN3LCD9setCursorEhh>
	sprintf( s, "Volume %-3d          ", mCurrentVolume );
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	f107 030c 	add.w	r3, r7, #12
 80021b2:	4949      	ldr	r1, [pc, #292]	; (80022d8 <_ZN7Display16updateMainScreenEv+0x144>)
 80021b4:	4618      	mov	r0, r3
 80021b6:	f006 fe9b 	bl	8008ef0 <siprintf>
	mLCD->writeString( s );
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f107 020c 	add.w	r2, r7, #12
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f001 fa8f 	bl	80036e8 <_ZN3LCD11writeStringEPc>

//	mLCD->setCursor( 0, 1 );
//	sprintf( s, "                     ", mCurrentVolume );
//	mLCD->writeString( s );

	mLCD->setCursor( 0, 1 );
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2201      	movs	r2, #1
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f001 fa4a 	bl	800366c <_ZN3LCD9setCursorEhh>
		sprintf( s, "%s", mInitString.c_str() );
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3330      	adds	r3, #48	; 0x30
 80021dc:	4618      	mov	r0, r3
 80021de:	f006 fbac 	bl	800893a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80021e2:	4602      	mov	r2, r0
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	493c      	ldr	r1, [pc, #240]	; (80022dc <_ZN7Display16updateMainScreenEv+0x148>)
 80021ea:	4618      	mov	r0, r3
 80021ec:	f006 fe80 	bl	8008ef0 <siprintf>
		mLCD->writeString( s );
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f107 020c 	add.w	r2, r7, #12
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f001 fa74 	bl	80036e8 <_ZN3LCD11writeStringEPc>

	if ( mAlgorithm.length() && mSamplingRate ) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3318      	adds	r3, #24
 8002204:	4618      	mov	r0, r3
 8002206:	f006 fb96 	bl	8008936 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <_ZN7Display16updateMainScreenEv+0x88>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <_ZN7Display16updateMainScreenEv+0x88>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <_ZN7Display16updateMainScreenEv+0x8a>
 800221c:	2300      	movs	r3, #0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d040      	beq.n	80022a4 <_ZN7Display16updateMainScreenEv+0x110>
		mLCD->setCursor( 0, 2 );
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2202      	movs	r2, #2
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f001 fa1e 	bl	800366c <_ZN3LCD9setCursorEhh>
		int intPart = mSamplingRate / 1000;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <_ZN7Display16updateMainScreenEv+0x14c>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	099b      	lsrs	r3, r3, #6
 800223c:	647b      	str	r3, [r7, #68]	; 0x44
		int fracPart = ( mSamplingRate - ( intPart * 1000 ) ) / 100;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002244:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002248:	fb01 f202 	mul.w	r2, r1, r2
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	4a25      	ldr	r2, [pc, #148]	; (80022e4 <_ZN7Display16updateMainScreenEv+0x150>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	643b      	str	r3, [r7, #64]	; 0x40
		if ( fracPart == 0 ) {
 8002258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10c      	bne.n	8002278 <_ZN7Display16updateMainScreenEv+0xe4>
			sprintf( s, "%-5s        %4dkHz", mAlgorithm.c_str(), intPart );
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3318      	adds	r3, #24
 8002262:	4618      	mov	r0, r3
 8002264:	f006 fb69 	bl	800893a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002268:	4602      	mov	r2, r0
 800226a:	f107 000c 	add.w	r0, r7, #12
 800226e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002270:	491d      	ldr	r1, [pc, #116]	; (80022e8 <_ZN7Display16updateMainScreenEv+0x154>)
 8002272:	f006 fe3d 	bl	8008ef0 <siprintf>
 8002276:	e00d      	b.n	8002294 <_ZN7Display16updateMainScreenEv+0x100>
		} else {
			sprintf( s, "%-5s        %d.%dkHz", mAlgorithm.c_str(), intPart, fracPart );
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3318      	adds	r3, #24
 800227c:	4618      	mov	r0, r3
 800227e:	f006 fb5c 	bl	800893a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002282:	4602      	mov	r2, r0
 8002284:	f107 000c 	add.w	r0, r7, #12
 8002288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800228e:	4917      	ldr	r1, [pc, #92]	; (80022ec <_ZN7Display16updateMainScreenEv+0x158>)
 8002290:	f006 fe2e 	bl	8008ef0 <siprintf>
		}

		mLCD->writeString( s );
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	f107 020c 	add.w	r2, r7, #12
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f001 fa22 	bl	80036e8 <_ZN3LCD11writeStringEPc>
	}

	mLCD->setCursor( 0, 3 );
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2203      	movs	r2, #3
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f001 f9dd 	bl	800366c <_ZN3LCD9setCursorEhh>
	sprintf( s, "6-Ch         Digital" );
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	490e      	ldr	r1, [pc, #56]	; (80022f0 <_ZN7Display16updateMainScreenEv+0x15c>)
 80022b8:	4618      	mov	r0, r3
 80022ba:	f006 fe19 	bl	8008ef0 <siprintf>
	mLCD->writeString( s );
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f107 020c 	add.w	r2, r7, #12
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f001 fa0d 	bl	80036e8 <_ZN3LCD11writeStringEPc>
}
 80022ce:	bf00      	nop
 80022d0:	3748      	adds	r7, #72	; 0x48
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	0800961c 	.word	0x0800961c
 80022dc:	08009634 	.word	0x08009634
 80022e0:	10624dd3 	.word	0x10624dd3
 80022e4:	51eb851f 	.word	0x51eb851f
 80022e8:	08009638 	.word	0x08009638
 80022ec:	0800964c 	.word	0x0800964c
 80022f0:	08009664 	.word	0x08009664

080022f4 <_ZN12DolbyDecoderC1Ev>:
 *      Author: duane
 */

#include "DolbyDecoder.h"

DolbyDecoder::DolbyDecoder() {
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <_ZN12DolbyDecoderC1Ev+0x1c>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	080097d4 	.word	0x080097d4

08002314 <_ZN12DolbyDecoderD1Ev>:

DolbyDecoder::~DolbyDecoder() {
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	4a04      	ldr	r2, [pc, #16]	; (8002330 <_ZN12DolbyDecoderD1Ev+0x1c>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	080097d4 	.word	0x080097d4

08002334 <_ZN19DolbyDecoder_STA31015setEventHandlerEP13DecoderEvents>:
	} REGISTERS;

	DolbyDecoder_STA310( I2C_Device *device  );
	virtual ~DolbyDecoder_STA310();

	virtual void setEventHandler( DecoderEvents *handler ) { mEventHandler = handler; }
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <_ZN19DolbyDecoder_STA31013isInitializedEv>:
	virtual void initialize();
	virtual void mute( bool enable = true );
	virtual void run();
	virtual void play( bool enable = true );

	virtual bool isInitialized() { return mInitialized; }
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	7a1b      	ldrb	r3, [r3, #8]
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <_ZN19DolbyDecoder_STA31014setInformationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	virtual void checkForInterrupt();
	virtual void checkFormat();

	virtual void reset();

	virtual void setInformation( const std::string info ) { if ( mEventHandler ) mEventHandler->onInformation( info ); }
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <_ZN19DolbyDecoder_STA31014setInformationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3310      	adds	r3, #16
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6839      	ldr	r1, [r7, #0]
 8002386:	4610      	mov	r0, r2
 8002388:	4798      	blx	r3
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device>:

#include "DolbyDecoderSTA310.h"
#include "cmsis_os.h"
#include "Debug.h"

DolbyDecoder_STA310::DolbyDecoder_STA310( I2C_Device *device ) :
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
	mDevice( device ), mInitialized( false ), mMuted( false ), mRunning( false ), mPlaying( false ), mEventHandler( 0 ), mIdent( 0 ), mSoftwareVersion( 0 ) {
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ffa7 	bl	80022f4 <_ZN12DolbyDecoderC1Ev>
 80023a6:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device+0x54>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	721a      	strb	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	725a      	strb	r2, [r3, #9]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	729a      	strb	r2, [r3, #10]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	72da      	strb	r2, [r3, #11]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	60da      	str	r2, [r3, #12]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	741a      	strb	r2, [r3, #16]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	745a      	strb	r2, [r3, #17]
	// TODO Auto-generated constructor stub

}
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	0800980c 	.word	0x0800980c

080023ec <_ZN19DolbyDecoder_STA310D1Ev>:

DolbyDecoder_STA310::~DolbyDecoder_STA310() {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	4a05      	ldr	r2, [pc, #20]	; (800240c <_ZN19DolbyDecoder_STA310D1Ev+0x20>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff89 	bl	8002314 <_ZN12DolbyDecoderD1Ev>
	// TODO Auto-generated destructor stub
}
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	0800980c 	.word	0x0800980c

08002410 <_ZN19DolbyDecoder_STA310D0Ev>:
DolbyDecoder_STA310::~DolbyDecoder_STA310() {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
}
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ffe7 	bl	80023ec <_ZN19DolbyDecoder_STA310D1Ev>
 800241e:	2118      	movs	r1, #24
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f006 f9f0 	bl	8008806 <_ZdlPvj>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <_ZN19DolbyDecoder_STA3104muteEb>:



void
DolbyDecoder_STA310::mute( bool enable ) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <_ZN19DolbyDecoder_STA3104muteEb+0x28>
		mDevice->writeRegister( DolbyDecoder_STA310::MUTE, 1 );
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6858      	ldr	r0, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3310      	adds	r3, #16
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2201      	movs	r2, #1
 8002452:	2114      	movs	r1, #20
 8002454:	4798      	blx	r3
 8002456:	e009      	b.n	800246c <_ZN19DolbyDecoder_STA3104muteEb+0x3c>
	} else {
		mDevice->writeRegister( DolbyDecoder_STA310::MUTE, 0 );
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6858      	ldr	r0, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	3310      	adds	r3, #16
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	2114      	movs	r1, #20
 800246a:	4798      	blx	r3
	}

	mMuted = enable;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	725a      	strb	r2, [r3, #9]
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <_ZN19DolbyDecoder_STA3104playEb>:

void
DolbyDecoder_STA310::play( bool enable ) {
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <_ZN19DolbyDecoder_STA3104playEb+0x28>
		 DEBUG_STR( "Setting play to 1" );
		mDevice->writeRegister( DolbyDecoder_STA310::PLAY, 1 );
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6858      	ldr	r0, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3310      	adds	r3, #16
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2201      	movs	r2, #1
 800249c:	2113      	movs	r1, #19
 800249e:	4798      	blx	r3
 80024a0:	e009      	b.n	80024b6 <_ZN19DolbyDecoder_STA3104playEb+0x3c>
	} else {
		mDevice->writeRegister( DolbyDecoder_STA310::PLAY, 0 );
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6858      	ldr	r0, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3310      	adds	r3, #16
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2200      	movs	r2, #0
 80024b2:	2113      	movs	r1, #19
 80024b4:	4798      	blx	r3
	}

	mPlaying = enable;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	72da      	strb	r2, [r3, #11]
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_ZN19DolbyDecoder_STA3103runEv>:

void
DolbyDecoder_STA310::run() {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	 DEBUG_STR( "Attemping to run" );
	if ( !mRunning ) {
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7a9b      	ldrb	r3, [r3, #10]
 80024d0:	f083 0301 	eor.w	r3, r3, #1
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00c      	beq.n	80024f4 <_ZN19DolbyDecoder_STA3103runEv+0x30>
		 DEBUG_STR( "....Writing run" );
		mDevice->writeRegister( DolbyDecoder_STA310::RUN, 1 );
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6858      	ldr	r0, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3310      	adds	r3, #16
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2201      	movs	r2, #1
 80024ea:	2172      	movs	r1, #114	; 0x72
 80024ec:	4798      	blx	r3
		mRunning = true;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	729a      	strb	r2, [r3, #10]
		// We are now running, the only way to stop is to do a reset of the chip
	}
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>:

void
DolbyDecoder_STA310::enableAudioPLL() {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	mDevice->writeRegister( DolbyDecoder_STA310::ENABLE_PLL, 1 );
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6858      	ldr	r0, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3310      	adds	r3, #16
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2201      	movs	r2, #1
 8002514:	21b5      	movs	r1, #181	; 0xb5
 8002516:	4798      	blx	r3
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_ZN19DolbyDecoder_STA31010initializeEv>:

void
DolbyDecoder_STA310::initialize() {
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( DECODER_RESET_GPIO_Port, DECODER_RESET_Pin, GPIO_PIN_RESET );
 8002528:	2200      	movs	r2, #0
 800252a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800252e:	4826      	ldr	r0, [pc, #152]	; (80025c8 <_ZN19DolbyDecoder_STA31010initializeEv+0xa8>)
 8002530:	f002 fb21 	bl	8004b76 <HAL_GPIO_WritePin>
	osDelay( 100 );
 8002534:	2064      	movs	r0, #100	; 0x64
 8002536:	f003 fd67 	bl	8006008 <osDelay>
	HAL_GPIO_WritePin( DECODER_RESET_GPIO_Port, DECODER_RESET_Pin, GPIO_PIN_SET );
 800253a:	2201      	movs	r2, #1
 800253c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002540:	4821      	ldr	r0, [pc, #132]	; (80025c8 <_ZN19DolbyDecoder_STA31010initializeEv+0xa8>)
 8002542:	f002 fb18 	bl	8004b76 <HAL_GPIO_WritePin>
	osDelay( 500 );
 8002546:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800254a:	f003 fd5d 	bl	8006008 <osDelay>

	 DEBUG_STR( "Performing soft reset" );
	softReset();
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f9e5 	bl	800291e <_ZN19DolbyDecoder_STA3109softResetEv>

	if ( mInitialized ) {
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7a1b      	ldrb	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d030      	beq.n	80025be <_ZN19DolbyDecoder_STA31010initializeEv+0x9e>
		 DEBUG_STR( "Initialized" );
		// perform startup routine
		mIdent = mDevice->readRegister( DolbyDecoder_STA310::IDENT );
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3314      	adds	r3, #20
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2101      	movs	r1, #1
 800256c:	4610      	mov	r0, r2
 800256e:	4798      	blx	r3
 8002570:	4603      	mov	r3, r0
 8002572:	b2da      	uxtb	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	741a      	strb	r2, [r3, #16]
		mSoftwareVersion = mDevice->readRegister( DolbyDecoder_STA310::SOFTVER );
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3314      	adds	r3, #20
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2171      	movs	r1, #113	; 0x71
 8002588:	4610      	mov	r0, r2
 800258a:	4798      	blx	r3
 800258c:	4603      	mov	r3, r0
 800258e:	b2da      	uxtb	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	745a      	strb	r2, [r3, #17]

		// Enable the AUDIO PLL
		 DEBUG_STR( "Configuring PLL" );

		 configureAudioPLL();
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f977 	bl	8002888 <_ZN19DolbyDecoder_STA31017configureAudioPLLEv>

		 DEBUG_STR( "Configuring the rest" );
		 configureInterrupts();
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f83c 	bl	8002618 <_ZN19DolbyDecoder_STA31019configureInterruptsEv>
		 configureSync();
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f855 	bl	8002650 <_ZN19DolbyDecoder_STA31013configureSyncEv>
		 configureSPDIF();
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f8dc 	bl	8002764 <_ZN19DolbyDecoder_STA31014configureSPDIFEv>
		 configurePCMOUT();
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f80d 	bl	80025cc <_ZN19DolbyDecoder_STA31015configurePCMOUTEv>
		 configureDecoder();
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f886 	bl	80026c4 <_ZN19DolbyDecoder_STA31016configureDecoderEv>
		 configureAC3();
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f903 	bl	80027c4 <_ZN19DolbyDecoder_STA31012configureAC3Ev>

		 DEBUG_STR( "Muting" );

	}
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40011000 	.word	0x40011000

080025cc <_ZN19DolbyDecoder_STA31015configurePCMOUTEv>:

void
DolbyDecoder_STA310::configurePCMOUT() {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	// Set SPDIF configuration register
	mDevice->writeRegister( DolbyDecoder_STA310::SPDIF_CONF, 1 );
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6858      	ldr	r0, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3310      	adds	r3, #16
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2201      	movs	r2, #1
 80025e4:	2160      	movs	r1, #96	; 0x60
 80025e6:	4798      	blx	r3

	// Set PCM clock divider to support 256*Fs as 24 bits //
	mDevice->writeRegister( DolbyDecoder_STA310::PCM_DIV, 1 );
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6858      	ldr	r0, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3310      	adds	r3, #16
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2201      	movs	r2, #1
 80025f8:	2154      	movs	r1, #84	; 0x54
 80025fa:	4798      	blx	r3

	// BIT24 | RPAD  works with PCM5102
	mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 35 );
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6858      	ldr	r0, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3310      	adds	r3, #16
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2223      	movs	r2, #35	; 0x23
 800260c:	2155      	movs	r1, #85	; 0x55
 800260e:	4798      	blx	r3
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <_ZN19DolbyDecoder_STA31019configureInterruptsEv>:

void
DolbyDecoder_STA310::configureInterrupts() {
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	mDevice->writeRegister( DolbyDecoder_STA310::INT1, DolbyDecoder_STA310::ERR | DolbyDecoder_STA310::SFR );
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6858      	ldr	r0, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3310      	adds	r3, #16
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	220c      	movs	r2, #12
 8002630:	2107      	movs	r1, #7
 8002632:	4798      	blx	r3
	mDevice->writeRegister( DolbyDecoder_STA310::INT2, DolbyDecoder_STA310::RST | DolbyDecoder_STA310::LCK );
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6858      	ldr	r0, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3310      	adds	r3, #16
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2230      	movs	r2, #48	; 0x30
 8002644:	2108      	movs	r1, #8
 8002646:	4798      	blx	r3
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <_ZN19DolbyDecoder_STA31013configureSyncEv>:

void
DolbyDecoder_STA310::configureSync() {
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	// Only 1 packet needed to synchronize stream
	mDevice->writeRegister( DolbyDecoder_STA310::PACKET_LOCK, 0 );
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6858      	ldr	r0, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3310      	adds	r3, #16
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2200      	movs	r2, #0
 8002668:	214f      	movs	r1, #79	; 0x4f
 800266a:	4798      	blx	r3

	// Only 1 packet for synchronization lock
	mDevice->writeRegister( DolbyDecoder_STA310::SYNC_LOCK, 0 );
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6858      	ldr	r0, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3310      	adds	r3, #16
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2200      	movs	r2, #0
 800267c:	2153      	movs	r1, #83	; 0x53
 800267e:	4798      	blx	r3

	// Disable only decoding one particular audio stream (i.e decode them all)
	mDevice->writeRegister( DolbyDecoder_STA310::ID_EN, 0 );
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6858      	ldr	r0, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3310      	adds	r3, #16
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	2150      	movs	r1, #80	; 0x50
 8002692:	4798      	blx	r3

	// Should be ignored if the ID_EN is set to 0, but also set ID of channel to 0
	mDevice->writeRegister( DolbyDecoder_STA310::ID, 0 );
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6858      	ldr	r0, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	3310      	adds	r3, #16
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2200      	movs	r2, #0
 80026a4:	2151      	movs	r1, #81	; 0x51
 80026a6:	4798      	blx	r3

	// Should be ignored if the ID_EN is set to 0, but also set ID extended to 0
	mDevice->writeRegister( DolbyDecoder_STA310::ID_EXT, 0 );
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6858      	ldr	r0, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3310      	adds	r3, #16
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	2152      	movs	r1, #82	; 0x52
 80026ba:	4798      	blx	r3
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <_ZN19DolbyDecoder_STA31016configureDecoderEv>:

void
DolbyDecoder_STA310::configureDecoder() {
 80026c4:	b5b0      	push	{r4, r5, r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	// Set for SPDIF data format
	mDevice->writeRegister( DolbyDecoder_STA310::STREAM_SEL, 5 );
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6858      	ldr	r0, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3310      	adds	r3, #16
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2205      	movs	r2, #5
 80026dc:	214c      	movs	r1, #76	; 0x4c
 80026de:	4798      	blx	r3

	// Set for Dolby Digital
	mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, 2 );
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6858      	ldr	r0, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	3310      	adds	r3, #16
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2202      	movs	r2, #2
 80026f0:	214d      	movs	r1, #77	; 0x4d
 80026f2:	4798      	blx	r3

	// Beep
	//mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, 7 );

	if ( mEventHandler ) {
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d02d      	beq.n	8002758 <_ZN19DolbyDecoder_STA31016configureDecoderEv+0x94>
		mEventHandler->onAlgorithmChange( std::string( "AC3" ) );
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68dd      	ldr	r5, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	330c      	adds	r3, #12
 8002708:	681c      	ldr	r4, [r3, #0]
 800270a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800270e:	4618      	mov	r0, r3
 8002710:	f006 f88f 	bl	8008832 <_ZNSaIcEC1Ev>
 8002714:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	4910      	ldr	r1, [pc, #64]	; (8002760 <_ZN19DolbyDecoder_STA31016configureDecoderEv+0x9c>)
 800271e:	4618      	mov	r0, r3
 8002720:	f006 f972 	bl	8008a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	4619      	mov	r1, r3
 800272a:	4628      	mov	r0, r5
 800272c:	47a0      	blx	r4
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	4618      	mov	r0, r3
 8002734:	f006 f8f3 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273c:	4618      	mov	r0, r3
 800273e:	f006 f879 	bl	8008834 <_ZNSaIcED1Ev>
		mEventHandler->onSamplingRateChange( 48000 );
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3308      	adds	r3, #8
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8002754:	4610      	mov	r0, r2
 8002756:	4798      	blx	r3
	}
}
 8002758:	bf00      	nop
 800275a:	3728      	adds	r7, #40	; 0x28
 800275c:	46bd      	mov	sp, r7
 800275e:	bdb0      	pop	{r4, r5, r7, pc}
 8002760:	0800967c 	.word	0x0800967c

08002764 <_ZN19DolbyDecoder_STA31014configureSPDIFEv>:

void
DolbyDecoder_STA310::configureSPDIF() {
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	// Configure the use of the SPDIF input and serial
	mDevice->writeRegister( DolbyDecoder_STA310::SIN_SETUP, 11 );
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6858      	ldr	r0, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3310      	adds	r3, #16
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	220b      	movs	r2, #11
 800277c:	210c      	movs	r1, #12
 800277e:	4798      	blx	r3

	// Must be set to 2 for SPDIF
	mDevice->writeRegister( DolbyDecoder_STA310::CAN_SETUP, 0 );
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6858      	ldr	r0, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3310      	adds	r3, #16
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2200      	movs	r2, #0
 8002790:	210d      	movs	r1, #13
 8002792:	4798      	blx	r3

	// Enable auto detection on the stream
	mDevice->writeRegister( DolbyDecoder_STA310::AUTODETECT_ENA, 1 );
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6858      	ldr	r0, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3310      	adds	r3, #16
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2201      	movs	r2, #1
 80027a4:	21e0      	movs	r1, #224	; 0xe0
 80027a6:	4798      	blx	r3

	// Set SPDIF auto-detection sensitivity
	mDevice->writeRegister( DolbyDecoder_STA310::AUTODETECT_SENS, 0 );
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6858      	ldr	r0, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	3310      	adds	r3, #16
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2200      	movs	r2, #0
 80027b8:	21e1      	movs	r1, #225	; 0xe1
 80027ba:	4798      	blx	r3
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <_ZN19DolbyDecoder_STA31012configureAC3Ev>:

void
DolbyDecoder_STA310::configureAC3() {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	// Enable LFE
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DECODE_LFE, 1 );
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6858      	ldr	r0, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3310      	adds	r3, #16
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2201      	movs	r2, #1
 80027dc:	2168      	movs	r1, #104	; 0x68
 80027de:	4798      	blx	r3

	// Configure for line out or spreakers
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_COMP_MOD, 3 );
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6858      	ldr	r0, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3310      	adds	r3, #16
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2203      	movs	r2, #3
 80027f0:	2169      	movs	r1, #105	; 0x69
 80027f2:	4798      	blx	r3

	// Full dynamic range for loud sounds
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_HDR, 0 );
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6858      	ldr	r0, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	3310      	adds	r3, #16
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2200      	movs	r2, #0
 8002804:	216a      	movs	r1, #106	; 0x6a
 8002806:	4798      	blx	r3

	// Don't boost low signals
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_LDR, 0 );
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6858      	ldr	r0, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3310      	adds	r3, #16
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2200      	movs	r2, #0
 8002818:	216b      	movs	r1, #107	; 0x6b
 800281a:	4798      	blx	r3

	// Mute audio output if stream errors are detected
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_RPC, 0 );
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6858      	ldr	r0, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3310      	adds	r3, #16
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2200      	movs	r2, #0
 800282c:	216c      	movs	r1, #108	; 0x6c
 800282e:	4798      	blx	r3

	// Karaoke aware
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_KARAOKE, 0 );
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6858      	ldr	r0, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3310      	adds	r3, #16
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2200      	movs	r2, #0
 8002840:	216d      	movs	r1, #109	; 0x6d
 8002842:	4798      	blx	r3

	// Output dual mode streams as stereo
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DUALMODE, 0 );
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6858      	ldr	r0, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	3310      	adds	r3, #16
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	216e      	movs	r1, #110	; 0x6e
 8002856:	4798      	blx	r3

	// Set for a 5.1 downmix - this is useful to change if certain speakers are missing
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DOWNMIX, 2 );
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6858      	ldr	r0, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3310      	adds	r3, #16
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2202      	movs	r2, #2
 8002868:	216f      	movs	r1, #111	; 0x6f
 800286a:	4798      	blx	r3

	mDevice->writeRegister( DolbyDecoder_STA310::OCFG, 4 + 64 );
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6858      	ldr	r0, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3310      	adds	r3, #16
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2244      	movs	r2, #68	; 0x44
 800287c:	2166      	movs	r1, #102	; 0x66
 800287e:	4798      	blx	r3
	//mDevice->writeRegister( DolbyDecoder_STA310::OCFG, 64 + 2 );
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_ZN19DolbyDecoder_STA31017configureAudioPLLEv>:

void
DolbyDecoder_STA310::configureAudioPLL() {
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	// PLL sounds like shit at 30 on PCM5102
	mDevice->writeRegister( DolbyDecoder_STA310::PLL_CTRL, 22 );
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6858      	ldr	r0, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	3310      	adds	r3, #16
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2216      	movs	r2, #22
 80028a0:	2112      	movs	r1, #18
 80028a2:	4798      	blx	r3
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_ZN19DolbyDecoder_STA3105resetEv>:

void
DolbyDecoder_STA310::reset() {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	softReset();
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f832 	bl	800291e <_ZN19DolbyDecoder_STA3109softResetEv>

	mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, 0 );
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6858      	ldr	r0, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3310      	adds	r3, #16
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	214d      	movs	r1, #77	; 0x4d
 80028cc:	4798      	blx	r3
	mDevice->writeRegister( DolbyDecoder_STA310::STREAM_SEL, 5 );
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6858      	ldr	r0, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3310      	adds	r3, #16
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2205      	movs	r2, #5
 80028de:	214c      	movs	r1, #76	; 0x4c
 80028e0:	4798      	blx	r3

	configureAC3();
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ff6e 	bl	80027c4 <_ZN19DolbyDecoder_STA31012configureAC3Ev>

	// this may cause issues
	configureInterrupts();
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff fe95 	bl	8002618 <_ZN19DolbyDecoder_STA31019configureInterruptsEv>

	mute( false );
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3310      	adds	r3, #16
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2100      	movs	r1, #0
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
	play();
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3314      	adds	r3, #20
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2101      	movs	r1, #1
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
	run();
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3318      	adds	r3, #24
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <_ZN19DolbyDecoder_STA3109softResetEv>:

void
DolbyDecoder_STA310::softReset() {
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
	mInitialized = false;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	721a      	strb	r2, [r3, #8]
	mRunning = false;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	729a      	strb	r2, [r3, #10]

	// Perform soft mute on incoming framers
	//mDevice->writeRegister( DolbyDecoder_STA310::SOFT_MUTE, 1 );

	// Perform soft reset
	mDevice->writeRegister( DolbyDecoder_STA310::SOFT_RESET, 1 );
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6858      	ldr	r0, [r3, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3310      	adds	r3, #16
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2201      	movs	r2, #1
 8002942:	2110      	movs	r1, #16
 8002944:	4798      	blx	r3

	// Write magical breakpoint register
	mDevice->writeRegister( DolbyDecoder_STA310::BREAKPOINT, 8 );
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6858      	ldr	r0, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3310      	adds	r3, #16
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2208      	movs	r2, #8
 8002956:	212b      	movs	r1, #43	; 0x2b
 8002958:	4798      	blx	r3

	// Write clock command
	mDevice->writeRegister( DolbyDecoder_STA310::CLOCK_CMD, 0 );
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6858      	ldr	r0, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3310      	adds	r3, #16
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2200      	movs	r2, #0
 800296a:	213a      	movs	r1, #58	; 0x3a
 800296c:	4798      	blx	r3

	int attempts = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
	while ( attempts < 20 && !mInitialized ) {
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b13      	cmp	r3, #19
 8002976:	dc20      	bgt.n	80029ba <_ZN19DolbyDecoder_STA3109softResetEv+0x9c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7a1b      	ldrb	r3, [r3, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d11c      	bne.n	80029ba <_ZN19DolbyDecoder_STA3109softResetEv+0x9c>
		// We need to check for the device to say it's ready
		I2C_RESULT result = mDevice->readRegister( 0xff );
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3314      	adds	r3, #20
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	21ff      	movs	r1, #255	; 0xff
 8002990:	4610      	mov	r0, r2
 8002992:	4798      	blx	r3
 8002994:	4603      	mov	r3, r0
 8002996:	827b      	strh	r3, [r7, #18]
		if ( result == 1 ) {
 8002998:	8a7b      	ldrh	r3, [r7, #18]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d106      	bne.n	80029ac <_ZN19DolbyDecoder_STA3109softResetEv+0x8e>
			// Device is ready
			mInitialized = true;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	721a      	strb	r2, [r3, #8]

			enableAudioPLL();
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff fda9 	bl	80024fc <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>
 80029aa:	e7e2      	b.n	8002972 <_ZN19DolbyDecoder_STA3109softResetEv+0x54>
		} else {
			attempts++;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	3301      	adds	r3, #1
 80029b0:	617b      	str	r3, [r7, #20]
			// if it's not ready, let's wait 5ms and try again
			osDelay( 250 );
 80029b2:	20fa      	movs	r0, #250	; 0xfa
 80029b4:	f003 fb28 	bl	8006008 <osDelay>
	while ( attempts < 20 && !mInitialized ) {
 80029b8:	e7db      	b.n	8002972 <_ZN19DolbyDecoder_STA3109softResetEv+0x54>
		}
	}

	if ( !mInitialized ) {
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7a1b      	ldrb	r3, [r3, #8]
 80029be:	f083 0301 	eor.w	r3, r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <_ZN19DolbyDecoder_STA3109softResetEv+0xae>
		// this is an error condition we should deal with
		int i;
		i = 10;
 80029c8:	230a      	movs	r3, #10
 80029ca:	60fb      	str	r3, [r7, #12]
	}
}
 80029cc:	bf00      	nop
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZN19DolbyDecoder_STA31017checkForInterruptEv>:

void
DolbyDecoder_STA310::checkForInterrupt() {
 80029d4:	b5b0      	push	{r4, r5, r7, lr}
 80029d6:	b09c      	sub	sp, #112	; 0x70
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
	if ( !HAL_GPIO_ReadPin ( DECODER_IRQ_GPIO_Port, DECODER_IRQ_Pin ) ) {
 80029dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029e0:	488b      	ldr	r0, [pc, #556]	; (8002c10 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x23c>)
 80029e2:	f002 f8b1 	bl	8004b48 <HAL_GPIO_ReadPin>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 81ed 	beq.w	8002dd2 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3fe>
		// IRQ
		I2C_RESULT int1 = mDevice->readRegister( DolbyDecoder_STA310::INT1_RES );
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3314      	adds	r3, #20
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2109      	movs	r1, #9
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4798      	blx	r3
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		I2C_RESULT int2 = mDevice->readRegister( DolbyDecoder_STA310::INT2_RES );
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3314      	adds	r3, #20
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	210a      	movs	r1, #10
 8002a22:	4610      	mov	r0, r2
 8002a24:	4798      	blx	r3
 8002a26:	4603      	mov	r3, r0
 8002a28:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		if ( int1 & ERR ) {
 8002a2c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00c      	beq.n	8002a52 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x7e>
			// SYN
			I2C_RESULT errorReg = mDevice->readRegister( DolbyDecoder_STA310::ERROR );
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3314      	adds	r3, #20
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	210f      	movs	r1, #15
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4798      	blx	r3
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		}
		if ( int1 & HDR ) {
 8002a52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d026      	beq.n	8002aac <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0xd8>
			 I2C_RESULT ac3Status = mDevice->readRegister( DolbyDecoder_STA310::AC3_STATUS_1 );
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3314      	adds	r3, #20
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2177      	movs	r1, #119	; 0x77
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4798      	blx	r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			 I2C_RESULT head3 = mDevice->readRegister( DolbyDecoder_STA310::HEAD_3 );
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3314      	adds	r3, #20
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2143      	movs	r1, #67	; 0x43
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4798      	blx	r3
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			 I2C_RESULT head4 = mDevice->readRegister( DolbyDecoder_STA310::HEAD_4 );
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3314      	adds	r3, #20
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2142      	movs	r1, #66	; 0x42
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4798      	blx	r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		}
		if ( int1 & SFR ) {
 8002aac:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00c      	beq.n	8002ad2 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0xfe>
			I2C_RESULT freq = mDevice->readRegister( DolbyDecoder_STA310::FREQ );
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3314      	adds	r3, #20
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2105      	movs	r1, #5
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4798      	blx	r3
 8002acc:	4603      	mov	r3, r0
 8002ace:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		}

		if ( ( int2 & LCK ) > 0 || ( int2 & RST ) > 0 ) {
 8002ad2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	dc06      	bgt.n	8002aec <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x118>
 8002ade:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f340 8173 	ble.w	8002dd2 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3fe>
			 mRunning = false;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	729a      	strb	r2, [r3, #10]

			 I2C_RESULT decodeSel = mDevice->readRegister( DolbyDecoder_STA310::DECODE_SEL );
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3314      	adds	r3, #20
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	214d      	movs	r1, #77	; 0x4d
 8002b02:	4610      	mov	r0, r2
 8002b04:	4798      	blx	r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			 I2C_RESULT streamSel = mDevice->readRegister( DolbyDecoder_STA310::STREAM_SEL );
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3314      	adds	r3, #20
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	214c      	movs	r1, #76	; 0x4c
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4798      	blx	r3
 8002b20:	4603      	mov	r3, r0
 8002b22:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			 I2C_RESULT freq = mDevice->readRegister( 0x05 );
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3314      	adds	r3, #20
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2105      	movs	r1, #5
 8002b36:	4610      	mov	r0, r2
 8002b38:	4798      	blx	r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

			 if ( mEventHandler ) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d074      	beq.n	8002c32 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x25e>
				 switch ( freq ) {
 8002b48:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d870      	bhi.n	8002c32 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x25e>
 8002b50:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x184>)
 8002b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b56:	bf00      	nop
 8002b58:	08002b9d 	.word	0x08002b9d
 8002b5c:	08002bb5 	.word	0x08002bb5
 8002b60:	08002bcd 	.word	0x08002bcd
 8002b64:	08002c33 	.word	0x08002c33
 8002b68:	08002be5 	.word	0x08002be5
 8002b6c:	08002bfb 	.word	0x08002bfb
 8002b70:	08002c33 	.word	0x08002c33
 8002b74:	08002c33 	.word	0x08002c33
 8002b78:	08002c33 	.word	0x08002c33
 8002b7c:	08002c33 	.word	0x08002c33
 8002b80:	08002c33 	.word	0x08002c33
 8002b84:	08002c33 	.word	0x08002c33
 8002b88:	08002c33 	.word	0x08002c33
 8002b8c:	08002c33 	.word	0x08002c33
 8002b90:	08002c33 	.word	0x08002c33
 8002b94:	08002c33 	.word	0x08002c33
 8002b98:	08002c1d 	.word	0x08002c1d
				 	 case 0:
				 		 mEventHandler->onSamplingRateChange( 48000 );
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4798      	blx	r3
				 		 break;
 8002bb2:	e03e      	b.n	8002c32 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x25e>
				 	 case 1:
				 		 mEventHandler->onSamplingRateChange( 44100 );
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f64a 4144 	movw	r1, #44100	; 0xac44
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4798      	blx	r3
				 		 break;
 8002bca:	e032      	b.n	8002c32 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x25e>
				 	 case 2:
				 		 mEventHandler->onSamplingRateChange( 32000 );
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8002bde:	4610      	mov	r0, r2
 8002be0:	4798      	blx	r3
				 		 break;
 8002be2:	e026      	b.n	8002c32 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x25e>
				 	 case 4:
				 		 mEventHandler->onSamplingRateChange( 96000 );
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3308      	adds	r3, #8
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4908      	ldr	r1, [pc, #32]	; (8002c14 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x240>)
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4798      	blx	r3
				 		 break;
 8002bf8:	e01b      	b.n	8002c32 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x25e>
				 	 case 5:
				 		 mEventHandler->onSamplingRateChange( 88200 );
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3308      	adds	r3, #8
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4903      	ldr	r1, [pc, #12]	; (8002c18 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x244>)
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4798      	blx	r3
				 		 break;
 8002c0e:	e010      	b.n	8002c32 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x25e>
 8002c10:	40011000 	.word	0x40011000
 8002c14:	00017700 	.word	0x00017700
 8002c18:	00015888 	.word	0x00015888
				 	 case 16:
				 		 mEventHandler->onSamplingRateChange( 192000 );
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3308      	adds	r3, #8
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	496c      	ldr	r1, [pc, #432]	; (8002ddc <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x408>)
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4798      	blx	r3
				 		 break;
 8002c30:	bf00      	nop
				 }
			}

			softReset();
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff fe73 	bl	800291e <_ZN19DolbyDecoder_STA3109softResetEv>

			if ( !mInitialized ) {

			}

			configureInterrupts();
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff fced 	bl	8002618 <_ZN19DolbyDecoder_STA31019configureInterruptsEv>

			mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, decodeSel );
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6858      	ldr	r0, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3310      	adds	r3, #16
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	214d      	movs	r1, #77	; 0x4d
 8002c54:	4798      	blx	r3
			mDevice->writeRegister( DolbyDecoder_STA310::STREAM_SEL, streamSel );
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6858      	ldr	r0, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3310      	adds	r3, #16
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	214c      	movs	r1, #76	; 0x4c
 8002c6c:	4798      	blx	r3

			enableAudioPLL();
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fc44 	bl	80024fc <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>

			if ( streamSel == 5 && decodeSel == 0 ) {
 8002c74:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d131      	bne.n	8002ce0 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x30c>
 8002c7c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d12d      	bne.n	8002ce0 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x30c>
				// this is a dolby digital stream
				if ( mEventHandler ) {
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d025      	beq.n	8002cd8 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x304>
					mEventHandler->onAlgorithmChange( std::string( "AC3" ) );
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68dd      	ldr	r5, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	330c      	adds	r3, #12
 8002c98:	681c      	ldr	r4, [r3, #0]
 8002c9a:	f107 0320 	add.w	r3, r7, #32
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f005 fdc7 	bl	8008832 <_ZNSaIcEC1Ev>
 8002ca4:	f107 0220 	add.w	r2, r7, #32
 8002ca8:	f107 0308 	add.w	r3, r7, #8
 8002cac:	494c      	ldr	r1, [pc, #304]	; (8002de0 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x40c>)
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f005 feaa 	bl	8008a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002cb4:	f107 0308 	add.w	r3, r7, #8
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4628      	mov	r0, r5
 8002cbc:	47a0      	blx	r4
 8002cbe:	f107 0308 	add.w	r3, r7, #8
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f005 fe2b 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002cc8:	f107 0320 	add.w	r3, r7, #32
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f005 fdb1 	bl	8008834 <_ZNSaIcED1Ev>
					configureAC3();
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff fd76 	bl	80027c4 <_ZN19DolbyDecoder_STA31012configureAC3Ev>
				}

				configureAC3();
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff fd73 	bl	80027c4 <_ZN19DolbyDecoder_STA31012configureAC3Ev>
 8002cde:	e064      	b.n	8002daa <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3d6>
			} else if ( streamSel == 3 && decodeSel == 6 ) {
 8002ce0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d131      	bne.n	8002d4c <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x378>
 8002ce8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002cec:	2b06      	cmp	r3, #6
 8002cee:	d12d      	bne.n	8002d4c <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x378>
				// This is a DTS stream
				if ( mEventHandler ) {
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d025      	beq.n	8002d44 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x370>
					mEventHandler->onAlgorithmChange( std::string( "DTS" ) );
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68dd      	ldr	r5, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	330c      	adds	r3, #12
 8002d04:	681c      	ldr	r4, [r3, #0]
 8002d06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f005 fd91 	bl	8008832 <_ZNSaIcEC1Ev>
 8002d10:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d18:	4932      	ldr	r1, [pc, #200]	; (8002de4 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x410>)
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f005 fe74 	bl	8008a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d24:	4619      	mov	r1, r3
 8002d26:	4628      	mov	r0, r5
 8002d28:	47a0      	blx	r4
 8002d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f005 fdf5 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002d34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f005 fd7b 	bl	8008834 <_ZNSaIcED1Ev>
					configureAC3();
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fd40 	bl	80027c4 <_ZN19DolbyDecoder_STA31012configureAC3Ev>
				}

				configureAC3();
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fd3d 	bl	80027c4 <_ZN19DolbyDecoder_STA31012configureAC3Ev>
 8002d4a:	e02e      	b.n	8002daa <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3d6>
			} else if ( streamSel == 3 && decodeSel == 3 ) {
 8002d4c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d12a      	bne.n	8002daa <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3d6>
 8002d54:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d126      	bne.n	8002daa <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3d6>
				// This is PCM
				if ( mEventHandler ) {
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d022      	beq.n	8002daa <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3d6>
					mEventHandler->onAlgorithmChange( std::string( "PCM" ) );
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68dd      	ldr	r5, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	330c      	adds	r3, #12
 8002d70:	681c      	ldr	r4, [r3, #0]
 8002d72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d76:	4618      	mov	r0, r3
 8002d78:	f005 fd5b 	bl	8008832 <_ZNSaIcEC1Ev>
 8002d7c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002d80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d84:	4918      	ldr	r1, [pc, #96]	; (8002de8 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x414>)
 8002d86:	4618      	mov	r0, r3
 8002d88:	f005 fe3e 	bl	8008a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002d8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d90:	4619      	mov	r1, r3
 8002d92:	4628      	mov	r0, r5
 8002d94:	47a0      	blx	r4
 8002d96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f005 fdbf 	bl	800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002da0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002da4:	4618      	mov	r0, r3
 8002da6:	f005 fd45 	bl	8008834 <_ZNSaIcED1Ev>
				}
			}

			mute( false );
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3310      	adds	r3, #16
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2100      	movs	r1, #0
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
			play();
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3314      	adds	r3, #20
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	4798      	blx	r3
			run();
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3318      	adds	r3, #24
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	4798      	blx	r3
		}
	}
}
 8002dd2:	bf00      	nop
 8002dd4:	3770      	adds	r7, #112	; 0x70
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	0002ee00 	.word	0x0002ee00
 8002de0:	0800967c 	.word	0x0800967c
 8002de4:	08009680 	.word	0x08009680
 8002de8:	08009684 	.word	0x08009684

08002dec <_ZN19DolbyDecoder_STA31011checkFormatEv>:

void
DolbyDecoder_STA310::checkFormat() {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	 I2C_RESULT streamSel = mDevice->readRegister( DolbyDecoder_STA310::STREAM_SEL );
	 I2C_RESULT head3 = mDevice->readRegister( DolbyDecoder_STA310::HEAD_3 );
	 I2C_RESULT freq = mDevice->readRegister( 0x05 );
	 I2C_RESULT spdif_status = mDevice->readRegister( 0x61 );
	 */
	 I2C_RESULT run = mDevice->readRegister( DolbyDecoder_STA310::RUN );
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3314      	adds	r3, #20
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2172      	movs	r1, #114	; 0x72
 8002e04:	4610      	mov	r0, r2
 8002e06:	4798      	blx	r3
 8002e08:	4603      	mov	r3, r0
 8002e0a:	81fb      	strh	r3, [r7, #14]
	 if ( run ) {
 8002e0c:	89fb      	ldrh	r3, [r7, #14]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <_ZN19DolbyDecoder_STA31011checkFormatEv+0x32>
		 HAL_GPIO_WritePin( LED_DOLBY_GPIO_Port, LED_DOLBY_Pin, GPIO_PIN_SET  );
 8002e12:	2201      	movs	r2, #1
 8002e14:	2102      	movs	r1, #2
 8002e16:	4820      	ldr	r0, [pc, #128]	; (8002e98 <_ZN19DolbyDecoder_STA31011checkFormatEv+0xac>)
 8002e18:	f001 fead 	bl	8004b76 <HAL_GPIO_WritePin>
 8002e1c:	e004      	b.n	8002e28 <_ZN19DolbyDecoder_STA31011checkFormatEv+0x3c>
	 } else {
		 HAL_GPIO_WritePin( LED_DOLBY_GPIO_Port, LED_DOLBY_Pin, GPIO_PIN_RESET  );
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2102      	movs	r1, #2
 8002e22:	481d      	ldr	r0, [pc, #116]	; (8002e98 <_ZN19DolbyDecoder_STA31011checkFormatEv+0xac>)
 8002e24:	f001 fea7 	bl	8004b76 <HAL_GPIO_WritePin>
	 }

	 I2C_RESULT mute = mDevice->readRegister( DolbyDecoder_STA310::MUTE );
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3314      	adds	r3, #20
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2114      	movs	r1, #20
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4798      	blx	r3
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	81bb      	strh	r3, [r7, #12]
	 if ( mute ) {
 8002e40:	89bb      	ldrh	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <_ZN19DolbyDecoder_STA31011checkFormatEv+0x66>
		 HAL_GPIO_WritePin( LED_PCM_GPIO_Port, LED_PCM_Pin, GPIO_PIN_SET  );
 8002e46:	2201      	movs	r2, #1
 8002e48:	2101      	movs	r1, #1
 8002e4a:	4813      	ldr	r0, [pc, #76]	; (8002e98 <_ZN19DolbyDecoder_STA31011checkFormatEv+0xac>)
 8002e4c:	f001 fe93 	bl	8004b76 <HAL_GPIO_WritePin>
 8002e50:	e004      	b.n	8002e5c <_ZN19DolbyDecoder_STA31011checkFormatEv+0x70>
	 } else {
		 HAL_GPIO_WritePin( LED_PCM_GPIO_Port, LED_PCM_Pin, GPIO_PIN_RESET  );
 8002e52:	2200      	movs	r2, #0
 8002e54:	2101      	movs	r1, #1
 8002e56:	4810      	ldr	r0, [pc, #64]	; (8002e98 <_ZN19DolbyDecoder_STA31011checkFormatEv+0xac>)
 8002e58:	f001 fe8d 	bl	8004b76 <HAL_GPIO_WritePin>
	 }

	 I2C_RESULT play = mDevice->readRegister( DolbyDecoder_STA310::PLAY );
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3314      	adds	r3, #20
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2113      	movs	r1, #19
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4798      	blx	r3
 8002e70:	4603      	mov	r3, r0
 8002e72:	817b      	strh	r3, [r7, #10]
	 if ( play ) {
 8002e74:	897b      	ldrh	r3, [r7, #10]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <_ZN19DolbyDecoder_STA31011checkFormatEv+0x9a>
	 		 HAL_GPIO_WritePin( LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_SET  );
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	2108      	movs	r1, #8
 8002e7e:	4807      	ldr	r0, [pc, #28]	; (8002e9c <_ZN19DolbyDecoder_STA31011checkFormatEv+0xb0>)
 8002e80:	f001 fe79 	bl	8004b76 <HAL_GPIO_WritePin>
	 } else {
	 		 HAL_GPIO_WritePin( LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET  );
	 }

}
 8002e84:	e004      	b.n	8002e90 <_ZN19DolbyDecoder_STA31011checkFormatEv+0xa4>
	 		 HAL_GPIO_WritePin( LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET  );
 8002e86:	2200      	movs	r2, #0
 8002e88:	2108      	movs	r1, #8
 8002e8a:	4804      	ldr	r0, [pc, #16]	; (8002e9c <_ZN19DolbyDecoder_STA31011checkFormatEv+0xb0>)
 8002e8c:	f001 fe73 	bl	8004b76 <HAL_GPIO_WritePin>
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40010800 	.word	0x40010800
 8002e9c:	40011000 	.word	0x40011000

08002ea0 <_ZNK7Encoder12getLastValueEv>:
public:
	Encoder();
	virtual ~Encoder();

	virtual ENCODER_VALUE checkEncoder( uint32_t value );
	virtual ENCODER_VALUE getLastValue() const { return mLastTimerValue; }
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr
	...

08002eb8 <_ZN7EncoderC1Ev>:
 *      Author: duane
 */

#include "Encoder.h"

Encoder::Encoder() : mLastTimerValue( 0 ) {
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <_ZN7EncoderC1Ev+0x20>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	605a      	str	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr
 8002ed8:	08009844 	.word	0x08009844

08002edc <_ZN7EncoderD1Ev>:

Encoder::~Encoder() {
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <_ZN7EncoderD1Ev+0x1c>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	08009844 	.word	0x08009844

08002efc <_ZN7EncoderD0Ev>:
Encoder::~Encoder() {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
}
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff ffe9 	bl	8002edc <_ZN7EncoderD1Ev>
 8002f0a:	2108      	movs	r1, #8
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f005 fc7a 	bl	8008806 <_ZdlPvj>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_ZN7Encoder12checkEncoderEm>:

ENCODER_VALUE
Encoder::checkEncoder( uint32_t value ) {
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
	if ( mLastTimerValue < 50 && value > 65500 ) {
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b31      	cmp	r3, #49	; 0x31
 8002f2c:	d809      	bhi.n	8002f42 <_ZN7Encoder12checkEncoderEm+0x26>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d904      	bls.n	8002f42 <_ZN7Encoder12checkEncoderEm+0x26>
		// the value rolled backwards from 0 up to 64000, so this is a nudge down
		mLastTimerValue = value;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
		return ENCODER_DECREASE;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e02e      	b.n	8002fa0 <_ZN7Encoder12checkEncoderEm+0x84>
	} else if ( mLastTimerValue > 65500 && value < 50 ) {
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d907      	bls.n	8002f5e <_ZN7Encoder12checkEncoderEm+0x42>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b31      	cmp	r3, #49	; 0x31
 8002f52:	d804      	bhi.n	8002f5e <_ZN7Encoder12checkEncoderEm+0x42>
		// the value rolled over the top, back to 0, so this is an increase
		mLastTimerValue = value;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	605a      	str	r2, [r3, #4]
		return ENCODER_INCREASE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e020      	b.n	8002fa0 <_ZN7Encoder12checkEncoderEm+0x84>
	} else if ( value > mLastTimerValue && ( value - mLastTimerValue ) > 3 ) {
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d90a      	bls.n	8002f7e <_ZN7Encoder12checkEncoderEm+0x62>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d904      	bls.n	8002f7e <_ZN7Encoder12checkEncoderEm+0x62>
		mLastTimerValue = value;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	605a      	str	r2, [r3, #4]
		// increase
		return ENCODER_INCREASE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e010      	b.n	8002fa0 <_ZN7Encoder12checkEncoderEm+0x84>
	} else if ( value < mLastTimerValue && ( mLastTimerValue - value ) > 3  ) {
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d20a      	bcs.n	8002f9e <_ZN7Encoder12checkEncoderEm+0x82>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d904      	bls.n	8002f9e <_ZN7Encoder12checkEncoderEm+0x82>
		mLastTimerValue = value;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	605a      	str	r2, [r3, #4]
		return ENCODER_DECREASE;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <_ZN7Encoder12checkEncoderEm+0x84>
	} else {
		return ENCODER_NOCHANGE;
 8002f9e:	2302      	movs	r3, #2
	}
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr
	...

08002fac <_ZN10I2C_DeviceC1EP3I2Ch>:
	I2C *mBus;
	I2C_ADDR mAddr;
public:
	I2C_Device( I2C *bus ) : mBus( bus ), mAddr( 0 ) {}
	I2C_Device( I2C_ADDR addr );
	I2C_Device( I2C *bus, I2C_ADDR addr ) : mBus( bus), mAddr( addr ) {}
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	71fb      	strb	r3, [r7, #7]
 8002fba:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <_ZN10I2C_DeviceC1EP3I2Ch+0x2c>)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	79fa      	ldrb	r2, [r7, #7]
 8002fca:	721a      	strb	r2, [r3, #8]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	08009894 	.word	0x08009894

08002fdc <_ZN3I2CC1Ev>:
#include <memory>

#define I2C_ERROR -1
#define I2C_MAX_DELAY 	1000

I2C::I2C() {
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <_ZN3I2CC1Ev+0x1c>)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	0800985c 	.word	0x0800985c

08002ffc <_ZN3I2CD1Ev>:

I2C::~I2C() {
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <_ZN3I2CD1Ev+0x1c>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	0800985c 	.word	0x0800985c

0800301c <_ZN3I2C10makeDeviceEh>:

I2C_Device *
I2C::makeDevice( I2C_ADDR addr ) {
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
	return new I2C_Device( this, addr );
 8003028:	200c      	movs	r0, #12
 800302a:	f005 fbee 	bl	800880a <_Znwj>
 800302e:	4603      	mov	r3, r0
 8003030:	461c      	mov	r4, r3
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	461a      	mov	r2, r3
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4620      	mov	r0, r4
 800303a:	f7ff ffb7 	bl	8002fac <_ZN10I2C_DeviceC1EP3I2Ch>
 800303e:	4623      	mov	r3, r4
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	bd90      	pop	{r4, r7, pc}

08003048 <_ZL12DWT_Delay_usm>:

#include "stm32f1xx_hal.h"
uint32_t DWT_Delay_Init(void);

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <_ZL12DWT_Delay_usm+0x48>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8003056:	f002 f973 	bl	8005340 <HAL_RCC_GetHCLKFreq>
 800305a:	4603      	mov	r3, r0
 800305c:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <_ZL12DWT_Delay_usm+0x4c>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	0c9b      	lsrs	r3, r3, #18
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <_ZL12DWT_Delay_usm+0x48>)
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1ad2      	subs	r2, r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	429a      	cmp	r2, r3
 8003078:	bf34      	ite	cc
 800307a:	2301      	movcc	r3, #1
 800307c:	2300      	movcs	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d000      	beq.n	8003086 <_ZL12DWT_Delay_usm+0x3e>
 8003084:	e7f2      	b.n	800306c <_ZL12DWT_Delay_usm+0x24>
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	e0001000 	.word	0xe0001000
 8003094:	431bde83 	.word	0x431bde83

08003098 <_Z14DWT_Delay_Initv>:

#define SCL(x) ( x > 0 ? HAL_GPIO_WritePin( SCL_GPIO_Port, SCL_Pin, GPIO_PIN_SET ) : HAL_GPIO_WritePin( SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET ) )
#define SDA(x) ( x > 0 ? HAL_GPIO_WritePin( SDA_GPIO_Port, SDA_Pin, GPIO_PIN_SET ) : HAL_GPIO_WritePin( SDA_GPIO_Port, SDA_Pin, GPIO_PIN_RESET ) )
#define I2C_DELAY	 DWT_Delay_us( 5 )

uint32_t DWT_Delay_Init(void) {
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800309c:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <_Z14DWT_Delay_Initv+0x60>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <_Z14DWT_Delay_Initv+0x60>)
 80030a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80030a8:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <_Z14DWT_Delay_Initv+0x60>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a12      	ldr	r2, [pc, #72]	; (80030f8 <_Z14DWT_Delay_Initv+0x60>)
 80030ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <_Z14DWT_Delay_Initv+0x64>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a10      	ldr	r2, [pc, #64]	; (80030fc <_Z14DWT_Delay_Initv+0x64>)
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80030c0:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <_Z14DWT_Delay_Initv+0x64>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <_Z14DWT_Delay_Initv+0x64>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <_Z14DWT_Delay_Initv+0x64>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80030d2:	bf00      	nop
     __ASM volatile ("NOP");
 80030d4:	bf00      	nop
  __ASM volatile ("NOP");
 80030d6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <_Z14DWT_Delay_Initv+0x64>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <_Z14DWT_Delay_Initv+0x56>
     {
       return 0; /*clock cycle counter started*/
 80030ea:	2300      	movs	r3, #0
 80030ec:	e000      	b.n	80030f0 <_Z14DWT_Delay_Initv+0x58>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80030ee:	2301      	movs	r3, #1
  }
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	e000edf0 	.word	0xe000edf0
 80030fc:	e0001000 	.word	0xe0001000

08003100 <_ZN11I2C_BitbangC1Emh>:

I2C_Bitbang::I2C_Bitbang( uint32_t processorSpeed, uint8_t busSpeed ) : mProcessorSpeed( processorSpeed ), mBusSpeed( busSpeed ), mDelayCycles( 0 ) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	4613      	mov	r3, r2
 800310c:	71fb      	strb	r3, [r7, #7]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff63 	bl	8002fdc <_ZN3I2CC1Ev>
 8003116:	4a11      	ldr	r2, [pc, #68]	; (800315c <_ZN11I2C_BitbangC1Emh+0x5c>)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	79fa      	ldrb	r2, [r7, #7]
 8003126:	721a      	strb	r2, [r3, #8]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	815a      	strh	r2, [r3, #10]
	// TODO Auto-generated destructor stub
	switch( mBusSpeed ) {
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	7a1b      	ldrb	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10b      	bne.n	800314e <_ZN11I2C_BitbangC1Emh+0x4e>
		case BUS100:
			mDelayCycles = (processorSpeed/100000)*4;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	4a09      	ldr	r2, [pc, #36]	; (8003160 <_ZN11I2C_BitbangC1Emh+0x60>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	09db      	lsrs	r3, r3, #7
 8003142:	b29b      	uxth	r3, r3
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	815a      	strh	r2, [r3, #10]
			break;
 800314c:	bf00      	nop
	}

	DWT_Delay_Init();
 800314e:	f7ff ffa3 	bl	8003098 <_Z14DWT_Delay_Initv>
}
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	08009878 	.word	0x08009878
 8003160:	0a7c5ac5 	.word	0x0a7c5ac5

08003164 <_ZN11I2C_BitbangD1Ev>:

I2C_Bitbang::~I2C_Bitbang() {
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	4a05      	ldr	r2, [pc, #20]	; (8003184 <_ZN11I2C_BitbangD1Ev+0x20>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff41 	bl	8002ffc <_ZN3I2CD1Ev>

}
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	08009878 	.word	0x08009878

08003188 <_ZN11I2C_BitbangD0Ev>:
I2C_Bitbang::~I2C_Bitbang() {
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
}
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ffe7 	bl	8003164 <_ZN11I2C_BitbangD1Ev>
 8003196:	210c      	movs	r1, #12
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f005 fb34 	bl	8008806 <_ZdlPvj>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <_ZN11I2C_Bitbang5startEv>:

void
I2C_Bitbang::start() {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	SDA(1);
 80031b0:	2201      	movs	r2, #1
 80031b2:	2180      	movs	r1, #128	; 0x80
 80031b4:	480f      	ldr	r0, [pc, #60]	; (80031f4 <_ZN11I2C_Bitbang5startEv+0x4c>)
 80031b6:	f001 fcde 	bl	8004b76 <HAL_GPIO_WritePin>
	SCL(1);
 80031ba:	2201      	movs	r2, #1
 80031bc:	2140      	movs	r1, #64	; 0x40
 80031be:	480d      	ldr	r0, [pc, #52]	; (80031f4 <_ZN11I2C_Bitbang5startEv+0x4c>)
 80031c0:	f001 fcd9 	bl	8004b76 <HAL_GPIO_WritePin>
	I2C_DELAY;
 80031c4:	2005      	movs	r0, #5
 80031c6:	f7ff ff3f 	bl	8003048 <_ZL12DWT_Delay_usm>
	SDA(0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	4809      	ldr	r0, [pc, #36]	; (80031f4 <_ZN11I2C_Bitbang5startEv+0x4c>)
 80031d0:	f001 fcd1 	bl	8004b76 <HAL_GPIO_WritePin>
	I2C_DELAY;
 80031d4:	2005      	movs	r0, #5
 80031d6:	f7ff ff37 	bl	8003048 <_ZL12DWT_Delay_usm>
	SCL(0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2140      	movs	r1, #64	; 0x40
 80031de:	4805      	ldr	r0, [pc, #20]	; (80031f4 <_ZN11I2C_Bitbang5startEv+0x4c>)
 80031e0:	f001 fcc9 	bl	8004b76 <HAL_GPIO_WritePin>
	I2C_DELAY;
 80031e4:	2005      	movs	r0, #5
 80031e6:	f7ff ff2f 	bl	8003048 <_ZL12DWT_Delay_usm>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40010c00 	.word	0x40010c00

080031f8 <_ZN11I2C_Bitbang4stopEv>:

void
I2C_Bitbang::stop() {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
	SDA(0);
 8003200:	2200      	movs	r2, #0
 8003202:	2180      	movs	r1, #128	; 0x80
 8003204:	480c      	ldr	r0, [pc, #48]	; (8003238 <_ZN11I2C_Bitbang4stopEv+0x40>)
 8003206:	f001 fcb6 	bl	8004b76 <HAL_GPIO_WritePin>
	I2C_DELAY;
 800320a:	2005      	movs	r0, #5
 800320c:	f7ff ff1c 	bl	8003048 <_ZL12DWT_Delay_usm>
	SCL(1);
 8003210:	2201      	movs	r2, #1
 8003212:	2140      	movs	r1, #64	; 0x40
 8003214:	4808      	ldr	r0, [pc, #32]	; (8003238 <_ZN11I2C_Bitbang4stopEv+0x40>)
 8003216:	f001 fcae 	bl	8004b76 <HAL_GPIO_WritePin>
	I2C_DELAY;
 800321a:	2005      	movs	r0, #5
 800321c:	f7ff ff14 	bl	8003048 <_ZL12DWT_Delay_usm>
	SDA(1);
 8003220:	2201      	movs	r2, #1
 8003222:	2180      	movs	r1, #128	; 0x80
 8003224:	4804      	ldr	r0, [pc, #16]	; (8003238 <_ZN11I2C_Bitbang4stopEv+0x40>)
 8003226:	f001 fca6 	bl	8004b76 <HAL_GPIO_WritePin>
	I2C_DELAY;
 800322a:	2005      	movs	r0, #5
 800322c:	f7ff ff0c 	bl	8003048 <_ZL12DWT_Delay_usm>
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40010c00 	.word	0x40010c00

0800323c <_ZN11I2C_Bitbang8writeBitEh>:

void
I2C_Bitbang::writeBit( uint8_t bit ) {
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	70fb      	strb	r3, [r7, #3]
	bit ? SDA(1) : SDA(0);
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <_ZN11I2C_Bitbang8writeBitEh+0x1e>
 800324e:	2201      	movs	r2, #1
 8003250:	2180      	movs	r1, #128	; 0x80
 8003252:	480e      	ldr	r0, [pc, #56]	; (800328c <_ZN11I2C_Bitbang8writeBitEh+0x50>)
 8003254:	f001 fc8f 	bl	8004b76 <HAL_GPIO_WritePin>
 8003258:	e004      	b.n	8003264 <_ZN11I2C_Bitbang8writeBitEh+0x28>
 800325a:	2200      	movs	r2, #0
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	480b      	ldr	r0, [pc, #44]	; (800328c <_ZN11I2C_Bitbang8writeBitEh+0x50>)
 8003260:	f001 fc89 	bl	8004b76 <HAL_GPIO_WritePin>
	I2C_DELAY;
 8003264:	2005      	movs	r0, #5
 8003266:	f7ff feef 	bl	8003048 <_ZL12DWT_Delay_usm>
	SCL(1);
 800326a:	2201      	movs	r2, #1
 800326c:	2140      	movs	r1, #64	; 0x40
 800326e:	4807      	ldr	r0, [pc, #28]	; (800328c <_ZN11I2C_Bitbang8writeBitEh+0x50>)
 8003270:	f001 fc81 	bl	8004b76 <HAL_GPIO_WritePin>
	I2C_DELAY;
 8003274:	2005      	movs	r0, #5
 8003276:	f7ff fee7 	bl	8003048 <_ZL12DWT_Delay_usm>
	SCL(0);
 800327a:	2200      	movs	r2, #0
 800327c:	2140      	movs	r1, #64	; 0x40
 800327e:	4803      	ldr	r0, [pc, #12]	; (800328c <_ZN11I2C_Bitbang8writeBitEh+0x50>)
 8003280:	f001 fc79 	bl	8004b76 <HAL_GPIO_WritePin>
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40010c00 	.word	0x40010c00

08003290 <_ZN11I2C_Bitbang7readBitEv>:

uint8_t
I2C_Bitbang::readBit() {
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	SDA(1);
 8003298:	2201      	movs	r2, #1
 800329a:	2180      	movs	r1, #128	; 0x80
 800329c:	480f      	ldr	r0, [pc, #60]	; (80032dc <_ZN11I2C_Bitbang7readBitEv+0x4c>)
 800329e:	f001 fc6a 	bl	8004b76 <HAL_GPIO_WritePin>
	I2C_DELAY;
 80032a2:	2005      	movs	r0, #5
 80032a4:	f7ff fed0 	bl	8003048 <_ZL12DWT_Delay_usm>
	SCL(1);
 80032a8:	2201      	movs	r2, #1
 80032aa:	2140      	movs	r1, #64	; 0x40
 80032ac:	480b      	ldr	r0, [pc, #44]	; (80032dc <_ZN11I2C_Bitbang7readBitEv+0x4c>)
 80032ae:	f001 fc62 	bl	8004b76 <HAL_GPIO_WritePin>
	I2C_DELAY;
 80032b2:	2005      	movs	r0, #5
 80032b4:	f7ff fec8 	bl	8003048 <_ZL12DWT_Delay_usm>
	int bit = HAL_GPIO_ReadPin( SDA_GPIO_Port, SDA_Pin );
 80032b8:	2180      	movs	r1, #128	; 0x80
 80032ba:	4808      	ldr	r0, [pc, #32]	; (80032dc <_ZN11I2C_Bitbang7readBitEv+0x4c>)
 80032bc:	f001 fc44 	bl	8004b48 <HAL_GPIO_ReadPin>
 80032c0:	4603      	mov	r3, r0
 80032c2:	60fb      	str	r3, [r7, #12]
	SCL(0);
 80032c4:	2200      	movs	r2, #0
 80032c6:	2140      	movs	r1, #64	; 0x40
 80032c8:	4804      	ldr	r0, [pc, #16]	; (80032dc <_ZN11I2C_Bitbang7readBitEv+0x4c>)
 80032ca:	f001 fc54 	bl	8004b76 <HAL_GPIO_WritePin>

	return bit;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	b2db      	uxtb	r3, r3
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40010c00 	.word	0x40010c00

080032e0 <_ZN11I2C_Bitbang8readByteEb>:

uint8_t
I2C_Bitbang::readByte( bool ack ) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]
	uint8_t curBit = 0x80;
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	73bb      	strb	r3, [r7, #14]
	SDA(1);
 80032f4:	2201      	movs	r2, #1
 80032f6:	2180      	movs	r1, #128	; 0x80
 80032f8:	482f      	ldr	r0, [pc, #188]	; (80033b8 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 80032fa:	f001 fc3c 	bl	8004b76 <HAL_GPIO_WritePin>
	I2C_DELAY;
 80032fe:	2005      	movs	r0, #5
 8003300:	f7ff fea2 	bl	8003048 <_ZL12DWT_Delay_usm>

	for ( volatile int i = 0 ; i < 8 ; i++ ) {
 8003304:	2300      	movs	r3, #0
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b07      	cmp	r3, #7
 800330c:	bfd4      	ite	le
 800330e:	2301      	movle	r3, #1
 8003310:	2300      	movgt	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d023      	beq.n	8003360 <_ZN11I2C_Bitbang8readByteEb+0x80>
		SCL(1);
 8003318:	2201      	movs	r2, #1
 800331a:	2140      	movs	r1, #64	; 0x40
 800331c:	4826      	ldr	r0, [pc, #152]	; (80033b8 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 800331e:	f001 fc2a 	bl	8004b76 <HAL_GPIO_WritePin>
		I2C_DELAY;
 8003322:	2005      	movs	r0, #5
 8003324:	f7ff fe90 	bl	8003048 <_ZL12DWT_Delay_usm>
		uint8_t bit = HAL_GPIO_ReadPin( SDA_GPIO_Port, SDA_Pin );
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	4823      	ldr	r0, [pc, #140]	; (80033b8 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 800332c:	f001 fc0c 	bl	8004b48 <HAL_GPIO_ReadPin>
 8003330:	4603      	mov	r3, r0
 8003332:	737b      	strb	r3, [r7, #13]
		if ( bit ) {
 8003334:	7b7b      	ldrb	r3, [r7, #13]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <_ZN11I2C_Bitbang8readByteEb+0x62>
			ret = ret | curBit;
 800333a:	7bfa      	ldrb	r2, [r7, #15]
 800333c:	7bbb      	ldrb	r3, [r7, #14]
 800333e:	4313      	orrs	r3, r2
 8003340:	73fb      	strb	r3, [r7, #15]
		}
		SCL(0);
 8003342:	2200      	movs	r2, #0
 8003344:	2140      	movs	r1, #64	; 0x40
 8003346:	481c      	ldr	r0, [pc, #112]	; (80033b8 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 8003348:	f001 fc15 	bl	8004b76 <HAL_GPIO_WritePin>
		I2C_DELAY;
 800334c:	2005      	movs	r0, #5
 800334e:	f7ff fe7b 	bl	8003048 <_ZL12DWT_Delay_usm>

		curBit = curBit >> 1;
 8003352:	7bbb      	ldrb	r3, [r7, #14]
 8003354:	085b      	lsrs	r3, r3, #1
 8003356:	73bb      	strb	r3, [r7, #14]
	for ( volatile int i = 0 ; i < 8 ; i++ ) {
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3301      	adds	r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	e7d3      	b.n	8003308 <_ZN11I2C_Bitbang8readByteEb+0x28>
	}

	ack ? SDA(0) : SDA(1);
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <_ZN11I2C_Bitbang8readByteEb+0x92>
 8003366:	2200      	movs	r2, #0
 8003368:	2180      	movs	r1, #128	; 0x80
 800336a:	4813      	ldr	r0, [pc, #76]	; (80033b8 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 800336c:	f001 fc03 	bl	8004b76 <HAL_GPIO_WritePin>
 8003370:	e004      	b.n	800337c <_ZN11I2C_Bitbang8readByteEb+0x9c>
 8003372:	2201      	movs	r2, #1
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	4810      	ldr	r0, [pc, #64]	; (80033b8 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 8003378:	f001 fbfd 	bl	8004b76 <HAL_GPIO_WritePin>
	I2C_DELAY;
 800337c:	2005      	movs	r0, #5
 800337e:	f7ff fe63 	bl	8003048 <_ZL12DWT_Delay_usm>
	SCL(1);
 8003382:	2201      	movs	r2, #1
 8003384:	2140      	movs	r1, #64	; 0x40
 8003386:	480c      	ldr	r0, [pc, #48]	; (80033b8 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 8003388:	f001 fbf5 	bl	8004b76 <HAL_GPIO_WritePin>
	I2C_DELAY;
 800338c:	2005      	movs	r0, #5
 800338e:	f7ff fe5b 	bl	8003048 <_ZL12DWT_Delay_usm>
	SCL(0);
 8003392:	2200      	movs	r2, #0
 8003394:	2140      	movs	r1, #64	; 0x40
 8003396:	4808      	ldr	r0, [pc, #32]	; (80033b8 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 8003398:	f001 fbed 	bl	8004b76 <HAL_GPIO_WritePin>
	SDA(1);
 800339c:	2201      	movs	r2, #1
 800339e:	2180      	movs	r1, #128	; 0x80
 80033a0:	4805      	ldr	r0, [pc, #20]	; (80033b8 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 80033a2:	f001 fbe8 	bl	8004b76 <HAL_GPIO_WritePin>
	I2C_DELAY;
 80033a6:	2005      	movs	r0, #5
 80033a8:	f7ff fe4e 	bl	8003048 <_ZL12DWT_Delay_usm>

	return ret;
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40010c00 	.word	0x40010c00

080033bc <_ZN11I2C_Bitbang9writeByteEh>:

void
I2C_Bitbang::writeByte( uint8_t data ) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	70fb      	strb	r3, [r7, #3]
	for ( volatile int i = 0 ; i < 8; i++ ) {
 80033c8:	2300      	movs	r3, #0
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b07      	cmp	r3, #7
 80033d0:	bfd4      	ite	le
 80033d2:	2301      	movle	r3, #1
 80033d4:	2300      	movgt	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d013      	beq.n	8003404 <_ZN11I2C_Bitbang9writeByteEh+0x48>

		if ( data & 0x80 ) {
 80033dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	da04      	bge.n	80033ee <_ZN11I2C_Bitbang9writeByteEh+0x32>
			writeBit( 1 );
 80033e4:	2101      	movs	r1, #1
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ff28 	bl	800323c <_ZN11I2C_Bitbang8writeBitEh>
 80033ec:	e003      	b.n	80033f6 <_ZN11I2C_Bitbang9writeByteEh+0x3a>
		} else {
			writeBit( 0) ;
 80033ee:	2100      	movs	r1, #0
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff23 	bl	800323c <_ZN11I2C_Bitbang8writeBitEh>
		}
		data = data << 1;
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	70fb      	strb	r3, [r7, #3]
	for ( volatile int i = 0 ; i < 8; i++ ) {
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	3301      	adds	r3, #1
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	e7e3      	b.n	80033cc <_ZN11I2C_Bitbang9writeByteEh+0x10>
	}

	int ACK = readBit();
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff ff43 	bl	8003290 <_ZN11I2C_Bitbang7readBitEv>
 800340a:	4603      	mov	r3, r0
 800340c:	60fb      	str	r3, [r7, #12]
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <_ZN11I2C_Bitbang13writeRegisterEhhh>:

bool
I2C_Bitbang::writeRegister( I2C_ADDR addr, uint8_t reg, uint8_t value ) {
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	4608      	mov	r0, r1
 8003420:	4611      	mov	r1, r2
 8003422:	461a      	mov	r2, r3
 8003424:	4603      	mov	r3, r0
 8003426:	70fb      	strb	r3, [r7, #3]
 8003428:	460b      	mov	r3, r1
 800342a:	70bb      	strb	r3, [r7, #2]
 800342c:	4613      	mov	r3, r2
 800342e:	707b      	strb	r3, [r7, #1]
	start();
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff feb9 	bl	80031a8 <_ZN11I2C_Bitbang5startEv>
	writeByte( addr );
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff ffbe 	bl	80033bc <_ZN11I2C_Bitbang9writeByteEh>
	writeByte( reg );
 8003440:	78bb      	ldrb	r3, [r7, #2]
 8003442:	4619      	mov	r1, r3
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff ffb9 	bl	80033bc <_ZN11I2C_Bitbang9writeByteEh>
	writeByte( value );
 800344a:	787b      	ldrb	r3, [r7, #1]
 800344c:	4619      	mov	r1, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff ffb4 	bl	80033bc <_ZN11I2C_Bitbang9writeByteEh>
	this->stop();
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff fecf 	bl	80031f8 <_ZN11I2C_Bitbang4stopEv>

	return true;
 800345a:	2301      	movs	r3, #1
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <_ZN11I2C_Bitbang12readRegisterEhh>:

I2C_RESULT
I2C_Bitbang::readRegister( I2C_ADDR addr, uint8_t reg ) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	70fb      	strb	r3, [r7, #3]
 8003470:	4613      	mov	r3, r2
 8003472:	70bb      	strb	r3, [r7, #2]
	start();
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff fe97 	bl	80031a8 <_ZN11I2C_Bitbang5startEv>
	writeByte( addr );
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff ff9c 	bl	80033bc <_ZN11I2C_Bitbang9writeByteEh>
	writeByte( reg );
 8003484:	78bb      	ldrb	r3, [r7, #2]
 8003486:	4619      	mov	r1, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ff97 	bl	80033bc <_ZN11I2C_Bitbang9writeByteEh>
	start();
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fe8a 	bl	80031a8 <_ZN11I2C_Bitbang5startEv>
	writeByte( addr | 1 );
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	b2db      	uxtb	r3, r3
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff ff8c 	bl	80033bc <_ZN11I2C_Bitbang9writeByteEh>
	uint8_t ret = readByte( false );
 80034a4:	2100      	movs	r1, #0
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ff1a 	bl	80032e0 <_ZN11I2C_Bitbang8readByteEb>
 80034ac:	4603      	mov	r3, r0
 80034ae:	73fb      	strb	r3, [r7, #15]
	stop();
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff fea1 	bl	80031f8 <_ZN11I2C_Bitbang4stopEv>

	return ret;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	b29b      	uxth	r3, r3
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <_ZN11I2C_Bitbang9writeDataEhPhh>:

bool
I2C_Bitbang::writeData( I2C_ADDR addr, uint8_t *data, uint8_t size ) {
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	461a      	mov	r2, r3
 80034ce:	460b      	mov	r3, r1
 80034d0:	72fb      	strb	r3, [r7, #11]
 80034d2:	4613      	mov	r3, r2
 80034d4:	72bb      	strb	r3, [r7, #10]
	start();
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7ff fe66 	bl	80031a8 <_ZN11I2C_Bitbang5startEv>
	writeByte( addr );
 80034dc:	7afb      	ldrb	r3, [r7, #11]
 80034de:	4619      	mov	r1, r3
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff ff6b 	bl	80033bc <_ZN11I2C_Bitbang9writeByteEh>
	for ( int i = 0 ; i < size; i++ ) {
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	7abb      	ldrb	r3, [r7, #10]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	da0b      	bge.n	800350a <_ZN11I2C_Bitbang9writeDataEhPhh+0x48>
		writeByte( data[i] );
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4413      	add	r3, r2
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	4619      	mov	r1, r3
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff ff5d 	bl	80033bc <_ZN11I2C_Bitbang9writeByteEh>
	for ( int i = 0 ; i < size; i++ ) {
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3301      	adds	r3, #1
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	e7ef      	b.n	80034ea <_ZN11I2C_Bitbang9writeDataEhPhh+0x28>
	}
	stop();
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff fe74 	bl	80031f8 <_ZN11I2C_Bitbang4stopEv>
	return true;
 8003510:	2301      	movs	r3, #1
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <_ZN10I2C_Device7setAddrEh>:

	virtual ~I2C_Device();
	virtual void setAddr( I2C_ADDR addr ) { mAddr = addr; }
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	70fb      	strb	r3, [r7, #3]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	721a      	strb	r2, [r3, #8]
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr
	...

08003538 <_ZN10I2C_DeviceD1Ev>:
I2C_Device::I2C_Device( I2C_ADDR addr ) : mAddr( addr ) {
	// TODO Auto-generated constructor stub

}

I2C_Device::~I2C_Device() {
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	4a04      	ldr	r2, [pc, #16]	; (8003554 <_ZN10I2C_DeviceD1Ev+0x1c>)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	08009894 	.word	0x08009894

08003558 <_ZN10I2C_DeviceD0Ev>:
I2C_Device::~I2C_Device() {
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
}
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ffe9 	bl	8003538 <_ZN10I2C_DeviceD1Ev>
 8003566:	210c      	movs	r1, #12
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f005 f94c 	bl	8008806 <_ZdlPvj>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_ZN10I2C_Device13writeRegisterEhh>:

bool
I2C_Device::writeRegister( uint8_t reg, uint8_t value ) {
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	70fb      	strb	r3, [r7, #3]
 8003584:	4613      	mov	r3, r2
 8003586:	70bb      	strb	r3, [r7, #2]
	return mBus->writeRegister( mAddr, reg, value );
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6858      	ldr	r0, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	330c      	adds	r3, #12
 8003594:	681c      	ldr	r4, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7a19      	ldrb	r1, [r3, #8]
 800359a:	78bb      	ldrb	r3, [r7, #2]
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	47a0      	blx	r4
 80035a0:	4603      	mov	r3, r0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd90      	pop	{r4, r7, pc}

080035aa <_ZN10I2C_Device9writeDataEPhh>:

bool
I2C_Device::writeData( uint8_t *data, uint8_t size ) {
 80035aa:	b590      	push	{r4, r7, lr}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	4613      	mov	r3, r2
 80035b6:	71fb      	strb	r3, [r7, #7]
	return mBus->writeData( mAddr, data, size );
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6858      	ldr	r0, [r3, #4]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3308      	adds	r3, #8
 80035c4:	681c      	ldr	r4, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	7a19      	ldrb	r1, [r3, #8]
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	47a0      	blx	r4
 80035d0:	4603      	mov	r3, r0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd90      	pop	{r4, r7, pc}

080035da <_ZN10I2C_Device12readRegisterEh>:

I2C_RESULT
I2C_Device::readRegister( uint8_t reg ) {
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	460b      	mov	r3, r1
 80035e4:	70fb      	strb	r3, [r7, #3]
	return mBus->readRegister( mAddr, reg );
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6858      	ldr	r0, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3310      	adds	r3, #16
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	7a11      	ldrb	r1, [r2, #8]
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	4798      	blx	r3
 80035fc:	4603      	mov	r3, r0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <_ZN3LCD11sendCommandEh>:

#define LCD_DELAY 3


void
LCD::sendCommand( uint8_t command ) {
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (command&0xF0);
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f023 030f 	bic.w	r3, r3, #15
 8003618:	73fb      	strb	r3, [r7, #15]
	data_l = ((command<<4)&0xF0);
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;	// en=1, rs=0
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	f043 030c 	orr.w	r3, r3, #12
 8003626:	b2db      	uxtb	r3, r3
 8003628:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;	// en=0, rs=0
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	f043 0308 	orr.w	r3, r3, #8
 8003630:	b2db      	uxtb	r3, r3
 8003632:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;	// en=1, rs=0
 8003634:	7bbb      	ldrb	r3, [r7, #14]
 8003636:	f043 030c 	orr.w	r3, r3, #12
 800363a:	b2db      	uxtb	r3, r3
 800363c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;	// en=0, rs=0
 800363e:	7bbb      	ldrb	r3, [r7, #14]
 8003640:	f043 0308 	orr.w	r3, r3, #8
 8003644:	b2db      	uxtb	r3, r3
 8003646:	72fb      	strb	r3, [r7, #11]

	mLCD->writeData( data_t, 4 );
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6858      	ldr	r0, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	330c      	adds	r3, #12
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f107 0108 	add.w	r1, r7, #8
 800365a:	2204      	movs	r2, #4
 800365c:	4798      	blx	r3
	osDelay( LCD_DELAY );
 800365e:	2003      	movs	r0, #3
 8003660:	f002 fcd2 	bl	8006008 <osDelay>
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <_ZN3LCD9setCursorEhh>:
	sendCommand( 0x01 );
	osDelay( 2000 );
}

void
LCD::setCursor( uint8_t x, uint8_t y ) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
 8003678:	4613      	mov	r3, r2
 800367a:	70bb      	strb	r3, [r7, #2]
	int i = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
	switch ( y ) {
 8003680:	78bb      	ldrb	r3, [r7, #2]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d81e      	bhi.n	80036c4 <_ZN3LCD9setCursorEhh+0x58>
 8003686:	a201      	add	r2, pc, #4	; (adr r2, 800368c <_ZN3LCD9setCursorEhh+0x20>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036a7 	.word	0x080036a7
 8003694:	080036b1 	.word	0x080036b1
 8003698:	080036bb 	.word	0x080036bb
		case 0:
			sendCommand( 0x80 );
 800369c:	2180      	movs	r1, #128	; 0x80
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff ffb1 	bl	8003606 <_ZN3LCD11sendCommandEh>
			break;
 80036a4:	e00e      	b.n	80036c4 <_ZN3LCD9setCursorEhh+0x58>
		case 1:
			sendCommand( 0xC0 );
 80036a6:	21c0      	movs	r1, #192	; 0xc0
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7ff ffac 	bl	8003606 <_ZN3LCD11sendCommandEh>
			break;
 80036ae:	e009      	b.n	80036c4 <_ZN3LCD9setCursorEhh+0x58>
		case 2:
			sendCommand( 0x94 );
 80036b0:	2194      	movs	r1, #148	; 0x94
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ffa7 	bl	8003606 <_ZN3LCD11sendCommandEh>
			break;
 80036b8:	e004      	b.n	80036c4 <_ZN3LCD9setCursorEhh+0x58>
		case 3:
			sendCommand( 0xd4 );
 80036ba:	21d4      	movs	r1, #212	; 0xd4
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ffa2 	bl	8003606 <_ZN3LCD11sendCommandEh>
			break;
 80036c2:	bf00      	nop
	}

	for( i = 0; i < x; i++ ) {
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	da07      	bge.n	80036e0 <_ZN3LCD9setCursorEhh+0x74>
		sendCommand( 0x14 );
 80036d0:	2114      	movs	r1, #20
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ff97 	bl	8003606 <_ZN3LCD11sendCommandEh>
	for( i = 0; i < x; i++ ) {
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3301      	adds	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e7f3      	b.n	80036c8 <_ZN3LCD9setCursorEhh+0x5c>
	}
}
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <_ZN3LCD11writeStringEPc>:

	osDelay( 50 );
}

void
LCD::writeString( char *string ) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
	while ( *string ) {
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <_ZN3LCD11writeStringEPc+0x24>
		sendData( *string++ );
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	603a      	str	r2, [r7, #0]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	4619      	mov	r1, r3
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f805 	bl	8003714 <_ZN3LCD8sendDataEc>
	while ( *string ) {
 800370a:	e7f2      	b.n	80036f2 <_ZN3LCD11writeStringEPc+0xa>
	}
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <_ZN3LCD8sendDataEc>:

void
LCD::sendData( char data ) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = ( data & 0xF0 );
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	f023 030f 	bic.w	r3, r3, #15
 8003726:	73fb      	strb	r3, [r7, #15]
	data_l = ( ( data << 4 ) & 0xF0);
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;	// en=1, rs=0
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	f043 030d 	orr.w	r3, r3, #13
 8003734:	b2db      	uxtb	r3, r3
 8003736:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;	// en=0, rs=0
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	f043 0309 	orr.w	r3, r3, #9
 800373e:	b2db      	uxtb	r3, r3
 8003740:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;	// en=1, rs=0
 8003742:	7bbb      	ldrb	r3, [r7, #14]
 8003744:	f043 030d 	orr.w	r3, r3, #13
 8003748:	b2db      	uxtb	r3, r3
 800374a:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;	// en=0, rs=0
 800374c:	7bbb      	ldrb	r3, [r7, #14]
 800374e:	f043 0309 	orr.w	r3, r3, #9
 8003752:	b2db      	uxtb	r3, r3
 8003754:	72fb      	strb	r3, [r7, #11]

	mLCD->writeData( data_t, 4 );
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6858      	ldr	r0, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f107 0108 	add.w	r1, r7, #8
 8003768:	2204      	movs	r2, #4
 800376a:	4798      	blx	r3
	osDelay( LCD_DELAY );
 800376c:	2003      	movs	r0, #3
 800376e:	f002 fc4b 	bl	8006008 <osDelay>
}
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <_ZN3LCDC1EP10I2C_Device>:

LCD::LCD( I2C_Device *lcd ) : mLCD( lcd ), mCount( 0 ) {
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
 8003786:	4a07      	ldr	r2, [pc, #28]	; (80037a4 <_ZN3LCDC1EP10I2C_Device+0x28>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]
	// TODO Auto-generated constructor stub

}
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4618      	mov	r0, r3
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	080098b4 	.word	0x080098b4

080037a8 <_ZN3LCDD1Ev>:

LCD::~LCD() {
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	4a04      	ldr	r2, [pc, #16]	; (80037c4 <_ZN3LCDD1Ev+0x1c>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	080098b4 	.word	0x080098b4

080037c8 <_ZN3LCDD0Ev>:
LCD::~LCD() {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
}
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ffe9 	bl	80037a8 <_ZN3LCDD1Ev>
 80037d6:	210c      	movs	r1, #12
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f005 f814 	bl	8008806 <_ZdlPvj>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <_ZN3LCD10initializeEv>:
	sprintf( s, "Count %5d         ", mCount++ );
	writeString( s );
}

void
LCD::initialize() {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	osDelay( 500 );
 80037f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037f4:	f002 fc08 	bl	8006008 <osDelay>

	//enableBacklight( false );

	//osDelay( 2000 );

	sendCommand( 0x30 );
 80037f8:	2130      	movs	r1, #48	; 0x30
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff ff03 	bl	8003606 <_ZN3LCD11sendCommandEh>
	osDelay( 5 );
 8003800:	2005      	movs	r0, #5
 8003802:	f002 fc01 	bl	8006008 <osDelay>
	sendCommand( 0x30 );
 8003806:	2130      	movs	r1, #48	; 0x30
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff fefc 	bl	8003606 <_ZN3LCD11sendCommandEh>
	osDelay( 1 );
 800380e:	2001      	movs	r0, #1
 8003810:	f002 fbfa 	bl	8006008 <osDelay>
	sendCommand( 0x30 );
 8003814:	2130      	movs	r1, #48	; 0x30
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff fef5 	bl	8003606 <_ZN3LCD11sendCommandEh>
	osDelay( 10 );
 800381c:	200a      	movs	r0, #10
 800381e:	f002 fbf3 	bl	8006008 <osDelay>
	sendCommand( 0x20 );
 8003822:	2120      	movs	r1, #32
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff feee 	bl	8003606 <_ZN3LCD11sendCommandEh>
	osDelay( 10 );
 800382a:	200a      	movs	r0, #10
 800382c:	f002 fbec 	bl	8006008 <osDelay>

	sendCommand( 0x28 );
 8003830:	2128      	movs	r1, #40	; 0x28
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fee7 	bl	8003606 <_ZN3LCD11sendCommandEh>
	osDelay( 1 );
 8003838:	2001      	movs	r0, #1
 800383a:	f002 fbe5 	bl	8006008 <osDelay>
	sendCommand( 0x08 );
 800383e:	2108      	movs	r1, #8
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fee0 	bl	8003606 <_ZN3LCD11sendCommandEh>
	osDelay( 1 );
 8003846:	2001      	movs	r0, #1
 8003848:	f002 fbde 	bl	8006008 <osDelay>
	sendCommand( 0x01 );
 800384c:	2101      	movs	r1, #1
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fed9 	bl	8003606 <_ZN3LCD11sendCommandEh>
	osDelay( 1 );
 8003854:	2001      	movs	r0, #1
 8003856:	f002 fbd7 	bl	8006008 <osDelay>

	sendCommand( 0x06 );
 800385a:	2106      	movs	r1, #6
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff fed2 	bl	8003606 <_ZN3LCD11sendCommandEh>
	osDelay( 1 );
 8003862:	2001      	movs	r0, #1
 8003864:	f002 fbd0 	bl	8006008 <osDelay>
	osDelay( 5 );

	enableBacklight( true );
	osDelay( 2000 );
	*/
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <_ZN3LED6enableEv>:

	virtual void enable() { setState( true ); }
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3310      	adds	r3, #16
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2101      	movs	r1, #1
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <_ZN3LED7disableEv>:
	virtual void disable() { setState( false ); }
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3310      	adds	r3, #16
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2100      	movs	r1, #0
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <_ZN3LEDC1Ev>:
 */

#include "main.h"
#include "LED.h"

LED::LED() : mPort( 0 ), mPin( 0 ), mCurrentState( 0 ) {
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <_ZN3LEDC1Ev+0x2c>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	811a      	strh	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub

}
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr
 80038d8:	080098c8 	.word	0x080098c8

080038dc <_ZN3LEDD1Ev>:

LED::LED( GPIO_TypeDef* port, uint16_t pin ) : mPort( port ), mPin( pin ), mCurrentState( 0 ) {

}

LED::~LED() {
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <_ZN3LEDD1Ev+0x1c>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	080098c8 	.word	0x080098c8

080038fc <_ZN3LEDD0Ev>:
LED::~LED() {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
}
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ffe9 	bl	80038dc <_ZN3LEDD1Ev>
 800390a:	2110      	movs	r1, #16
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f004 ff7a 	bl	8008806 <_ZdlPvj>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <_ZN3LED8setStateEb>:

void
LED::setState( bool enable ) {
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <_ZN3LED8setStateEb+0x24>
		HAL_GPIO_WritePin( mPort, mPin, GPIO_PIN_SET );
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6858      	ldr	r0, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	891b      	ldrh	r3, [r3, #8]
 8003936:	2201      	movs	r2, #1
 8003938:	4619      	mov	r1, r3
 800393a:	f001 f91c 	bl	8004b76 <HAL_GPIO_WritePin>
 800393e:	e007      	b.n	8003950 <_ZN3LED8setStateEb+0x34>
	} else {
		HAL_GPIO_WritePin( mPort, mPin, GPIO_PIN_RESET );
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6858      	ldr	r0, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	891b      	ldrh	r3, [r3, #8]
 8003948:	2200      	movs	r2, #0
 800394a:	4619      	mov	r1, r3
 800394c:	f001 f913 	bl	8004b76 <HAL_GPIO_WritePin>
	}

	mCurrentState = enable;
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	60da      	str	r2, [r3, #12]
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <_ZN8RunnableC1EP9Amplifier>:
 */

#include "Runnable.h"
#include "Amplifier.h"

Runnable::Runnable( Amplifier *amp ) : mAmplifier( amp ) {
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
 800396a:	4a06      	ldr	r2, [pc, #24]	; (8003984 <_ZN8RunnableC1EP9Amplifier+0x24>)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	605a      	str	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	080098e4 	.word	0x080098e4

08003988 <_ZN8RunnableD1Ev>:

Runnable::~Runnable() {
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	4a04      	ldr	r2, [pc, #16]	; (80039a4 <_ZN8RunnableD1Ev+0x1c>)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	080098e4 	.word	0x080098e4

080039a8 <_ZN9Amplifier8getAudioEv>:
public:
	Amplifier();
	virtual ~Amplifier();

	Display &getDisplay() { return mDisplay; }
	Audio &getAudio() { return mAudio; }
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	334c      	adds	r3, #76	; 0x4c
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr
	...

080039c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039c4:	f000 fdbc 	bl	8004540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039c8:	f000 f83e 	bl	8003a48 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039cc:	f000 f9f2 	bl	8003db4 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80039d0:	f000 f88a 	bl	8003ae8 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 80039d4:	f000 f8c4 	bl	8003b60 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 80039d8:	f000 f8fe 	bl	8003bd8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80039dc:	f000 f95a 	bl	8003c94 <_ZL12MX_TIM4_Initv>
  MX_USART3_UART_Init();
 80039e0:	f000 f9ba 	bl	8003d58 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  DEBUG_UART = huart3;
 80039e4:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <main+0x64>)
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <main+0x68>)
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	2344      	movs	r3, #68	; 0x44
 80039ee:	461a      	mov	r2, r3
 80039f0:	f005 f8b4 	bl	8008b5c <memcpy>

  DEBUG_STR( "Starting" );

  // The main amplifier class
  amplifier.initialize();
 80039f4:	480d      	ldr	r0, [pc, #52]	; (8003a2c <main+0x6c>)
 80039f6:	f7fd fce3 	bl	80013c0 <_ZN9Amplifier10initializeEv>
//  amplifier.getAudio().preTick();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80039fa:	f002 f9f3 	bl	8005de4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80039fe:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <main+0x70>)
 8003a00:	2100      	movs	r1, #0
 8003a02:	480c      	ldr	r0, [pc, #48]	; (8003a34 <main+0x74>)
 8003a04:	f002 fa54 	bl	8005eb0 <osThreadNew>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4a0b      	ldr	r2, [pc, #44]	; (8003a38 <main+0x78>)
 8003a0c:	6013      	str	r3, [r2, #0]

  /* creation of audioThread */
  audioThreadHandle = osThreadNew(startAudio, NULL, &audioThread_attributes);
 8003a0e:	4a0b      	ldr	r2, [pc, #44]	; (8003a3c <main+0x7c>)
 8003a10:	2100      	movs	r1, #0
 8003a12:	480b      	ldr	r0, [pc, #44]	; (8003a40 <main+0x80>)
 8003a14:	f002 fa4c 	bl	8005eb0 <osThreadNew>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <main+0x84>)
 8003a1c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003a1e:	f002 fa13 	bl	8005e48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003a22:	e7fe      	b.n	8003a22 <main+0x62>
 8003a24:	20000098 	.word	0x20000098
 8003a28:	2000021c 	.word	0x2000021c
 8003a2c:	20000268 	.word	0x20000268
 8003a30:	080098f4 	.word	0x080098f4
 8003a34:	08003f9d 	.word	0x08003f9d
 8003a38:	20000260 	.word	0x20000260
 8003a3c:	08009918 	.word	0x08009918
 8003a40:	08003fbd 	.word	0x08003fbd
 8003a44:	20000264 	.word	0x20000264

08003a48 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b090      	sub	sp, #64	; 0x40
 8003a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a4e:	f107 0318 	add.w	r3, r7, #24
 8003a52:	2228      	movs	r2, #40	; 0x28
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f005 f8a8 	bl	8008bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a5c:	1d3b      	adds	r3, r7, #4
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	605a      	str	r2, [r3, #4]
 8003a64:	609a      	str	r2, [r3, #8]
 8003a66:	60da      	str	r2, [r3, #12]
 8003a68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003a74:	2300      	movs	r3, #0
 8003a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8003a86:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a8c:	f107 0318 	add.w	r3, r7, #24
 8003a90:	4618      	mov	r0, r3
 8003a92:	f001 f889 	bl	8004ba8 <HAL_RCC_OscConfig>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8003aa6:	f000 faa5 	bl	8003ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003aaa:	230f      	movs	r3, #15
 8003aac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003ac0:	1d3b      	adds	r3, r7, #4
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 faf1 	bl	80050ac <HAL_RCC_ClockConfig>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8003ada:	f000 fa8b 	bl	8003ff4 <Error_Handler>
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3740      	adds	r7, #64	; 0x40
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003aec:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <_ZL12MX_SPI1_Initv+0x70>)
 8003aee:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <_ZL12MX_SPI1_Initv+0x74>)
 8003af0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003af2:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <_ZL12MX_SPI1_Initv+0x70>)
 8003af4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003af8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003afa:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <_ZL12MX_SPI1_Initv+0x70>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b00:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <_ZL12MX_SPI1_Initv+0x70>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b06:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <_ZL12MX_SPI1_Initv+0x70>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b0c:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <_ZL12MX_SPI1_Initv+0x70>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b12:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <_ZL12MX_SPI1_Initv+0x70>)
 8003b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <_ZL12MX_SPI1_Initv+0x70>)
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b20:	4b0d      	ldr	r3, [pc, #52]	; (8003b58 <_ZL12MX_SPI1_Initv+0x70>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <_ZL12MX_SPI1_Initv+0x70>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <_ZL12MX_SPI1_Initv+0x70>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <_ZL12MX_SPI1_Initv+0x70>)
 8003b34:	220a      	movs	r2, #10
 8003b36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b38:	4807      	ldr	r0, [pc, #28]	; (8003b58 <_ZL12MX_SPI1_Initv+0x70>)
 8003b3a:	f001 fc51 	bl	80053e0 <HAL_SPI_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf14      	ite	ne
 8003b44:	2301      	movne	r3, #1
 8003b46:	2300      	moveq	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8003b4e:	f000 fa51 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	200000dc 	.word	0x200000dc
 8003b5c:	40013000 	.word	0x40013000

08003b60 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003b64:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x70>)
 8003b66:	4a1b      	ldr	r2, [pc, #108]	; (8003bd4 <_ZL12MX_SPI2_Initv+0x74>)
 8003b68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003b6a:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x70>)
 8003b6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003b72:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x70>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x70>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b7e:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x70>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x70>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b8a:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x70>)
 8003b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b90:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b92:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x70>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b98:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x70>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x70>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x70>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x70>)
 8003bac:	220a      	movs	r2, #10
 8003bae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003bb0:	4807      	ldr	r0, [pc, #28]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x70>)
 8003bb2:	f001 fc15 	bl	80053e0 <HAL_SPI_Init>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bf14      	ite	ne
 8003bbc:	2301      	movne	r3, #1
 8003bbe:	2300      	moveq	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8003bc6:	f000 fa15 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000134 	.word	0x20000134
 8003bd4:	40003800 	.word	0x40003800

08003bd8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08c      	sub	sp, #48	; 0x30
 8003bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003bde:	f107 030c 	add.w	r3, r7, #12
 8003be2:	2224      	movs	r2, #36	; 0x24
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f004 ffe0 	bl	8008bac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bec:	1d3b      	adds	r3, r7, #4
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003bf4:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <_ZL12MX_TIM3_Initv+0xb4>)
 8003bf6:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <_ZL12MX_TIM3_Initv+0xb8>)
 8003bf8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003bfa:	4b24      	ldr	r3, [pc, #144]	; (8003c8c <_ZL12MX_TIM3_Initv+0xb4>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c00:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <_ZL12MX_TIM3_Initv+0xb4>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003c06:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <_ZL12MX_TIM3_Initv+0xb4>)
 8003c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c0e:	4b1f      	ldr	r3, [pc, #124]	; (8003c8c <_ZL12MX_TIM3_Initv+0xb4>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c14:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <_ZL12MX_TIM3_Initv+0xb4>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c22:	2301      	movs	r3, #1
 8003c24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c32:	2301      	movs	r3, #1
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c36:	2300      	movs	r3, #0
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003c3e:	f107 030c 	add.w	r3, r7, #12
 8003c42:	4619      	mov	r1, r3
 8003c44:	4811      	ldr	r0, [pc, #68]	; (8003c8c <_ZL12MX_TIM3_Initv+0xb4>)
 8003c46:	f001 fc4f 	bl	80054e8 <HAL_TIM_Encoder_Init>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf14      	ite	ne
 8003c50:	2301      	movne	r3, #1
 8003c52:	2300      	moveq	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8003c5a:	f000 f9cb 	bl	8003ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c66:	1d3b      	adds	r3, r7, #4
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4808      	ldr	r0, [pc, #32]	; (8003c8c <_ZL12MX_TIM3_Initv+0xb4>)
 8003c6c:	f001 ff60 	bl	8005b30 <HAL_TIMEx_MasterConfigSynchronization>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8003c80:	f000 f9b8 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c84:	bf00      	nop
 8003c86:	3730      	adds	r7, #48	; 0x30
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	2000018c 	.word	0x2000018c
 8003c90:	40000400 	.word	0x40000400

08003c94 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08c      	sub	sp, #48	; 0x30
 8003c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c9a:	f107 030c 	add.w	r3, r7, #12
 8003c9e:	2224      	movs	r2, #36	; 0x24
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f004 ff82 	bl	8008bac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ca8:	1d3b      	adds	r3, r7, #4
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003cb0:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <_ZL12MX_TIM4_Initv+0xbc>)
 8003cb2:	4a28      	ldr	r2, [pc, #160]	; (8003d54 <_ZL12MX_TIM4_Initv+0xc0>)
 8003cb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003cb6:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <_ZL12MX_TIM4_Initv+0xbc>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cbc:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <_ZL12MX_TIM4_Initv+0xbc>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003cc2:	4b23      	ldr	r3, [pc, #140]	; (8003d50 <_ZL12MX_TIM4_Initv+0xbc>)
 8003cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cca:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <_ZL12MX_TIM4_Initv+0xbc>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003cd0:	4b1f      	ldr	r3, [pc, #124]	; (8003d50 <_ZL12MX_TIM4_Initv+0xbc>)
 8003cd2:	2280      	movs	r2, #128	; 0x80
 8003cd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8003ce6:	2305      	movs	r3, #5
 8003ce8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003cea:	2300      	movs	r3, #0
 8003cec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8003cf6:	2305      	movs	r3, #5
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003cfa:	f107 030c 	add.w	r3, r7, #12
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4813      	ldr	r0, [pc, #76]	; (8003d50 <_ZL12MX_TIM4_Initv+0xbc>)
 8003d02:	f001 fbf1 	bl	80054e8 <HAL_TIM_Encoder_Init>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8003d16:	f000 f96d 	bl	8003ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d22:	1d3b      	adds	r3, r7, #4
 8003d24:	4619      	mov	r1, r3
 8003d26:	480a      	ldr	r0, [pc, #40]	; (8003d50 <_ZL12MX_TIM4_Initv+0xbc>)
 8003d28:	f001 ff02 	bl	8005b30 <HAL_TIMEx_MasterConfigSynchronization>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8003d3c:	f000 f95a 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

	// Star the volume control timer
	HAL_TIM_Encoder_Start_IT( &htim4, TIM_CHANNEL_ALL );
 8003d40:	213c      	movs	r1, #60	; 0x3c
 8003d42:	4803      	ldr	r0, [pc, #12]	; (8003d50 <_ZL12MX_TIM4_Initv+0xbc>)
 8003d44:	f001 fc72 	bl	800562c <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END TIM4_Init 2 */

}
 8003d48:	bf00      	nop
 8003d4a:	3730      	adds	r7, #48	; 0x30
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200001d4 	.word	0x200001d4
 8003d54:	40000800 	.word	0x40000800

08003d58 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003d5c:	4b13      	ldr	r3, [pc, #76]	; (8003dac <_ZL19MX_USART3_UART_Initv+0x54>)
 8003d5e:	4a14      	ldr	r2, [pc, #80]	; (8003db0 <_ZL19MX_USART3_UART_Initv+0x58>)
 8003d60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003d62:	4b12      	ldr	r3, [pc, #72]	; (8003dac <_ZL19MX_USART3_UART_Initv+0x54>)
 8003d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d6a:	4b10      	ldr	r3, [pc, #64]	; (8003dac <_ZL19MX_USART3_UART_Initv+0x54>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d70:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <_ZL19MX_USART3_UART_Initv+0x54>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d76:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <_ZL19MX_USART3_UART_Initv+0x54>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <_ZL19MX_USART3_UART_Initv+0x54>)
 8003d7e:	220c      	movs	r2, #12
 8003d80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d82:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <_ZL19MX_USART3_UART_Initv+0x54>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d88:	4b08      	ldr	r3, [pc, #32]	; (8003dac <_ZL19MX_USART3_UART_Initv+0x54>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d8e:	4807      	ldr	r0, [pc, #28]	; (8003dac <_ZL19MX_USART3_UART_Initv+0x54>)
 8003d90:	f001 ff4c 	bl	8005c2c <HAL_UART_Init>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bf14      	ite	ne
 8003d9a:	2301      	movne	r3, #1
 8003d9c:	2300      	moveq	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8003da4:	f000 f926 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003da8:	bf00      	nop
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	2000021c 	.word	0x2000021c
 8003db0:	40004800 	.word	0x40004800

08003db4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08a      	sub	sp, #40	; 0x28
 8003db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dba:	f107 0318 	add.w	r3, r7, #24
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	609a      	str	r2, [r3, #8]
 8003dc6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc8:	4b6e      	ldr	r3, [pc, #440]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	4a6d      	ldr	r2, [pc, #436]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003dce:	f043 0310 	orr.w	r3, r3, #16
 8003dd2:	6193      	str	r3, [r2, #24]
 8003dd4:	4b6b      	ldr	r3, [pc, #428]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de0:	4b68      	ldr	r3, [pc, #416]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	4a67      	ldr	r2, [pc, #412]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003de6:	f043 0304 	orr.w	r3, r3, #4
 8003dea:	6193      	str	r3, [r2, #24]
 8003dec:	4b65      	ldr	r3, [pc, #404]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003df8:	4b62      	ldr	r3, [pc, #392]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	4a61      	ldr	r2, [pc, #388]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e02:	6193      	str	r3, [r2, #24]
 8003e04:	4b5f      	ldr	r3, [pc, #380]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e10:	4b5c      	ldr	r3, [pc, #368]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	4a5b      	ldr	r2, [pc, #364]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003e16:	f043 0308 	orr.w	r3, r3, #8
 8003e1a:	6193      	str	r3, [r2, #24]
 8003e1c:	4b59      	ldr	r3, [pc, #356]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e28:	4b56      	ldr	r3, [pc, #344]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	4a55      	ldr	r2, [pc, #340]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003e2e:	f043 0320 	orr.w	r3, r3, #32
 8003e32:	6193      	str	r3, [r2, #24]
 8003e34:	4b53      	ldr	r3, [pc, #332]	; (8003f84 <_ZL12MX_GPIO_Initv+0x1d0>)
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET);
 8003e40:	2200      	movs	r2, #0
 8003e42:	2108      	movs	r1, #8
 8003e44:	4850      	ldr	r0, [pc, #320]	; (8003f88 <_ZL12MX_GPIO_Initv+0x1d4>)
 8003e46:	f000 fe96 	bl	8004b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f248 011f 	movw	r1, #32799	; 0x801f
 8003e50:	484e      	ldr	r0, [pc, #312]	; (8003f8c <_ZL12MX_GPIO_Initv+0x1d8>)
 8003e52:	f000 fe90 	bl	8004b76 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|USB_PULLUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 8003e56:	2200      	movs	r2, #0
 8003e58:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 8003e5c:	484c      	ldr	r0, [pc, #304]	; (8003f90 <_ZL12MX_GPIO_Initv+0x1dc>)
 8003e5e:	f000 fe8a 	bl	8004b76 <HAL_GPIO_WritePin>
                          |LED_POWER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_INPUT_6CH_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
 8003e62:	2200      	movs	r2, #0
 8003e64:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003e68:	484a      	ldr	r0, [pc, #296]	; (8003f94 <_ZL12MX_GPIO_Initv+0x1e0>)
 8003e6a:	f000 fe84 	bl	8004b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DECODER_RESET_GPIO_Port, DECODER_RESET_Pin, GPIO_PIN_SET);
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e74:	4844      	ldr	r0, [pc, #272]	; (8003f88 <_ZL12MX_GPIO_Initv+0x1d4>)
 8003e76:	f000 fe7e 	bl	8004b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCL_Pin|SDA_Pin, GPIO_PIN_SET);
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	21c0      	movs	r1, #192	; 0xc0
 8003e7e:	4845      	ldr	r0, [pc, #276]	; (8003f94 <_ZL12MX_GPIO_Initv+0x1e0>)
 8003e80:	f000 fe79 	bl	8004b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_MUTE_Pin DECODER_RESET_Pin */
  GPIO_InitStruct.Pin = LED_MUTE_Pin|DECODER_RESET_Pin;
 8003e84:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8003e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e92:	2302      	movs	r3, #2
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e96:	f107 0318 	add.w	r3, r7, #24
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	483a      	ldr	r0, [pc, #232]	; (8003f88 <_ZL12MX_GPIO_Initv+0x1d4>)
 8003e9e:	f000 fcbf 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PCM_Pin LED_DOLBY_Pin PA2 LED_MUTEA3_Pin
                           PA4 USB_PULLUP_Pin */
  GPIO_InitStruct.Pin = LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 8003ea2:	f248 031f 	movw	r3, #32799	; 0x801f
 8003ea6:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|USB_PULLUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb4:	f107 0318 	add.w	r3, r7, #24
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4834      	ldr	r0, [pc, #208]	; (8003f8c <_ZL12MX_GPIO_Initv+0x1d8>)
 8003ebc:	f000 fcb0 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pins : SETTING_BATTERY_Pin DECODER_IRQ_Pin */
  GPIO_InitStruct.Pin = SETTING_BATTERY_Pin|DECODER_IRQ_Pin;
 8003ec0:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8003ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ece:	f107 0318 	add.w	r3, r7, #24
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	482c      	ldr	r0, [pc, #176]	; (8003f88 <_ZL12MX_GPIO_Initv+0x1d4>)
 8003ed6:	f000 fca3 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_1_Pin LED_INPUT_2_Pin LED_INPUT_3_Pin LED_INPUT_4_Pin
                           LED_POWER_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 8003eda:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 8003ede:	61bb      	str	r3, [r7, #24]
                          |LED_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003eec:	f107 0318 	add.w	r3, r7, #24
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4827      	ldr	r0, [pc, #156]	; (8003f90 <_ZL12MX_GPIO_Initv+0x1dc>)
 8003ef4:	f000 fc94 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_POWER_Pin */
  GPIO_InitStruct.Pin = BUTTON_POWER_Pin;
 8003ef8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_POWER_GPIO_Port, &GPIO_InitStruct);
 8003f06:	f107 0318 	add.w	r3, r7, #24
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4820      	ldr	r0, [pc, #128]	; (8003f90 <_ZL12MX_GPIO_Initv+0x1dc>)
 8003f0e:	f000 fc87 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_6CH_Pin LED_RUN_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_6CH_Pin|LED_RUN_Pin;
 8003f12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f20:	2302      	movs	r3, #2
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f24:	f107 0318 	add.w	r3, r7, #24
 8003f28:	4619      	mov	r1, r3
 8003f2a:	481a      	ldr	r0, [pc, #104]	; (8003f94 <_ZL12MX_GPIO_Initv+0x1e0>)
 8003f2c:	f000 fc78 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_VOLUME_Pin BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_VOLUME_Pin|BUTTON_INPUT_Pin;
 8003f30:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8003f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f3e:	f107 0318 	add.w	r3, r7, #24
 8003f42:	4619      	mov	r1, r3
 8003f44:	4814      	ldr	r0, [pc, #80]	; (8003f98 <_ZL12MX_GPIO_Initv+0x1e4>)
 8003f46:	f000 fc6b 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCL_Pin SDA_Pin */
  GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8003f4a:	23c0      	movs	r3, #192	; 0xc0
 8003f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003f4e:	2311      	movs	r3, #17
 8003f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f56:	2303      	movs	r3, #3
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f5a:	f107 0318 	add.w	r3, r7, #24
 8003f5e:	4619      	mov	r1, r3
 8003f60:	480c      	ldr	r0, [pc, #48]	; (8003f94 <_ZL12MX_GPIO_Initv+0x1e0>)
 8003f62:	f000 fc5d 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = PWM_BACKLIGHT_Pin;
 8003f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWM_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8003f70:	f107 0318 	add.w	r3, r7, #24
 8003f74:	4619      	mov	r1, r3
 8003f76:	4807      	ldr	r0, [pc, #28]	; (8003f94 <_ZL12MX_GPIO_Initv+0x1e0>)
 8003f78:	f000 fc52 	bl	8004820 <HAL_GPIO_Init>

}
 8003f7c:	bf00      	nop
 8003f7e:	3728      	adds	r7, #40	; 0x28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40011000 	.word	0x40011000
 8003f8c:	40010800 	.word	0x40010800
 8003f90:	40011800 	.word	0x40011800
 8003f94:	40010c00 	.word	0x40010c00
 8003f98:	40011400 	.word	0x40011400

08003f9c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	amplifier.preTick();
 8003fa4:	4804      	ldr	r0, [pc, #16]	; (8003fb8 <_Z16StartDefaultTaskPv+0x1c>)
 8003fa6:	f7fd fae1 	bl	800156c <_ZN9Amplifier7preTickEv>

  for(;;)
  {
	amplifier.tick();
 8003faa:	4803      	ldr	r0, [pc, #12]	; (8003fb8 <_Z16StartDefaultTaskPv+0x1c>)
 8003fac:	f7fd fb16 	bl	80015dc <_ZN9Amplifier4tickEv>
    osDelay(1);
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	f002 f829 	bl	8006008 <osDelay>
	amplifier.tick();
 8003fb6:	e7f8      	b.n	8003faa <_Z16StartDefaultTaskPv+0xe>
 8003fb8:	20000268 	.word	0x20000268

08003fbc <_Z10startAudioPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAudio */
void startAudio(void *argument)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAudio */
	amplifier.getAudio().preTick();
 8003fc4:	480a      	ldr	r0, [pc, #40]	; (8003ff0 <_Z10startAudioPv+0x34>)
 8003fc6:	f7ff fcef 	bl	80039a8 <_ZN9Amplifier8getAudioEv>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	320c      	adds	r2, #12
 8003fd0:	6812      	ldr	r2, [r2, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	4790      	blx	r2

  /* Infinite loop */
  for(;;)
  {
	amplifier.getAudio().tick();
 8003fd6:	4806      	ldr	r0, [pc, #24]	; (8003ff0 <_Z10startAudioPv+0x34>)
 8003fd8:	f7ff fce6 	bl	80039a8 <_ZN9Amplifier8getAudioEv>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	3208      	adds	r2, #8
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	4790      	blx	r2
    osDelay(1);
 8003fe8:	2001      	movs	r0, #1
 8003fea:	f002 f80d 	bl	8006008 <osDelay>
	amplifier.getAudio().tick();
 8003fee:	e7f2      	b.n	8003fd6 <_Z10startAudioPv+0x1a>
 8003ff0:	20000268 	.word	0x20000268

08003ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ff8:	b672      	cpsid	i
}
 8003ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ffc:	e7fe      	b.n	8003ffc <Error_Handler+0x8>
	...

08004000 <_Z41__static_initialization_and_destruction_0ii>:
  {

  }
  /* USER CODE END Error_Handler_Debug */
}
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d10c      	bne.n	800402a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004016:	4293      	cmp	r3, r2
 8004018:	d107      	bne.n	800402a <_Z41__static_initialization_and_destruction_0ii+0x2a>
Amplifier amplifier;
 800401a:	4806      	ldr	r0, [pc, #24]	; (8004034 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800401c:	f7fd f8f4 	bl	8001208 <_ZN9AmplifierC1Ev>
 8004020:	4a05      	ldr	r2, [pc, #20]	; (8004038 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8004022:	4906      	ldr	r1, [pc, #24]	; (800403c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004024:	4803      	ldr	r0, [pc, #12]	; (8004034 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004026:	f004 fbe9 	bl	80087fc <__aeabi_atexit>
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000268 	.word	0x20000268
 8004038:	20000000 	.word	0x20000000
 800403c:	080012bd 	.word	0x080012bd

08004040 <_GLOBAL__sub_I_hspi1>:
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
 8004044:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004048:	2001      	movs	r0, #1
 800404a:	f7ff ffd9 	bl	8004000 <_Z41__static_initialization_and_destruction_0ii>
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004056:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <HAL_MspInit+0x68>)
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	4a17      	ldr	r2, [pc, #92]	; (80040b8 <HAL_MspInit+0x68>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	6193      	str	r3, [r2, #24]
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_MspInit+0x68>)
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <HAL_MspInit+0x68>)
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	4a11      	ldr	r2, [pc, #68]	; (80040b8 <HAL_MspInit+0x68>)
 8004074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004078:	61d3      	str	r3, [r2, #28]
 800407a:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <HAL_MspInit+0x68>)
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004082:	607b      	str	r3, [r7, #4]
 8004084:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004086:	2200      	movs	r2, #0
 8004088:	210f      	movs	r1, #15
 800408a:	f06f 0001 	mvn.w	r0, #1
 800408e:	f000 fb90 	bl	80047b2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004092:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <HAL_MspInit+0x6c>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	4a04      	ldr	r2, [pc, #16]	; (80040bc <HAL_MspInit+0x6c>)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40010000 	.word	0x40010000

080040c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08a      	sub	sp, #40	; 0x28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c8:	f107 0318 	add.w	r3, r7, #24
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a37      	ldr	r2, [pc, #220]	; (80041b8 <HAL_SPI_MspInit+0xf8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d130      	bne.n	8004142 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040e0:	4b36      	ldr	r3, [pc, #216]	; (80041bc <HAL_SPI_MspInit+0xfc>)
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	4a35      	ldr	r2, [pc, #212]	; (80041bc <HAL_SPI_MspInit+0xfc>)
 80040e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040ea:	6193      	str	r3, [r2, #24]
 80040ec:	4b33      	ldr	r3, [pc, #204]	; (80041bc <HAL_SPI_MspInit+0xfc>)
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040f8:	4b30      	ldr	r3, [pc, #192]	; (80041bc <HAL_SPI_MspInit+0xfc>)
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	4a2f      	ldr	r2, [pc, #188]	; (80041bc <HAL_SPI_MspInit+0xfc>)
 80040fe:	f043 0304 	orr.w	r3, r3, #4
 8004102:	6193      	str	r3, [r2, #24]
 8004104:	4b2d      	ldr	r3, [pc, #180]	; (80041bc <HAL_SPI_MspInit+0xfc>)
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004110:	23a0      	movs	r3, #160	; 0xa0
 8004112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004114:	2302      	movs	r3, #2
 8004116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004118:	2303      	movs	r3, #3
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800411c:	f107 0318 	add.w	r3, r7, #24
 8004120:	4619      	mov	r1, r3
 8004122:	4827      	ldr	r0, [pc, #156]	; (80041c0 <HAL_SPI_MspInit+0x100>)
 8004124:	f000 fb7c 	bl	8004820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004128:	2340      	movs	r3, #64	; 0x40
 800412a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800412c:	2300      	movs	r3, #0
 800412e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004134:	f107 0318 	add.w	r3, r7, #24
 8004138:	4619      	mov	r1, r3
 800413a:	4821      	ldr	r0, [pc, #132]	; (80041c0 <HAL_SPI_MspInit+0x100>)
 800413c:	f000 fb70 	bl	8004820 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004140:	e036      	b.n	80041b0 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1f      	ldr	r2, [pc, #124]	; (80041c4 <HAL_SPI_MspInit+0x104>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d131      	bne.n	80041b0 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_SPI_MspInit+0xfc>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	4a1a      	ldr	r2, [pc, #104]	; (80041bc <HAL_SPI_MspInit+0xfc>)
 8004152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004156:	61d3      	str	r3, [r2, #28]
 8004158:	4b18      	ldr	r3, [pc, #96]	; (80041bc <HAL_SPI_MspInit+0xfc>)
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004164:	4b15      	ldr	r3, [pc, #84]	; (80041bc <HAL_SPI_MspInit+0xfc>)
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	4a14      	ldr	r2, [pc, #80]	; (80041bc <HAL_SPI_MspInit+0xfc>)
 800416a:	f043 0308 	orr.w	r3, r3, #8
 800416e:	6193      	str	r3, [r2, #24]
 8004170:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_SPI_MspInit+0xfc>)
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800417c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004182:	2302      	movs	r3, #2
 8004184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004186:	2303      	movs	r3, #3
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800418a:	f107 0318 	add.w	r3, r7, #24
 800418e:	4619      	mov	r1, r3
 8004190:	480d      	ldr	r0, [pc, #52]	; (80041c8 <HAL_SPI_MspInit+0x108>)
 8004192:	f000 fb45 	bl	8004820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004196:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800419a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a4:	f107 0318 	add.w	r3, r7, #24
 80041a8:	4619      	mov	r1, r3
 80041aa:	4807      	ldr	r0, [pc, #28]	; (80041c8 <HAL_SPI_MspInit+0x108>)
 80041ac:	f000 fb38 	bl	8004820 <HAL_GPIO_Init>
}
 80041b0:	bf00      	nop
 80041b2:	3728      	adds	r7, #40	; 0x28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40013000 	.word	0x40013000
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40010800 	.word	0x40010800
 80041c4:	40003800 	.word	0x40003800
 80041c8:	40010c00 	.word	0x40010c00

080041cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08c      	sub	sp, #48	; 0x30
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d4:	f107 0318 	add.w	r3, r7, #24
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	609a      	str	r2, [r3, #8]
 80041e0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a43      	ldr	r2, [pc, #268]	; (80042f4 <HAL_TIM_Encoder_MspInit+0x128>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d13e      	bne.n	800426a <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041ec:	4b42      	ldr	r3, [pc, #264]	; (80042f8 <HAL_TIM_Encoder_MspInit+0x12c>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	4a41      	ldr	r2, [pc, #260]	; (80042f8 <HAL_TIM_Encoder_MspInit+0x12c>)
 80041f2:	f043 0302 	orr.w	r3, r3, #2
 80041f6:	61d3      	str	r3, [r2, #28]
 80041f8:	4b3f      	ldr	r3, [pc, #252]	; (80042f8 <HAL_TIM_Encoder_MspInit+0x12c>)
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004204:	4b3c      	ldr	r3, [pc, #240]	; (80042f8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	4a3b      	ldr	r2, [pc, #236]	; (80042f8 <HAL_TIM_Encoder_MspInit+0x12c>)
 800420a:	f043 0310 	orr.w	r3, r3, #16
 800420e:	6193      	str	r3, [r2, #24]
 8004210:	4b39      	ldr	r3, [pc, #228]	; (80042f8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800421c:	23c0      	movs	r3, #192	; 0xc0
 800421e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004220:	2300      	movs	r3, #0
 8004222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004224:	2300      	movs	r3, #0
 8004226:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004228:	f107 0318 	add.w	r3, r7, #24
 800422c:	4619      	mov	r1, r3
 800422e:	4833      	ldr	r0, [pc, #204]	; (80042fc <HAL_TIM_Encoder_MspInit+0x130>)
 8004230:	f000 faf6 	bl	8004820 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8004234:	4b32      	ldr	r3, [pc, #200]	; (8004300 <HAL_TIM_Encoder_MspInit+0x134>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8004250:	62bb      	str	r3, [r7, #40]	; 0x28
 8004252:	4a2b      	ldr	r2, [pc, #172]	; (8004300 <HAL_TIM_Encoder_MspInit+0x134>)
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004258:	2200      	movs	r2, #0
 800425a:	2105      	movs	r1, #5
 800425c:	201d      	movs	r0, #29
 800425e:	f000 faa8 	bl	80047b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004262:	201d      	movs	r0, #29
 8004264:	f000 fac1 	bl	80047ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004268:	e03f      	b.n	80042ea <HAL_TIM_Encoder_MspInit+0x11e>
  else if(htim_encoder->Instance==TIM4)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a25      	ldr	r2, [pc, #148]	; (8004304 <HAL_TIM_Encoder_MspInit+0x138>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d13a      	bne.n	80042ea <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004274:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <HAL_TIM_Encoder_MspInit+0x12c>)
 800427a:	f043 0304 	orr.w	r3, r3, #4
 800427e:	61d3      	str	r3, [r2, #28]
 8004280:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800428c:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <HAL_TIM_Encoder_MspInit+0x12c>)
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	4a19      	ldr	r2, [pc, #100]	; (80042f8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004292:	f043 0320 	orr.w	r3, r3, #32
 8004296:	6193      	str	r3, [r2, #24]
 8004298:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <HAL_TIM_Encoder_MspInit+0x12c>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80042a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80042a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042b2:	f107 0318 	add.w	r3, r7, #24
 80042b6:	4619      	mov	r1, r3
 80042b8:	4813      	ldr	r0, [pc, #76]	; (8004308 <HAL_TIM_Encoder_MspInit+0x13c>)
 80042ba:	f000 fab1 	bl	8004820 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <HAL_TIM_Encoder_MspInit+0x134>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80042ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d4:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <HAL_TIM_Encoder_MspInit+0x134>)
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80042da:	2200      	movs	r2, #0
 80042dc:	2105      	movs	r1, #5
 80042de:	201e      	movs	r0, #30
 80042e0:	f000 fa67 	bl	80047b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80042e4:	201e      	movs	r0, #30
 80042e6:	f000 fa80 	bl	80047ea <HAL_NVIC_EnableIRQ>
}
 80042ea:	bf00      	nop
 80042ec:	3730      	adds	r7, #48	; 0x30
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40000400 	.word	0x40000400
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40011000 	.word	0x40011000
 8004300:	40010000 	.word	0x40010000
 8004304:	40000800 	.word	0x40000800
 8004308:	40011400 	.word	0x40011400

0800430c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08a      	sub	sp, #40	; 0x28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004314:	f107 0314 	add.w	r3, r7, #20
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a25      	ldr	r2, [pc, #148]	; (80043bc <HAL_UART_MspInit+0xb0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d143      	bne.n	80043b4 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800432c:	4b24      	ldr	r3, [pc, #144]	; (80043c0 <HAL_UART_MspInit+0xb4>)
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	4a23      	ldr	r2, [pc, #140]	; (80043c0 <HAL_UART_MspInit+0xb4>)
 8004332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004336:	61d3      	str	r3, [r2, #28]
 8004338:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <HAL_UART_MspInit+0xb4>)
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004344:	4b1e      	ldr	r3, [pc, #120]	; (80043c0 <HAL_UART_MspInit+0xb4>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <HAL_UART_MspInit+0xb4>)
 800434a:	f043 0320 	orr.w	r3, r3, #32
 800434e:	6193      	str	r3, [r2, #24]
 8004350:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <HAL_UART_MspInit+0xb4>)
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800435c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004362:	2302      	movs	r3, #2
 8004364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004366:	2303      	movs	r3, #3
 8004368:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800436a:	f107 0314 	add.w	r3, r7, #20
 800436e:	4619      	mov	r1, r3
 8004370:	4814      	ldr	r0, [pc, #80]	; (80043c4 <HAL_UART_MspInit+0xb8>)
 8004372:	f000 fa55 	bl	8004820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800437a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004384:	f107 0314 	add.w	r3, r7, #20
 8004388:	4619      	mov	r1, r3
 800438a:	480e      	ldr	r0, [pc, #56]	; (80043c4 <HAL_UART_MspInit+0xb8>)
 800438c:	f000 fa48 	bl	8004820 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_ENABLE();
 8004390:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <HAL_UART_MspInit+0xbc>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
 80043ae:	4a06      	ldr	r2, [pc, #24]	; (80043c8 <HAL_UART_MspInit+0xbc>)
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80043b4:	bf00      	nop
 80043b6:	3728      	adds	r7, #40	; 0x28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40004800 	.word	0x40004800
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40011400 	.word	0x40011400
 80043c8:	40010000 	.word	0x40010000

080043cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043d0:	e7fe      	b.n	80043d0 <NMI_Handler+0x4>

080043d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043d2:	b480      	push	{r7}
 80043d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043d6:	e7fe      	b.n	80043d6 <HardFault_Handler+0x4>

080043d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043dc:	e7fe      	b.n	80043dc <MemManage_Handler+0x4>

080043de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043de:	b480      	push	{r7}
 80043e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043e2:	e7fe      	b.n	80043e2 <BusFault_Handler+0x4>

080043e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043e8:	e7fe      	b.n	80043e8 <UsageFault_Handler+0x4>

080043ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043ea:	b480      	push	{r7}
 80043ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043ee:	bf00      	nop
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043fa:	f000 f8e7 	bl	80045cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80043fe:	f003 fa3f 	bl	8007880 <xTaskGetSchedulerState>
 8004402:	4603      	mov	r3, r0
 8004404:	2b01      	cmp	r3, #1
 8004406:	d001      	beq.n	800440c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004408:	f003 ff9e 	bl	8008348 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800440c:	bf00      	nop
 800440e:	bd80      	pop	{r7, pc}

08004410 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004414:	4802      	ldr	r0, [pc, #8]	; (8004420 <TIM3_IRQHandler+0x10>)
 8004416:	f001 f9b7 	bl	8005788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800441a:	bf00      	nop
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	2000018c 	.word	0x2000018c

08004424 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004428:	4802      	ldr	r0, [pc, #8]	; (8004434 <TIM4_IRQHandler+0x10>)
 800442a:	f001 f9ad 	bl	8005788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	200001d4 	.word	0x200001d4

08004438 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
	return 1;
 800443c:	2301      	movs	r3, #1
}
 800443e:	4618      	mov	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr

08004446 <_kill>:

int _kill(int pid, int sig)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004450:	f004 fb2a 	bl	8008aa8 <__errno>
 8004454:	4603      	mov	r3, r0
 8004456:	2216      	movs	r2, #22
 8004458:	601a      	str	r2, [r3, #0]
	return -1;
 800445a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <_exit>:

void _exit (int status)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800446e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff ffe7 	bl	8004446 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004478:	e7fe      	b.n	8004478 <_exit+0x12>
	...

0800447c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004484:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <_sbrk+0x5c>)
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <_sbrk+0x60>)
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004490:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <_sbrk+0x64>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d102      	bne.n	800449e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <_sbrk+0x64>)
 800449a:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <_sbrk+0x68>)
 800449c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <_sbrk+0x64>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4413      	add	r3, r2
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d207      	bcs.n	80044bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044ac:	f004 fafc 	bl	8008aa8 <__errno>
 80044b0:	4603      	mov	r3, r0
 80044b2:	220c      	movs	r2, #12
 80044b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044ba:	e009      	b.n	80044d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044bc:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <_sbrk+0x64>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044c2:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <_sbrk+0x64>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4413      	add	r3, r2
 80044ca:	4a05      	ldr	r2, [pc, #20]	; (80044e0 <_sbrk+0x64>)
 80044cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044ce:	68fb      	ldr	r3, [r7, #12]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20010000 	.word	0x20010000
 80044dc:	00000400 	.word	0x00000400
 80044e0:	20000394 	.word	0x20000394
 80044e4:	200027b8 	.word	0x200027b8

080044e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044ec:	bf00      	nop
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044f4:	480c      	ldr	r0, [pc, #48]	; (8004528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80044f6:	490d      	ldr	r1, [pc, #52]	; (800452c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80044f8:	4a0d      	ldr	r2, [pc, #52]	; (8004530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80044fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044fc:	e002      	b.n	8004504 <LoopCopyDataInit>

080044fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004502:	3304      	adds	r3, #4

08004504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004508:	d3f9      	bcc.n	80044fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800450a:	4a0a      	ldr	r2, [pc, #40]	; (8004534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800450c:	4c0a      	ldr	r4, [pc, #40]	; (8004538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800450e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004510:	e001      	b.n	8004516 <LoopFillZerobss>

08004512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004514:	3204      	adds	r2, #4

08004516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004518:	d3fb      	bcc.n	8004512 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800451a:	f7ff ffe5 	bl	80044e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800451e:	f004 fac9 	bl	8008ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004522:	f7ff fa4d 	bl	80039c0 <main>
  bx lr
 8004526:	4770      	bx	lr
  ldr r0, =_sdata
 8004528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800452c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004530:	08009ba0 	.word	0x08009ba0
  ldr r2, =_sbss
 8004534:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8004538:	200027b8 	.word	0x200027b8

0800453c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800453c:	e7fe      	b.n	800453c <ADC1_2_IRQHandler>
	...

08004540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004544:	4b08      	ldr	r3, [pc, #32]	; (8004568 <HAL_Init+0x28>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a07      	ldr	r2, [pc, #28]	; (8004568 <HAL_Init+0x28>)
 800454a:	f043 0310 	orr.w	r3, r3, #16
 800454e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004550:	2003      	movs	r0, #3
 8004552:	f000 f923 	bl	800479c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004556:	200f      	movs	r0, #15
 8004558:	f000 f808 	bl	800456c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800455c:	f7ff fd78 	bl	8004050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40022000 	.word	0x40022000

0800456c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004574:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <HAL_InitTick+0x54>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <HAL_InitTick+0x58>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	4619      	mov	r1, r3
 800457e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004582:	fbb3 f3f1 	udiv	r3, r3, r1
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f93b 	bl	8004806 <HAL_SYSTICK_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e00e      	b.n	80045b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b0f      	cmp	r3, #15
 800459e:	d80a      	bhi.n	80045b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045a0:	2200      	movs	r2, #0
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045a8:	f000 f903 	bl	80047b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045ac:	4a06      	ldr	r2, [pc, #24]	; (80045c8 <HAL_InitTick+0x5c>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e000      	b.n	80045b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20000004 	.word	0x20000004
 80045c4:	2000000c 	.word	0x2000000c
 80045c8:	20000008 	.word	0x20000008

080045cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <HAL_IncTick+0x1c>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <HAL_IncTick+0x20>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4413      	add	r3, r2
 80045dc:	4a03      	ldr	r2, [pc, #12]	; (80045ec <HAL_IncTick+0x20>)
 80045de:	6013      	str	r3, [r2, #0]
}
 80045e0:	bf00      	nop
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr
 80045e8:	2000000c 	.word	0x2000000c
 80045ec:	20000398 	.word	0x20000398

080045f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  return uwTick;
 80045f4:	4b02      	ldr	r3, [pc, #8]	; (8004600 <HAL_GetTick+0x10>)
 80045f6:	681b      	ldr	r3, [r3, #0]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr
 8004600:	20000398 	.word	0x20000398

08004604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <__NVIC_SetPriorityGrouping+0x44>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004620:	4013      	ands	r3, r2
 8004622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800462c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004636:	4a04      	ldr	r2, [pc, #16]	; (8004648 <__NVIC_SetPriorityGrouping+0x44>)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	60d3      	str	r3, [r2, #12]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	e000ed00 	.word	0xe000ed00

0800464c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <__NVIC_GetPriorityGrouping+0x18>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	0a1b      	lsrs	r3, r3, #8
 8004656:	f003 0307 	and.w	r3, r3, #7
}
 800465a:	4618      	mov	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004676:	2b00      	cmp	r3, #0
 8004678:	db0b      	blt.n	8004692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	f003 021f 	and.w	r2, r3, #31
 8004680:	4906      	ldr	r1, [pc, #24]	; (800469c <__NVIC_EnableIRQ+0x34>)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2001      	movs	r0, #1
 800468a:	fa00 f202 	lsl.w	r2, r0, r2
 800468e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	e000e100 	.word	0xe000e100

080046a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	6039      	str	r1, [r7, #0]
 80046aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	db0a      	blt.n	80046ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	490c      	ldr	r1, [pc, #48]	; (80046ec <__NVIC_SetPriority+0x4c>)
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	0112      	lsls	r2, r2, #4
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	440b      	add	r3, r1
 80046c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046c8:	e00a      	b.n	80046e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4908      	ldr	r1, [pc, #32]	; (80046f0 <__NVIC_SetPriority+0x50>)
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	3b04      	subs	r3, #4
 80046d8:	0112      	lsls	r2, r2, #4
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	440b      	add	r3, r1
 80046de:	761a      	strb	r2, [r3, #24]
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	e000e100 	.word	0xe000e100
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	; 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f1c3 0307 	rsb	r3, r3, #7
 800470e:	2b04      	cmp	r3, #4
 8004710:	bf28      	it	cs
 8004712:	2304      	movcs	r3, #4
 8004714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3304      	adds	r3, #4
 800471a:	2b06      	cmp	r3, #6
 800471c:	d902      	bls.n	8004724 <NVIC_EncodePriority+0x30>
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3b03      	subs	r3, #3
 8004722:	e000      	b.n	8004726 <NVIC_EncodePriority+0x32>
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	401a      	ands	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800473c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	43d9      	mvns	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800474c:	4313      	orrs	r3, r2
         );
}
 800474e:	4618      	mov	r0, r3
 8004750:	3724      	adds	r7, #36	; 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3b01      	subs	r3, #1
 8004764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004768:	d301      	bcc.n	800476e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800476a:	2301      	movs	r3, #1
 800476c:	e00f      	b.n	800478e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800476e:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <SysTick_Config+0x40>)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3b01      	subs	r3, #1
 8004774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004776:	210f      	movs	r1, #15
 8004778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800477c:	f7ff ff90 	bl	80046a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004780:	4b05      	ldr	r3, [pc, #20]	; (8004798 <SysTick_Config+0x40>)
 8004782:	2200      	movs	r2, #0
 8004784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004786:	4b04      	ldr	r3, [pc, #16]	; (8004798 <SysTick_Config+0x40>)
 8004788:	2207      	movs	r2, #7
 800478a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	e000e010 	.word	0xe000e010

0800479c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff ff2d 	bl	8004604 <__NVIC_SetPriorityGrouping>
}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b086      	sub	sp, #24
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	4603      	mov	r3, r0
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
 80047be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047c4:	f7ff ff42 	bl	800464c <__NVIC_GetPriorityGrouping>
 80047c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	6978      	ldr	r0, [r7, #20]
 80047d0:	f7ff ff90 	bl	80046f4 <NVIC_EncodePriority>
 80047d4:	4602      	mov	r2, r0
 80047d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047da:	4611      	mov	r1, r2
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff ff5f 	bl	80046a0 <__NVIC_SetPriority>
}
 80047e2:	bf00      	nop
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	4603      	mov	r3, r0
 80047f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff ff35 	bl	8004668 <__NVIC_EnableIRQ>
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff ffa2 	bl	8004758 <SysTick_Config>
 8004814:	4603      	mov	r3, r0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004820:	b480      	push	{r7}
 8004822:	b08b      	sub	sp, #44	; 0x2c
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800482a:	2300      	movs	r3, #0
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800482e:	2300      	movs	r3, #0
 8004830:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004832:	e179      	b.n	8004b28 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004834:	2201      	movs	r2, #1
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	429a      	cmp	r2, r3
 800484e:	f040 8168 	bne.w	8004b22 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4a96      	ldr	r2, [pc, #600]	; (8004ab0 <HAL_GPIO_Init+0x290>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d05e      	beq.n	800491a <HAL_GPIO_Init+0xfa>
 800485c:	4a94      	ldr	r2, [pc, #592]	; (8004ab0 <HAL_GPIO_Init+0x290>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d875      	bhi.n	800494e <HAL_GPIO_Init+0x12e>
 8004862:	4a94      	ldr	r2, [pc, #592]	; (8004ab4 <HAL_GPIO_Init+0x294>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d058      	beq.n	800491a <HAL_GPIO_Init+0xfa>
 8004868:	4a92      	ldr	r2, [pc, #584]	; (8004ab4 <HAL_GPIO_Init+0x294>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d86f      	bhi.n	800494e <HAL_GPIO_Init+0x12e>
 800486e:	4a92      	ldr	r2, [pc, #584]	; (8004ab8 <HAL_GPIO_Init+0x298>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d052      	beq.n	800491a <HAL_GPIO_Init+0xfa>
 8004874:	4a90      	ldr	r2, [pc, #576]	; (8004ab8 <HAL_GPIO_Init+0x298>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d869      	bhi.n	800494e <HAL_GPIO_Init+0x12e>
 800487a:	4a90      	ldr	r2, [pc, #576]	; (8004abc <HAL_GPIO_Init+0x29c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d04c      	beq.n	800491a <HAL_GPIO_Init+0xfa>
 8004880:	4a8e      	ldr	r2, [pc, #568]	; (8004abc <HAL_GPIO_Init+0x29c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d863      	bhi.n	800494e <HAL_GPIO_Init+0x12e>
 8004886:	4a8e      	ldr	r2, [pc, #568]	; (8004ac0 <HAL_GPIO_Init+0x2a0>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d046      	beq.n	800491a <HAL_GPIO_Init+0xfa>
 800488c:	4a8c      	ldr	r2, [pc, #560]	; (8004ac0 <HAL_GPIO_Init+0x2a0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d85d      	bhi.n	800494e <HAL_GPIO_Init+0x12e>
 8004892:	2b12      	cmp	r3, #18
 8004894:	d82a      	bhi.n	80048ec <HAL_GPIO_Init+0xcc>
 8004896:	2b12      	cmp	r3, #18
 8004898:	d859      	bhi.n	800494e <HAL_GPIO_Init+0x12e>
 800489a:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <HAL_GPIO_Init+0x80>)
 800489c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a0:	0800491b 	.word	0x0800491b
 80048a4:	080048f5 	.word	0x080048f5
 80048a8:	08004907 	.word	0x08004907
 80048ac:	08004949 	.word	0x08004949
 80048b0:	0800494f 	.word	0x0800494f
 80048b4:	0800494f 	.word	0x0800494f
 80048b8:	0800494f 	.word	0x0800494f
 80048bc:	0800494f 	.word	0x0800494f
 80048c0:	0800494f 	.word	0x0800494f
 80048c4:	0800494f 	.word	0x0800494f
 80048c8:	0800494f 	.word	0x0800494f
 80048cc:	0800494f 	.word	0x0800494f
 80048d0:	0800494f 	.word	0x0800494f
 80048d4:	0800494f 	.word	0x0800494f
 80048d8:	0800494f 	.word	0x0800494f
 80048dc:	0800494f 	.word	0x0800494f
 80048e0:	0800494f 	.word	0x0800494f
 80048e4:	080048fd 	.word	0x080048fd
 80048e8:	08004911 	.word	0x08004911
 80048ec:	4a75      	ldr	r2, [pc, #468]	; (8004ac4 <HAL_GPIO_Init+0x2a4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80048f2:	e02c      	b.n	800494e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	623b      	str	r3, [r7, #32]
          break;
 80048fa:	e029      	b.n	8004950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	3304      	adds	r3, #4
 8004902:	623b      	str	r3, [r7, #32]
          break;
 8004904:	e024      	b.n	8004950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	3308      	adds	r3, #8
 800490c:	623b      	str	r3, [r7, #32]
          break;
 800490e:	e01f      	b.n	8004950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	330c      	adds	r3, #12
 8004916:	623b      	str	r3, [r7, #32]
          break;
 8004918:	e01a      	b.n	8004950 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d102      	bne.n	8004928 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004922:	2304      	movs	r3, #4
 8004924:	623b      	str	r3, [r7, #32]
          break;
 8004926:	e013      	b.n	8004950 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d105      	bne.n	800493c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004930:	2308      	movs	r3, #8
 8004932:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	611a      	str	r2, [r3, #16]
          break;
 800493a:	e009      	b.n	8004950 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800493c:	2308      	movs	r3, #8
 800493e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	615a      	str	r2, [r3, #20]
          break;
 8004946:	e003      	b.n	8004950 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004948:	2300      	movs	r3, #0
 800494a:	623b      	str	r3, [r7, #32]
          break;
 800494c:	e000      	b.n	8004950 <HAL_GPIO_Init+0x130>
          break;
 800494e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2bff      	cmp	r3, #255	; 0xff
 8004954:	d801      	bhi.n	800495a <HAL_GPIO_Init+0x13a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	e001      	b.n	800495e <HAL_GPIO_Init+0x13e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3304      	adds	r3, #4
 800495e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2bff      	cmp	r3, #255	; 0xff
 8004964:	d802      	bhi.n	800496c <HAL_GPIO_Init+0x14c>
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	e002      	b.n	8004972 <HAL_GPIO_Init+0x152>
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	3b08      	subs	r3, #8
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	210f      	movs	r1, #15
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	fa01 f303 	lsl.w	r3, r1, r3
 8004980:	43db      	mvns	r3, r3
 8004982:	401a      	ands	r2, r3
 8004984:	6a39      	ldr	r1, [r7, #32]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	431a      	orrs	r2, r3
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 80c1 	beq.w	8004b22 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80049a0:	4b49      	ldr	r3, [pc, #292]	; (8004ac8 <HAL_GPIO_Init+0x2a8>)
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	4a48      	ldr	r2, [pc, #288]	; (8004ac8 <HAL_GPIO_Init+0x2a8>)
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	6193      	str	r3, [r2, #24]
 80049ac:	4b46      	ldr	r3, [pc, #280]	; (8004ac8 <HAL_GPIO_Init+0x2a8>)
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80049b8:	4a44      	ldr	r2, [pc, #272]	; (8004acc <HAL_GPIO_Init+0x2ac>)
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	089b      	lsrs	r3, r3, #2
 80049be:	3302      	adds	r3, #2
 80049c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	220f      	movs	r2, #15
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	43db      	mvns	r3, r3
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4013      	ands	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a3c      	ldr	r2, [pc, #240]	; (8004ad0 <HAL_GPIO_Init+0x2b0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d01f      	beq.n	8004a24 <HAL_GPIO_Init+0x204>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a3b      	ldr	r2, [pc, #236]	; (8004ad4 <HAL_GPIO_Init+0x2b4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d019      	beq.n	8004a20 <HAL_GPIO_Init+0x200>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a3a      	ldr	r2, [pc, #232]	; (8004ad8 <HAL_GPIO_Init+0x2b8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d013      	beq.n	8004a1c <HAL_GPIO_Init+0x1fc>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a39      	ldr	r2, [pc, #228]	; (8004adc <HAL_GPIO_Init+0x2bc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00d      	beq.n	8004a18 <HAL_GPIO_Init+0x1f8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a38      	ldr	r2, [pc, #224]	; (8004ae0 <HAL_GPIO_Init+0x2c0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d007      	beq.n	8004a14 <HAL_GPIO_Init+0x1f4>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a37      	ldr	r2, [pc, #220]	; (8004ae4 <HAL_GPIO_Init+0x2c4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d101      	bne.n	8004a10 <HAL_GPIO_Init+0x1f0>
 8004a0c:	2305      	movs	r3, #5
 8004a0e:	e00a      	b.n	8004a26 <HAL_GPIO_Init+0x206>
 8004a10:	2306      	movs	r3, #6
 8004a12:	e008      	b.n	8004a26 <HAL_GPIO_Init+0x206>
 8004a14:	2304      	movs	r3, #4
 8004a16:	e006      	b.n	8004a26 <HAL_GPIO_Init+0x206>
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e004      	b.n	8004a26 <HAL_GPIO_Init+0x206>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e002      	b.n	8004a26 <HAL_GPIO_Init+0x206>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <HAL_GPIO_Init+0x206>
 8004a24:	2300      	movs	r3, #0
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	f002 0203 	and.w	r2, r2, #3
 8004a2c:	0092      	lsls	r2, r2, #2
 8004a2e:	4093      	lsls	r3, r2
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a36:	4925      	ldr	r1, [pc, #148]	; (8004acc <HAL_GPIO_Init+0x2ac>)
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	089b      	lsrs	r3, r3, #2
 8004a3c:	3302      	adds	r3, #2
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d006      	beq.n	8004a5e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004a50:	4b25      	ldr	r3, [pc, #148]	; (8004ae8 <HAL_GPIO_Init+0x2c8>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4924      	ldr	r1, [pc, #144]	; (8004ae8 <HAL_GPIO_Init+0x2c8>)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
 8004a5c:	e006      	b.n	8004a6c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004a5e:	4b22      	ldr	r3, [pc, #136]	; (8004ae8 <HAL_GPIO_Init+0x2c8>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	4920      	ldr	r1, [pc, #128]	; (8004ae8 <HAL_GPIO_Init+0x2c8>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d006      	beq.n	8004a86 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004a78:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <HAL_GPIO_Init+0x2c8>)
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	491a      	ldr	r1, [pc, #104]	; (8004ae8 <HAL_GPIO_Init+0x2c8>)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	604b      	str	r3, [r1, #4]
 8004a84:	e006      	b.n	8004a94 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004a86:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <HAL_GPIO_Init+0x2c8>)
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	4916      	ldr	r1, [pc, #88]	; (8004ae8 <HAL_GPIO_Init+0x2c8>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d025      	beq.n	8004aec <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004aa0:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <HAL_GPIO_Init+0x2c8>)
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	4910      	ldr	r1, [pc, #64]	; (8004ae8 <HAL_GPIO_Init+0x2c8>)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	608b      	str	r3, [r1, #8]
 8004aac:	e025      	b.n	8004afa <HAL_GPIO_Init+0x2da>
 8004aae:	bf00      	nop
 8004ab0:	10320000 	.word	0x10320000
 8004ab4:	10310000 	.word	0x10310000
 8004ab8:	10220000 	.word	0x10220000
 8004abc:	10210000 	.word	0x10210000
 8004ac0:	10120000 	.word	0x10120000
 8004ac4:	10110000 	.word	0x10110000
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	40010800 	.word	0x40010800
 8004ad4:	40010c00 	.word	0x40010c00
 8004ad8:	40011000 	.word	0x40011000
 8004adc:	40011400 	.word	0x40011400
 8004ae0:	40011800 	.word	0x40011800
 8004ae4:	40011c00 	.word	0x40011c00
 8004ae8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004aec:	4b15      	ldr	r3, [pc, #84]	; (8004b44 <HAL_GPIO_Init+0x324>)
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	43db      	mvns	r3, r3
 8004af4:	4913      	ldr	r1, [pc, #76]	; (8004b44 <HAL_GPIO_Init+0x324>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d006      	beq.n	8004b14 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b06:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <HAL_GPIO_Init+0x324>)
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	490e      	ldr	r1, [pc, #56]	; (8004b44 <HAL_GPIO_Init+0x324>)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60cb      	str	r3, [r1, #12]
 8004b12:	e006      	b.n	8004b22 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_GPIO_Init+0x324>)
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	4909      	ldr	r1, [pc, #36]	; (8004b44 <HAL_GPIO_Init+0x324>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	3301      	adds	r3, #1
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f47f ae7e 	bne.w	8004834 <HAL_GPIO_Init+0x14>
  }
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	372c      	adds	r7, #44	; 0x2c
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr
 8004b44:	40010400 	.word	0x40010400

08004b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	887b      	ldrh	r3, [r7, #2]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
 8004b64:	e001      	b.n	8004b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bc80      	pop	{r7}
 8004b74:	4770      	bx	lr

08004b76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	807b      	strh	r3, [r7, #2]
 8004b82:	4613      	mov	r3, r2
 8004b84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b86:	787b      	ldrb	r3, [r7, #1]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b8c:	887a      	ldrh	r2, [r7, #2]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004b92:	e003      	b.n	8004b9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b94:	887b      	ldrh	r3, [r7, #2]
 8004b96:	041a      	lsls	r2, r3, #16
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	611a      	str	r2, [r3, #16]
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	4770      	bx	lr
	...

08004ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e272      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8087 	beq.w	8004cd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bc8:	4b92      	ldr	r3, [pc, #584]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 030c 	and.w	r3, r3, #12
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d00c      	beq.n	8004bee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bd4:	4b8f      	ldr	r3, [pc, #572]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d112      	bne.n	8004c06 <HAL_RCC_OscConfig+0x5e>
 8004be0:	4b8c      	ldr	r3, [pc, #560]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bec:	d10b      	bne.n	8004c06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bee:	4b89      	ldr	r3, [pc, #548]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d06c      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x12c>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d168      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e24c      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0e:	d106      	bne.n	8004c1e <HAL_RCC_OscConfig+0x76>
 8004c10:	4b80      	ldr	r3, [pc, #512]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a7f      	ldr	r2, [pc, #508]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	e02e      	b.n	8004c7c <HAL_RCC_OscConfig+0xd4>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10c      	bne.n	8004c40 <HAL_RCC_OscConfig+0x98>
 8004c26:	4b7b      	ldr	r3, [pc, #492]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a7a      	ldr	r2, [pc, #488]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	4b78      	ldr	r3, [pc, #480]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a77      	ldr	r2, [pc, #476]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	e01d      	b.n	8004c7c <HAL_RCC_OscConfig+0xd4>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c48:	d10c      	bne.n	8004c64 <HAL_RCC_OscConfig+0xbc>
 8004c4a:	4b72      	ldr	r3, [pc, #456]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a71      	ldr	r2, [pc, #452]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	4b6f      	ldr	r3, [pc, #444]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a6e      	ldr	r2, [pc, #440]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	e00b      	b.n	8004c7c <HAL_RCC_OscConfig+0xd4>
 8004c64:	4b6b      	ldr	r3, [pc, #428]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a6a      	ldr	r2, [pc, #424]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	4b68      	ldr	r3, [pc, #416]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a67      	ldr	r2, [pc, #412]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d013      	beq.n	8004cac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c84:	f7ff fcb4 	bl	80045f0 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c8c:	f7ff fcb0 	bl	80045f0 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b64      	cmp	r3, #100	; 0x64
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e200      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9e:	4b5d      	ldr	r3, [pc, #372]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0xe4>
 8004caa:	e014      	b.n	8004cd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cac:	f7ff fca0 	bl	80045f0 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cb4:	f7ff fc9c 	bl	80045f0 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	; 0x64
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e1ec      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cc6:	4b53      	ldr	r3, [pc, #332]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x10c>
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d063      	beq.n	8004daa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ce2:	4b4c      	ldr	r3, [pc, #304]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004cee:	4b49      	ldr	r3, [pc, #292]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d11c      	bne.n	8004d34 <HAL_RCC_OscConfig+0x18c>
 8004cfa:	4b46      	ldr	r3, [pc, #280]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d116      	bne.n	8004d34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d06:	4b43      	ldr	r3, [pc, #268]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_RCC_OscConfig+0x176>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d001      	beq.n	8004d1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e1c0      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1e:	4b3d      	ldr	r3, [pc, #244]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4939      	ldr	r1, [pc, #228]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d32:	e03a      	b.n	8004daa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d020      	beq.n	8004d7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d3c:	4b36      	ldr	r3, [pc, #216]	; (8004e18 <HAL_RCC_OscConfig+0x270>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d42:	f7ff fc55 	bl	80045f0 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d4a:	f7ff fc51 	bl	80045f0 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e1a1      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5c:	4b2d      	ldr	r3, [pc, #180]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0f0      	beq.n	8004d4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d68:	4b2a      	ldr	r3, [pc, #168]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	4927      	ldr	r1, [pc, #156]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	600b      	str	r3, [r1, #0]
 8004d7c:	e015      	b.n	8004daa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d7e:	4b26      	ldr	r3, [pc, #152]	; (8004e18 <HAL_RCC_OscConfig+0x270>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d84:	f7ff fc34 	bl	80045f0 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d8c:	f7ff fc30 	bl	80045f0 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e180      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d9e:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d03a      	beq.n	8004e2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d019      	beq.n	8004df2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dbe:	4b17      	ldr	r3, [pc, #92]	; (8004e1c <HAL_RCC_OscConfig+0x274>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc4:	f7ff fc14 	bl	80045f0 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dcc:	f7ff fc10 	bl	80045f0 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e160      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dde:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004dea:	2001      	movs	r0, #1
 8004dec:	f000 fada 	bl	80053a4 <RCC_Delay>
 8004df0:	e01c      	b.n	8004e2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004df2:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <HAL_RCC_OscConfig+0x274>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df8:	f7ff fbfa 	bl	80045f0 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dfe:	e00f      	b.n	8004e20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e00:	f7ff fbf6 	bl	80045f0 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d908      	bls.n	8004e20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e146      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
 8004e12:	bf00      	nop
 8004e14:	40021000 	.word	0x40021000
 8004e18:	42420000 	.word	0x42420000
 8004e1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e20:	4b92      	ldr	r3, [pc, #584]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e9      	bne.n	8004e00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80a6 	beq.w	8004f86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e3e:	4b8b      	ldr	r3, [pc, #556]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10d      	bne.n	8004e66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e4a:	4b88      	ldr	r3, [pc, #544]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	4a87      	ldr	r2, [pc, #540]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e54:	61d3      	str	r3, [r2, #28]
 8004e56:	4b85      	ldr	r3, [pc, #532]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5e:	60bb      	str	r3, [r7, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e62:	2301      	movs	r3, #1
 8004e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e66:	4b82      	ldr	r3, [pc, #520]	; (8005070 <HAL_RCC_OscConfig+0x4c8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d118      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e72:	4b7f      	ldr	r3, [pc, #508]	; (8005070 <HAL_RCC_OscConfig+0x4c8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a7e      	ldr	r2, [pc, #504]	; (8005070 <HAL_RCC_OscConfig+0x4c8>)
 8004e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e7e:	f7ff fbb7 	bl	80045f0 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e86:	f7ff fbb3 	bl	80045f0 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b64      	cmp	r3, #100	; 0x64
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e103      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e98:	4b75      	ldr	r3, [pc, #468]	; (8005070 <HAL_RCC_OscConfig+0x4c8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0f0      	beq.n	8004e86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d106      	bne.n	8004eba <HAL_RCC_OscConfig+0x312>
 8004eac:	4b6f      	ldr	r3, [pc, #444]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	4a6e      	ldr	r2, [pc, #440]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	6213      	str	r3, [r2, #32]
 8004eb8:	e02d      	b.n	8004f16 <HAL_RCC_OscConfig+0x36e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCC_OscConfig+0x334>
 8004ec2:	4b6a      	ldr	r3, [pc, #424]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	4a69      	ldr	r2, [pc, #420]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	6213      	str	r3, [r2, #32]
 8004ece:	4b67      	ldr	r3, [pc, #412]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	4a66      	ldr	r2, [pc, #408]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004ed4:	f023 0304 	bic.w	r3, r3, #4
 8004ed8:	6213      	str	r3, [r2, #32]
 8004eda:	e01c      	b.n	8004f16 <HAL_RCC_OscConfig+0x36e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	2b05      	cmp	r3, #5
 8004ee2:	d10c      	bne.n	8004efe <HAL_RCC_OscConfig+0x356>
 8004ee4:	4b61      	ldr	r3, [pc, #388]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	4a60      	ldr	r2, [pc, #384]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004eea:	f043 0304 	orr.w	r3, r3, #4
 8004eee:	6213      	str	r3, [r2, #32]
 8004ef0:	4b5e      	ldr	r3, [pc, #376]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	4a5d      	ldr	r2, [pc, #372]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6213      	str	r3, [r2, #32]
 8004efc:	e00b      	b.n	8004f16 <HAL_RCC_OscConfig+0x36e>
 8004efe:	4b5b      	ldr	r3, [pc, #364]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	4a5a      	ldr	r2, [pc, #360]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	6213      	str	r3, [r2, #32]
 8004f0a:	4b58      	ldr	r3, [pc, #352]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	4a57      	ldr	r2, [pc, #348]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	f023 0304 	bic.w	r3, r3, #4
 8004f14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d015      	beq.n	8004f4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f1e:	f7ff fb67 	bl	80045f0 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f24:	e00a      	b.n	8004f3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f26:	f7ff fb63 	bl	80045f0 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e0b1      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3c:	4b4b      	ldr	r3, [pc, #300]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0ee      	beq.n	8004f26 <HAL_RCC_OscConfig+0x37e>
 8004f48:	e014      	b.n	8004f74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f4a:	f7ff fb51 	bl	80045f0 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f50:	e00a      	b.n	8004f68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f52:	f7ff fb4d 	bl	80045f0 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e09b      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f68:	4b40      	ldr	r3, [pc, #256]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1ee      	bne.n	8004f52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d105      	bne.n	8004f86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f7a:	4b3c      	ldr	r3, [pc, #240]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	4a3b      	ldr	r2, [pc, #236]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8087 	beq.w	800509e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f90:	4b36      	ldr	r3, [pc, #216]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 030c 	and.w	r3, r3, #12
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d061      	beq.n	8005060 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d146      	bne.n	8005032 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa4:	4b33      	ldr	r3, [pc, #204]	; (8005074 <HAL_RCC_OscConfig+0x4cc>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004faa:	f7ff fb21 	bl	80045f0 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb2:	f7ff fb1d 	bl	80045f0 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e06d      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fc4:	4b29      	ldr	r3, [pc, #164]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f0      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd8:	d108      	bne.n	8004fec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004fda:	4b24      	ldr	r3, [pc, #144]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	4921      	ldr	r1, [pc, #132]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fec:	4b1f      	ldr	r3, [pc, #124]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a19      	ldr	r1, [r3, #32]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	491b      	ldr	r1, [pc, #108]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8005000:	4313      	orrs	r3, r2
 8005002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005004:	4b1b      	ldr	r3, [pc, #108]	; (8005074 <HAL_RCC_OscConfig+0x4cc>)
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500a:	f7ff faf1 	bl	80045f0 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005012:	f7ff faed 	bl	80045f0 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e03d      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005024:	4b11      	ldr	r3, [pc, #68]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x46a>
 8005030:	e035      	b.n	800509e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005032:	4b10      	ldr	r3, [pc, #64]	; (8005074 <HAL_RCC_OscConfig+0x4cc>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005038:	f7ff fada 	bl	80045f0 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005040:	f7ff fad6 	bl	80045f0 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e026      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x498>
 800505e:	e01e      	b.n	800509e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d107      	bne.n	8005078 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e019      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
 800506c:	40021000 	.word	0x40021000
 8005070:	40007000 	.word	0x40007000
 8005074:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005078:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <HAL_RCC_OscConfig+0x500>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	429a      	cmp	r2, r3
 800508a:	d106      	bne.n	800509a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005096:	429a      	cmp	r2, r3
 8005098:	d001      	beq.n	800509e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40021000 	.word	0x40021000

080050ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0d0      	b.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050c0:	4b6a      	ldr	r3, [pc, #424]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d910      	bls.n	80050f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b67      	ldr	r3, [pc, #412]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 0207 	bic.w	r2, r3, #7
 80050d6:	4965      	ldr	r1, [pc, #404]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	4313      	orrs	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050de:	4b63      	ldr	r3, [pc, #396]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d001      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0b8      	b.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d020      	beq.n	800513e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005108:	4b59      	ldr	r3, [pc, #356]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	4a58      	ldr	r2, [pc, #352]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800510e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005120:	4b53      	ldr	r3, [pc, #332]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	4a52      	ldr	r2, [pc, #328]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005126:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800512a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800512c:	4b50      	ldr	r3, [pc, #320]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	494d      	ldr	r1, [pc, #308]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800513a:	4313      	orrs	r3, r2
 800513c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d040      	beq.n	80051cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d107      	bne.n	8005162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005152:	4b47      	ldr	r3, [pc, #284]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d115      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e07f      	b.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d107      	bne.n	800517a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800516a:	4b41      	ldr	r3, [pc, #260]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e073      	b.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517a:	4b3d      	ldr	r3, [pc, #244]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e06b      	b.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800518a:	4b39      	ldr	r3, [pc, #228]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f023 0203 	bic.w	r2, r3, #3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	4936      	ldr	r1, [pc, #216]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005198:	4313      	orrs	r3, r2
 800519a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800519c:	f7ff fa28 	bl	80045f0 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a4:	f7ff fa24 	bl	80045f0 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e053      	b.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ba:	4b2d      	ldr	r3, [pc, #180]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f003 020c 	and.w	r2, r3, #12
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d1eb      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051cc:	4b27      	ldr	r3, [pc, #156]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d210      	bcs.n	80051fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051da:	4b24      	ldr	r3, [pc, #144]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f023 0207 	bic.w	r2, r3, #7
 80051e2:	4922      	ldr	r1, [pc, #136]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ea:	4b20      	ldr	r3, [pc, #128]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d001      	beq.n	80051fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e032      	b.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005208:	4b19      	ldr	r3, [pc, #100]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4916      	ldr	r1, [pc, #88]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005226:	4b12      	ldr	r3, [pc, #72]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	490e      	ldr	r1, [pc, #56]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005236:	4313      	orrs	r3, r2
 8005238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800523a:	f000 f821 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 800523e:	4602      	mov	r2, r0
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	490a      	ldr	r1, [pc, #40]	; (8005274 <HAL_RCC_ClockConfig+0x1c8>)
 800524c:	5ccb      	ldrb	r3, [r1, r3]
 800524e:	fa22 f303 	lsr.w	r3, r2, r3
 8005252:	4a09      	ldr	r2, [pc, #36]	; (8005278 <HAL_RCC_ClockConfig+0x1cc>)
 8005254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005256:	4b09      	ldr	r3, [pc, #36]	; (800527c <HAL_RCC_ClockConfig+0x1d0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff f986 	bl	800456c <HAL_InitTick>

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40022000 	.word	0x40022000
 8005270:	40021000 	.word	0x40021000
 8005274:	0800993c 	.word	0x0800993c
 8005278:	20000004 	.word	0x20000004
 800527c:	20000008 	.word	0x20000008

08005280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005280:	b490      	push	{r4, r7}
 8005282:	b08a      	sub	sp, #40	; 0x28
 8005284:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005286:	4b29      	ldr	r3, [pc, #164]	; (800532c <HAL_RCC_GetSysClockFreq+0xac>)
 8005288:	1d3c      	adds	r4, r7, #4
 800528a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800528c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005290:	f240 2301 	movw	r3, #513	; 0x201
 8005294:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	2300      	movs	r3, #0
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	2300      	movs	r3, #0
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80052aa:	4b21      	ldr	r3, [pc, #132]	; (8005330 <HAL_RCC_GetSysClockFreq+0xb0>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f003 030c 	and.w	r3, r3, #12
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d002      	beq.n	80052c0 <HAL_RCC_GetSysClockFreq+0x40>
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d003      	beq.n	80052c6 <HAL_RCC_GetSysClockFreq+0x46>
 80052be:	e02b      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052c0:	4b1c      	ldr	r3, [pc, #112]	; (8005334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80052c2:	623b      	str	r3, [r7, #32]
      break;
 80052c4:	e02b      	b.n	800531e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	0c9b      	lsrs	r3, r3, #18
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	3328      	adds	r3, #40	; 0x28
 80052d0:	443b      	add	r3, r7
 80052d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80052d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d012      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80052e2:	4b13      	ldr	r3, [pc, #76]	; (8005330 <HAL_RCC_GetSysClockFreq+0xb0>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	0c5b      	lsrs	r3, r3, #17
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	3328      	adds	r3, #40	; 0x28
 80052ee:	443b      	add	r3, r7
 80052f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80052f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	4a0e      	ldr	r2, [pc, #56]	; (8005334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80052fa:	fb03 f202 	mul.w	r2, r3, r2
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
 8005306:	e004      	b.n	8005312 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4a0b      	ldr	r2, [pc, #44]	; (8005338 <HAL_RCC_GetSysClockFreq+0xb8>)
 800530c:	fb02 f303 	mul.w	r3, r2, r3
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	623b      	str	r3, [r7, #32]
      break;
 8005316:	e002      	b.n	800531e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005318:	4b08      	ldr	r3, [pc, #32]	; (800533c <HAL_RCC_GetSysClockFreq+0xbc>)
 800531a:	623b      	str	r3, [r7, #32]
      break;
 800531c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800531e:	6a3b      	ldr	r3, [r7, #32]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3728      	adds	r7, #40	; 0x28
 8005324:	46bd      	mov	sp, r7
 8005326:	bc90      	pop	{r4, r7}
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	080096a0 	.word	0x080096a0
 8005330:	40021000 	.word	0x40021000
 8005334:	00f42400 	.word	0x00f42400
 8005338:	003d0900 	.word	0x003d0900
 800533c:	007a1200 	.word	0x007a1200

08005340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005344:	4b02      	ldr	r3, [pc, #8]	; (8005350 <HAL_RCC_GetHCLKFreq+0x10>)
 8005346:	681b      	ldr	r3, [r3, #0]
}
 8005348:	4618      	mov	r0, r3
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr
 8005350:	20000004 	.word	0x20000004

08005354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005358:	f7ff fff2 	bl	8005340 <HAL_RCC_GetHCLKFreq>
 800535c:	4602      	mov	r2, r0
 800535e:	4b05      	ldr	r3, [pc, #20]	; (8005374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	0a1b      	lsrs	r3, r3, #8
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	4903      	ldr	r1, [pc, #12]	; (8005378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800536a:	5ccb      	ldrb	r3, [r1, r3]
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40021000 	.word	0x40021000
 8005378:	0800994c 	.word	0x0800994c

0800537c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005380:	f7ff ffde 	bl	8005340 <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	0adb      	lsrs	r3, r3, #11
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4903      	ldr	r1, [pc, #12]	; (80053a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40021000 	.word	0x40021000
 80053a0:	0800994c 	.word	0x0800994c

080053a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <RCC_Delay+0x34>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <RCC_Delay+0x38>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	0a5b      	lsrs	r3, r3, #9
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	fb02 f303 	mul.w	r3, r2, r3
 80053be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80053c0:	bf00      	nop
  }
  while (Delay --);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1e5a      	subs	r2, r3, #1
 80053c6:	60fa      	str	r2, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f9      	bne.n	80053c0 <RCC_Delay+0x1c>
}
 80053cc:	bf00      	nop
 80053ce:	bf00      	nop
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr
 80053d8:	20000004 	.word	0x20000004
 80053dc:	10624dd3 	.word	0x10624dd3

080053e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e076      	b.n	80054e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d108      	bne.n	800540c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005402:	d009      	beq.n	8005418 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	61da      	str	r2, [r3, #28]
 800540a:	e005      	b.n	8005418 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fe fe44 	bl	80040c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549c:	ea42 0103 	orr.w	r1, r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	0c1a      	lsrs	r2, r3, #16
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f002 0204 	and.w	r2, r2, #4
 80054be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e093      	b.n	8005624 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d106      	bne.n	8005516 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7fe fe5b 	bl	80041cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800552c:	f023 0307 	bic.w	r3, r3, #7
 8005530:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3304      	adds	r3, #4
 800553a:	4619      	mov	r1, r3
 800553c:	4610      	mov	r0, r2
 800553e:	f000 fa59 	bl	80059f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556a:	f023 0303 	bic.w	r3, r3, #3
 800556e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	4313      	orrs	r3, r2
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005588:	f023 030c 	bic.w	r3, r3, #12
 800558c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	4313      	orrs	r3, r2
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	011a      	lsls	r2, r3, #4
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	031b      	lsls	r3, r3, #12
 80055b8:	4313      	orrs	r3, r2
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	4313      	orrs	r3, r2
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800563c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005644:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800564c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005654:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d110      	bne.n	800567e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d102      	bne.n	8005668 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005662:	7b7b      	ldrb	r3, [r7, #13]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d001      	beq.n	800566c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e089      	b.n	8005780 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800567c:	e031      	b.n	80056e2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b04      	cmp	r3, #4
 8005682:	d110      	bne.n	80056a6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005684:	7bbb      	ldrb	r3, [r7, #14]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d102      	bne.n	8005690 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800568a:	7b3b      	ldrb	r3, [r7, #12]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d001      	beq.n	8005694 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e075      	b.n	8005780 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056a4:	e01d      	b.n	80056e2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d108      	bne.n	80056be <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056ac:	7bbb      	ldrb	r3, [r7, #14]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d105      	bne.n	80056be <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056b2:	7b7b      	ldrb	r3, [r7, #13]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d102      	bne.n	80056be <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056b8:	7b3b      	ldrb	r3, [r7, #12]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d001      	beq.n	80056c2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e05e      	b.n	8005780 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2202      	movs	r2, #2
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d010      	beq.n	8005710 <HAL_TIM_Encoder_Start_IT+0xe4>
 80056ee:	e01f      	b.n	8005730 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2201      	movs	r2, #1
 80056f6:	2100      	movs	r1, #0
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 f9f5 	bl	8005ae8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0202 	orr.w	r2, r2, #2
 800570c:	60da      	str	r2, [r3, #12]
      break;
 800570e:	e02e      	b.n	800576e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2201      	movs	r2, #1
 8005716:	2104      	movs	r1, #4
 8005718:	4618      	mov	r0, r3
 800571a:	f000 f9e5 	bl	8005ae8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0204 	orr.w	r2, r2, #4
 800572c:	60da      	str	r2, [r3, #12]
      break;
 800572e:	e01e      	b.n	800576e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2201      	movs	r2, #1
 8005736:	2100      	movs	r1, #0
 8005738:	4618      	mov	r0, r3
 800573a:	f000 f9d5 	bl	8005ae8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2201      	movs	r2, #1
 8005744:	2104      	movs	r1, #4
 8005746:	4618      	mov	r0, r3
 8005748:	f000 f9ce 	bl	8005ae8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0202 	orr.w	r2, r2, #2
 800575a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0204 	orr.w	r2, r2, #4
 800576a:	60da      	str	r2, [r3, #12]
      break;
 800576c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0201 	orr.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b02      	cmp	r3, #2
 800579c:	d122      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d11b      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0202 	mvn.w	r2, #2
 80057b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f8f6 	bl	80059bc <HAL_TIM_IC_CaptureCallback>
 80057d0:	e005      	b.n	80057de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f8e9 	bl	80059aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f8f8 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d122      	bne.n	8005838 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d11b      	bne.n	8005838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0204 	mvn.w	r2, #4
 8005808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f8cc 	bl	80059bc <HAL_TIM_IC_CaptureCallback>
 8005824:	e005      	b.n	8005832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f8bf 	bl	80059aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f8ce 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b08      	cmp	r3, #8
 8005844:	d122      	bne.n	800588c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b08      	cmp	r3, #8
 8005852:	d11b      	bne.n	800588c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0208 	mvn.w	r2, #8
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2204      	movs	r2, #4
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f8a2 	bl	80059bc <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f895 	bl	80059aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f8a4 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b10      	cmp	r3, #16
 8005898:	d122      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d11b      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0210 	mvn.w	r2, #16
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2208      	movs	r2, #8
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f878 	bl	80059bc <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f86b 	bl	80059aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f87a 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d10e      	bne.n	800590c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d107      	bne.n	800590c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0201 	mvn.w	r2, #1
 8005904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f846 	bl	8005998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005916:	2b80      	cmp	r3, #128	; 0x80
 8005918:	d10e      	bne.n	8005938 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005924:	2b80      	cmp	r3, #128	; 0x80
 8005926:	d107      	bne.n	8005938 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f971 	bl	8005c1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b40      	cmp	r3, #64	; 0x40
 8005944:	d10e      	bne.n	8005964 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005950:	2b40      	cmp	r3, #64	; 0x40
 8005952:	d107      	bne.n	8005964 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f83e 	bl	80059e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b20      	cmp	r3, #32
 8005970:	d10e      	bne.n	8005990 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b20      	cmp	r3, #32
 800597e:	d107      	bne.n	8005990 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0220 	mvn.w	r2, #32
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f93c 	bl	8005c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005990:	bf00      	nop
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr

080059aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr
	...

080059f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a33      	ldr	r2, [pc, #204]	; (8005ad4 <TIM_Base_SetConfig+0xe0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d013      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a32      	ldr	r2, [pc, #200]	; (8005ad8 <TIM_Base_SetConfig+0xe4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00f      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1a:	d00b      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a2f      	ldr	r2, [pc, #188]	; (8005adc <TIM_Base_SetConfig+0xe8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d007      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a2e      	ldr	r2, [pc, #184]	; (8005ae0 <TIM_Base_SetConfig+0xec>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a2d      	ldr	r2, [pc, #180]	; (8005ae4 <TIM_Base_SetConfig+0xf0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d108      	bne.n	8005a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a22      	ldr	r2, [pc, #136]	; (8005ad4 <TIM_Base_SetConfig+0xe0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d013      	beq.n	8005a76 <TIM_Base_SetConfig+0x82>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a21      	ldr	r2, [pc, #132]	; (8005ad8 <TIM_Base_SetConfig+0xe4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00f      	beq.n	8005a76 <TIM_Base_SetConfig+0x82>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5c:	d00b      	beq.n	8005a76 <TIM_Base_SetConfig+0x82>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a1e      	ldr	r2, [pc, #120]	; (8005adc <TIM_Base_SetConfig+0xe8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d007      	beq.n	8005a76 <TIM_Base_SetConfig+0x82>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a1d      	ldr	r2, [pc, #116]	; (8005ae0 <TIM_Base_SetConfig+0xec>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d003      	beq.n	8005a76 <TIM_Base_SetConfig+0x82>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a1c      	ldr	r2, [pc, #112]	; (8005ae4 <TIM_Base_SetConfig+0xf0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d108      	bne.n	8005a88 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <TIM_Base_SetConfig+0xe0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_Base_SetConfig+0xc8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a08      	ldr	r2, [pc, #32]	; (8005ad8 <TIM_Base_SetConfig+0xe4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d103      	bne.n	8005ac4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	615a      	str	r2, [r3, #20]
}
 8005aca:	bf00      	nop
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr
 8005ad4:	40012c00 	.word	0x40012c00
 8005ad8:	40013400 	.word	0x40013400
 8005adc:	40000400 	.word	0x40000400
 8005ae0:	40000800 	.word	0x40000800
 8005ae4:	40000c00 	.word	0x40000c00

08005ae8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	2201      	movs	r2, #1
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a1a      	ldr	r2, [r3, #32]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	401a      	ands	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a1a      	ldr	r2, [r3, #32]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b20:	431a      	orrs	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e050      	b.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a1b      	ldr	r2, [pc, #108]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d018      	beq.n	8005bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a19      	ldr	r2, [pc, #100]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d013      	beq.n	8005bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9e:	d00e      	beq.n	8005bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a15      	ldr	r2, [pc, #84]	; (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d009      	beq.n	8005bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a14      	ldr	r2, [pc, #80]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d004      	beq.n	8005bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a12      	ldr	r2, [pc, #72]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d10c      	bne.n	8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr
 8005bf4:	40012c00 	.word	0x40012c00
 8005bf8:	40013400 	.word	0x40013400
 8005bfc:	40000400 	.word	0x40000400
 8005c00:	40000800 	.word	0x40000800
 8005c04:	40000c00 	.word	0x40000c00

08005c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr

08005c1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr

08005c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e03f      	b.n	8005cbe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fe fb5a 	bl	800430c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2224      	movs	r2, #36	; 0x24
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f829 	bl	8005cc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695a      	ldr	r2, [r3, #20]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d02:	f023 030c 	bic.w	r3, r3, #12
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6812      	ldr	r2, [r2, #0]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a2c      	ldr	r2, [pc, #176]	; (8005ddc <UART_SetConfig+0x114>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d103      	bne.n	8005d38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d30:	f7ff fb24 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	e002      	b.n	8005d3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d38:	f7ff fb0c 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 8005d3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4613      	mov	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	009a      	lsls	r2, r3, #2
 8005d48:	441a      	add	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d54:	4a22      	ldr	r2, [pc, #136]	; (8005de0 <UART_SetConfig+0x118>)
 8005d56:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	0119      	lsls	r1, r3, #4
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009a      	lsls	r2, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d74:	4b1a      	ldr	r3, [pc, #104]	; (8005de0 <UART_SetConfig+0x118>)
 8005d76:	fba3 0302 	umull	r0, r3, r3, r2
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	2064      	movs	r0, #100	; 0x64
 8005d7e:	fb00 f303 	mul.w	r3, r0, r3
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	3332      	adds	r3, #50	; 0x32
 8005d88:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <UART_SetConfig+0x118>)
 8005d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d94:	4419      	add	r1, r3
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009a      	lsls	r2, r3, #2
 8005da0:	441a      	add	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dac:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <UART_SetConfig+0x118>)
 8005dae:	fba3 0302 	umull	r0, r3, r3, r2
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	2064      	movs	r0, #100	; 0x64
 8005db6:	fb00 f303 	mul.w	r3, r0, r3
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	3332      	adds	r3, #50	; 0x32
 8005dc0:	4a07      	ldr	r2, [pc, #28]	; (8005de0 <UART_SetConfig+0x118>)
 8005dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	f003 020f 	and.w	r2, r3, #15
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	440a      	add	r2, r1
 8005dd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005dd4:	bf00      	nop
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40013800 	.word	0x40013800
 8005de0:	51eb851f 	.word	0x51eb851f

08005de4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dea:	f3ef 8305 	mrs	r3, IPSR
 8005dee:	60bb      	str	r3, [r7, #8]
  return(result);
 8005df0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10f      	bne.n	8005e16 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfa:	607b      	str	r3, [r7, #4]
  return(result);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <osKernelInitialize+0x32>
 8005e02:	4b10      	ldr	r3, [pc, #64]	; (8005e44 <osKernelInitialize+0x60>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d109      	bne.n	8005e1e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e0e:	603b      	str	r3, [r7, #0]
  return(result);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005e16:	f06f 0305 	mvn.w	r3, #5
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	e00c      	b.n	8005e38 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e1e:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <osKernelInitialize+0x60>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d105      	bne.n	8005e32 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005e26:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <osKernelInitialize+0x60>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e002      	b.n	8005e38 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e38:	68fb      	ldr	r3, [r7, #12]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr
 8005e44:	2000039c 	.word	0x2000039c

08005e48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e4e:	f3ef 8305 	mrs	r3, IPSR
 8005e52:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10f      	bne.n	8005e7a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e5e:	607b      	str	r3, [r7, #4]
  return(result);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d109      	bne.n	8005e7a <osKernelStart+0x32>
 8005e66:	4b11      	ldr	r3, [pc, #68]	; (8005eac <osKernelStart+0x64>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d109      	bne.n	8005e82 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e72:	603b      	str	r3, [r7, #0]
  return(result);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005e7a:	f06f 0305 	mvn.w	r3, #5
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e00e      	b.n	8005ea0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e82:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <osKernelStart+0x64>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d107      	bne.n	8005e9a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005e8a:	4b08      	ldr	r3, [pc, #32]	; (8005eac <osKernelStart+0x64>)
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005e90:	f001 f894 	bl	8006fbc <vTaskStartScheduler>
      stat = osOK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	e002      	b.n	8005ea0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	2000039c 	.word	0x2000039c

08005eb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b092      	sub	sp, #72	; 0x48
 8005eb4:	af04      	add	r7, sp, #16
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ec0:	f3ef 8305 	mrs	r3, IPSR
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f040 8095 	bne.w	8005ff8 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ece:	f3ef 8310 	mrs	r3, PRIMASK
 8005ed2:	623b      	str	r3, [r7, #32]
  return(result);
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f040 808e 	bne.w	8005ff8 <osThreadNew+0x148>
 8005edc:	4b49      	ldr	r3, [pc, #292]	; (8006004 <osThreadNew+0x154>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d106      	bne.n	8005ef2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ee4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee8:	61fb      	str	r3, [r7, #28]
  return(result);
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f040 8083 	bne.w	8005ff8 <osThreadNew+0x148>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d07f      	beq.n	8005ff8 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 8005ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005efc:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005efe:	2318      	movs	r3, #24
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005f02:	2300      	movs	r3, #0
 8005f04:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005f06:	f107 031b 	add.w	r3, r7, #27
 8005f0a:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f10:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d045      	beq.n	8005fa4 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <osThreadNew+0x76>
        name = attr->name;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <osThreadNew+0x9c>
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3c:	2b38      	cmp	r3, #56	; 0x38
 8005f3e:	d805      	bhi.n	8005f4c <osThreadNew+0x9c>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <osThreadNew+0xa0>
        return (NULL);
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e054      	b.n	8005ffa <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	089b      	lsrs	r3, r3, #2
 8005f5e:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00e      	beq.n	8005f86 <osThreadNew+0xd6>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2bbb      	cmp	r3, #187	; 0xbb
 8005f6e:	d90a      	bls.n	8005f86 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d006      	beq.n	8005f86 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <osThreadNew+0xd6>
        mem = 1;
 8005f80:	2301      	movs	r3, #1
 8005f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f84:	e010      	b.n	8005fa8 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10c      	bne.n	8005fa8 <osThreadNew+0xf8>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d108      	bne.n	8005fa8 <osThreadNew+0xf8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <osThreadNew+0xf8>
          mem = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fa2:	e001      	b.n	8005fa8 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d110      	bne.n	8005fd0 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005fb6:	9202      	str	r2, [sp, #8]
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fe15 	bl	8006bf4 <xTaskCreateStatic>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	e013      	b.n	8005ff8 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d110      	bne.n	8005ff8 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	f107 0314 	add.w	r3, r7, #20
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fe5f 	bl	8006cac <xTaskCreate>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d001      	beq.n	8005ff8 <osThreadNew+0x148>
          hTask = NULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ff8:	697b      	ldr	r3, [r7, #20]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3738      	adds	r7, #56	; 0x38
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	2000039c 	.word	0x2000039c

08006008 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006010:	f3ef 8305 	mrs	r3, IPSR
 8006014:	613b      	str	r3, [r7, #16]
  return(result);
 8006016:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10f      	bne.n	800603c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800601c:	f3ef 8310 	mrs	r3, PRIMASK
 8006020:	60fb      	str	r3, [r7, #12]
  return(result);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d109      	bne.n	800603c <osDelay+0x34>
 8006028:	4b0d      	ldr	r3, [pc, #52]	; (8006060 <osDelay+0x58>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d109      	bne.n	8006044 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006030:	f3ef 8311 	mrs	r3, BASEPRI
 8006034:	60bb      	str	r3, [r7, #8]
  return(result);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <osDelay+0x3c>
    stat = osErrorISR;
 800603c:	f06f 0305 	mvn.w	r3, #5
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	e007      	b.n	8006054 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <osDelay+0x4c>
      vTaskDelay(ticks);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 ff80 	bl	8006f54 <vTaskDelay>
    }
  }

  return (stat);
 8006054:	697b      	ldr	r3, [r7, #20]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	2000039c 	.word	0x2000039c

08006064 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a07      	ldr	r2, [pc, #28]	; (8006090 <vApplicationGetIdleTaskMemory+0x2c>)
 8006074:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4a06      	ldr	r2, [pc, #24]	; (8006094 <vApplicationGetIdleTaskMemory+0x30>)
 800607a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006082:	601a      	str	r2, [r3, #0]
}
 8006084:	bf00      	nop
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	200003a0 	.word	0x200003a0
 8006094:	2000045c 	.word	0x2000045c

08006098 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4a07      	ldr	r2, [pc, #28]	; (80060c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80060a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	4a06      	ldr	r2, [pc, #24]	; (80060c8 <vApplicationGetTimerTaskMemory+0x30>)
 80060ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060b6:	601a      	str	r2, [r3, #0]
}
 80060b8:	bf00      	nop
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	2000085c 	.word	0x2000085c
 80060c8:	20000918 	.word	0x20000918

080060cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f103 0208 	add.w	r2, r3, #8
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f103 0208 	add.w	r2, r3, #8
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f103 0208 	add.w	r2, r3, #8
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	bc80      	pop	{r7}
 8006108:	4770      	bx	lr

0800610a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr

08006122 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	601a      	str	r2, [r3, #0]
}
 800615e:	bf00      	nop
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr

08006168 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800617e:	d103      	bne.n	8006188 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	e00c      	b.n	80061a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3308      	adds	r3, #8
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	e002      	b.n	8006196 <vListInsert+0x2e>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d2f6      	bcs.n	8006190 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	601a      	str	r2, [r3, #0]
}
 80061ce:	bf00      	nop
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr

080061d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6892      	ldr	r2, [r2, #8]
 80061ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6852      	ldr	r2, [r2, #4]
 80061f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d103      	bne.n	800620c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	1e5a      	subs	r2, r3, #1
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr
	...

0800622c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006256:	f001 fff9 	bl	800824c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006262:	68f9      	ldr	r1, [r7, #12]
 8006264:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006266:	fb01 f303 	mul.w	r3, r1, r3
 800626a:	441a      	add	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006286:	3b01      	subs	r3, #1
 8006288:	68f9      	ldr	r1, [r7, #12]
 800628a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	441a      	add	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	22ff      	movs	r2, #255	; 0xff
 800629a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	22ff      	movs	r2, #255	; 0xff
 80062a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d114      	bne.n	80062d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d01a      	beq.n	80062ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3310      	adds	r3, #16
 80062b8:	4618      	mov	r0, r3
 80062ba:	f001 f91b 	bl	80074f4 <xTaskRemoveFromEventList>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d012      	beq.n	80062ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80062c4:	4b0c      	ldr	r3, [pc, #48]	; (80062f8 <xQueueGenericReset+0xcc>)
 80062c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	e009      	b.n	80062ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	3310      	adds	r3, #16
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff fef6 	bl	80060cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3324      	adds	r3, #36	; 0x24
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7ff fef1 	bl	80060cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80062ea:	f001 ffdf 	bl	80082ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80062ee:	2301      	movs	r3, #1
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08e      	sub	sp, #56	; 0x38
 8006300:	af02      	add	r7, sp, #8
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <xQueueGenericCreateStatic+0x52>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <xQueueGenericCreateStatic+0x56>
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <xQueueGenericCreateStatic+0x58>
 8006352:	2300      	movs	r3, #0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10a      	bne.n	800636e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	623b      	str	r3, [r7, #32]
}
 800636a:	bf00      	nop
 800636c:	e7fe      	b.n	800636c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d102      	bne.n	800637a <xQueueGenericCreateStatic+0x7e>
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <xQueueGenericCreateStatic+0x82>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <xQueueGenericCreateStatic+0x84>
 800637e:	2300      	movs	r3, #0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	61fb      	str	r3, [r7, #28]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800639a:	2350      	movs	r3, #80	; 0x50
 800639c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b50      	cmp	r3, #80	; 0x50
 80063a2:	d00a      	beq.n	80063ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	61bb      	str	r3, [r7, #24]
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00d      	beq.n	80063e0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063cc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80063d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	4613      	mov	r3, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 f805 	bl	80063ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3730      	adds	r7, #48	; 0x30
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d103      	bne.n	8006406 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	e002      	b.n	800640c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006418:	2101      	movs	r1, #1
 800641a:	69b8      	ldr	r0, [r7, #24]
 800641c:	f7ff ff06 	bl	800622c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	78fa      	ldrb	r2, [r7, #3]
 8006424:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006428:	bf00      	nop
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08e      	sub	sp, #56	; 0x38
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800643e:	2300      	movs	r3, #0
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <xQueueGenericSend+0x32>
	__asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800645e:	bf00      	nop
 8006460:	e7fe      	b.n	8006460 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d103      	bne.n	8006470 <xQueueGenericSend+0x40>
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <xQueueGenericSend+0x44>
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <xQueueGenericSend+0x46>
 8006474:	2300      	movs	r3, #0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10a      	bne.n	8006490 <xQueueGenericSend+0x60>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d103      	bne.n	800649e <xQueueGenericSend+0x6e>
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <xQueueGenericSend+0x72>
 800649e:	2301      	movs	r3, #1
 80064a0:	e000      	b.n	80064a4 <xQueueGenericSend+0x74>
 80064a2:	2300      	movs	r3, #0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <xQueueGenericSend+0x8e>
	__asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	623b      	str	r3, [r7, #32]
}
 80064ba:	bf00      	nop
 80064bc:	e7fe      	b.n	80064bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064be:	f001 f9df 	bl	8007880 <xTaskGetSchedulerState>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d102      	bne.n	80064ce <xQueueGenericSend+0x9e>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <xQueueGenericSend+0xa2>
 80064ce:	2301      	movs	r3, #1
 80064d0:	e000      	b.n	80064d4 <xQueueGenericSend+0xa4>
 80064d2:	2300      	movs	r3, #0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <xQueueGenericSend+0xbe>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	61fb      	str	r3, [r7, #28]
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064ee:	f001 fead 	bl	800824c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d302      	bcc.n	8006504 <xQueueGenericSend+0xd4>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d129      	bne.n	8006558 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	68b9      	ldr	r1, [r7, #8]
 8006508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800650a:	f000 fa07 	bl	800691c <prvCopyDataToQueue>
 800650e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	2b00      	cmp	r3, #0
 8006516:	d010      	beq.n	800653a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	3324      	adds	r3, #36	; 0x24
 800651c:	4618      	mov	r0, r3
 800651e:	f000 ffe9 	bl	80074f4 <xTaskRemoveFromEventList>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d013      	beq.n	8006550 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006528:	4b3f      	ldr	r3, [pc, #252]	; (8006628 <xQueueGenericSend+0x1f8>)
 800652a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	e00a      	b.n	8006550 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653c:	2b00      	cmp	r3, #0
 800653e:	d007      	beq.n	8006550 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006540:	4b39      	ldr	r3, [pc, #228]	; (8006628 <xQueueGenericSend+0x1f8>)
 8006542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006550:	f001 feac 	bl	80082ac <vPortExitCritical>
				return pdPASS;
 8006554:	2301      	movs	r3, #1
 8006556:	e063      	b.n	8006620 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800655e:	f001 fea5 	bl	80082ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006562:	2300      	movs	r3, #0
 8006564:	e05c      	b.n	8006620 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006568:	2b00      	cmp	r3, #0
 800656a:	d106      	bne.n	800657a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800656c:	f107 0314 	add.w	r3, r7, #20
 8006570:	4618      	mov	r0, r3
 8006572:	f001 f823 	bl	80075bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006576:	2301      	movs	r3, #1
 8006578:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800657a:	f001 fe97 	bl	80082ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800657e:	f000 fd8d 	bl	800709c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006582:	f001 fe63 	bl	800824c <vPortEnterCritical>
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800658c:	b25b      	sxtb	r3, r3
 800658e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006592:	d103      	bne.n	800659c <xQueueGenericSend+0x16c>
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065a2:	b25b      	sxtb	r3, r3
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065a8:	d103      	bne.n	80065b2 <xQueueGenericSend+0x182>
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065b2:	f001 fe7b 	bl	80082ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065b6:	1d3a      	adds	r2, r7, #4
 80065b8:	f107 0314 	add.w	r3, r7, #20
 80065bc:	4611      	mov	r1, r2
 80065be:	4618      	mov	r0, r3
 80065c0:	f001 f812 	bl	80075e8 <xTaskCheckForTimeOut>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d124      	bne.n	8006614 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065cc:	f000 fa9e 	bl	8006b0c <prvIsQueueFull>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d018      	beq.n	8006608 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	3310      	adds	r3, #16
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	4611      	mov	r1, r2
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 ff38 	bl	8007454 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80065e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065e6:	f000 fa29 	bl	8006a3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065ea:	f000 fd65 	bl	80070b8 <xTaskResumeAll>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f47f af7c 	bne.w	80064ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80065f6:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <xQueueGenericSend+0x1f8>)
 80065f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	e772      	b.n	80064ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800660a:	f000 fa17 	bl	8006a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800660e:	f000 fd53 	bl	80070b8 <xTaskResumeAll>
 8006612:	e76c      	b.n	80064ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006616:	f000 fa11 	bl	8006a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800661a:	f000 fd4d 	bl	80070b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800661e:	2300      	movs	r3, #0
		}
	}
}
 8006620:	4618      	mov	r0, r3
 8006622:	3738      	adds	r7, #56	; 0x38
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	e000ed04 	.word	0xe000ed04

0800662c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08e      	sub	sp, #56	; 0x38
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d103      	bne.n	8006668 <xQueueGenericSendFromISR+0x3c>
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <xQueueGenericSendFromISR+0x40>
 8006668:	2301      	movs	r3, #1
 800666a:	e000      	b.n	800666e <xQueueGenericSendFromISR+0x42>
 800666c:	2300      	movs	r3, #0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10a      	bne.n	8006688 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	623b      	str	r3, [r7, #32]
}
 8006684:	bf00      	nop
 8006686:	e7fe      	b.n	8006686 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2b02      	cmp	r3, #2
 800668c:	d103      	bne.n	8006696 <xQueueGenericSendFromISR+0x6a>
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <xQueueGenericSendFromISR+0x6e>
 8006696:	2301      	movs	r3, #1
 8006698:	e000      	b.n	800669c <xQueueGenericSendFromISR+0x70>
 800669a:	2300      	movs	r3, #0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10a      	bne.n	80066b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	61fb      	str	r3, [r7, #28]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066b6:	f001 fe8b 	bl	80083d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80066ba:	f3ef 8211 	mrs	r2, BASEPRI
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	61ba      	str	r2, [r7, #24]
 80066d0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80066d2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066de:	429a      	cmp	r2, r3
 80066e0:	d302      	bcc.n	80066e8 <xQueueGenericSendFromISR+0xbc>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d12c      	bne.n	8006742 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066f8:	f000 f910 	bl	800691c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006704:	d112      	bne.n	800672c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	2b00      	cmp	r3, #0
 800670c:	d016      	beq.n	800673c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	3324      	adds	r3, #36	; 0x24
 8006712:	4618      	mov	r0, r3
 8006714:	f000 feee 	bl	80074f4 <xTaskRemoveFromEventList>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00e      	beq.n	800673c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	e007      	b.n	800673c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800672c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006730:	3301      	adds	r3, #1
 8006732:	b2db      	uxtb	r3, r3
 8006734:	b25a      	sxtb	r2, r3
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800673c:	2301      	movs	r3, #1
 800673e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006740:	e001      	b.n	8006746 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006742:	2300      	movs	r3, #0
 8006744:	637b      	str	r3, [r7, #52]	; 0x34
 8006746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006748:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006750:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006754:	4618      	mov	r0, r3
 8006756:	3738      	adds	r7, #56	; 0x38
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08c      	sub	sp, #48	; 0x30
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006768:	2300      	movs	r3, #0
 800676a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <xQueueReceive+0x30>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	623b      	str	r3, [r7, #32]
}
 8006788:	bf00      	nop
 800678a:	e7fe      	b.n	800678a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d103      	bne.n	800679a <xQueueReceive+0x3e>
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <xQueueReceive+0x42>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <xQueueReceive+0x44>
 800679e:	2300      	movs	r3, #0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <xQueueReceive+0x5e>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	61fb      	str	r3, [r7, #28]
}
 80067b6:	bf00      	nop
 80067b8:	e7fe      	b.n	80067b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067ba:	f001 f861 	bl	8007880 <xTaskGetSchedulerState>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d102      	bne.n	80067ca <xQueueReceive+0x6e>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <xQueueReceive+0x72>
 80067ca:	2301      	movs	r3, #1
 80067cc:	e000      	b.n	80067d0 <xQueueReceive+0x74>
 80067ce:	2300      	movs	r3, #0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10a      	bne.n	80067ea <xQueueReceive+0x8e>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	61bb      	str	r3, [r7, #24]
}
 80067e6:	bf00      	nop
 80067e8:	e7fe      	b.n	80067e8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ea:	f001 fd2f 	bl	800824c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d01f      	beq.n	800683a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067fa:	68b9      	ldr	r1, [r7, #8]
 80067fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067fe:	f000 f8f7 	bl	80069f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	1e5a      	subs	r2, r3, #1
 8006806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006808:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00f      	beq.n	8006832 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	3310      	adds	r3, #16
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fe6c 	bl	80074f4 <xTaskRemoveFromEventList>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d007      	beq.n	8006832 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006822:	4b3d      	ldr	r3, [pc, #244]	; (8006918 <xQueueReceive+0x1bc>)
 8006824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006832:	f001 fd3b 	bl	80082ac <vPortExitCritical>
				return pdPASS;
 8006836:	2301      	movs	r3, #1
 8006838:	e069      	b.n	800690e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006840:	f001 fd34 	bl	80082ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006844:	2300      	movs	r3, #0
 8006846:	e062      	b.n	800690e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800684e:	f107 0310 	add.w	r3, r7, #16
 8006852:	4618      	mov	r0, r3
 8006854:	f000 feb2 	bl	80075bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006858:	2301      	movs	r3, #1
 800685a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800685c:	f001 fd26 	bl	80082ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006860:	f000 fc1c 	bl	800709c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006864:	f001 fcf2 	bl	800824c <vPortEnterCritical>
 8006868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800686e:	b25b      	sxtb	r3, r3
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006874:	d103      	bne.n	800687e <xQueueReceive+0x122>
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006884:	b25b      	sxtb	r3, r3
 8006886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800688a:	d103      	bne.n	8006894 <xQueueReceive+0x138>
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006894:	f001 fd0a 	bl	80082ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006898:	1d3a      	adds	r2, r7, #4
 800689a:	f107 0310 	add.w	r3, r7, #16
 800689e:	4611      	mov	r1, r2
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fea1 	bl	80075e8 <xTaskCheckForTimeOut>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d123      	bne.n	80068f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ae:	f000 f917 	bl	8006ae0 <prvIsQueueEmpty>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d017      	beq.n	80068e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	3324      	adds	r3, #36	; 0x24
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	4611      	mov	r1, r2
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fdc7 	bl	8007454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068c8:	f000 f8b8 	bl	8006a3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068cc:	f000 fbf4 	bl	80070b8 <xTaskResumeAll>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d189      	bne.n	80067ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80068d6:	4b10      	ldr	r3, [pc, #64]	; (8006918 <xQueueReceive+0x1bc>)
 80068d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	e780      	b.n	80067ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80068e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ea:	f000 f8a7 	bl	8006a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068ee:	f000 fbe3 	bl	80070b8 <xTaskResumeAll>
 80068f2:	e77a      	b.n	80067ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80068f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068f6:	f000 f8a1 	bl	8006a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068fa:	f000 fbdd 	bl	80070b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006900:	f000 f8ee 	bl	8006ae0 <prvIsQueueEmpty>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	f43f af6f 	beq.w	80067ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800690c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800690e:	4618      	mov	r0, r3
 8006910:	3730      	adds	r7, #48	; 0x30
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	e000ed04 	.word	0xe000ed04

0800691c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006930:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10d      	bne.n	8006956 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d14d      	bne.n	80069de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	4618      	mov	r0, r3
 8006948:	f000 ffb8 	bl	80078bc <xTaskPriorityDisinherit>
 800694c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	605a      	str	r2, [r3, #4]
 8006954:	e043      	b.n	80069de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d119      	bne.n	8006990 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6898      	ldr	r0, [r3, #8]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006964:	461a      	mov	r2, r3
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	f002 f8f8 	bl	8008b5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006974:	441a      	add	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	429a      	cmp	r2, r3
 8006984:	d32b      	bcc.n	80069de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	609a      	str	r2, [r3, #8]
 800698e:	e026      	b.n	80069de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	68d8      	ldr	r0, [r3, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	461a      	mov	r2, r3
 800699a:	68b9      	ldr	r1, [r7, #8]
 800699c:	f002 f8de 	bl	8008b5c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a8:	425b      	negs	r3, r3
 80069aa:	441a      	add	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d207      	bcs.n	80069cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c4:	425b      	negs	r3, r3
 80069c6:	441a      	add	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d105      	bne.n	80069de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	3b01      	subs	r3, #1
 80069dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069e6:	697b      	ldr	r3, [r7, #20]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d018      	beq.n	8006a34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	441a      	add	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d303      	bcc.n	8006a24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68d9      	ldr	r1, [r3, #12]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6838      	ldr	r0, [r7, #0]
 8006a30:	f002 f894 	bl	8008b5c <memcpy>
	}
}
 8006a34:	bf00      	nop
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a44:	f001 fc02 	bl	800824c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a50:	e011      	b.n	8006a76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d012      	beq.n	8006a80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3324      	adds	r3, #36	; 0x24
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fd48 	bl	80074f4 <xTaskRemoveFromEventList>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a6a:	f000 fe1f 	bl	80076ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	dce9      	bgt.n	8006a52 <prvUnlockQueue+0x16>
 8006a7e:	e000      	b.n	8006a82 <prvUnlockQueue+0x46>
					break;
 8006a80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	22ff      	movs	r2, #255	; 0xff
 8006a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a8a:	f001 fc0f 	bl	80082ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a8e:	f001 fbdd 	bl	800824c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a9a:	e011      	b.n	8006ac0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d012      	beq.n	8006aca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3310      	adds	r3, #16
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 fd23 	bl	80074f4 <xTaskRemoveFromEventList>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ab4:	f000 fdfa 	bl	80076ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ac0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	dce9      	bgt.n	8006a9c <prvUnlockQueue+0x60>
 8006ac8:	e000      	b.n	8006acc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006aca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	22ff      	movs	r2, #255	; 0xff
 8006ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ad4:	f001 fbea 	bl	80082ac <vPortExitCritical>
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ae8:	f001 fbb0 	bl	800824c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006af4:	2301      	movs	r3, #1
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	e001      	b.n	8006afe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006afe:	f001 fbd5 	bl	80082ac <vPortExitCritical>

	return xReturn;
 8006b02:	68fb      	ldr	r3, [r7, #12]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b14:	f001 fb9a 	bl	800824c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d102      	bne.n	8006b2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b24:	2301      	movs	r3, #1
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	e001      	b.n	8006b2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b2e:	f001 fbbd 	bl	80082ac <vPortExitCritical>

	return xReturn;
 8006b32:	68fb      	ldr	r3, [r7, #12]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	e014      	b.n	8006b76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b4c:	4a0e      	ldr	r2, [pc, #56]	; (8006b88 <vQueueAddToRegistry+0x4c>)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10b      	bne.n	8006b70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b58:	490b      	ldr	r1, [pc, #44]	; (8006b88 <vQueueAddToRegistry+0x4c>)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b62:	4a09      	ldr	r2, [pc, #36]	; (8006b88 <vQueueAddToRegistry+0x4c>)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	4413      	add	r3, r2
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b6e:	e006      	b.n	8006b7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3301      	adds	r3, #1
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b07      	cmp	r3, #7
 8006b7a:	d9e7      	bls.n	8006b4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr
 8006b88:	20001118 	.word	0x20001118

08006b8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b9c:	f001 fb56 	bl	800824c <vPortEnterCritical>
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ba6:	b25b      	sxtb	r3, r3
 8006ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bac:	d103      	bne.n	8006bb6 <vQueueWaitForMessageRestricted+0x2a>
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bbc:	b25b      	sxtb	r3, r3
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc2:	d103      	bne.n	8006bcc <vQueueWaitForMessageRestricted+0x40>
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bcc:	f001 fb6e 	bl	80082ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d106      	bne.n	8006be6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	3324      	adds	r3, #36	; 0x24
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fc5b 	bl	800749c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006be6:	6978      	ldr	r0, [r7, #20]
 8006be8:	f7ff ff28 	bl	8006a3c <prvUnlockQueue>
	}
 8006bec:	bf00      	nop
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08e      	sub	sp, #56	; 0x38
 8006bf8:	af04      	add	r7, sp, #16
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10a      	bne.n	8006c1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	623b      	str	r3, [r7, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	e7fe      	b.n	8006c1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10a      	bne.n	8006c3a <xTaskCreateStatic+0x46>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	61fb      	str	r3, [r7, #28]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c3a:	23bc      	movs	r3, #188	; 0xbc
 8006c3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2bbc      	cmp	r3, #188	; 0xbc
 8006c42:	d00a      	beq.n	8006c5a <xTaskCreateStatic+0x66>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	61bb      	str	r3, [r7, #24]
}
 8006c56:	bf00      	nop
 8006c58:	e7fe      	b.n	8006c58 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01e      	beq.n	8006c9e <xTaskCreateStatic+0xaa>
 8006c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d01b      	beq.n	8006c9e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c6e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c78:	2300      	movs	r3, #0
 8006c7a:	9303      	str	r3, [sp, #12]
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	9302      	str	r3, [sp, #8]
 8006c80:	f107 0314 	add.w	r3, r7, #20
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 f851 	bl	8006d38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c98:	f000 f8ec 	bl	8006e74 <prvAddNewTaskToReadyList>
 8006c9c:	e001      	b.n	8006ca2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ca2:	697b      	ldr	r3, [r7, #20]
	}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3728      	adds	r7, #40	; 0x28
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08c      	sub	sp, #48	; 0x30
 8006cb0:	af04      	add	r7, sp, #16
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f001 fbc3 	bl	800844c <pvPortMalloc>
 8006cc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00e      	beq.n	8006cec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006cce:	20bc      	movs	r0, #188	; 0xbc
 8006cd0:	f001 fbbc 	bl	800844c <pvPortMalloc>
 8006cd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	631a      	str	r2, [r3, #48]	; 0x30
 8006ce2:	e005      	b.n	8006cf0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ce4:	6978      	ldr	r0, [r7, #20]
 8006ce6:	f001 fc75 	bl	80085d4 <vPortFree>
 8006cea:	e001      	b.n	8006cf0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cec:	2300      	movs	r3, #0
 8006cee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d017      	beq.n	8006d26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cfe:	88fa      	ldrh	r2, [r7, #6]
 8006d00:	2300      	movs	r3, #0
 8006d02:	9303      	str	r3, [sp, #12]
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	9302      	str	r3, [sp, #8]
 8006d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68b9      	ldr	r1, [r7, #8]
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 f80f 	bl	8006d38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d1a:	69f8      	ldr	r0, [r7, #28]
 8006d1c:	f000 f8aa 	bl	8006e74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d20:	2301      	movs	r3, #1
 8006d22:	61bb      	str	r3, [r7, #24]
 8006d24:	e002      	b.n	8006d2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d2c:	69bb      	ldr	r3, [r7, #24]
	}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3720      	adds	r7, #32
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	461a      	mov	r2, r3
 8006d50:	21a5      	movs	r1, #165	; 0xa5
 8006d52:	f001 ff2b 	bl	8008bac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d60:	3b01      	subs	r3, #1
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	f023 0307 	bic.w	r3, r3, #7
 8006d6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	617b      	str	r3, [r7, #20]
}
 8006d8c:	bf00      	nop
 8006d8e:	e7fe      	b.n	8006d8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d90:	2300      	movs	r3, #0
 8006d92:	61fb      	str	r3, [r7, #28]
 8006d94:	e012      	b.n	8006dbc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	7819      	ldrb	r1, [r3, #0]
 8006d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	4413      	add	r3, r2
 8006da4:	3334      	adds	r3, #52	; 0x34
 8006da6:	460a      	mov	r2, r1
 8006da8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	4413      	add	r3, r2
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d006      	beq.n	8006dc4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	3301      	adds	r3, #1
 8006dba:	61fb      	str	r3, [r7, #28]
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	2b0f      	cmp	r3, #15
 8006dc0:	d9e9      	bls.n	8006d96 <prvInitialiseNewTask+0x5e>
 8006dc2:	e000      	b.n	8006dc6 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006dc4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd0:	2b37      	cmp	r3, #55	; 0x37
 8006dd2:	d901      	bls.n	8006dd8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006dd4:	2337      	movs	r3, #55	; 0x37
 8006dd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ddc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	2200      	movs	r2, #0
 8006de8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	3304      	adds	r3, #4
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff f98b 	bl	800610a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df6:	3318      	adds	r3, #24
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7ff f986 	bl	800610a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	3354      	adds	r3, #84	; 0x54
 8006e28:	2260      	movs	r2, #96	; 0x60
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f001 febd 	bl	8008bac <memset>
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	4a0c      	ldr	r2, [pc, #48]	; (8006e68 <prvInitialiseNewTask+0x130>)
 8006e36:	659a      	str	r2, [r3, #88]	; 0x58
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	4a0c      	ldr	r2, [pc, #48]	; (8006e6c <prvInitialiseNewTask+0x134>)
 8006e3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	4a0b      	ldr	r2, [pc, #44]	; (8006e70 <prvInitialiseNewTask+0x138>)
 8006e42:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	68f9      	ldr	r1, [r7, #12]
 8006e48:	69b8      	ldr	r0, [r7, #24]
 8006e4a:	f001 f90b 	bl	8008064 <pxPortInitialiseStack>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e60:	bf00      	nop
 8006e62:	3720      	adds	r7, #32
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	080099b8 	.word	0x080099b8
 8006e6c:	080099d8 	.word	0x080099d8
 8006e70:	08009998 	.word	0x08009998

08006e74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e7c:	f001 f9e6 	bl	800824c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e80:	4b2d      	ldr	r3, [pc, #180]	; (8006f38 <prvAddNewTaskToReadyList+0xc4>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3301      	adds	r3, #1
 8006e86:	4a2c      	ldr	r2, [pc, #176]	; (8006f38 <prvAddNewTaskToReadyList+0xc4>)
 8006e88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e8a:	4b2c      	ldr	r3, [pc, #176]	; (8006f3c <prvAddNewTaskToReadyList+0xc8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d109      	bne.n	8006ea6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e92:	4a2a      	ldr	r2, [pc, #168]	; (8006f3c <prvAddNewTaskToReadyList+0xc8>)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e98:	4b27      	ldr	r3, [pc, #156]	; (8006f38 <prvAddNewTaskToReadyList+0xc4>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d110      	bne.n	8006ec2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ea0:	f000 fc28 	bl	80076f4 <prvInitialiseTaskLists>
 8006ea4:	e00d      	b.n	8006ec2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ea6:	4b26      	ldr	r3, [pc, #152]	; (8006f40 <prvAddNewTaskToReadyList+0xcc>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d109      	bne.n	8006ec2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006eae:	4b23      	ldr	r3, [pc, #140]	; (8006f3c <prvAddNewTaskToReadyList+0xc8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d802      	bhi.n	8006ec2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ebc:	4a1f      	ldr	r2, [pc, #124]	; (8006f3c <prvAddNewTaskToReadyList+0xc8>)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ec2:	4b20      	ldr	r3, [pc, #128]	; (8006f44 <prvAddNewTaskToReadyList+0xd0>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	4a1e      	ldr	r2, [pc, #120]	; (8006f44 <prvAddNewTaskToReadyList+0xd0>)
 8006eca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ecc:	4b1d      	ldr	r3, [pc, #116]	; (8006f44 <prvAddNewTaskToReadyList+0xd0>)
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	; (8006f48 <prvAddNewTaskToReadyList+0xd4>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d903      	bls.n	8006ee8 <prvAddNewTaskToReadyList+0x74>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	4a18      	ldr	r2, [pc, #96]	; (8006f48 <prvAddNewTaskToReadyList+0xd4>)
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4a15      	ldr	r2, [pc, #84]	; (8006f4c <prvAddNewTaskToReadyList+0xd8>)
 8006ef6:	441a      	add	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3304      	adds	r3, #4
 8006efc:	4619      	mov	r1, r3
 8006efe:	4610      	mov	r0, r2
 8006f00:	f7ff f90f 	bl	8006122 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f04:	f001 f9d2 	bl	80082ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f08:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <prvAddNewTaskToReadyList+0xcc>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00e      	beq.n	8006f2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <prvAddNewTaskToReadyList+0xc8>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d207      	bcs.n	8006f2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f1e:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <prvAddNewTaskToReadyList+0xdc>)
 8006f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	2000162c 	.word	0x2000162c
 8006f3c:	20001158 	.word	0x20001158
 8006f40:	20001638 	.word	0x20001638
 8006f44:	20001648 	.word	0x20001648
 8006f48:	20001634 	.word	0x20001634
 8006f4c:	2000115c 	.word	0x2000115c
 8006f50:	e000ed04 	.word	0xe000ed04

08006f54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d017      	beq.n	8006f96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f66:	4b13      	ldr	r3, [pc, #76]	; (8006fb4 <vTaskDelay+0x60>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <vTaskDelay+0x30>
	__asm volatile
 8006f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	60bb      	str	r3, [r7, #8]
}
 8006f80:	bf00      	nop
 8006f82:	e7fe      	b.n	8006f82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f84:	f000 f88a 	bl	800709c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f88:	2100      	movs	r1, #0
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fd04 	bl	8007998 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f90:	f000 f892 	bl	80070b8 <xTaskResumeAll>
 8006f94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d107      	bne.n	8006fac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f9c:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <vTaskDelay+0x64>)
 8006f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fac:	bf00      	nop
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	20001654 	.word	0x20001654
 8006fb8:	e000ed04 	.word	0xe000ed04

08006fbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08a      	sub	sp, #40	; 0x28
 8006fc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fca:	463a      	mov	r2, r7
 8006fcc:	1d39      	adds	r1, r7, #4
 8006fce:	f107 0308 	add.w	r3, r7, #8
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff f846 	bl	8006064 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	9202      	str	r2, [sp, #8]
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	460a      	mov	r2, r1
 8006fea:	4924      	ldr	r1, [pc, #144]	; (800707c <vTaskStartScheduler+0xc0>)
 8006fec:	4824      	ldr	r0, [pc, #144]	; (8007080 <vTaskStartScheduler+0xc4>)
 8006fee:	f7ff fe01 	bl	8006bf4 <xTaskCreateStatic>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	4a23      	ldr	r2, [pc, #140]	; (8007084 <vTaskStartScheduler+0xc8>)
 8006ff6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ff8:	4b22      	ldr	r3, [pc, #136]	; (8007084 <vTaskStartScheduler+0xc8>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007000:	2301      	movs	r3, #1
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	e001      	b.n	800700a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007006:	2300      	movs	r3, #0
 8007008:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d102      	bne.n	8007016 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007010:	f000 fd16 	bl	8007a40 <xTimerCreateTimerTask>
 8007014:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d11b      	bne.n	8007054 <vTaskStartScheduler+0x98>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	613b      	str	r3, [r7, #16]
}
 800702e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007030:	4b15      	ldr	r3, [pc, #84]	; (8007088 <vTaskStartScheduler+0xcc>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3354      	adds	r3, #84	; 0x54
 8007036:	4a15      	ldr	r2, [pc, #84]	; (800708c <vTaskStartScheduler+0xd0>)
 8007038:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800703a:	4b15      	ldr	r3, [pc, #84]	; (8007090 <vTaskStartScheduler+0xd4>)
 800703c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007040:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007042:	4b14      	ldr	r3, [pc, #80]	; (8007094 <vTaskStartScheduler+0xd8>)
 8007044:	2201      	movs	r2, #1
 8007046:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007048:	4b13      	ldr	r3, [pc, #76]	; (8007098 <vTaskStartScheduler+0xdc>)
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800704e:	f001 f88b 	bl	8008168 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007052:	e00e      	b.n	8007072 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800705a:	d10a      	bne.n	8007072 <vTaskStartScheduler+0xb6>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	60fb      	str	r3, [r7, #12]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <vTaskStartScheduler+0xb4>
}
 8007072:	bf00      	nop
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	080096b0 	.word	0x080096b0
 8007080:	080076c5 	.word	0x080076c5
 8007084:	20001650 	.word	0x20001650
 8007088:	20001158 	.word	0x20001158
 800708c:	20000018 	.word	0x20000018
 8007090:	2000164c 	.word	0x2000164c
 8007094:	20001638 	.word	0x20001638
 8007098:	20001630 	.word	0x20001630

0800709c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80070a0:	4b04      	ldr	r3, [pc, #16]	; (80070b4 <vTaskSuspendAll+0x18>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3301      	adds	r3, #1
 80070a6:	4a03      	ldr	r2, [pc, #12]	; (80070b4 <vTaskSuspendAll+0x18>)
 80070a8:	6013      	str	r3, [r2, #0]
}
 80070aa:	bf00      	nop
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bc80      	pop	{r7}
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20001654 	.word	0x20001654

080070b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070c6:	4b42      	ldr	r3, [pc, #264]	; (80071d0 <xTaskResumeAll+0x118>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10a      	bne.n	80070e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	603b      	str	r3, [r7, #0]
}
 80070e0:	bf00      	nop
 80070e2:	e7fe      	b.n	80070e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070e4:	f001 f8b2 	bl	800824c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070e8:	4b39      	ldr	r3, [pc, #228]	; (80071d0 <xTaskResumeAll+0x118>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	4a38      	ldr	r2, [pc, #224]	; (80071d0 <xTaskResumeAll+0x118>)
 80070f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070f2:	4b37      	ldr	r3, [pc, #220]	; (80071d0 <xTaskResumeAll+0x118>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d162      	bne.n	80071c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070fa:	4b36      	ldr	r3, [pc, #216]	; (80071d4 <xTaskResumeAll+0x11c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d05e      	beq.n	80071c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007102:	e02f      	b.n	8007164 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007104:	4b34      	ldr	r3, [pc, #208]	; (80071d8 <xTaskResumeAll+0x120>)
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3318      	adds	r3, #24
 8007110:	4618      	mov	r0, r3
 8007112:	f7ff f861 	bl	80061d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3304      	adds	r3, #4
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff f85c 	bl	80061d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007124:	4b2d      	ldr	r3, [pc, #180]	; (80071dc <xTaskResumeAll+0x124>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d903      	bls.n	8007134 <xTaskResumeAll+0x7c>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007130:	4a2a      	ldr	r2, [pc, #168]	; (80071dc <xTaskResumeAll+0x124>)
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007138:	4613      	mov	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4a27      	ldr	r2, [pc, #156]	; (80071e0 <xTaskResumeAll+0x128>)
 8007142:	441a      	add	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3304      	adds	r3, #4
 8007148:	4619      	mov	r1, r3
 800714a:	4610      	mov	r0, r2
 800714c:	f7fe ffe9 	bl	8006122 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007154:	4b23      	ldr	r3, [pc, #140]	; (80071e4 <xTaskResumeAll+0x12c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	429a      	cmp	r2, r3
 800715c:	d302      	bcc.n	8007164 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800715e:	4b22      	ldr	r3, [pc, #136]	; (80071e8 <xTaskResumeAll+0x130>)
 8007160:	2201      	movs	r2, #1
 8007162:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007164:	4b1c      	ldr	r3, [pc, #112]	; (80071d8 <xTaskResumeAll+0x120>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1cb      	bne.n	8007104 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007172:	f000 fb61 	bl	8007838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007176:	4b1d      	ldr	r3, [pc, #116]	; (80071ec <xTaskResumeAll+0x134>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d010      	beq.n	80071a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007182:	f000 f845 	bl	8007210 <xTaskIncrementTick>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800718c:	4b16      	ldr	r3, [pc, #88]	; (80071e8 <xTaskResumeAll+0x130>)
 800718e:	2201      	movs	r2, #1
 8007190:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	3b01      	subs	r3, #1
 8007196:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f1      	bne.n	8007182 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800719e:	4b13      	ldr	r3, [pc, #76]	; (80071ec <xTaskResumeAll+0x134>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80071a4:	4b10      	ldr	r3, [pc, #64]	; (80071e8 <xTaskResumeAll+0x130>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d009      	beq.n	80071c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80071ac:	2301      	movs	r3, #1
 80071ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071b0:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <xTaskResumeAll+0x138>)
 80071b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071c0:	f001 f874 	bl	80082ac <vPortExitCritical>

	return xAlreadyYielded;
 80071c4:	68bb      	ldr	r3, [r7, #8]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20001654 	.word	0x20001654
 80071d4:	2000162c 	.word	0x2000162c
 80071d8:	200015ec 	.word	0x200015ec
 80071dc:	20001634 	.word	0x20001634
 80071e0:	2000115c 	.word	0x2000115c
 80071e4:	20001158 	.word	0x20001158
 80071e8:	20001640 	.word	0x20001640
 80071ec:	2000163c 	.word	0x2000163c
 80071f0:	e000ed04 	.word	0xe000ed04

080071f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071fa:	4b04      	ldr	r3, [pc, #16]	; (800720c <xTaskGetTickCount+0x18>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007200:	687b      	ldr	r3, [r7, #4]
}
 8007202:	4618      	mov	r0, r3
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr
 800720c:	20001630 	.word	0x20001630

08007210 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007216:	2300      	movs	r3, #0
 8007218:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800721a:	4b51      	ldr	r3, [pc, #324]	; (8007360 <xTaskIncrementTick+0x150>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f040 808e 	bne.w	8007340 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007224:	4b4f      	ldr	r3, [pc, #316]	; (8007364 <xTaskIncrementTick+0x154>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3301      	adds	r3, #1
 800722a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800722c:	4a4d      	ldr	r2, [pc, #308]	; (8007364 <xTaskIncrementTick+0x154>)
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d120      	bne.n	800727a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007238:	4b4b      	ldr	r3, [pc, #300]	; (8007368 <xTaskIncrementTick+0x158>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <xTaskIncrementTick+0x48>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	603b      	str	r3, [r7, #0]
}
 8007254:	bf00      	nop
 8007256:	e7fe      	b.n	8007256 <xTaskIncrementTick+0x46>
 8007258:	4b43      	ldr	r3, [pc, #268]	; (8007368 <xTaskIncrementTick+0x158>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	4b43      	ldr	r3, [pc, #268]	; (800736c <xTaskIncrementTick+0x15c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a41      	ldr	r2, [pc, #260]	; (8007368 <xTaskIncrementTick+0x158>)
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	4a41      	ldr	r2, [pc, #260]	; (800736c <xTaskIncrementTick+0x15c>)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	4b40      	ldr	r3, [pc, #256]	; (8007370 <xTaskIncrementTick+0x160>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3301      	adds	r3, #1
 8007272:	4a3f      	ldr	r2, [pc, #252]	; (8007370 <xTaskIncrementTick+0x160>)
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	f000 fadf 	bl	8007838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800727a:	4b3e      	ldr	r3, [pc, #248]	; (8007374 <xTaskIncrementTick+0x164>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	429a      	cmp	r2, r3
 8007282:	d34e      	bcc.n	8007322 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007284:	4b38      	ldr	r3, [pc, #224]	; (8007368 <xTaskIncrementTick+0x158>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <xTaskIncrementTick+0x82>
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <xTaskIncrementTick+0x84>
 8007292:	2300      	movs	r3, #0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d004      	beq.n	80072a2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007298:	4b36      	ldr	r3, [pc, #216]	; (8007374 <xTaskIncrementTick+0x164>)
 800729a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800729e:	601a      	str	r2, [r3, #0]
					break;
 80072a0:	e03f      	b.n	8007322 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80072a2:	4b31      	ldr	r3, [pc, #196]	; (8007368 <xTaskIncrementTick+0x158>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d203      	bcs.n	80072c2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072ba:	4a2e      	ldr	r2, [pc, #184]	; (8007374 <xTaskIncrementTick+0x164>)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6013      	str	r3, [r2, #0]
						break;
 80072c0:	e02f      	b.n	8007322 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	3304      	adds	r3, #4
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe ff86 	bl	80061d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d004      	beq.n	80072de <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	3318      	adds	r3, #24
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fe ff7d 	bl	80061d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e2:	4b25      	ldr	r3, [pc, #148]	; (8007378 <xTaskIncrementTick+0x168>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d903      	bls.n	80072f2 <xTaskIncrementTick+0xe2>
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	4a22      	ldr	r2, [pc, #136]	; (8007378 <xTaskIncrementTick+0x168>)
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4a1f      	ldr	r2, [pc, #124]	; (800737c <xTaskIncrementTick+0x16c>)
 8007300:	441a      	add	r2, r3
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	3304      	adds	r3, #4
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f7fe ff0a 	bl	8006122 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007312:	4b1b      	ldr	r3, [pc, #108]	; (8007380 <xTaskIncrementTick+0x170>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	429a      	cmp	r2, r3
 800731a:	d3b3      	bcc.n	8007284 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800731c:	2301      	movs	r3, #1
 800731e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007320:	e7b0      	b.n	8007284 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007322:	4b17      	ldr	r3, [pc, #92]	; (8007380 <xTaskIncrementTick+0x170>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007328:	4914      	ldr	r1, [pc, #80]	; (800737c <xTaskIncrementTick+0x16c>)
 800732a:	4613      	mov	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	440b      	add	r3, r1
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d907      	bls.n	800734a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800733a:	2301      	movs	r3, #1
 800733c:	617b      	str	r3, [r7, #20]
 800733e:	e004      	b.n	800734a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007340:	4b10      	ldr	r3, [pc, #64]	; (8007384 <xTaskIncrementTick+0x174>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3301      	adds	r3, #1
 8007346:	4a0f      	ldr	r2, [pc, #60]	; (8007384 <xTaskIncrementTick+0x174>)
 8007348:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800734a:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <xTaskIncrementTick+0x178>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007352:	2301      	movs	r3, #1
 8007354:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007356:	697b      	ldr	r3, [r7, #20]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20001654 	.word	0x20001654
 8007364:	20001630 	.word	0x20001630
 8007368:	200015e4 	.word	0x200015e4
 800736c:	200015e8 	.word	0x200015e8
 8007370:	20001644 	.word	0x20001644
 8007374:	2000164c 	.word	0x2000164c
 8007378:	20001634 	.word	0x20001634
 800737c:	2000115c 	.word	0x2000115c
 8007380:	20001158 	.word	0x20001158
 8007384:	2000163c 	.word	0x2000163c
 8007388:	20001640 	.word	0x20001640

0800738c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007392:	4b2a      	ldr	r3, [pc, #168]	; (800743c <vTaskSwitchContext+0xb0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800739a:	4b29      	ldr	r3, [pc, #164]	; (8007440 <vTaskSwitchContext+0xb4>)
 800739c:	2201      	movs	r2, #1
 800739e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073a0:	e046      	b.n	8007430 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80073a2:	4b27      	ldr	r3, [pc, #156]	; (8007440 <vTaskSwitchContext+0xb4>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80073a8:	4b26      	ldr	r3, [pc, #152]	; (8007444 <vTaskSwitchContext+0xb8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60fb      	str	r3, [r7, #12]
 80073ae:	e010      	b.n	80073d2 <vTaskSwitchContext+0x46>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10a      	bne.n	80073cc <vTaskSwitchContext+0x40>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	607b      	str	r3, [r7, #4]
}
 80073c8:	bf00      	nop
 80073ca:	e7fe      	b.n	80073ca <vTaskSwitchContext+0x3e>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	491d      	ldr	r1, [pc, #116]	; (8007448 <vTaskSwitchContext+0xbc>)
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4613      	mov	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	440b      	add	r3, r1
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d0e4      	beq.n	80073b0 <vTaskSwitchContext+0x24>
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4613      	mov	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4a15      	ldr	r2, [pc, #84]	; (8007448 <vTaskSwitchContext+0xbc>)
 80073f2:	4413      	add	r3, r2
 80073f4:	60bb      	str	r3, [r7, #8]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	605a      	str	r2, [r3, #4]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	3308      	adds	r3, #8
 8007408:	429a      	cmp	r2, r3
 800740a:	d104      	bne.n	8007416 <vTaskSwitchContext+0x8a>
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	605a      	str	r2, [r3, #4]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	4a0b      	ldr	r2, [pc, #44]	; (800744c <vTaskSwitchContext+0xc0>)
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	4a08      	ldr	r2, [pc, #32]	; (8007444 <vTaskSwitchContext+0xb8>)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007426:	4b09      	ldr	r3, [pc, #36]	; (800744c <vTaskSwitchContext+0xc0>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3354      	adds	r3, #84	; 0x54
 800742c:	4a08      	ldr	r2, [pc, #32]	; (8007450 <vTaskSwitchContext+0xc4>)
 800742e:	6013      	str	r3, [r2, #0]
}
 8007430:	bf00      	nop
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	bc80      	pop	{r7}
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	20001654 	.word	0x20001654
 8007440:	20001640 	.word	0x20001640
 8007444:	20001634 	.word	0x20001634
 8007448:	2000115c 	.word	0x2000115c
 800744c:	20001158 	.word	0x20001158
 8007450:	20000018 	.word	0x20000018

08007454 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10a      	bne.n	800747a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	60fb      	str	r3, [r7, #12]
}
 8007476:	bf00      	nop
 8007478:	e7fe      	b.n	8007478 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800747a:	4b07      	ldr	r3, [pc, #28]	; (8007498 <vTaskPlaceOnEventList+0x44>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3318      	adds	r3, #24
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7fe fe70 	bl	8006168 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007488:	2101      	movs	r1, #1
 800748a:	6838      	ldr	r0, [r7, #0]
 800748c:	f000 fa84 	bl	8007998 <prvAddCurrentTaskToDelayedList>
}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20001158 	.word	0x20001158

0800749c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10a      	bne.n	80074c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	617b      	str	r3, [r7, #20]
}
 80074c0:	bf00      	nop
 80074c2:	e7fe      	b.n	80074c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074c4:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3318      	adds	r3, #24
 80074ca:	4619      	mov	r1, r3
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f7fe fe28 	bl	8006122 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80074d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	68b8      	ldr	r0, [r7, #8]
 80074e2:	f000 fa59 	bl	8007998 <prvAddCurrentTaskToDelayedList>
	}
 80074e6:	bf00      	nop
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20001158 	.word	0x20001158

080074f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	60fb      	str	r3, [r7, #12]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	3318      	adds	r3, #24
 8007524:	4618      	mov	r0, r3
 8007526:	f7fe fe57 	bl	80061d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800752a:	4b1e      	ldr	r3, [pc, #120]	; (80075a4 <xTaskRemoveFromEventList+0xb0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d11d      	bne.n	800756e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	3304      	adds	r3, #4
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe fe4e 	bl	80061d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007540:	4b19      	ldr	r3, [pc, #100]	; (80075a8 <xTaskRemoveFromEventList+0xb4>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d903      	bls.n	8007550 <xTaskRemoveFromEventList+0x5c>
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754c:	4a16      	ldr	r2, [pc, #88]	; (80075a8 <xTaskRemoveFromEventList+0xb4>)
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007554:	4613      	mov	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4a13      	ldr	r2, [pc, #76]	; (80075ac <xTaskRemoveFromEventList+0xb8>)
 800755e:	441a      	add	r2, r3
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	3304      	adds	r3, #4
 8007564:	4619      	mov	r1, r3
 8007566:	4610      	mov	r0, r2
 8007568:	f7fe fddb 	bl	8006122 <vListInsertEnd>
 800756c:	e005      	b.n	800757a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	3318      	adds	r3, #24
 8007572:	4619      	mov	r1, r3
 8007574:	480e      	ldr	r0, [pc, #56]	; (80075b0 <xTaskRemoveFromEventList+0xbc>)
 8007576:	f7fe fdd4 	bl	8006122 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757e:	4b0d      	ldr	r3, [pc, #52]	; (80075b4 <xTaskRemoveFromEventList+0xc0>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	429a      	cmp	r2, r3
 8007586:	d905      	bls.n	8007594 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007588:	2301      	movs	r3, #1
 800758a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800758c:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <xTaskRemoveFromEventList+0xc4>)
 800758e:	2201      	movs	r2, #1
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	e001      	b.n	8007598 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007594:	2300      	movs	r3, #0
 8007596:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007598:	697b      	ldr	r3, [r7, #20]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20001654 	.word	0x20001654
 80075a8:	20001634 	.word	0x20001634
 80075ac:	2000115c 	.word	0x2000115c
 80075b0:	200015ec 	.word	0x200015ec
 80075b4:	20001158 	.word	0x20001158
 80075b8:	20001640 	.word	0x20001640

080075bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075c4:	4b06      	ldr	r3, [pc, #24]	; (80075e0 <vTaskInternalSetTimeOutState+0x24>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075cc:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <vTaskInternalSetTimeOutState+0x28>)
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	605a      	str	r2, [r3, #4]
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20001644 	.word	0x20001644
 80075e4:	20001630 	.word	0x20001630

080075e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10a      	bne.n	800760e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	613b      	str	r3, [r7, #16]
}
 800760a:	bf00      	nop
 800760c:	e7fe      	b.n	800760c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10a      	bne.n	800762a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	60fb      	str	r3, [r7, #12]
}
 8007626:	bf00      	nop
 8007628:	e7fe      	b.n	8007628 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800762a:	f000 fe0f 	bl	800824c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800762e:	4b1d      	ldr	r3, [pc, #116]	; (80076a4 <xTaskCheckForTimeOut+0xbc>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007646:	d102      	bne.n	800764e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007648:	2300      	movs	r3, #0
 800764a:	61fb      	str	r3, [r7, #28]
 800764c:	e023      	b.n	8007696 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <xTaskCheckForTimeOut+0xc0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d007      	beq.n	800766a <xTaskCheckForTimeOut+0x82>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	429a      	cmp	r2, r3
 8007662:	d302      	bcc.n	800766a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007664:	2301      	movs	r3, #1
 8007666:	61fb      	str	r3, [r7, #28]
 8007668:	e015      	b.n	8007696 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	429a      	cmp	r2, r3
 8007672:	d20b      	bcs.n	800768c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	1ad2      	subs	r2, r2, r3
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7ff ff9b 	bl	80075bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007686:	2300      	movs	r3, #0
 8007688:	61fb      	str	r3, [r7, #28]
 800768a:	e004      	b.n	8007696 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2200      	movs	r2, #0
 8007690:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007692:	2301      	movs	r3, #1
 8007694:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007696:	f000 fe09 	bl	80082ac <vPortExitCritical>

	return xReturn;
 800769a:	69fb      	ldr	r3, [r7, #28]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3720      	adds	r7, #32
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20001630 	.word	0x20001630
 80076a8:	20001644 	.word	0x20001644

080076ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076b0:	4b03      	ldr	r3, [pc, #12]	; (80076c0 <vTaskMissedYield+0x14>)
 80076b2:	2201      	movs	r2, #1
 80076b4:	601a      	str	r2, [r3, #0]
}
 80076b6:	bf00      	nop
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	20001640 	.word	0x20001640

080076c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076cc:	f000 f852 	bl	8007774 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076d0:	4b06      	ldr	r3, [pc, #24]	; (80076ec <prvIdleTask+0x28>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d9f9      	bls.n	80076cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80076d8:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <prvIdleTask+0x2c>)
 80076da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076e8:	e7f0      	b.n	80076cc <prvIdleTask+0x8>
 80076ea:	bf00      	nop
 80076ec:	2000115c 	.word	0x2000115c
 80076f0:	e000ed04 	.word	0xe000ed04

080076f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076fa:	2300      	movs	r3, #0
 80076fc:	607b      	str	r3, [r7, #4]
 80076fe:	e00c      	b.n	800771a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4a12      	ldr	r2, [pc, #72]	; (8007754 <prvInitialiseTaskLists+0x60>)
 800770c:	4413      	add	r3, r2
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe fcdc 	bl	80060cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3301      	adds	r3, #1
 8007718:	607b      	str	r3, [r7, #4]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b37      	cmp	r3, #55	; 0x37
 800771e:	d9ef      	bls.n	8007700 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007720:	480d      	ldr	r0, [pc, #52]	; (8007758 <prvInitialiseTaskLists+0x64>)
 8007722:	f7fe fcd3 	bl	80060cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007726:	480d      	ldr	r0, [pc, #52]	; (800775c <prvInitialiseTaskLists+0x68>)
 8007728:	f7fe fcd0 	bl	80060cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800772c:	480c      	ldr	r0, [pc, #48]	; (8007760 <prvInitialiseTaskLists+0x6c>)
 800772e:	f7fe fccd 	bl	80060cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007732:	480c      	ldr	r0, [pc, #48]	; (8007764 <prvInitialiseTaskLists+0x70>)
 8007734:	f7fe fcca 	bl	80060cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007738:	480b      	ldr	r0, [pc, #44]	; (8007768 <prvInitialiseTaskLists+0x74>)
 800773a:	f7fe fcc7 	bl	80060cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800773e:	4b0b      	ldr	r3, [pc, #44]	; (800776c <prvInitialiseTaskLists+0x78>)
 8007740:	4a05      	ldr	r2, [pc, #20]	; (8007758 <prvInitialiseTaskLists+0x64>)
 8007742:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007744:	4b0a      	ldr	r3, [pc, #40]	; (8007770 <prvInitialiseTaskLists+0x7c>)
 8007746:	4a05      	ldr	r2, [pc, #20]	; (800775c <prvInitialiseTaskLists+0x68>)
 8007748:	601a      	str	r2, [r3, #0]
}
 800774a:	bf00      	nop
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	2000115c 	.word	0x2000115c
 8007758:	200015bc 	.word	0x200015bc
 800775c:	200015d0 	.word	0x200015d0
 8007760:	200015ec 	.word	0x200015ec
 8007764:	20001600 	.word	0x20001600
 8007768:	20001618 	.word	0x20001618
 800776c:	200015e4 	.word	0x200015e4
 8007770:	200015e8 	.word	0x200015e8

08007774 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800777a:	e019      	b.n	80077b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800777c:	f000 fd66 	bl	800824c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007780:	4b10      	ldr	r3, [pc, #64]	; (80077c4 <prvCheckTasksWaitingTermination+0x50>)
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3304      	adds	r3, #4
 800778c:	4618      	mov	r0, r3
 800778e:	f7fe fd23 	bl	80061d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007792:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <prvCheckTasksWaitingTermination+0x54>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3b01      	subs	r3, #1
 8007798:	4a0b      	ldr	r2, [pc, #44]	; (80077c8 <prvCheckTasksWaitingTermination+0x54>)
 800779a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800779c:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <prvCheckTasksWaitingTermination+0x58>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	4a0a      	ldr	r2, [pc, #40]	; (80077cc <prvCheckTasksWaitingTermination+0x58>)
 80077a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077a6:	f000 fd81 	bl	80082ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f810 	bl	80077d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077b0:	4b06      	ldr	r3, [pc, #24]	; (80077cc <prvCheckTasksWaitingTermination+0x58>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e1      	bne.n	800777c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20001600 	.word	0x20001600
 80077c8:	2000162c 	.word	0x2000162c
 80077cc:	20001614 	.word	0x20001614

080077d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3354      	adds	r3, #84	; 0x54
 80077dc:	4618      	mov	r0, r3
 80077de:	f001 fad7 	bl	8008d90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d108      	bne.n	80077fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 feef 	bl	80085d4 <vPortFree>
				vPortFree( pxTCB );
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 feec 	bl	80085d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077fc:	e018      	b.n	8007830 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007804:	2b01      	cmp	r3, #1
 8007806:	d103      	bne.n	8007810 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fee3 	bl	80085d4 <vPortFree>
	}
 800780e:	e00f      	b.n	8007830 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007816:	2b02      	cmp	r3, #2
 8007818:	d00a      	beq.n	8007830 <prvDeleteTCB+0x60>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	60fb      	str	r3, [r7, #12]
}
 800782c:	bf00      	nop
 800782e:	e7fe      	b.n	800782e <prvDeleteTCB+0x5e>
	}
 8007830:	bf00      	nop
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800783e:	4b0e      	ldr	r3, [pc, #56]	; (8007878 <prvResetNextTaskUnblockTime+0x40>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <prvResetNextTaskUnblockTime+0x14>
 8007848:	2301      	movs	r3, #1
 800784a:	e000      	b.n	800784e <prvResetNextTaskUnblockTime+0x16>
 800784c:	2300      	movs	r3, #0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d004      	beq.n	800785c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007852:	4b0a      	ldr	r3, [pc, #40]	; (800787c <prvResetNextTaskUnblockTime+0x44>)
 8007854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007858:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800785a:	e008      	b.n	800786e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800785c:	4b06      	ldr	r3, [pc, #24]	; (8007878 <prvResetNextTaskUnblockTime+0x40>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	4a04      	ldr	r2, [pc, #16]	; (800787c <prvResetNextTaskUnblockTime+0x44>)
 800786c:	6013      	str	r3, [r2, #0]
}
 800786e:	bf00      	nop
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	bc80      	pop	{r7}
 8007876:	4770      	bx	lr
 8007878:	200015e4 	.word	0x200015e4
 800787c:	2000164c 	.word	0x2000164c

08007880 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007886:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <xTaskGetSchedulerState+0x34>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d102      	bne.n	8007894 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800788e:	2301      	movs	r3, #1
 8007890:	607b      	str	r3, [r7, #4]
 8007892:	e008      	b.n	80078a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007894:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <xTaskGetSchedulerState+0x38>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d102      	bne.n	80078a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800789c:	2302      	movs	r3, #2
 800789e:	607b      	str	r3, [r7, #4]
 80078a0:	e001      	b.n	80078a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078a2:	2300      	movs	r3, #0
 80078a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078a6:	687b      	ldr	r3, [r7, #4]
	}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bc80      	pop	{r7}
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	20001638 	.word	0x20001638
 80078b8:	20001654 	.word	0x20001654

080078bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078c8:	2300      	movs	r3, #0
 80078ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d056      	beq.n	8007980 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078d2:	4b2e      	ldr	r3, [pc, #184]	; (800798c <xTaskPriorityDisinherit+0xd0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d00a      	beq.n	80078f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	60fb      	str	r3, [r7, #12]
}
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10a      	bne.n	8007910 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	60bb      	str	r3, [r7, #8]
}
 800790c:	bf00      	nop
 800790e:	e7fe      	b.n	800790e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007914:	1e5a      	subs	r2, r3, #1
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007922:	429a      	cmp	r2, r3
 8007924:	d02c      	beq.n	8007980 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800792a:	2b00      	cmp	r3, #0
 800792c:	d128      	bne.n	8007980 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	3304      	adds	r3, #4
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe fc50 	bl	80061d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007950:	4b0f      	ldr	r3, [pc, #60]	; (8007990 <xTaskPriorityDisinherit+0xd4>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d903      	bls.n	8007960 <xTaskPriorityDisinherit+0xa4>
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	4a0c      	ldr	r2, [pc, #48]	; (8007990 <xTaskPriorityDisinherit+0xd4>)
 800795e:	6013      	str	r3, [r2, #0]
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007964:	4613      	mov	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4a09      	ldr	r2, [pc, #36]	; (8007994 <xTaskPriorityDisinherit+0xd8>)
 800796e:	441a      	add	r2, r3
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	3304      	adds	r3, #4
 8007974:	4619      	mov	r1, r3
 8007976:	4610      	mov	r0, r2
 8007978:	f7fe fbd3 	bl	8006122 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800797c:	2301      	movs	r3, #1
 800797e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007980:	697b      	ldr	r3, [r7, #20]
	}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20001158 	.word	0x20001158
 8007990:	20001634 	.word	0x20001634
 8007994:	2000115c 	.word	0x2000115c

08007998 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079a2:	4b21      	ldr	r3, [pc, #132]	; (8007a28 <prvAddCurrentTaskToDelayedList+0x90>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079a8:	4b20      	ldr	r3, [pc, #128]	; (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe fc12 	bl	80061d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079ba:	d10a      	bne.n	80079d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d007      	beq.n	80079d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079c2:	4b1a      	ldr	r3, [pc, #104]	; (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3304      	adds	r3, #4
 80079c8:	4619      	mov	r1, r3
 80079ca:	4819      	ldr	r0, [pc, #100]	; (8007a30 <prvAddCurrentTaskToDelayedList+0x98>)
 80079cc:	f7fe fba9 	bl	8006122 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079d0:	e026      	b.n	8007a20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4413      	add	r3, r2
 80079d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079da:	4b14      	ldr	r3, [pc, #80]	; (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d209      	bcs.n	80079fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ea:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4619      	mov	r1, r3
 80079f6:	4610      	mov	r0, r2
 80079f8:	f7fe fbb6 	bl	8006168 <vListInsert>
}
 80079fc:	e010      	b.n	8007a20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079fe:	4b0e      	ldr	r3, [pc, #56]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f7fe fbac 	bl	8006168 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a10:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d202      	bcs.n	8007a20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a1a:	4a08      	ldr	r2, [pc, #32]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	6013      	str	r3, [r2, #0]
}
 8007a20:	bf00      	nop
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20001630 	.word	0x20001630
 8007a2c:	20001158 	.word	0x20001158
 8007a30:	20001618 	.word	0x20001618
 8007a34:	200015e8 	.word	0x200015e8
 8007a38:	200015e4 	.word	0x200015e4
 8007a3c:	2000164c 	.word	0x2000164c

08007a40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08a      	sub	sp, #40	; 0x28
 8007a44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a4a:	f000 facb 	bl	8007fe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a4e:	4b1c      	ldr	r3, [pc, #112]	; (8007ac0 <xTimerCreateTimerTask+0x80>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d021      	beq.n	8007a9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a5e:	1d3a      	adds	r2, r7, #4
 8007a60:	f107 0108 	add.w	r1, r7, #8
 8007a64:	f107 030c 	add.w	r3, r7, #12
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fe fb15 	bl	8006098 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	9202      	str	r2, [sp, #8]
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	2302      	movs	r3, #2
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	460a      	mov	r2, r1
 8007a80:	4910      	ldr	r1, [pc, #64]	; (8007ac4 <xTimerCreateTimerTask+0x84>)
 8007a82:	4811      	ldr	r0, [pc, #68]	; (8007ac8 <xTimerCreateTimerTask+0x88>)
 8007a84:	f7ff f8b6 	bl	8006bf4 <xTaskCreateStatic>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	4a10      	ldr	r2, [pc, #64]	; (8007acc <xTimerCreateTimerTask+0x8c>)
 8007a8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a8e:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <xTimerCreateTimerTask+0x8c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a96:	2301      	movs	r3, #1
 8007a98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10a      	bne.n	8007ab6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	613b      	str	r3, [r7, #16]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ab6:	697b      	ldr	r3, [r7, #20]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	20001688 	.word	0x20001688
 8007ac4:	080096b8 	.word	0x080096b8
 8007ac8:	08007bed 	.word	0x08007bed
 8007acc:	2000168c 	.word	0x2000168c

08007ad0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08a      	sub	sp, #40	; 0x28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <xTimerGenericCommand+0x2e>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	623b      	str	r3, [r7, #32]
}
 8007afa:	bf00      	nop
 8007afc:	e7fe      	b.n	8007afc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007afe:	4b1a      	ldr	r3, [pc, #104]	; (8007b68 <xTimerGenericCommand+0x98>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d02a      	beq.n	8007b5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2b05      	cmp	r3, #5
 8007b16:	dc18      	bgt.n	8007b4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b18:	f7ff feb2 	bl	8007880 <xTaskGetSchedulerState>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d109      	bne.n	8007b36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b22:	4b11      	ldr	r3, [pc, #68]	; (8007b68 <xTimerGenericCommand+0x98>)
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	f107 0110 	add.w	r1, r7, #16
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b2e:	f7fe fc7f 	bl	8006430 <xQueueGenericSend>
 8007b32:	6278      	str	r0, [r7, #36]	; 0x24
 8007b34:	e012      	b.n	8007b5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b36:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <xTimerGenericCommand+0x98>)
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	f107 0110 	add.w	r1, r7, #16
 8007b3e:	2300      	movs	r3, #0
 8007b40:	2200      	movs	r2, #0
 8007b42:	f7fe fc75 	bl	8006430 <xQueueGenericSend>
 8007b46:	6278      	str	r0, [r7, #36]	; 0x24
 8007b48:	e008      	b.n	8007b5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b4a:	4b07      	ldr	r3, [pc, #28]	; (8007b68 <xTimerGenericCommand+0x98>)
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	f107 0110 	add.w	r1, r7, #16
 8007b52:	2300      	movs	r3, #0
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	f7fe fd69 	bl	800662c <xQueueGenericSendFromISR>
 8007b5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3728      	adds	r7, #40	; 0x28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20001688 	.word	0x20001688

08007b6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b088      	sub	sp, #32
 8007b70:	af02      	add	r7, sp, #8
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b76:	4b1c      	ldr	r3, [pc, #112]	; (8007be8 <prvProcessExpiredTimer+0x7c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	3304      	adds	r3, #4
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fe fb27 	bl	80061d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d122      	bne.n	8007bd8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	699a      	ldr	r2, [r3, #24]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	18d1      	adds	r1, r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	6978      	ldr	r0, [r7, #20]
 8007ba0:	f000 f8c8 	bl	8007d34 <prvInsertTimerInActiveList>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d016      	beq.n	8007bd8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007baa:	2300      	movs	r3, #0
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	2300      	movs	r3, #0
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	6978      	ldr	r0, [r7, #20]
 8007bb6:	f7ff ff8b 	bl	8007ad0 <xTimerGenericCommand>
 8007bba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	60fb      	str	r3, [r7, #12]
}
 8007bd4:	bf00      	nop
 8007bd6:	e7fe      	b.n	8007bd6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	6978      	ldr	r0, [r7, #20]
 8007bde:	4798      	blx	r3
}
 8007be0:	bf00      	nop
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20001680 	.word	0x20001680

08007bec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bf4:	f107 0308 	add.w	r3, r7, #8
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 f857 	bl	8007cac <prvGetNextExpireTime>
 8007bfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4619      	mov	r1, r3
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f803 	bl	8007c10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c0a:	f000 f8d5 	bl	8007db8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c0e:	e7f1      	b.n	8007bf4 <prvTimerTask+0x8>

08007c10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c1a:	f7ff fa3f 	bl	800709c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c1e:	f107 0308 	add.w	r3, r7, #8
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 f866 	bl	8007cf4 <prvSampleTimeNow>
 8007c28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d130      	bne.n	8007c92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10a      	bne.n	8007c4c <prvProcessTimerOrBlockTask+0x3c>
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d806      	bhi.n	8007c4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c3e:	f7ff fa3b 	bl	80070b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c42:	68f9      	ldr	r1, [r7, #12]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff ff91 	bl	8007b6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c4a:	e024      	b.n	8007c96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d008      	beq.n	8007c64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c52:	4b13      	ldr	r3, [pc, #76]	; (8007ca0 <prvProcessTimerOrBlockTask+0x90>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	bf0c      	ite	eq
 8007c5c:	2301      	moveq	r3, #1
 8007c5e:	2300      	movne	r3, #0
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c64:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <prvProcessTimerOrBlockTask+0x94>)
 8007c66:	6818      	ldr	r0, [r3, #0]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	4619      	mov	r1, r3
 8007c72:	f7fe ff8b 	bl	8006b8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c76:	f7ff fa1f 	bl	80070b8 <xTaskResumeAll>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c80:	4b09      	ldr	r3, [pc, #36]	; (8007ca8 <prvProcessTimerOrBlockTask+0x98>)
 8007c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	f3bf 8f6f 	isb	sy
}
 8007c90:	e001      	b.n	8007c96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c92:	f7ff fa11 	bl	80070b8 <xTaskResumeAll>
}
 8007c96:	bf00      	nop
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20001684 	.word	0x20001684
 8007ca4:	20001688 	.word	0x20001688
 8007ca8:	e000ed04 	.word	0xe000ed04

08007cac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cb4:	4b0e      	ldr	r3, [pc, #56]	; (8007cf0 <prvGetNextExpireTime+0x44>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	bf0c      	ite	eq
 8007cbe:	2301      	moveq	r3, #1
 8007cc0:	2300      	movne	r3, #0
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d105      	bne.n	8007cde <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cd2:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <prvGetNextExpireTime+0x44>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	e001      	b.n	8007ce2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc80      	pop	{r7}
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	20001680 	.word	0x20001680

08007cf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007cfc:	f7ff fa7a 	bl	80071f4 <xTaskGetTickCount>
 8007d00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d02:	4b0b      	ldr	r3, [pc, #44]	; (8007d30 <prvSampleTimeNow+0x3c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d205      	bcs.n	8007d18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d0c:	f000 f908 	bl	8007f20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	e002      	b.n	8007d1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d1e:	4a04      	ldr	r2, [pc, #16]	; (8007d30 <prvSampleTimeNow+0x3c>)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d24:	68fb      	ldr	r3, [r7, #12]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20001690 	.word	0x20001690

08007d34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d42:	2300      	movs	r3, #0
 8007d44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d812      	bhi.n	8007d80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d302      	bcc.n	8007d6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	617b      	str	r3, [r7, #20]
 8007d6c:	e01b      	b.n	8007da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d6e:	4b10      	ldr	r3, [pc, #64]	; (8007db0 <prvInsertTimerInActiveList+0x7c>)
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3304      	adds	r3, #4
 8007d76:	4619      	mov	r1, r3
 8007d78:	4610      	mov	r0, r2
 8007d7a:	f7fe f9f5 	bl	8006168 <vListInsert>
 8007d7e:	e012      	b.n	8007da6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d206      	bcs.n	8007d96 <prvInsertTimerInActiveList+0x62>
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d302      	bcc.n	8007d96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d90:	2301      	movs	r3, #1
 8007d92:	617b      	str	r3, [r7, #20]
 8007d94:	e007      	b.n	8007da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d96:	4b07      	ldr	r3, [pc, #28]	; (8007db4 <prvInsertTimerInActiveList+0x80>)
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4610      	mov	r0, r2
 8007da2:	f7fe f9e1 	bl	8006168 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007da6:	697b      	ldr	r3, [r7, #20]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	20001684 	.word	0x20001684
 8007db4:	20001680 	.word	0x20001680

08007db8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08e      	sub	sp, #56	; 0x38
 8007dbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dbe:	e09d      	b.n	8007efc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	da18      	bge.n	8007df8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007dc6:	1d3b      	adds	r3, r7, #4
 8007dc8:	3304      	adds	r3, #4
 8007dca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	61fb      	str	r3, [r7, #28]
}
 8007de4:	bf00      	nop
 8007de6:	e7fe      	b.n	8007de6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dee:	6850      	ldr	r0, [r2, #4]
 8007df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df2:	6892      	ldr	r2, [r2, #8]
 8007df4:	4611      	mov	r1, r2
 8007df6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	db7d      	blt.n	8007efa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d004      	beq.n	8007e14 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe f9e2 	bl	80061d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e14:	463b      	mov	r3, r7
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff ff6c 	bl	8007cf4 <prvSampleTimeNow>
 8007e1c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b09      	cmp	r3, #9
 8007e22:	d86b      	bhi.n	8007efc <prvProcessReceivedCommands+0x144>
 8007e24:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <prvProcessReceivedCommands+0x74>)
 8007e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2a:	bf00      	nop
 8007e2c:	08007e55 	.word	0x08007e55
 8007e30:	08007e55 	.word	0x08007e55
 8007e34:	08007e55 	.word	0x08007e55
 8007e38:	08007efd 	.word	0x08007efd
 8007e3c:	08007eb1 	.word	0x08007eb1
 8007e40:	08007ee9 	.word	0x08007ee9
 8007e44:	08007e55 	.word	0x08007e55
 8007e48:	08007e55 	.word	0x08007e55
 8007e4c:	08007efd 	.word	0x08007efd
 8007e50:	08007eb1 	.word	0x08007eb1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	18d1      	adds	r1, r2, r3
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e62:	f7ff ff67 	bl	8007d34 <prvInsertTimerInActiveList>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d047      	beq.n	8007efc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e72:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d13f      	bne.n	8007efc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	441a      	add	r2, r3
 8007e84:	2300      	movs	r3, #0
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e8e:	f7ff fe1f 	bl	8007ad0 <xTimerGenericCommand>
 8007e92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d130      	bne.n	8007efc <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	61bb      	str	r3, [r7, #24]
}
 8007eac:	bf00      	nop
 8007eae:	e7fe      	b.n	8007eae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10a      	bne.n	8007ed4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	617b      	str	r3, [r7, #20]
}
 8007ed0:	bf00      	nop
 8007ed2:	e7fe      	b.n	8007ed2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	699a      	ldr	r2, [r3, #24]
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	18d1      	adds	r1, r2, r3
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee2:	f7ff ff27 	bl	8007d34 <prvInsertTimerInActiveList>
					break;
 8007ee6:	e009      	b.n	8007efc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d104      	bne.n	8007efc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef4:	f000 fb6e 	bl	80085d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ef8:	e000      	b.n	8007efc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007efa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007efc:	4b07      	ldr	r3, [pc, #28]	; (8007f1c <prvProcessReceivedCommands+0x164>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	1d39      	adds	r1, r7, #4
 8007f02:	2200      	movs	r2, #0
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fc29 	bl	800675c <xQueueReceive>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f47f af57 	bne.w	8007dc0 <prvProcessReceivedCommands+0x8>
	}
}
 8007f12:	bf00      	nop
 8007f14:	bf00      	nop
 8007f16:	3730      	adds	r7, #48	; 0x30
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20001688 	.word	0x20001688

08007f20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b088      	sub	sp, #32
 8007f24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f26:	e045      	b.n	8007fb4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f28:	4b2c      	ldr	r3, [pc, #176]	; (8007fdc <prvSwitchTimerLists+0xbc>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f32:	4b2a      	ldr	r3, [pc, #168]	; (8007fdc <prvSwitchTimerLists+0xbc>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fe f949 	bl	80061d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d12e      	bne.n	8007fb4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d90e      	bls.n	8007f86 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f74:	4b19      	ldr	r3, [pc, #100]	; (8007fdc <prvSwitchTimerLists+0xbc>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	f7fe f8f2 	bl	8006168 <vListInsert>
 8007f84:	e016      	b.n	8007fb4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f86:	2300      	movs	r3, #0
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	2100      	movs	r1, #0
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f7ff fd9d 	bl	8007ad0 <xTimerGenericCommand>
 8007f96:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10a      	bne.n	8007fb4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	603b      	str	r3, [r7, #0]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fb4:	4b09      	ldr	r3, [pc, #36]	; (8007fdc <prvSwitchTimerLists+0xbc>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1b4      	bne.n	8007f28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007fbe:	4b07      	ldr	r3, [pc, #28]	; (8007fdc <prvSwitchTimerLists+0xbc>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007fc4:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <prvSwitchTimerLists+0xc0>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a04      	ldr	r2, [pc, #16]	; (8007fdc <prvSwitchTimerLists+0xbc>)
 8007fca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007fcc:	4a04      	ldr	r2, [pc, #16]	; (8007fe0 <prvSwitchTimerLists+0xc0>)
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	6013      	str	r3, [r2, #0]
}
 8007fd2:	bf00      	nop
 8007fd4:	3718      	adds	r7, #24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20001680 	.word	0x20001680
 8007fe0:	20001684 	.word	0x20001684

08007fe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007fea:	f000 f92f 	bl	800824c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007fee:	4b15      	ldr	r3, [pc, #84]	; (8008044 <prvCheckForValidListAndQueue+0x60>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d120      	bne.n	8008038 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ff6:	4814      	ldr	r0, [pc, #80]	; (8008048 <prvCheckForValidListAndQueue+0x64>)
 8007ff8:	f7fe f868 	bl	80060cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ffc:	4813      	ldr	r0, [pc, #76]	; (800804c <prvCheckForValidListAndQueue+0x68>)
 8007ffe:	f7fe f865 	bl	80060cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008002:	4b13      	ldr	r3, [pc, #76]	; (8008050 <prvCheckForValidListAndQueue+0x6c>)
 8008004:	4a10      	ldr	r2, [pc, #64]	; (8008048 <prvCheckForValidListAndQueue+0x64>)
 8008006:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008008:	4b12      	ldr	r3, [pc, #72]	; (8008054 <prvCheckForValidListAndQueue+0x70>)
 800800a:	4a10      	ldr	r2, [pc, #64]	; (800804c <prvCheckForValidListAndQueue+0x68>)
 800800c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800800e:	2300      	movs	r3, #0
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	4b11      	ldr	r3, [pc, #68]	; (8008058 <prvCheckForValidListAndQueue+0x74>)
 8008014:	4a11      	ldr	r2, [pc, #68]	; (800805c <prvCheckForValidListAndQueue+0x78>)
 8008016:	2110      	movs	r1, #16
 8008018:	200a      	movs	r0, #10
 800801a:	f7fe f96f 	bl	80062fc <xQueueGenericCreateStatic>
 800801e:	4603      	mov	r3, r0
 8008020:	4a08      	ldr	r2, [pc, #32]	; (8008044 <prvCheckForValidListAndQueue+0x60>)
 8008022:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008024:	4b07      	ldr	r3, [pc, #28]	; (8008044 <prvCheckForValidListAndQueue+0x60>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d005      	beq.n	8008038 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800802c:	4b05      	ldr	r3, [pc, #20]	; (8008044 <prvCheckForValidListAndQueue+0x60>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	490b      	ldr	r1, [pc, #44]	; (8008060 <prvCheckForValidListAndQueue+0x7c>)
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe fd82 	bl	8006b3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008038:	f000 f938 	bl	80082ac <vPortExitCritical>
}
 800803c:	bf00      	nop
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20001688 	.word	0x20001688
 8008048:	20001658 	.word	0x20001658
 800804c:	2000166c 	.word	0x2000166c
 8008050:	20001680 	.word	0x20001680
 8008054:	20001684 	.word	0x20001684
 8008058:	20001734 	.word	0x20001734
 800805c:	20001694 	.word	0x20001694
 8008060:	080096c0 	.word	0x080096c0

08008064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3b04      	subs	r3, #4
 8008074:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800807c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3b04      	subs	r3, #4
 8008082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f023 0201 	bic.w	r2, r3, #1
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3b04      	subs	r3, #4
 8008092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008094:	4a08      	ldr	r2, [pc, #32]	; (80080b8 <pxPortInitialiseStack+0x54>)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3b14      	subs	r3, #20
 800809e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3b20      	subs	r3, #32
 80080aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080ac:	68fb      	ldr	r3, [r7, #12]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bc80      	pop	{r7}
 80080b6:	4770      	bx	lr
 80080b8:	080080bd 	.word	0x080080bd

080080bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080c6:	4b12      	ldr	r3, [pc, #72]	; (8008110 <prvTaskExitError+0x54>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080ce:	d00a      	beq.n	80080e6 <prvTaskExitError+0x2a>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	60fb      	str	r3, [r7, #12]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <prvTaskExitError+0x28>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	60bb      	str	r3, [r7, #8]
}
 80080f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080fa:	bf00      	nop
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0fc      	beq.n	80080fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008102:	bf00      	nop
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	bc80      	pop	{r7}
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	20000010 	.word	0x20000010
	...

08008120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008120:	4b07      	ldr	r3, [pc, #28]	; (8008140 <pxCurrentTCBConst2>)
 8008122:	6819      	ldr	r1, [r3, #0]
 8008124:	6808      	ldr	r0, [r1, #0]
 8008126:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800812a:	f380 8809 	msr	PSP, r0
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f04f 0000 	mov.w	r0, #0
 8008136:	f380 8811 	msr	BASEPRI, r0
 800813a:	f04e 0e0d 	orr.w	lr, lr, #13
 800813e:	4770      	bx	lr

08008140 <pxCurrentTCBConst2>:
 8008140:	20001158 	.word	0x20001158
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop

08008148 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008148:	4806      	ldr	r0, [pc, #24]	; (8008164 <prvPortStartFirstTask+0x1c>)
 800814a:	6800      	ldr	r0, [r0, #0]
 800814c:	6800      	ldr	r0, [r0, #0]
 800814e:	f380 8808 	msr	MSP, r0
 8008152:	b662      	cpsie	i
 8008154:	b661      	cpsie	f
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	df00      	svc	0
 8008160:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008162:	bf00      	nop
 8008164:	e000ed08 	.word	0xe000ed08

08008168 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800816e:	4b32      	ldr	r3, [pc, #200]	; (8008238 <xPortStartScheduler+0xd0>)
 8008170:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	22ff      	movs	r2, #255	; 0xff
 800817e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	b2db      	uxtb	r3, r3
 8008186:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008188:	78fb      	ldrb	r3, [r7, #3]
 800818a:	b2db      	uxtb	r3, r3
 800818c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008190:	b2da      	uxtb	r2, r3
 8008192:	4b2a      	ldr	r3, [pc, #168]	; (800823c <xPortStartScheduler+0xd4>)
 8008194:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008196:	4b2a      	ldr	r3, [pc, #168]	; (8008240 <xPortStartScheduler+0xd8>)
 8008198:	2207      	movs	r2, #7
 800819a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800819c:	e009      	b.n	80081b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800819e:	4b28      	ldr	r3, [pc, #160]	; (8008240 <xPortStartScheduler+0xd8>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3b01      	subs	r3, #1
 80081a4:	4a26      	ldr	r2, [pc, #152]	; (8008240 <xPortStartScheduler+0xd8>)
 80081a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081a8:	78fb      	ldrb	r3, [r7, #3]
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081b2:	78fb      	ldrb	r3, [r7, #3]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ba:	2b80      	cmp	r3, #128	; 0x80
 80081bc:	d0ef      	beq.n	800819e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081be:	4b20      	ldr	r3, [pc, #128]	; (8008240 <xPortStartScheduler+0xd8>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f1c3 0307 	rsb	r3, r3, #7
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d00a      	beq.n	80081e0 <xPortStartScheduler+0x78>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	60bb      	str	r3, [r7, #8]
}
 80081dc:	bf00      	nop
 80081de:	e7fe      	b.n	80081de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081e0:	4b17      	ldr	r3, [pc, #92]	; (8008240 <xPortStartScheduler+0xd8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	021b      	lsls	r3, r3, #8
 80081e6:	4a16      	ldr	r2, [pc, #88]	; (8008240 <xPortStartScheduler+0xd8>)
 80081e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081ea:	4b15      	ldr	r3, [pc, #84]	; (8008240 <xPortStartScheduler+0xd8>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081f2:	4a13      	ldr	r2, [pc, #76]	; (8008240 <xPortStartScheduler+0xd8>)
 80081f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081fe:	4b11      	ldr	r3, [pc, #68]	; (8008244 <xPortStartScheduler+0xdc>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a10      	ldr	r2, [pc, #64]	; (8008244 <xPortStartScheduler+0xdc>)
 8008204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008208:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800820a:	4b0e      	ldr	r3, [pc, #56]	; (8008244 <xPortStartScheduler+0xdc>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a0d      	ldr	r2, [pc, #52]	; (8008244 <xPortStartScheduler+0xdc>)
 8008210:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008214:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008216:	f000 f8b9 	bl	800838c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800821a:	4b0b      	ldr	r3, [pc, #44]	; (8008248 <xPortStartScheduler+0xe0>)
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008220:	f7ff ff92 	bl	8008148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008224:	f7ff f8b2 	bl	800738c <vTaskSwitchContext>
	prvTaskExitError();
 8008228:	f7ff ff48 	bl	80080bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	e000e400 	.word	0xe000e400
 800823c:	20001784 	.word	0x20001784
 8008240:	20001788 	.word	0x20001788
 8008244:	e000ed20 	.word	0xe000ed20
 8008248:	20000010 	.word	0x20000010

0800824c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	607b      	str	r3, [r7, #4]
}
 8008264:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008266:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <vPortEnterCritical+0x58>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3301      	adds	r3, #1
 800826c:	4a0d      	ldr	r2, [pc, #52]	; (80082a4 <vPortEnterCritical+0x58>)
 800826e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008270:	4b0c      	ldr	r3, [pc, #48]	; (80082a4 <vPortEnterCritical+0x58>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d10f      	bne.n	8008298 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008278:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <vPortEnterCritical+0x5c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00a      	beq.n	8008298 <vPortEnterCritical+0x4c>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	603b      	str	r3, [r7, #0]
}
 8008294:	bf00      	nop
 8008296:	e7fe      	b.n	8008296 <vPortEnterCritical+0x4a>
	}
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	bc80      	pop	{r7}
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	20000010 	.word	0x20000010
 80082a8:	e000ed04 	.word	0xe000ed04

080082ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082b2:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <vPortExitCritical+0x4c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10a      	bne.n	80082d0 <vPortExitCritical+0x24>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	607b      	str	r3, [r7, #4]
}
 80082cc:	bf00      	nop
 80082ce:	e7fe      	b.n	80082ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082d0:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <vPortExitCritical+0x4c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	4a08      	ldr	r2, [pc, #32]	; (80082f8 <vPortExitCritical+0x4c>)
 80082d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082da:	4b07      	ldr	r3, [pc, #28]	; (80082f8 <vPortExitCritical+0x4c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d105      	bne.n	80082ee <vPortExitCritical+0x42>
 80082e2:	2300      	movs	r3, #0
 80082e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	f383 8811 	msr	BASEPRI, r3
}
 80082ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082ee:	bf00      	nop
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bc80      	pop	{r7}
 80082f6:	4770      	bx	lr
 80082f8:	20000010 	.word	0x20000010
 80082fc:	00000000 	.word	0x00000000

08008300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008300:	f3ef 8009 	mrs	r0, PSP
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	4b0d      	ldr	r3, [pc, #52]	; (8008340 <pxCurrentTCBConst>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008310:	6010      	str	r0, [r2, #0]
 8008312:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008316:	f04f 0050 	mov.w	r0, #80	; 0x50
 800831a:	f380 8811 	msr	BASEPRI, r0
 800831e:	f7ff f835 	bl	800738c <vTaskSwitchContext>
 8008322:	f04f 0000 	mov.w	r0, #0
 8008326:	f380 8811 	msr	BASEPRI, r0
 800832a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800832e:	6819      	ldr	r1, [r3, #0]
 8008330:	6808      	ldr	r0, [r1, #0]
 8008332:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008336:	f380 8809 	msr	PSP, r0
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	4770      	bx	lr

08008340 <pxCurrentTCBConst>:
 8008340:	20001158 	.word	0x20001158
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop

08008348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	607b      	str	r3, [r7, #4]
}
 8008360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008362:	f7fe ff55 	bl	8007210 <xTaskIncrementTick>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800836c:	4b06      	ldr	r3, [pc, #24]	; (8008388 <xPortSysTickHandler+0x40>)
 800836e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	f383 8811 	msr	BASEPRI, r3
}
 800837e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	e000ed04 	.word	0xe000ed04

0800838c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008390:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <vPortSetupTimerInterrupt+0x30>)
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008396:	4b0a      	ldr	r3, [pc, #40]	; (80083c0 <vPortSetupTimerInterrupt+0x34>)
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800839c:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <vPortSetupTimerInterrupt+0x38>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a09      	ldr	r2, [pc, #36]	; (80083c8 <vPortSetupTimerInterrupt+0x3c>)
 80083a2:	fba2 2303 	umull	r2, r3, r2, r3
 80083a6:	099b      	lsrs	r3, r3, #6
 80083a8:	4a08      	ldr	r2, [pc, #32]	; (80083cc <vPortSetupTimerInterrupt+0x40>)
 80083aa:	3b01      	subs	r3, #1
 80083ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083ae:	4b03      	ldr	r3, [pc, #12]	; (80083bc <vPortSetupTimerInterrupt+0x30>)
 80083b0:	2207      	movs	r2, #7
 80083b2:	601a      	str	r2, [r3, #0]
}
 80083b4:	bf00      	nop
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bc80      	pop	{r7}
 80083ba:	4770      	bx	lr
 80083bc:	e000e010 	.word	0xe000e010
 80083c0:	e000e018 	.word	0xe000e018
 80083c4:	20000004 	.word	0x20000004
 80083c8:	10624dd3 	.word	0x10624dd3
 80083cc:	e000e014 	.word	0xe000e014

080083d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083d6:	f3ef 8305 	mrs	r3, IPSR
 80083da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b0f      	cmp	r3, #15
 80083e0:	d914      	bls.n	800840c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083e2:	4a16      	ldr	r2, [pc, #88]	; (800843c <vPortValidateInterruptPriority+0x6c>)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4413      	add	r3, r2
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083ec:	4b14      	ldr	r3, [pc, #80]	; (8008440 <vPortValidateInterruptPriority+0x70>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	7afa      	ldrb	r2, [r7, #11]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d20a      	bcs.n	800840c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	607b      	str	r3, [r7, #4]
}
 8008408:	bf00      	nop
 800840a:	e7fe      	b.n	800840a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800840c:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <vPortValidateInterruptPriority+0x74>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008414:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <vPortValidateInterruptPriority+0x78>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	429a      	cmp	r2, r3
 800841a:	d90a      	bls.n	8008432 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	603b      	str	r3, [r7, #0]
}
 800842e:	bf00      	nop
 8008430:	e7fe      	b.n	8008430 <vPortValidateInterruptPriority+0x60>
	}
 8008432:	bf00      	nop
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	bc80      	pop	{r7}
 800843a:	4770      	bx	lr
 800843c:	e000e3f0 	.word	0xe000e3f0
 8008440:	20001784 	.word	0x20001784
 8008444:	e000ed0c 	.word	0xe000ed0c
 8008448:	20001788 	.word	0x20001788

0800844c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08a      	sub	sp, #40	; 0x28
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008454:	2300      	movs	r3, #0
 8008456:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008458:	f7fe fe20 	bl	800709c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800845c:	4b58      	ldr	r3, [pc, #352]	; (80085c0 <pvPortMalloc+0x174>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008464:	f000 f910 	bl	8008688 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008468:	4b56      	ldr	r3, [pc, #344]	; (80085c4 <pvPortMalloc+0x178>)
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4013      	ands	r3, r2
 8008470:	2b00      	cmp	r3, #0
 8008472:	f040 808e 	bne.w	8008592 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d01d      	beq.n	80084b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800847c:	2208      	movs	r2, #8
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4413      	add	r3, r2
 8008482:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f003 0307 	and.w	r3, r3, #7
 800848a:	2b00      	cmp	r3, #0
 800848c:	d014      	beq.n	80084b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f023 0307 	bic.w	r3, r3, #7
 8008494:	3308      	adds	r3, #8
 8008496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f003 0307 	and.w	r3, r3, #7
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00a      	beq.n	80084b8 <pvPortMalloc+0x6c>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	617b      	str	r3, [r7, #20]
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d069      	beq.n	8008592 <pvPortMalloc+0x146>
 80084be:	4b42      	ldr	r3, [pc, #264]	; (80085c8 <pvPortMalloc+0x17c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d864      	bhi.n	8008592 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084c8:	4b40      	ldr	r3, [pc, #256]	; (80085cc <pvPortMalloc+0x180>)
 80084ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084cc:	4b3f      	ldr	r3, [pc, #252]	; (80085cc <pvPortMalloc+0x180>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084d2:	e004      	b.n	80084de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d903      	bls.n	80084f0 <pvPortMalloc+0xa4>
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1f1      	bne.n	80084d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084f0:	4b33      	ldr	r3, [pc, #204]	; (80085c0 <pvPortMalloc+0x174>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d04b      	beq.n	8008592 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2208      	movs	r2, #8
 8008500:	4413      	add	r3, r2
 8008502:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	1ad2      	subs	r2, r2, r3
 8008514:	2308      	movs	r3, #8
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	429a      	cmp	r2, r3
 800851a:	d91f      	bls.n	800855c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800851c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4413      	add	r3, r2
 8008522:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	f003 0307 	and.w	r3, r3, #7
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <pvPortMalloc+0xf8>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	613b      	str	r3, [r7, #16]
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	1ad2      	subs	r2, r2, r3
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008556:	69b8      	ldr	r0, [r7, #24]
 8008558:	f000 f8f8 	bl	800874c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800855c:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <pvPortMalloc+0x17c>)
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	4a18      	ldr	r2, [pc, #96]	; (80085c8 <pvPortMalloc+0x17c>)
 8008568:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800856a:	4b17      	ldr	r3, [pc, #92]	; (80085c8 <pvPortMalloc+0x17c>)
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	4b18      	ldr	r3, [pc, #96]	; (80085d0 <pvPortMalloc+0x184>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d203      	bcs.n	800857e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008576:	4b14      	ldr	r3, [pc, #80]	; (80085c8 <pvPortMalloc+0x17c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a15      	ldr	r2, [pc, #84]	; (80085d0 <pvPortMalloc+0x184>)
 800857c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	4b10      	ldr	r3, [pc, #64]	; (80085c4 <pvPortMalloc+0x178>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	431a      	orrs	r2, r3
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008592:	f7fe fd91 	bl	80070b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00a      	beq.n	80085b6 <pvPortMalloc+0x16a>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	60fb      	str	r3, [r7, #12]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <pvPortMalloc+0x168>
	return pvReturn;
 80085b6:	69fb      	ldr	r3, [r7, #28]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3728      	adds	r7, #40	; 0x28
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	20002794 	.word	0x20002794
 80085c4:	200027a0 	.word	0x200027a0
 80085c8:	20002798 	.word	0x20002798
 80085cc:	2000278c 	.word	0x2000278c
 80085d0:	2000279c 	.word	0x2000279c

080085d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d048      	beq.n	8008678 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085e6:	2308      	movs	r3, #8
 80085e8:	425b      	negs	r3, r3
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	4413      	add	r3, r2
 80085ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	685a      	ldr	r2, [r3, #4]
 80085f8:	4b21      	ldr	r3, [pc, #132]	; (8008680 <vPortFree+0xac>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4013      	ands	r3, r2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10a      	bne.n	8008618 <vPortFree+0x44>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	60fb      	str	r3, [r7, #12]
}
 8008614:	bf00      	nop
 8008616:	e7fe      	b.n	8008616 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00a      	beq.n	8008636 <vPortFree+0x62>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	60bb      	str	r3, [r7, #8]
}
 8008632:	bf00      	nop
 8008634:	e7fe      	b.n	8008634 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	4b11      	ldr	r3, [pc, #68]	; (8008680 <vPortFree+0xac>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4013      	ands	r3, r2
 8008640:	2b00      	cmp	r3, #0
 8008642:	d019      	beq.n	8008678 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d115      	bne.n	8008678 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <vPortFree+0xac>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	43db      	mvns	r3, r3
 8008656:	401a      	ands	r2, r3
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800865c:	f7fe fd1e 	bl	800709c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	4b07      	ldr	r3, [pc, #28]	; (8008684 <vPortFree+0xb0>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4413      	add	r3, r2
 800866a:	4a06      	ldr	r2, [pc, #24]	; (8008684 <vPortFree+0xb0>)
 800866c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800866e:	6938      	ldr	r0, [r7, #16]
 8008670:	f000 f86c 	bl	800874c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008674:	f7fe fd20 	bl	80070b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008678:	bf00      	nop
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	200027a0 	.word	0x200027a0
 8008684:	20002798 	.word	0x20002798

08008688 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800868e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008692:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008694:	4b27      	ldr	r3, [pc, #156]	; (8008734 <prvHeapInit+0xac>)
 8008696:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00c      	beq.n	80086bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3307      	adds	r3, #7
 80086a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0307 	bic.w	r3, r3, #7
 80086ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	4a1f      	ldr	r2, [pc, #124]	; (8008734 <prvHeapInit+0xac>)
 80086b8:	4413      	add	r3, r2
 80086ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086c0:	4a1d      	ldr	r2, [pc, #116]	; (8008738 <prvHeapInit+0xb0>)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086c6:	4b1c      	ldr	r3, [pc, #112]	; (8008738 <prvHeapInit+0xb0>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	4413      	add	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086d4:	2208      	movs	r2, #8
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	1a9b      	subs	r3, r3, r2
 80086da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0307 	bic.w	r3, r3, #7
 80086e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4a15      	ldr	r2, [pc, #84]	; (800873c <prvHeapInit+0xb4>)
 80086e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086ea:	4b14      	ldr	r3, [pc, #80]	; (800873c <prvHeapInit+0xb4>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2200      	movs	r2, #0
 80086f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086f2:	4b12      	ldr	r3, [pc, #72]	; (800873c <prvHeapInit+0xb4>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	1ad2      	subs	r2, r2, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008708:	4b0c      	ldr	r3, [pc, #48]	; (800873c <prvHeapInit+0xb4>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	4a0a      	ldr	r2, [pc, #40]	; (8008740 <prvHeapInit+0xb8>)
 8008716:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	4a09      	ldr	r2, [pc, #36]	; (8008744 <prvHeapInit+0xbc>)
 800871e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008720:	4b09      	ldr	r3, [pc, #36]	; (8008748 <prvHeapInit+0xc0>)
 8008722:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008726:	601a      	str	r2, [r3, #0]
}
 8008728:	bf00      	nop
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	bc80      	pop	{r7}
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	2000178c 	.word	0x2000178c
 8008738:	2000278c 	.word	0x2000278c
 800873c:	20002794 	.word	0x20002794
 8008740:	2000279c 	.word	0x2000279c
 8008744:	20002798 	.word	0x20002798
 8008748:	200027a0 	.word	0x200027a0

0800874c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008754:	4b27      	ldr	r3, [pc, #156]	; (80087f4 <prvInsertBlockIntoFreeList+0xa8>)
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	e002      	b.n	8008760 <prvInsertBlockIntoFreeList+0x14>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	429a      	cmp	r2, r3
 8008768:	d8f7      	bhi.n	800875a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	4413      	add	r3, r2
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	429a      	cmp	r2, r3
 800877a:	d108      	bne.n	800878e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	441a      	add	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	441a      	add	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d118      	bne.n	80087d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4b14      	ldr	r3, [pc, #80]	; (80087f8 <prvInsertBlockIntoFreeList+0xac>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d00d      	beq.n	80087ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	441a      	add	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	e008      	b.n	80087dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087ca:	4b0b      	ldr	r3, [pc, #44]	; (80087f8 <prvInsertBlockIntoFreeList+0xac>)
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	e003      	b.n	80087dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d002      	beq.n	80087ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ea:	bf00      	nop
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bc80      	pop	{r7}
 80087f2:	4770      	bx	lr
 80087f4:	2000278c 	.word	0x2000278c
 80087f8:	20002794 	.word	0x20002794

080087fc <__aeabi_atexit>:
 80087fc:	460b      	mov	r3, r1
 80087fe:	4601      	mov	r1, r0
 8008800:	4618      	mov	r0, r3
 8008802:	f000 b943 	b.w	8008a8c <__cxa_atexit>

08008806 <_ZdlPvj>:
 8008806:	f000 b914 	b.w	8008a32 <_ZdlPv>

0800880a <_Znwj>:
 800880a:	2801      	cmp	r0, #1
 800880c:	bf38      	it	cc
 800880e:	2001      	movcc	r0, #1
 8008810:	b510      	push	{r4, lr}
 8008812:	4604      	mov	r4, r0
 8008814:	4620      	mov	r0, r4
 8008816:	f000 f973 	bl	8008b00 <malloc>
 800881a:	b930      	cbnz	r0, 800882a <_Znwj+0x20>
 800881c:	f000 f91e 	bl	8008a5c <_ZSt15get_new_handlerv>
 8008820:	b908      	cbnz	r0, 8008826 <_Znwj+0x1c>
 8008822:	f000 f92c 	bl	8008a7e <abort>
 8008826:	4780      	blx	r0
 8008828:	e7f4      	b.n	8008814 <_Znwj+0xa>
 800882a:	bd10      	pop	{r4, pc}

0800882c <__cxa_pure_virtual>:
 800882c:	b508      	push	{r3, lr}
 800882e:	f000 f90f 	bl	8008a50 <_ZSt9terminatev>

08008832 <_ZNSaIcEC1Ev>:
 8008832:	4770      	bx	lr

08008834 <_ZNSaIcED1Ev>:
 8008834:	4770      	bx	lr

08008836 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8008836:	b10a      	cbz	r2, 800883c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8008838:	f000 b990 	b.w	8008b5c <memcpy>
 800883c:	4770      	bx	lr

0800883e <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800883e:	b10a      	cbz	r2, 8008844 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8008840:	f000 b97c 	b.w	8008b3c <memcmp>
 8008844:	4610      	mov	r0, r2
 8008846:	4770      	bx	lr

08008848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8008848:	b508      	push	{r3, lr}
 800884a:	680b      	ldr	r3, [r1, #0]
 800884c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008850:	d302      	bcc.n	8008858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8008852:	480d      	ldr	r0, [pc, #52]	; (8008888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8008854:	f000 f910 	bl	8008a78 <_ZSt20__throw_length_errorPKc>
 8008858:	4293      	cmp	r3, r2
 800885a:	d90b      	bls.n	8008874 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800885c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8008860:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8008864:	d206      	bcs.n	8008874 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008866:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800886a:	bf2a      	itet	cs
 800886c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8008870:	6008      	strcc	r0, [r1, #0]
 8008872:	600b      	strcs	r3, [r1, #0]
 8008874:	6808      	ldr	r0, [r1, #0]
 8008876:	3001      	adds	r0, #1
 8008878:	d501      	bpl.n	800887e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800887a:	f000 f8f7 	bl	8008a6c <_ZSt17__throw_bad_allocv>
 800887e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008882:	f7ff bfc2 	b.w	800880a <_Znwj>
 8008886:	bf00      	nop
 8008888:	08009954 	.word	0x08009954

0800888c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800888c:	4603      	mov	r3, r0
 800888e:	f853 0b08 	ldr.w	r0, [r3], #8
 8008892:	4298      	cmp	r0, r3
 8008894:	d001      	beq.n	800889a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8008896:	f000 b8cc 	b.w	8008a32 <_ZdlPv>
 800889a:	4770      	bx	lr

0800889c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800889c:	2a01      	cmp	r2, #1
 800889e:	b410      	push	{r4}
 80088a0:	d103      	bne.n	80088aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 80088a2:	780a      	ldrb	r2, [r1, #0]
 80088a4:	bc10      	pop	{r4}
 80088a6:	7002      	strb	r2, [r0, #0]
 80088a8:	4770      	bx	lr
 80088aa:	bc10      	pop	{r4}
 80088ac:	f7ff bfc3 	b.w	8008836 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080088b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80088b0:	b508      	push	{r3, lr}
 80088b2:	1a52      	subs	r2, r2, r1
 80088b4:	f7ff fff2 	bl	800889c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80088b8:	bd08      	pop	{r3, pc}

080088ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80088ba:	b508      	push	{r3, lr}
 80088bc:	1a52      	subs	r2, r2, r1
 80088be:	f7ff ffed 	bl	800889c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80088c2:	bd08      	pop	{r3, pc}

080088c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80088c4:	4288      	cmp	r0, r1
 80088c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088c8:	4604      	mov	r4, r0
 80088ca:	460e      	mov	r6, r1
 80088cc:	d01e      	beq.n	800890c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f853 2b08 	ldr.w	r2, [r3], #8
 80088d4:	684d      	ldr	r5, [r1, #4]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	bf0c      	ite	eq
 80088da:	220f      	moveq	r2, #15
 80088dc:	6882      	ldrne	r2, [r0, #8]
 80088de:	42aa      	cmp	r2, r5
 80088e0:	d20a      	bcs.n	80088f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 80088e2:	a901      	add	r1, sp, #4
 80088e4:	9501      	str	r5, [sp, #4]
 80088e6:	f7ff ffaf 	bl	8008848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80088ea:	4607      	mov	r7, r0
 80088ec:	4620      	mov	r0, r4
 80088ee:	f7ff ffcd 	bl	800888c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80088f2:	9b01      	ldr	r3, [sp, #4]
 80088f4:	6027      	str	r7, [r4, #0]
 80088f6:	60a3      	str	r3, [r4, #8]
 80088f8:	b125      	cbz	r5, 8008904 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 80088fa:	462a      	mov	r2, r5
 80088fc:	6831      	ldr	r1, [r6, #0]
 80088fe:	6820      	ldr	r0, [r4, #0]
 8008900:	f7ff ffcc 	bl	800889c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008904:	2200      	movs	r2, #0
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	6065      	str	r5, [r4, #4]
 800890a:	555a      	strb	r2, [r3, r5]
 800890c:	b003      	add	sp, #12
 800890e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008910 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8008910:	f100 0208 	add.w	r2, r0, #8
 8008914:	6002      	str	r2, [r0, #0]
 8008916:	2200      	movs	r2, #0
 8008918:	6042      	str	r2, [r0, #4]
 800891a:	7202      	strb	r2, [r0, #8]
 800891c:	4770      	bx	lr

0800891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800891e:	b510      	push	{r4, lr}
 8008920:	4604      	mov	r4, r0
 8008922:	f7ff ffb3 	bl	800888c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008926:	4620      	mov	r0, r4
 8008928:	bd10      	pop	{r4, pc}

0800892a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800892a:	b510      	push	{r4, lr}
 800892c:	4604      	mov	r4, r0
 800892e:	f7ff ffc9 	bl	80088c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8008932:	4620      	mov	r0, r4
 8008934:	bd10      	pop	{r4, pc}

08008936 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8008936:	6840      	ldr	r0, [r0, #4]
 8008938:	4770      	bx	lr

0800893a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800893a:	6800      	ldr	r0, [r0, #0]
 800893c:	4770      	bx	lr

0800893e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 800893e:	b538      	push	{r3, r4, r5, lr}
 8008940:	6845      	ldr	r5, [r0, #4]
 8008942:	684c      	ldr	r4, [r1, #4]
 8008944:	462a      	mov	r2, r5
 8008946:	42a5      	cmp	r5, r4
 8008948:	bf28      	it	cs
 800894a:	4622      	movcs	r2, r4
 800894c:	6809      	ldr	r1, [r1, #0]
 800894e:	6800      	ldr	r0, [r0, #0]
 8008950:	f7ff ff75 	bl	800883e <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8008954:	b900      	cbnz	r0, 8008958 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 8008956:	1b28      	subs	r0, r5, r4
 8008958:	bd38      	pop	{r3, r4, r5, pc}
	...

0800895c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800895c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800895e:	4604      	mov	r4, r0
 8008960:	4616      	mov	r6, r2
 8008962:	460d      	mov	r5, r1
 8008964:	b919      	cbnz	r1, 800896e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8008966:	b112      	cbz	r2, 800896e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8008968:	480d      	ldr	r0, [pc, #52]	; (80089a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800896a:	f000 f882 	bl	8008a72 <_ZSt19__throw_logic_errorPKc>
 800896e:	1b73      	subs	r3, r6, r5
 8008970:	2b0f      	cmp	r3, #15
 8008972:	9301      	str	r3, [sp, #4]
 8008974:	d907      	bls.n	8008986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8008976:	2200      	movs	r2, #0
 8008978:	4620      	mov	r0, r4
 800897a:	a901      	add	r1, sp, #4
 800897c:	f7ff ff64 	bl	8008848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008980:	9b01      	ldr	r3, [sp, #4]
 8008982:	6020      	str	r0, [r4, #0]
 8008984:	60a3      	str	r3, [r4, #8]
 8008986:	4632      	mov	r2, r6
 8008988:	4629      	mov	r1, r5
 800898a:	6820      	ldr	r0, [r4, #0]
 800898c:	f7ff ff90 	bl	80088b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8008990:	2100      	movs	r1, #0
 8008992:	9b01      	ldr	r3, [sp, #4]
 8008994:	6822      	ldr	r2, [r4, #0]
 8008996:	6063      	str	r3, [r4, #4]
 8008998:	54d1      	strb	r1, [r2, r3]
 800899a:	b002      	add	sp, #8
 800899c:	bd70      	pop	{r4, r5, r6, pc}
 800899e:	bf00      	nop
 80089a0:	0800996c 	.word	0x0800996c

080089a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	4604      	mov	r4, r0
 80089a8:	f100 0208 	add.w	r2, r0, #8
 80089ac:	6002      	str	r2, [r0, #0]
 80089ae:	e9d1 1200 	ldrd	r1, r2, [r1]
 80089b2:	f04f 0300 	mov.w	r3, #0
 80089b6:	440a      	add	r2, r1
 80089b8:	f7ff ffd0 	bl	800895c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80089bc:	4620      	mov	r0, r4
 80089be:	bd10      	pop	{r4, pc}

080089c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80089c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089c2:	4604      	mov	r4, r0
 80089c4:	4616      	mov	r6, r2
 80089c6:	460d      	mov	r5, r1
 80089c8:	b919      	cbnz	r1, 80089d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80089ca:	b112      	cbz	r2, 80089d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80089cc:	480d      	ldr	r0, [pc, #52]	; (8008a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80089ce:	f000 f850 	bl	8008a72 <_ZSt19__throw_logic_errorPKc>
 80089d2:	1b73      	subs	r3, r6, r5
 80089d4:	2b0f      	cmp	r3, #15
 80089d6:	9301      	str	r3, [sp, #4]
 80089d8:	d907      	bls.n	80089ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80089da:	2200      	movs	r2, #0
 80089dc:	4620      	mov	r0, r4
 80089de:	a901      	add	r1, sp, #4
 80089e0:	f7ff ff32 	bl	8008848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80089e4:	9b01      	ldr	r3, [sp, #4]
 80089e6:	6020      	str	r0, [r4, #0]
 80089e8:	60a3      	str	r3, [r4, #8]
 80089ea:	4632      	mov	r2, r6
 80089ec:	4629      	mov	r1, r5
 80089ee:	6820      	ldr	r0, [r4, #0]
 80089f0:	f7ff ff63 	bl	80088ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80089f4:	2100      	movs	r1, #0
 80089f6:	9b01      	ldr	r3, [sp, #4]
 80089f8:	6822      	ldr	r2, [r4, #0]
 80089fa:	6063      	str	r3, [r4, #4]
 80089fc:	54d1      	strb	r1, [r2, r3]
 80089fe:	b002      	add	sp, #8
 8008a00:	bd70      	pop	{r4, r5, r6, pc}
 8008a02:	bf00      	nop
 8008a04:	0800996c 	.word	0x0800996c

08008a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	f100 0308 	add.w	r3, r0, #8
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460d      	mov	r5, r1
 8008a12:	6003      	str	r3, [r0, #0]
 8008a14:	b159      	cbz	r1, 8008a2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8008a16:	4608      	mov	r0, r1
 8008a18:	f7f7 fc0a 	bl	8000230 <strlen>
 8008a1c:	182a      	adds	r2, r5, r0
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f04f 0300 	mov.w	r3, #0
 8008a24:	4629      	mov	r1, r5
 8008a26:	f7ff ffcb 	bl	80089c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	bd38      	pop	{r3, r4, r5, pc}
 8008a2e:	2201      	movs	r2, #1
 8008a30:	e7f5      	b.n	8008a1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08008a32 <_ZdlPv>:
 8008a32:	f000 b86d 	b.w	8008b10 <free>

08008a36 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008a36:	b508      	push	{r3, lr}
 8008a38:	4780      	blx	r0
 8008a3a:	f000 f820 	bl	8008a7e <abort>
	...

08008a40 <_ZSt13get_terminatev>:
 8008a40:	4b02      	ldr	r3, [pc, #8]	; (8008a4c <_ZSt13get_terminatev+0xc>)
 8008a42:	6818      	ldr	r0, [r3, #0]
 8008a44:	f3bf 8f5b 	dmb	ish
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	20000014 	.word	0x20000014

08008a50 <_ZSt9terminatev>:
 8008a50:	b508      	push	{r3, lr}
 8008a52:	f7ff fff5 	bl	8008a40 <_ZSt13get_terminatev>
 8008a56:	f7ff ffee 	bl	8008a36 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08008a5c <_ZSt15get_new_handlerv>:
 8008a5c:	4b02      	ldr	r3, [pc, #8]	; (8008a68 <_ZSt15get_new_handlerv+0xc>)
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	f3bf 8f5b 	dmb	ish
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	200027a4 	.word	0x200027a4

08008a6c <_ZSt17__throw_bad_allocv>:
 8008a6c:	b508      	push	{r3, lr}
 8008a6e:	f000 f806 	bl	8008a7e <abort>

08008a72 <_ZSt19__throw_logic_errorPKc>:
 8008a72:	b508      	push	{r3, lr}
 8008a74:	f000 f803 	bl	8008a7e <abort>

08008a78 <_ZSt20__throw_length_errorPKc>:
 8008a78:	b508      	push	{r3, lr}
 8008a7a:	f000 f800 	bl	8008a7e <abort>

08008a7e <abort>:
 8008a7e:	2006      	movs	r0, #6
 8008a80:	b508      	push	{r3, lr}
 8008a82:	f000 fa19 	bl	8008eb8 <raise>
 8008a86:	2001      	movs	r0, #1
 8008a88:	f7fb fced 	bl	8004466 <_exit>

08008a8c <__cxa_atexit>:
 8008a8c:	b510      	push	{r4, lr}
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4804      	ldr	r0, [pc, #16]	; (8008aa4 <__cxa_atexit+0x18>)
 8008a92:	4613      	mov	r3, r2
 8008a94:	b120      	cbz	r0, 8008aa0 <__cxa_atexit+0x14>
 8008a96:	460a      	mov	r2, r1
 8008a98:	2002      	movs	r0, #2
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	f3af 8000 	nop.w
 8008aa0:	bd10      	pop	{r4, pc}
 8008aa2:	bf00      	nop
 8008aa4:	00000000 	.word	0x00000000

08008aa8 <__errno>:
 8008aa8:	4b01      	ldr	r3, [pc, #4]	; (8008ab0 <__errno+0x8>)
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	20000018 	.word	0x20000018

08008ab4 <__libc_init_array>:
 8008ab4:	b570      	push	{r4, r5, r6, lr}
 8008ab6:	2600      	movs	r6, #0
 8008ab8:	4d0c      	ldr	r5, [pc, #48]	; (8008aec <__libc_init_array+0x38>)
 8008aba:	4c0d      	ldr	r4, [pc, #52]	; (8008af0 <__libc_init_array+0x3c>)
 8008abc:	1b64      	subs	r4, r4, r5
 8008abe:	10a4      	asrs	r4, r4, #2
 8008ac0:	42a6      	cmp	r6, r4
 8008ac2:	d109      	bne.n	8008ad8 <__libc_init_array+0x24>
 8008ac4:	f000 fd6a 	bl	800959c <_init>
 8008ac8:	2600      	movs	r6, #0
 8008aca:	4d0a      	ldr	r5, [pc, #40]	; (8008af4 <__libc_init_array+0x40>)
 8008acc:	4c0a      	ldr	r4, [pc, #40]	; (8008af8 <__libc_init_array+0x44>)
 8008ace:	1b64      	subs	r4, r4, r5
 8008ad0:	10a4      	asrs	r4, r4, #2
 8008ad2:	42a6      	cmp	r6, r4
 8008ad4:	d105      	bne.n	8008ae2 <__libc_init_array+0x2e>
 8008ad6:	bd70      	pop	{r4, r5, r6, pc}
 8008ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008adc:	4798      	blx	r3
 8008ade:	3601      	adds	r6, #1
 8008ae0:	e7ee      	b.n	8008ac0 <__libc_init_array+0xc>
 8008ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae6:	4798      	blx	r3
 8008ae8:	3601      	adds	r6, #1
 8008aea:	e7f2      	b.n	8008ad2 <__libc_init_array+0x1e>
 8008aec:	08009b94 	.word	0x08009b94
 8008af0:	08009b94 	.word	0x08009b94
 8008af4:	08009b94 	.word	0x08009b94
 8008af8:	08009b9c 	.word	0x08009b9c

08008afc <__retarget_lock_acquire_recursive>:
 8008afc:	4770      	bx	lr

08008afe <__retarget_lock_release_recursive>:
 8008afe:	4770      	bx	lr

08008b00 <malloc>:
 8008b00:	4b02      	ldr	r3, [pc, #8]	; (8008b0c <malloc+0xc>)
 8008b02:	4601      	mov	r1, r0
 8008b04:	6818      	ldr	r0, [r3, #0]
 8008b06:	f000 b8c1 	b.w	8008c8c <_malloc_r>
 8008b0a:	bf00      	nop
 8008b0c:	20000018 	.word	0x20000018

08008b10 <free>:
 8008b10:	4b02      	ldr	r3, [pc, #8]	; (8008b1c <free+0xc>)
 8008b12:	4601      	mov	r1, r0
 8008b14:	6818      	ldr	r0, [r3, #0]
 8008b16:	f000 b851 	b.w	8008bbc <_free_r>
 8008b1a:	bf00      	nop
 8008b1c:	20000018 	.word	0x20000018

08008b20 <memchr>:
 8008b20:	4603      	mov	r3, r0
 8008b22:	b510      	push	{r4, lr}
 8008b24:	b2c9      	uxtb	r1, r1
 8008b26:	4402      	add	r2, r0
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	d101      	bne.n	8008b32 <memchr+0x12>
 8008b2e:	2000      	movs	r0, #0
 8008b30:	e003      	b.n	8008b3a <memchr+0x1a>
 8008b32:	7804      	ldrb	r4, [r0, #0]
 8008b34:	3301      	adds	r3, #1
 8008b36:	428c      	cmp	r4, r1
 8008b38:	d1f6      	bne.n	8008b28 <memchr+0x8>
 8008b3a:	bd10      	pop	{r4, pc}

08008b3c <memcmp>:
 8008b3c:	b510      	push	{r4, lr}
 8008b3e:	3901      	subs	r1, #1
 8008b40:	4402      	add	r2, r0
 8008b42:	4290      	cmp	r0, r2
 8008b44:	d101      	bne.n	8008b4a <memcmp+0xe>
 8008b46:	2000      	movs	r0, #0
 8008b48:	e005      	b.n	8008b56 <memcmp+0x1a>
 8008b4a:	7803      	ldrb	r3, [r0, #0]
 8008b4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008b50:	42a3      	cmp	r3, r4
 8008b52:	d001      	beq.n	8008b58 <memcmp+0x1c>
 8008b54:	1b18      	subs	r0, r3, r4
 8008b56:	bd10      	pop	{r4, pc}
 8008b58:	3001      	adds	r0, #1
 8008b5a:	e7f2      	b.n	8008b42 <memcmp+0x6>

08008b5c <memcpy>:
 8008b5c:	440a      	add	r2, r1
 8008b5e:	4291      	cmp	r1, r2
 8008b60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b64:	d100      	bne.n	8008b68 <memcpy+0xc>
 8008b66:	4770      	bx	lr
 8008b68:	b510      	push	{r4, lr}
 8008b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b6e:	4291      	cmp	r1, r2
 8008b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b74:	d1f9      	bne.n	8008b6a <memcpy+0xe>
 8008b76:	bd10      	pop	{r4, pc}

08008b78 <memmove>:
 8008b78:	4288      	cmp	r0, r1
 8008b7a:	b510      	push	{r4, lr}
 8008b7c:	eb01 0402 	add.w	r4, r1, r2
 8008b80:	d902      	bls.n	8008b88 <memmove+0x10>
 8008b82:	4284      	cmp	r4, r0
 8008b84:	4623      	mov	r3, r4
 8008b86:	d807      	bhi.n	8008b98 <memmove+0x20>
 8008b88:	1e43      	subs	r3, r0, #1
 8008b8a:	42a1      	cmp	r1, r4
 8008b8c:	d008      	beq.n	8008ba0 <memmove+0x28>
 8008b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b96:	e7f8      	b.n	8008b8a <memmove+0x12>
 8008b98:	4601      	mov	r1, r0
 8008b9a:	4402      	add	r2, r0
 8008b9c:	428a      	cmp	r2, r1
 8008b9e:	d100      	bne.n	8008ba2 <memmove+0x2a>
 8008ba0:	bd10      	pop	{r4, pc}
 8008ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008baa:	e7f7      	b.n	8008b9c <memmove+0x24>

08008bac <memset>:
 8008bac:	4603      	mov	r3, r0
 8008bae:	4402      	add	r2, r0
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d100      	bne.n	8008bb6 <memset+0xa>
 8008bb4:	4770      	bx	lr
 8008bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bba:	e7f9      	b.n	8008bb0 <memset+0x4>

08008bbc <_free_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4605      	mov	r5, r0
 8008bc0:	2900      	cmp	r1, #0
 8008bc2:	d040      	beq.n	8008c46 <_free_r+0x8a>
 8008bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bc8:	1f0c      	subs	r4, r1, #4
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	bfb8      	it	lt
 8008bce:	18e4      	addlt	r4, r4, r3
 8008bd0:	f000 f9ae 	bl	8008f30 <__malloc_lock>
 8008bd4:	4a1c      	ldr	r2, [pc, #112]	; (8008c48 <_free_r+0x8c>)
 8008bd6:	6813      	ldr	r3, [r2, #0]
 8008bd8:	b933      	cbnz	r3, 8008be8 <_free_r+0x2c>
 8008bda:	6063      	str	r3, [r4, #4]
 8008bdc:	6014      	str	r4, [r2, #0]
 8008bde:	4628      	mov	r0, r5
 8008be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008be4:	f000 b9aa 	b.w	8008f3c <__malloc_unlock>
 8008be8:	42a3      	cmp	r3, r4
 8008bea:	d908      	bls.n	8008bfe <_free_r+0x42>
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	1821      	adds	r1, r4, r0
 8008bf0:	428b      	cmp	r3, r1
 8008bf2:	bf01      	itttt	eq
 8008bf4:	6819      	ldreq	r1, [r3, #0]
 8008bf6:	685b      	ldreq	r3, [r3, #4]
 8008bf8:	1809      	addeq	r1, r1, r0
 8008bfa:	6021      	streq	r1, [r4, #0]
 8008bfc:	e7ed      	b.n	8008bda <_free_r+0x1e>
 8008bfe:	461a      	mov	r2, r3
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	b10b      	cbz	r3, 8008c08 <_free_r+0x4c>
 8008c04:	42a3      	cmp	r3, r4
 8008c06:	d9fa      	bls.n	8008bfe <_free_r+0x42>
 8008c08:	6811      	ldr	r1, [r2, #0]
 8008c0a:	1850      	adds	r0, r2, r1
 8008c0c:	42a0      	cmp	r0, r4
 8008c0e:	d10b      	bne.n	8008c28 <_free_r+0x6c>
 8008c10:	6820      	ldr	r0, [r4, #0]
 8008c12:	4401      	add	r1, r0
 8008c14:	1850      	adds	r0, r2, r1
 8008c16:	4283      	cmp	r3, r0
 8008c18:	6011      	str	r1, [r2, #0]
 8008c1a:	d1e0      	bne.n	8008bde <_free_r+0x22>
 8008c1c:	6818      	ldr	r0, [r3, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	4401      	add	r1, r0
 8008c22:	6011      	str	r1, [r2, #0]
 8008c24:	6053      	str	r3, [r2, #4]
 8008c26:	e7da      	b.n	8008bde <_free_r+0x22>
 8008c28:	d902      	bls.n	8008c30 <_free_r+0x74>
 8008c2a:	230c      	movs	r3, #12
 8008c2c:	602b      	str	r3, [r5, #0]
 8008c2e:	e7d6      	b.n	8008bde <_free_r+0x22>
 8008c30:	6820      	ldr	r0, [r4, #0]
 8008c32:	1821      	adds	r1, r4, r0
 8008c34:	428b      	cmp	r3, r1
 8008c36:	bf01      	itttt	eq
 8008c38:	6819      	ldreq	r1, [r3, #0]
 8008c3a:	685b      	ldreq	r3, [r3, #4]
 8008c3c:	1809      	addeq	r1, r1, r0
 8008c3e:	6021      	streq	r1, [r4, #0]
 8008c40:	6063      	str	r3, [r4, #4]
 8008c42:	6054      	str	r4, [r2, #4]
 8008c44:	e7cb      	b.n	8008bde <_free_r+0x22>
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	200027ac 	.word	0x200027ac

08008c4c <sbrk_aligned>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	4e0e      	ldr	r6, [pc, #56]	; (8008c88 <sbrk_aligned+0x3c>)
 8008c50:	460c      	mov	r4, r1
 8008c52:	6831      	ldr	r1, [r6, #0]
 8008c54:	4605      	mov	r5, r0
 8008c56:	b911      	cbnz	r1, 8008c5e <sbrk_aligned+0x12>
 8008c58:	f000 f8f6 	bl	8008e48 <_sbrk_r>
 8008c5c:	6030      	str	r0, [r6, #0]
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4628      	mov	r0, r5
 8008c62:	f000 f8f1 	bl	8008e48 <_sbrk_r>
 8008c66:	1c43      	adds	r3, r0, #1
 8008c68:	d00a      	beq.n	8008c80 <sbrk_aligned+0x34>
 8008c6a:	1cc4      	adds	r4, r0, #3
 8008c6c:	f024 0403 	bic.w	r4, r4, #3
 8008c70:	42a0      	cmp	r0, r4
 8008c72:	d007      	beq.n	8008c84 <sbrk_aligned+0x38>
 8008c74:	1a21      	subs	r1, r4, r0
 8008c76:	4628      	mov	r0, r5
 8008c78:	f000 f8e6 	bl	8008e48 <_sbrk_r>
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d101      	bne.n	8008c84 <sbrk_aligned+0x38>
 8008c80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008c84:	4620      	mov	r0, r4
 8008c86:	bd70      	pop	{r4, r5, r6, pc}
 8008c88:	200027b0 	.word	0x200027b0

08008c8c <_malloc_r>:
 8008c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c90:	1ccd      	adds	r5, r1, #3
 8008c92:	f025 0503 	bic.w	r5, r5, #3
 8008c96:	3508      	adds	r5, #8
 8008c98:	2d0c      	cmp	r5, #12
 8008c9a:	bf38      	it	cc
 8008c9c:	250c      	movcc	r5, #12
 8008c9e:	2d00      	cmp	r5, #0
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	db01      	blt.n	8008ca8 <_malloc_r+0x1c>
 8008ca4:	42a9      	cmp	r1, r5
 8008ca6:	d905      	bls.n	8008cb4 <_malloc_r+0x28>
 8008ca8:	230c      	movs	r3, #12
 8008caa:	2600      	movs	r6, #0
 8008cac:	603b      	str	r3, [r7, #0]
 8008cae:	4630      	mov	r0, r6
 8008cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb4:	4e2e      	ldr	r6, [pc, #184]	; (8008d70 <_malloc_r+0xe4>)
 8008cb6:	f000 f93b 	bl	8008f30 <__malloc_lock>
 8008cba:	6833      	ldr	r3, [r6, #0]
 8008cbc:	461c      	mov	r4, r3
 8008cbe:	bb34      	cbnz	r4, 8008d0e <_malloc_r+0x82>
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	4638      	mov	r0, r7
 8008cc4:	f7ff ffc2 	bl	8008c4c <sbrk_aligned>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	4604      	mov	r4, r0
 8008ccc:	d14d      	bne.n	8008d6a <_malloc_r+0xde>
 8008cce:	6834      	ldr	r4, [r6, #0]
 8008cd0:	4626      	mov	r6, r4
 8008cd2:	2e00      	cmp	r6, #0
 8008cd4:	d140      	bne.n	8008d58 <_malloc_r+0xcc>
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4638      	mov	r0, r7
 8008cdc:	eb04 0803 	add.w	r8, r4, r3
 8008ce0:	f000 f8b2 	bl	8008e48 <_sbrk_r>
 8008ce4:	4580      	cmp	r8, r0
 8008ce6:	d13a      	bne.n	8008d5e <_malloc_r+0xd2>
 8008ce8:	6821      	ldr	r1, [r4, #0]
 8008cea:	3503      	adds	r5, #3
 8008cec:	1a6d      	subs	r5, r5, r1
 8008cee:	f025 0503 	bic.w	r5, r5, #3
 8008cf2:	3508      	adds	r5, #8
 8008cf4:	2d0c      	cmp	r5, #12
 8008cf6:	bf38      	it	cc
 8008cf8:	250c      	movcc	r5, #12
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	f7ff ffa5 	bl	8008c4c <sbrk_aligned>
 8008d02:	3001      	adds	r0, #1
 8008d04:	d02b      	beq.n	8008d5e <_malloc_r+0xd2>
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	442b      	add	r3, r5
 8008d0a:	6023      	str	r3, [r4, #0]
 8008d0c:	e00e      	b.n	8008d2c <_malloc_r+0xa0>
 8008d0e:	6822      	ldr	r2, [r4, #0]
 8008d10:	1b52      	subs	r2, r2, r5
 8008d12:	d41e      	bmi.n	8008d52 <_malloc_r+0xc6>
 8008d14:	2a0b      	cmp	r2, #11
 8008d16:	d916      	bls.n	8008d46 <_malloc_r+0xba>
 8008d18:	1961      	adds	r1, r4, r5
 8008d1a:	42a3      	cmp	r3, r4
 8008d1c:	6025      	str	r5, [r4, #0]
 8008d1e:	bf18      	it	ne
 8008d20:	6059      	strne	r1, [r3, #4]
 8008d22:	6863      	ldr	r3, [r4, #4]
 8008d24:	bf08      	it	eq
 8008d26:	6031      	streq	r1, [r6, #0]
 8008d28:	5162      	str	r2, [r4, r5]
 8008d2a:	604b      	str	r3, [r1, #4]
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	f104 060b 	add.w	r6, r4, #11
 8008d32:	f000 f903 	bl	8008f3c <__malloc_unlock>
 8008d36:	f026 0607 	bic.w	r6, r6, #7
 8008d3a:	1d23      	adds	r3, r4, #4
 8008d3c:	1af2      	subs	r2, r6, r3
 8008d3e:	d0b6      	beq.n	8008cae <_malloc_r+0x22>
 8008d40:	1b9b      	subs	r3, r3, r6
 8008d42:	50a3      	str	r3, [r4, r2]
 8008d44:	e7b3      	b.n	8008cae <_malloc_r+0x22>
 8008d46:	6862      	ldr	r2, [r4, #4]
 8008d48:	42a3      	cmp	r3, r4
 8008d4a:	bf0c      	ite	eq
 8008d4c:	6032      	streq	r2, [r6, #0]
 8008d4e:	605a      	strne	r2, [r3, #4]
 8008d50:	e7ec      	b.n	8008d2c <_malloc_r+0xa0>
 8008d52:	4623      	mov	r3, r4
 8008d54:	6864      	ldr	r4, [r4, #4]
 8008d56:	e7b2      	b.n	8008cbe <_malloc_r+0x32>
 8008d58:	4634      	mov	r4, r6
 8008d5a:	6876      	ldr	r6, [r6, #4]
 8008d5c:	e7b9      	b.n	8008cd2 <_malloc_r+0x46>
 8008d5e:	230c      	movs	r3, #12
 8008d60:	4638      	mov	r0, r7
 8008d62:	603b      	str	r3, [r7, #0]
 8008d64:	f000 f8ea 	bl	8008f3c <__malloc_unlock>
 8008d68:	e7a1      	b.n	8008cae <_malloc_r+0x22>
 8008d6a:	6025      	str	r5, [r4, #0]
 8008d6c:	e7de      	b.n	8008d2c <_malloc_r+0xa0>
 8008d6e:	bf00      	nop
 8008d70:	200027ac 	.word	0x200027ac

08008d74 <cleanup_glue>:
 8008d74:	b538      	push	{r3, r4, r5, lr}
 8008d76:	460c      	mov	r4, r1
 8008d78:	6809      	ldr	r1, [r1, #0]
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	b109      	cbz	r1, 8008d82 <cleanup_glue+0xe>
 8008d7e:	f7ff fff9 	bl	8008d74 <cleanup_glue>
 8008d82:	4621      	mov	r1, r4
 8008d84:	4628      	mov	r0, r5
 8008d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d8a:	f7ff bf17 	b.w	8008bbc <_free_r>
	...

08008d90 <_reclaim_reent>:
 8008d90:	4b2c      	ldr	r3, [pc, #176]	; (8008e44 <_reclaim_reent+0xb4>)
 8008d92:	b570      	push	{r4, r5, r6, lr}
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4604      	mov	r4, r0
 8008d98:	4283      	cmp	r3, r0
 8008d9a:	d051      	beq.n	8008e40 <_reclaim_reent+0xb0>
 8008d9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008d9e:	b143      	cbz	r3, 8008db2 <_reclaim_reent+0x22>
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d14a      	bne.n	8008e3c <_reclaim_reent+0xac>
 8008da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008da8:	6819      	ldr	r1, [r3, #0]
 8008daa:	b111      	cbz	r1, 8008db2 <_reclaim_reent+0x22>
 8008dac:	4620      	mov	r0, r4
 8008dae:	f7ff ff05 	bl	8008bbc <_free_r>
 8008db2:	6961      	ldr	r1, [r4, #20]
 8008db4:	b111      	cbz	r1, 8008dbc <_reclaim_reent+0x2c>
 8008db6:	4620      	mov	r0, r4
 8008db8:	f7ff ff00 	bl	8008bbc <_free_r>
 8008dbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008dbe:	b111      	cbz	r1, 8008dc6 <_reclaim_reent+0x36>
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f7ff fefb 	bl	8008bbc <_free_r>
 8008dc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008dc8:	b111      	cbz	r1, 8008dd0 <_reclaim_reent+0x40>
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f7ff fef6 	bl	8008bbc <_free_r>
 8008dd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008dd2:	b111      	cbz	r1, 8008dda <_reclaim_reent+0x4a>
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f7ff fef1 	bl	8008bbc <_free_r>
 8008dda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008ddc:	b111      	cbz	r1, 8008de4 <_reclaim_reent+0x54>
 8008dde:	4620      	mov	r0, r4
 8008de0:	f7ff feec 	bl	8008bbc <_free_r>
 8008de4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008de6:	b111      	cbz	r1, 8008dee <_reclaim_reent+0x5e>
 8008de8:	4620      	mov	r0, r4
 8008dea:	f7ff fee7 	bl	8008bbc <_free_r>
 8008dee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008df0:	b111      	cbz	r1, 8008df8 <_reclaim_reent+0x68>
 8008df2:	4620      	mov	r0, r4
 8008df4:	f7ff fee2 	bl	8008bbc <_free_r>
 8008df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dfa:	b111      	cbz	r1, 8008e02 <_reclaim_reent+0x72>
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f7ff fedd 	bl	8008bbc <_free_r>
 8008e02:	69a3      	ldr	r3, [r4, #24]
 8008e04:	b1e3      	cbz	r3, 8008e40 <_reclaim_reent+0xb0>
 8008e06:	4620      	mov	r0, r4
 8008e08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e0a:	4798      	blx	r3
 8008e0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008e0e:	b1b9      	cbz	r1, 8008e40 <_reclaim_reent+0xb0>
 8008e10:	4620      	mov	r0, r4
 8008e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e16:	f7ff bfad 	b.w	8008d74 <cleanup_glue>
 8008e1a:	5949      	ldr	r1, [r1, r5]
 8008e1c:	b941      	cbnz	r1, 8008e30 <_reclaim_reent+0xa0>
 8008e1e:	3504      	adds	r5, #4
 8008e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e22:	2d80      	cmp	r5, #128	; 0x80
 8008e24:	68d9      	ldr	r1, [r3, #12]
 8008e26:	d1f8      	bne.n	8008e1a <_reclaim_reent+0x8a>
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f7ff fec7 	bl	8008bbc <_free_r>
 8008e2e:	e7ba      	b.n	8008da6 <_reclaim_reent+0x16>
 8008e30:	680e      	ldr	r6, [r1, #0]
 8008e32:	4620      	mov	r0, r4
 8008e34:	f7ff fec2 	bl	8008bbc <_free_r>
 8008e38:	4631      	mov	r1, r6
 8008e3a:	e7ef      	b.n	8008e1c <_reclaim_reent+0x8c>
 8008e3c:	2500      	movs	r5, #0
 8008e3e:	e7ef      	b.n	8008e20 <_reclaim_reent+0x90>
 8008e40:	bd70      	pop	{r4, r5, r6, pc}
 8008e42:	bf00      	nop
 8008e44:	20000018 	.word	0x20000018

08008e48 <_sbrk_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	4d05      	ldr	r5, [pc, #20]	; (8008e64 <_sbrk_r+0x1c>)
 8008e4e:	4604      	mov	r4, r0
 8008e50:	4608      	mov	r0, r1
 8008e52:	602b      	str	r3, [r5, #0]
 8008e54:	f7fb fb12 	bl	800447c <_sbrk>
 8008e58:	1c43      	adds	r3, r0, #1
 8008e5a:	d102      	bne.n	8008e62 <_sbrk_r+0x1a>
 8008e5c:	682b      	ldr	r3, [r5, #0]
 8008e5e:	b103      	cbz	r3, 8008e62 <_sbrk_r+0x1a>
 8008e60:	6023      	str	r3, [r4, #0]
 8008e62:	bd38      	pop	{r3, r4, r5, pc}
 8008e64:	200027b4 	.word	0x200027b4

08008e68 <_raise_r>:
 8008e68:	291f      	cmp	r1, #31
 8008e6a:	b538      	push	{r3, r4, r5, lr}
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	460d      	mov	r5, r1
 8008e70:	d904      	bls.n	8008e7c <_raise_r+0x14>
 8008e72:	2316      	movs	r3, #22
 8008e74:	6003      	str	r3, [r0, #0]
 8008e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e7a:	bd38      	pop	{r3, r4, r5, pc}
 8008e7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e7e:	b112      	cbz	r2, 8008e86 <_raise_r+0x1e>
 8008e80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e84:	b94b      	cbnz	r3, 8008e9a <_raise_r+0x32>
 8008e86:	4620      	mov	r0, r4
 8008e88:	f000 f830 	bl	8008eec <_getpid_r>
 8008e8c:	462a      	mov	r2, r5
 8008e8e:	4601      	mov	r1, r0
 8008e90:	4620      	mov	r0, r4
 8008e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e96:	f000 b817 	b.w	8008ec8 <_kill_r>
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d00a      	beq.n	8008eb4 <_raise_r+0x4c>
 8008e9e:	1c59      	adds	r1, r3, #1
 8008ea0:	d103      	bne.n	8008eaa <_raise_r+0x42>
 8008ea2:	2316      	movs	r3, #22
 8008ea4:	6003      	str	r3, [r0, #0]
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	e7e7      	b.n	8008e7a <_raise_r+0x12>
 8008eaa:	2400      	movs	r4, #0
 8008eac:	4628      	mov	r0, r5
 8008eae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008eb2:	4798      	blx	r3
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	e7e0      	b.n	8008e7a <_raise_r+0x12>

08008eb8 <raise>:
 8008eb8:	4b02      	ldr	r3, [pc, #8]	; (8008ec4 <raise+0xc>)
 8008eba:	4601      	mov	r1, r0
 8008ebc:	6818      	ldr	r0, [r3, #0]
 8008ebe:	f7ff bfd3 	b.w	8008e68 <_raise_r>
 8008ec2:	bf00      	nop
 8008ec4:	20000018 	.word	0x20000018

08008ec8 <_kill_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	2300      	movs	r3, #0
 8008ecc:	4d06      	ldr	r5, [pc, #24]	; (8008ee8 <_kill_r+0x20>)
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	602b      	str	r3, [r5, #0]
 8008ed6:	f7fb fab6 	bl	8004446 <_kill>
 8008eda:	1c43      	adds	r3, r0, #1
 8008edc:	d102      	bne.n	8008ee4 <_kill_r+0x1c>
 8008ede:	682b      	ldr	r3, [r5, #0]
 8008ee0:	b103      	cbz	r3, 8008ee4 <_kill_r+0x1c>
 8008ee2:	6023      	str	r3, [r4, #0]
 8008ee4:	bd38      	pop	{r3, r4, r5, pc}
 8008ee6:	bf00      	nop
 8008ee8:	200027b4 	.word	0x200027b4

08008eec <_getpid_r>:
 8008eec:	f7fb baa4 	b.w	8004438 <_getpid>

08008ef0 <siprintf>:
 8008ef0:	b40e      	push	{r1, r2, r3}
 8008ef2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ef6:	b500      	push	{lr}
 8008ef8:	b09c      	sub	sp, #112	; 0x70
 8008efa:	ab1d      	add	r3, sp, #116	; 0x74
 8008efc:	9002      	str	r0, [sp, #8]
 8008efe:	9006      	str	r0, [sp, #24]
 8008f00:	9107      	str	r1, [sp, #28]
 8008f02:	9104      	str	r1, [sp, #16]
 8008f04:	4808      	ldr	r0, [pc, #32]	; (8008f28 <siprintf+0x38>)
 8008f06:	4909      	ldr	r1, [pc, #36]	; (8008f2c <siprintf+0x3c>)
 8008f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f0c:	9105      	str	r1, [sp, #20]
 8008f0e:	6800      	ldr	r0, [r0, #0]
 8008f10:	a902      	add	r1, sp, #8
 8008f12:	9301      	str	r3, [sp, #4]
 8008f14:	f000 f874 	bl	8009000 <_svfiprintf_r>
 8008f18:	2200      	movs	r2, #0
 8008f1a:	9b02      	ldr	r3, [sp, #8]
 8008f1c:	701a      	strb	r2, [r3, #0]
 8008f1e:	b01c      	add	sp, #112	; 0x70
 8008f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f24:	b003      	add	sp, #12
 8008f26:	4770      	bx	lr
 8008f28:	20000018 	.word	0x20000018
 8008f2c:	ffff0208 	.word	0xffff0208

08008f30 <__malloc_lock>:
 8008f30:	4801      	ldr	r0, [pc, #4]	; (8008f38 <__malloc_lock+0x8>)
 8008f32:	f7ff bde3 	b.w	8008afc <__retarget_lock_acquire_recursive>
 8008f36:	bf00      	nop
 8008f38:	200027a8 	.word	0x200027a8

08008f3c <__malloc_unlock>:
 8008f3c:	4801      	ldr	r0, [pc, #4]	; (8008f44 <__malloc_unlock+0x8>)
 8008f3e:	f7ff bdde 	b.w	8008afe <__retarget_lock_release_recursive>
 8008f42:	bf00      	nop
 8008f44:	200027a8 	.word	0x200027a8

08008f48 <__ssputs_r>:
 8008f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f4c:	688e      	ldr	r6, [r1, #8]
 8008f4e:	4682      	mov	sl, r0
 8008f50:	429e      	cmp	r6, r3
 8008f52:	460c      	mov	r4, r1
 8008f54:	4690      	mov	r8, r2
 8008f56:	461f      	mov	r7, r3
 8008f58:	d838      	bhi.n	8008fcc <__ssputs_r+0x84>
 8008f5a:	898a      	ldrh	r2, [r1, #12]
 8008f5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f60:	d032      	beq.n	8008fc8 <__ssputs_r+0x80>
 8008f62:	6825      	ldr	r5, [r4, #0]
 8008f64:	6909      	ldr	r1, [r1, #16]
 8008f66:	3301      	adds	r3, #1
 8008f68:	eba5 0901 	sub.w	r9, r5, r1
 8008f6c:	6965      	ldr	r5, [r4, #20]
 8008f6e:	444b      	add	r3, r9
 8008f70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f78:	106d      	asrs	r5, r5, #1
 8008f7a:	429d      	cmp	r5, r3
 8008f7c:	bf38      	it	cc
 8008f7e:	461d      	movcc	r5, r3
 8008f80:	0553      	lsls	r3, r2, #21
 8008f82:	d531      	bpl.n	8008fe8 <__ssputs_r+0xa0>
 8008f84:	4629      	mov	r1, r5
 8008f86:	f7ff fe81 	bl	8008c8c <_malloc_r>
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	b950      	cbnz	r0, 8008fa4 <__ssputs_r+0x5c>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f94:	f8ca 3000 	str.w	r3, [sl]
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f9e:	81a3      	strh	r3, [r4, #12]
 8008fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa4:	464a      	mov	r2, r9
 8008fa6:	6921      	ldr	r1, [r4, #16]
 8008fa8:	f7ff fdd8 	bl	8008b5c <memcpy>
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb6:	81a3      	strh	r3, [r4, #12]
 8008fb8:	6126      	str	r6, [r4, #16]
 8008fba:	444e      	add	r6, r9
 8008fbc:	6026      	str	r6, [r4, #0]
 8008fbe:	463e      	mov	r6, r7
 8008fc0:	6165      	str	r5, [r4, #20]
 8008fc2:	eba5 0509 	sub.w	r5, r5, r9
 8008fc6:	60a5      	str	r5, [r4, #8]
 8008fc8:	42be      	cmp	r6, r7
 8008fca:	d900      	bls.n	8008fce <__ssputs_r+0x86>
 8008fcc:	463e      	mov	r6, r7
 8008fce:	4632      	mov	r2, r6
 8008fd0:	4641      	mov	r1, r8
 8008fd2:	6820      	ldr	r0, [r4, #0]
 8008fd4:	f7ff fdd0 	bl	8008b78 <memmove>
 8008fd8:	68a3      	ldr	r3, [r4, #8]
 8008fda:	2000      	movs	r0, #0
 8008fdc:	1b9b      	subs	r3, r3, r6
 8008fde:	60a3      	str	r3, [r4, #8]
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	4433      	add	r3, r6
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	e7db      	b.n	8008fa0 <__ssputs_r+0x58>
 8008fe8:	462a      	mov	r2, r5
 8008fea:	f000 fa9f 	bl	800952c <_realloc_r>
 8008fee:	4606      	mov	r6, r0
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d1e1      	bne.n	8008fb8 <__ssputs_r+0x70>
 8008ff4:	4650      	mov	r0, sl
 8008ff6:	6921      	ldr	r1, [r4, #16]
 8008ff8:	f7ff fde0 	bl	8008bbc <_free_r>
 8008ffc:	e7c7      	b.n	8008f8e <__ssputs_r+0x46>
	...

08009000 <_svfiprintf_r>:
 8009000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	4698      	mov	r8, r3
 8009006:	898b      	ldrh	r3, [r1, #12]
 8009008:	4607      	mov	r7, r0
 800900a:	061b      	lsls	r3, r3, #24
 800900c:	460d      	mov	r5, r1
 800900e:	4614      	mov	r4, r2
 8009010:	b09d      	sub	sp, #116	; 0x74
 8009012:	d50e      	bpl.n	8009032 <_svfiprintf_r+0x32>
 8009014:	690b      	ldr	r3, [r1, #16]
 8009016:	b963      	cbnz	r3, 8009032 <_svfiprintf_r+0x32>
 8009018:	2140      	movs	r1, #64	; 0x40
 800901a:	f7ff fe37 	bl	8008c8c <_malloc_r>
 800901e:	6028      	str	r0, [r5, #0]
 8009020:	6128      	str	r0, [r5, #16]
 8009022:	b920      	cbnz	r0, 800902e <_svfiprintf_r+0x2e>
 8009024:	230c      	movs	r3, #12
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800902c:	e0d1      	b.n	80091d2 <_svfiprintf_r+0x1d2>
 800902e:	2340      	movs	r3, #64	; 0x40
 8009030:	616b      	str	r3, [r5, #20]
 8009032:	2300      	movs	r3, #0
 8009034:	9309      	str	r3, [sp, #36]	; 0x24
 8009036:	2320      	movs	r3, #32
 8009038:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800903c:	2330      	movs	r3, #48	; 0x30
 800903e:	f04f 0901 	mov.w	r9, #1
 8009042:	f8cd 800c 	str.w	r8, [sp, #12]
 8009046:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80091ec <_svfiprintf_r+0x1ec>
 800904a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800904e:	4623      	mov	r3, r4
 8009050:	469a      	mov	sl, r3
 8009052:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009056:	b10a      	cbz	r2, 800905c <_svfiprintf_r+0x5c>
 8009058:	2a25      	cmp	r2, #37	; 0x25
 800905a:	d1f9      	bne.n	8009050 <_svfiprintf_r+0x50>
 800905c:	ebba 0b04 	subs.w	fp, sl, r4
 8009060:	d00b      	beq.n	800907a <_svfiprintf_r+0x7a>
 8009062:	465b      	mov	r3, fp
 8009064:	4622      	mov	r2, r4
 8009066:	4629      	mov	r1, r5
 8009068:	4638      	mov	r0, r7
 800906a:	f7ff ff6d 	bl	8008f48 <__ssputs_r>
 800906e:	3001      	adds	r0, #1
 8009070:	f000 80aa 	beq.w	80091c8 <_svfiprintf_r+0x1c8>
 8009074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009076:	445a      	add	r2, fp
 8009078:	9209      	str	r2, [sp, #36]	; 0x24
 800907a:	f89a 3000 	ldrb.w	r3, [sl]
 800907e:	2b00      	cmp	r3, #0
 8009080:	f000 80a2 	beq.w	80091c8 <_svfiprintf_r+0x1c8>
 8009084:	2300      	movs	r3, #0
 8009086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800908a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800908e:	f10a 0a01 	add.w	sl, sl, #1
 8009092:	9304      	str	r3, [sp, #16]
 8009094:	9307      	str	r3, [sp, #28]
 8009096:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800909a:	931a      	str	r3, [sp, #104]	; 0x68
 800909c:	4654      	mov	r4, sl
 800909e:	2205      	movs	r2, #5
 80090a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a4:	4851      	ldr	r0, [pc, #324]	; (80091ec <_svfiprintf_r+0x1ec>)
 80090a6:	f7ff fd3b 	bl	8008b20 <memchr>
 80090aa:	9a04      	ldr	r2, [sp, #16]
 80090ac:	b9d8      	cbnz	r0, 80090e6 <_svfiprintf_r+0xe6>
 80090ae:	06d0      	lsls	r0, r2, #27
 80090b0:	bf44      	itt	mi
 80090b2:	2320      	movmi	r3, #32
 80090b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090b8:	0711      	lsls	r1, r2, #28
 80090ba:	bf44      	itt	mi
 80090bc:	232b      	movmi	r3, #43	; 0x2b
 80090be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090c2:	f89a 3000 	ldrb.w	r3, [sl]
 80090c6:	2b2a      	cmp	r3, #42	; 0x2a
 80090c8:	d015      	beq.n	80090f6 <_svfiprintf_r+0xf6>
 80090ca:	4654      	mov	r4, sl
 80090cc:	2000      	movs	r0, #0
 80090ce:	f04f 0c0a 	mov.w	ip, #10
 80090d2:	9a07      	ldr	r2, [sp, #28]
 80090d4:	4621      	mov	r1, r4
 80090d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090da:	3b30      	subs	r3, #48	; 0x30
 80090dc:	2b09      	cmp	r3, #9
 80090de:	d94e      	bls.n	800917e <_svfiprintf_r+0x17e>
 80090e0:	b1b0      	cbz	r0, 8009110 <_svfiprintf_r+0x110>
 80090e2:	9207      	str	r2, [sp, #28]
 80090e4:	e014      	b.n	8009110 <_svfiprintf_r+0x110>
 80090e6:	eba0 0308 	sub.w	r3, r0, r8
 80090ea:	fa09 f303 	lsl.w	r3, r9, r3
 80090ee:	4313      	orrs	r3, r2
 80090f0:	46a2      	mov	sl, r4
 80090f2:	9304      	str	r3, [sp, #16]
 80090f4:	e7d2      	b.n	800909c <_svfiprintf_r+0x9c>
 80090f6:	9b03      	ldr	r3, [sp, #12]
 80090f8:	1d19      	adds	r1, r3, #4
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	9103      	str	r1, [sp, #12]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	bfbb      	ittet	lt
 8009102:	425b      	neglt	r3, r3
 8009104:	f042 0202 	orrlt.w	r2, r2, #2
 8009108:	9307      	strge	r3, [sp, #28]
 800910a:	9307      	strlt	r3, [sp, #28]
 800910c:	bfb8      	it	lt
 800910e:	9204      	strlt	r2, [sp, #16]
 8009110:	7823      	ldrb	r3, [r4, #0]
 8009112:	2b2e      	cmp	r3, #46	; 0x2e
 8009114:	d10c      	bne.n	8009130 <_svfiprintf_r+0x130>
 8009116:	7863      	ldrb	r3, [r4, #1]
 8009118:	2b2a      	cmp	r3, #42	; 0x2a
 800911a:	d135      	bne.n	8009188 <_svfiprintf_r+0x188>
 800911c:	9b03      	ldr	r3, [sp, #12]
 800911e:	3402      	adds	r4, #2
 8009120:	1d1a      	adds	r2, r3, #4
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	9203      	str	r2, [sp, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	bfb8      	it	lt
 800912a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800912e:	9305      	str	r3, [sp, #20]
 8009130:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80091f0 <_svfiprintf_r+0x1f0>
 8009134:	2203      	movs	r2, #3
 8009136:	4650      	mov	r0, sl
 8009138:	7821      	ldrb	r1, [r4, #0]
 800913a:	f7ff fcf1 	bl	8008b20 <memchr>
 800913e:	b140      	cbz	r0, 8009152 <_svfiprintf_r+0x152>
 8009140:	2340      	movs	r3, #64	; 0x40
 8009142:	eba0 000a 	sub.w	r0, r0, sl
 8009146:	fa03 f000 	lsl.w	r0, r3, r0
 800914a:	9b04      	ldr	r3, [sp, #16]
 800914c:	3401      	adds	r4, #1
 800914e:	4303      	orrs	r3, r0
 8009150:	9304      	str	r3, [sp, #16]
 8009152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009156:	2206      	movs	r2, #6
 8009158:	4826      	ldr	r0, [pc, #152]	; (80091f4 <_svfiprintf_r+0x1f4>)
 800915a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800915e:	f7ff fcdf 	bl	8008b20 <memchr>
 8009162:	2800      	cmp	r0, #0
 8009164:	d038      	beq.n	80091d8 <_svfiprintf_r+0x1d8>
 8009166:	4b24      	ldr	r3, [pc, #144]	; (80091f8 <_svfiprintf_r+0x1f8>)
 8009168:	bb1b      	cbnz	r3, 80091b2 <_svfiprintf_r+0x1b2>
 800916a:	9b03      	ldr	r3, [sp, #12]
 800916c:	3307      	adds	r3, #7
 800916e:	f023 0307 	bic.w	r3, r3, #7
 8009172:	3308      	adds	r3, #8
 8009174:	9303      	str	r3, [sp, #12]
 8009176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009178:	4433      	add	r3, r6
 800917a:	9309      	str	r3, [sp, #36]	; 0x24
 800917c:	e767      	b.n	800904e <_svfiprintf_r+0x4e>
 800917e:	460c      	mov	r4, r1
 8009180:	2001      	movs	r0, #1
 8009182:	fb0c 3202 	mla	r2, ip, r2, r3
 8009186:	e7a5      	b.n	80090d4 <_svfiprintf_r+0xd4>
 8009188:	2300      	movs	r3, #0
 800918a:	f04f 0c0a 	mov.w	ip, #10
 800918e:	4619      	mov	r1, r3
 8009190:	3401      	adds	r4, #1
 8009192:	9305      	str	r3, [sp, #20]
 8009194:	4620      	mov	r0, r4
 8009196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800919a:	3a30      	subs	r2, #48	; 0x30
 800919c:	2a09      	cmp	r2, #9
 800919e:	d903      	bls.n	80091a8 <_svfiprintf_r+0x1a8>
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d0c5      	beq.n	8009130 <_svfiprintf_r+0x130>
 80091a4:	9105      	str	r1, [sp, #20]
 80091a6:	e7c3      	b.n	8009130 <_svfiprintf_r+0x130>
 80091a8:	4604      	mov	r4, r0
 80091aa:	2301      	movs	r3, #1
 80091ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80091b0:	e7f0      	b.n	8009194 <_svfiprintf_r+0x194>
 80091b2:	ab03      	add	r3, sp, #12
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	462a      	mov	r2, r5
 80091b8:	4638      	mov	r0, r7
 80091ba:	4b10      	ldr	r3, [pc, #64]	; (80091fc <_svfiprintf_r+0x1fc>)
 80091bc:	a904      	add	r1, sp, #16
 80091be:	f3af 8000 	nop.w
 80091c2:	1c42      	adds	r2, r0, #1
 80091c4:	4606      	mov	r6, r0
 80091c6:	d1d6      	bne.n	8009176 <_svfiprintf_r+0x176>
 80091c8:	89ab      	ldrh	r3, [r5, #12]
 80091ca:	065b      	lsls	r3, r3, #25
 80091cc:	f53f af2c 	bmi.w	8009028 <_svfiprintf_r+0x28>
 80091d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091d2:	b01d      	add	sp, #116	; 0x74
 80091d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d8:	ab03      	add	r3, sp, #12
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	462a      	mov	r2, r5
 80091de:	4638      	mov	r0, r7
 80091e0:	4b06      	ldr	r3, [pc, #24]	; (80091fc <_svfiprintf_r+0x1fc>)
 80091e2:	a904      	add	r1, sp, #16
 80091e4:	f000 f87c 	bl	80092e0 <_printf_i>
 80091e8:	e7eb      	b.n	80091c2 <_svfiprintf_r+0x1c2>
 80091ea:	bf00      	nop
 80091ec:	080099f8 	.word	0x080099f8
 80091f0:	080099fe 	.word	0x080099fe
 80091f4:	08009a02 	.word	0x08009a02
 80091f8:	00000000 	.word	0x00000000
 80091fc:	08008f49 	.word	0x08008f49

08009200 <_printf_common>:
 8009200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009204:	4616      	mov	r6, r2
 8009206:	4699      	mov	r9, r3
 8009208:	688a      	ldr	r2, [r1, #8]
 800920a:	690b      	ldr	r3, [r1, #16]
 800920c:	4607      	mov	r7, r0
 800920e:	4293      	cmp	r3, r2
 8009210:	bfb8      	it	lt
 8009212:	4613      	movlt	r3, r2
 8009214:	6033      	str	r3, [r6, #0]
 8009216:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800921a:	460c      	mov	r4, r1
 800921c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009220:	b10a      	cbz	r2, 8009226 <_printf_common+0x26>
 8009222:	3301      	adds	r3, #1
 8009224:	6033      	str	r3, [r6, #0]
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	0699      	lsls	r1, r3, #26
 800922a:	bf42      	ittt	mi
 800922c:	6833      	ldrmi	r3, [r6, #0]
 800922e:	3302      	addmi	r3, #2
 8009230:	6033      	strmi	r3, [r6, #0]
 8009232:	6825      	ldr	r5, [r4, #0]
 8009234:	f015 0506 	ands.w	r5, r5, #6
 8009238:	d106      	bne.n	8009248 <_printf_common+0x48>
 800923a:	f104 0a19 	add.w	sl, r4, #25
 800923e:	68e3      	ldr	r3, [r4, #12]
 8009240:	6832      	ldr	r2, [r6, #0]
 8009242:	1a9b      	subs	r3, r3, r2
 8009244:	42ab      	cmp	r3, r5
 8009246:	dc28      	bgt.n	800929a <_printf_common+0x9a>
 8009248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800924c:	1e13      	subs	r3, r2, #0
 800924e:	6822      	ldr	r2, [r4, #0]
 8009250:	bf18      	it	ne
 8009252:	2301      	movne	r3, #1
 8009254:	0692      	lsls	r2, r2, #26
 8009256:	d42d      	bmi.n	80092b4 <_printf_common+0xb4>
 8009258:	4649      	mov	r1, r9
 800925a:	4638      	mov	r0, r7
 800925c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009260:	47c0      	blx	r8
 8009262:	3001      	adds	r0, #1
 8009264:	d020      	beq.n	80092a8 <_printf_common+0xa8>
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	68e5      	ldr	r5, [r4, #12]
 800926a:	f003 0306 	and.w	r3, r3, #6
 800926e:	2b04      	cmp	r3, #4
 8009270:	bf18      	it	ne
 8009272:	2500      	movne	r5, #0
 8009274:	6832      	ldr	r2, [r6, #0]
 8009276:	f04f 0600 	mov.w	r6, #0
 800927a:	68a3      	ldr	r3, [r4, #8]
 800927c:	bf08      	it	eq
 800927e:	1aad      	subeq	r5, r5, r2
 8009280:	6922      	ldr	r2, [r4, #16]
 8009282:	bf08      	it	eq
 8009284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009288:	4293      	cmp	r3, r2
 800928a:	bfc4      	itt	gt
 800928c:	1a9b      	subgt	r3, r3, r2
 800928e:	18ed      	addgt	r5, r5, r3
 8009290:	341a      	adds	r4, #26
 8009292:	42b5      	cmp	r5, r6
 8009294:	d11a      	bne.n	80092cc <_printf_common+0xcc>
 8009296:	2000      	movs	r0, #0
 8009298:	e008      	b.n	80092ac <_printf_common+0xac>
 800929a:	2301      	movs	r3, #1
 800929c:	4652      	mov	r2, sl
 800929e:	4649      	mov	r1, r9
 80092a0:	4638      	mov	r0, r7
 80092a2:	47c0      	blx	r8
 80092a4:	3001      	adds	r0, #1
 80092a6:	d103      	bne.n	80092b0 <_printf_common+0xb0>
 80092a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b0:	3501      	adds	r5, #1
 80092b2:	e7c4      	b.n	800923e <_printf_common+0x3e>
 80092b4:	2030      	movs	r0, #48	; 0x30
 80092b6:	18e1      	adds	r1, r4, r3
 80092b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092c2:	4422      	add	r2, r4
 80092c4:	3302      	adds	r3, #2
 80092c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092ca:	e7c5      	b.n	8009258 <_printf_common+0x58>
 80092cc:	2301      	movs	r3, #1
 80092ce:	4622      	mov	r2, r4
 80092d0:	4649      	mov	r1, r9
 80092d2:	4638      	mov	r0, r7
 80092d4:	47c0      	blx	r8
 80092d6:	3001      	adds	r0, #1
 80092d8:	d0e6      	beq.n	80092a8 <_printf_common+0xa8>
 80092da:	3601      	adds	r6, #1
 80092dc:	e7d9      	b.n	8009292 <_printf_common+0x92>
	...

080092e0 <_printf_i>:
 80092e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092e4:	7e0f      	ldrb	r7, [r1, #24]
 80092e6:	4691      	mov	r9, r2
 80092e8:	2f78      	cmp	r7, #120	; 0x78
 80092ea:	4680      	mov	r8, r0
 80092ec:	460c      	mov	r4, r1
 80092ee:	469a      	mov	sl, r3
 80092f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092f6:	d807      	bhi.n	8009308 <_printf_i+0x28>
 80092f8:	2f62      	cmp	r7, #98	; 0x62
 80092fa:	d80a      	bhi.n	8009312 <_printf_i+0x32>
 80092fc:	2f00      	cmp	r7, #0
 80092fe:	f000 80d9 	beq.w	80094b4 <_printf_i+0x1d4>
 8009302:	2f58      	cmp	r7, #88	; 0x58
 8009304:	f000 80a4 	beq.w	8009450 <_printf_i+0x170>
 8009308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800930c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009310:	e03a      	b.n	8009388 <_printf_i+0xa8>
 8009312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009316:	2b15      	cmp	r3, #21
 8009318:	d8f6      	bhi.n	8009308 <_printf_i+0x28>
 800931a:	a101      	add	r1, pc, #4	; (adr r1, 8009320 <_printf_i+0x40>)
 800931c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009320:	08009379 	.word	0x08009379
 8009324:	0800938d 	.word	0x0800938d
 8009328:	08009309 	.word	0x08009309
 800932c:	08009309 	.word	0x08009309
 8009330:	08009309 	.word	0x08009309
 8009334:	08009309 	.word	0x08009309
 8009338:	0800938d 	.word	0x0800938d
 800933c:	08009309 	.word	0x08009309
 8009340:	08009309 	.word	0x08009309
 8009344:	08009309 	.word	0x08009309
 8009348:	08009309 	.word	0x08009309
 800934c:	0800949b 	.word	0x0800949b
 8009350:	080093bd 	.word	0x080093bd
 8009354:	0800947d 	.word	0x0800947d
 8009358:	08009309 	.word	0x08009309
 800935c:	08009309 	.word	0x08009309
 8009360:	080094bd 	.word	0x080094bd
 8009364:	08009309 	.word	0x08009309
 8009368:	080093bd 	.word	0x080093bd
 800936c:	08009309 	.word	0x08009309
 8009370:	08009309 	.word	0x08009309
 8009374:	08009485 	.word	0x08009485
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	1d1a      	adds	r2, r3, #4
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	602a      	str	r2, [r5, #0]
 8009380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009388:	2301      	movs	r3, #1
 800938a:	e0a4      	b.n	80094d6 <_printf_i+0x1f6>
 800938c:	6820      	ldr	r0, [r4, #0]
 800938e:	6829      	ldr	r1, [r5, #0]
 8009390:	0606      	lsls	r6, r0, #24
 8009392:	f101 0304 	add.w	r3, r1, #4
 8009396:	d50a      	bpl.n	80093ae <_printf_i+0xce>
 8009398:	680e      	ldr	r6, [r1, #0]
 800939a:	602b      	str	r3, [r5, #0]
 800939c:	2e00      	cmp	r6, #0
 800939e:	da03      	bge.n	80093a8 <_printf_i+0xc8>
 80093a0:	232d      	movs	r3, #45	; 0x2d
 80093a2:	4276      	negs	r6, r6
 80093a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a8:	230a      	movs	r3, #10
 80093aa:	485e      	ldr	r0, [pc, #376]	; (8009524 <_printf_i+0x244>)
 80093ac:	e019      	b.n	80093e2 <_printf_i+0x102>
 80093ae:	680e      	ldr	r6, [r1, #0]
 80093b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093b4:	602b      	str	r3, [r5, #0]
 80093b6:	bf18      	it	ne
 80093b8:	b236      	sxthne	r6, r6
 80093ba:	e7ef      	b.n	800939c <_printf_i+0xbc>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	6820      	ldr	r0, [r4, #0]
 80093c0:	1d19      	adds	r1, r3, #4
 80093c2:	6029      	str	r1, [r5, #0]
 80093c4:	0601      	lsls	r1, r0, #24
 80093c6:	d501      	bpl.n	80093cc <_printf_i+0xec>
 80093c8:	681e      	ldr	r6, [r3, #0]
 80093ca:	e002      	b.n	80093d2 <_printf_i+0xf2>
 80093cc:	0646      	lsls	r6, r0, #25
 80093ce:	d5fb      	bpl.n	80093c8 <_printf_i+0xe8>
 80093d0:	881e      	ldrh	r6, [r3, #0]
 80093d2:	2f6f      	cmp	r7, #111	; 0x6f
 80093d4:	bf0c      	ite	eq
 80093d6:	2308      	moveq	r3, #8
 80093d8:	230a      	movne	r3, #10
 80093da:	4852      	ldr	r0, [pc, #328]	; (8009524 <_printf_i+0x244>)
 80093dc:	2100      	movs	r1, #0
 80093de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093e2:	6865      	ldr	r5, [r4, #4]
 80093e4:	2d00      	cmp	r5, #0
 80093e6:	bfa8      	it	ge
 80093e8:	6821      	ldrge	r1, [r4, #0]
 80093ea:	60a5      	str	r5, [r4, #8]
 80093ec:	bfa4      	itt	ge
 80093ee:	f021 0104 	bicge.w	r1, r1, #4
 80093f2:	6021      	strge	r1, [r4, #0]
 80093f4:	b90e      	cbnz	r6, 80093fa <_printf_i+0x11a>
 80093f6:	2d00      	cmp	r5, #0
 80093f8:	d04d      	beq.n	8009496 <_printf_i+0x1b6>
 80093fa:	4615      	mov	r5, r2
 80093fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8009400:	fb03 6711 	mls	r7, r3, r1, r6
 8009404:	5dc7      	ldrb	r7, [r0, r7]
 8009406:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800940a:	4637      	mov	r7, r6
 800940c:	42bb      	cmp	r3, r7
 800940e:	460e      	mov	r6, r1
 8009410:	d9f4      	bls.n	80093fc <_printf_i+0x11c>
 8009412:	2b08      	cmp	r3, #8
 8009414:	d10b      	bne.n	800942e <_printf_i+0x14e>
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	07de      	lsls	r6, r3, #31
 800941a:	d508      	bpl.n	800942e <_printf_i+0x14e>
 800941c:	6923      	ldr	r3, [r4, #16]
 800941e:	6861      	ldr	r1, [r4, #4]
 8009420:	4299      	cmp	r1, r3
 8009422:	bfde      	ittt	le
 8009424:	2330      	movle	r3, #48	; 0x30
 8009426:	f805 3c01 	strble.w	r3, [r5, #-1]
 800942a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800942e:	1b52      	subs	r2, r2, r5
 8009430:	6122      	str	r2, [r4, #16]
 8009432:	464b      	mov	r3, r9
 8009434:	4621      	mov	r1, r4
 8009436:	4640      	mov	r0, r8
 8009438:	f8cd a000 	str.w	sl, [sp]
 800943c:	aa03      	add	r2, sp, #12
 800943e:	f7ff fedf 	bl	8009200 <_printf_common>
 8009442:	3001      	adds	r0, #1
 8009444:	d14c      	bne.n	80094e0 <_printf_i+0x200>
 8009446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800944a:	b004      	add	sp, #16
 800944c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009450:	4834      	ldr	r0, [pc, #208]	; (8009524 <_printf_i+0x244>)
 8009452:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009456:	6829      	ldr	r1, [r5, #0]
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	f851 6b04 	ldr.w	r6, [r1], #4
 800945e:	6029      	str	r1, [r5, #0]
 8009460:	061d      	lsls	r5, r3, #24
 8009462:	d514      	bpl.n	800948e <_printf_i+0x1ae>
 8009464:	07df      	lsls	r7, r3, #31
 8009466:	bf44      	itt	mi
 8009468:	f043 0320 	orrmi.w	r3, r3, #32
 800946c:	6023      	strmi	r3, [r4, #0]
 800946e:	b91e      	cbnz	r6, 8009478 <_printf_i+0x198>
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	f023 0320 	bic.w	r3, r3, #32
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	2310      	movs	r3, #16
 800947a:	e7af      	b.n	80093dc <_printf_i+0xfc>
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	f043 0320 	orr.w	r3, r3, #32
 8009482:	6023      	str	r3, [r4, #0]
 8009484:	2378      	movs	r3, #120	; 0x78
 8009486:	4828      	ldr	r0, [pc, #160]	; (8009528 <_printf_i+0x248>)
 8009488:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800948c:	e7e3      	b.n	8009456 <_printf_i+0x176>
 800948e:	0659      	lsls	r1, r3, #25
 8009490:	bf48      	it	mi
 8009492:	b2b6      	uxthmi	r6, r6
 8009494:	e7e6      	b.n	8009464 <_printf_i+0x184>
 8009496:	4615      	mov	r5, r2
 8009498:	e7bb      	b.n	8009412 <_printf_i+0x132>
 800949a:	682b      	ldr	r3, [r5, #0]
 800949c:	6826      	ldr	r6, [r4, #0]
 800949e:	1d18      	adds	r0, r3, #4
 80094a0:	6961      	ldr	r1, [r4, #20]
 80094a2:	6028      	str	r0, [r5, #0]
 80094a4:	0635      	lsls	r5, r6, #24
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	d501      	bpl.n	80094ae <_printf_i+0x1ce>
 80094aa:	6019      	str	r1, [r3, #0]
 80094ac:	e002      	b.n	80094b4 <_printf_i+0x1d4>
 80094ae:	0670      	lsls	r0, r6, #25
 80094b0:	d5fb      	bpl.n	80094aa <_printf_i+0x1ca>
 80094b2:	8019      	strh	r1, [r3, #0]
 80094b4:	2300      	movs	r3, #0
 80094b6:	4615      	mov	r5, r2
 80094b8:	6123      	str	r3, [r4, #16]
 80094ba:	e7ba      	b.n	8009432 <_printf_i+0x152>
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	2100      	movs	r1, #0
 80094c0:	1d1a      	adds	r2, r3, #4
 80094c2:	602a      	str	r2, [r5, #0]
 80094c4:	681d      	ldr	r5, [r3, #0]
 80094c6:	6862      	ldr	r2, [r4, #4]
 80094c8:	4628      	mov	r0, r5
 80094ca:	f7ff fb29 	bl	8008b20 <memchr>
 80094ce:	b108      	cbz	r0, 80094d4 <_printf_i+0x1f4>
 80094d0:	1b40      	subs	r0, r0, r5
 80094d2:	6060      	str	r0, [r4, #4]
 80094d4:	6863      	ldr	r3, [r4, #4]
 80094d6:	6123      	str	r3, [r4, #16]
 80094d8:	2300      	movs	r3, #0
 80094da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094de:	e7a8      	b.n	8009432 <_printf_i+0x152>
 80094e0:	462a      	mov	r2, r5
 80094e2:	4649      	mov	r1, r9
 80094e4:	4640      	mov	r0, r8
 80094e6:	6923      	ldr	r3, [r4, #16]
 80094e8:	47d0      	blx	sl
 80094ea:	3001      	adds	r0, #1
 80094ec:	d0ab      	beq.n	8009446 <_printf_i+0x166>
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	079b      	lsls	r3, r3, #30
 80094f2:	d413      	bmi.n	800951c <_printf_i+0x23c>
 80094f4:	68e0      	ldr	r0, [r4, #12]
 80094f6:	9b03      	ldr	r3, [sp, #12]
 80094f8:	4298      	cmp	r0, r3
 80094fa:	bfb8      	it	lt
 80094fc:	4618      	movlt	r0, r3
 80094fe:	e7a4      	b.n	800944a <_printf_i+0x16a>
 8009500:	2301      	movs	r3, #1
 8009502:	4632      	mov	r2, r6
 8009504:	4649      	mov	r1, r9
 8009506:	4640      	mov	r0, r8
 8009508:	47d0      	blx	sl
 800950a:	3001      	adds	r0, #1
 800950c:	d09b      	beq.n	8009446 <_printf_i+0x166>
 800950e:	3501      	adds	r5, #1
 8009510:	68e3      	ldr	r3, [r4, #12]
 8009512:	9903      	ldr	r1, [sp, #12]
 8009514:	1a5b      	subs	r3, r3, r1
 8009516:	42ab      	cmp	r3, r5
 8009518:	dcf2      	bgt.n	8009500 <_printf_i+0x220>
 800951a:	e7eb      	b.n	80094f4 <_printf_i+0x214>
 800951c:	2500      	movs	r5, #0
 800951e:	f104 0619 	add.w	r6, r4, #25
 8009522:	e7f5      	b.n	8009510 <_printf_i+0x230>
 8009524:	08009a09 	.word	0x08009a09
 8009528:	08009a1a 	.word	0x08009a1a

0800952c <_realloc_r>:
 800952c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009530:	4680      	mov	r8, r0
 8009532:	4614      	mov	r4, r2
 8009534:	460e      	mov	r6, r1
 8009536:	b921      	cbnz	r1, 8009542 <_realloc_r+0x16>
 8009538:	4611      	mov	r1, r2
 800953a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800953e:	f7ff bba5 	b.w	8008c8c <_malloc_r>
 8009542:	b92a      	cbnz	r2, 8009550 <_realloc_r+0x24>
 8009544:	f7ff fb3a 	bl	8008bbc <_free_r>
 8009548:	4625      	mov	r5, r4
 800954a:	4628      	mov	r0, r5
 800954c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009550:	f000 f81b 	bl	800958a <_malloc_usable_size_r>
 8009554:	4284      	cmp	r4, r0
 8009556:	4607      	mov	r7, r0
 8009558:	d802      	bhi.n	8009560 <_realloc_r+0x34>
 800955a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800955e:	d812      	bhi.n	8009586 <_realloc_r+0x5a>
 8009560:	4621      	mov	r1, r4
 8009562:	4640      	mov	r0, r8
 8009564:	f7ff fb92 	bl	8008c8c <_malloc_r>
 8009568:	4605      	mov	r5, r0
 800956a:	2800      	cmp	r0, #0
 800956c:	d0ed      	beq.n	800954a <_realloc_r+0x1e>
 800956e:	42bc      	cmp	r4, r7
 8009570:	4622      	mov	r2, r4
 8009572:	4631      	mov	r1, r6
 8009574:	bf28      	it	cs
 8009576:	463a      	movcs	r2, r7
 8009578:	f7ff faf0 	bl	8008b5c <memcpy>
 800957c:	4631      	mov	r1, r6
 800957e:	4640      	mov	r0, r8
 8009580:	f7ff fb1c 	bl	8008bbc <_free_r>
 8009584:	e7e1      	b.n	800954a <_realloc_r+0x1e>
 8009586:	4635      	mov	r5, r6
 8009588:	e7df      	b.n	800954a <_realloc_r+0x1e>

0800958a <_malloc_usable_size_r>:
 800958a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800958e:	1f18      	subs	r0, r3, #4
 8009590:	2b00      	cmp	r3, #0
 8009592:	bfbc      	itt	lt
 8009594:	580b      	ldrlt	r3, [r1, r0]
 8009596:	18c0      	addlt	r0, r0, r3
 8009598:	4770      	bx	lr
	...

0800959c <_init>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	bf00      	nop
 80095a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a2:	bc08      	pop	{r3}
 80095a4:	469e      	mov	lr, r3
 80095a6:	4770      	bx	lr

080095a8 <_fini>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	bf00      	nop
 80095ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ae:	bc08      	pop	{r3}
 80095b0:	469e      	mov	lr, r3
 80095b2:	4770      	bx	lr
