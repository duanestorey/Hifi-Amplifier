
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000940c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080095fc  080095fc  000195fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009694  08009694  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009694  08009694  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009694  08009694  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009694  08009694  00019694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800969c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022a8  20000180  0800981c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002428  0800981c  00022428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d37  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e6a  00000000  00000000  00037ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0003bd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  0003d398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e233  00000000  00000000  0003e808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a06e  00000000  00000000  0005ca3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4ff6  00000000  00000000  00076aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ba9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b9c  00000000  00000000  0011baf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000180 	.word	0x20000180
 800020c:	00000000 	.word	0x00000000
 8000210:	080095e4 	.word	0x080095e4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000184 	.word	0x20000184
 800022c:	080095e4 	.word	0x080095e4

08000230 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	4a06      	ldr	r2, [pc, #24]	; (8000258 <vApplicationGetIdleTaskMemory+0x28>)
 8000240:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	4a05      	ldr	r2, [pc, #20]	; (800025c <vApplicationGetIdleTaskMemory+0x2c>)
 8000246:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2280      	movs	r2, #128	; 0x80
 800024c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	2000019c 	.word	0x2000019c
 800025c:	200001f0 	.word	0x200001f0

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b5b0      	push	{r4, r5, r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fb93 	bl	8000990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f823 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 f993 	bl	8000598 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000272:	f000 f87d 	bl	8000370 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000276:	f000 f8b1 	bl	80003dc <MX_SPI2_Init>
  MX_TIM3_Init();
 800027a:	f000 f8e5 	bl	8000448 <MX_TIM3_Init>
  MX_TIM4_Init();
 800027e:	f000 f937 	bl	80004f0 <MX_TIM4_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <main+0x4c>)
 8000284:	1d3c      	adds	r4, r7, #4
 8000286:	461d      	mov	r5, r3
 8000288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2100      	movs	r1, #0
 8000298:	4618      	mov	r0, r3
 800029a:	f007 fb2c 	bl	80078f6 <osThreadCreate>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a03      	ldr	r2, [pc, #12]	; (80002b0 <main+0x50>)
 80002a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002a4:	f007 fb20 	bl	80078e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0x48>
 80002aa:	bf00      	nop
 80002ac:	08009608 	.word	0x08009608
 80002b0:	20000530 	.word	0x20000530

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b096      	sub	sp, #88	; 0x58
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002be:	2228      	movs	r2, #40	; 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f009 f986 	bl	80095d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	f107 031c 	add.w	r3, r7, #28
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]
 80002e6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e8:	2301      	movs	r3, #1
 80002ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	2301      	movs	r3, #1
 80002f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000302:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000304:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000308:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800030e:	4618      	mov	r0, r3
 8000310:	f002 fb1e 	bl	8002950 <HAL_RCC_OscConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800031a:	f000 f99d 	bl	8000658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	230f      	movs	r3, #15
 8000320:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	2302      	movs	r3, #2
 8000324:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800032e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000334:	f107 031c 	add.w	r3, r7, #28
 8000338:	2102      	movs	r1, #2
 800033a:	4618      	mov	r0, r3
 800033c:	f002 fd8a 	bl	8002e54 <HAL_RCC_ClockConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000346:	f000 f987 	bl	8000658 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800034a:	2310      	movs	r3, #16
 800034c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800034e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000352:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	4618      	mov	r0, r3
 8000358:	f002 fee2 	bl	8003120 <HAL_RCCEx_PeriphCLKConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000362:	f000 f979 	bl	8000658 <Error_Handler>
  }
}
 8000366:	bf00      	nop
 8000368:	3758      	adds	r7, #88	; 0x58
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <MX_SPI1_Init+0x64>)
 8000376:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <MX_SPI1_Init+0x68>)
 8000378:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <MX_SPI1_Init+0x64>)
 800037c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000380:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_SPI1_Init+0x64>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_SPI1_Init+0x64>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_SPI1_Init+0x64>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_SPI1_Init+0x64>)
 8000396:	2200      	movs	r2, #0
 8000398:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <MX_SPI1_Init+0x64>)
 800039c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b4:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003bc:	220a      	movs	r2, #10
 80003be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <MX_SPI1_Init+0x64>)
 80003c2:	f002 ff63 	bl	800328c <HAL_SPI_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003cc:	f000 f944 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200003f0 	.word	0x200003f0
 80003d8:	40013000 	.word	0x40013000

080003dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003e0:	4b17      	ldr	r3, [pc, #92]	; (8000440 <MX_SPI2_Init+0x64>)
 80003e2:	4a18      	ldr	r2, [pc, #96]	; (8000444 <MX_SPI2_Init+0x68>)
 80003e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003e6:	4b16      	ldr	r3, [pc, #88]	; (8000440 <MX_SPI2_Init+0x64>)
 80003e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003ee:	4b14      	ldr	r3, [pc, #80]	; (8000440 <MX_SPI2_Init+0x64>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <MX_SPI2_Init+0x64>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003fa:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_SPI2_Init+0x64>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_SPI2_Init+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_SPI2_Init+0x64>)
 8000408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800040c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_SPI2_Init+0x64>)
 8000410:	2200      	movs	r2, #0
 8000412:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000414:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <MX_SPI2_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_SPI2_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <MX_SPI2_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_SPI2_Init+0x64>)
 8000428:	220a      	movs	r2, #10
 800042a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <MX_SPI2_Init+0x64>)
 800042e:	f002 ff2d 	bl	800328c <HAL_SPI_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000438:	f000 f90e 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000448 	.word	0x20000448
 8000444:	40003800 	.word	0x40003800

08000448 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08c      	sub	sp, #48	; 0x30
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800044e:	f107 030c 	add.w	r3, r7, #12
 8000452:	2224      	movs	r2, #36	; 0x24
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f009 f8bc 	bl	80095d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000464:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <MX_TIM3_Init+0xa0>)
 8000466:	4a21      	ldr	r2, [pc, #132]	; (80004ec <MX_TIM3_Init+0xa4>)
 8000468:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800046a:	4b1f      	ldr	r3, [pc, #124]	; (80004e8 <MX_TIM3_Init+0xa0>)
 800046c:	2200      	movs	r2, #0
 800046e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000470:	4b1d      	ldr	r3, [pc, #116]	; (80004e8 <MX_TIM3_Init+0xa0>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000476:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <MX_TIM3_Init+0xa0>)
 8000478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800047c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <MX_TIM3_Init+0xa0>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_TIM3_Init+0xa0>)
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800048a:	2301      	movs	r3, #1
 800048c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800048e:	2300      	movs	r3, #0
 8000490:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000492:	2301      	movs	r3, #1
 8000494:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004a2:	2301      	movs	r3, #1
 80004a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	4619      	mov	r1, r3
 80004b4:	480c      	ldr	r0, [pc, #48]	; (80004e8 <MX_TIM3_Init+0xa0>)
 80004b6:	f002 ff6d 	bl	8003394 <HAL_TIM_Encoder_Init>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80004c0:	f000 f8ca 	bl	8000658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c4:	2300      	movs	r3, #0
 80004c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	4619      	mov	r1, r3
 80004d0:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_TIM3_Init+0xa0>)
 80004d2:	f003 f87b 	bl	80035cc <HAL_TIMEx_MasterConfigSynchronization>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80004dc:	f000 f8bc 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004e0:	bf00      	nop
 80004e2:	3730      	adds	r7, #48	; 0x30
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	200004a0 	.word	0x200004a0
 80004ec:	40000400 	.word	0x40000400

080004f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08c      	sub	sp, #48	; 0x30
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	2224      	movs	r2, #36	; 0x24
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f009 f868 	bl	80095d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800050c:	4b20      	ldr	r3, [pc, #128]	; (8000590 <MX_TIM4_Init+0xa0>)
 800050e:	4a21      	ldr	r2, [pc, #132]	; (8000594 <MX_TIM4_Init+0xa4>)
 8000510:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000512:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <MX_TIM4_Init+0xa0>)
 8000514:	2200      	movs	r2, #0
 8000516:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000518:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <MX_TIM4_Init+0xa0>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <MX_TIM4_Init+0xa0>)
 8000520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000524:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_TIM4_Init+0xa0>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_TIM4_Init+0xa0>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000532:	2301      	movs	r3, #1
 8000534:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800053a:	2301      	movs	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800054a:	2301      	movs	r3, #1
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	4619      	mov	r1, r3
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <MX_TIM4_Init+0xa0>)
 800055e:	f002 ff19 	bl	8003394 <HAL_TIM_Encoder_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000568:	f000 f876 	bl	8000658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	4619      	mov	r1, r3
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_TIM4_Init+0xa0>)
 800057a:	f003 f827 	bl	80035cc <HAL_TIMEx_MasterConfigSynchronization>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000584:	f000 f868 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	3730      	adds	r7, #48	; 0x30
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200004e8 	.word	0x200004e8
 8000594:	40000800 	.word	0x40000800

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <MX_GPIO_Init+0xa4>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a22      	ldr	r2, [pc, #136]	; (800063c <MX_GPIO_Init+0xa4>)
 80005b2:	f043 0310 	orr.w	r3, r3, #16
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b20      	ldr	r3, [pc, #128]	; (800063c <MX_GPIO_Init+0xa4>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0310 	and.w	r3, r3, #16
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_GPIO_Init+0xa4>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a1c      	ldr	r2, [pc, #112]	; (800063c <MX_GPIO_Init+0xa4>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_GPIO_Init+0xa4>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_GPIO_Init+0xa4>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a16      	ldr	r2, [pc, #88]	; (800063c <MX_GPIO_Init+0xa4>)
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_GPIO_Init+0xa4>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0308 	and.w	r3, r3, #8
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_GPIO_Init+0xa4>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a10      	ldr	r2, [pc, #64]	; (800063c <MX_GPIO_Init+0xa4>)
 80005fa:	f043 0320 	orr.w	r3, r3, #32
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_GPIO_Init+0xa4>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0320 	and.w	r3, r3, #32
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PCM_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800060c:	2200      	movs	r2, #0
 800060e:	211f      	movs	r1, #31
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <MX_GPIO_Init+0xa8>)
 8000612:	f000 fcc1 	bl	8000f98 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_PCM_Pin PA1 PA2 PA3
                           PA4 */
  GPIO_InitStruct.Pin = LED_PCM_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000616:	231f      	movs	r3, #31
 8000618:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2302      	movs	r3, #2
 8000624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4619      	mov	r1, r3
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_GPIO_Init+0xa8>)
 800062e:	f000 fb1f 	bl	8000c70 <HAL_GPIO_Init>

}
 8000632:	bf00      	nop
 8000634:	3720      	adds	r7, #32
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000
 8000640:	40010800 	.word	0x40010800

08000644 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800064c:	f008 fb28 	bl	8008ca0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f007 f99c 	bl	800798e <osDelay>
 8000656:	e7fb      	b.n	8000650 <StartDefaultTask+0xc>

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	e7fe      	b.n	8000660 <Error_Handler+0x8>
	...

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_MspInit+0x4c>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <HAL_MspInit+0x4c>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6193      	str	r3, [r2, #24]
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_MspInit+0x4c>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <HAL_MspInit+0x4c>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <HAL_MspInit+0x4c>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	61d3      	str	r3, [r2, #28]
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_MspInit+0x4c>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	210f      	movs	r1, #15
 800069e:	f06f 0001 	mvn.w	r0, #1
 80006a2:	f000 faae 	bl	8000c02 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000

080006b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a37      	ldr	r2, [pc, #220]	; (80007ac <HAL_SPI_MspInit+0xf8>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d130      	bne.n	8000736 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006d4:	4b36      	ldr	r3, [pc, #216]	; (80007b0 <HAL_SPI_MspInit+0xfc>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a35      	ldr	r2, [pc, #212]	; (80007b0 <HAL_SPI_MspInit+0xfc>)
 80006da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <HAL_SPI_MspInit+0xfc>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <HAL_SPI_MspInit+0xfc>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a2f      	ldr	r2, [pc, #188]	; (80007b0 <HAL_SPI_MspInit+0xfc>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <HAL_SPI_MspInit+0xfc>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000704:	23a0      	movs	r3, #160	; 0xa0
 8000706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f107 0318 	add.w	r3, r7, #24
 8000714:	4619      	mov	r1, r3
 8000716:	4827      	ldr	r0, [pc, #156]	; (80007b4 <HAL_SPI_MspInit+0x100>)
 8000718:	f000 faaa 	bl	8000c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0318 	add.w	r3, r7, #24
 800072c:	4619      	mov	r1, r3
 800072e:	4821      	ldr	r0, [pc, #132]	; (80007b4 <HAL_SPI_MspInit+0x100>)
 8000730:	f000 fa9e 	bl	8000c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000734:	e036      	b.n	80007a4 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a1f      	ldr	r2, [pc, #124]	; (80007b8 <HAL_SPI_MspInit+0x104>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d131      	bne.n	80007a4 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_SPI_MspInit+0xfc>)
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	4a1a      	ldr	r2, [pc, #104]	; (80007b0 <HAL_SPI_MspInit+0xfc>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074a:	61d3      	str	r3, [r2, #28]
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_SPI_MspInit+0xfc>)
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_SPI_MspInit+0xfc>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <HAL_SPI_MspInit+0xfc>)
 800075e:	f043 0308 	orr.w	r3, r3, #8
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_SPI_MspInit+0xfc>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0308 	and.w	r3, r3, #8
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000770:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	4619      	mov	r1, r3
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <HAL_SPI_MspInit+0x108>)
 8000786:	f000 fa73 	bl	8000c70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800078a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800078e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	f107 0318 	add.w	r3, r7, #24
 800079c:	4619      	mov	r1, r3
 800079e:	4807      	ldr	r0, [pc, #28]	; (80007bc <HAL_SPI_MspInit+0x108>)
 80007a0:	f000 fa66 	bl	8000c70 <HAL_GPIO_Init>
}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40013000 	.word	0x40013000
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010800 	.word	0x40010800
 80007b8:	40003800 	.word	0x40003800
 80007bc:	40010c00 	.word	0x40010c00

080007c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0318 	add.w	r3, r7, #24
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a3b      	ldr	r2, [pc, #236]	; (80008c8 <HAL_TIM_Encoder_MspInit+0x108>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d136      	bne.n	800084e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007e0:	4b3a      	ldr	r3, [pc, #232]	; (80008cc <HAL_TIM_Encoder_MspInit+0x10c>)
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	4a39      	ldr	r2, [pc, #228]	; (80008cc <HAL_TIM_Encoder_MspInit+0x10c>)
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	61d3      	str	r3, [r2, #28]
 80007ec:	4b37      	ldr	r3, [pc, #220]	; (80008cc <HAL_TIM_Encoder_MspInit+0x10c>)
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	f003 0302 	and.w	r3, r3, #2
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f8:	4b34      	ldr	r3, [pc, #208]	; (80008cc <HAL_TIM_Encoder_MspInit+0x10c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a33      	ldr	r2, [pc, #204]	; (80008cc <HAL_TIM_Encoder_MspInit+0x10c>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b31      	ldr	r3, [pc, #196]	; (80008cc <HAL_TIM_Encoder_MspInit+0x10c>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0310 	and.w	r3, r3, #16
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000810:	23c0      	movs	r3, #192	; 0xc0
 8000812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081c:	f107 0318 	add.w	r3, r7, #24
 8000820:	4619      	mov	r1, r3
 8000822:	482b      	ldr	r0, [pc, #172]	; (80008d0 <HAL_TIM_Encoder_MspInit+0x110>)
 8000824:	f000 fa24 	bl	8000c70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8000828:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <HAL_TIM_Encoder_MspInit+0x114>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
 800082e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000830:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
 800083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000840:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
 8000846:	4a23      	ldr	r2, [pc, #140]	; (80008d4 <HAL_TIM_Encoder_MspInit+0x114>)
 8000848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800084c:	e037      	b.n	80008be <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <HAL_TIM_Encoder_MspInit+0x118>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d132      	bne.n	80008be <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	61d3      	str	r3, [r2, #28]
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <HAL_TIM_Encoder_MspInit+0x10c>)
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <HAL_TIM_Encoder_MspInit+0x10c>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a15      	ldr	r2, [pc, #84]	; (80008cc <HAL_TIM_Encoder_MspInit+0x10c>)
 8000876:	f043 0320 	orr.w	r3, r3, #32
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0320 	and.w	r3, r3, #32
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000888:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000896:	f107 0318 	add.w	r3, r7, #24
 800089a:	4619      	mov	r1, r3
 800089c:	480f      	ldr	r0, [pc, #60]	; (80008dc <HAL_TIM_Encoder_MspInit+0x11c>)
 800089e:	f000 f9e7 	bl	8000c70 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_TIM_Encoder_MspInit+0x114>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008aa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_TIM_Encoder_MspInit+0x114>)
 80008ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008bc:	6053      	str	r3, [r2, #4]
}
 80008be:	bf00      	nop
 80008c0:	3730      	adds	r7, #48	; 0x30
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40000400 	.word	0x40000400
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40011000 	.word	0x40011000
 80008d4:	40010000 	.word	0x40010000
 80008d8:	40000800 	.word	0x40000800
 80008dc:	40011400 	.word	0x40011400

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090e:	f000 f885 	bl	8000a1c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000912:	f007 fdb9 	bl	8008488 <xTaskGetSchedulerState>
 8000916:	4603      	mov	r3, r0
 8000918:	2b01      	cmp	r3, #1
 800091a:	d001      	beq.n	8000920 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800091c:	f007 ffa4 	bl	8008868 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800092a:	f000 fc7e 	bl	800122a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20001f1c 	.word	0x20001f1c

08000938 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000946:	490d      	ldr	r1, [pc, #52]	; (800097c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000948:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800094c:	e002      	b.n	8000954 <LoopCopyDataInit>

0800094e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000952:	3304      	adds	r3, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000958:	d3f9      	bcc.n	800094e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800095c:	4c0a      	ldr	r4, [pc, #40]	; (8000988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000960:	e001      	b.n	8000966 <LoopFillZerobss>

08000962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000964:	3204      	adds	r2, #4

08000966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000968:	d3fb      	bcc.n	8000962 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800096a:	f7ff ffe5 	bl	8000938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096e:	f008 fe0d 	bl	800958c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000972:	f7ff fc75 	bl	8000260 <main>
  bx lr
 8000976:	4770      	bx	lr
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000980:	0800969c 	.word	0x0800969c
  ldr r2, =_sbss
 8000984:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000988:	20002428 	.word	0x20002428

0800098c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC1_2_IRQHandler>
	...

08000990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_Init+0x28>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_Init+0x28>)
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a0:	2003      	movs	r0, #3
 80009a2:	f000 f923 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a6:	200f      	movs	r0, #15
 80009a8:	f000 f808 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ac:	f7ff fe5a 	bl	8000664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40022000 	.word	0x40022000

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_InitTick+0x54>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_InitTick+0x58>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f93b 	bl	8000c56 <HAL_SYSTICK_Config>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00e      	b.n	8000a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d80a      	bhi.n	8000a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f8:	f000 f903 	bl	8000c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <HAL_InitTick+0x5c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_IncTick+0x1c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x20>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <HAL_IncTick+0x20>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000534 	.word	0x20000534

08000a40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <HAL_GetTick+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	20000534 	.word	0x20000534

08000a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	f003 0307 	and.w	r3, r3, #7
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db0b      	blt.n	8000ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f003 021f 	and.w	r2, r3, #31
 8000ad0:	4906      	ldr	r1, [pc, #24]	; (8000aec <__NVIC_EnableIRQ+0x34>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	095b      	lsrs	r3, r3, #5
 8000ad8:	2001      	movs	r0, #1
 8000ada:	fa00 f202 	lsl.w	r2, r0, r2
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb8:	d301      	bcc.n	8000bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00f      	b.n	8000bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <SysTick_Config+0x40>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f7ff ff90 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x40>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff2d 	bl	8000a54 <__NVIC_SetPriorityGrouping>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c14:	f7ff ff42 	bl	8000a9c <__NVIC_GetPriorityGrouping>
 8000c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f7ff ff90 	bl	8000b44 <NVIC_EncodePriority>
 8000c24:	4602      	mov	r2, r0
 8000c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff5f 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff35 	bl	8000ab8 <__NVIC_EnableIRQ>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffa2 	bl	8000ba8 <SysTick_Config>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b08b      	sub	sp, #44	; 0x2c
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c82:	e179      	b.n	8000f78 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c84:	2201      	movs	r2, #1
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f040 8168 	bne.w	8000f72 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4a96      	ldr	r2, [pc, #600]	; (8000f00 <HAL_GPIO_Init+0x290>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d05e      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cac:	4a94      	ldr	r2, [pc, #592]	; (8000f00 <HAL_GPIO_Init+0x290>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d875      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cb2:	4a94      	ldr	r2, [pc, #592]	; (8000f04 <HAL_GPIO_Init+0x294>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d058      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cb8:	4a92      	ldr	r2, [pc, #584]	; (8000f04 <HAL_GPIO_Init+0x294>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d86f      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cbe:	4a92      	ldr	r2, [pc, #584]	; (8000f08 <HAL_GPIO_Init+0x298>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d052      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cc4:	4a90      	ldr	r2, [pc, #576]	; (8000f08 <HAL_GPIO_Init+0x298>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d869      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cca:	4a90      	ldr	r2, [pc, #576]	; (8000f0c <HAL_GPIO_Init+0x29c>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d04c      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cd0:	4a8e      	ldr	r2, [pc, #568]	; (8000f0c <HAL_GPIO_Init+0x29c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d863      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cd6:	4a8e      	ldr	r2, [pc, #568]	; (8000f10 <HAL_GPIO_Init+0x2a0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d046      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cdc:	4a8c      	ldr	r2, [pc, #560]	; (8000f10 <HAL_GPIO_Init+0x2a0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d85d      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000ce2:	2b12      	cmp	r3, #18
 8000ce4:	d82a      	bhi.n	8000d3c <HAL_GPIO_Init+0xcc>
 8000ce6:	2b12      	cmp	r3, #18
 8000ce8:	d859      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cea:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <HAL_GPIO_Init+0x80>)
 8000cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf0:	08000d6b 	.word	0x08000d6b
 8000cf4:	08000d45 	.word	0x08000d45
 8000cf8:	08000d57 	.word	0x08000d57
 8000cfc:	08000d99 	.word	0x08000d99
 8000d00:	08000d9f 	.word	0x08000d9f
 8000d04:	08000d9f 	.word	0x08000d9f
 8000d08:	08000d9f 	.word	0x08000d9f
 8000d0c:	08000d9f 	.word	0x08000d9f
 8000d10:	08000d9f 	.word	0x08000d9f
 8000d14:	08000d9f 	.word	0x08000d9f
 8000d18:	08000d9f 	.word	0x08000d9f
 8000d1c:	08000d9f 	.word	0x08000d9f
 8000d20:	08000d9f 	.word	0x08000d9f
 8000d24:	08000d9f 	.word	0x08000d9f
 8000d28:	08000d9f 	.word	0x08000d9f
 8000d2c:	08000d9f 	.word	0x08000d9f
 8000d30:	08000d9f 	.word	0x08000d9f
 8000d34:	08000d4d 	.word	0x08000d4d
 8000d38:	08000d61 	.word	0x08000d61
 8000d3c:	4a75      	ldr	r2, [pc, #468]	; (8000f14 <HAL_GPIO_Init+0x2a4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d013      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d42:	e02c      	b.n	8000d9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	623b      	str	r3, [r7, #32]
          break;
 8000d4a:	e029      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	3304      	adds	r3, #4
 8000d52:	623b      	str	r3, [r7, #32]
          break;
 8000d54:	e024      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	3308      	adds	r3, #8
 8000d5c:	623b      	str	r3, [r7, #32]
          break;
 8000d5e:	e01f      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	330c      	adds	r3, #12
 8000d66:	623b      	str	r3, [r7, #32]
          break;
 8000d68:	e01a      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d72:	2304      	movs	r3, #4
 8000d74:	623b      	str	r3, [r7, #32]
          break;
 8000d76:	e013      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d105      	bne.n	8000d8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d80:	2308      	movs	r3, #8
 8000d82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69fa      	ldr	r2, [r7, #28]
 8000d88:	611a      	str	r2, [r3, #16]
          break;
 8000d8a:	e009      	b.n	8000da0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	615a      	str	r2, [r3, #20]
          break;
 8000d96:	e003      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
          break;
 8000d9c:	e000      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          break;
 8000d9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	2bff      	cmp	r3, #255	; 0xff
 8000da4:	d801      	bhi.n	8000daa <HAL_GPIO_Init+0x13a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	e001      	b.n	8000dae <HAL_GPIO_Init+0x13e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3304      	adds	r3, #4
 8000dae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	2bff      	cmp	r3, #255	; 0xff
 8000db4:	d802      	bhi.n	8000dbc <HAL_GPIO_Init+0x14c>
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	e002      	b.n	8000dc2 <HAL_GPIO_Init+0x152>
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	3b08      	subs	r3, #8
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	210f      	movs	r1, #15
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	6a39      	ldr	r1, [r7, #32]
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 80c1 	beq.w	8000f72 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000df0:	4b49      	ldr	r3, [pc, #292]	; (8000f18 <HAL_GPIO_Init+0x2a8>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a48      	ldr	r2, [pc, #288]	; (8000f18 <HAL_GPIO_Init+0x2a8>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <HAL_GPIO_Init+0x2a8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e08:	4a44      	ldr	r2, [pc, #272]	; (8000f1c <HAL_GPIO_Init+0x2ac>)
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	3302      	adds	r3, #2
 8000e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	220f      	movs	r2, #15
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a3c      	ldr	r2, [pc, #240]	; (8000f20 <HAL_GPIO_Init+0x2b0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d01f      	beq.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a3b      	ldr	r2, [pc, #236]	; (8000f24 <HAL_GPIO_Init+0x2b4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d019      	beq.n	8000e70 <HAL_GPIO_Init+0x200>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a3a      	ldr	r2, [pc, #232]	; (8000f28 <HAL_GPIO_Init+0x2b8>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d013      	beq.n	8000e6c <HAL_GPIO_Init+0x1fc>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a39      	ldr	r2, [pc, #228]	; (8000f2c <HAL_GPIO_Init+0x2bc>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d00d      	beq.n	8000e68 <HAL_GPIO_Init+0x1f8>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a38      	ldr	r2, [pc, #224]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d007      	beq.n	8000e64 <HAL_GPIO_Init+0x1f4>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a37      	ldr	r2, [pc, #220]	; (8000f34 <HAL_GPIO_Init+0x2c4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d101      	bne.n	8000e60 <HAL_GPIO_Init+0x1f0>
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	e00a      	b.n	8000e76 <HAL_GPIO_Init+0x206>
 8000e60:	2306      	movs	r3, #6
 8000e62:	e008      	b.n	8000e76 <HAL_GPIO_Init+0x206>
 8000e64:	2304      	movs	r3, #4
 8000e66:	e006      	b.n	8000e76 <HAL_GPIO_Init+0x206>
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e004      	b.n	8000e76 <HAL_GPIO_Init+0x206>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e002      	b.n	8000e76 <HAL_GPIO_Init+0x206>
 8000e70:	2301      	movs	r3, #1
 8000e72:	e000      	b.n	8000e76 <HAL_GPIO_Init+0x206>
 8000e74:	2300      	movs	r3, #0
 8000e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e78:	f002 0203 	and.w	r2, r2, #3
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	4093      	lsls	r3, r2
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e86:	4925      	ldr	r1, [pc, #148]	; (8000f1c <HAL_GPIO_Init+0x2ac>)
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d006      	beq.n	8000eae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ea0:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <HAL_GPIO_Init+0x2c8>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4924      	ldr	r1, [pc, #144]	; (8000f38 <HAL_GPIO_Init+0x2c8>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	600b      	str	r3, [r1, #0]
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000eae:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <HAL_GPIO_Init+0x2c8>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	4920      	ldr	r1, [pc, #128]	; (8000f38 <HAL_GPIO_Init+0x2c8>)
 8000eb8:	4013      	ands	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d006      	beq.n	8000ed6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_GPIO_Init+0x2c8>)
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	491a      	ldr	r1, [pc, #104]	; (8000f38 <HAL_GPIO_Init+0x2c8>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	604b      	str	r3, [r1, #4]
 8000ed4:	e006      	b.n	8000ee4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_GPIO_Init+0x2c8>)
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	4916      	ldr	r1, [pc, #88]	; (8000f38 <HAL_GPIO_Init+0x2c8>)
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d025      	beq.n	8000f3c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_GPIO_Init+0x2c8>)
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	4910      	ldr	r1, [pc, #64]	; (8000f38 <HAL_GPIO_Init+0x2c8>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	608b      	str	r3, [r1, #8]
 8000efc:	e025      	b.n	8000f4a <HAL_GPIO_Init+0x2da>
 8000efe:	bf00      	nop
 8000f00:	10320000 	.word	0x10320000
 8000f04:	10310000 	.word	0x10310000
 8000f08:	10220000 	.word	0x10220000
 8000f0c:	10210000 	.word	0x10210000
 8000f10:	10120000 	.word	0x10120000
 8000f14:	10110000 	.word	0x10110000
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010000 	.word	0x40010000
 8000f20:	40010800 	.word	0x40010800
 8000f24:	40010c00 	.word	0x40010c00
 8000f28:	40011000 	.word	0x40011000
 8000f2c:	40011400 	.word	0x40011400
 8000f30:	40011800 	.word	0x40011800
 8000f34:	40011c00 	.word	0x40011c00
 8000f38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_GPIO_Init+0x324>)
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	4913      	ldr	r1, [pc, #76]	; (8000f94 <HAL_GPIO_Init+0x324>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_GPIO_Init+0x324>)
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	490e      	ldr	r1, [pc, #56]	; (8000f94 <HAL_GPIO_Init+0x324>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60cb      	str	r3, [r1, #12]
 8000f62:	e006      	b.n	8000f72 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_GPIO_Init+0x324>)
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	4909      	ldr	r1, [pc, #36]	; (8000f94 <HAL_GPIO_Init+0x324>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3301      	adds	r3, #1
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f47f ae7e 	bne.w	8000c84 <HAL_GPIO_Init+0x14>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	372c      	adds	r7, #44	; 0x2c
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40010400 	.word	0x40010400

08000f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa8:	787b      	ldrb	r3, [r7, #1]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fb4:	e003      	b.n	8000fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fb6:	887b      	ldrh	r3, [r7, #2]
 8000fb8:	041a      	lsls	r2, r3, #16
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	611a      	str	r2, [r3, #16]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fca:	b08b      	sub	sp, #44	; 0x2c
 8000fcc:	af06      	add	r7, sp, #24
 8000fce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e0fd      	b.n	80011d6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d106      	bne.n	8000ff4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f008 f822 	bl	8009038 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f002 fb75 	bl	80036f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	687e      	ldr	r6, [r7, #4]
 800100e:	466d      	mov	r5, sp
 8001010:	f106 0410 	add.w	r4, r6, #16
 8001014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	602b      	str	r3, [r5, #0]
 800101c:	1d33      	adds	r3, r6, #4
 800101e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001020:	6838      	ldr	r0, [r7, #0]
 8001022:	f002 fb3f 	bl	80036a4 <USB_CoreInit>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2202      	movs	r2, #2
 8001030:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e0ce      	b.n	80011d6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f002 fb70 	bl	8003724 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e04c      	b.n	80010e4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	440b      	add	r3, r1
 800105a:	3301      	adds	r3, #1
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	440b      	add	r3, r1
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	b298      	uxth	r0, r3
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	440b      	add	r3, r1
 8001086:	3336      	adds	r3, #54	; 0x36
 8001088:	4602      	mov	r2, r0
 800108a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	3303      	adds	r3, #3
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	440b      	add	r3, r1
 80010b0:	3338      	adds	r3, #56	; 0x38
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	333c      	adds	r3, #60	; 0x3c
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	440b      	add	r3, r1
 80010d8:	3340      	adds	r3, #64	; 0x40
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	3301      	adds	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d3ad      	bcc.n	800104a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	e044      	b.n	800117e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	440b      	add	r3, r1
 8001102:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	440b      	add	r3, r1
 8001118:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	440b      	add	r3, r1
 800115a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	440b      	add	r3, r1
 8001170:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	3301      	adds	r3, #1
 800117c:	73fb      	strb	r3, [r7, #15]
 800117e:	7bfa      	ldrb	r2, [r7, #15]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	d3b5      	bcc.n	80010f4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	687e      	ldr	r6, [r7, #4]
 8001190:	466d      	mov	r5, sp
 8001192:	f106 0410 	add.w	r4, r6, #16
 8001196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	602b      	str	r3, [r5, #0]
 800119e:	1d33      	adds	r3, r6, #4
 80011a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a2:	6838      	ldr	r0, [r7, #0]
 80011a4:	f002 faca 	bl	800373c <USB_DevInit>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d005      	beq.n	80011ba <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2202      	movs	r2, #2
 80011b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00d      	b.n	80011d6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 ff7c 	bl	80060cc <USB_DevDisconnect>

  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_PCD_Start+0x16>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e016      	b.n	8001222 <HAL_PCD_Start+0x44>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fa5f 	bl	80036c4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001206:	2101      	movs	r1, #1
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f008 f988 	bl	800951e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f004 ff50 	bl	80060b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b088      	sub	sp, #32
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f004 ff52 	bl	80060e0 <USB_ReadInterrupts>
 800123c:	4603      	mov	r3, r0
 800123e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001246:	d102      	bne.n	800124e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fb5f 	bl	800190c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f004 ff44 	bl	80060e0 <USB_ReadInterrupts>
 8001258:	4603      	mov	r3, r0
 800125a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001262:	d112      	bne.n	800128a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800126c:	b29a      	uxth	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001276:	b292      	uxth	r2, r2
 8001278:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f007 ff56 	bl	800912e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001282:	2100      	movs	r1, #0
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f923 	bl	80014d0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f004 ff26 	bl	80060e0 <USB_ReadInterrupts>
 8001294:	4603      	mov	r3, r0
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800129e:	d10b      	bne.n	80012b8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012b2:	b292      	uxth	r2, r2
 80012b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 ff0f 	bl	80060e0 <USB_ReadInterrupts>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012cc:	d10b      	bne.n	80012e6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012e0:	b292      	uxth	r2, r2
 80012e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f004 fef8 	bl	80060e0 <USB_ReadInterrupts>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012fa:	d126      	bne.n	800134a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0204 	bic.w	r2, r2, #4
 800130e:	b292      	uxth	r2, r2
 8001310:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800131c:	b29a      	uxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0208 	bic.w	r2, r2, #8
 8001326:	b292      	uxth	r2, r2
 8001328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f007 ff37 	bl	80091a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800133a:	b29a      	uxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001344:	b292      	uxth	r2, r2
 8001346:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f004 fec6 	bl	80060e0 <USB_ReadInterrupts>
 8001354:	4603      	mov	r3, r0
 8001356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800135a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800135e:	f040 8082 	bne.w	8001466 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001362:	2300      	movs	r3, #0
 8001364:	77fb      	strb	r3, [r7, #31]
 8001366:	e010      	b.n	800138a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	7ffb      	ldrb	r3, [r7, #31]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	441a      	add	r2, r3
 8001374:	7ffb      	ldrb	r3, [r7, #31]
 8001376:	8812      	ldrh	r2, [r2, #0]
 8001378:	b292      	uxth	r2, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	3320      	adds	r3, #32
 800137e:	443b      	add	r3, r7
 8001380:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001384:	7ffb      	ldrb	r3, [r7, #31]
 8001386:	3301      	adds	r3, #1
 8001388:	77fb      	strb	r3, [r7, #31]
 800138a:	7ffb      	ldrb	r3, [r7, #31]
 800138c:	2b07      	cmp	r3, #7
 800138e:	d9eb      	bls.n	8001368 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0201 	orr.w	r2, r2, #1
 80013a2:	b292      	uxth	r2, r2
 80013a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	b292      	uxth	r2, r2
 80013bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80013c0:	bf00      	nop
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f6      	beq.n	80013c2 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013dc:	b29a      	uxth	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013e6:	b292      	uxth	r2, r2
 80013e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	77fb      	strb	r3, [r7, #31]
 80013f0:	e00f      	b.n	8001412 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	4611      	mov	r1, r2
 80013fa:	7ffa      	ldrb	r2, [r7, #31]
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	440a      	add	r2, r1
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	3320      	adds	r3, #32
 8001404:	443b      	add	r3, r7
 8001406:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800140a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800140c:	7ffb      	ldrb	r3, [r7, #31]
 800140e:	3301      	adds	r3, #1
 8001410:	77fb      	strb	r3, [r7, #31]
 8001412:	7ffb      	ldrb	r3, [r7, #31]
 8001414:	2b07      	cmp	r3, #7
 8001416:	d9ec      	bls.n	80013f2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001420:	b29a      	uxth	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0208 	orr.w	r2, r2, #8
 800142a:	b292      	uxth	r2, r2
 800142c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001438:	b29a      	uxth	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001442:	b292      	uxth	r2, r2
 8001444:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001450:	b29a      	uxth	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0204 	orr.w	r2, r2, #4
 800145a:	b292      	uxth	r2, r2
 800145c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f007 fe83 	bl	800916c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f004 fe38 	bl	80060e0 <USB_ReadInterrupts>
 8001470:	4603      	mov	r3, r0
 8001472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800147a:	d10e      	bne.n	800149a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001484:	b29a      	uxth	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800148e:	b292      	uxth	r2, r2
 8001490:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f007 fe3c 	bl	8009112 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 fe1e 	bl	80060e0 <USB_ReadInterrupts>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014ae:	d10b      	bne.n	80014c8 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014c2:	b292      	uxth	r2, r2
 80014c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80014c8:	bf00      	nop
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_PCD_SetAddress+0x1a>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e013      	b.n	8001512 <HAL_PCD_SetAddress+0x42>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	78fa      	ldrb	r2, [r7, #3]
 80014f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	78fa      	ldrb	r2, [r7, #3]
 8001500:	4611      	mov	r1, r2
 8001502:	4618      	mov	r0, r3
 8001504:	f004 fdc5 	bl	8006092 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	4608      	mov	r0, r1
 8001524:	4611      	mov	r1, r2
 8001526:	461a      	mov	r2, r3
 8001528:	4603      	mov	r3, r0
 800152a:	70fb      	strb	r3, [r7, #3]
 800152c:	460b      	mov	r3, r1
 800152e:	803b      	strh	r3, [r7, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800153c:	2b00      	cmp	r3, #0
 800153e:	da0e      	bge.n	800155e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2201      	movs	r2, #1
 800155a:	705a      	strb	r2, [r3, #1]
 800155c:	e00e      	b.n	800157c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	f003 0207 	and.w	r2, r3, #7
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2200      	movs	r2, #0
 800157a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	b2da      	uxtb	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001588:	883a      	ldrh	r2, [r7, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	78ba      	ldrb	r2, [r7, #2]
 8001592:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015a6:	78bb      	ldrb	r3, [r7, #2]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d102      	bne.n	80015b2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_PCD_EP_Open+0xa6>
 80015bc:	2302      	movs	r3, #2
 80015be:	e00e      	b.n	80015de <HAL_PCD_EP_Open+0xc4>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68f9      	ldr	r1, [r7, #12]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 f8d4 	bl	800377c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80015dc:	7afb      	ldrb	r3, [r7, #11]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	460b      	mov	r3, r1
 80015f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	da0e      	bge.n	8001618 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2201      	movs	r2, #1
 8001614:	705a      	strb	r2, [r3, #1]
 8001616:	e00e      	b.n	8001636 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	f003 0207 	and.w	r2, r3, #7
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	b2da      	uxtb	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_PCD_EP_Close+0x6a>
 800164c:	2302      	movs	r3, #2
 800164e:	e00e      	b.n	800166e <HAL_PCD_EP_Close+0x88>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68f9      	ldr	r1, [r7, #12]
 800165e:	4618      	mov	r0, r3
 8001660:	f002 fbf6 	bl	8003e50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	460b      	mov	r3, r1
 8001684:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001686:	7afb      	ldrb	r3, [r7, #11]
 8001688:	f003 0207 	and.w	r2, r3, #7
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	2200      	movs	r2, #0
 80016b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016b6:	7afb      	ldrb	r3, [r7, #11]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016c2:	7afb      	ldrb	r3, [r7, #11]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d106      	bne.n	80016da <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6979      	ldr	r1, [r7, #20]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 fda8 	bl	8004228 <USB_EPStartXfer>
 80016d8:	e005      	b.n	80016e6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6979      	ldr	r1, [r7, #20]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f002 fda1 	bl	8004228 <USB_EPStartXfer>
  }

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	f003 0207 	and.w	r2, r3, #7
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	460b      	mov	r3, r1
 800172c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800172e:	7afb      	ldrb	r3, [r7, #11]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2200      	movs	r2, #0
 8001762:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	2201      	movs	r2, #1
 8001768:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800176a:	7afb      	ldrb	r3, [r7, #11]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	b2da      	uxtb	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001776:	7afb      	ldrb	r3, [r7, #11]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	2b00      	cmp	r3, #0
 800177e:	d106      	bne.n	800178e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6979      	ldr	r1, [r7, #20]
 8001786:	4618      	mov	r0, r3
 8001788:	f002 fd4e 	bl	8004228 <USB_EPStartXfer>
 800178c:	e005      	b.n	800179a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6979      	ldr	r1, [r7, #20]
 8001794:	4618      	mov	r0, r3
 8001796:	f002 fd47 	bl	8004228 <USB_EPStartXfer>
  }

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	f003 0207 	and.w	r2, r3, #7
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d901      	bls.n	80017c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e04c      	b.n	800185c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	da0e      	bge.n	80017e8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2201      	movs	r2, #1
 80017e4:	705a      	strb	r2, [r3, #1]
 80017e6:	e00c      	b.n	8001802 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2201      	movs	r2, #1
 8001806:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	b2da      	uxtb	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_PCD_EP_SetStall+0x7e>
 800181e:	2302      	movs	r3, #2
 8001820:	e01c      	b.n	800185c <HAL_PCD_EP_SetStall+0xb8>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68f9      	ldr	r1, [r7, #12]
 8001830:	4618      	mov	r0, r3
 8001832:	f004 fb31 	bl	8005e98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	2b00      	cmp	r3, #0
 800183e:	d108      	bne.n	8001852 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800184a:	4619      	mov	r1, r3
 800184c:	4610      	mov	r0, r2
 800184e:	f004 fc56 	bl	80060fe <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	f003 020f 	and.w	r2, r3, #15
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	429a      	cmp	r2, r3
 800187c:	d901      	bls.n	8001882 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e040      	b.n	8001904 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001886:	2b00      	cmp	r3, #0
 8001888:	da0e      	bge.n	80018a8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2201      	movs	r2, #1
 80018a4:	705a      	strb	r2, [r3, #1]
 80018a6:	e00e      	b.n	80018c6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	f003 0207 	and.w	r2, r3, #7
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_PCD_EP_ClrStall+0x82>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e00e      	b.n	8001904 <HAL_PCD_EP_ClrStall+0xa0>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68f9      	ldr	r1, [r7, #12]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f004 fb1f 	bl	8005f38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08e      	sub	sp, #56	; 0x38
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001914:	e2ec      	b.n	8001ef0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800191e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001920:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001922:	b2db      	uxtb	r3, r3
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800192c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001930:	2b00      	cmp	r3, #0
 8001932:	f040 8161 	bne.w	8001bf8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001936:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	d152      	bne.n	80019e6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800194c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001950:	81fb      	strh	r3, [r7, #14]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	89fb      	ldrh	r3, [r7, #14]
 8001958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800195c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001960:	b29b      	uxth	r3, r3
 8001962:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3328      	adds	r3, #40	; 0x28
 8001968:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001972:	b29b      	uxth	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	3302      	adds	r3, #2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	4413      	add	r3, r2
 8001988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	441a      	add	r2, r3
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80019a4:	2100      	movs	r1, #0
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f007 fb99 	bl	80090de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 829b 	beq.w	8001ef0 <PCD_EP_ISR_Handler+0x5e4>
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f040 8296 	bne.w	8001ef0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	b292      	uxth	r2, r2
 80019d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80019e4:	e284      	b.n	8001ef0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d034      	beq.n	8001a6a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	3306      	adds	r3, #6
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	f004 fbad 	bl	800619e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a50:	4013      	ands	r3, r2
 8001a52:	823b      	strh	r3, [r7, #16]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	8a3a      	ldrh	r2, [r7, #16]
 8001a5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f007 fb0e 	bl	8009084 <HAL_PCD_SetupStageCallback>
 8001a68:	e242      	b.n	8001ef0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a6a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f280 823e 	bge.w	8001ef0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a80:	4013      	ands	r3, r2
 8001a82:	83bb      	strh	r3, [r7, #28]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	8bba      	ldrh	r2, [r7, #28]
 8001a8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a8e:	b292      	uxth	r2, r2
 8001a90:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3306      	adds	r3, #6
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d019      	beq.n	8001afa <PCD_EP_ISR_Handler+0x1ee>
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d015      	beq.n	8001afa <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	6959      	ldr	r1, [r3, #20]
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	f004 fb5d 	bl	800619e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	441a      	add	r2, r3
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001af2:	2100      	movs	r1, #0
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f007 fad7 	bl	80090a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 81f2 	bne.w	8001ef0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4413      	add	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d112      	bne.n	8001b5a <PCD_EP_ISR_Handler+0x24e>
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	801a      	strh	r2, [r3, #0]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	801a      	strh	r2, [r3, #0]
 8001b58:	e02f      	b.n	8001bba <PCD_EP_ISR_Handler+0x2ae>
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b3e      	cmp	r3, #62	; 0x3e
 8001b60:	d813      	bhi.n	8001b8a <PCD_EP_ISR_Handler+0x27e>
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	085b      	lsrs	r3, r3, #1
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <PCD_EP_ISR_Handler+0x270>
 8001b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b78:	3301      	adds	r3, #1
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8001b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	029b      	lsls	r3, r3, #10
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	801a      	strh	r2, [r3, #0]
 8001b88:	e017      	b.n	8001bba <PCD_EP_ISR_Handler+0x2ae>
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <PCD_EP_ISR_Handler+0x298>
 8001b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	029b      	lsls	r3, r3, #10
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bca:	827b      	strh	r3, [r7, #18]
 8001bcc:	8a7b      	ldrh	r3, [r7, #18]
 8001bce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001bd2:	827b      	strh	r3, [r7, #18]
 8001bd4:	8a7b      	ldrh	r3, [r7, #18]
 8001bd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bda:	827b      	strh	r3, [r7, #18]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	8a7b      	ldrh	r3, [r7, #18]
 8001be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	8013      	strh	r3, [r2, #0]
 8001bf6:	e17b      	b.n	8001ef0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c0a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f280 80ea 	bge.w	8001de8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	853b      	strh	r3, [r7, #40]	; 0x28
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c42:	b292      	uxth	r2, r2
 8001c44:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c46:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	7b1b      	ldrb	r3, [r3, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d122      	bne.n	8001caa <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	3306      	adds	r3, #6
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c8c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001c8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8087 	beq.w	8001da4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	6959      	ldr	r1, [r3, #20]
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	88da      	ldrh	r2, [r3, #6]
 8001ca2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ca4:	f004 fa7b 	bl	800619e <USB_ReadPMA>
 8001ca8:	e07c      	b.n	8001da4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	78db      	ldrb	r3, [r3, #3]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d108      	bne.n	8001cc4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001cb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f927 	bl	8001f0c <HAL_PCD_EP_DB_Receive>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001cc2:	e06f      	b.n	8001da4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cde:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	441a      	add	r2, r3
 8001cee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d021      	beq.n	8001d62 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	3302      	adds	r3, #2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d46:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d02a      	beq.n	8001da4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	6959      	ldr	r1, [r3, #20]
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	891a      	ldrh	r2, [r3, #8]
 8001d5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d5c:	f004 fa1f 	bl	800619e <USB_ReadPMA>
 8001d60:	e020      	b.n	8001da4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	3306      	adds	r3, #6
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d8a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d008      	beq.n	8001da4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	6959      	ldr	r1, [r3, #20]
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	895a      	ldrh	r2, [r3, #10]
 8001d9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001da0:	f004 f9fd 	bl	800619e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	69da      	ldr	r2, [r3, #28]
 8001da8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001daa:	441a      	add	r2, r3
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	695a      	ldr	r2, [r3, #20]
 8001db4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001db6:	441a      	add	r2, r3
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <PCD_EP_ISR_Handler+0x4c2>
 8001dc4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d206      	bcs.n	8001ddc <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f007 f967 	bl	80090a8 <HAL_PCD_DataOutStageCallback>
 8001dda:	e005      	b.n	8001de8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fa20 	bl	8004228 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001de8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d07e      	beq.n	8001ef0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001df2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e20:	843b      	strh	r3, [r7, #32]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	441a      	add	r2, r3
 8001e30:	8c3b      	ldrh	r3, [r7, #32]
 8001e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	78db      	ldrb	r3, [r3, #3]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d00c      	beq.n	8001e60 <PCD_EP_ISR_Handler+0x554>
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	78db      	ldrb	r3, [r3, #3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d146      	bne.n	8001ee4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001e56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d141      	bne.n	8001ee4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	3302      	adds	r3, #2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e88:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	8bfb      	ldrh	r3, [r7, #30]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d906      	bls.n	8001ea2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	699a      	ldr	r2, [r3, #24]
 8001e98:	8bfb      	ldrh	r3, [r7, #30]
 8001e9a:	1ad2      	subs	r2, r2, r3
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	619a      	str	r2, [r3, #24]
 8001ea0:	e002      	b.n	8001ea8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d106      	bne.n	8001ebe <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f007 f911 	bl	80090de <HAL_PCD_DataInStageCallback>
 8001ebc:	e018      	b.n	8001ef0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	8bfb      	ldrh	r3, [r7, #30]
 8001ec4:	441a      	add	r2, r3
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	8bfb      	ldrh	r3, [r7, #30]
 8001ed0:	441a      	add	r2, r3
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001edc:	4618      	mov	r0, r3
 8001ede:	f002 f9a3 	bl	8004228 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001ee2:	e005      	b.n	8001ef0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ee4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f91b 	bl	8002126 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f6ff ad0a 	blt.w	8001916 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3738      	adds	r7, #56	; 0x38
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	4613      	mov	r3, r2
 8001f18:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d07e      	beq.n	8002022 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f4c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	8b7b      	ldrh	r3, [r7, #26]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d306      	bcc.n	8001f66 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	699a      	ldr	r2, [r3, #24]
 8001f5c:	8b7b      	ldrh	r3, [r7, #26]
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	619a      	str	r2, [r3, #24]
 8001f64:	e002      	b.n	8001f6c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d123      	bne.n	8001fbc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f8e:	833b      	strh	r3, [r7, #24]
 8001f90:	8b3b      	ldrh	r3, [r7, #24]
 8001f92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f96:	833b      	strh	r3, [r7, #24]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	441a      	add	r2, r3
 8001fa6:	8b3b      	ldrh	r3, [r7, #24]
 8001fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d01f      	beq.n	8002006 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe0:	82fb      	strh	r3, [r7, #22]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	441a      	add	r2, r3
 8001ff0:	8afb      	ldrh	r3, [r7, #22]
 8001ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002002:	b29b      	uxth	r3, r3
 8002004:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002006:	8b7b      	ldrh	r3, [r7, #26]
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 8087 	beq.w	800211c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	6959      	ldr	r1, [r3, #20]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	891a      	ldrh	r2, [r3, #8]
 800201a:	8b7b      	ldrh	r3, [r7, #26]
 800201c:	f004 f8bf 	bl	800619e <USB_ReadPMA>
 8002020:	e07c      	b.n	800211c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800202a:	b29b      	uxth	r3, r3
 800202c:	461a      	mov	r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	3306      	adds	r3, #6
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	4413      	add	r3, r2
 8002040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800204a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	8b7b      	ldrh	r3, [r7, #26]
 8002052:	429a      	cmp	r2, r3
 8002054:	d306      	bcc.n	8002064 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	8b7b      	ldrh	r3, [r7, #26]
 800205c:	1ad2      	subs	r2, r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	619a      	str	r2, [r3, #24]
 8002062:	e002      	b.n	800206a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d123      	bne.n	80020ba <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208c:	83fb      	strh	r3, [r7, #30]
 800208e:	8bfb      	ldrh	r3, [r7, #30]
 8002090:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002094:	83fb      	strh	r3, [r7, #30]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	441a      	add	r2, r3
 80020a4:	8bfb      	ldrh	r3, [r7, #30]
 80020a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11f      	bne.n	8002104 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020de:	83bb      	strh	r3, [r7, #28]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	441a      	add	r2, r3
 80020ee:	8bbb      	ldrh	r3, [r7, #28]
 80020f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002100:	b29b      	uxth	r3, r3
 8002102:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002104:	8b7b      	ldrh	r3, [r7, #26]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	6959      	ldr	r1, [r3, #20]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	895a      	ldrh	r2, [r3, #10]
 8002116:	8b7b      	ldrh	r3, [r7, #26]
 8002118:	f004 f841 	bl	800619e <USB_ReadPMA>
    }
  }

  return count;
 800211c:	8b7b      	ldrh	r3, [r7, #26]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3720      	adds	r7, #32
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b0a2      	sub	sp, #136	; 0x88
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	4613      	mov	r3, r2
 8002132:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 81c7 	beq.w	80024ce <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002148:	b29b      	uxth	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	3302      	adds	r3, #2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002168:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	699a      	ldr	r2, [r3, #24]
 8002170:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002174:	429a      	cmp	r2, r3
 8002176:	d907      	bls.n	8002188 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002180:	1ad2      	subs	r2, r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	619a      	str	r2, [r3, #24]
 8002186:	e002      	b.n	800218e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 80b9 	bne.w	800230a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	785b      	ldrb	r3, [r3, #1]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d126      	bne.n	80021ee <HAL_PCD_EP_DB_Transmit+0xc8>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	4413      	add	r3, r2
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	011a      	lsls	r2, r3, #4
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c0:	4413      	add	r3, r2
 80021c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	801a      	strh	r2, [r3, #0]
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	801a      	strh	r2, [r3, #0]
 80021ec:	e01a      	b.n	8002224 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	785b      	ldrb	r3, [r3, #1]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d116      	bne.n	8002224 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002204:	b29b      	uxth	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220a:	4413      	add	r3, r2
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	011a      	lsls	r2, r3, #4
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	4413      	add	r3, r2
 8002218:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002220:	2200      	movs	r2, #0
 8002222:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	623b      	str	r3, [r7, #32]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	785b      	ldrb	r3, [r3, #1]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d126      	bne.n	8002280 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	4413      	add	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	011a      	lsls	r2, r3, #4
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	4413      	add	r3, r2
 8002254:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002264:	b29a      	uxth	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	801a      	strh	r2, [r3, #0]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	b29b      	uxth	r3, r3
 8002270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002278:	b29a      	uxth	r2, r3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	801a      	strh	r2, [r3, #0]
 800227e:	e017      	b.n	80022b0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	785b      	ldrb	r3, [r3, #1]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d113      	bne.n	80022b0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002290:	b29b      	uxth	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	4413      	add	r3, r2
 8002298:	623b      	str	r3, [r7, #32]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	011a      	lsls	r2, r3, #4
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	4413      	add	r3, r2
 80022a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	2200      	movs	r2, #0
 80022ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4619      	mov	r1, r3
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f006 ff11 	bl	80090de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 82d4 	beq.w	8002870 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e2:	827b      	strh	r3, [r7, #18]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	441a      	add	r2, r3
 80022f2:	8a7b      	ldrh	r3, [r7, #18]
 80022f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002304:	b29b      	uxth	r3, r3
 8002306:	8013      	strh	r3, [r2, #0]
 8002308:	e2b2      	b.n	8002870 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d021      	beq.n	8002358 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	b29b      	uxth	r3, r3
 8002326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800232a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	441a      	add	r2, r3
 8002340:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800234c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002354:	b29b      	uxth	r3, r3
 8002356:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800235e:	2b01      	cmp	r3, #1
 8002360:	f040 8286 	bne.w	8002870 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800236c:	441a      	add	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800237a:	441a      	add	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	6a1a      	ldr	r2, [r3, #32]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	429a      	cmp	r2, r3
 800238a:	d309      	bcc.n	80023a0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002398:	1ad2      	subs	r2, r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	621a      	str	r2, [r3, #32]
 800239e:	e015      	b.n	80023cc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80023a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023b6:	e009      	b.n	80023cc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2200      	movs	r2, #0
 80023ca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	785b      	ldrb	r3, [r3, #1]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d155      	bne.n	8002480 <HAL_PCD_EP_DB_Transmit+0x35a>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e8:	4413      	add	r3, r2
 80023ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	011a      	lsls	r2, r3, #4
 80023f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f4:	4413      	add	r3, r2
 80023f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
 80023fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d112      	bne.n	8002428 <HAL_PCD_EP_DB_Transmit+0x302>
 8002402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800240c:	b29a      	uxth	r2, r3
 800240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002410:	801a      	strh	r2, [r3, #0]
 8002412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800241c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002420:	b29a      	uxth	r2, r3
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	801a      	strh	r2, [r3, #0]
 8002426:	e047      	b.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x392>
 8002428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800242a:	2b3e      	cmp	r3, #62	; 0x3e
 800242c:	d811      	bhi.n	8002452 <HAL_PCD_EP_DB_Transmit+0x32c>
 800242e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002430:	085b      	lsrs	r3, r3, #1
 8002432:	64bb      	str	r3, [r7, #72]	; 0x48
 8002434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <HAL_PCD_EP_DB_Transmit+0x31e>
 800243e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002440:	3301      	adds	r3, #1
 8002442:	64bb      	str	r3, [r7, #72]	; 0x48
 8002444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002446:	b29b      	uxth	r3, r3
 8002448:	029b      	lsls	r3, r3, #10
 800244a:	b29a      	uxth	r2, r3
 800244c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244e:	801a      	strh	r2, [r3, #0]
 8002450:	e032      	b.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x392>
 8002452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	64bb      	str	r3, [r7, #72]	; 0x48
 8002458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <HAL_PCD_EP_DB_Transmit+0x342>
 8002462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002464:	3b01      	subs	r3, #1
 8002466:	64bb      	str	r3, [r7, #72]	; 0x48
 8002468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800246a:	b29b      	uxth	r3, r3
 800246c:	029b      	lsls	r3, r3, #10
 800246e:	b29b      	uxth	r3, r3
 8002470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002478:	b29a      	uxth	r2, r3
 800247a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247c:	801a      	strh	r2, [r3, #0]
 800247e:	e01b      	b.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x392>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	785b      	ldrb	r3, [r3, #1]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d117      	bne.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x392>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	643b      	str	r3, [r7, #64]	; 0x40
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002496:	b29b      	uxth	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800249c:	4413      	add	r3, r2
 800249e:	643b      	str	r3, [r7, #64]	; 0x40
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	011a      	lsls	r2, r3, #4
 80024a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a8:	4413      	add	r3, r2
 80024aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024b6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	6959      	ldr	r1, [r3, #20]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	891a      	ldrh	r2, [r3, #8]
 80024c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	f003 fe24 	bl	8006114 <USB_WritePMA>
 80024cc:	e1d0      	b.n	8002870 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	3306      	adds	r3, #6
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002502:	429a      	cmp	r2, r3
 8002504:	d307      	bcc.n	8002516 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800250e:	1ad2      	subs	r2, r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	619a      	str	r2, [r3, #24]
 8002514:	e002      	b.n	800251c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	f040 80c4 	bne.w	80026ae <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	785b      	ldrb	r3, [r3, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d126      	bne.n	800257c <HAL_PCD_EP_DB_Transmit+0x456>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253c:	b29b      	uxth	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002542:	4413      	add	r3, r2
 8002544:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	011a      	lsls	r2, r3, #4
 800254c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254e:	4413      	add	r3, r2
 8002550:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002554:	66bb      	str	r3, [r7, #104]	; 0x68
 8002556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002560:	b29a      	uxth	r2, r3
 8002562:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002574:	b29a      	uxth	r2, r3
 8002576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	e01a      	b.n	80025b2 <HAL_PCD_EP_DB_Transmit+0x48c>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d116      	bne.n	80025b2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	677b      	str	r3, [r7, #116]	; 0x74
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002598:	4413      	add	r3, r2
 800259a:	677b      	str	r3, [r7, #116]	; 0x74
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	011a      	lsls	r2, r3, #4
 80025a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a4:	4413      	add	r3, r2
 80025a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025aa:	673b      	str	r3, [r7, #112]	; 0x70
 80025ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ae:	2200      	movs	r2, #0
 80025b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	785b      	ldrb	r3, [r3, #1]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d12f      	bne.n	8002620 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025d8:	4413      	add	r3, r2
 80025da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	011a      	lsls	r2, r3, #4
 80025e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025e8:	4413      	add	r3, r2
 80025ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025fe:	b29a      	uxth	r2, r3
 8002600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002604:	801a      	strh	r2, [r3, #0]
 8002606:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002616:	b29a      	uxth	r2, r3
 8002618:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	e017      	b.n	8002650 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d113      	bne.n	8002650 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002630:	b29b      	uxth	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002636:	4413      	add	r3, r2
 8002638:	67bb      	str	r3, [r7, #120]	; 0x78
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	011a      	lsls	r2, r3, #4
 8002640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002642:	4413      	add	r3, r2
 8002644:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002648:	67fb      	str	r3, [r7, #124]	; 0x7c
 800264a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800264c:	2200      	movs	r2, #0
 800264e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f006 fd41 	bl	80090de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002662:	2b00      	cmp	r3, #0
 8002664:	f040 8104 	bne.w	8002870 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	441a      	add	r2, r3
 8002694:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800269c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	8013      	strh	r3, [r2, #0]
 80026ac:	e0e0      	b.n	8002870 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d121      	bne.n	80026fc <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	441a      	add	r2, r3
 80026e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002702:	2b01      	cmp	r3, #1
 8002704:	f040 80b4 	bne.w	8002870 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002710:	441a      	add	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800271e:	441a      	add	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	6a1a      	ldr	r2, [r3, #32]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	429a      	cmp	r2, r3
 800272e:	d309      	bcc.n	8002744 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	6a1a      	ldr	r2, [r3, #32]
 800273a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273c:	1ad2      	subs	r2, r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	621a      	str	r2, [r3, #32]
 8002742:	e015      	b.n	8002770 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d107      	bne.n	800275c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800274c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002750:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800275a:	e009      	b.n	8002770 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2200      	movs	r2, #0
 8002766:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	667b      	str	r3, [r7, #100]	; 0x64
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	785b      	ldrb	r3, [r3, #1]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d155      	bne.n	800282a <HAL_PCD_EP_DB_Transmit+0x704>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800278c:	b29b      	uxth	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002792:	4413      	add	r3, r2
 8002794:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	011a      	lsls	r2, r3, #4
 800279c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800279e:	4413      	add	r3, r2
 80027a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80027a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d112      	bne.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80027ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ba:	801a      	strh	r2, [r3, #0]
 80027bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ce:	801a      	strh	r2, [r3, #0]
 80027d0:	e044      	b.n	800285c <HAL_PCD_EP_DB_Transmit+0x736>
 80027d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d4:	2b3e      	cmp	r3, #62	; 0x3e
 80027d6:	d811      	bhi.n	80027fc <HAL_PCD_EP_DB_Transmit+0x6d6>
 80027d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	657b      	str	r3, [r7, #84]	; 0x54
 80027de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <HAL_PCD_EP_DB_Transmit+0x6c8>
 80027e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ea:	3301      	adds	r3, #1
 80027ec:	657b      	str	r3, [r7, #84]	; 0x54
 80027ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	029b      	lsls	r3, r3, #10
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f8:	801a      	strh	r2, [r3, #0]
 80027fa:	e02f      	b.n	800285c <HAL_PCD_EP_DB_Transmit+0x736>
 80027fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	657b      	str	r3, [r7, #84]	; 0x54
 8002802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800280c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280e:	3b01      	subs	r3, #1
 8002810:	657b      	str	r3, [r7, #84]	; 0x54
 8002812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002814:	b29b      	uxth	r3, r3
 8002816:	029b      	lsls	r3, r3, #10
 8002818:	b29b      	uxth	r3, r3
 800281a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800281e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002822:	b29a      	uxth	r2, r3
 8002824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002826:	801a      	strh	r2, [r3, #0]
 8002828:	e018      	b.n	800285c <HAL_PCD_EP_DB_Transmit+0x736>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	785b      	ldrb	r3, [r3, #1]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d114      	bne.n	800285c <HAL_PCD_EP_DB_Transmit+0x736>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283a:	b29b      	uxth	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002840:	4413      	add	r3, r2
 8002842:	667b      	str	r3, [r7, #100]	; 0x64
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	011a      	lsls	r2, r3, #4
 800284a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800284c:	4413      	add	r3, r2
 800284e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002852:	663b      	str	r3, [r7, #96]	; 0x60
 8002854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002856:	b29a      	uxth	r2, r3
 8002858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800285a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	6959      	ldr	r1, [r3, #20]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	895a      	ldrh	r2, [r3, #10]
 8002868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800286a:	b29b      	uxth	r3, r3
 800286c:	f003 fc52 	bl	8006114 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800288a:	823b      	strh	r3, [r7, #16]
 800288c:	8a3b      	ldrh	r3, [r7, #16]
 800288e:	f083 0310 	eor.w	r3, r3, #16
 8002892:	823b      	strh	r3, [r7, #16]
 8002894:	8a3b      	ldrh	r3, [r7, #16]
 8002896:	f083 0320 	eor.w	r3, r3, #32
 800289a:	823b      	strh	r3, [r7, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	441a      	add	r2, r3
 80028aa:	8a3b      	ldrh	r3, [r7, #16]
 80028ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028bc:	b29b      	uxth	r3, r3
 80028be:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3788      	adds	r7, #136	; 0x88
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b087      	sub	sp, #28
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	817b      	strh	r3, [r7, #10]
 80028d8:	4613      	mov	r3, r2
 80028da:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028dc:	897b      	ldrh	r3, [r7, #10]
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00b      	beq.n	8002900 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e8:	897b      	ldrh	r3, [r7, #10]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e009      	b.n	8002914 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002900:	897a      	ldrh	r2, [r7, #10]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4413      	add	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002914:	893b      	ldrh	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d107      	bne.n	800292a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2200      	movs	r2, #0
 800291e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	b29a      	uxth	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	80da      	strh	r2, [r3, #6]
 8002928:	e00b      	b.n	8002942 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2201      	movs	r2, #1
 800292e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	b29a      	uxth	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	0c1b      	lsrs	r3, r3, #16
 800293c:	b29a      	uxth	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
	...

08002950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e272      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 8087 	beq.w	8002a7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002970:	4b92      	ldr	r3, [pc, #584]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	2b04      	cmp	r3, #4
 800297a:	d00c      	beq.n	8002996 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800297c:	4b8f      	ldr	r3, [pc, #572]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b08      	cmp	r3, #8
 8002986:	d112      	bne.n	80029ae <HAL_RCC_OscConfig+0x5e>
 8002988:	4b8c      	ldr	r3, [pc, #560]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002994:	d10b      	bne.n	80029ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002996:	4b89      	ldr	r3, [pc, #548]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d06c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x12c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d168      	bne.n	8002a7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e24c      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x76>
 80029b8:	4b80      	ldr	r3, [pc, #512]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a7f      	ldr	r2, [pc, #508]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	e02e      	b.n	8002a24 <HAL_RCC_OscConfig+0xd4>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x98>
 80029ce:	4b7b      	ldr	r3, [pc, #492]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a7a      	ldr	r2, [pc, #488]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b78      	ldr	r3, [pc, #480]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a77      	ldr	r2, [pc, #476]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e01d      	b.n	8002a24 <HAL_RCC_OscConfig+0xd4>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0xbc>
 80029f2:	4b72      	ldr	r3, [pc, #456]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a71      	ldr	r2, [pc, #452]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b6f      	ldr	r3, [pc, #444]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a6e      	ldr	r2, [pc, #440]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0xd4>
 8002a0c:	4b6b      	ldr	r3, [pc, #428]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a6a      	ldr	r2, [pc, #424]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b68      	ldr	r3, [pc, #416]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a67      	ldr	r2, [pc, #412]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe f808 	bl	8000a40 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a34:	f7fe f804 	bl	8000a40 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e200      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b5d      	ldr	r3, [pc, #372]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0xe4>
 8002a52:	e014      	b.n	8002a7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fd fff4 	bl	8000a40 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7fd fff0 	bl	8000a40 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	; 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e1ec      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x10c>
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d063      	beq.n	8002b52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a8a:	4b4c      	ldr	r3, [pc, #304]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a96:	4b49      	ldr	r3, [pc, #292]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d11c      	bne.n	8002adc <HAL_RCC_OscConfig+0x18c>
 8002aa2:	4b46      	ldr	r3, [pc, #280]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d116      	bne.n	8002adc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	4b43      	ldr	r3, [pc, #268]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x176>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e1c0      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4939      	ldr	r1, [pc, #228]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	e03a      	b.n	8002b52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae4:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fd ffa9 	bl	8000a40 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af2:	f7fd ffa5 	bl	8000a40 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e1a1      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	4b2d      	ldr	r3, [pc, #180]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b10:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4927      	ldr	r1, [pc, #156]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
 8002b24:	e015      	b.n	8002b52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b26:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fd ff88 	bl	8000a40 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b34:	f7fd ff84 	bl	8000a40 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e180      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d03a      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d019      	beq.n	8002b9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b66:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6c:	f7fd ff68 	bl	8000a40 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b74:	f7fd ff64 	bl	8000a40 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e160      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_RCC_OscConfig+0x26c>)
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b92:	2001      	movs	r0, #1
 8002b94:	f000 faa6 	bl	80030e4 <RCC_Delay>
 8002b98:	e01c      	b.n	8002bd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba0:	f7fd ff4e 	bl	8000a40 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba6:	e00f      	b.n	8002bc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7fd ff4a 	bl	8000a40 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d908      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e146      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	42420000 	.word	0x42420000
 8002bc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc8:	4b92      	ldr	r3, [pc, #584]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e9      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80a6 	beq.w	8002d2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be6:	4b8b      	ldr	r3, [pc, #556]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10d      	bne.n	8002c0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b88      	ldr	r3, [pc, #544]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4a87      	ldr	r2, [pc, #540]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	61d3      	str	r3, [r2, #28]
 8002bfe:	4b85      	ldr	r3, [pc, #532]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0e:	4b82      	ldr	r3, [pc, #520]	; (8002e18 <HAL_RCC_OscConfig+0x4c8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d118      	bne.n	8002c4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1a:	4b7f      	ldr	r3, [pc, #508]	; (8002e18 <HAL_RCC_OscConfig+0x4c8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7e      	ldr	r2, [pc, #504]	; (8002e18 <HAL_RCC_OscConfig+0x4c8>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c26:	f7fd ff0b 	bl	8000a40 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2e:	f7fd ff07 	bl	8000a40 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b64      	cmp	r3, #100	; 0x64
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e103      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c40:	4b75      	ldr	r3, [pc, #468]	; (8002e18 <HAL_RCC_OscConfig+0x4c8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x312>
 8002c54:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4a6e      	ldr	r2, [pc, #440]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6213      	str	r3, [r2, #32]
 8002c60:	e02d      	b.n	8002cbe <HAL_RCC_OscConfig+0x36e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x334>
 8002c6a:	4b6a      	ldr	r3, [pc, #424]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4a69      	ldr	r2, [pc, #420]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	6213      	str	r3, [r2, #32]
 8002c76:	4b67      	ldr	r3, [pc, #412]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4a66      	ldr	r2, [pc, #408]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	6213      	str	r3, [r2, #32]
 8002c82:	e01c      	b.n	8002cbe <HAL_RCC_OscConfig+0x36e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b05      	cmp	r3, #5
 8002c8a:	d10c      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x356>
 8002c8c:	4b61      	ldr	r3, [pc, #388]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	4a60      	ldr	r2, [pc, #384]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	6213      	str	r3, [r2, #32]
 8002c98:	4b5e      	ldr	r3, [pc, #376]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a5d      	ldr	r2, [pc, #372]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	e00b      	b.n	8002cbe <HAL_RCC_OscConfig+0x36e>
 8002ca6:	4b5b      	ldr	r3, [pc, #364]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4a5a      	ldr	r2, [pc, #360]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	6213      	str	r3, [r2, #32]
 8002cb2:	4b58      	ldr	r3, [pc, #352]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4a57      	ldr	r2, [pc, #348]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	f023 0304 	bic.w	r3, r3, #4
 8002cbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d015      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7fd febb 	bl	8000a40 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fd feb7 	bl	8000a40 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0b1      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce4:	4b4b      	ldr	r3, [pc, #300]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ee      	beq.n	8002cce <HAL_RCC_OscConfig+0x37e>
 8002cf0:	e014      	b.n	8002d1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf2:	f7fd fea5 	bl	8000a40 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fd fea1 	bl	8000a40 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e09b      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d10:	4b40      	ldr	r3, [pc, #256]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ee      	bne.n	8002cfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d105      	bne.n	8002d2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d22:	4b3c      	ldr	r3, [pc, #240]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	4a3b      	ldr	r2, [pc, #236]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8087 	beq.w	8002e46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d38:	4b36      	ldr	r3, [pc, #216]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d061      	beq.n	8002e08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d146      	bne.n	8002dda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4c:	4b33      	ldr	r3, [pc, #204]	; (8002e1c <HAL_RCC_OscConfig+0x4cc>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7fd fe75 	bl	8000a40 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fd fe71 	bl	8000a40 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e06d      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6c:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f0      	bne.n	8002d5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d80:	d108      	bne.n	8002d94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d82:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	4921      	ldr	r1, [pc, #132]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d94:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a19      	ldr	r1, [r3, #32]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	430b      	orrs	r3, r1
 8002da6:	491b      	ldr	r1, [pc, #108]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <HAL_RCC_OscConfig+0x4cc>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fd fe45 	bl	8000a40 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fd fe41 	bl	8000a40 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e03d      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dcc:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x46a>
 8002dd8:	e035      	b.n	8002e46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <HAL_RCC_OscConfig+0x4cc>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fd fe2e 	bl	8000a40 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fd fe2a 	bl	8000a40 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e026      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x498>
 8002e06:	e01e      	b.n	8002e46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e019      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_OscConfig+0x500>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d001      	beq.n	8002e46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40021000 	.word	0x40021000

08002e54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0d0      	b.n	800300a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b6a      	ldr	r3, [pc, #424]	; (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d910      	bls.n	8002e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b67      	ldr	r3, [pc, #412]	; (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 0207 	bic.w	r2, r3, #7
 8002e7e:	4965      	ldr	r1, [pc, #404]	; (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b63      	ldr	r3, [pc, #396]	; (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0b8      	b.n	800300a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d020      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb0:	4b59      	ldr	r3, [pc, #356]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a58      	ldr	r2, [pc, #352]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec8:	4b53      	ldr	r3, [pc, #332]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a52      	ldr	r2, [pc, #328]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002ece:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ed2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed4:	4b50      	ldr	r3, [pc, #320]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	494d      	ldr	r1, [pc, #308]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d040      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	4b47      	ldr	r3, [pc, #284]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d115      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e07f      	b.n	800300a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	4b41      	ldr	r3, [pc, #260]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e073      	b.n	800300a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f22:	4b3d      	ldr	r3, [pc, #244]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e06b      	b.n	800300a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f32:	4b39      	ldr	r3, [pc, #228]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f023 0203 	bic.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4936      	ldr	r1, [pc, #216]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f44:	f7fd fd7c 	bl	8000a40 <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4c:	f7fd fd78 	bl	8000a40 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e053      	b.n	800300a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	4b2d      	ldr	r3, [pc, #180]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 020c 	and.w	r2, r3, #12
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d1eb      	bne.n	8002f4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f74:	4b27      	ldr	r3, [pc, #156]	; (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d210      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 0207 	bic.w	r2, r3, #7
 8002f8a:	4922      	ldr	r1, [pc, #136]	; (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e032      	b.n	800300a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4916      	ldr	r1, [pc, #88]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	490e      	ldr	r1, [pc, #56]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fe2:	f000 f821 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	490a      	ldr	r1, [pc, #40]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff4:	5ccb      	ldrb	r3, [r1, r3]
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	4a09      	ldr	r2, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x1cc>)
 8002ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_RCC_ClockConfig+0x1d0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd fcda 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40022000 	.word	0x40022000
 8003018:	40021000 	.word	0x40021000
 800301c:	08009684 	.word	0x08009684
 8003020:	20000000 	.word	0x20000000
 8003024:	20000004 	.word	0x20000004

08003028 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003028:	b490      	push	{r4, r7}
 800302a:	b08a      	sub	sp, #40	; 0x28
 800302c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800302e:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003030:	1d3c      	adds	r4, r7, #4
 8003032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003034:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003038:	f240 2301 	movw	r3, #513	; 0x201
 800303c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	2300      	movs	r3, #0
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003052:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b04      	cmp	r3, #4
 8003060:	d002      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x40>
 8003062:	2b08      	cmp	r3, #8
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x46>
 8003066:	e02b      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003068:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800306a:	623b      	str	r3, [r7, #32]
      break;
 800306c:	e02b      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	0c9b      	lsrs	r3, r3, #18
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	3328      	adds	r3, #40	; 0x28
 8003078:	443b      	add	r3, r7
 800307a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800307e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d012      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	0c5b      	lsrs	r3, r3, #17
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	3328      	adds	r3, #40	; 0x28
 8003096:	443b      	add	r3, r7
 8003098:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800309c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	4a0e      	ldr	r2, [pc, #56]	; (80030dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80030a2:	fb03 f202 	mul.w	r2, r3, r2
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
 80030ae:	e004      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	4a0b      	ldr	r2, [pc, #44]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030b4:	fb02 f303 	mul.w	r3, r2, r3
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	623b      	str	r3, [r7, #32]
      break;
 80030be:	e002      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80030c2:	623b      	str	r3, [r7, #32]
      break;
 80030c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c6:	6a3b      	ldr	r3, [r7, #32]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3728      	adds	r7, #40	; 0x28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc90      	pop	{r4, r7}
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	08009624 	.word	0x08009624
 80030d8:	40021000 	.word	0x40021000
 80030dc:	007a1200 	.word	0x007a1200
 80030e0:	003d0900 	.word	0x003d0900

080030e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <RCC_Delay+0x34>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0a      	ldr	r2, [pc, #40]	; (800311c <RCC_Delay+0x38>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	0a5b      	lsrs	r3, r3, #9
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003100:	bf00      	nop
  }
  while (Delay --);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1e5a      	subs	r2, r3, #1
 8003106:	60fa      	str	r2, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f9      	bne.n	8003100 <RCC_Delay+0x1c>
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr
 8003118:	20000000 	.word	0x20000000
 800311c:	10624dd3 	.word	0x10624dd3

08003120 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d07d      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800313c:	2300      	movs	r3, #0
 800313e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003140:	4b4f      	ldr	r3, [pc, #316]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10d      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314c:	4b4c      	ldr	r3, [pc, #304]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	4a4b      	ldr	r2, [pc, #300]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003156:	61d3      	str	r3, [r2, #28]
 8003158:	4b49      	ldr	r3, [pc, #292]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003164:	2301      	movs	r3, #1
 8003166:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	4b46      	ldr	r3, [pc, #280]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d118      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003174:	4b43      	ldr	r3, [pc, #268]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a42      	ldr	r2, [pc, #264]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800317a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003180:	f7fd fc5e 	bl	8000a40 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003186:	e008      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003188:	f7fd fc5a 	bl	8000a40 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e06d      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319a:	4b3a      	ldr	r3, [pc, #232]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031a6:	4b36      	ldr	r3, [pc, #216]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d02e      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d027      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031c4:	4b2e      	ldr	r3, [pc, #184]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ce:	4b2e      	ldr	r3, [pc, #184]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031d4:	4b2c      	ldr	r3, [pc, #176]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031da:	4a29      	ldr	r2, [pc, #164]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d014      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fd fc29 	bl	8000a40 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f0:	e00a      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fd fc25 	bl	8000a40 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003200:	4293      	cmp	r3, r2
 8003202:	d901      	bls.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e036      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0ee      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4917      	ldr	r1, [pc, #92]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003222:	4313      	orrs	r3, r2
 8003224:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003226:	7dfb      	ldrb	r3, [r7, #23]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d105      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	4a13      	ldr	r2, [pc, #76]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003236:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003244:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	490b      	ldr	r1, [pc, #44]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	d008      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	4904      	ldr	r1, [pc, #16]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	40007000 	.word	0x40007000
 8003288:	42420440 	.word	0x42420440

0800328c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e076      	b.n	800338c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d108      	bne.n	80032b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ae:	d009      	beq.n	80032c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	61da      	str	r2, [r3, #28]
 80032b6:	e005      	b.n	80032c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fd f9e8 	bl	80006b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003348:	ea42 0103 	orr.w	r1, r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	0c1a      	lsrs	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f002 0204 	and.w	r2, r2, #4
 800336a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800337a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e093      	b.n	80034d0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7fd f9ff 	bl	80007c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2202      	movs	r2, #2
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033d8:	f023 0307 	bic.w	r3, r3, #7
 80033dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3304      	adds	r3, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f000 f875 	bl	80034d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003416:	f023 0303 	bic.w	r3, r3, #3
 800341a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	021b      	lsls	r3, r3, #8
 8003426:	4313      	orrs	r3, r2
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003434:	f023 030c 	bic.w	r3, r3, #12
 8003438:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003440:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003444:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	4313      	orrs	r3, r2
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	011a      	lsls	r2, r3, #4
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	031b      	lsls	r3, r3, #12
 8003464:	4313      	orrs	r3, r2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003472:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	4313      	orrs	r3, r2
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a33      	ldr	r2, [pc, #204]	; (80035b8 <TIM_Base_SetConfig+0xe0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a32      	ldr	r2, [pc, #200]	; (80035bc <TIM_Base_SetConfig+0xe4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00f      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fe:	d00b      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a2f      	ldr	r2, [pc, #188]	; (80035c0 <TIM_Base_SetConfig+0xe8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d007      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a2e      	ldr	r2, [pc, #184]	; (80035c4 <TIM_Base_SetConfig+0xec>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a2d      	ldr	r2, [pc, #180]	; (80035c8 <TIM_Base_SetConfig+0xf0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d108      	bne.n	800352a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a22      	ldr	r2, [pc, #136]	; (80035b8 <TIM_Base_SetConfig+0xe0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <TIM_Base_SetConfig+0x82>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a21      	ldr	r2, [pc, #132]	; (80035bc <TIM_Base_SetConfig+0xe4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00f      	beq.n	800355a <TIM_Base_SetConfig+0x82>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003540:	d00b      	beq.n	800355a <TIM_Base_SetConfig+0x82>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a1e      	ldr	r2, [pc, #120]	; (80035c0 <TIM_Base_SetConfig+0xe8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d007      	beq.n	800355a <TIM_Base_SetConfig+0x82>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <TIM_Base_SetConfig+0xec>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d003      	beq.n	800355a <TIM_Base_SetConfig+0x82>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a1c      	ldr	r2, [pc, #112]	; (80035c8 <TIM_Base_SetConfig+0xf0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d108      	bne.n	800356c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a09      	ldr	r2, [pc, #36]	; (80035b8 <TIM_Base_SetConfig+0xe0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_Base_SetConfig+0xc8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a08      	ldr	r2, [pc, #32]	; (80035bc <TIM_Base_SetConfig+0xe4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d103      	bne.n	80035a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	615a      	str	r2, [r3, #20]
}
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40013400 	.word	0x40013400
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40000800 	.word	0x40000800
 80035c8:	40000c00 	.word	0x40000c00

080035cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e050      	b.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1b      	ldr	r2, [pc, #108]	; (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d018      	beq.n	800365a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a19      	ldr	r2, [pc, #100]	; (8003694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d013      	beq.n	800365a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d00e      	beq.n	800365a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a15      	ldr	r2, [pc, #84]	; (8003698 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d009      	beq.n	800365a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a14      	ldr	r2, [pc, #80]	; (800369c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d004      	beq.n	800365a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d10c      	bne.n	8003674 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	4313      	orrs	r3, r2
 800366a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40013400 	.word	0x40013400
 8003698:	40000400 	.word	0x40000400
 800369c:	40000800 	.word	0x40000800
 80036a0:	40000c00 	.word	0x40000c00

080036a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80036a4:	b084      	sub	sp, #16
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	f107 0014 	add.w	r0, r7, #20
 80036b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	b004      	add	sp, #16
 80036c2:	4770      	bx	lr

080036c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80036d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80036d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	b29a      	uxth	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80036f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80036fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	b29b      	uxth	r3, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	b29b      	uxth	r3, r3
 800370e:	4013      	ands	r3, r2
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800373c:	b084      	sub	sp, #16
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	f107 0014 	add.w	r0, r7, #20
 800374a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	b004      	add	sp, #16
 800377a:	4770      	bx	lr

0800377c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800377c:	b480      	push	{r7}
 800377e:	b09b      	sub	sp, #108	; 0x6c
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	b29b      	uxth	r3, r3
 800379a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800379e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	78db      	ldrb	r3, [r3, #3]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d81f      	bhi.n	80037ee <USB_ActivateEndpoint+0x72>
 80037ae:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <USB_ActivateEndpoint+0x38>)
 80037b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037e1 	.word	0x080037e1
 80037bc:	080037f7 	.word	0x080037f7
 80037c0:	080037d3 	.word	0x080037d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80037c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80037c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80037d0:	e012      	b.n	80037f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80037d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80037d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80037da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80037de:	e00b      	b.n	80037f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80037e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80037e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80037ec:	e004      	b.n	80037f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80037f4:	e000      	b.n	80037f8 <USB_ActivateEndpoint+0x7c>
      break;
 80037f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	441a      	add	r2, r3
 8003802:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800380a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800380e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003816:	b29b      	uxth	r3, r3
 8003818:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003830:	b29a      	uxth	r2, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	4313      	orrs	r3, r2
 800383a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	441a      	add	r2, r3
 8003848:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800384c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800385c:	b29b      	uxth	r3, r3
 800385e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	7b1b      	ldrb	r3, [r3, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	f040 8149 	bne.w	8003afc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8084 	beq.w	800397c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800387e:	b29b      	uxth	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	4413      	add	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	011a      	lsls	r2, r3, #4
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	88db      	ldrh	r3, [r3, #6]
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	b29b      	uxth	r3, r3
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	81fb      	strh	r3, [r7, #14]
 80038b6:	89fb      	ldrh	r3, [r7, #14]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01b      	beq.n	80038f8 <USB_ActivateEndpoint+0x17c>
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d6:	81bb      	strh	r3, [r7, #12]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	89bb      	ldrh	r3, [r7, #12]
 80038e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	78db      	ldrb	r3, [r3, #3]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d020      	beq.n	8003942 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	b29b      	uxth	r3, r3
 800390e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003916:	813b      	strh	r3, [r7, #8]
 8003918:	893b      	ldrh	r3, [r7, #8]
 800391a:	f083 0320 	eor.w	r3, r3, #32
 800391e:	813b      	strh	r3, [r7, #8]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	441a      	add	r2, r3
 800392a:	893b      	ldrh	r3, [r7, #8]
 800392c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393c:	b29b      	uxth	r3, r3
 800393e:	8013      	strh	r3, [r2, #0]
 8003940:	e27f      	b.n	8003e42 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	b29b      	uxth	r3, r3
 8003950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003958:	817b      	strh	r3, [r7, #10]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	441a      	add	r2, r3
 8003964:	897b      	ldrh	r3, [r7, #10]
 8003966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800396a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800396e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003976:	b29b      	uxth	r3, r3
 8003978:	8013      	strh	r3, [r2, #0]
 800397a:	e262      	b.n	8003e42 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003986:	b29b      	uxth	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398c:	4413      	add	r3, r2
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	011a      	lsls	r2, r3, #4
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	4413      	add	r3, r2
 800399a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	88db      	ldrh	r3, [r3, #6]
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	4413      	add	r3, r2
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	011a      	lsls	r2, r3, #4
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	4413      	add	r3, r2
 80039ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039d2:	623b      	str	r3, [r7, #32]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d112      	bne.n	8003a02 <USB_ActivateEndpoint+0x286>
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	801a      	strh	r2, [r3, #0]
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	e02f      	b.n	8003a62 <USB_ActivateEndpoint+0x2e6>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b3e      	cmp	r3, #62	; 0x3e
 8003a08:	d813      	bhi.n	8003a32 <USB_ActivateEndpoint+0x2b6>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	085b      	lsrs	r3, r3, #1
 8003a10:	663b      	str	r3, [r7, #96]	; 0x60
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <USB_ActivateEndpoint+0x2a8>
 8003a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a20:	3301      	adds	r3, #1
 8003a22:	663b      	str	r3, [r7, #96]	; 0x60
 8003a24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	029b      	lsls	r3, r3, #10
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	801a      	strh	r2, [r3, #0]
 8003a30:	e017      	b.n	8003a62 <USB_ActivateEndpoint+0x2e6>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	663b      	str	r3, [r7, #96]	; 0x60
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d102      	bne.n	8003a4c <USB_ActivateEndpoint+0x2d0>
 8003a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	663b      	str	r3, [r7, #96]	; 0x60
 8003a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	029b      	lsls	r3, r3, #10
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	83fb      	strh	r3, [r7, #30]
 8003a70:	8bfb      	ldrh	r3, [r7, #30]
 8003a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01b      	beq.n	8003ab2 <USB_ActivateEndpoint+0x336>
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a90:	83bb      	strh	r3, [r7, #28]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	441a      	add	r2, r3
 8003a9c:	8bbb      	ldrh	r3, [r7, #28]
 8003a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac8:	837b      	strh	r3, [r7, #26]
 8003aca:	8b7b      	ldrh	r3, [r7, #26]
 8003acc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ad0:	837b      	strh	r3, [r7, #26]
 8003ad2:	8b7b      	ldrh	r3, [r7, #26]
 8003ad4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ad8:	837b      	strh	r3, [r7, #26]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	441a      	add	r2, r3
 8003ae4:	8b7b      	ldrh	r3, [r7, #26]
 8003ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	8013      	strh	r3, [r2, #0]
 8003afa:	e1a2      	b.n	8003e42 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b12:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	441a      	add	r2, r3
 8003b20:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b2c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b48:	4413      	add	r3, r2
 8003b4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	011a      	lsls	r2, r3, #4
 8003b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	891b      	ldrh	r3, [r3, #8]
 8003b60:	085b      	lsrs	r3, r3, #1
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b6a:	801a      	strh	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7c:	4413      	add	r3, r2
 8003b7e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	011a      	lsls	r2, r3, #4
 8003b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	895b      	ldrh	r3, [r3, #10]
 8003b94:	085b      	lsrs	r3, r3, #1
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f040 8091 	bne.w	8003ccc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003bb8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d01b      	beq.n	8003bfa <USB_ActivateEndpoint+0x47e>
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	441a      	add	r2, r3
 8003be4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	873b      	strh	r3, [r7, #56]	; 0x38
 8003c08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01b      	beq.n	8003c4a <USB_ActivateEndpoint+0x4ce>
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c28:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	441a      	add	r2, r3
 8003c34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c60:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003c62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003c64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c68:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003c6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003c6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c70:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	441a      	add	r2, r3
 8003c7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ca8:	867b      	strh	r3, [r7, #50]	; 0x32
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	441a      	add	r2, r3
 8003cb4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	8013      	strh	r3, [r2, #0]
 8003cca:	e0ba      	b.n	8003e42 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003cdc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01d      	beq.n	8003d24 <USB_ActivateEndpoint+0x5a8>
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	441a      	add	r2, r3
 8003d0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003d34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01d      	beq.n	8003d7c <USB_ActivateEndpoint+0x600>
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	441a      	add	r2, r3
 8003d64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	78db      	ldrb	r3, [r3, #3]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d024      	beq.n	8003dce <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003d9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003da2:	f083 0320 	eor.w	r3, r3, #32
 8003da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	441a      	add	r2, r3
 8003db4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	8013      	strh	r3, [r2, #0]
 8003dcc:	e01d      	b.n	8003e0a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	441a      	add	r2, r3
 8003df2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e20:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	441a      	add	r2, r3
 8003e2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003e42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	376c      	adds	r7, #108	; 0x6c
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b08d      	sub	sp, #52	; 0x34
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	7b1b      	ldrb	r3, [r3, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 808e 	bne.w	8003f80 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	785b      	ldrb	r3, [r3, #1]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d044      	beq.n	8003ef6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	81bb      	strh	r3, [r7, #12]
 8003e7a:	89bb      	ldrh	r3, [r7, #12]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01b      	beq.n	8003ebc <USB_DeactivateEndpoint+0x6c>
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	817b      	strh	r3, [r7, #10]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	441a      	add	r2, r3
 8003ea6:	897b      	ldrh	r3, [r7, #10]
 8003ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed2:	813b      	strh	r3, [r7, #8]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	441a      	add	r2, r3
 8003ede:	893b      	ldrh	r3, [r7, #8]
 8003ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	8013      	strh	r3, [r2, #0]
 8003ef4:	e192      	b.n	800421c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	827b      	strh	r3, [r7, #18]
 8003f04:	8a7b      	ldrh	r3, [r7, #18]
 8003f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01b      	beq.n	8003f46 <USB_DeactivateEndpoint+0xf6>
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f24:	823b      	strh	r3, [r7, #16]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	441a      	add	r2, r3
 8003f30:	8a3b      	ldrh	r3, [r7, #16]
 8003f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5c:	81fb      	strh	r3, [r7, #14]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	441a      	add	r2, r3
 8003f68:	89fb      	ldrh	r3, [r7, #14]
 8003f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	8013      	strh	r3, [r2, #0]
 8003f7e:	e14d      	b.n	800421c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	785b      	ldrb	r3, [r3, #1]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f040 80a5 	bne.w	80040d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	843b      	strh	r3, [r7, #32]
 8003f98:	8c3b      	ldrh	r3, [r7, #32]
 8003f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d01b      	beq.n	8003fda <USB_DeactivateEndpoint+0x18a>
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb8:	83fb      	strh	r3, [r7, #30]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	441a      	add	r2, r3
 8003fc4:	8bfb      	ldrh	r3, [r7, #30]
 8003fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	83bb      	strh	r3, [r7, #28]
 8003fe8:	8bbb      	ldrh	r3, [r7, #28]
 8003fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d01b      	beq.n	800402a <USB_DeactivateEndpoint+0x1da>
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004008:	837b      	strh	r3, [r7, #26]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	441a      	add	r2, r3
 8004014:	8b7b      	ldrh	r3, [r7, #26]
 8004016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800401a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800401e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004022:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004026:	b29b      	uxth	r3, r3
 8004028:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004040:	833b      	strh	r3, [r7, #24]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	441a      	add	r2, r3
 800404c:	8b3b      	ldrh	r3, [r7, #24]
 800404e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800405a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800405e:	b29b      	uxth	r3, r3
 8004060:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004078:	82fb      	strh	r3, [r7, #22]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	441a      	add	r2, r3
 8004084:	8afb      	ldrh	r3, [r7, #22]
 8004086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800408a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800408e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004096:	b29b      	uxth	r3, r3
 8004098:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b0:	82bb      	strh	r3, [r7, #20]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	441a      	add	r2, r3
 80040bc:	8abb      	ldrh	r3, [r7, #20]
 80040be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	8013      	strh	r3, [r2, #0]
 80040d2:	e0a3      	b.n	800421c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80040e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80040e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01b      	beq.n	8004124 <USB_DeactivateEndpoint+0x2d4>
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	441a      	add	r2, r3
 800410e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004118:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800411c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004120:	b29b      	uxth	r3, r3
 8004122:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004132:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01b      	beq.n	8004174 <USB_DeactivateEndpoint+0x324>
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	853b      	strh	r3, [r7, #40]	; 0x28
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	441a      	add	r2, r3
 800415e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800416c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004170:	b29b      	uxth	r3, r3
 8004172:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	441a      	add	r2, r3
 8004206:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800420c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004218:	b29b      	uxth	r3, r3
 800421a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3734      	adds	r7, #52	; 0x34
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b0cc      	sub	sp, #304	; 0x130
 800422c:	af00      	add	r7, sp, #0
 800422e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004236:	6018      	str	r0, [r3, #0]
 8004238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800423c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004240:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	785b      	ldrb	r3, [r3, #1]
 800424e:	2b01      	cmp	r3, #1
 8004250:	f041 817d 	bne.w	800554e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699a      	ldr	r2, [r3, #24]
 8004260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	429a      	cmp	r2, r3
 800426e:	d908      	bls.n	8004282 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004280:	e007      	b.n	8004292 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	7b1b      	ldrb	r3, [r3, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d152      	bne.n	8004348 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80042a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6959      	ldr	r1, [r3, #20]
 80042ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	88da      	ldrh	r2, [r3, #6]
 80042ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80042c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80042c8:	6800      	ldr	r0, [r0, #0]
 80042ca:	f001 ff23 	bl	8006114 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80042ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80042d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042da:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	4619      	mov	r1, r3
 80042f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80042fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004300:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004304:	6812      	ldr	r2, [r2, #0]
 8004306:	440a      	add	r2, r1
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800430e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	011a      	lsls	r2, r3, #4
 8004318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800431c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4413      	add	r3, r2
 8004324:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800432c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004336:	b29a      	uxth	r2, r3
 8004338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800433c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	801a      	strh	r2, [r3, #0]
 8004344:	f001 b8b5 	b.w	80054b2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800434c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	78db      	ldrb	r3, [r3, #3]
 8004354:	2b02      	cmp	r3, #2
 8004356:	f040 84c6 	bne.w	8004ce6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800435a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800435e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6a1a      	ldr	r2, [r3, #32]
 8004366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800436a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	429a      	cmp	r2, r3
 8004374:	f240 8443 	bls.w	8004bfe <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800437c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80043a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	441a      	add	r2, r3
 80043bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80043c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80043cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80043d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6a1a      	ldr	r2, [r3, #32]
 80043e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043e4:	1ad2      	subs	r2, r2, r3
 80043e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80043f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 823e 	beq.w	8004896 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800441a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800441e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004422:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004426:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	785b      	ldrb	r3, [r3, #1]
 800443a:	2b00      	cmp	r3, #0
 800443c:	f040 809a 	bne.w	8004574 <USB_EPStartXfer+0x34c>
 8004440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004448:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800444c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004458:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004462:	b29b      	uxth	r3, r3
 8004464:	4619      	mov	r1, r3
 8004466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800446a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800446e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004472:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	440a      	add	r2, r1
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	011a      	lsls	r2, r3, #4
 800448a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800448e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4413      	add	r3, r2
 8004496:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800449a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800449e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d122      	bne.n	80044f2 <USB_EPStartXfer+0x2ca>
 80044ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044be:	b29a      	uxth	r2, r3
 80044c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	801a      	strh	r2, [r3, #0]
 80044f0:	e079      	b.n	80045e6 <USB_EPStartXfer+0x3be>
 80044f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044f6:	2b3e      	cmp	r3, #62	; 0x3e
 80044f8:	d81b      	bhi.n	8004532 <USB_EPStartXfer+0x30a>
 80044fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d004      	beq.n	800451a <USB_EPStartXfer+0x2f2>
 8004510:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004514:	3301      	adds	r3, #1
 8004516:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800451a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800451e:	b29b      	uxth	r3, r3
 8004520:	029b      	lsls	r3, r3, #10
 8004522:	b29a      	uxth	r2, r3
 8004524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004528:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	801a      	strh	r2, [r3, #0]
 8004530:	e059      	b.n	80045e6 <USB_EPStartXfer+0x3be>
 8004532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800453c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	2b00      	cmp	r3, #0
 8004546:	d104      	bne.n	8004552 <USB_EPStartXfer+0x32a>
 8004548:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800454c:	3b01      	subs	r3, #1
 800454e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004552:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004556:	b29b      	uxth	r3, r3
 8004558:	029b      	lsls	r3, r3, #10
 800455a:	b29b      	uxth	r3, r3
 800455c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004564:	b29a      	uxth	r2, r3
 8004566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800456a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	e038      	b.n	80045e6 <USB_EPStartXfer+0x3be>
 8004574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004578:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	785b      	ldrb	r3, [r3, #1]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d130      	bne.n	80045e6 <USB_EPStartXfer+0x3be>
 8004584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004588:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	4619      	mov	r1, r3
 8004596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800459a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800459e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80045a2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	440a      	add	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	011a      	lsls	r2, r3, #4
 80045ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045be:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4413      	add	r3, r2
 80045c6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80045ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045d8:	b29a      	uxth	r2, r3
 80045da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80045e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	895b      	ldrh	r3, [r3, #10]
 80045f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6959      	ldr	r1, [r3, #20]
 8004602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004606:	b29b      	uxth	r3, r3
 8004608:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800460c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004610:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004614:	6800      	ldr	r0, [r0, #0]
 8004616:	f001 fd7d 	bl	8006114 <USB_WritePMA>
            ep->xfer_buff += len;
 800461a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800461e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695a      	ldr	r2, [r3, #20]
 8004626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800462a:	441a      	add	r2, r3
 800462c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800463c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6a1a      	ldr	r2, [r3, #32]
 8004644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	429a      	cmp	r2, r3
 8004652:	d90f      	bls.n	8004674 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004658:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6a1a      	ldr	r2, [r3, #32]
 8004660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004664:	1ad2      	subs	r2, r2, r3
 8004666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800466a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	621a      	str	r2, [r3, #32]
 8004672:	e00e      	b.n	8004692 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	785b      	ldrb	r3, [r3, #1]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f040 809a 	bne.w	80047d8 <USB_EPStartXfer+0x5b0>
 80046a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046b0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	4619      	mov	r1, r3
 80046ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046d6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	440a      	add	r2, r1
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	011a      	lsls	r2, r3, #4
 80046ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4413      	add	r3, r2
 80046fa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80046fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004702:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d122      	bne.n	8004756 <USB_EPStartXfer+0x52e>
 8004710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004714:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004722:	b29a      	uxth	r2, r3
 8004724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004728:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	801a      	strh	r2, [r3, #0]
 8004730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004734:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	b29b      	uxth	r3, r3
 800473e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004746:	b29a      	uxth	r2, r3
 8004748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800474c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	801a      	strh	r2, [r3, #0]
 8004754:	e083      	b.n	800485e <USB_EPStartXfer+0x636>
 8004756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800475a:	2b3e      	cmp	r3, #62	; 0x3e
 800475c:	d81b      	bhi.n	8004796 <USB_EPStartXfer+0x56e>
 800475e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004762:	085b      	lsrs	r3, r3, #1
 8004764:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d004      	beq.n	800477e <USB_EPStartXfer+0x556>
 8004774:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004778:	3301      	adds	r3, #1
 800477a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800477e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004782:	b29b      	uxth	r3, r3
 8004784:	029b      	lsls	r3, r3, #10
 8004786:	b29a      	uxth	r2, r3
 8004788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800478c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	801a      	strh	r2, [r3, #0]
 8004794:	e063      	b.n	800485e <USB_EPStartXfer+0x636>
 8004796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80047a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d104      	bne.n	80047b6 <USB_EPStartXfer+0x58e>
 80047ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80047b0:	3b01      	subs	r3, #1
 80047b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80047b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	029b      	lsls	r3, r3, #10
 80047be:	b29b      	uxth	r3, r3
 80047c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	801a      	strh	r2, [r3, #0]
 80047d6:	e042      	b.n	800485e <USB_EPStartXfer+0x636>
 80047d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	785b      	ldrb	r3, [r3, #1]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d13a      	bne.n	800485e <USB_EPStartXfer+0x636>
 80047e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80047f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80047f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004800:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480a:	b29b      	uxth	r3, r3
 800480c:	4619      	mov	r1, r3
 800480e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004812:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004816:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800481a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	440a      	add	r2, r1
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	011a      	lsls	r2, r3, #4
 8004832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004836:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4413      	add	r3, r2
 800483e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004846:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004850:	b29a      	uxth	r2, r3
 8004852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004856:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800485e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	891b      	ldrh	r3, [r3, #8]
 800486a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800486e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6959      	ldr	r1, [r3, #20]
 800487a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800487e:	b29b      	uxth	r3, r3
 8004880:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004884:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004888:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800488c:	6800      	ldr	r0, [r0, #0]
 800488e:	f001 fc41 	bl	8006114 <USB_WritePMA>
 8004892:	f000 be0e 	b.w	80054b2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800489a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	785b      	ldrb	r3, [r3, #1]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d16d      	bne.n	8004982 <USB_EPStartXfer+0x75a>
 80048a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80048b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c6:	4413      	add	r3, r2
 80048c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80048ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	011a      	lsls	r2, r3, #4
 80048d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048da:	4413      	add	r3, r2
 80048dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048e0:	647b      	str	r3, [r7, #68]	; 0x44
 80048e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d112      	bne.n	8004910 <USB_EPStartXfer+0x6e8>
 80048ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004908:	b29a      	uxth	r2, r3
 800490a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490c:	801a      	strh	r2, [r3, #0]
 800490e:	e063      	b.n	80049d8 <USB_EPStartXfer+0x7b0>
 8004910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004914:	2b3e      	cmp	r3, #62	; 0x3e
 8004916:	d817      	bhi.n	8004948 <USB_EPStartXfer+0x720>
 8004918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d004      	beq.n	8004938 <USB_EPStartXfer+0x710>
 800492e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004932:	3301      	adds	r3, #1
 8004934:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004938:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800493c:	b29b      	uxth	r3, r3
 800493e:	029b      	lsls	r3, r3, #10
 8004940:	b29a      	uxth	r2, r3
 8004942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004944:	801a      	strh	r2, [r3, #0]
 8004946:	e047      	b.n	80049d8 <USB_EPStartXfer+0x7b0>
 8004948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	2b00      	cmp	r3, #0
 800495c:	d104      	bne.n	8004968 <USB_EPStartXfer+0x740>
 800495e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004962:	3b01      	subs	r3, #1
 8004964:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004968:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800496c:	b29b      	uxth	r3, r3
 800496e:	029b      	lsls	r3, r3, #10
 8004970:	b29b      	uxth	r3, r3
 8004972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800497a:	b29a      	uxth	r2, r3
 800497c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497e:	801a      	strh	r2, [r3, #0]
 8004980:	e02a      	b.n	80049d8 <USB_EPStartXfer+0x7b0>
 8004982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	785b      	ldrb	r3, [r3, #1]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d122      	bne.n	80049d8 <USB_EPStartXfer+0x7b0>
 8004992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	653b      	str	r3, [r7, #80]	; 0x50
 800499e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b2:	4413      	add	r3, r2
 80049b4:	653b      	str	r3, [r7, #80]	; 0x50
 80049b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	011a      	lsls	r2, r3, #4
 80049c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c6:	4413      	add	r3, r2
 80049c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80049d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	891b      	ldrh	r3, [r3, #8]
 80049e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6959      	ldr	r1, [r3, #20]
 80049f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80049fe:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a02:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a06:	6800      	ldr	r0, [r0, #0]
 8004a08:	f001 fb84 	bl	8006114 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a1c:	441a      	add	r2, r3
 8004a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6a1a      	ldr	r2, [r3, #32]
 8004a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d90f      	bls.n	8004a66 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6a1a      	ldr	r2, [r3, #32]
 8004a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a56:	1ad2      	subs	r2, r2, r3
 8004a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	621a      	str	r2, [r3, #32]
 8004a64:	e00e      	b.n	8004a84 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2200      	movs	r2, #0
 8004a82:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d16d      	bne.n	8004b7c <USB_EPStartXfer+0x954>
 8004aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	4413      	add	r3, r2
 8004ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	011a      	lsls	r2, r3, #4
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ada:	637b      	str	r3, [r7, #52]	; 0x34
 8004adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d112      	bne.n	8004b0a <USB_EPStartXfer+0x8e2>
 8004ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af2:	801a      	strh	r2, [r3, #0]
 8004af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b06:	801a      	strh	r2, [r3, #0]
 8004b08:	e05d      	b.n	8004bc6 <USB_EPStartXfer+0x99e>
 8004b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b0e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b10:	d817      	bhi.n	8004b42 <USB_EPStartXfer+0x91a>
 8004b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b16:	085b      	lsrs	r3, r3, #1
 8004b18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d004      	beq.n	8004b32 <USB_EPStartXfer+0x90a>
 8004b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004b32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	029b      	lsls	r3, r3, #10
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3e:	801a      	strh	r2, [r3, #0]
 8004b40:	e041      	b.n	8004bc6 <USB_EPStartXfer+0x99e>
 8004b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d104      	bne.n	8004b62 <USB_EPStartXfer+0x93a>
 8004b58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	029b      	lsls	r3, r3, #10
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	801a      	strh	r2, [r3, #0]
 8004b7a:	e024      	b.n	8004bc6 <USB_EPStartXfer+0x99e>
 8004b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	785b      	ldrb	r3, [r3, #1]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d11c      	bne.n	8004bc6 <USB_EPStartXfer+0x99e>
 8004b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba0:	4413      	add	r3, r2
 8004ba2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	011a      	lsls	r2, r3, #4
 8004bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	895b      	ldrh	r3, [r3, #10]
 8004bd2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6959      	ldr	r1, [r3, #20]
 8004be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004bec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004bf0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004bf4:	6800      	ldr	r0, [r0, #0]
 8004bf6:	f001 fa8d 	bl	8006114 <USB_WritePMA>
 8004bfa:	f000 bc5a 	b.w	80054b2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c34:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	461a      	mov	r2, r3
 8004c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8a:	4413      	add	r3, r2
 8004c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	011a      	lsls	r2, r3, #4
 8004c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ca4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	891b      	ldrh	r3, [r3, #8]
 8004cbc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6959      	ldr	r1, [r3, #20]
 8004ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004cd6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004cda:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004cde:	6800      	ldr	r0, [r0, #0]
 8004ce0:	f001 fa18 	bl	8006114 <USB_WritePMA>
 8004ce4:	e3e5      	b.n	80054b2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	441a      	add	r2, r3
 8004d2a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d36:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6a1a      	ldr	r2, [r3, #32]
 8004d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d52:	1ad2      	subs	r2, r2, r3
 8004d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 81bc 	beq.w	8005100 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	785b      	ldrb	r3, [r3, #1]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d16d      	bne.n	8004e82 <USB_EPStartXfer+0xc5a>
 8004da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004daa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dc6:	4413      	add	r3, r2
 8004dc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	011a      	lsls	r2, r3, #4
 8004dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dda:	4413      	add	r3, r2
 8004ddc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004de0:	677b      	str	r3, [r7, #116]	; 0x74
 8004de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d112      	bne.n	8004e10 <USB_EPStartXfer+0xbe8>
 8004dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df8:	801a      	strh	r2, [r3, #0]
 8004dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	e060      	b.n	8004ed2 <USB_EPStartXfer+0xcaa>
 8004e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e14:	2b3e      	cmp	r3, #62	; 0x3e
 8004e16:	d817      	bhi.n	8004e48 <USB_EPStartXfer+0xc20>
 8004e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d004      	beq.n	8004e38 <USB_EPStartXfer+0xc10>
 8004e2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004e32:	3301      	adds	r3, #1
 8004e34:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004e38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	029b      	lsls	r3, r3, #10
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	e044      	b.n	8004ed2 <USB_EPStartXfer+0xcaa>
 8004e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d104      	bne.n	8004e68 <USB_EPStartXfer+0xc40>
 8004e5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004e62:	3b01      	subs	r3, #1
 8004e64:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004e68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	029b      	lsls	r3, r3, #10
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7e:	801a      	strh	r2, [r3, #0]
 8004e80:	e027      	b.n	8004ed2 <USB_EPStartXfer+0xcaa>
 8004e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	785b      	ldrb	r3, [r3, #1]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d11f      	bne.n	8004ed2 <USB_EPStartXfer+0xcaa>
 8004e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	011a      	lsls	r2, r3, #4
 8004ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ed0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	895b      	ldrh	r3, [r3, #10]
 8004ede:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6959      	ldr	r1, [r3, #20]
 8004eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ef8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004efc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004f00:	6800      	ldr	r0, [r0, #0]
 8004f02:	f001 f907 	bl	8006114 <USB_WritePMA>
          ep->xfer_buff += len;
 8004f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f16:	441a      	add	r2, r3
 8004f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6a1a      	ldr	r2, [r3, #32]
 8004f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d90f      	bls.n	8004f60 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8004f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a1a      	ldr	r2, [r3, #32]
 8004f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f50:	1ad2      	subs	r2, r2, r3
 8004f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	621a      	str	r2, [r3, #32]
 8004f5e:	e00e      	b.n	8004f7e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8004f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8295 	beq.w	80054b2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	785b      	ldrb	r3, [r3, #1]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d16d      	bne.n	8005074 <USB_EPStartXfer+0xe4c>
 8004f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fb8:	4413      	add	r3, r2
 8004fba:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	011a      	lsls	r2, r3, #4
 8004fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fcc:	4413      	add	r3, r2
 8004fce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fd2:	667b      	str	r3, [r7, #100]	; 0x64
 8004fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d112      	bne.n	8005002 <USB_EPStartXfer+0xdda>
 8004fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ffe:	801a      	strh	r2, [r3, #0]
 8005000:	e063      	b.n	80050ca <USB_EPStartXfer+0xea2>
 8005002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005006:	2b3e      	cmp	r3, #62	; 0x3e
 8005008:	d817      	bhi.n	800503a <USB_EPStartXfer+0xe12>
 800500a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d004      	beq.n	800502a <USB_EPStartXfer+0xe02>
 8005020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005024:	3301      	adds	r3, #1
 8005026:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800502a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800502e:	b29b      	uxth	r3, r3
 8005030:	029b      	lsls	r3, r3, #10
 8005032:	b29a      	uxth	r2, r3
 8005034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005036:	801a      	strh	r2, [r3, #0]
 8005038:	e047      	b.n	80050ca <USB_EPStartXfer+0xea2>
 800503a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <USB_EPStartXfer+0xe32>
 8005050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005054:	3b01      	subs	r3, #1
 8005056:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800505e:	b29b      	uxth	r3, r3
 8005060:	029b      	lsls	r3, r3, #10
 8005062:	b29b      	uxth	r3, r3
 8005064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800506c:	b29a      	uxth	r2, r3
 800506e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005070:	801a      	strh	r2, [r3, #0]
 8005072:	e02a      	b.n	80050ca <USB_EPStartXfer+0xea2>
 8005074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	785b      	ldrb	r3, [r3, #1]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d122      	bne.n	80050ca <USB_EPStartXfer+0xea2>
 8005084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	673b      	str	r3, [r7, #112]	; 0x70
 8005090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005094:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509e:	b29b      	uxth	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050a4:	4413      	add	r3, r2
 80050a6:	673b      	str	r3, [r7, #112]	; 0x70
 80050a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	011a      	lsls	r2, r3, #4
 80050b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050b8:	4413      	add	r3, r2
 80050ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	891b      	ldrh	r3, [r3, #8]
 80050d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6959      	ldr	r1, [r3, #20]
 80050e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80050f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80050f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80050f8:	6800      	ldr	r0, [r0, #0]
 80050fa:	f001 f80b 	bl	8006114 <USB_WritePMA>
 80050fe:	e1d8      	b.n	80054b2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d178      	bne.n	8005202 <USB_EPStartXfer+0xfda>
 8005110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800511e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005122:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512c:	b29b      	uxth	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005134:	4413      	add	r3, r2
 8005136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800513a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800513e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	011a      	lsls	r2, r3, #4
 8005148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800514c:	4413      	add	r3, r2
 800514e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005152:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d116      	bne.n	800518c <USB_EPStartXfer+0xf64>
 800515e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800516a:	b29a      	uxth	r2, r3
 800516c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	b29b      	uxth	r3, r3
 800517a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800517e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005182:	b29a      	uxth	r2, r3
 8005184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	e06b      	b.n	8005264 <USB_EPStartXfer+0x103c>
 800518c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005190:	2b3e      	cmp	r3, #62	; 0x3e
 8005192:	d818      	bhi.n	80051c6 <USB_EPStartXfer+0xf9e>
 8005194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800519e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d004      	beq.n	80051b4 <USB_EPStartXfer+0xf8c>
 80051aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051ae:	3301      	adds	r3, #1
 80051b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80051b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	029b      	lsls	r3, r3, #10
 80051bc:	b29a      	uxth	r2, r3
 80051be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051c2:	801a      	strh	r2, [r3, #0]
 80051c4:	e04e      	b.n	8005264 <USB_EPStartXfer+0x103c>
 80051c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80051d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051d4:	f003 031f 	and.w	r3, r3, #31
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <USB_EPStartXfer+0xfbe>
 80051dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051e0:	3b01      	subs	r3, #1
 80051e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80051e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	029b      	lsls	r3, r3, #10
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	e030      	b.n	8005264 <USB_EPStartXfer+0x103c>
 8005202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d128      	bne.n	8005264 <USB_EPStartXfer+0x103c>
 8005212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005224:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522e:	b29b      	uxth	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005236:	4413      	add	r3, r2
 8005238:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800523c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	011a      	lsls	r2, r3, #4
 800524a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800524e:	4413      	add	r3, r2
 8005250:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005254:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800525c:	b29a      	uxth	r2, r3
 800525e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005262:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	891b      	ldrh	r3, [r3, #8]
 8005270:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005278:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6959      	ldr	r1, [r3, #20]
 8005280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005284:	b29b      	uxth	r3, r3
 8005286:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800528a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800528e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005292:	6800      	ldr	r0, [r0, #0]
 8005294:	f000 ff3e 	bl	8006114 <USB_WritePMA>
          ep->xfer_buff += len;
 8005298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800529c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695a      	ldr	r2, [r3, #20]
 80052a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a8:	441a      	add	r2, r3
 80052aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80052b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6a1a      	ldr	r2, [r3, #32]
 80052c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d90f      	bls.n	80052f2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80052d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6a1a      	ldr	r2, [r3, #32]
 80052de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e2:	1ad2      	subs	r2, r2, r3
 80052e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	621a      	str	r2, [r3, #32]
 80052f0:	e00e      	b.n	8005310 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80052f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2200      	movs	r2, #0
 800530e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 80cc 	beq.w	80054b2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800531a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	785b      	ldrb	r3, [r3, #1]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d178      	bne.n	800542a <USB_EPStartXfer+0x1202>
 8005338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005354:	b29b      	uxth	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800535c:	4413      	add	r3, r2
 800535e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	011a      	lsls	r2, r3, #4
 8005370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005374:	4413      	add	r3, r2
 8005376:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800537a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800537e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005382:	2b00      	cmp	r3, #0
 8005384:	d116      	bne.n	80053b4 <USB_EPStartXfer+0x118c>
 8005386:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005392:	b29a      	uxth	r2, r3
 8005394:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005398:	801a      	strh	r2, [r3, #0]
 800539a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	e064      	b.n	800547e <USB_EPStartXfer+0x1256>
 80053b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b8:	2b3e      	cmp	r3, #62	; 0x3e
 80053ba:	d818      	bhi.n	80053ee <USB_EPStartXfer+0x11c6>
 80053bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80053c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d004      	beq.n	80053dc <USB_EPStartXfer+0x11b4>
 80053d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d6:	3301      	adds	r3, #1
 80053d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80053dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	029b      	lsls	r3, r3, #10
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	e047      	b.n	800547e <USB_EPStartXfer+0x1256>
 80053ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80053f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <USB_EPStartXfer+0x11e6>
 8005404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005408:	3b01      	subs	r3, #1
 800540a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800540e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005412:	b29b      	uxth	r3, r3
 8005414:	029b      	lsls	r3, r3, #10
 8005416:	b29b      	uxth	r3, r3
 8005418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005420:	b29a      	uxth	r2, r3
 8005422:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005426:	801a      	strh	r2, [r3, #0]
 8005428:	e029      	b.n	800547e <USB_EPStartXfer+0x1256>
 800542a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	785b      	ldrb	r3, [r3, #1]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d121      	bne.n	800547e <USB_EPStartXfer+0x1256>
 800543a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005448:	b29b      	uxth	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005450:	4413      	add	r3, r2
 8005452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	011a      	lsls	r2, r3, #4
 8005464:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005468:	4413      	add	r3, r2
 800546a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800546e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005476:	b29a      	uxth	r2, r3
 8005478:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800547c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800547e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	895b      	ldrh	r3, [r3, #10]
 800548a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800548e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6959      	ldr	r1, [r3, #20]
 800549a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054a4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054a8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80054ac:	6800      	ldr	r0, [r0, #0]
 80054ae:	f000 fe31 	bl	8006114 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80054b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80054d4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80054d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e0:	8013      	strh	r3, [r2, #0]
 80054e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80054ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80054ee:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80054f2:	8812      	ldrh	r2, [r2, #0]
 80054f4:	f082 0210 	eor.w	r2, r2, #16
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fe:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005502:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005506:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800550a:	8812      	ldrh	r2, [r2, #0]
 800550c:	f082 0220 	eor.w	r2, r2, #32
 8005510:	801a      	strh	r2, [r3, #0]
 8005512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005516:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	441a      	add	r2, r3
 800552c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005530:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005546:	b29b      	uxth	r3, r3
 8005548:	8013      	strh	r3, [r2, #0]
 800554a:	f000 bc9f 	b.w	8005e8c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800554e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	7b1b      	ldrb	r3, [r3, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f040 80ae 	bne.w	80056bc <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005564:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	699a      	ldr	r2, [r3, #24]
 800556c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005570:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	429a      	cmp	r2, r3
 800557a:	d917      	bls.n	80055ac <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800557c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800558c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005590:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800559c:	1ad2      	subs	r2, r2, r3
 800559e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	619a      	str	r2, [r3, #24]
 80055aa:	e00e      	b.n	80055ca <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80055ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80055bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2200      	movs	r2, #0
 80055c8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80055ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80055ee:	4413      	add	r3, r2
 80055f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	011a      	lsls	r2, r3, #4
 8005602:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005606:	4413      	add	r3, r2
 8005608:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800560c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d116      	bne.n	8005646 <USB_EPStartXfer+0x141e>
 8005618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005624:	b29a      	uxth	r2, r3
 8005626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800562a:	801a      	strh	r2, [r3, #0]
 800562c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563c:	b29a      	uxth	r2, r3
 800563e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	e3e8      	b.n	8005e18 <USB_EPStartXfer+0x1bf0>
 8005646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800564a:	2b3e      	cmp	r3, #62	; 0x3e
 800564c:	d818      	bhi.n	8005680 <USB_EPStartXfer+0x1458>
 800564e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <USB_EPStartXfer+0x1446>
 8005664:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005668:	3301      	adds	r3, #1
 800566a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800566e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005672:	b29b      	uxth	r3, r3
 8005674:	029b      	lsls	r3, r3, #10
 8005676:	b29a      	uxth	r2, r3
 8005678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800567c:	801a      	strh	r2, [r3, #0]
 800567e:	e3cb      	b.n	8005e18 <USB_EPStartXfer+0x1bf0>
 8005680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005684:	095b      	lsrs	r3, r3, #5
 8005686:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800568a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800568e:	f003 031f 	and.w	r3, r3, #31
 8005692:	2b00      	cmp	r3, #0
 8005694:	d104      	bne.n	80056a0 <USB_EPStartXfer+0x1478>
 8005696:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800569a:	3b01      	subs	r3, #1
 800569c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80056a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	029b      	lsls	r3, r3, #10
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056b8:	801a      	strh	r2, [r3, #0]
 80056ba:	e3ad      	b.n	8005e18 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80056bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	78db      	ldrb	r3, [r3, #3]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	f040 8200 	bne.w	8005ace <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80056ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	785b      	ldrb	r3, [r3, #1]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f040 8091 	bne.w	8005802 <USB_EPStartXfer+0x15da>
 80056e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	461a      	mov	r2, r3
 8005700:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005704:	4413      	add	r3, r2
 8005706:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800570a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	011a      	lsls	r2, r3, #4
 8005718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800571c:	4413      	add	r3, r2
 800571e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005722:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d116      	bne.n	8005764 <USB_EPStartXfer+0x153c>
 8005736:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005742:	b29a      	uxth	r2, r3
 8005744:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005748:	801a      	strh	r2, [r3, #0]
 800574a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800575a:	b29a      	uxth	r2, r3
 800575c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005760:	801a      	strh	r2, [r3, #0]
 8005762:	e083      	b.n	800586c <USB_EPStartXfer+0x1644>
 8005764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b3e      	cmp	r3, #62	; 0x3e
 8005772:	d820      	bhi.n	80057b6 <USB_EPStartXfer+0x158e>
 8005774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	085b      	lsrs	r3, r3, #1
 8005782:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d004      	beq.n	80057a4 <USB_EPStartXfer+0x157c>
 800579a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579e:	3301      	adds	r3, #1
 80057a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	029b      	lsls	r3, r3, #10
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057b2:	801a      	strh	r2, [r3, #0]
 80057b4:	e05a      	b.n	800586c <USB_EPStartXfer+0x1644>
 80057b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <USB_EPStartXfer+0x15be>
 80057dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e0:	3b01      	subs	r3, #1
 80057e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	029b      	lsls	r3, r3, #10
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057fe:	801a      	strh	r2, [r3, #0]
 8005800:	e034      	b.n	800586c <USB_EPStartXfer+0x1644>
 8005802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	785b      	ldrb	r3, [r3, #1]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d12c      	bne.n	800586c <USB_EPStartXfer+0x1644>
 8005812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005824:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800582e:	b29b      	uxth	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005836:	4413      	add	r3, r2
 8005838:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800583c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	011a      	lsls	r2, r3, #4
 800584a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800584e:	4413      	add	r3, r2
 8005850:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005854:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	b29a      	uxth	r2, r3
 8005866:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800586a:	801a      	strh	r2, [r3, #0]
 800586c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005870:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800587a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	785b      	ldrb	r3, [r3, #1]
 8005886:	2b00      	cmp	r3, #0
 8005888:	f040 8091 	bne.w	80059ae <USB_EPStartXfer+0x1786>
 800588c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005890:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800589a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058b0:	4413      	add	r3, r2
 80058b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80058b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	011a      	lsls	r2, r3, #4
 80058c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058c8:	4413      	add	r3, r2
 80058ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d116      	bne.n	8005910 <USB_EPStartXfer+0x16e8>
 80058e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005906:	b29a      	uxth	r2, r3
 8005908:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800590c:	801a      	strh	r2, [r3, #0]
 800590e:	e07c      	b.n	8005a0a <USB_EPStartXfer+0x17e2>
 8005910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b3e      	cmp	r3, #62	; 0x3e
 800591e:	d820      	bhi.n	8005962 <USB_EPStartXfer+0x173a>
 8005920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d004      	beq.n	8005950 <USB_EPStartXfer+0x1728>
 8005946:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800594a:	3301      	adds	r3, #1
 800594c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005950:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005954:	b29b      	uxth	r3, r3
 8005956:	029b      	lsls	r3, r3, #10
 8005958:	b29a      	uxth	r2, r3
 800595a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800595e:	801a      	strh	r2, [r3, #0]
 8005960:	e053      	b.n	8005a0a <USB_EPStartXfer+0x17e2>
 8005962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f003 031f 	and.w	r3, r3, #31
 8005984:	2b00      	cmp	r3, #0
 8005986:	d104      	bne.n	8005992 <USB_EPStartXfer+0x176a>
 8005988:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800598c:	3b01      	subs	r3, #1
 800598e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005992:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005996:	b29b      	uxth	r3, r3
 8005998:	029b      	lsls	r3, r3, #10
 800599a:	b29b      	uxth	r3, r3
 800599c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	e02d      	b.n	8005a0a <USB_EPStartXfer+0x17e2>
 80059ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d125      	bne.n	8005a0a <USB_EPStartXfer+0x17e2>
 80059be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059d4:	4413      	add	r3, r2
 80059d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	011a      	lsls	r2, r3, #4
 80059e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059ec:	4413      	add	r3, r2
 80059ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a08:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 81fe 	beq.w	8005e18 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a3c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <USB_EPStartXfer+0x182c>
 8005a48:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10d      	bne.n	8005a70 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a54:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f040 81db 	bne.w	8005e18 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a62:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f040 81d4 	bne.w	8005e18 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a96:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	441a      	add	r2, r3
 8005ab4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	8013      	strh	r3, [r2, #0]
 8005acc:	e1a4      	b.n	8005e18 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	78db      	ldrb	r3, [r3, #3]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	f040 819a 	bne.w	8005e14 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d917      	bls.n	8005b2c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1c:	1ad2      	subs	r2, r2, r3
 8005b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	619a      	str	r2, [r3, #24]
 8005b2a:	e00e      	b.n	8005b4a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	785b      	ldrb	r3, [r3, #1]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d178      	bne.n	8005c4c <USB_EPStartXfer+0x1a24>
 8005b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b7e:	4413      	add	r3, r2
 8005b80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	011a      	lsls	r2, r3, #4
 8005b92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b96:	4413      	add	r3, r2
 8005b98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d116      	bne.n	8005bd6 <USB_EPStartXfer+0x19ae>
 8005ba8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bba:	801a      	strh	r2, [r3, #0]
 8005bbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bd2:	801a      	strh	r2, [r3, #0]
 8005bd4:	e06b      	b.n	8005cae <USB_EPStartXfer+0x1a86>
 8005bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bda:	2b3e      	cmp	r3, #62	; 0x3e
 8005bdc:	d818      	bhi.n	8005c10 <USB_EPStartXfer+0x19e8>
 8005bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be2:	085b      	lsrs	r3, r3, #1
 8005be4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <USB_EPStartXfer+0x19d6>
 8005bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	029b      	lsls	r3, r3, #10
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	e04e      	b.n	8005cae <USB_EPStartXfer+0x1a86>
 8005c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <USB_EPStartXfer+0x1a08>
 8005c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	029b      	lsls	r3, r3, #10
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c48:	801a      	strh	r2, [r3, #0]
 8005c4a:	e030      	b.n	8005cae <USB_EPStartXfer+0x1a86>
 8005c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	785b      	ldrb	r3, [r3, #1]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d128      	bne.n	8005cae <USB_EPStartXfer+0x1a86>
 8005c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c80:	4413      	add	r3, r2
 8005c82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	011a      	lsls	r2, r3, #4
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c98:	4413      	add	r3, r2
 8005c9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	785b      	ldrb	r3, [r3, #1]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d178      	bne.n	8005dbe <USB_EPStartXfer+0x1b96>
 8005ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	011a      	lsls	r2, r3, #4
 8005d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d08:	4413      	add	r3, r2
 8005d0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d116      	bne.n	8005d48 <USB_EPStartXfer+0x1b20>
 8005d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d44:	801a      	strh	r2, [r3, #0]
 8005d46:	e067      	b.n	8005e18 <USB_EPStartXfer+0x1bf0>
 8005d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d4e:	d818      	bhi.n	8005d82 <USB_EPStartXfer+0x1b5a>
 8005d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <USB_EPStartXfer+0x1b48>
 8005d66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	029b      	lsls	r3, r3, #10
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	e04a      	b.n	8005e18 <USB_EPStartXfer+0x1bf0>
 8005d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d104      	bne.n	8005da2 <USB_EPStartXfer+0x1b7a>
 8005d98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005da2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	029b      	lsls	r3, r3, #10
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dba:	801a      	strh	r2, [r3, #0]
 8005dbc:	e02c      	b.n	8005e18 <USB_EPStartXfer+0x1bf0>
 8005dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d124      	bne.n	8005e18 <USB_EPStartXfer+0x1bf0>
 8005dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de4:	4413      	add	r3, r2
 8005de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	011a      	lsls	r2, r3, #4
 8005df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e001      	b.n	8005e18 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e03a      	b.n	8005e8e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005e42:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005e46:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e4a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005e4e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005e52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e56:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	785b      	ldrb	r3, [r3, #1]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d020      	beq.n	8005eec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec0:	81bb      	strh	r3, [r7, #12]
 8005ec2:	89bb      	ldrh	r3, [r7, #12]
 8005ec4:	f083 0310 	eor.w	r3, r3, #16
 8005ec8:	81bb      	strh	r3, [r7, #12]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	89bb      	ldrh	r3, [r7, #12]
 8005ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	8013      	strh	r3, [r2, #0]
 8005eea:	e01f      	b.n	8005f2c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	81fb      	strh	r3, [r7, #14]
 8005f04:	89fb      	ldrh	r3, [r7, #14]
 8005f06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f0a:	81fb      	strh	r3, [r7, #14]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	441a      	add	r2, r3
 8005f16:	89fb      	ldrh	r3, [r7, #14]
 8005f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr

08005f38 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	7b1b      	ldrb	r3, [r3, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f040 809d 	bne.w	8006086 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d04c      	beq.n	8005fee <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	823b      	strh	r3, [r7, #16]
 8005f62:	8a3b      	ldrh	r3, [r7, #16]
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01b      	beq.n	8005fa4 <USB_EPClearStall+0x6c>
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f82:	81fb      	strh	r3, [r7, #14]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	441a      	add	r2, r3
 8005f8e:	89fb      	ldrh	r3, [r7, #14]
 8005f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	78db      	ldrb	r3, [r3, #3]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d06c      	beq.n	8006086 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc2:	81bb      	strh	r3, [r7, #12]
 8005fc4:	89bb      	ldrh	r3, [r7, #12]
 8005fc6:	f083 0320 	eor.w	r3, r3, #32
 8005fca:	81bb      	strh	r3, [r7, #12]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	441a      	add	r2, r3
 8005fd6:	89bb      	ldrh	r3, [r7, #12]
 8005fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	8013      	strh	r3, [r2, #0]
 8005fec:	e04b      	b.n	8006086 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	82fb      	strh	r3, [r7, #22]
 8005ffc:	8afb      	ldrh	r3, [r7, #22]
 8005ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d01b      	beq.n	800603e <USB_EPClearStall+0x106>
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601c:	82bb      	strh	r3, [r7, #20]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	441a      	add	r2, r3
 8006028:	8abb      	ldrh	r3, [r7, #20]
 800602a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800602e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006032:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603a:	b29b      	uxth	r3, r3
 800603c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006054:	827b      	strh	r3, [r7, #18]
 8006056:	8a7b      	ldrh	r3, [r7, #18]
 8006058:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800605c:	827b      	strh	r3, [r7, #18]
 800605e:	8a7b      	ldrh	r3, [r7, #18]
 8006060:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006064:	827b      	strh	r3, [r7, #18]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	441a      	add	r2, r3
 8006070:	8a7b      	ldrh	r3, [r7, #18]
 8006072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006082:	b29b      	uxth	r3, r3
 8006084:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr

08006092 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	460b      	mov	r3, r1
 800609c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d103      	bne.n	80060ac <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2280      	movs	r2, #128	; 0x80
 80060a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr

080060b8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr

080060cc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	bc80      	pop	{r7}
 80060de:	4770      	bx	lr

080060e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80060f2:	68fb      	ldr	r3, [r7, #12]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr

080060fe <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr

08006114 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006114:	b480      	push	{r7}
 8006116:	b08d      	sub	sp, #52	; 0x34
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	4611      	mov	r1, r2
 8006120:	461a      	mov	r2, r3
 8006122:	460b      	mov	r3, r1
 8006124:	80fb      	strh	r3, [r7, #6]
 8006126:	4613      	mov	r3, r2
 8006128:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800612a:	88bb      	ldrh	r3, [r7, #4]
 800612c:	3301      	adds	r3, #1
 800612e:	085b      	lsrs	r3, r3, #1
 8006130:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	005a      	lsls	r2, r3, #1
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006146:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800614c:	e01e      	b.n	800618c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	3301      	adds	r3, #1
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	b29b      	uxth	r3, r3
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	b29b      	uxth	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	b29a      	uxth	r2, r3
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	3302      	adds	r3, #2
 8006178:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	3302      	adds	r3, #2
 800617e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	3301      	adds	r3, #1
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	3b01      	subs	r3, #1
 800618a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800618c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1dd      	bne.n	800614e <USB_WritePMA+0x3a>
  }
}
 8006192:	bf00      	nop
 8006194:	bf00      	nop
 8006196:	3734      	adds	r7, #52	; 0x34
 8006198:	46bd      	mov	sp, r7
 800619a:	bc80      	pop	{r7}
 800619c:	4770      	bx	lr

0800619e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800619e:	b480      	push	{r7}
 80061a0:	b08b      	sub	sp, #44	; 0x2c
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	60f8      	str	r0, [r7, #12]
 80061a6:	60b9      	str	r1, [r7, #8]
 80061a8:	4611      	mov	r1, r2
 80061aa:	461a      	mov	r2, r3
 80061ac:	460b      	mov	r3, r1
 80061ae:	80fb      	strh	r3, [r7, #6]
 80061b0:	4613      	mov	r3, r2
 80061b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80061b4:	88bb      	ldrh	r3, [r7, #4]
 80061b6:	085b      	lsrs	r3, r3, #1
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	005a      	lsls	r2, r3, #1
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061d0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
 80061d6:	e01b      	b.n	8006210 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	3302      	adds	r3, #2
 80061e4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	3301      	adds	r3, #1
 80061f2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	0a1b      	lsrs	r3, r3, #8
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	3301      	adds	r3, #1
 8006202:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	3302      	adds	r3, #2
 8006208:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	3b01      	subs	r3, #1
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e0      	bne.n	80061d8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006216:	88bb      	ldrh	r3, [r7, #4]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d007      	beq.n	8006232 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	b2da      	uxtb	r2, r3
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	701a      	strb	r2, [r3, #0]
  }
}
 8006232:	bf00      	nop
 8006234:	372c      	adds	r7, #44	; 0x2c
 8006236:	46bd      	mov	sp, r7
 8006238:	bc80      	pop	{r7}
 800623a:	4770      	bx	lr

0800623c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	7c1b      	ldrb	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d115      	bne.n	8006280 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006258:	2202      	movs	r2, #2
 800625a:	2181      	movs	r1, #129	; 0x81
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f003 f822 	bl	80092a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800626c:	2202      	movs	r2, #2
 800626e:	2101      	movs	r1, #1
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f003 f818 	bl	80092a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800627e:	e012      	b.n	80062a6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006280:	2340      	movs	r3, #64	; 0x40
 8006282:	2202      	movs	r2, #2
 8006284:	2181      	movs	r1, #129	; 0x81
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f003 f80d 	bl	80092a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006292:	2340      	movs	r3, #64	; 0x40
 8006294:	2202      	movs	r2, #2
 8006296:	2101      	movs	r1, #1
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f003 f804 	bl	80092a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062a6:	2308      	movs	r3, #8
 80062a8:	2203      	movs	r2, #3
 80062aa:	2182      	movs	r1, #130	; 0x82
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f002 fffa 	bl	80092a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80062b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80062bc:	f003 f91a 	bl	80094f4 <USBD_static_malloc>
 80062c0:	4602      	mov	r2, r0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d102      	bne.n	80062d8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80062d2:	2301      	movs	r3, #1
 80062d4:	73fb      	strb	r3, [r7, #15]
 80062d6:	e026      	b.n	8006326 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062de:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	7c1b      	ldrb	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d109      	bne.n	8006316 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800630c:	2101      	movs	r1, #1
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f003 f8ba 	bl	8009488 <USBD_LL_PrepareReceive>
 8006314:	e007      	b.n	8006326 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800631c:	2340      	movs	r3, #64	; 0x40
 800631e:	2101      	movs	r1, #1
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f003 f8b1 	bl	8009488 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006340:	2181      	movs	r1, #129	; 0x81
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f002 ffd5 	bl	80092f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800634e:	2101      	movs	r1, #1
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f002 ffce 	bl	80092f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800635e:	2182      	movs	r1, #130	; 0x82
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f002 ffc6 	bl	80092f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00e      	beq.n	8006394 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006386:	4618      	mov	r0, r3
 8006388:	f003 f8c0 	bl	800950c <USBD_static_free>
    pdev->pClassData = NULL;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ae:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d039      	beq.n	800643c <USBD_CDC_Setup+0x9e>
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	d17f      	bne.n	80064cc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	88db      	ldrh	r3, [r3, #6]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d029      	beq.n	8006428 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	b25b      	sxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	da11      	bge.n	8006402 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80063ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	88d2      	ldrh	r2, [r2, #6]
 80063f0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80063f2:	6939      	ldr	r1, [r7, #16]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	88db      	ldrh	r3, [r3, #6]
 80063f8:	461a      	mov	r2, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f001 f9d9 	bl	80077b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006400:	e06b      	b.n	80064da <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	785a      	ldrb	r2, [r3, #1]
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	88db      	ldrh	r3, [r3, #6]
 8006410:	b2da      	uxtb	r2, r3
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006418:	6939      	ldr	r1, [r7, #16]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	88db      	ldrh	r3, [r3, #6]
 800641e:	461a      	mov	r2, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 f9f4 	bl	800780e <USBD_CtlPrepareRx>
      break;
 8006426:	e058      	b.n	80064da <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	7850      	ldrb	r0, [r2, #1]
 8006434:	2200      	movs	r2, #0
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	4798      	blx	r3
      break;
 800643a:	e04e      	b.n	80064da <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	785b      	ldrb	r3, [r3, #1]
 8006440:	2b0b      	cmp	r3, #11
 8006442:	d02e      	beq.n	80064a2 <USBD_CDC_Setup+0x104>
 8006444:	2b0b      	cmp	r3, #11
 8006446:	dc38      	bgt.n	80064ba <USBD_CDC_Setup+0x11c>
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <USBD_CDC_Setup+0xb4>
 800644c:	2b0a      	cmp	r3, #10
 800644e:	d014      	beq.n	800647a <USBD_CDC_Setup+0xdc>
 8006450:	e033      	b.n	80064ba <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006458:	2b03      	cmp	r3, #3
 800645a:	d107      	bne.n	800646c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800645c:	f107 030c 	add.w	r3, r7, #12
 8006460:	2202      	movs	r2, #2
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 f9a4 	bl	80077b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800646a:	e02e      	b.n	80064ca <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f001 f935 	bl	80076de <USBD_CtlError>
            ret = USBD_FAIL;
 8006474:	2302      	movs	r3, #2
 8006476:	75fb      	strb	r3, [r7, #23]
          break;
 8006478:	e027      	b.n	80064ca <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006480:	2b03      	cmp	r3, #3
 8006482:	d107      	bne.n	8006494 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006484:	f107 030f 	add.w	r3, r7, #15
 8006488:	2201      	movs	r2, #1
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 f990 	bl	80077b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006492:	e01a      	b.n	80064ca <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f001 f921 	bl	80076de <USBD_CtlError>
            ret = USBD_FAIL;
 800649c:	2302      	movs	r3, #2
 800649e:	75fb      	strb	r3, [r7, #23]
          break;
 80064a0:	e013      	b.n	80064ca <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d00d      	beq.n	80064c8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 f915 	bl	80076de <USBD_CtlError>
            ret = USBD_FAIL;
 80064b4:	2302      	movs	r3, #2
 80064b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80064b8:	e006      	b.n	80064c8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 f90e 	bl	80076de <USBD_CtlError>
          ret = USBD_FAIL;
 80064c2:	2302      	movs	r3, #2
 80064c4:	75fb      	strb	r3, [r7, #23]
          break;
 80064c6:	e000      	b.n	80064ca <USBD_CDC_Setup+0x12c>
          break;
 80064c8:	bf00      	nop
      }
      break;
 80064ca:	e006      	b.n	80064da <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f001 f905 	bl	80076de <USBD_CtlError>
      ret = USBD_FAIL;
 80064d4:	2302      	movs	r3, #2
 80064d6:	75fb      	strb	r3, [r7, #23]
      break;
 80064d8:	bf00      	nop
  }

  return ret;
 80064da:	7dfb      	ldrb	r3, [r7, #23]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064fe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006506:	2b00      	cmp	r3, #0
 8006508:	d03a      	beq.n	8006580 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800650a:	78fa      	ldrb	r2, [r7, #3]
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	331c      	adds	r3, #28
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d029      	beq.n	8006574 <USBD_CDC_DataIn+0x90>
 8006520:	78fa      	ldrb	r2, [r7, #3]
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	4613      	mov	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	440b      	add	r3, r1
 800652e:	331c      	adds	r3, #28
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	78f9      	ldrb	r1, [r7, #3]
 8006534:	68b8      	ldr	r0, [r7, #8]
 8006536:	460b      	mov	r3, r1
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	4403      	add	r3, r0
 8006540:	3338      	adds	r3, #56	; 0x38
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	fbb2 f1f3 	udiv	r1, r2, r3
 8006548:	fb01 f303 	mul.w	r3, r1, r3
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d110      	bne.n	8006574 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006552:	78fa      	ldrb	r2, [r7, #3]
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	331c      	adds	r3, #28
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006566:	78f9      	ldrb	r1, [r7, #3]
 8006568:	2300      	movs	r3, #0
 800656a:	2200      	movs	r2, #0
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f002 ff68 	bl	8009442 <USBD_LL_Transmit>
 8006572:	e003      	b.n	800657c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	e000      	b.n	8006582 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006580:	2302      	movs	r3, #2
  }
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	460b      	mov	r3, r1
 8006594:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800659c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800659e:	78fb      	ldrb	r3, [r7, #3]
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f002 ff93 	bl	80094ce <USBD_LL_GetRxDataSize>
 80065a8:	4602      	mov	r2, r0
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00d      	beq.n	80065d6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80065ce:	4611      	mov	r1, r2
 80065d0:	4798      	blx	r3

    return USBD_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	e000      	b.n	80065d8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80065d6:	2302      	movs	r3, #2
  }
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d015      	beq.n	8006626 <USBD_CDC_EP0_RxReady+0x46>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006600:	2bff      	cmp	r3, #255	; 0xff
 8006602:	d010      	beq.n	8006626 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006612:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800661a:	b292      	uxth	r2, r2
 800661c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	22ff      	movs	r2, #255	; 0xff
 8006622:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2243      	movs	r2, #67	; 0x43
 800663c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800663e:	4b03      	ldr	r3, [pc, #12]	; (800664c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20000094 	.word	0x20000094

08006650 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2243      	movs	r2, #67	; 0x43
 800665c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800665e:	4b03      	ldr	r3, [pc, #12]	; (800666c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006660:	4618      	mov	r0, r3
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	20000050 	.word	0x20000050

08006670 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2243      	movs	r2, #67	; 0x43
 800667c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800667e:	4b03      	ldr	r3, [pc, #12]	; (800668c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	200000d8 	.word	0x200000d8

08006690 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	220a      	movs	r2, #10
 800669c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800669e:	4b03      	ldr	r3, [pc, #12]	; (80066ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	2000000c 	.word	0x2000000c

080066b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80066ba:	2302      	movs	r3, #2
 80066bc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr

080066dc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	4613      	mov	r3, r2
 80066e8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80066fa:	88fa      	ldrh	r2, [r7, #6]
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	371c      	adds	r7, #28
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr

0800670e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800670e:	b480      	push	{r7}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr

08006734 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006742:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d017      	beq.n	800677e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	7c1b      	ldrb	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800675c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006760:	2101      	movs	r1, #1
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f002 fe90 	bl	8009488 <USBD_LL_PrepareReceive>
 8006768:	e007      	b.n	800677a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006770:	2340      	movs	r3, #64	; 0x40
 8006772:	2101      	movs	r1, #1
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f002 fe87 	bl	8009488 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	e000      	b.n	8006780 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800677e:	2302      	movs	r3, #2
  }
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4613      	mov	r3, r2
 8006794:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800679c:	2302      	movs	r3, #2
 800679e:	e01a      	b.n	80067d6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	79fa      	ldrb	r2, [r7, #7]
 80067cc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f002 fcf4 	bl	80091bc <USBD_LL_Init>

  return USBD_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d006      	beq.n	8006800 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]
 80067fe:	e001      	b.n	8006804 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006800:	2302      	movs	r3, #2
 8006802:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	bc80      	pop	{r7}
 800680e:	4770      	bx	lr

08006810 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f002 fd29 	bl	8009270 <USBD_LL_Start>

  return USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	bc80      	pop	{r7}
 800683a:	4770      	bx	lr

0800683c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006848:	2302      	movs	r3, #2
 800684a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00c      	beq.n	8006870 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	78fa      	ldrb	r2, [r7, #3]
 8006860:	4611      	mov	r1, r2
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	4798      	blx	r3
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006870:	7bfb      	ldrb	r3, [r7, #15]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	460b      	mov	r3, r1
 8006884:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	78fa      	ldrb	r2, [r7, #3]
 8006890:	4611      	mov	r1, r2
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	4798      	blx	r3

  return USBD_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fed7 	bl	8007666 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80068c6:	461a      	mov	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068d4:	f003 031f 	and.w	r3, r3, #31
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d016      	beq.n	800690a <USBD_LL_SetupStage+0x6a>
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d81c      	bhi.n	800691a <USBD_LL_SetupStage+0x7a>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <USBD_LL_SetupStage+0x4a>
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d008      	beq.n	80068fa <USBD_LL_SetupStage+0x5a>
 80068e8:	e017      	b.n	800691a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f9ca 	bl	8006c8c <USBD_StdDevReq>
      break;
 80068f8:	e01a      	b.n	8006930 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fa2c 	bl	8006d60 <USBD_StdItfReq>
      break;
 8006908:	e012      	b.n	8006930 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fa6c 	bl	8006df0 <USBD_StdEPReq>
      break;
 8006918:	e00a      	b.n	8006930 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006920:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006924:	b2db      	uxtb	r3, r3
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f002 fd01 	bl	8009330 <USBD_LL_StallEP>
      break;
 800692e:	bf00      	nop
  }

  return USBD_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	460b      	mov	r3, r1
 8006944:	607a      	str	r2, [r7, #4]
 8006946:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006948:	7afb      	ldrb	r3, [r7, #11]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d14b      	bne.n	80069e6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006954:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800695c:	2b03      	cmp	r3, #3
 800695e:	d134      	bne.n	80069ca <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	429a      	cmp	r2, r3
 800696a:	d919      	bls.n	80069a0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	1ad2      	subs	r2, r2, r3
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	68da      	ldr	r2, [r3, #12]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006982:	429a      	cmp	r2, r3
 8006984:	d203      	bcs.n	800698e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800698a:	b29b      	uxth	r3, r3
 800698c:	e002      	b.n	8006994 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006992:	b29b      	uxth	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 ff56 	bl	800784a <USBD_CtlContinueRx>
 800699e:	e038      	b.n	8006a12 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d105      	bne.n	80069c2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 ff53 	bl	800786e <USBD_CtlSendStatus>
 80069c8:	e023      	b.n	8006a12 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069d0:	2b05      	cmp	r3, #5
 80069d2:	d11e      	bne.n	8006a12 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80069dc:	2100      	movs	r1, #0
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f002 fca6 	bl	8009330 <USBD_LL_StallEP>
 80069e4:	e015      	b.n	8006a12 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00d      	beq.n	8006a0e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d108      	bne.n	8006a0e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	7afa      	ldrb	r2, [r7, #11]
 8006a06:	4611      	mov	r1, r2
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	4798      	blx	r3
 8006a0c:	e001      	b.n	8006a12 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e000      	b.n	8006a14 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	460b      	mov	r3, r1
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a2a:	7afb      	ldrb	r3, [r7, #11]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d17f      	bne.n	8006b30 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3314      	adds	r3, #20
 8006a34:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d15c      	bne.n	8006afa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d915      	bls.n	8006a78 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	1ad2      	subs	r2, r2, r3
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	461a      	mov	r2, r3
 8006a62:	6879      	ldr	r1, [r7, #4]
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fec0 	bl	80077ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2100      	movs	r1, #0
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f002 fd09 	bl	8009488 <USBD_LL_PrepareReceive>
 8006a76:	e04e      	b.n	8006b16 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	6912      	ldr	r2, [r2, #16]
 8006a80:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a84:	fb01 f202 	mul.w	r2, r1, r2
 8006a88:	1a9b      	subs	r3, r3, r2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d11c      	bne.n	8006ac8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	689a      	ldr	r2, [r3, #8]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d316      	bcc.n	8006ac8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d20f      	bcs.n	8006ac8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2100      	movs	r1, #0
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 fe9c 	bl	80077ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aba:	2300      	movs	r3, #0
 8006abc:	2200      	movs	r2, #0
 8006abe:	2100      	movs	r1, #0
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f002 fce1 	bl	8009488 <USBD_LL_PrepareReceive>
 8006ac6:	e026      	b.n	8006b16 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00a      	beq.n	8006aea <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d105      	bne.n	8006aea <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006aea:	2180      	movs	r1, #128	; 0x80
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f002 fc1f 	bl	8009330 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fece 	bl	8007894 <USBD_CtlReceiveStatus>
 8006af8:	e00d      	b.n	8006b16 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d004      	beq.n	8006b0e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d103      	bne.n	8006b16 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006b0e:	2180      	movs	r1, #128	; 0x80
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f002 fc0d 	bl	8009330 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d11d      	bne.n	8006b5c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f7ff fe81 	bl	8006828 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b2e:	e015      	b.n	8006b5c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00d      	beq.n	8006b58 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d108      	bne.n	8006b58 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	7afa      	ldrb	r2, [r7, #11]
 8006b50:	4611      	mov	r1, r2
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	4798      	blx	r3
 8006b56:	e001      	b.n	8006b5c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e000      	b.n	8006b5e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b6e:	2340      	movs	r3, #64	; 0x40
 8006b70:	2200      	movs	r2, #0
 8006b72:	2100      	movs	r1, #0
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f002 fb96 	bl	80092a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2240      	movs	r2, #64	; 0x40
 8006b86:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b8a:	2340      	movs	r3, #64	; 0x40
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2180      	movs	r1, #128	; 0x80
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f002 fb88 	bl	80092a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2240      	movs	r2, #64	; 0x40
 8006ba0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d009      	beq.n	8006bde <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	6852      	ldr	r2, [r2, #4]
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	4611      	mov	r1, r2
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4798      	blx	r3
  }

  return USBD_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	78fa      	ldrb	r2, [r7, #3]
 8006bf8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	4770      	bx	lr

08006c06 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2204      	movs	r2, #4
 8006c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr

08006c2e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d105      	bne.n	8006c4c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr

08006c58 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d10b      	bne.n	8006c82 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ca2:	2b40      	cmp	r3, #64	; 0x40
 8006ca4:	d005      	beq.n	8006cb2 <USBD_StdDevReq+0x26>
 8006ca6:	2b40      	cmp	r3, #64	; 0x40
 8006ca8:	d84f      	bhi.n	8006d4a <USBD_StdDevReq+0xbe>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <USBD_StdDevReq+0x36>
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d14b      	bne.n	8006d4a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	4798      	blx	r3
      break;
 8006cc0:	e048      	b.n	8006d54 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	2b09      	cmp	r3, #9
 8006cc8:	d839      	bhi.n	8006d3e <USBD_StdDevReq+0xb2>
 8006cca:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <USBD_StdDevReq+0x44>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006d21 	.word	0x08006d21
 8006cd4:	08006d35 	.word	0x08006d35
 8006cd8:	08006d3f 	.word	0x08006d3f
 8006cdc:	08006d2b 	.word	0x08006d2b
 8006ce0:	08006d3f 	.word	0x08006d3f
 8006ce4:	08006d03 	.word	0x08006d03
 8006ce8:	08006cf9 	.word	0x08006cf9
 8006cec:	08006d3f 	.word	0x08006d3f
 8006cf0:	08006d17 	.word	0x08006d17
 8006cf4:	08006d0d 	.word	0x08006d0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f9dc 	bl	80070b8 <USBD_GetDescriptor>
          break;
 8006d00:	e022      	b.n	8006d48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fb3f 	bl	8007388 <USBD_SetAddress>
          break;
 8006d0a:	e01d      	b.n	8006d48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fb7e 	bl	8007410 <USBD_SetConfig>
          break;
 8006d14:	e018      	b.n	8006d48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fc07 	bl	800752c <USBD_GetConfig>
          break;
 8006d1e:	e013      	b.n	8006d48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fc37 	bl	8007596 <USBD_GetStatus>
          break;
 8006d28:	e00e      	b.n	8006d48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fc65 	bl	80075fc <USBD_SetFeature>
          break;
 8006d32:	e009      	b.n	8006d48 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fc74 	bl	8007624 <USBD_ClrFeature>
          break;
 8006d3c:	e004      	b.n	8006d48 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fccc 	bl	80076de <USBD_CtlError>
          break;
 8006d46:	bf00      	nop
      }
      break;
 8006d48:	e004      	b.n	8006d54 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fcc6 	bl	80076de <USBD_CtlError>
      break;
 8006d52:	bf00      	nop
  }

  return ret;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop

08006d60 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d76:	2b40      	cmp	r3, #64	; 0x40
 8006d78:	d005      	beq.n	8006d86 <USBD_StdItfReq+0x26>
 8006d7a:	2b40      	cmp	r3, #64	; 0x40
 8006d7c:	d82e      	bhi.n	8006ddc <USBD_StdItfReq+0x7c>
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <USBD_StdItfReq+0x26>
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	d12a      	bne.n	8006ddc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d81d      	bhi.n	8006dce <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	889b      	ldrh	r3, [r3, #4]
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d813      	bhi.n	8006dc4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	4798      	blx	r3
 8006daa:	4603      	mov	r3, r0
 8006dac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	88db      	ldrh	r3, [r3, #6]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d110      	bne.n	8006dd8 <USBD_StdItfReq+0x78>
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10d      	bne.n	8006dd8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fd56 	bl	800786e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006dc2:	e009      	b.n	8006dd8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fc89 	bl	80076de <USBD_CtlError>
          break;
 8006dcc:	e004      	b.n	8006dd8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fc84 	bl	80076de <USBD_CtlError>
          break;
 8006dd6:	e000      	b.n	8006dda <USBD_StdItfReq+0x7a>
          break;
 8006dd8:	bf00      	nop
      }
      break;
 8006dda:	e004      	b.n	8006de6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fc7d 	bl	80076de <USBD_CtlError>
      break;
 8006de4:	bf00      	nop
  }

  return USBD_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	889b      	ldrh	r3, [r3, #4]
 8006e02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e0c:	2b40      	cmp	r3, #64	; 0x40
 8006e0e:	d007      	beq.n	8006e20 <USBD_StdEPReq+0x30>
 8006e10:	2b40      	cmp	r3, #64	; 0x40
 8006e12:	f200 8146 	bhi.w	80070a2 <USBD_StdEPReq+0x2b2>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <USBD_StdEPReq+0x40>
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	f040 8141 	bne.w	80070a2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	4798      	blx	r3
      break;
 8006e2e:	e13d      	b.n	80070ac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e38:	2b20      	cmp	r3, #32
 8006e3a:	d10a      	bne.n	8006e52 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	e12d      	b.n	80070ae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	785b      	ldrb	r3, [r3, #1]
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d007      	beq.n	8006e6a <USBD_StdEPReq+0x7a>
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	f300 811b 	bgt.w	8007096 <USBD_StdEPReq+0x2a6>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d072      	beq.n	8006f4a <USBD_StdEPReq+0x15a>
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d03a      	beq.n	8006ede <USBD_StdEPReq+0xee>
 8006e68:	e115      	b.n	8007096 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d002      	beq.n	8006e7a <USBD_StdEPReq+0x8a>
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d015      	beq.n	8006ea4 <USBD_StdEPReq+0xb4>
 8006e78:	e02b      	b.n	8006ed2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00c      	beq.n	8006e9a <USBD_StdEPReq+0xaa>
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	2b80      	cmp	r3, #128	; 0x80
 8006e84:	d009      	beq.n	8006e9a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f002 fa50 	bl	8009330 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f002 fa4c 	bl	8009330 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e98:	e020      	b.n	8006edc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fc1e 	bl	80076de <USBD_CtlError>
              break;
 8006ea2:	e01b      	b.n	8006edc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	885b      	ldrh	r3, [r3, #2]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10e      	bne.n	8006eca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006eac:	7bbb      	ldrb	r3, [r7, #14]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00b      	beq.n	8006eca <USBD_StdEPReq+0xda>
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	2b80      	cmp	r3, #128	; 0x80
 8006eb6:	d008      	beq.n	8006eca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	88db      	ldrh	r3, [r3, #6]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d104      	bne.n	8006eca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f002 fa33 	bl	8009330 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fccf 	bl	800786e <USBD_CtlSendStatus>

              break;
 8006ed0:	e004      	b.n	8006edc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fc02 	bl	80076de <USBD_CtlError>
              break;
 8006eda:	bf00      	nop
          }
          break;
 8006edc:	e0e0      	b.n	80070a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d002      	beq.n	8006eee <USBD_StdEPReq+0xfe>
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d015      	beq.n	8006f18 <USBD_StdEPReq+0x128>
 8006eec:	e026      	b.n	8006f3c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00c      	beq.n	8006f0e <USBD_StdEPReq+0x11e>
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	2b80      	cmp	r3, #128	; 0x80
 8006ef8:	d009      	beq.n	8006f0e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f002 fa16 	bl	8009330 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f04:	2180      	movs	r1, #128	; 0x80
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f002 fa12 	bl	8009330 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f0c:	e01c      	b.n	8006f48 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fbe4 	bl	80076de <USBD_CtlError>
              break;
 8006f16:	e017      	b.n	8006f48 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	885b      	ldrh	r3, [r3, #2]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d112      	bne.n	8006f46 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f20:	7bbb      	ldrb	r3, [r7, #14]
 8006f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d004      	beq.n	8006f34 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f002 fa1d 	bl	800936e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fc9a 	bl	800786e <USBD_CtlSendStatus>
              }
              break;
 8006f3a:	e004      	b.n	8006f46 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fbcd 	bl	80076de <USBD_CtlError>
              break;
 8006f44:	e000      	b.n	8006f48 <USBD_StdEPReq+0x158>
              break;
 8006f46:	bf00      	nop
          }
          break;
 8006f48:	e0aa      	b.n	80070a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d002      	beq.n	8006f5a <USBD_StdEPReq+0x16a>
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d032      	beq.n	8006fbe <USBD_StdEPReq+0x1ce>
 8006f58:	e097      	b.n	800708a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d007      	beq.n	8006f70 <USBD_StdEPReq+0x180>
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	2b80      	cmp	r3, #128	; 0x80
 8006f64:	d004      	beq.n	8006f70 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fbb8 	bl	80076de <USBD_CtlError>
                break;
 8006f6e:	e091      	b.n	8007094 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	da0b      	bge.n	8006f90 <USBD_StdEPReq+0x1a0>
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	3310      	adds	r3, #16
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	e00b      	b.n	8006fa8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fbfb 	bl	80077b2 <USBD_CtlSendData>
              break;
 8006fbc:	e06a      	b.n	8007094 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006fbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	da11      	bge.n	8006fea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	f003 020f 	and.w	r2, r3, #15
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	440b      	add	r3, r1
 8006fd8:	3318      	adds	r3, #24
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d117      	bne.n	8007010 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fb7b 	bl	80076de <USBD_CtlError>
                  break;
 8006fe8:	e054      	b.n	8007094 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	f003 020f 	and.w	r2, r3, #15
 8006ff0:	6879      	ldr	r1, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fb68 	bl	80076de <USBD_CtlError>
                  break;
 800700e:	e041      	b.n	8007094 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007014:	2b00      	cmp	r3, #0
 8007016:	da0b      	bge.n	8007030 <USBD_StdEPReq+0x240>
 8007018:	7bbb      	ldrb	r3, [r7, #14]
 800701a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	3310      	adds	r3, #16
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	4413      	add	r3, r2
 800702c:	3304      	adds	r3, #4
 800702e:	e00b      	b.n	8007048 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	4413      	add	r3, r2
 8007046:	3304      	adds	r3, #4
 8007048:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800704a:	7bbb      	ldrb	r3, [r7, #14]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <USBD_StdEPReq+0x266>
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	2b80      	cmp	r3, #128	; 0x80
 8007054:	d103      	bne.n	800705e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	e00e      	b.n	800707c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f002 f9a2 	bl	80093ac <USBD_LL_IsStallEP>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2201      	movs	r2, #1
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	e002      	b.n	800707c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2202      	movs	r2, #2
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fb95 	bl	80077b2 <USBD_CtlSendData>
              break;
 8007088:	e004      	b.n	8007094 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fb26 	bl	80076de <USBD_CtlError>
              break;
 8007092:	bf00      	nop
          }
          break;
 8007094:	e004      	b.n	80070a0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fb20 	bl	80076de <USBD_CtlError>
          break;
 800709e:	bf00      	nop
      }
      break;
 80070a0:	e004      	b.n	80070ac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fb1a 	bl	80076de <USBD_CtlError>
      break;
 80070aa:	bf00      	nop
  }

  return ret;
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	885b      	ldrh	r3, [r3, #2]
 80070d2:	0a1b      	lsrs	r3, r3, #8
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	2b06      	cmp	r3, #6
 80070da:	f200 8128 	bhi.w	800732e <USBD_GetDescriptor+0x276>
 80070de:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <USBD_GetDescriptor+0x2c>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	08007101 	.word	0x08007101
 80070e8:	08007119 	.word	0x08007119
 80070ec:	08007159 	.word	0x08007159
 80070f0:	0800732f 	.word	0x0800732f
 80070f4:	0800732f 	.word	0x0800732f
 80070f8:	080072cf 	.word	0x080072cf
 80070fc:	080072fb 	.word	0x080072fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	7c12      	ldrb	r2, [r2, #16]
 800710c:	f107 0108 	add.w	r1, r7, #8
 8007110:	4610      	mov	r0, r2
 8007112:	4798      	blx	r3
 8007114:	60f8      	str	r0, [r7, #12]
      break;
 8007116:	e112      	b.n	800733e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	7c1b      	ldrb	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10d      	bne.n	800713c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007128:	f107 0208 	add.w	r2, r7, #8
 800712c:	4610      	mov	r0, r2
 800712e:	4798      	blx	r3
 8007130:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	2202      	movs	r2, #2
 8007138:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800713a:	e100      	b.n	800733e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	f107 0208 	add.w	r2, r7, #8
 8007148:	4610      	mov	r0, r2
 800714a:	4798      	blx	r3
 800714c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3301      	adds	r3, #1
 8007152:	2202      	movs	r2, #2
 8007154:	701a      	strb	r2, [r3, #0]
      break;
 8007156:	e0f2      	b.n	800733e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	885b      	ldrh	r3, [r3, #2]
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b05      	cmp	r3, #5
 8007160:	f200 80ac 	bhi.w	80072bc <USBD_GetDescriptor+0x204>
 8007164:	a201      	add	r2, pc, #4	; (adr r2, 800716c <USBD_GetDescriptor+0xb4>)
 8007166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716a:	bf00      	nop
 800716c:	08007185 	.word	0x08007185
 8007170:	080071b9 	.word	0x080071b9
 8007174:	080071ed 	.word	0x080071ed
 8007178:	08007221 	.word	0x08007221
 800717c:	08007255 	.word	0x08007255
 8007180:	08007289 	.word	0x08007289
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	7c12      	ldrb	r2, [r2, #16]
 800719c:	f107 0108 	add.w	r1, r7, #8
 80071a0:	4610      	mov	r0, r2
 80071a2:	4798      	blx	r3
 80071a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071a6:	e091      	b.n	80072cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fa97 	bl	80076de <USBD_CtlError>
            err++;
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	3301      	adds	r3, #1
 80071b4:	72fb      	strb	r3, [r7, #11]
          break;
 80071b6:	e089      	b.n	80072cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00b      	beq.n	80071dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	7c12      	ldrb	r2, [r2, #16]
 80071d0:	f107 0108 	add.w	r1, r7, #8
 80071d4:	4610      	mov	r0, r2
 80071d6:	4798      	blx	r3
 80071d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071da:	e077      	b.n	80072cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa7d 	bl	80076de <USBD_CtlError>
            err++;
 80071e4:	7afb      	ldrb	r3, [r7, #11]
 80071e6:	3301      	adds	r3, #1
 80071e8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ea:	e06f      	b.n	80072cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00b      	beq.n	8007210 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	7c12      	ldrb	r2, [r2, #16]
 8007204:	f107 0108 	add.w	r1, r7, #8
 8007208:	4610      	mov	r0, r2
 800720a:	4798      	blx	r3
 800720c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800720e:	e05d      	b.n	80072cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa63 	bl	80076de <USBD_CtlError>
            err++;
 8007218:	7afb      	ldrb	r3, [r7, #11]
 800721a:	3301      	adds	r3, #1
 800721c:	72fb      	strb	r3, [r7, #11]
          break;
 800721e:	e055      	b.n	80072cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00b      	beq.n	8007244 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	7c12      	ldrb	r2, [r2, #16]
 8007238:	f107 0108 	add.w	r1, r7, #8
 800723c:	4610      	mov	r0, r2
 800723e:	4798      	blx	r3
 8007240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007242:	e043      	b.n	80072cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fa49 	bl	80076de <USBD_CtlError>
            err++;
 800724c:	7afb      	ldrb	r3, [r7, #11]
 800724e:	3301      	adds	r3, #1
 8007250:	72fb      	strb	r3, [r7, #11]
          break;
 8007252:	e03b      	b.n	80072cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00b      	beq.n	8007278 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	7c12      	ldrb	r2, [r2, #16]
 800726c:	f107 0108 	add.w	r1, r7, #8
 8007270:	4610      	mov	r0, r2
 8007272:	4798      	blx	r3
 8007274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007276:	e029      	b.n	80072cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fa2f 	bl	80076de <USBD_CtlError>
            err++;
 8007280:	7afb      	ldrb	r3, [r7, #11]
 8007282:	3301      	adds	r3, #1
 8007284:	72fb      	strb	r3, [r7, #11]
          break;
 8007286:	e021      	b.n	80072cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	7c12      	ldrb	r2, [r2, #16]
 80072a0:	f107 0108 	add.w	r1, r7, #8
 80072a4:	4610      	mov	r0, r2
 80072a6:	4798      	blx	r3
 80072a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072aa:	e00f      	b.n	80072cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fa15 	bl	80076de <USBD_CtlError>
            err++;
 80072b4:	7afb      	ldrb	r3, [r7, #11]
 80072b6:	3301      	adds	r3, #1
 80072b8:	72fb      	strb	r3, [r7, #11]
          break;
 80072ba:	e007      	b.n	80072cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fa0d 	bl	80076de <USBD_CtlError>
          err++;
 80072c4:	7afb      	ldrb	r3, [r7, #11]
 80072c6:	3301      	adds	r3, #1
 80072c8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80072ca:	e038      	b.n	800733e <USBD_GetDescriptor+0x286>
 80072cc:	e037      	b.n	800733e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	7c1b      	ldrb	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d109      	bne.n	80072ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072de:	f107 0208 	add.w	r2, r7, #8
 80072e2:	4610      	mov	r0, r2
 80072e4:	4798      	blx	r3
 80072e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072e8:	e029      	b.n	800733e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f9f6 	bl	80076de <USBD_CtlError>
        err++;
 80072f2:	7afb      	ldrb	r3, [r7, #11]
 80072f4:	3301      	adds	r3, #1
 80072f6:	72fb      	strb	r3, [r7, #11]
      break;
 80072f8:	e021      	b.n	800733e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	7c1b      	ldrb	r3, [r3, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10d      	bne.n	800731e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730a:	f107 0208 	add.w	r2, r7, #8
 800730e:	4610      	mov	r0, r2
 8007310:	4798      	blx	r3
 8007312:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3301      	adds	r3, #1
 8007318:	2207      	movs	r2, #7
 800731a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800731c:	e00f      	b.n	800733e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f9dc 	bl	80076de <USBD_CtlError>
        err++;
 8007326:	7afb      	ldrb	r3, [r7, #11]
 8007328:	3301      	adds	r3, #1
 800732a:	72fb      	strb	r3, [r7, #11]
      break;
 800732c:	e007      	b.n	800733e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f9d4 	bl	80076de <USBD_CtlError>
      err++;
 8007336:	7afb      	ldrb	r3, [r7, #11]
 8007338:	3301      	adds	r3, #1
 800733a:	72fb      	strb	r3, [r7, #11]
      break;
 800733c:	bf00      	nop
  }

  if (err != 0U)
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d11c      	bne.n	800737e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007344:	893b      	ldrh	r3, [r7, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d011      	beq.n	800736e <USBD_GetDescriptor+0x2b6>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	88db      	ldrh	r3, [r3, #6]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00d      	beq.n	800736e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	88da      	ldrh	r2, [r3, #6]
 8007356:	893b      	ldrh	r3, [r7, #8]
 8007358:	4293      	cmp	r3, r2
 800735a:	bf28      	it	cs
 800735c:	4613      	movcs	r3, r2
 800735e:	b29b      	uxth	r3, r3
 8007360:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007362:	893b      	ldrh	r3, [r7, #8]
 8007364:	461a      	mov	r2, r3
 8007366:	68f9      	ldr	r1, [r7, #12]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fa22 	bl	80077b2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	88db      	ldrh	r3, [r3, #6]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d104      	bne.n	8007380 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa79 	bl	800786e <USBD_CtlSendStatus>
 800737c:	e000      	b.n	8007380 <USBD_GetDescriptor+0x2c8>
    return;
 800737e:	bf00      	nop
    }
  }
}
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop

08007388 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	889b      	ldrh	r3, [r3, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d130      	bne.n	80073fc <USBD_SetAddress+0x74>
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	88db      	ldrh	r3, [r3, #6]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d12c      	bne.n	80073fc <USBD_SetAddress+0x74>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	885b      	ldrh	r3, [r3, #2]
 80073a6:	2b7f      	cmp	r3, #127	; 0x7f
 80073a8:	d828      	bhi.n	80073fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	885b      	ldrh	r3, [r3, #2]
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d104      	bne.n	80073ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f98b 	bl	80076de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c8:	e01d      	b.n	8007406 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	7bfa      	ldrb	r2, [r7, #15]
 80073ce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f002 f814 	bl	8009404 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fa46 	bl	800786e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073f0:	e009      	b.n	8007406 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fa:	e004      	b.n	8007406 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f96d 	bl	80076de <USBD_CtlError>
  }
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	885b      	ldrh	r3, [r3, #2]
 800741e:	b2da      	uxtb	r2, r3
 8007420:	4b41      	ldr	r3, [pc, #260]	; (8007528 <USBD_SetConfig+0x118>)
 8007422:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007424:	4b40      	ldr	r3, [pc, #256]	; (8007528 <USBD_SetConfig+0x118>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d904      	bls.n	8007436 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f955 	bl	80076de <USBD_CtlError>
 8007434:	e075      	b.n	8007522 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800743c:	2b02      	cmp	r3, #2
 800743e:	d002      	beq.n	8007446 <USBD_SetConfig+0x36>
 8007440:	2b03      	cmp	r3, #3
 8007442:	d023      	beq.n	800748c <USBD_SetConfig+0x7c>
 8007444:	e062      	b.n	800750c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007446:	4b38      	ldr	r3, [pc, #224]	; (8007528 <USBD_SetConfig+0x118>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d01a      	beq.n	8007484 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800744e:	4b36      	ldr	r3, [pc, #216]	; (8007528 <USBD_SetConfig+0x118>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2203      	movs	r2, #3
 800745c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007460:	4b31      	ldr	r3, [pc, #196]	; (8007528 <USBD_SetConfig+0x118>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff f9e8 	bl	800683c <USBD_SetClassConfig>
 800746c:	4603      	mov	r3, r0
 800746e:	2b02      	cmp	r3, #2
 8007470:	d104      	bne.n	800747c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f932 	bl	80076de <USBD_CtlError>
            return;
 800747a:	e052      	b.n	8007522 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f9f6 	bl	800786e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007482:	e04e      	b.n	8007522 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f9f2 	bl	800786e <USBD_CtlSendStatus>
        break;
 800748a:	e04a      	b.n	8007522 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800748c:	4b26      	ldr	r3, [pc, #152]	; (8007528 <USBD_SetConfig+0x118>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d112      	bne.n	80074ba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800749c:	4b22      	ldr	r3, [pc, #136]	; (8007528 <USBD_SetConfig+0x118>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80074a6:	4b20      	ldr	r3, [pc, #128]	; (8007528 <USBD_SetConfig+0x118>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff f9e4 	bl	800687a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f9db 	bl	800786e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074b8:	e033      	b.n	8007522 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80074ba:	4b1b      	ldr	r3, [pc, #108]	; (8007528 <USBD_SetConfig+0x118>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d01d      	beq.n	8007504 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7ff f9d2 	bl	800687a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <USBD_SetConfig+0x118>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074e0:	4b11      	ldr	r3, [pc, #68]	; (8007528 <USBD_SetConfig+0x118>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7ff f9a8 	bl	800683c <USBD_SetClassConfig>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d104      	bne.n	80074fc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f8f2 	bl	80076de <USBD_CtlError>
            return;
 80074fa:	e012      	b.n	8007522 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f9b6 	bl	800786e <USBD_CtlSendStatus>
        break;
 8007502:	e00e      	b.n	8007522 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f9b2 	bl	800786e <USBD_CtlSendStatus>
        break;
 800750a:	e00a      	b.n	8007522 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f8e5 	bl	80076de <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007514:	4b04      	ldr	r3, [pc, #16]	; (8007528 <USBD_SetConfig+0x118>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff f9ad 	bl	800687a <USBD_ClrClassConfig>
        break;
 8007520:	bf00      	nop
    }
  }
}
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	20000538 	.word	0x20000538

0800752c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	88db      	ldrh	r3, [r3, #6]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d004      	beq.n	8007548 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f8cc 	bl	80076de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007546:	e022      	b.n	800758e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754e:	2b02      	cmp	r3, #2
 8007550:	dc02      	bgt.n	8007558 <USBD_GetConfig+0x2c>
 8007552:	2b00      	cmp	r3, #0
 8007554:	dc03      	bgt.n	800755e <USBD_GetConfig+0x32>
 8007556:	e015      	b.n	8007584 <USBD_GetConfig+0x58>
 8007558:	2b03      	cmp	r3, #3
 800755a:	d00b      	beq.n	8007574 <USBD_GetConfig+0x48>
 800755c:	e012      	b.n	8007584 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3308      	adds	r3, #8
 8007568:	2201      	movs	r2, #1
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f920 	bl	80077b2 <USBD_CtlSendData>
        break;
 8007572:	e00c      	b.n	800758e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3304      	adds	r3, #4
 8007578:	2201      	movs	r2, #1
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f918 	bl	80077b2 <USBD_CtlSendData>
        break;
 8007582:	e004      	b.n	800758e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f8a9 	bl	80076de <USBD_CtlError>
        break;
 800758c:	bf00      	nop
}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a6:	3b01      	subs	r3, #1
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d81e      	bhi.n	80075ea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	88db      	ldrh	r3, [r3, #6]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d004      	beq.n	80075be <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f891 	bl	80076de <USBD_CtlError>
        break;
 80075bc:	e01a      	b.n	80075f4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d005      	beq.n	80075da <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f043 0202 	orr.w	r2, r3, #2
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	330c      	adds	r3, #12
 80075de:	2202      	movs	r2, #2
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f8e5 	bl	80077b2 <USBD_CtlSendData>
      break;
 80075e8:	e004      	b.n	80075f4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f876 	bl	80076de <USBD_CtlError>
      break;
 80075f2:	bf00      	nop
  }
}
 80075f4:	bf00      	nop
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	885b      	ldrh	r3, [r3, #2]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d106      	bne.n	800761c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f929 	bl	800786e <USBD_CtlSendStatus>
  }
}
 800761c:	bf00      	nop
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007634:	3b01      	subs	r3, #1
 8007636:	2b02      	cmp	r3, #2
 8007638:	d80b      	bhi.n	8007652 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	885b      	ldrh	r3, [r3, #2]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d10c      	bne.n	800765c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f90f 	bl	800786e <USBD_CtlSendStatus>
      }
      break;
 8007650:	e004      	b.n	800765c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f842 	bl	80076de <USBD_CtlError>
      break;
 800765a:	e000      	b.n	800765e <USBD_ClrFeature+0x3a>
      break;
 800765c:	bf00      	nop
  }
}
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781a      	ldrb	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	785a      	ldrb	r2, [r3, #1]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	3302      	adds	r3, #2
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	b29a      	uxth	r2, r3
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	3303      	adds	r3, #3
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	021b      	lsls	r3, r3, #8
 8007692:	b29b      	uxth	r3, r3
 8007694:	4413      	add	r3, r2
 8007696:	b29a      	uxth	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	3304      	adds	r3, #4
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	3305      	adds	r3, #5
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	021b      	lsls	r3, r3, #8
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	4413      	add	r3, r2
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	3306      	adds	r3, #6
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	b29a      	uxth	r2, r3
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	3307      	adds	r3, #7
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	021b      	lsls	r3, r3, #8
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	4413      	add	r3, r2
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	80da      	strh	r2, [r3, #6]

}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	bc80      	pop	{r7}
 80076dc:	4770      	bx	lr

080076de <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80076e8:	2180      	movs	r1, #128	; 0x80
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 fe20 	bl	8009330 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80076f0:	2100      	movs	r1, #0
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 fe1c 	bl	8009330 <USBD_LL_StallEP>
}
 80076f8:	bf00      	nop
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d032      	beq.n	800777c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 f834 	bl	8007784 <USBD_GetLen>
 800771c:	4603      	mov	r3, r0
 800771e:	3301      	adds	r3, #1
 8007720:	b29b      	uxth	r3, r3
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	b29a      	uxth	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	75fa      	strb	r2, [r7, #23]
 8007730:	461a      	mov	r2, r3
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	4413      	add	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	7812      	ldrb	r2, [r2, #0]
 800773a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	75fa      	strb	r2, [r7, #23]
 8007742:	461a      	mov	r2, r3
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4413      	add	r3, r2
 8007748:	2203      	movs	r2, #3
 800774a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800774c:	e012      	b.n	8007774 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	60fa      	str	r2, [r7, #12]
 8007754:	7dfa      	ldrb	r2, [r7, #23]
 8007756:	1c51      	adds	r1, r2, #1
 8007758:	75f9      	strb	r1, [r7, #23]
 800775a:	4611      	mov	r1, r2
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	440a      	add	r2, r1
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	75fa      	strb	r2, [r7, #23]
 800776a:	461a      	mov	r2, r3
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4413      	add	r3, r2
 8007770:	2200      	movs	r2, #0
 8007772:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e8      	bne.n	800774e <USBD_GetString+0x4e>
    }
  }
}
 800777c:	bf00      	nop
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007790:	e005      	b.n	800779e <USBD_GetLen+0x1a>
  {
    len++;
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	3301      	adds	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3301      	adds	r3, #1
 800779c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1f5      	bne.n	8007792 <USBD_GetLen+0xe>
  }

  return len;
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bc80      	pop	{r7}
 80077b0:	4770      	bx	lr

080077b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	4613      	mov	r3, r2
 80077be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80077c8:	88fa      	ldrh	r2, [r7, #6]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80077ce:	88fa      	ldrh	r2, [r7, #6]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077d4:	88fb      	ldrh	r3, [r7, #6]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	2100      	movs	r1, #0
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f001 fe31 	bl	8009442 <USBD_LL_Transmit>

  return USBD_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	4613      	mov	r3, r2
 80077f6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077f8:	88fb      	ldrh	r3, [r7, #6]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	2100      	movs	r1, #0
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f001 fe1f 	bl	8009442 <USBD_LL_Transmit>

  return USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	4613      	mov	r3, r2
 800781a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2203      	movs	r2, #3
 8007820:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007824:	88fa      	ldrh	r2, [r7, #6]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800782c:	88fa      	ldrh	r2, [r7, #6]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007834:	88fb      	ldrh	r3, [r7, #6]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	2100      	movs	r1, #0
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f001 fe24 	bl	8009488 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	4613      	mov	r3, r2
 8007856:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	2100      	movs	r1, #0
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f001 fe12 	bl	8009488 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2204      	movs	r2, #4
 800787a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800787e:	2300      	movs	r3, #0
 8007880:	2200      	movs	r2, #0
 8007882:	2100      	movs	r1, #0
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 fddc 	bl	8009442 <USBD_LL_Transmit>

  return USBD_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2205      	movs	r2, #5
 80078a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078a4:	2300      	movs	r3, #0
 80078a6:	2200      	movs	r2, #0
 80078a8:	2100      	movs	r1, #0
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 fdec 	bl	8009488 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b085      	sub	sp, #20
 80078be:	af00      	add	r7, sp, #0
 80078c0:	4603      	mov	r3, r0
 80078c2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80078c4:	2300      	movs	r3, #0
 80078c6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80078c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078cc:	2b84      	cmp	r3, #132	; 0x84
 80078ce:	d005      	beq.n	80078dc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80078d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4413      	add	r3, r2
 80078d8:	3303      	adds	r3, #3
 80078da:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80078dc:	68fb      	ldr	r3, [r7, #12]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bc80      	pop	{r7}
 80078e6:	4770      	bx	lr

080078e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80078ec:	f000 fad0 	bl	8007e90 <vTaskStartScheduler>
  
  return osOK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80078f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078f8:	b089      	sub	sp, #36	; 0x24
 80078fa:	af04      	add	r7, sp, #16
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d020      	beq.n	800794a <osThreadCreate+0x54>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d01c      	beq.n	800794a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685c      	ldr	r4, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681d      	ldr	r5, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	691e      	ldr	r6, [r3, #16]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007922:	4618      	mov	r0, r3
 8007924:	f7ff ffc9 	bl	80078ba <makeFreeRtosPriority>
 8007928:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007932:	9202      	str	r2, [sp, #8]
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	9100      	str	r1, [sp, #0]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	4632      	mov	r2, r6
 800793c:	4629      	mov	r1, r5
 800793e:	4620      	mov	r0, r4
 8007940:	f000 f8e8 	bl	8007b14 <xTaskCreateStatic>
 8007944:	4603      	mov	r3, r0
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	e01c      	b.n	8007984 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685c      	ldr	r4, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007956:	b29e      	uxth	r6, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff ffab 	bl	80078ba <makeFreeRtosPriority>
 8007964:	4602      	mov	r2, r0
 8007966:	f107 030c 	add.w	r3, r7, #12
 800796a:	9301      	str	r3, [sp, #4]
 800796c:	9200      	str	r2, [sp, #0]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	4632      	mov	r2, r6
 8007972:	4629      	mov	r1, r5
 8007974:	4620      	mov	r0, r4
 8007976:	f000 f929 	bl	8007bcc <xTaskCreate>
 800797a:	4603      	mov	r3, r0
 800797c:	2b01      	cmp	r3, #1
 800797e:	d001      	beq.n	8007984 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007980:	2300      	movs	r3, #0
 8007982:	e000      	b.n	8007986 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007984:	68fb      	ldr	r3, [r7, #12]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800798e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <osDelay+0x16>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	e000      	b.n	80079a6 <osDelay+0x18>
 80079a4:	2301      	movs	r3, #1
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fa3e 	bl	8007e28 <vTaskDelay>
  
  return osOK;
 80079ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f103 0208 	add.w	r2, r3, #8
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f103 0208 	add.w	r2, r3, #8
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f103 0208 	add.w	r2, r3, #8
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079ea:	bf00      	nop
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bc80      	pop	{r7}
 80079f2:	4770      	bx	lr

080079f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bc80      	pop	{r7}
 8007a0a:	4770      	bx	lr

08007a0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	689a      	ldr	r2, [r3, #8]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	1c5a      	adds	r2, r3, #1
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	601a      	str	r2, [r3, #0]
}
 8007a48:	bf00      	nop
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bc80      	pop	{r7}
 8007a50:	4770      	bx	lr

08007a52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a52:	b480      	push	{r7}
 8007a54:	b085      	sub	sp, #20
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a68:	d103      	bne.n	8007a72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	e00c      	b.n	8007a8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3308      	adds	r3, #8
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e002      	b.n	8007a80 <vListInsert+0x2e>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d2f6      	bcs.n	8007a7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	601a      	str	r2, [r3, #0]
}
 8007ab8:	bf00      	nop
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bc80      	pop	{r7}
 8007ac0:	4770      	bx	lr

08007ac2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	6892      	ldr	r2, [r2, #8]
 8007ad8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6852      	ldr	r2, [r2, #4]
 8007ae2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d103      	bne.n	8007af6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	1e5a      	subs	r2, r3, #1
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bc80      	pop	{r7}
 8007b12:	4770      	bx	lr

08007b14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08e      	sub	sp, #56	; 0x38
 8007b18:	af04      	add	r7, sp, #16
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10a      	bne.n	8007b3e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b3a:	bf00      	nop
 8007b3c:	e7fe      	b.n	8007b3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10a      	bne.n	8007b5a <xTaskCreateStatic+0x46>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	61fb      	str	r3, [r7, #28]
}
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b5a:	2354      	movs	r3, #84	; 0x54
 8007b5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	2b54      	cmp	r3, #84	; 0x54
 8007b62:	d00a      	beq.n	8007b7a <xTaskCreateStatic+0x66>
	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	61bb      	str	r3, [r7, #24]
}
 8007b76:	bf00      	nop
 8007b78:	e7fe      	b.n	8007b78 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01e      	beq.n	8007bbe <xTaskCreateStatic+0xaa>
 8007b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d01b      	beq.n	8007bbe <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b8e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b98:	2300      	movs	r3, #0
 8007b9a:	9303      	str	r3, [sp, #12]
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	9302      	str	r3, [sp, #8]
 8007ba0:	f107 0314 	add.w	r3, r7, #20
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	68b9      	ldr	r1, [r7, #8]
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 f850 	bl	8007c56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bb8:	f000 f8cc 	bl	8007d54 <prvAddNewTaskToReadyList>
 8007bbc:	e001      	b.n	8007bc2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bc2:	697b      	ldr	r3, [r7, #20]
	}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3728      	adds	r7, #40	; 0x28
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08c      	sub	sp, #48	; 0x30
 8007bd0:	af04      	add	r7, sp, #16
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bdc:	88fb      	ldrh	r3, [r7, #6]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 fe85 	bl	80088f0 <pvPortMalloc>
 8007be6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00e      	beq.n	8007c0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007bee:	2054      	movs	r0, #84	; 0x54
 8007bf0:	f000 fe7e 	bl	80088f0 <pvPortMalloc>
 8007bf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	631a      	str	r2, [r3, #48]	; 0x30
 8007c02:	e005      	b.n	8007c10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c04:	6978      	ldr	r0, [r7, #20]
 8007c06:	f000 ff37 	bl	8008a78 <vPortFree>
 8007c0a:	e001      	b.n	8007c10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d017      	beq.n	8007c46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c1e:	88fa      	ldrh	r2, [r7, #6]
 8007c20:	2300      	movs	r3, #0
 8007c22:	9303      	str	r3, [sp, #12]
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	9302      	str	r3, [sp, #8]
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	68b9      	ldr	r1, [r7, #8]
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 f80e 	bl	8007c56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c3a:	69f8      	ldr	r0, [r7, #28]
 8007c3c:	f000 f88a 	bl	8007d54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c40:	2301      	movs	r3, #1
 8007c42:	61bb      	str	r3, [r7, #24]
 8007c44:	e002      	b.n	8007c4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
	}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3720      	adds	r7, #32
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b088      	sub	sp, #32
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	607a      	str	r2, [r7, #4]
 8007c62:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	f023 0307 	bic.w	r3, r3, #7
 8007c7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00a      	beq.n	8007c9e <prvInitialiseNewTask+0x48>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	617b      	str	r3, [r7, #20]
}
 8007c9a:	bf00      	nop
 8007c9c:	e7fe      	b.n	8007c9c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	61fb      	str	r3, [r7, #28]
 8007ca2:	e012      	b.n	8007cca <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	4413      	add	r3, r2
 8007caa:	7819      	ldrb	r1, [r3, #0]
 8007cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	3334      	adds	r3, #52	; 0x34
 8007cb4:	460a      	mov	r2, r1
 8007cb6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d006      	beq.n	8007cd2 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	61fb      	str	r3, [r7, #28]
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	2b0f      	cmp	r3, #15
 8007cce:	d9e9      	bls.n	8007ca4 <prvInitialiseNewTask+0x4e>
 8007cd0:	e000      	b.n	8007cd4 <prvInitialiseNewTask+0x7e>
		{
			break;
 8007cd2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cde:	2b06      	cmp	r3, #6
 8007ce0:	d901      	bls.n	8007ce6 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ce2:	2306      	movs	r3, #6
 8007ce4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cf0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7ff fe79 	bl	80079f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d04:	3318      	adds	r3, #24
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7ff fe74 	bl	80079f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	f1c3 0207 	rsb	r2, r3, #7
 8007d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d20:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	2200      	movs	r2, #0
 8007d26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	68f9      	ldr	r1, [r7, #12]
 8007d34:	69b8      	ldr	r0, [r7, #24]
 8007d36:	f000 fc2b 	bl	8008590 <pxPortInitialiseStack>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d4c:	bf00      	nop
 8007d4e:	3720      	adds	r7, #32
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d5c:	f000 fd06 	bl	800876c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d60:	4b2a      	ldr	r3, [pc, #168]	; (8007e0c <prvAddNewTaskToReadyList+0xb8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3301      	adds	r3, #1
 8007d66:	4a29      	ldr	r2, [pc, #164]	; (8007e0c <prvAddNewTaskToReadyList+0xb8>)
 8007d68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d6a:	4b29      	ldr	r3, [pc, #164]	; (8007e10 <prvAddNewTaskToReadyList+0xbc>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d109      	bne.n	8007d86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d72:	4a27      	ldr	r2, [pc, #156]	; (8007e10 <prvAddNewTaskToReadyList+0xbc>)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d78:	4b24      	ldr	r3, [pc, #144]	; (8007e0c <prvAddNewTaskToReadyList+0xb8>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d110      	bne.n	8007da2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d80:	f000 fac0 	bl	8008304 <prvInitialiseTaskLists>
 8007d84:	e00d      	b.n	8007da2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d86:	4b23      	ldr	r3, [pc, #140]	; (8007e14 <prvAddNewTaskToReadyList+0xc0>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d109      	bne.n	8007da2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d8e:	4b20      	ldr	r3, [pc, #128]	; (8007e10 <prvAddNewTaskToReadyList+0xbc>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d802      	bhi.n	8007da2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d9c:	4a1c      	ldr	r2, [pc, #112]	; (8007e10 <prvAddNewTaskToReadyList+0xbc>)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007da2:	4b1d      	ldr	r3, [pc, #116]	; (8007e18 <prvAddNewTaskToReadyList+0xc4>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3301      	adds	r3, #1
 8007da8:	4a1b      	ldr	r2, [pc, #108]	; (8007e18 <prvAddNewTaskToReadyList+0xc4>)
 8007daa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db0:	2201      	movs	r2, #1
 8007db2:	409a      	lsls	r2, r3
 8007db4:	4b19      	ldr	r3, [pc, #100]	; (8007e1c <prvAddNewTaskToReadyList+0xc8>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	4a18      	ldr	r2, [pc, #96]	; (8007e1c <prvAddNewTaskToReadyList+0xc8>)
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4a15      	ldr	r2, [pc, #84]	; (8007e20 <prvAddNewTaskToReadyList+0xcc>)
 8007dcc:	441a      	add	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	f7ff fe19 	bl	8007a0c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007dda:	f000 fcf7 	bl	80087cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007dde:	4b0d      	ldr	r3, [pc, #52]	; (8007e14 <prvAddNewTaskToReadyList+0xc0>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00e      	beq.n	8007e04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007de6:	4b0a      	ldr	r3, [pc, #40]	; (8007e10 <prvAddNewTaskToReadyList+0xbc>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d207      	bcs.n	8007e04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007df4:	4b0b      	ldr	r3, [pc, #44]	; (8007e24 <prvAddNewTaskToReadyList+0xd0>)
 8007df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	2000063c 	.word	0x2000063c
 8007e10:	2000053c 	.word	0x2000053c
 8007e14:	20000648 	.word	0x20000648
 8007e18:	20000658 	.word	0x20000658
 8007e1c:	20000644 	.word	0x20000644
 8007e20:	20000540 	.word	0x20000540
 8007e24:	e000ed04 	.word	0xe000ed04

08007e28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d017      	beq.n	8007e6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e3a:	4b13      	ldr	r3, [pc, #76]	; (8007e88 <vTaskDelay+0x60>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <vTaskDelay+0x30>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	60bb      	str	r3, [r7, #8]
}
 8007e54:	bf00      	nop
 8007e56:	e7fe      	b.n	8007e56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e58:	f000 f87a 	bl	8007f50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fb30 	bl	80084c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e64:	f000 f882 	bl	8007f6c <xTaskResumeAll>
 8007e68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d107      	bne.n	8007e80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e70:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <vTaskDelay+0x64>)
 8007e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e80:	bf00      	nop
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20000664 	.word	0x20000664
 8007e8c:	e000ed04 	.word	0xe000ed04

08007e90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08a      	sub	sp, #40	; 0x28
 8007e94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e9e:	463a      	mov	r2, r7
 8007ea0:	1d39      	adds	r1, r7, #4
 8007ea2:	f107 0308 	add.w	r3, r7, #8
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7f8 f9c2 	bl	8000230 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	9202      	str	r2, [sp, #8]
 8007eb4:	9301      	str	r3, [sp, #4]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	460a      	mov	r2, r1
 8007ebe:	491e      	ldr	r1, [pc, #120]	; (8007f38 <vTaskStartScheduler+0xa8>)
 8007ec0:	481e      	ldr	r0, [pc, #120]	; (8007f3c <vTaskStartScheduler+0xac>)
 8007ec2:	f7ff fe27 	bl	8007b14 <xTaskCreateStatic>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	4a1d      	ldr	r2, [pc, #116]	; (8007f40 <vTaskStartScheduler+0xb0>)
 8007eca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ecc:	4b1c      	ldr	r3, [pc, #112]	; (8007f40 <vTaskStartScheduler+0xb0>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	e001      	b.n	8007ede <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007eda:	2300      	movs	r3, #0
 8007edc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d116      	bne.n	8007f12 <vTaskStartScheduler+0x82>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	613b      	str	r3, [r7, #16]
}
 8007ef6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ef8:	4b12      	ldr	r3, [pc, #72]	; (8007f44 <vTaskStartScheduler+0xb4>)
 8007efa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007efe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f00:	4b11      	ldr	r3, [pc, #68]	; (8007f48 <vTaskStartScheduler+0xb8>)
 8007f02:	2201      	movs	r2, #1
 8007f04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007f06:	4b11      	ldr	r3, [pc, #68]	; (8007f4c <vTaskStartScheduler+0xbc>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f0c:	f000 fbbc 	bl	8008688 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f10:	e00e      	b.n	8007f30 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f18:	d10a      	bne.n	8007f30 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	60fb      	str	r3, [r7, #12]
}
 8007f2c:	bf00      	nop
 8007f2e:	e7fe      	b.n	8007f2e <vTaskStartScheduler+0x9e>
}
 8007f30:	bf00      	nop
 8007f32:	3718      	adds	r7, #24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	08009634 	.word	0x08009634
 8007f3c:	080082d5 	.word	0x080082d5
 8007f40:	20000660 	.word	0x20000660
 8007f44:	2000065c 	.word	0x2000065c
 8007f48:	20000648 	.word	0x20000648
 8007f4c:	20000640 	.word	0x20000640

08007f50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f50:	b480      	push	{r7}
 8007f52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007f54:	4b04      	ldr	r3, [pc, #16]	; (8007f68 <vTaskSuspendAll+0x18>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	4a03      	ldr	r2, [pc, #12]	; (8007f68 <vTaskSuspendAll+0x18>)
 8007f5c:	6013      	str	r3, [r2, #0]
}
 8007f5e:	bf00      	nop
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bc80      	pop	{r7}
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	20000664 	.word	0x20000664

08007f6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f7a:	4b41      	ldr	r3, [pc, #260]	; (8008080 <xTaskResumeAll+0x114>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10a      	bne.n	8007f98 <xTaskResumeAll+0x2c>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	603b      	str	r3, [r7, #0]
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f98:	f000 fbe8 	bl	800876c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f9c:	4b38      	ldr	r3, [pc, #224]	; (8008080 <xTaskResumeAll+0x114>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	4a37      	ldr	r2, [pc, #220]	; (8008080 <xTaskResumeAll+0x114>)
 8007fa4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fa6:	4b36      	ldr	r3, [pc, #216]	; (8008080 <xTaskResumeAll+0x114>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d161      	bne.n	8008072 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fae:	4b35      	ldr	r3, [pc, #212]	; (8008084 <xTaskResumeAll+0x118>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d05d      	beq.n	8008072 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fb6:	e02e      	b.n	8008016 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007fb8:	4b33      	ldr	r3, [pc, #204]	; (8008088 <xTaskResumeAll+0x11c>)
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	3318      	adds	r3, #24
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7ff fd7c 	bl	8007ac2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff fd77 	bl	8007ac2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd8:	2201      	movs	r2, #1
 8007fda:	409a      	lsls	r2, r3
 8007fdc:	4b2b      	ldr	r3, [pc, #172]	; (800808c <xTaskResumeAll+0x120>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	4a2a      	ldr	r2, [pc, #168]	; (800808c <xTaskResumeAll+0x120>)
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fea:	4613      	mov	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4a27      	ldr	r2, [pc, #156]	; (8008090 <xTaskResumeAll+0x124>)
 8007ff4:	441a      	add	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	f7ff fd05 	bl	8007a0c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008006:	4b23      	ldr	r3, [pc, #140]	; (8008094 <xTaskResumeAll+0x128>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	429a      	cmp	r2, r3
 800800e:	d302      	bcc.n	8008016 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008010:	4b21      	ldr	r3, [pc, #132]	; (8008098 <xTaskResumeAll+0x12c>)
 8008012:	2201      	movs	r2, #1
 8008014:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008016:	4b1c      	ldr	r3, [pc, #112]	; (8008088 <xTaskResumeAll+0x11c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1cc      	bne.n	8007fb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008024:	f000 fa0c 	bl	8008440 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008028:	4b1c      	ldr	r3, [pc, #112]	; (800809c <xTaskResumeAll+0x130>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d010      	beq.n	8008056 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008034:	f000 f836 	bl	80080a4 <xTaskIncrementTick>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800803e:	4b16      	ldr	r3, [pc, #88]	; (8008098 <xTaskResumeAll+0x12c>)
 8008040:	2201      	movs	r2, #1
 8008042:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3b01      	subs	r3, #1
 8008048:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1f1      	bne.n	8008034 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008050:	4b12      	ldr	r3, [pc, #72]	; (800809c <xTaskResumeAll+0x130>)
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008056:	4b10      	ldr	r3, [pc, #64]	; (8008098 <xTaskResumeAll+0x12c>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d009      	beq.n	8008072 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800805e:	2301      	movs	r3, #1
 8008060:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008062:	4b0f      	ldr	r3, [pc, #60]	; (80080a0 <xTaskResumeAll+0x134>)
 8008064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008072:	f000 fbab 	bl	80087cc <vPortExitCritical>

	return xAlreadyYielded;
 8008076:	68bb      	ldr	r3, [r7, #8]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	20000664 	.word	0x20000664
 8008084:	2000063c 	.word	0x2000063c
 8008088:	200005fc 	.word	0x200005fc
 800808c:	20000644 	.word	0x20000644
 8008090:	20000540 	.word	0x20000540
 8008094:	2000053c 	.word	0x2000053c
 8008098:	20000650 	.word	0x20000650
 800809c:	2000064c 	.word	0x2000064c
 80080a0:	e000ed04 	.word	0xe000ed04

080080a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ae:	4b51      	ldr	r3, [pc, #324]	; (80081f4 <xTaskIncrementTick+0x150>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f040 808d 	bne.w	80081d2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080b8:	4b4f      	ldr	r3, [pc, #316]	; (80081f8 <xTaskIncrementTick+0x154>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3301      	adds	r3, #1
 80080be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080c0:	4a4d      	ldr	r2, [pc, #308]	; (80081f8 <xTaskIncrementTick+0x154>)
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d120      	bne.n	800810e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80080cc:	4b4b      	ldr	r3, [pc, #300]	; (80081fc <xTaskIncrementTick+0x158>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <xTaskIncrementTick+0x48>
	__asm volatile
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	603b      	str	r3, [r7, #0]
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <xTaskIncrementTick+0x46>
 80080ec:	4b43      	ldr	r3, [pc, #268]	; (80081fc <xTaskIncrementTick+0x158>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	60fb      	str	r3, [r7, #12]
 80080f2:	4b43      	ldr	r3, [pc, #268]	; (8008200 <xTaskIncrementTick+0x15c>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a41      	ldr	r2, [pc, #260]	; (80081fc <xTaskIncrementTick+0x158>)
 80080f8:	6013      	str	r3, [r2, #0]
 80080fa:	4a41      	ldr	r2, [pc, #260]	; (8008200 <xTaskIncrementTick+0x15c>)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	4b40      	ldr	r3, [pc, #256]	; (8008204 <xTaskIncrementTick+0x160>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3301      	adds	r3, #1
 8008106:	4a3f      	ldr	r2, [pc, #252]	; (8008204 <xTaskIncrementTick+0x160>)
 8008108:	6013      	str	r3, [r2, #0]
 800810a:	f000 f999 	bl	8008440 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800810e:	4b3e      	ldr	r3, [pc, #248]	; (8008208 <xTaskIncrementTick+0x164>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	429a      	cmp	r2, r3
 8008116:	d34d      	bcc.n	80081b4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008118:	4b38      	ldr	r3, [pc, #224]	; (80081fc <xTaskIncrementTick+0x158>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <xTaskIncrementTick+0x82>
 8008122:	2301      	movs	r3, #1
 8008124:	e000      	b.n	8008128 <xTaskIncrementTick+0x84>
 8008126:	2300      	movs	r3, #0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d004      	beq.n	8008136 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800812c:	4b36      	ldr	r3, [pc, #216]	; (8008208 <xTaskIncrementTick+0x164>)
 800812e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008132:	601a      	str	r2, [r3, #0]
					break;
 8008134:	e03e      	b.n	80081b4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008136:	4b31      	ldr	r3, [pc, #196]	; (80081fc <xTaskIncrementTick+0x158>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	429a      	cmp	r2, r3
 800814c:	d203      	bcs.n	8008156 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800814e:	4a2e      	ldr	r2, [pc, #184]	; (8008208 <xTaskIncrementTick+0x164>)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6013      	str	r3, [r2, #0]
						break;
 8008154:	e02e      	b.n	80081b4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	3304      	adds	r3, #4
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff fcb1 	bl	8007ac2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008164:	2b00      	cmp	r3, #0
 8008166:	d004      	beq.n	8008172 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	3318      	adds	r3, #24
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff fca8 	bl	8007ac2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008176:	2201      	movs	r2, #1
 8008178:	409a      	lsls	r2, r3
 800817a:	4b24      	ldr	r3, [pc, #144]	; (800820c <xTaskIncrementTick+0x168>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4313      	orrs	r3, r2
 8008180:	4a22      	ldr	r2, [pc, #136]	; (800820c <xTaskIncrementTick+0x168>)
 8008182:	6013      	str	r3, [r2, #0]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4a1f      	ldr	r2, [pc, #124]	; (8008210 <xTaskIncrementTick+0x16c>)
 8008192:	441a      	add	r2, r3
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	3304      	adds	r3, #4
 8008198:	4619      	mov	r1, r3
 800819a:	4610      	mov	r0, r2
 800819c:	f7ff fc36 	bl	8007a0c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a4:	4b1b      	ldr	r3, [pc, #108]	; (8008214 <xTaskIncrementTick+0x170>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d3b4      	bcc.n	8008118 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80081ae:	2301      	movs	r3, #1
 80081b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081b2:	e7b1      	b.n	8008118 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081b4:	4b17      	ldr	r3, [pc, #92]	; (8008214 <xTaskIncrementTick+0x170>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ba:	4915      	ldr	r1, [pc, #84]	; (8008210 <xTaskIncrementTick+0x16c>)
 80081bc:	4613      	mov	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d907      	bls.n	80081dc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80081cc:	2301      	movs	r3, #1
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	e004      	b.n	80081dc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80081d2:	4b11      	ldr	r3, [pc, #68]	; (8008218 <xTaskIncrementTick+0x174>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	3301      	adds	r3, #1
 80081d8:	4a0f      	ldr	r2, [pc, #60]	; (8008218 <xTaskIncrementTick+0x174>)
 80081da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80081dc:	4b0f      	ldr	r3, [pc, #60]	; (800821c <xTaskIncrementTick+0x178>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80081e4:	2301      	movs	r3, #1
 80081e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80081e8:	697b      	ldr	r3, [r7, #20]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20000664 	.word	0x20000664
 80081f8:	20000640 	.word	0x20000640
 80081fc:	200005f4 	.word	0x200005f4
 8008200:	200005f8 	.word	0x200005f8
 8008204:	20000654 	.word	0x20000654
 8008208:	2000065c 	.word	0x2000065c
 800820c:	20000644 	.word	0x20000644
 8008210:	20000540 	.word	0x20000540
 8008214:	2000053c 	.word	0x2000053c
 8008218:	2000064c 	.word	0x2000064c
 800821c:	20000650 	.word	0x20000650

08008220 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008220:	b480      	push	{r7}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008226:	4b26      	ldr	r3, [pc, #152]	; (80082c0 <vTaskSwitchContext+0xa0>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800822e:	4b25      	ldr	r3, [pc, #148]	; (80082c4 <vTaskSwitchContext+0xa4>)
 8008230:	2201      	movs	r2, #1
 8008232:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008234:	e03f      	b.n	80082b6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008236:	4b23      	ldr	r3, [pc, #140]	; (80082c4 <vTaskSwitchContext+0xa4>)
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800823c:	4b22      	ldr	r3, [pc, #136]	; (80082c8 <vTaskSwitchContext+0xa8>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	fab3 f383 	clz	r3, r3
 8008248:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800824a:	7afb      	ldrb	r3, [r7, #11]
 800824c:	f1c3 031f 	rsb	r3, r3, #31
 8008250:	617b      	str	r3, [r7, #20]
 8008252:	491e      	ldr	r1, [pc, #120]	; (80082cc <vTaskSwitchContext+0xac>)
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	440b      	add	r3, r1
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <vTaskSwitchContext+0x5c>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	607b      	str	r3, [r7, #4]
}
 8008278:	bf00      	nop
 800827a:	e7fe      	b.n	800827a <vTaskSwitchContext+0x5a>
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4a11      	ldr	r2, [pc, #68]	; (80082cc <vTaskSwitchContext+0xac>)
 8008288:	4413      	add	r3, r2
 800828a:	613b      	str	r3, [r7, #16]
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	605a      	str	r2, [r3, #4]
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	685a      	ldr	r2, [r3, #4]
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	3308      	adds	r3, #8
 800829e:	429a      	cmp	r2, r3
 80082a0:	d104      	bne.n	80082ac <vTaskSwitchContext+0x8c>
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	605a      	str	r2, [r3, #4]
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	4a07      	ldr	r2, [pc, #28]	; (80082d0 <vTaskSwitchContext+0xb0>)
 80082b4:	6013      	str	r3, [r2, #0]
}
 80082b6:	bf00      	nop
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr
 80082c0:	20000664 	.word	0x20000664
 80082c4:	20000650 	.word	0x20000650
 80082c8:	20000644 	.word	0x20000644
 80082cc:	20000540 	.word	0x20000540
 80082d0:	2000053c 	.word	0x2000053c

080082d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082dc:	f000 f852 	bl	8008384 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082e0:	4b06      	ldr	r3, [pc, #24]	; (80082fc <prvIdleTask+0x28>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d9f9      	bls.n	80082dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <prvIdleTask+0x2c>)
 80082ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082f8:	e7f0      	b.n	80082dc <prvIdleTask+0x8>
 80082fa:	bf00      	nop
 80082fc:	20000540 	.word	0x20000540
 8008300:	e000ed04 	.word	0xe000ed04

08008304 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800830a:	2300      	movs	r3, #0
 800830c:	607b      	str	r3, [r7, #4]
 800830e:	e00c      	b.n	800832a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	4613      	mov	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4a12      	ldr	r2, [pc, #72]	; (8008364 <prvInitialiseTaskLists+0x60>)
 800831c:	4413      	add	r3, r2
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff fb49 	bl	80079b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3301      	adds	r3, #1
 8008328:	607b      	str	r3, [r7, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b06      	cmp	r3, #6
 800832e:	d9ef      	bls.n	8008310 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008330:	480d      	ldr	r0, [pc, #52]	; (8008368 <prvInitialiseTaskLists+0x64>)
 8008332:	f7ff fb40 	bl	80079b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008336:	480d      	ldr	r0, [pc, #52]	; (800836c <prvInitialiseTaskLists+0x68>)
 8008338:	f7ff fb3d 	bl	80079b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800833c:	480c      	ldr	r0, [pc, #48]	; (8008370 <prvInitialiseTaskLists+0x6c>)
 800833e:	f7ff fb3a 	bl	80079b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008342:	480c      	ldr	r0, [pc, #48]	; (8008374 <prvInitialiseTaskLists+0x70>)
 8008344:	f7ff fb37 	bl	80079b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008348:	480b      	ldr	r0, [pc, #44]	; (8008378 <prvInitialiseTaskLists+0x74>)
 800834a:	f7ff fb34 	bl	80079b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800834e:	4b0b      	ldr	r3, [pc, #44]	; (800837c <prvInitialiseTaskLists+0x78>)
 8008350:	4a05      	ldr	r2, [pc, #20]	; (8008368 <prvInitialiseTaskLists+0x64>)
 8008352:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008354:	4b0a      	ldr	r3, [pc, #40]	; (8008380 <prvInitialiseTaskLists+0x7c>)
 8008356:	4a05      	ldr	r2, [pc, #20]	; (800836c <prvInitialiseTaskLists+0x68>)
 8008358:	601a      	str	r2, [r3, #0]
}
 800835a:	bf00      	nop
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20000540 	.word	0x20000540
 8008368:	200005cc 	.word	0x200005cc
 800836c:	200005e0 	.word	0x200005e0
 8008370:	200005fc 	.word	0x200005fc
 8008374:	20000610 	.word	0x20000610
 8008378:	20000628 	.word	0x20000628
 800837c:	200005f4 	.word	0x200005f4
 8008380:	200005f8 	.word	0x200005f8

08008384 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800838a:	e019      	b.n	80083c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800838c:	f000 f9ee 	bl	800876c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008390:	4b10      	ldr	r3, [pc, #64]	; (80083d4 <prvCheckTasksWaitingTermination+0x50>)
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3304      	adds	r3, #4
 800839c:	4618      	mov	r0, r3
 800839e:	f7ff fb90 	bl	8007ac2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083a2:	4b0d      	ldr	r3, [pc, #52]	; (80083d8 <prvCheckTasksWaitingTermination+0x54>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	4a0b      	ldr	r2, [pc, #44]	; (80083d8 <prvCheckTasksWaitingTermination+0x54>)
 80083aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083ac:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <prvCheckTasksWaitingTermination+0x58>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	4a0a      	ldr	r2, [pc, #40]	; (80083dc <prvCheckTasksWaitingTermination+0x58>)
 80083b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083b6:	f000 fa09 	bl	80087cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f810 	bl	80083e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083c0:	4b06      	ldr	r3, [pc, #24]	; (80083dc <prvCheckTasksWaitingTermination+0x58>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e1      	bne.n	800838c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20000610 	.word	0x20000610
 80083d8:	2000063c 	.word	0x2000063c
 80083dc:	20000624 	.word	0x20000624

080083e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d108      	bne.n	8008404 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fb3e 	bl	8008a78 <vPortFree>
				vPortFree( pxTCB );
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fb3b 	bl	8008a78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008402:	e018      	b.n	8008436 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800840a:	2b01      	cmp	r3, #1
 800840c:	d103      	bne.n	8008416 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fb32 	bl	8008a78 <vPortFree>
	}
 8008414:	e00f      	b.n	8008436 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800841c:	2b02      	cmp	r3, #2
 800841e:	d00a      	beq.n	8008436 <prvDeleteTCB+0x56>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	60fb      	str	r3, [r7, #12]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <prvDeleteTCB+0x54>
	}
 8008436:	bf00      	nop
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008446:	4b0e      	ldr	r3, [pc, #56]	; (8008480 <prvResetNextTaskUnblockTime+0x40>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <prvResetNextTaskUnblockTime+0x14>
 8008450:	2301      	movs	r3, #1
 8008452:	e000      	b.n	8008456 <prvResetNextTaskUnblockTime+0x16>
 8008454:	2300      	movs	r3, #0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d004      	beq.n	8008464 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800845a:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <prvResetNextTaskUnblockTime+0x44>)
 800845c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008460:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008462:	e008      	b.n	8008476 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008464:	4b06      	ldr	r3, [pc, #24]	; (8008480 <prvResetNextTaskUnblockTime+0x40>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	4a04      	ldr	r2, [pc, #16]	; (8008484 <prvResetNextTaskUnblockTime+0x44>)
 8008474:	6013      	str	r3, [r2, #0]
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	bc80      	pop	{r7}
 800847e:	4770      	bx	lr
 8008480:	200005f4 	.word	0x200005f4
 8008484:	2000065c 	.word	0x2000065c

08008488 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800848e:	4b0b      	ldr	r3, [pc, #44]	; (80084bc <xTaskGetSchedulerState+0x34>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d102      	bne.n	800849c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008496:	2301      	movs	r3, #1
 8008498:	607b      	str	r3, [r7, #4]
 800849a:	e008      	b.n	80084ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800849c:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <xTaskGetSchedulerState+0x38>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d102      	bne.n	80084aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084a4:	2302      	movs	r3, #2
 80084a6:	607b      	str	r3, [r7, #4]
 80084a8:	e001      	b.n	80084ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084aa:	2300      	movs	r3, #0
 80084ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084ae:	687b      	ldr	r3, [r7, #4]
	}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bc80      	pop	{r7}
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	20000648 	.word	0x20000648
 80084c0:	20000664 	.word	0x20000664

080084c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084ce:	4b29      	ldr	r3, [pc, #164]	; (8008574 <prvAddCurrentTaskToDelayedList+0xb0>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084d4:	4b28      	ldr	r3, [pc, #160]	; (8008578 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3304      	adds	r3, #4
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff faf1 	bl	8007ac2 <uxListRemove>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10b      	bne.n	80084fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80084e6:	4b24      	ldr	r3, [pc, #144]	; (8008578 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	2201      	movs	r2, #1
 80084ee:	fa02 f303 	lsl.w	r3, r2, r3
 80084f2:	43da      	mvns	r2, r3
 80084f4:	4b21      	ldr	r3, [pc, #132]	; (800857c <prvAddCurrentTaskToDelayedList+0xb8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4013      	ands	r3, r2
 80084fa:	4a20      	ldr	r2, [pc, #128]	; (800857c <prvAddCurrentTaskToDelayedList+0xb8>)
 80084fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008504:	d10a      	bne.n	800851c <prvAddCurrentTaskToDelayedList+0x58>
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d007      	beq.n	800851c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800850c:	4b1a      	ldr	r3, [pc, #104]	; (8008578 <prvAddCurrentTaskToDelayedList+0xb4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3304      	adds	r3, #4
 8008512:	4619      	mov	r1, r3
 8008514:	481a      	ldr	r0, [pc, #104]	; (8008580 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008516:	f7ff fa79 	bl	8007a0c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800851a:	e026      	b.n	800856a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4413      	add	r3, r2
 8008522:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008524:	4b14      	ldr	r3, [pc, #80]	; (8008578 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	429a      	cmp	r2, r3
 8008532:	d209      	bcs.n	8008548 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008534:	4b13      	ldr	r3, [pc, #76]	; (8008584 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	4b0f      	ldr	r3, [pc, #60]	; (8008578 <prvAddCurrentTaskToDelayedList+0xb4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3304      	adds	r3, #4
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f7ff fa86 	bl	8007a52 <vListInsert>
}
 8008546:	e010      	b.n	800856a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008548:	4b0f      	ldr	r3, [pc, #60]	; (8008588 <prvAddCurrentTaskToDelayedList+0xc4>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <prvAddCurrentTaskToDelayedList+0xb4>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3304      	adds	r3, #4
 8008552:	4619      	mov	r1, r3
 8008554:	4610      	mov	r0, r2
 8008556:	f7ff fa7c 	bl	8007a52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800855a:	4b0c      	ldr	r3, [pc, #48]	; (800858c <prvAddCurrentTaskToDelayedList+0xc8>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	429a      	cmp	r2, r3
 8008562:	d202      	bcs.n	800856a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008564:	4a09      	ldr	r2, [pc, #36]	; (800858c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6013      	str	r3, [r2, #0]
}
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20000640 	.word	0x20000640
 8008578:	2000053c 	.word	0x2000053c
 800857c:	20000644 	.word	0x20000644
 8008580:	20000628 	.word	0x20000628
 8008584:	200005f8 	.word	0x200005f8
 8008588:	200005f4 	.word	0x200005f4
 800858c:	2000065c 	.word	0x2000065c

08008590 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3b04      	subs	r3, #4
 80085a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3b04      	subs	r3, #4
 80085ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f023 0201 	bic.w	r2, r3, #1
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3b04      	subs	r3, #4
 80085be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085c0:	4a08      	ldr	r2, [pc, #32]	; (80085e4 <pxPortInitialiseStack+0x54>)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3b14      	subs	r3, #20
 80085ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3b20      	subs	r3, #32
 80085d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085d8:	68fb      	ldr	r3, [r7, #12]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	bc80      	pop	{r7}
 80085e2:	4770      	bx	lr
 80085e4:	080085e9 	.word	0x080085e9

080085e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80085ee:	2300      	movs	r3, #0
 80085f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085f2:	4b12      	ldr	r3, [pc, #72]	; (800863c <prvTaskExitError+0x54>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085fa:	d00a      	beq.n	8008612 <prvTaskExitError+0x2a>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	60fb      	str	r3, [r7, #12]
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <prvTaskExitError+0x28>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	60bb      	str	r3, [r7, #8]
}
 8008624:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008626:	bf00      	nop
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0fc      	beq.n	8008628 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800862e:	bf00      	nop
 8008630:	bf00      	nop
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	2000011c 	.word	0x2000011c

08008640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <pxCurrentTCBConst2>)
 8008642:	6819      	ldr	r1, [r3, #0]
 8008644:	6808      	ldr	r0, [r1, #0]
 8008646:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800864a:	f380 8809 	msr	PSP, r0
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f380 8811 	msr	BASEPRI, r0
 800865a:	f04e 0e0d 	orr.w	lr, lr, #13
 800865e:	4770      	bx	lr

08008660 <pxCurrentTCBConst2>:
 8008660:	2000053c 	.word	0x2000053c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop

08008668 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008668:	4806      	ldr	r0, [pc, #24]	; (8008684 <prvPortStartFirstTask+0x1c>)
 800866a:	6800      	ldr	r0, [r0, #0]
 800866c:	6800      	ldr	r0, [r0, #0]
 800866e:	f380 8808 	msr	MSP, r0
 8008672:	b662      	cpsie	i
 8008674:	b661      	cpsie	f
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	df00      	svc	0
 8008680:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008682:	bf00      	nop
 8008684:	e000ed08 	.word	0xe000ed08

08008688 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800868e:	4b32      	ldr	r3, [pc, #200]	; (8008758 <xPortStartScheduler+0xd0>)
 8008690:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	22ff      	movs	r2, #255	; 0xff
 800869e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086a8:	78fb      	ldrb	r3, [r7, #3]
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	4b2a      	ldr	r3, [pc, #168]	; (800875c <xPortStartScheduler+0xd4>)
 80086b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086b6:	4b2a      	ldr	r3, [pc, #168]	; (8008760 <xPortStartScheduler+0xd8>)
 80086b8:	2207      	movs	r2, #7
 80086ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086bc:	e009      	b.n	80086d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80086be:	4b28      	ldr	r3, [pc, #160]	; (8008760 <xPortStartScheduler+0xd8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	4a26      	ldr	r2, [pc, #152]	; (8008760 <xPortStartScheduler+0xd8>)
 80086c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086c8:	78fb      	ldrb	r3, [r7, #3]
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086da:	2b80      	cmp	r3, #128	; 0x80
 80086dc:	d0ef      	beq.n	80086be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086de:	4b20      	ldr	r3, [pc, #128]	; (8008760 <xPortStartScheduler+0xd8>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f1c3 0307 	rsb	r3, r3, #7
 80086e6:	2b04      	cmp	r3, #4
 80086e8:	d00a      	beq.n	8008700 <xPortStartScheduler+0x78>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	60bb      	str	r3, [r7, #8]
}
 80086fc:	bf00      	nop
 80086fe:	e7fe      	b.n	80086fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008700:	4b17      	ldr	r3, [pc, #92]	; (8008760 <xPortStartScheduler+0xd8>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	4a16      	ldr	r2, [pc, #88]	; (8008760 <xPortStartScheduler+0xd8>)
 8008708:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800870a:	4b15      	ldr	r3, [pc, #84]	; (8008760 <xPortStartScheduler+0xd8>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008712:	4a13      	ldr	r2, [pc, #76]	; (8008760 <xPortStartScheduler+0xd8>)
 8008714:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	b2da      	uxtb	r2, r3
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800871e:	4b11      	ldr	r3, [pc, #68]	; (8008764 <xPortStartScheduler+0xdc>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a10      	ldr	r2, [pc, #64]	; (8008764 <xPortStartScheduler+0xdc>)
 8008724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008728:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800872a:	4b0e      	ldr	r3, [pc, #56]	; (8008764 <xPortStartScheduler+0xdc>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a0d      	ldr	r2, [pc, #52]	; (8008764 <xPortStartScheduler+0xdc>)
 8008730:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008734:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008736:	f000 f8b9 	bl	80088ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800873a:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <xPortStartScheduler+0xe0>)
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008740:	f7ff ff92 	bl	8008668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008744:	f7ff fd6c 	bl	8008220 <vTaskSwitchContext>
	prvTaskExitError();
 8008748:	f7ff ff4e 	bl	80085e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	e000e400 	.word	0xe000e400
 800875c:	20000668 	.word	0x20000668
 8008760:	2000066c 	.word	0x2000066c
 8008764:	e000ed20 	.word	0xe000ed20
 8008768:	2000011c 	.word	0x2000011c

0800876c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	607b      	str	r3, [r7, #4]
}
 8008784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008786:	4b0f      	ldr	r3, [pc, #60]	; (80087c4 <vPortEnterCritical+0x58>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3301      	adds	r3, #1
 800878c:	4a0d      	ldr	r2, [pc, #52]	; (80087c4 <vPortEnterCritical+0x58>)
 800878e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008790:	4b0c      	ldr	r3, [pc, #48]	; (80087c4 <vPortEnterCritical+0x58>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d10f      	bne.n	80087b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008798:	4b0b      	ldr	r3, [pc, #44]	; (80087c8 <vPortEnterCritical+0x5c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	603b      	str	r3, [r7, #0]
}
 80087b4:	bf00      	nop
 80087b6:	e7fe      	b.n	80087b6 <vPortEnterCritical+0x4a>
	}
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	2000011c 	.word	0x2000011c
 80087c8:	e000ed04 	.word	0xe000ed04

080087cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087d2:	4b11      	ldr	r3, [pc, #68]	; (8008818 <vPortExitCritical+0x4c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10a      	bne.n	80087f0 <vPortExitCritical+0x24>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	607b      	str	r3, [r7, #4]
}
 80087ec:	bf00      	nop
 80087ee:	e7fe      	b.n	80087ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087f0:	4b09      	ldr	r3, [pc, #36]	; (8008818 <vPortExitCritical+0x4c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3b01      	subs	r3, #1
 80087f6:	4a08      	ldr	r2, [pc, #32]	; (8008818 <vPortExitCritical+0x4c>)
 80087f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087fa:	4b07      	ldr	r3, [pc, #28]	; (8008818 <vPortExitCritical+0x4c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d105      	bne.n	800880e <vPortExitCritical+0x42>
 8008802:	2300      	movs	r3, #0
 8008804:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800880c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800880e:	bf00      	nop
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	bc80      	pop	{r7}
 8008816:	4770      	bx	lr
 8008818:	2000011c 	.word	0x2000011c
 800881c:	00000000 	.word	0x00000000

08008820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008820:	f3ef 8009 	mrs	r0, PSP
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	4b0d      	ldr	r3, [pc, #52]	; (8008860 <pxCurrentTCBConst>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008830:	6010      	str	r0, [r2, #0]
 8008832:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008836:	f04f 0050 	mov.w	r0, #80	; 0x50
 800883a:	f380 8811 	msr	BASEPRI, r0
 800883e:	f7ff fcef 	bl	8008220 <vTaskSwitchContext>
 8008842:	f04f 0000 	mov.w	r0, #0
 8008846:	f380 8811 	msr	BASEPRI, r0
 800884a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800884e:	6819      	ldr	r1, [r3, #0]
 8008850:	6808      	ldr	r0, [r1, #0]
 8008852:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008856:	f380 8809 	msr	PSP, r0
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	4770      	bx	lr

08008860 <pxCurrentTCBConst>:
 8008860:	2000053c 	.word	0x2000053c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop

08008868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	607b      	str	r3, [r7, #4]
}
 8008880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008882:	f7ff fc0f 	bl	80080a4 <xTaskIncrementTick>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d003      	beq.n	8008894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800888c:	4b06      	ldr	r3, [pc, #24]	; (80088a8 <xPortSysTickHandler+0x40>)
 800888e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	2300      	movs	r3, #0
 8008896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	f383 8811 	msr	BASEPRI, r3
}
 800889e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	e000ed04 	.word	0xe000ed04

080088ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088b0:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <vPortSetupTimerInterrupt+0x30>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088b6:	4b0a      	ldr	r3, [pc, #40]	; (80088e0 <vPortSetupTimerInterrupt+0x34>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088bc:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <vPortSetupTimerInterrupt+0x38>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a09      	ldr	r2, [pc, #36]	; (80088e8 <vPortSetupTimerInterrupt+0x3c>)
 80088c2:	fba2 2303 	umull	r2, r3, r2, r3
 80088c6:	099b      	lsrs	r3, r3, #6
 80088c8:	4a08      	ldr	r2, [pc, #32]	; (80088ec <vPortSetupTimerInterrupt+0x40>)
 80088ca:	3b01      	subs	r3, #1
 80088cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088ce:	4b03      	ldr	r3, [pc, #12]	; (80088dc <vPortSetupTimerInterrupt+0x30>)
 80088d0:	2207      	movs	r2, #7
 80088d2:	601a      	str	r2, [r3, #0]
}
 80088d4:	bf00      	nop
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc80      	pop	{r7}
 80088da:	4770      	bx	lr
 80088dc:	e000e010 	.word	0xe000e010
 80088e0:	e000e018 	.word	0xe000e018
 80088e4:	20000000 	.word	0x20000000
 80088e8:	10624dd3 	.word	0x10624dd3
 80088ec:	e000e014 	.word	0xe000e014

080088f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b08a      	sub	sp, #40	; 0x28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088f8:	2300      	movs	r3, #0
 80088fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088fc:	f7ff fb28 	bl	8007f50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008900:	4b58      	ldr	r3, [pc, #352]	; (8008a64 <pvPortMalloc+0x174>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d101      	bne.n	800890c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008908:	f000 f910 	bl	8008b2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800890c:	4b56      	ldr	r3, [pc, #344]	; (8008a68 <pvPortMalloc+0x178>)
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4013      	ands	r3, r2
 8008914:	2b00      	cmp	r3, #0
 8008916:	f040 808e 	bne.w	8008a36 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01d      	beq.n	800895c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008920:	2208      	movs	r2, #8
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4413      	add	r3, r2
 8008926:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f003 0307 	and.w	r3, r3, #7
 800892e:	2b00      	cmp	r3, #0
 8008930:	d014      	beq.n	800895c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f023 0307 	bic.w	r3, r3, #7
 8008938:	3308      	adds	r3, #8
 800893a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f003 0307 	and.w	r3, r3, #7
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <pvPortMalloc+0x6c>
	__asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	617b      	str	r3, [r7, #20]
}
 8008958:	bf00      	nop
 800895a:	e7fe      	b.n	800895a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d069      	beq.n	8008a36 <pvPortMalloc+0x146>
 8008962:	4b42      	ldr	r3, [pc, #264]	; (8008a6c <pvPortMalloc+0x17c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	429a      	cmp	r2, r3
 800896a:	d864      	bhi.n	8008a36 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800896c:	4b40      	ldr	r3, [pc, #256]	; (8008a70 <pvPortMalloc+0x180>)
 800896e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008970:	4b3f      	ldr	r3, [pc, #252]	; (8008a70 <pvPortMalloc+0x180>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008976:	e004      	b.n	8008982 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	429a      	cmp	r2, r3
 800898a:	d903      	bls.n	8008994 <pvPortMalloc+0xa4>
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1f1      	bne.n	8008978 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008994:	4b33      	ldr	r3, [pc, #204]	; (8008a64 <pvPortMalloc+0x174>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899a:	429a      	cmp	r2, r3
 800899c:	d04b      	beq.n	8008a36 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2208      	movs	r2, #8
 80089a4:	4413      	add	r3, r2
 80089a6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	1ad2      	subs	r2, r2, r3
 80089b8:	2308      	movs	r3, #8
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	429a      	cmp	r2, r3
 80089be:	d91f      	bls.n	8008a00 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4413      	add	r3, r2
 80089c6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	f003 0307 	and.w	r3, r3, #7
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00a      	beq.n	80089e8 <pvPortMalloc+0xf8>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	613b      	str	r3, [r7, #16]
}
 80089e4:	bf00      	nop
 80089e6:	e7fe      	b.n	80089e6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	1ad2      	subs	r2, r2, r3
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089fa:	69b8      	ldr	r0, [r7, #24]
 80089fc:	f000 f8f8 	bl	8008bf0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a00:	4b1a      	ldr	r3, [pc, #104]	; (8008a6c <pvPortMalloc+0x17c>)
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	4a18      	ldr	r2, [pc, #96]	; (8008a6c <pvPortMalloc+0x17c>)
 8008a0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a0e:	4b17      	ldr	r3, [pc, #92]	; (8008a6c <pvPortMalloc+0x17c>)
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	4b18      	ldr	r3, [pc, #96]	; (8008a74 <pvPortMalloc+0x184>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d203      	bcs.n	8008a22 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a1a:	4b14      	ldr	r3, [pc, #80]	; (8008a6c <pvPortMalloc+0x17c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a15      	ldr	r2, [pc, #84]	; (8008a74 <pvPortMalloc+0x184>)
 8008a20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	4b10      	ldr	r3, [pc, #64]	; (8008a68 <pvPortMalloc+0x178>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a36:	f7ff fa99 	bl	8007f6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	f003 0307 	and.w	r3, r3, #7
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00a      	beq.n	8008a5a <pvPortMalloc+0x16a>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	60fb      	str	r3, [r7, #12]
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <pvPortMalloc+0x168>
	return pvReturn;
 8008a5a:	69fb      	ldr	r3, [r7, #28]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3728      	adds	r7, #40	; 0x28
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	20001278 	.word	0x20001278
 8008a68:	20001284 	.word	0x20001284
 8008a6c:	2000127c 	.word	0x2000127c
 8008a70:	20001270 	.word	0x20001270
 8008a74:	20001280 	.word	0x20001280

08008a78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d048      	beq.n	8008b1c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a8a:	2308      	movs	r3, #8
 8008a8c:	425b      	negs	r3, r3
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	4413      	add	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	4b21      	ldr	r3, [pc, #132]	; (8008b24 <vPortFree+0xac>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10a      	bne.n	8008abc <vPortFree+0x44>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	60fb      	str	r3, [r7, #12]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00a      	beq.n	8008ada <vPortFree+0x62>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	60bb      	str	r3, [r7, #8]
}
 8008ad6:	bf00      	nop
 8008ad8:	e7fe      	b.n	8008ad8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	4b11      	ldr	r3, [pc, #68]	; (8008b24 <vPortFree+0xac>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d019      	beq.n	8008b1c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d115      	bne.n	8008b1c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	4b0b      	ldr	r3, [pc, #44]	; (8008b24 <vPortFree+0xac>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	43db      	mvns	r3, r3
 8008afa:	401a      	ands	r2, r3
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b00:	f7ff fa26 	bl	8007f50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	4b07      	ldr	r3, [pc, #28]	; (8008b28 <vPortFree+0xb0>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	4a06      	ldr	r2, [pc, #24]	; (8008b28 <vPortFree+0xb0>)
 8008b10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b12:	6938      	ldr	r0, [r7, #16]
 8008b14:	f000 f86c 	bl	8008bf0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b18:	f7ff fa28 	bl	8007f6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b1c:	bf00      	nop
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20001284 	.word	0x20001284
 8008b28:	2000127c 	.word	0x2000127c

08008b2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008b36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b38:	4b27      	ldr	r3, [pc, #156]	; (8008bd8 <prvHeapInit+0xac>)
 8008b3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f003 0307 	and.w	r3, r3, #7
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00c      	beq.n	8008b60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3307      	adds	r3, #7
 8008b4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f023 0307 	bic.w	r3, r3, #7
 8008b52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	4a1f      	ldr	r2, [pc, #124]	; (8008bd8 <prvHeapInit+0xac>)
 8008b5c:	4413      	add	r3, r2
 8008b5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b64:	4a1d      	ldr	r2, [pc, #116]	; (8008bdc <prvHeapInit+0xb0>)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b6a:	4b1c      	ldr	r3, [pc, #112]	; (8008bdc <prvHeapInit+0xb0>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	4413      	add	r3, r2
 8008b76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b78:	2208      	movs	r2, #8
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	1a9b      	subs	r3, r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f023 0307 	bic.w	r3, r3, #7
 8008b86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4a15      	ldr	r2, [pc, #84]	; (8008be0 <prvHeapInit+0xb4>)
 8008b8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b8e:	4b14      	ldr	r3, [pc, #80]	; (8008be0 <prvHeapInit+0xb4>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2200      	movs	r2, #0
 8008b94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b96:	4b12      	ldr	r3, [pc, #72]	; (8008be0 <prvHeapInit+0xb4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	1ad2      	subs	r2, r2, r3
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bac:	4b0c      	ldr	r3, [pc, #48]	; (8008be0 <prvHeapInit+0xb4>)
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	4a0a      	ldr	r2, [pc, #40]	; (8008be4 <prvHeapInit+0xb8>)
 8008bba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	4a09      	ldr	r2, [pc, #36]	; (8008be8 <prvHeapInit+0xbc>)
 8008bc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bc4:	4b09      	ldr	r3, [pc, #36]	; (8008bec <prvHeapInit+0xc0>)
 8008bc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bca:	601a      	str	r2, [r3, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bc80      	pop	{r7}
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	20000670 	.word	0x20000670
 8008bdc:	20001270 	.word	0x20001270
 8008be0:	20001278 	.word	0x20001278
 8008be4:	20001280 	.word	0x20001280
 8008be8:	2000127c 	.word	0x2000127c
 8008bec:	20001284 	.word	0x20001284

08008bf0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bf8:	4b27      	ldr	r3, [pc, #156]	; (8008c98 <prvInsertBlockIntoFreeList+0xa8>)
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	e002      	b.n	8008c04 <prvInsertBlockIntoFreeList+0x14>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d8f7      	bhi.n	8008bfe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	4413      	add	r3, r2
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d108      	bne.n	8008c32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	441a      	add	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	441a      	add	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d118      	bne.n	8008c78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	4b14      	ldr	r3, [pc, #80]	; (8008c9c <prvInsertBlockIntoFreeList+0xac>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d00d      	beq.n	8008c6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	441a      	add	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	e008      	b.n	8008c80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c6e:	4b0b      	ldr	r3, [pc, #44]	; (8008c9c <prvInsertBlockIntoFreeList+0xac>)
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	e003      	b.n	8008c80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d002      	beq.n	8008c8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c8e:	bf00      	nop
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bc80      	pop	{r7}
 8008c96:	4770      	bx	lr
 8008c98:	20001270 	.word	0x20001270
 8008c9c:	20001278 	.word	0x20001278

08008ca0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	4912      	ldr	r1, [pc, #72]	; (8008cf0 <MX_USB_DEVICE_Init+0x50>)
 8008ca8:	4812      	ldr	r0, [pc, #72]	; (8008cf4 <MX_USB_DEVICE_Init+0x54>)
 8008caa:	f7fd fd6d 	bl	8006788 <USBD_Init>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cb4:	f7f7 fcd0 	bl	8000658 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008cb8:	490f      	ldr	r1, [pc, #60]	; (8008cf8 <MX_USB_DEVICE_Init+0x58>)
 8008cba:	480e      	ldr	r0, [pc, #56]	; (8008cf4 <MX_USB_DEVICE_Init+0x54>)
 8008cbc:	f7fd fd8f 	bl	80067de <USBD_RegisterClass>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cc6:	f7f7 fcc7 	bl	8000658 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cca:	490c      	ldr	r1, [pc, #48]	; (8008cfc <MX_USB_DEVICE_Init+0x5c>)
 8008ccc:	4809      	ldr	r0, [pc, #36]	; (8008cf4 <MX_USB_DEVICE_Init+0x54>)
 8008cce:	f7fd fcef 	bl	80066b0 <USBD_CDC_RegisterInterface>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008cd8:	f7f7 fcbe 	bl	8000658 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008cdc:	4805      	ldr	r0, [pc, #20]	; (8008cf4 <MX_USB_DEVICE_Init+0x54>)
 8008cde:	f7fd fd97 	bl	8006810 <USBD_Start>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ce8:	f7f7 fcb6 	bl	8000658 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cec:	bf00      	nop
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20000130 	.word	0x20000130
 8008cf4:	20001288 	.word	0x20001288
 8008cf8:	20000018 	.word	0x20000018
 8008cfc:	20000120 	.word	0x20000120

08008d00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d04:	2200      	movs	r2, #0
 8008d06:	4905      	ldr	r1, [pc, #20]	; (8008d1c <CDC_Init_FS+0x1c>)
 8008d08:	4805      	ldr	r0, [pc, #20]	; (8008d20 <CDC_Init_FS+0x20>)
 8008d0a:	f7fd fce7 	bl	80066dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d0e:	4905      	ldr	r1, [pc, #20]	; (8008d24 <CDC_Init_FS+0x24>)
 8008d10:	4803      	ldr	r0, [pc, #12]	; (8008d20 <CDC_Init_FS+0x20>)
 8008d12:	f7fd fcfc 	bl	800670e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	20001934 	.word	0x20001934
 8008d20:	20001288 	.word	0x20001288
 8008d24:	2000154c 	.word	0x2000154c

08008d28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bc80      	pop	{r7}
 8008d34:	4770      	bx	lr
	...

08008d38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	6039      	str	r1, [r7, #0]
 8008d42:	71fb      	strb	r3, [r7, #7]
 8008d44:	4613      	mov	r3, r2
 8008d46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d48:	79fb      	ldrb	r3, [r7, #7]
 8008d4a:	2b23      	cmp	r3, #35	; 0x23
 8008d4c:	d84a      	bhi.n	8008de4 <CDC_Control_FS+0xac>
 8008d4e:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <CDC_Control_FS+0x1c>)
 8008d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d54:	08008de5 	.word	0x08008de5
 8008d58:	08008de5 	.word	0x08008de5
 8008d5c:	08008de5 	.word	0x08008de5
 8008d60:	08008de5 	.word	0x08008de5
 8008d64:	08008de5 	.word	0x08008de5
 8008d68:	08008de5 	.word	0x08008de5
 8008d6c:	08008de5 	.word	0x08008de5
 8008d70:	08008de5 	.word	0x08008de5
 8008d74:	08008de5 	.word	0x08008de5
 8008d78:	08008de5 	.word	0x08008de5
 8008d7c:	08008de5 	.word	0x08008de5
 8008d80:	08008de5 	.word	0x08008de5
 8008d84:	08008de5 	.word	0x08008de5
 8008d88:	08008de5 	.word	0x08008de5
 8008d8c:	08008de5 	.word	0x08008de5
 8008d90:	08008de5 	.word	0x08008de5
 8008d94:	08008de5 	.word	0x08008de5
 8008d98:	08008de5 	.word	0x08008de5
 8008d9c:	08008de5 	.word	0x08008de5
 8008da0:	08008de5 	.word	0x08008de5
 8008da4:	08008de5 	.word	0x08008de5
 8008da8:	08008de5 	.word	0x08008de5
 8008dac:	08008de5 	.word	0x08008de5
 8008db0:	08008de5 	.word	0x08008de5
 8008db4:	08008de5 	.word	0x08008de5
 8008db8:	08008de5 	.word	0x08008de5
 8008dbc:	08008de5 	.word	0x08008de5
 8008dc0:	08008de5 	.word	0x08008de5
 8008dc4:	08008de5 	.word	0x08008de5
 8008dc8:	08008de5 	.word	0x08008de5
 8008dcc:	08008de5 	.word	0x08008de5
 8008dd0:	08008de5 	.word	0x08008de5
 8008dd4:	08008de5 	.word	0x08008de5
 8008dd8:	08008de5 	.word	0x08008de5
 8008ddc:	08008de5 	.word	0x08008de5
 8008de0:	08008de5 	.word	0x08008de5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008de4:	bf00      	nop
  }

  return (USBD_OK);
 8008de6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bc80      	pop	{r7}
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop

08008df4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008dfe:	6879      	ldr	r1, [r7, #4]
 8008e00:	4805      	ldr	r0, [pc, #20]	; (8008e18 <CDC_Receive_FS+0x24>)
 8008e02:	f7fd fc84 	bl	800670e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e06:	4804      	ldr	r0, [pc, #16]	; (8008e18 <CDC_Receive_FS+0x24>)
 8008e08:	f7fd fc94 	bl	8006734 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e0c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	20001288 	.word	0x20001288

08008e1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	6039      	str	r1, [r7, #0]
 8008e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2212      	movs	r2, #18
 8008e2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e2e:	4b03      	ldr	r3, [pc, #12]	; (8008e3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bc80      	pop	{r7}
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	2000014c 	.word	0x2000014c

08008e40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	6039      	str	r1, [r7, #0]
 8008e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2204      	movs	r2, #4
 8008e50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e52:	4b03      	ldr	r3, [pc, #12]	; (8008e60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bc80      	pop	{r7}
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	20000160 	.word	0x20000160

08008e64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	6039      	str	r1, [r7, #0]
 8008e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d105      	bne.n	8008e82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4907      	ldr	r1, [pc, #28]	; (8008e98 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e7a:	4808      	ldr	r0, [pc, #32]	; (8008e9c <USBD_FS_ProductStrDescriptor+0x38>)
 8008e7c:	f7fe fc40 	bl	8007700 <USBD_GetString>
 8008e80:	e004      	b.n	8008e8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	4904      	ldr	r1, [pc, #16]	; (8008e98 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e86:	4805      	ldr	r0, [pc, #20]	; (8008e9c <USBD_FS_ProductStrDescriptor+0x38>)
 8008e88:	f7fe fc3a 	bl	8007700 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e8c:	4b02      	ldr	r3, [pc, #8]	; (8008e98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20001d1c 	.word	0x20001d1c
 8008e9c:	0800963c 	.word	0x0800963c

08008ea0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	6039      	str	r1, [r7, #0]
 8008eaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	4904      	ldr	r1, [pc, #16]	; (8008ec0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008eb0:	4804      	ldr	r0, [pc, #16]	; (8008ec4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008eb2:	f7fe fc25 	bl	8007700 <USBD_GetString>
  return USBD_StrDesc;
 8008eb6:	4b02      	ldr	r3, [pc, #8]	; (8008ec0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	20001d1c 	.word	0x20001d1c
 8008ec4:	08009654 	.word	0x08009654

08008ec8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	4603      	mov	r3, r0
 8008ed0:	6039      	str	r1, [r7, #0]
 8008ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	221a      	movs	r2, #26
 8008ed8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008eda:	f000 f843 	bl	8008f64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ede:	4b02      	ldr	r3, [pc, #8]	; (8008ee8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	20000164 	.word	0x20000164

08008eec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	6039      	str	r1, [r7, #0]
 8008ef6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ef8:	79fb      	ldrb	r3, [r7, #7]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d105      	bne.n	8008f0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	4907      	ldr	r1, [pc, #28]	; (8008f20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f02:	4808      	ldr	r0, [pc, #32]	; (8008f24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f04:	f7fe fbfc 	bl	8007700 <USBD_GetString>
 8008f08:	e004      	b.n	8008f14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	4904      	ldr	r1, [pc, #16]	; (8008f20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f0e:	4805      	ldr	r0, [pc, #20]	; (8008f24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f10:	f7fe fbf6 	bl	8007700 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f14:	4b02      	ldr	r3, [pc, #8]	; (8008f20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	20001d1c 	.word	0x20001d1c
 8008f24:	08009668 	.word	0x08009668

08008f28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	6039      	str	r1, [r7, #0]
 8008f32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d105      	bne.n	8008f46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	4907      	ldr	r1, [pc, #28]	; (8008f5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f3e:	4808      	ldr	r0, [pc, #32]	; (8008f60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f40:	f7fe fbde 	bl	8007700 <USBD_GetString>
 8008f44:	e004      	b.n	8008f50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	4904      	ldr	r1, [pc, #16]	; (8008f5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f4a:	4805      	ldr	r0, [pc, #20]	; (8008f60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f4c:	f7fe fbd8 	bl	8007700 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f50:	4b02      	ldr	r3, [pc, #8]	; (8008f5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20001d1c 	.word	0x20001d1c
 8008f60:	08009674 	.word	0x08009674

08008f64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f6a:	4b0f      	ldr	r3, [pc, #60]	; (8008fa8 <Get_SerialNum+0x44>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f70:	4b0e      	ldr	r3, [pc, #56]	; (8008fac <Get_SerialNum+0x48>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f76:	4b0e      	ldr	r3, [pc, #56]	; (8008fb0 <Get_SerialNum+0x4c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4413      	add	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d009      	beq.n	8008f9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f8a:	2208      	movs	r2, #8
 8008f8c:	4909      	ldr	r1, [pc, #36]	; (8008fb4 <Get_SerialNum+0x50>)
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f000 f814 	bl	8008fbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f94:	2204      	movs	r2, #4
 8008f96:	4908      	ldr	r1, [pc, #32]	; (8008fb8 <Get_SerialNum+0x54>)
 8008f98:	68b8      	ldr	r0, [r7, #8]
 8008f9a:	f000 f80f 	bl	8008fbc <IntToUnicode>
  }
}
 8008f9e:	bf00      	nop
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	1ffff7e8 	.word	0x1ffff7e8
 8008fac:	1ffff7ec 	.word	0x1ffff7ec
 8008fb0:	1ffff7f0 	.word	0x1ffff7f0
 8008fb4:	20000166 	.word	0x20000166
 8008fb8:	20000176 	.word	0x20000176

08008fbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fce:	2300      	movs	r3, #0
 8008fd0:	75fb      	strb	r3, [r7, #23]
 8008fd2:	e027      	b.n	8009024 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	0f1b      	lsrs	r3, r3, #28
 8008fd8:	2b09      	cmp	r3, #9
 8008fda:	d80b      	bhi.n	8008ff4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	0f1b      	lsrs	r3, r3, #28
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	005b      	lsls	r3, r3, #1
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	440b      	add	r3, r1
 8008fec:	3230      	adds	r2, #48	; 0x30
 8008fee:	b2d2      	uxtb	r2, r2
 8008ff0:	701a      	strb	r2, [r3, #0]
 8008ff2:	e00a      	b.n	800900a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	0f1b      	lsrs	r3, r3, #28
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	4619      	mov	r1, r3
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	440b      	add	r3, r1
 8009004:	3237      	adds	r2, #55	; 0x37
 8009006:	b2d2      	uxtb	r2, r2
 8009008:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	011b      	lsls	r3, r3, #4
 800900e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009010:	7dfb      	ldrb	r3, [r7, #23]
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	3301      	adds	r3, #1
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	4413      	add	r3, r2
 800901a:	2200      	movs	r2, #0
 800901c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800901e:	7dfb      	ldrb	r3, [r7, #23]
 8009020:	3301      	adds	r3, #1
 8009022:	75fb      	strb	r3, [r7, #23]
 8009024:	7dfa      	ldrb	r2, [r7, #23]
 8009026:	79fb      	ldrb	r3, [r7, #7]
 8009028:	429a      	cmp	r2, r3
 800902a:	d3d3      	bcc.n	8008fd4 <IntToUnicode+0x18>
  }
}
 800902c:	bf00      	nop
 800902e:	bf00      	nop
 8009030:	371c      	adds	r7, #28
 8009032:	46bd      	mov	sp, r7
 8009034:	bc80      	pop	{r7}
 8009036:	4770      	bx	lr

08009038 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a0d      	ldr	r2, [pc, #52]	; (800907c <HAL_PCD_MspInit+0x44>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d113      	bne.n	8009072 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800904a:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <HAL_PCD_MspInit+0x48>)
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	4a0c      	ldr	r2, [pc, #48]	; (8009080 <HAL_PCD_MspInit+0x48>)
 8009050:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009054:	61d3      	str	r3, [r2, #28]
 8009056:	4b0a      	ldr	r3, [pc, #40]	; (8009080 <HAL_PCD_MspInit+0x48>)
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009062:	2200      	movs	r2, #0
 8009064:	2105      	movs	r1, #5
 8009066:	2014      	movs	r0, #20
 8009068:	f7f7 fdcb 	bl	8000c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800906c:	2014      	movs	r0, #20
 800906e:	f7f7 fde4 	bl	8000c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009072:	bf00      	nop
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	40005c00 	.word	0x40005c00
 8009080:	40021000 	.word	0x40021000

08009084 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009098:	4619      	mov	r1, r3
 800909a:	4610      	mov	r0, r2
 800909c:	f7fd fc00 	bl	80068a0 <USBD_LL_SetupStage>
}
 80090a0:	bf00      	nop
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80090ba:	78fa      	ldrb	r2, [r7, #3]
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	440b      	add	r3, r1
 80090c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	78fb      	ldrb	r3, [r7, #3]
 80090d0:	4619      	mov	r1, r3
 80090d2:	f7fd fc32 	bl	800693a <USBD_LL_DataOutStage>
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	460b      	mov	r3, r1
 80090e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80090f0:	78fa      	ldrb	r2, [r7, #3]
 80090f2:	6879      	ldr	r1, [r7, #4]
 80090f4:	4613      	mov	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4413      	add	r3, r2
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	440b      	add	r3, r1
 80090fe:	333c      	adds	r3, #60	; 0x3c
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	78fb      	ldrb	r3, [r7, #3]
 8009104:	4619      	mov	r1, r3
 8009106:	f7fd fc89 	bl	8006a1c <USBD_LL_DataInStage>
}
 800910a:	bf00      	nop
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b082      	sub	sp, #8
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009120:	4618      	mov	r0, r3
 8009122:	f7fd fd99 	bl	8006c58 <USBD_LL_SOF>
}
 8009126:	bf00      	nop
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009136:	2301      	movs	r3, #1
 8009138:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	2b02      	cmp	r3, #2
 8009140:	d001      	beq.n	8009146 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009142:	f7f7 fa89 	bl	8000658 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800914c:	7bfa      	ldrb	r2, [r7, #15]
 800914e:	4611      	mov	r1, r2
 8009150:	4618      	mov	r0, r3
 8009152:	f7fd fd49 	bl	8006be8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800915c:	4618      	mov	r0, r3
 800915e:	f7fd fd02 	bl	8006b66 <USBD_LL_Reset>
}
 8009162:	bf00      	nop
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800917a:	4618      	mov	r0, r3
 800917c:	f7fd fd43 	bl	8006c06 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d005      	beq.n	8009194 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009188:	4b04      	ldr	r3, [pc, #16]	; (800919c <HAL_PCD_SuspendCallback+0x30>)
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	4a03      	ldr	r2, [pc, #12]	; (800919c <HAL_PCD_SuspendCallback+0x30>)
 800918e:	f043 0306 	orr.w	r3, r3, #6
 8009192:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009194:	bf00      	nop
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	e000ed00 	.word	0xe000ed00

080091a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fd fd3d 	bl	8006c2e <USBD_LL_Resume>
}
 80091b4:	bf00      	nop
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80091c4:	4a28      	ldr	r2, [pc, #160]	; (8009268 <USBD_LL_Init+0xac>)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a26      	ldr	r2, [pc, #152]	; (8009268 <USBD_LL_Init+0xac>)
 80091d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80091d4:	4b24      	ldr	r3, [pc, #144]	; (8009268 <USBD_LL_Init+0xac>)
 80091d6:	4a25      	ldr	r2, [pc, #148]	; (800926c <USBD_LL_Init+0xb0>)
 80091d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80091da:	4b23      	ldr	r3, [pc, #140]	; (8009268 <USBD_LL_Init+0xac>)
 80091dc:	2208      	movs	r2, #8
 80091de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80091e0:	4b21      	ldr	r3, [pc, #132]	; (8009268 <USBD_LL_Init+0xac>)
 80091e2:	2202      	movs	r2, #2
 80091e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80091e6:	4b20      	ldr	r3, [pc, #128]	; (8009268 <USBD_LL_Init+0xac>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80091ec:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <USBD_LL_Init+0xac>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80091f2:	4b1d      	ldr	r3, [pc, #116]	; (8009268 <USBD_LL_Init+0xac>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80091f8:	481b      	ldr	r0, [pc, #108]	; (8009268 <USBD_LL_Init+0xac>)
 80091fa:	f7f7 fee5 	bl	8000fc8 <HAL_PCD_Init>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009204:	f7f7 fa28 	bl	8000658 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800920e:	2318      	movs	r3, #24
 8009210:	2200      	movs	r2, #0
 8009212:	2100      	movs	r1, #0
 8009214:	f7f9 fb59 	bl	80028ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800921e:	2358      	movs	r3, #88	; 0x58
 8009220:	2200      	movs	r2, #0
 8009222:	2180      	movs	r1, #128	; 0x80
 8009224:	f7f9 fb51 	bl	80028ca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800922e:	23c0      	movs	r3, #192	; 0xc0
 8009230:	2200      	movs	r2, #0
 8009232:	2181      	movs	r1, #129	; 0x81
 8009234:	f7f9 fb49 	bl	80028ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800923e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009242:	2200      	movs	r2, #0
 8009244:	2101      	movs	r1, #1
 8009246:	f7f9 fb40 	bl	80028ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009254:	2200      	movs	r2, #0
 8009256:	2182      	movs	r1, #130	; 0x82
 8009258:	f7f9 fb37 	bl	80028ca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20001f1c 	.word	0x20001f1c
 800926c:	40005c00 	.word	0x40005c00

08009270 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009286:	4618      	mov	r0, r3
 8009288:	f7f7 ffa9 	bl	80011de <HAL_PCD_Start>
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009290:	7bfb      	ldrb	r3, [r7, #15]
 8009292:	4618      	mov	r0, r3
 8009294:	f000 f94e 	bl	8009534 <USBD_Get_USB_Status>
 8009298:	4603      	mov	r3, r0
 800929a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800929c:	7bbb      	ldrb	r3, [r7, #14]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	4608      	mov	r0, r1
 80092b0:	4611      	mov	r1, r2
 80092b2:	461a      	mov	r2, r3
 80092b4:	4603      	mov	r3, r0
 80092b6:	70fb      	strb	r3, [r7, #3]
 80092b8:	460b      	mov	r3, r1
 80092ba:	70bb      	strb	r3, [r7, #2]
 80092bc:	4613      	mov	r3, r2
 80092be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092ce:	78bb      	ldrb	r3, [r7, #2]
 80092d0:	883a      	ldrh	r2, [r7, #0]
 80092d2:	78f9      	ldrb	r1, [r7, #3]
 80092d4:	f7f8 f921 	bl	800151a <HAL_PCD_EP_Open>
 80092d8:	4603      	mov	r3, r0
 80092da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 f928 	bl	8009534 <USBD_Get_USB_Status>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b084      	sub	sp, #16
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	460b      	mov	r3, r1
 80092fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800930c:	78fa      	ldrb	r2, [r7, #3]
 800930e:	4611      	mov	r1, r2
 8009310:	4618      	mov	r0, r3
 8009312:	f7f8 f968 	bl	80015e6 <HAL_PCD_EP_Close>
 8009316:	4603      	mov	r3, r0
 8009318:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	4618      	mov	r0, r3
 800931e:	f000 f909 	bl	8009534 <USBD_Get_USB_Status>
 8009322:	4603      	mov	r3, r0
 8009324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009326:	7bbb      	ldrb	r3, [r7, #14]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800934a:	78fa      	ldrb	r2, [r7, #3]
 800934c:	4611      	mov	r1, r2
 800934e:	4618      	mov	r0, r3
 8009350:	f7f8 fa28 	bl	80017a4 <HAL_PCD_EP_SetStall>
 8009354:	4603      	mov	r3, r0
 8009356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009358:	7bfb      	ldrb	r3, [r7, #15]
 800935a:	4618      	mov	r0, r3
 800935c:	f000 f8ea 	bl	8009534 <USBD_Get_USB_Status>
 8009360:	4603      	mov	r3, r0
 8009362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009364:	7bbb      	ldrb	r3, [r7, #14]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	460b      	mov	r3, r1
 8009378:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009388:	78fa      	ldrb	r2, [r7, #3]
 800938a:	4611      	mov	r1, r2
 800938c:	4618      	mov	r0, r3
 800938e:	f7f8 fa69 	bl	8001864 <HAL_PCD_EP_ClrStall>
 8009392:	4603      	mov	r3, r0
 8009394:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009396:	7bfb      	ldrb	r3, [r7, #15]
 8009398:	4618      	mov	r0, r3
 800939a:	f000 f8cb 	bl	8009534 <USBD_Get_USB_Status>
 800939e:	4603      	mov	r3, r0
 80093a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	da0c      	bge.n	80093e2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ce:	68f9      	ldr	r1, [r7, #12]
 80093d0:	1c5a      	adds	r2, r3, #1
 80093d2:	4613      	mov	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	00db      	lsls	r3, r3, #3
 80093da:	440b      	add	r3, r1
 80093dc:	3302      	adds	r3, #2
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	e00b      	b.n	80093fa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093e2:	78fb      	ldrb	r3, [r7, #3]
 80093e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093e8:	68f9      	ldr	r1, [r7, #12]
 80093ea:	4613      	mov	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	00db      	lsls	r3, r3, #3
 80093f2:	440b      	add	r3, r1
 80093f4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80093f8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	bc80      	pop	{r7}
 8009402:	4770      	bx	lr

08009404 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800941e:	78fa      	ldrb	r2, [r7, #3]
 8009420:	4611      	mov	r1, r2
 8009422:	4618      	mov	r0, r3
 8009424:	f7f8 f854 	bl	80014d0 <HAL_PCD_SetAddress>
 8009428:	4603      	mov	r3, r0
 800942a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	4618      	mov	r0, r3
 8009430:	f000 f880 	bl	8009534 <USBD_Get_USB_Status>
 8009434:	4603      	mov	r3, r0
 8009436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009438:	7bbb      	ldrb	r3, [r7, #14]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b086      	sub	sp, #24
 8009446:	af00      	add	r7, sp, #0
 8009448:	60f8      	str	r0, [r7, #12]
 800944a:	607a      	str	r2, [r7, #4]
 800944c:	461a      	mov	r2, r3
 800944e:	460b      	mov	r3, r1
 8009450:	72fb      	strb	r3, [r7, #11]
 8009452:	4613      	mov	r3, r2
 8009454:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009464:	893b      	ldrh	r3, [r7, #8]
 8009466:	7af9      	ldrb	r1, [r7, #11]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	f7f8 f958 	bl	800171e <HAL_PCD_EP_Transmit>
 800946e:	4603      	mov	r3, r0
 8009470:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	4618      	mov	r0, r3
 8009476:	f000 f85d 	bl	8009534 <USBD_Get_USB_Status>
 800947a:	4603      	mov	r3, r0
 800947c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800947e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	607a      	str	r2, [r7, #4]
 8009492:	461a      	mov	r2, r3
 8009494:	460b      	mov	r3, r1
 8009496:	72fb      	strb	r3, [r7, #11]
 8009498:	4613      	mov	r3, r2
 800949a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800949c:	2300      	movs	r3, #0
 800949e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094aa:	893b      	ldrh	r3, [r7, #8]
 80094ac:	7af9      	ldrb	r1, [r7, #11]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	f7f8 f8e1 	bl	8001676 <HAL_PCD_EP_Receive>
 80094b4:	4603      	mov	r3, r0
 80094b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 f83a 	bl	8009534 <USBD_Get_USB_Status>
 80094c0:	4603      	mov	r3, r0
 80094c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3718      	adds	r7, #24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b082      	sub	sp, #8
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	460b      	mov	r3, r1
 80094d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094e0:	78fa      	ldrb	r2, [r7, #3]
 80094e2:	4611      	mov	r1, r2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7f8 f903 	bl	80016f0 <HAL_PCD_EP_GetRxCount>
 80094ea:	4603      	mov	r3, r0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094fc:	4b02      	ldr	r3, [pc, #8]	; (8009508 <USBD_static_malloc+0x14>)
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	bc80      	pop	{r7}
 8009506:	4770      	bx	lr
 8009508:	20002208 	.word	0x20002208

0800950c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]

}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	bc80      	pop	{r7}
 800951c:	4770      	bx	lr

0800951e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800951e:	b480      	push	{r7}
 8009520:	b083      	sub	sp, #12
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	460b      	mov	r3, r1
 8009528:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800952a:	bf00      	nop
 800952c:	370c      	adds	r7, #12
 800952e:	46bd      	mov	sp, r7
 8009530:	bc80      	pop	{r7}
 8009532:	4770      	bx	lr

08009534 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	4603      	mov	r3, r0
 800953c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	2b03      	cmp	r3, #3
 8009546:	d817      	bhi.n	8009578 <USBD_Get_USB_Status+0x44>
 8009548:	a201      	add	r2, pc, #4	; (adr r2, 8009550 <USBD_Get_USB_Status+0x1c>)
 800954a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954e:	bf00      	nop
 8009550:	08009561 	.word	0x08009561
 8009554:	08009567 	.word	0x08009567
 8009558:	0800956d 	.word	0x0800956d
 800955c:	08009573 	.word	0x08009573
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	73fb      	strb	r3, [r7, #15]
    break;
 8009564:	e00b      	b.n	800957e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009566:	2302      	movs	r3, #2
 8009568:	73fb      	strb	r3, [r7, #15]
    break;
 800956a:	e008      	b.n	800957e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800956c:	2301      	movs	r3, #1
 800956e:	73fb      	strb	r3, [r7, #15]
    break;
 8009570:	e005      	b.n	800957e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009572:	2302      	movs	r3, #2
 8009574:	73fb      	strb	r3, [r7, #15]
    break;
 8009576:	e002      	b.n	800957e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009578:	2302      	movs	r3, #2
 800957a:	73fb      	strb	r3, [r7, #15]
    break;
 800957c:	bf00      	nop
  }
  return usb_status;
 800957e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	bc80      	pop	{r7}
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop

0800958c <__libc_init_array>:
 800958c:	b570      	push	{r4, r5, r6, lr}
 800958e:	2600      	movs	r6, #0
 8009590:	4d0c      	ldr	r5, [pc, #48]	; (80095c4 <__libc_init_array+0x38>)
 8009592:	4c0d      	ldr	r4, [pc, #52]	; (80095c8 <__libc_init_array+0x3c>)
 8009594:	1b64      	subs	r4, r4, r5
 8009596:	10a4      	asrs	r4, r4, #2
 8009598:	42a6      	cmp	r6, r4
 800959a:	d109      	bne.n	80095b0 <__libc_init_array+0x24>
 800959c:	f000 f822 	bl	80095e4 <_init>
 80095a0:	2600      	movs	r6, #0
 80095a2:	4d0a      	ldr	r5, [pc, #40]	; (80095cc <__libc_init_array+0x40>)
 80095a4:	4c0a      	ldr	r4, [pc, #40]	; (80095d0 <__libc_init_array+0x44>)
 80095a6:	1b64      	subs	r4, r4, r5
 80095a8:	10a4      	asrs	r4, r4, #2
 80095aa:	42a6      	cmp	r6, r4
 80095ac:	d105      	bne.n	80095ba <__libc_init_array+0x2e>
 80095ae:	bd70      	pop	{r4, r5, r6, pc}
 80095b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b4:	4798      	blx	r3
 80095b6:	3601      	adds	r6, #1
 80095b8:	e7ee      	b.n	8009598 <__libc_init_array+0xc>
 80095ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80095be:	4798      	blx	r3
 80095c0:	3601      	adds	r6, #1
 80095c2:	e7f2      	b.n	80095aa <__libc_init_array+0x1e>
 80095c4:	08009694 	.word	0x08009694
 80095c8:	08009694 	.word	0x08009694
 80095cc:	08009694 	.word	0x08009694
 80095d0:	08009698 	.word	0x08009698

080095d4 <memset>:
 80095d4:	4603      	mov	r3, r0
 80095d6:	4402      	add	r2, r0
 80095d8:	4293      	cmp	r3, r2
 80095da:	d100      	bne.n	80095de <memset+0xa>
 80095dc:	4770      	bx	lr
 80095de:	f803 1b01 	strb.w	r1, [r3], #1
 80095e2:	e7f9      	b.n	80095d8 <memset+0x4>

080095e4 <_init>:
 80095e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e6:	bf00      	nop
 80095e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ea:	bc08      	pop	{r3}
 80095ec:	469e      	mov	lr, r3
 80095ee:	4770      	bx	lr

080095f0 <_fini>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	bf00      	nop
 80095f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f6:	bc08      	pop	{r3}
 80095f8:	469e      	mov	lr, r3
 80095fa:	4770      	bx	lr
