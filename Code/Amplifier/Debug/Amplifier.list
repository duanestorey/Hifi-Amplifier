
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039bc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08003ba0  08003ba0  00013ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000064  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000f8  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e5c  08003e5c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000078  08003edc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08003edc  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd5b  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da2  00000000  00000000  0002bdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0002dba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  0002e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca63  00000000  00000000  0002f708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e030  00000000  00000000  0004c16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bfc1  00000000  00000000  0005a19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f615c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004944  00000000  00000000  000f61ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	08003b88 	.word	0x08003b88

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	08003b88 	.word	0x08003b88

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <selfrel_offset31>:
 8000238:	6803      	ldr	r3, [r0, #0]
 800023a:	005a      	lsls	r2, r3, #1
 800023c:	bf4c      	ite	mi
 800023e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000242:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000246:	4418      	add	r0, r3
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop

0800024c <search_EIT_table>:
 800024c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000250:	b339      	cbz	r1, 80002a2 <search_EIT_table+0x56>
 8000252:	1e4f      	subs	r7, r1, #1
 8000254:	4604      	mov	r4, r0
 8000256:	4615      	mov	r5, r2
 8000258:	463e      	mov	r6, r7
 800025a:	f04f 0800 	mov.w	r8, #0
 800025e:	eb08 0106 	add.w	r1, r8, r6
 8000262:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000266:	1049      	asrs	r1, r1, #1
 8000268:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 800026c:	4648      	mov	r0, r9
 800026e:	f7ff ffe3 	bl	8000238 <selfrel_offset31>
 8000272:	4603      	mov	r3, r0
 8000274:	00c8      	lsls	r0, r1, #3
 8000276:	3008      	adds	r0, #8
 8000278:	428f      	cmp	r7, r1
 800027a:	4420      	add	r0, r4
 800027c:	d00b      	beq.n	8000296 <search_EIT_table+0x4a>
 800027e:	42ab      	cmp	r3, r5
 8000280:	d80b      	bhi.n	800029a <search_EIT_table+0x4e>
 8000282:	f7ff ffd9 	bl	8000238 <selfrel_offset31>
 8000286:	3801      	subs	r0, #1
 8000288:	42a8      	cmp	r0, r5
 800028a:	f101 0801 	add.w	r8, r1, #1
 800028e:	d3e6      	bcc.n	800025e <search_EIT_table+0x12>
 8000290:	4648      	mov	r0, r9
 8000292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000296:	42ab      	cmp	r3, r5
 8000298:	d9fa      	bls.n	8000290 <search_EIT_table+0x44>
 800029a:	4588      	cmp	r8, r1
 800029c:	d001      	beq.n	80002a2 <search_EIT_table+0x56>
 800029e:	1e4e      	subs	r6, r1, #1
 80002a0:	e7dd      	b.n	800025e <search_EIT_table+0x12>
 80002a2:	f04f 0900 	mov.w	r9, #0
 80002a6:	4648      	mov	r0, r9
 80002a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080002ac <__gnu_unwind_get_pr_addr>:
 80002ac:	2801      	cmp	r0, #1
 80002ae:	d007      	beq.n	80002c0 <__gnu_unwind_get_pr_addr+0x14>
 80002b0:	2802      	cmp	r0, #2
 80002b2:	d007      	beq.n	80002c4 <__gnu_unwind_get_pr_addr+0x18>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__gnu_unwind_get_pr_addr+0x1c>)
 80002b6:	2800      	cmp	r0, #0
 80002b8:	bf0c      	ite	eq
 80002ba:	4618      	moveq	r0, r3
 80002bc:	2000      	movne	r0, #0
 80002be:	4770      	bx	lr
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <__gnu_unwind_get_pr_addr+0x20>)
 80002c2:	4770      	bx	lr
 80002c4:	4802      	ldr	r0, [pc, #8]	; (80002d0 <__gnu_unwind_get_pr_addr+0x24>)
 80002c6:	4770      	bx	lr
 80002c8:	0800099d 	.word	0x0800099d
 80002cc:	080009a1 	.word	0x080009a1
 80002d0:	080009a5 	.word	0x080009a5

080002d4 <get_eit_entry>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	4b24      	ldr	r3, [pc, #144]	; (8000368 <get_eit_entry+0x94>)
 80002d8:	4604      	mov	r4, r0
 80002da:	b083      	sub	sp, #12
 80002dc:	1e8d      	subs	r5, r1, #2
 80002de:	b33b      	cbz	r3, 8000330 <get_eit_entry+0x5c>
 80002e0:	4628      	mov	r0, r5
 80002e2:	a901      	add	r1, sp, #4
 80002e4:	f3af 8000 	nop.w
 80002e8:	b1e8      	cbz	r0, 8000326 <get_eit_entry+0x52>
 80002ea:	9901      	ldr	r1, [sp, #4]
 80002ec:	462a      	mov	r2, r5
 80002ee:	f7ff ffad 	bl	800024c <search_EIT_table>
 80002f2:	4601      	mov	r1, r0
 80002f4:	b1b8      	cbz	r0, 8000326 <get_eit_entry+0x52>
 80002f6:	f7ff ff9f 	bl	8000238 <selfrel_offset31>
 80002fa:	684b      	ldr	r3, [r1, #4]
 80002fc:	64a0      	str	r0, [r4, #72]	; 0x48
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d02e      	beq.n	8000360 <get_eit_entry+0x8c>
 8000302:	2b00      	cmp	r3, #0
 8000304:	db27      	blt.n	8000356 <get_eit_entry+0x82>
 8000306:	1d08      	adds	r0, r1, #4
 8000308:	f7ff ff96 	bl	8000238 <selfrel_offset31>
 800030c:	2300      	movs	r3, #0
 800030e:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000312:	6803      	ldr	r3, [r0, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	db12      	blt.n	800033e <get_eit_entry+0x6a>
 8000318:	f7ff ff8e 	bl	8000238 <selfrel_offset31>
 800031c:	4603      	mov	r3, r0
 800031e:	2000      	movs	r0, #0
 8000320:	6123      	str	r3, [r4, #16]
 8000322:	b003      	add	sp, #12
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	2300      	movs	r3, #0
 8000328:	2009      	movs	r0, #9
 800032a:	6123      	str	r3, [r4, #16]
 800032c:	b003      	add	sp, #12
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <get_eit_entry+0x98>)
 8000332:	490f      	ldr	r1, [pc, #60]	; (8000370 <get_eit_entry+0x9c>)
 8000334:	4618      	mov	r0, r3
 8000336:	1ac9      	subs	r1, r1, r3
 8000338:	10c9      	asrs	r1, r1, #3
 800033a:	9101      	str	r1, [sp, #4]
 800033c:	e7d6      	b.n	80002ec <get_eit_entry+0x18>
 800033e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000342:	f7ff ffb3 	bl	80002ac <__gnu_unwind_get_pr_addr>
 8000346:	2800      	cmp	r0, #0
 8000348:	4603      	mov	r3, r0
 800034a:	bf14      	ite	ne
 800034c:	2000      	movne	r0, #0
 800034e:	2009      	moveq	r0, #9
 8000350:	6123      	str	r3, [r4, #16]
 8000352:	b003      	add	sp, #12
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	2301      	movs	r3, #1
 8000358:	1d08      	adds	r0, r1, #4
 800035a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800035e:	e7d8      	b.n	8000312 <get_eit_entry+0x3e>
 8000360:	2300      	movs	r3, #0
 8000362:	2005      	movs	r0, #5
 8000364:	6123      	str	r3, [r4, #16]
 8000366:	e7dc      	b.n	8000322 <get_eit_entry+0x4e>
 8000368:	00000000 	.word	0x00000000
 800036c:	08003d64 	.word	0x08003d64
 8000370:	08003e5c 	.word	0x08003e5c

08000374 <restore_non_core_regs>:
 8000374:	6803      	ldr	r3, [r0, #0]
 8000376:	b510      	push	{r4, lr}
 8000378:	07da      	lsls	r2, r3, #31
 800037a:	4604      	mov	r4, r0
 800037c:	d406      	bmi.n	800038c <restore_non_core_regs+0x18>
 800037e:	079b      	lsls	r3, r3, #30
 8000380:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000384:	d509      	bpl.n	800039a <restore_non_core_regs+0x26>
 8000386:	f000 fc5d 	bl	8000c44 <__gnu_Unwind_Restore_VFP_D>
 800038a:	6823      	ldr	r3, [r4, #0]
 800038c:	0759      	lsls	r1, r3, #29
 800038e:	d509      	bpl.n	80003a4 <restore_non_core_regs+0x30>
 8000390:	071a      	lsls	r2, r3, #28
 8000392:	d50e      	bpl.n	80003b2 <restore_non_core_regs+0x3e>
 8000394:	06db      	lsls	r3, r3, #27
 8000396:	d513      	bpl.n	80003c0 <restore_non_core_regs+0x4c>
 8000398:	bd10      	pop	{r4, pc}
 800039a:	f000 fc4b 	bl	8000c34 <__gnu_Unwind_Restore_VFP>
 800039e:	6823      	ldr	r3, [r4, #0]
 80003a0:	0759      	lsls	r1, r3, #29
 80003a2:	d4f5      	bmi.n	8000390 <restore_non_core_regs+0x1c>
 80003a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80003a8:	f000 fc54 	bl	8000c54 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80003ac:	6823      	ldr	r3, [r4, #0]
 80003ae:	071a      	lsls	r2, r3, #28
 80003b0:	d4f0      	bmi.n	8000394 <restore_non_core_regs+0x20>
 80003b2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80003b6:	f000 fc55 	bl	8000c64 <__gnu_Unwind_Restore_WMMXD>
 80003ba:	6823      	ldr	r3, [r4, #0]
 80003bc:	06db      	lsls	r3, r3, #27
 80003be:	d4eb      	bmi.n	8000398 <restore_non_core_regs+0x24>
 80003c0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80003c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003c8:	f000 bc90 	b.w	8000cec <__gnu_Unwind_Restore_WMMXC>

080003cc <__gnu_unwind_24bit.constprop.0>:
 80003cc:	2009      	movs	r0, #9
 80003ce:	4770      	bx	lr

080003d0 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	6800      	ldr	r0, [r0, #0]
 80003d4:	b100      	cbz	r0, 80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80003d6:	4418      	add	r0, r3
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop

080003dc <_Unwind_DebugHook>:
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <unwind_phase2>:
 80003e0:	b570      	push	{r4, r5, r6, lr}
 80003e2:	4604      	mov	r4, r0
 80003e4:	460e      	mov	r6, r1
 80003e6:	4620      	mov	r0, r4
 80003e8:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80003ea:	f7ff ff73 	bl	80002d4 <get_eit_entry>
 80003ee:	4605      	mov	r5, r0
 80003f0:	b998      	cbnz	r0, 800041a <unwind_phase2+0x3a>
 80003f2:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 80003f6:	4632      	mov	r2, r6
 80003f8:	4621      	mov	r1, r4
 80003fa:	2001      	movs	r0, #1
 80003fc:	6923      	ldr	r3, [r4, #16]
 80003fe:	f8c4 c014 	str.w	ip, [r4, #20]
 8000402:	4798      	blx	r3
 8000404:	2808      	cmp	r0, #8
 8000406:	d0ee      	beq.n	80003e6 <unwind_phase2+0x6>
 8000408:	2807      	cmp	r0, #7
 800040a:	d106      	bne.n	800041a <unwind_phase2+0x3a>
 800040c:	4628      	mov	r0, r5
 800040e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000410:	f7ff ffe4 	bl	80003dc <_Unwind_DebugHook>
 8000414:	1d30      	adds	r0, r6, #4
 8000416:	f000 fc01 	bl	8000c1c <__restore_core_regs>
 800041a:	f003 fac5 	bl	80039a8 <abort>
 800041e:	bf00      	nop

08000420 <unwind_phase2_forced>:
 8000420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000424:	f04f 0a00 	mov.w	sl, #0
 8000428:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800042c:	f10d 0e0c 	add.w	lr, sp, #12
 8000430:	f101 0c04 	add.w	ip, r1, #4
 8000434:	68c7      	ldr	r7, [r0, #12]
 8000436:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800043a:	4606      	mov	r6, r0
 800043c:	4614      	mov	r4, r2
 800043e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000442:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800044a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800044e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000452:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000456:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800045a:	ad02      	add	r5, sp, #8
 800045c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000460:	f8c5 a000 	str.w	sl, [r5]
 8000464:	e021      	b.n	80004aa <unwind_phase2_forced+0x8a>
 8000466:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000468:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800046c:	4629      	mov	r1, r5
 800046e:	6173      	str	r3, [r6, #20]
 8000470:	a87a      	add	r0, sp, #488	; 0x1e8
 8000472:	f003 fb7b 	bl	8003b6c <memcpy>
 8000476:	4631      	mov	r1, r6
 8000478:	4650      	mov	r0, sl
 800047a:	6933      	ldr	r3, [r6, #16]
 800047c:	aa7a      	add	r2, sp, #488	; 0x1e8
 800047e:	4798      	blx	r3
 8000480:	9c88      	ldr	r4, [sp, #544]	; 0x220
 8000482:	4682      	mov	sl, r0
 8000484:	646c      	str	r4, [r5, #68]	; 0x44
 8000486:	4633      	mov	r3, r6
 8000488:	4632      	mov	r2, r6
 800048a:	4649      	mov	r1, r9
 800048c:	2001      	movs	r0, #1
 800048e:	e9cd 5800 	strd	r5, r8, [sp]
 8000492:	47b8      	blx	r7
 8000494:	4604      	mov	r4, r0
 8000496:	b9f0      	cbnz	r0, 80004d6 <unwind_phase2_forced+0xb6>
 8000498:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800049c:	4628      	mov	r0, r5
 800049e:	a97a      	add	r1, sp, #488	; 0x1e8
 80004a0:	f003 fb64 	bl	8003b6c <memcpy>
 80004a4:	f1ba 0f08 	cmp.w	sl, #8
 80004a8:	d11b      	bne.n	80004e2 <unwind_phase2_forced+0xc2>
 80004aa:	4630      	mov	r0, r6
 80004ac:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004ae:	f7ff ff11 	bl	80002d4 <get_eit_entry>
 80004b2:	f104 0909 	add.w	r9, r4, #9
 80004b6:	fa5f fa89 	uxtb.w	sl, r9
 80004ba:	4604      	mov	r4, r0
 80004bc:	2800      	cmp	r0, #0
 80004be:	d0d2      	beq.n	8000466 <unwind_phase2_forced+0x46>
 80004c0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80004c2:	4633      	mov	r3, r6
 80004c4:	6469      	str	r1, [r5, #68]	; 0x44
 80004c6:	4632      	mov	r2, r6
 80004c8:	2001      	movs	r0, #1
 80004ca:	e9cd 5800 	strd	r5, r8, [sp]
 80004ce:	f04a 0110 	orr.w	r1, sl, #16
 80004d2:	47b8      	blx	r7
 80004d4:	b100      	cbz	r0, 80004d8 <unwind_phase2_forced+0xb8>
 80004d6:	2409      	movs	r4, #9
 80004d8:	4620      	mov	r0, r4
 80004da:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	f1ba 0f07 	cmp.w	sl, #7
 80004e6:	d1f6      	bne.n	80004d6 <unwind_phase2_forced+0xb6>
 80004e8:	4620      	mov	r0, r4
 80004ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004ec:	f7ff ff76 	bl	80003dc <_Unwind_DebugHook>
 80004f0:	a803      	add	r0, sp, #12
 80004f2:	f000 fb93 	bl	8000c1c <__restore_core_regs>
 80004f6:	bf00      	nop

080004f8 <_Unwind_GetCFA>:
 80004f8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80004fa:	4770      	bx	lr

080004fc <__gnu_Unwind_RaiseException>:
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000502:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000504:	b0f9      	sub	sp, #484	; 0x1e4
 8000506:	640b      	str	r3, [r1, #64]	; 0x40
 8000508:	ac01      	add	r4, sp, #4
 800050a:	f101 0c04 	add.w	ip, r1, #4
 800050e:	460e      	mov	r6, r1
 8000510:	4605      	mov	r5, r0
 8000512:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000518:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800051c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800051e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000524:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800052c:	9700      	str	r7, [sp, #0]
 800052e:	e006      	b.n	800053e <__gnu_Unwind_RaiseException+0x42>
 8000530:	466a      	mov	r2, sp
 8000532:	4629      	mov	r1, r5
 8000534:	692b      	ldr	r3, [r5, #16]
 8000536:	4798      	blx	r3
 8000538:	2808      	cmp	r0, #8
 800053a:	4604      	mov	r4, r0
 800053c:	d108      	bne.n	8000550 <__gnu_Unwind_RaiseException+0x54>
 800053e:	4628      	mov	r0, r5
 8000540:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000542:	f7ff fec7 	bl	80002d4 <get_eit_entry>
 8000546:	2800      	cmp	r0, #0
 8000548:	d0f2      	beq.n	8000530 <__gnu_Unwind_RaiseException+0x34>
 800054a:	2009      	movs	r0, #9
 800054c:	b079      	add	sp, #484	; 0x1e4
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000550:	4668      	mov	r0, sp
 8000552:	f7ff ff0f 	bl	8000374 <restore_non_core_regs>
 8000556:	2c06      	cmp	r4, #6
 8000558:	d1f7      	bne.n	800054a <__gnu_Unwind_RaiseException+0x4e>
 800055a:	4631      	mov	r1, r6
 800055c:	4628      	mov	r0, r5
 800055e:	f7ff ff3f 	bl	80003e0 <unwind_phase2>
 8000562:	bf00      	nop

08000564 <__gnu_Unwind_ForcedUnwind>:
 8000564:	b410      	push	{r4}
 8000566:	4614      	mov	r4, r2
 8000568:	6184      	str	r4, [r0, #24]
 800056a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800056c:	60c1      	str	r1, [r0, #12]
 800056e:	2200      	movs	r2, #0
 8000570:	641c      	str	r4, [r3, #64]	; 0x40
 8000572:	4619      	mov	r1, r3
 8000574:	bc10      	pop	{r4}
 8000576:	e753      	b.n	8000420 <unwind_phase2_forced>

08000578 <__gnu_Unwind_Resume>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	6943      	ldr	r3, [r0, #20]
 800057c:	68c6      	ldr	r6, [r0, #12]
 800057e:	640b      	str	r3, [r1, #64]	; 0x40
 8000580:	b9ae      	cbnz	r6, 80005ae <__gnu_Unwind_Resume+0x36>
 8000582:	460a      	mov	r2, r1
 8000584:	6903      	ldr	r3, [r0, #16]
 8000586:	4604      	mov	r4, r0
 8000588:	460d      	mov	r5, r1
 800058a:	4601      	mov	r1, r0
 800058c:	2002      	movs	r0, #2
 800058e:	4798      	blx	r3
 8000590:	2807      	cmp	r0, #7
 8000592:	d005      	beq.n	80005a0 <__gnu_Unwind_Resume+0x28>
 8000594:	2808      	cmp	r0, #8
 8000596:	d10f      	bne.n	80005b8 <__gnu_Unwind_Resume+0x40>
 8000598:	4629      	mov	r1, r5
 800059a:	4620      	mov	r0, r4
 800059c:	f7ff ff20 	bl	80003e0 <unwind_phase2>
 80005a0:	4630      	mov	r0, r6
 80005a2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80005a4:	f7ff ff1a 	bl	80003dc <_Unwind_DebugHook>
 80005a8:	1d28      	adds	r0, r5, #4
 80005aa:	f000 fb37 	bl	8000c1c <__restore_core_regs>
 80005ae:	2201      	movs	r2, #1
 80005b0:	f7ff ff36 	bl	8000420 <unwind_phase2_forced>
 80005b4:	f003 f9f8 	bl	80039a8 <abort>
 80005b8:	f003 f9f6 	bl	80039a8 <abort>

080005bc <__gnu_Unwind_Resume_or_Rethrow>:
 80005bc:	68c2      	ldr	r2, [r0, #12]
 80005be:	b12a      	cbz	r2, 80005cc <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80005c0:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 80005c4:	2200      	movs	r2, #0
 80005c6:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 80005ca:	e729      	b.n	8000420 <unwind_phase2_forced>
 80005cc:	e796      	b.n	80004fc <__gnu_Unwind_RaiseException>
 80005ce:	bf00      	nop

080005d0 <_Unwind_Complete>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <_Unwind_DeleteException>:
 80005d4:	6883      	ldr	r3, [r0, #8]
 80005d6:	4601      	mov	r1, r0
 80005d8:	b10b      	cbz	r3, 80005de <_Unwind_DeleteException+0xa>
 80005da:	2001      	movs	r0, #1
 80005dc:	4718      	bx	r3
 80005de:	4770      	bx	lr

080005e0 <_Unwind_VRS_Get>:
 80005e0:	2901      	cmp	r1, #1
 80005e2:	d012      	beq.n	800060a <_Unwind_VRS_Get+0x2a>
 80005e4:	d809      	bhi.n	80005fa <_Unwind_VRS_Get+0x1a>
 80005e6:	b973      	cbnz	r3, 8000606 <_Unwind_VRS_Get+0x26>
 80005e8:	2a0f      	cmp	r2, #15
 80005ea:	d80c      	bhi.n	8000606 <_Unwind_VRS_Get+0x26>
 80005ec:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005f0:	6842      	ldr	r2, [r0, #4]
 80005f2:	4618      	mov	r0, r3
 80005f4:	9b00      	ldr	r3, [sp, #0]
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	4770      	bx	lr
 80005fa:	3903      	subs	r1, #3
 80005fc:	2901      	cmp	r1, #1
 80005fe:	bf94      	ite	ls
 8000600:	2001      	movls	r0, #1
 8000602:	2002      	movhi	r0, #2
 8000604:	4770      	bx	lr
 8000606:	2002      	movs	r0, #2
 8000608:	4770      	bx	lr
 800060a:	4608      	mov	r0, r1
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <_Unwind_GetGR>:
 8000610:	2300      	movs	r3, #0
 8000612:	b500      	push	{lr}
 8000614:	b085      	sub	sp, #20
 8000616:	460a      	mov	r2, r1
 8000618:	a903      	add	r1, sp, #12
 800061a:	9100      	str	r1, [sp, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	f7ff ffdf 	bl	80005e0 <_Unwind_VRS_Get>
 8000622:	9803      	ldr	r0, [sp, #12]
 8000624:	b005      	add	sp, #20
 8000626:	f85d fb04 	ldr.w	pc, [sp], #4
 800062a:	bf00      	nop

0800062c <_Unwind_VRS_Set>:
 800062c:	2901      	cmp	r1, #1
 800062e:	d012      	beq.n	8000656 <_Unwind_VRS_Set+0x2a>
 8000630:	d809      	bhi.n	8000646 <_Unwind_VRS_Set+0x1a>
 8000632:	b973      	cbnz	r3, 8000652 <_Unwind_VRS_Set+0x26>
 8000634:	2a0f      	cmp	r2, #15
 8000636:	d80c      	bhi.n	8000652 <_Unwind_VRS_Set+0x26>
 8000638:	9900      	ldr	r1, [sp, #0]
 800063a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800063e:	6809      	ldr	r1, [r1, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	6051      	str	r1, [r2, #4]
 8000644:	4770      	bx	lr
 8000646:	3903      	subs	r1, #3
 8000648:	2901      	cmp	r1, #1
 800064a:	bf94      	ite	ls
 800064c:	2001      	movls	r0, #1
 800064e:	2002      	movhi	r0, #2
 8000650:	4770      	bx	lr
 8000652:	2002      	movs	r0, #2
 8000654:	4770      	bx	lr
 8000656:	4608      	mov	r0, r1
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <_Unwind_SetGR>:
 800065c:	2300      	movs	r3, #0
 800065e:	b510      	push	{r4, lr}
 8000660:	b084      	sub	sp, #16
 8000662:	ac03      	add	r4, sp, #12
 8000664:	9203      	str	r2, [sp, #12]
 8000666:	9400      	str	r4, [sp, #0]
 8000668:	460a      	mov	r2, r1
 800066a:	4619      	mov	r1, r3
 800066c:	f7ff ffde 	bl	800062c <_Unwind_VRS_Set>
 8000670:	b004      	add	sp, #16
 8000672:	bd10      	pop	{r4, pc}

08000674 <__gnu_Unwind_Backtrace>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800067a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800067c:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
 8000682:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8000686:	f102 0c04 	add.w	ip, r2, #4
 800068a:	4605      	mov	r5, r0
 800068c:	460c      	mov	r4, r1
 800068e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000692:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000696:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800069a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800069e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006a6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80006aa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80006ae:	9616      	str	r6, [sp, #88]	; 0x58
 80006b0:	e012      	b.n	80006d8 <__gnu_Unwind_Backtrace+0x64>
 80006b2:	210c      	movs	r1, #12
 80006b4:	a816      	add	r0, sp, #88	; 0x58
 80006b6:	466a      	mov	r2, sp
 80006b8:	f7ff ffd0 	bl	800065c <_Unwind_SetGR>
 80006bc:	4621      	mov	r1, r4
 80006be:	a816      	add	r0, sp, #88	; 0x58
 80006c0:	47a8      	blx	r5
 80006c2:	b978      	cbnz	r0, 80006e4 <__gnu_Unwind_Backtrace+0x70>
 80006c4:	4669      	mov	r1, sp
 80006c6:	2008      	movs	r0, #8
 80006c8:	9b04      	ldr	r3, [sp, #16]
 80006ca:	aa16      	add	r2, sp, #88	; 0x58
 80006cc:	4798      	blx	r3
 80006ce:	2805      	cmp	r0, #5
 80006d0:	4606      	mov	r6, r0
 80006d2:	d008      	beq.n	80006e6 <__gnu_Unwind_Backtrace+0x72>
 80006d4:	2809      	cmp	r0, #9
 80006d6:	d005      	beq.n	80006e4 <__gnu_Unwind_Backtrace+0x70>
 80006d8:	4668      	mov	r0, sp
 80006da:	9926      	ldr	r1, [sp, #152]	; 0x98
 80006dc:	f7ff fdfa 	bl	80002d4 <get_eit_entry>
 80006e0:	2800      	cmp	r0, #0
 80006e2:	d0e6      	beq.n	80006b2 <__gnu_Unwind_Backtrace+0x3e>
 80006e4:	2609      	movs	r6, #9
 80006e6:	a816      	add	r0, sp, #88	; 0x58
 80006e8:	f7ff fe44 	bl	8000374 <restore_non_core_regs>
 80006ec:	4630      	mov	r0, r6
 80006ee:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80006f2:	bd70      	pop	{r4, r5, r6, pc}

080006f4 <__gnu_unwind_pr_common>:
 80006f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006f8:	461e      	mov	r6, r3
 80006fa:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80006fc:	b089      	sub	sp, #36	; 0x24
 80006fe:	f854 3b04 	ldr.w	r3, [r4], #4
 8000702:	460d      	mov	r5, r1
 8000704:	4617      	mov	r7, r2
 8000706:	f000 0803 	and.w	r8, r0, #3
 800070a:	9406      	str	r4, [sp, #24]
 800070c:	2e00      	cmp	r6, #0
 800070e:	d079      	beq.n	8000804 <__gnu_unwind_pr_common+0x110>
 8000710:	2202      	movs	r2, #2
 8000712:	f88d 201c 	strb.w	r2, [sp, #28]
 8000716:	0c1a      	lsrs	r2, r3, #16
 8000718:	f88d 201d 	strb.w	r2, [sp, #29]
 800071c:	041b      	lsls	r3, r3, #16
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	9305      	str	r3, [sp, #20]
 8000722:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000726:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000728:	f1b8 0f02 	cmp.w	r8, #2
 800072c:	bf08      	it	eq
 800072e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000730:	f013 0301 	ands.w	r3, r3, #1
 8000734:	d00c      	beq.n	8000750 <__gnu_unwind_pr_common+0x5c>
 8000736:	4638      	mov	r0, r7
 8000738:	a905      	add	r1, sp, #20
 800073a:	f000 fb71 	bl	8000e20 <__gnu_unwind_execute>
 800073e:	b918      	cbnz	r0, 8000748 <__gnu_unwind_pr_common+0x54>
 8000740:	2008      	movs	r0, #8
 8000742:	b009      	add	sp, #36	; 0x24
 8000744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000748:	2009      	movs	r0, #9
 800074a:	b009      	add	sp, #36	; 0x24
 800074c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000750:	f8d4 a000 	ldr.w	sl, [r4]
 8000754:	f1ba 0f00 	cmp.w	sl, #0
 8000758:	d0ed      	beq.n	8000736 <__gnu_unwind_pr_common+0x42>
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	f000 0308 	and.w	r3, r0, #8
 8000760:	9302      	str	r3, [sp, #8]
 8000762:	2e02      	cmp	r6, #2
 8000764:	d04a      	beq.n	80007fc <__gnu_unwind_pr_common+0x108>
 8000766:	f8b4 a000 	ldrh.w	sl, [r4]
 800076a:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 800076e:	3404      	adds	r4, #4
 8000770:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000772:	210f      	movs	r1, #15
 8000774:	4638      	mov	r0, r7
 8000776:	f029 0b01 	bic.w	fp, r9, #1
 800077a:	4493      	add	fp, r2
 800077c:	f7ff ff48 	bl	8000610 <_Unwind_GetGR>
 8000780:	4583      	cmp	fp, r0
 8000782:	d839      	bhi.n	80007f8 <__gnu_unwind_pr_common+0x104>
 8000784:	f02a 0201 	bic.w	r2, sl, #1
 8000788:	445a      	add	r2, fp
 800078a:	4282      	cmp	r2, r0
 800078c:	bf94      	ite	ls
 800078e:	2000      	movls	r0, #0
 8000790:	2001      	movhi	r0, #1
 8000792:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	f00a 0a01 	and.w	sl, sl, #1
 800079e:	ea43 030a 	orr.w	r3, r3, sl
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d049      	beq.n	800083a <__gnu_unwind_pr_common+0x146>
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d032      	beq.n	8000810 <__gnu_unwind_pr_common+0x11c>
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1cc      	bne.n	8000748 <__gnu_unwind_pr_common+0x54>
 80007ae:	f1b8 0f00 	cmp.w	r8, #0
 80007b2:	d002      	beq.n	80007ba <__gnu_unwind_pr_common+0xc6>
 80007b4:	2800      	cmp	r0, #0
 80007b6:	f040 80ce 	bne.w	8000956 <__gnu_unwind_pr_common+0x262>
 80007ba:	3404      	adds	r4, #4
 80007bc:	f8d4 a000 	ldr.w	sl, [r4]
 80007c0:	f1ba 0f00 	cmp.w	sl, #0
 80007c4:	d1cd      	bne.n	8000762 <__gnu_unwind_pr_common+0x6e>
 80007c6:	4638      	mov	r0, r7
 80007c8:	a905      	add	r1, sp, #20
 80007ca:	f000 fb29 	bl	8000e20 <__gnu_unwind_execute>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d1ba      	bne.n	8000748 <__gnu_unwind_pr_common+0x54>
 80007d2:	9b01      	ldr	r3, [sp, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0b3      	beq.n	8000740 <__gnu_unwind_pr_common+0x4c>
 80007d8:	210f      	movs	r1, #15
 80007da:	4638      	mov	r0, r7
 80007dc:	f7ff ff18 	bl	8000610 <_Unwind_GetGR>
 80007e0:	210e      	movs	r1, #14
 80007e2:	4602      	mov	r2, r0
 80007e4:	4638      	mov	r0, r7
 80007e6:	f7ff ff39 	bl	800065c <_Unwind_SetGR>
 80007ea:	4638      	mov	r0, r7
 80007ec:	210f      	movs	r1, #15
 80007ee:	4a6a      	ldr	r2, [pc, #424]	; (8000998 <__gnu_unwind_pr_common+0x2a4>)
 80007f0:	f7ff ff34 	bl	800065c <_Unwind_SetGR>
 80007f4:	2007      	movs	r0, #7
 80007f6:	e7a8      	b.n	800074a <__gnu_unwind_pr_common+0x56>
 80007f8:	2000      	movs	r0, #0
 80007fa:	e7ca      	b.n	8000792 <__gnu_unwind_pr_common+0x9e>
 80007fc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000800:	3408      	adds	r4, #8
 8000802:	e7b5      	b.n	8000770 <__gnu_unwind_pr_common+0x7c>
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	9305      	str	r3, [sp, #20]
 8000808:	2303      	movs	r3, #3
 800080a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800080e:	e78a      	b.n	8000726 <__gnu_unwind_pr_common+0x32>
 8000810:	6823      	ldr	r3, [r4, #0]
 8000812:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000816:	f1b8 0f00 	cmp.w	r8, #0
 800081a:	d145      	bne.n	80008a8 <__gnu_unwind_pr_common+0x1b4>
 800081c:	b128      	cbz	r0, 800082a <__gnu_unwind_pr_common+0x136>
 800081e:	9a02      	ldr	r2, [sp, #8]
 8000820:	2a00      	cmp	r2, #0
 8000822:	d05c      	beq.n	80008de <__gnu_unwind_pr_common+0x1ea>
 8000824:	f1bb 0f00 	cmp.w	fp, #0
 8000828:	d074      	beq.n	8000914 <__gnu_unwind_pr_common+0x220>
 800082a:	2b00      	cmp	r3, #0
 800082c:	da00      	bge.n	8000830 <__gnu_unwind_pr_common+0x13c>
 800082e:	3404      	adds	r4, #4
 8000830:	f10b 0b01 	add.w	fp, fp, #1
 8000834:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000838:	e7c0      	b.n	80007bc <__gnu_unwind_pr_common+0xc8>
 800083a:	f1b8 0f00 	cmp.w	r8, #0
 800083e:	d119      	bne.n	8000874 <__gnu_unwind_pr_common+0x180>
 8000840:	b1b0      	cbz	r0, 8000870 <__gnu_unwind_pr_common+0x17c>
 8000842:	6863      	ldr	r3, [r4, #4]
 8000844:	6822      	ldr	r2, [r4, #0]
 8000846:	1c99      	adds	r1, r3, #2
 8000848:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800084c:	f43f af7c 	beq.w	8000748 <__gnu_unwind_pr_common+0x54>
 8000850:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000854:	3301      	adds	r3, #1
 8000856:	9104      	str	r1, [sp, #16]
 8000858:	f000 8091 	beq.w	800097e <__gnu_unwind_pr_common+0x28a>
 800085c:	1d20      	adds	r0, r4, #4
 800085e:	f7ff fdb7 	bl	80003d0 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000862:	ab04      	add	r3, sp, #16
 8000864:	4601      	mov	r1, r0
 8000866:	4628      	mov	r0, r5
 8000868:	f002 fbd2 	bl	8003010 <__cxa_type_match>
 800086c:	2800      	cmp	r0, #0
 800086e:	d15c      	bne.n	800092a <__gnu_unwind_pr_common+0x236>
 8000870:	3408      	adds	r4, #8
 8000872:	e7a3      	b.n	80007bc <__gnu_unwind_pr_common+0xc8>
 8000874:	210d      	movs	r1, #13
 8000876:	4638      	mov	r0, r7
 8000878:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800087c:	f7ff fec8 	bl	8000610 <_Unwind_GetGR>
 8000880:	4581      	cmp	r9, r0
 8000882:	d1f5      	bne.n	8000870 <__gnu_unwind_pr_common+0x17c>
 8000884:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000886:	429c      	cmp	r4, r3
 8000888:	d1f2      	bne.n	8000870 <__gnu_unwind_pr_common+0x17c>
 800088a:	4620      	mov	r0, r4
 800088c:	f7ff fcd4 	bl	8000238 <selfrel_offset31>
 8000890:	210f      	movs	r1, #15
 8000892:	4602      	mov	r2, r0
 8000894:	4638      	mov	r0, r7
 8000896:	f7ff fee1 	bl	800065c <_Unwind_SetGR>
 800089a:	4638      	mov	r0, r7
 800089c:	462a      	mov	r2, r5
 800089e:	2100      	movs	r1, #0
 80008a0:	f7ff fedc 	bl	800065c <_Unwind_SetGR>
 80008a4:	2007      	movs	r0, #7
 80008a6:	e750      	b.n	800074a <__gnu_unwind_pr_common+0x56>
 80008a8:	210d      	movs	r1, #13
 80008aa:	4638      	mov	r0, r7
 80008ac:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80008b0:	f7ff feae 	bl	8000610 <_Unwind_GetGR>
 80008b4:	4581      	cmp	r9, r0
 80008b6:	d001      	beq.n	80008bc <__gnu_unwind_pr_common+0x1c8>
 80008b8:	6823      	ldr	r3, [r4, #0]
 80008ba:	e7b6      	b.n	800082a <__gnu_unwind_pr_common+0x136>
 80008bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008be:	429c      	cmp	r4, r3
 80008c0:	d1fa      	bne.n	80008b8 <__gnu_unwind_pr_common+0x1c4>
 80008c2:	2304      	movs	r3, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80008ca:	18e3      	adds	r3, r4, r3
 80008cc:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80008d0:	636b      	str	r3, [r5, #52]	; 0x34
 80008d2:	6823      	ldr	r3, [r4, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db5a      	blt.n	800098e <__gnu_unwind_pr_common+0x29a>
 80008d8:	2301      	movs	r3, #1
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	e7a8      	b.n	8000830 <__gnu_unwind_pr_common+0x13c>
 80008de:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80008e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80008e6:	4691      	mov	r9, r2
 80008e8:	46b0      	mov	r8, r6
 80008ea:	f104 0a04 	add.w	sl, r4, #4
 80008ee:	461e      	mov	r6, r3
 80008f0:	e00e      	b.n	8000910 <__gnu_unwind_pr_common+0x21c>
 80008f2:	4650      	mov	r0, sl
 80008f4:	9604      	str	r6, [sp, #16]
 80008f6:	f7ff fd6b 	bl	80003d0 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80008fa:	2200      	movs	r2, #0
 80008fc:	4601      	mov	r1, r0
 80008fe:	ab04      	add	r3, sp, #16
 8000900:	4628      	mov	r0, r5
 8000902:	f109 0901 	add.w	r9, r9, #1
 8000906:	f10a 0a04 	add.w	sl, sl, #4
 800090a:	f002 fb81 	bl	8003010 <__cxa_type_match>
 800090e:	b9e8      	cbnz	r0, 800094c <__gnu_unwind_pr_common+0x258>
 8000910:	45d9      	cmp	r9, fp
 8000912:	d1ee      	bne.n	80008f2 <__gnu_unwind_pr_common+0x1fe>
 8000914:	210d      	movs	r1, #13
 8000916:	4638      	mov	r0, r7
 8000918:	f7ff fe7a 	bl	8000610 <_Unwind_GetGR>
 800091c:	4603      	mov	r3, r0
 800091e:	9a04      	ldr	r2, [sp, #16]
 8000920:	2006      	movs	r0, #6
 8000922:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 8000926:	622b      	str	r3, [r5, #32]
 8000928:	e70f      	b.n	800074a <__gnu_unwind_pr_common+0x56>
 800092a:	4681      	mov	r9, r0
 800092c:	210d      	movs	r1, #13
 800092e:	4638      	mov	r0, r7
 8000930:	f7ff fe6e 	bl	8000610 <_Unwind_GetGR>
 8000934:	f1b9 0f02 	cmp.w	r9, #2
 8000938:	6228      	str	r0, [r5, #32]
 800093a:	d125      	bne.n	8000988 <__gnu_unwind_pr_common+0x294>
 800093c:	462b      	mov	r3, r5
 800093e:	9a04      	ldr	r2, [sp, #16]
 8000940:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000944:	626b      	str	r3, [r5, #36]	; 0x24
 8000946:	2006      	movs	r0, #6
 8000948:	62ac      	str	r4, [r5, #40]	; 0x28
 800094a:	e6fe      	b.n	800074a <__gnu_unwind_pr_common+0x56>
 800094c:	4646      	mov	r6, r8
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000954:	e769      	b.n	800082a <__gnu_unwind_pr_common+0x136>
 8000956:	4620      	mov	r0, r4
 8000958:	f7ff fc6e 	bl	8000238 <selfrel_offset31>
 800095c:	4602      	mov	r2, r0
 800095e:	3404      	adds	r4, #4
 8000960:	63ac      	str	r4, [r5, #56]	; 0x38
 8000962:	4628      	mov	r0, r5
 8000964:	4614      	mov	r4, r2
 8000966:	f002 fbb1 	bl	80030cc <__cxa_begin_cleanup>
 800096a:	2800      	cmp	r0, #0
 800096c:	f43f aeec 	beq.w	8000748 <__gnu_unwind_pr_common+0x54>
 8000970:	4638      	mov	r0, r7
 8000972:	4622      	mov	r2, r4
 8000974:	210f      	movs	r1, #15
 8000976:	f7ff fe71 	bl	800065c <_Unwind_SetGR>
 800097a:	2007      	movs	r0, #7
 800097c:	e6e5      	b.n	800074a <__gnu_unwind_pr_common+0x56>
 800097e:	210d      	movs	r1, #13
 8000980:	4638      	mov	r0, r7
 8000982:	f7ff fe45 	bl	8000610 <_Unwind_GetGR>
 8000986:	6228      	str	r0, [r5, #32]
 8000988:	9b04      	ldr	r3, [sp, #16]
 800098a:	626b      	str	r3, [r5, #36]	; 0x24
 800098c:	e7db      	b.n	8000946 <__gnu_unwind_pr_common+0x252>
 800098e:	f10b 0001 	add.w	r0, fp, #1
 8000992:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000996:	e779      	b.n	800088c <__gnu_unwind_pr_common+0x198>
 8000998:	080038f5 	.word	0x080038f5

0800099c <__aeabi_unwind_cpp_pr0>:
 800099c:	2300      	movs	r3, #0
 800099e:	e6a9      	b.n	80006f4 <__gnu_unwind_pr_common>

080009a0 <__aeabi_unwind_cpp_pr1>:
 80009a0:	2301      	movs	r3, #1
 80009a2:	e6a7      	b.n	80006f4 <__gnu_unwind_pr_common>

080009a4 <__aeabi_unwind_cpp_pr2>:
 80009a4:	2302      	movs	r3, #2
 80009a6:	e6a5      	b.n	80006f4 <__gnu_unwind_pr_common>

080009a8 <_Unwind_VRS_Pop>:
 80009a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009ac:	4606      	mov	r6, r0
 80009ae:	4615      	mov	r5, r2
 80009b0:	461c      	mov	r4, r3
 80009b2:	b0c3      	sub	sp, #268	; 0x10c
 80009b4:	2904      	cmp	r1, #4
 80009b6:	f200 80b8 	bhi.w	8000b2a <_Unwind_VRS_Pop+0x182>
 80009ba:	e8df f001 	tbb	[pc, r1]
 80009be:	569c      	.short	0x569c
 80009c0:	2db6      	.short	0x2db6
 80009c2:	03          	.byte	0x03
 80009c3:	00          	.byte	0x00
 80009c4:	2c00      	cmp	r4, #0
 80009c6:	f040 80b0 	bne.w	8000b2a <_Unwind_VRS_Pop+0x182>
 80009ca:	2a10      	cmp	r2, #16
 80009cc:	f200 80ad 	bhi.w	8000b2a <_Unwind_VRS_Pop+0x182>
 80009d0:	6803      	ldr	r3, [r0, #0]
 80009d2:	06d8      	lsls	r0, r3, #27
 80009d4:	f100 80f1 	bmi.w	8000bba <_Unwind_VRS_Pop+0x212>
 80009d8:	af20      	add	r7, sp, #128	; 0x80
 80009da:	4638      	mov	r0, r7
 80009dc:	f000 f990 	bl	8000d00 <__gnu_Unwind_Save_WMMXC>
 80009e0:	2401      	movs	r4, #1
 80009e2:	4638      	mov	r0, r7
 80009e4:	2300      	movs	r3, #0
 80009e6:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80009e8:	fa04 f203 	lsl.w	r2, r4, r3
 80009ec:	422a      	tst	r2, r5
 80009ee:	f103 0301 	add.w	r3, r3, #1
 80009f2:	d005      	beq.n	8000a00 <_Unwind_VRS_Pop+0x58>
 80009f4:	460a      	mov	r2, r1
 80009f6:	f852 cb04 	ldr.w	ip, [r2], #4
 80009fa:	4611      	mov	r1, r2
 80009fc:	f8c0 c000 	str.w	ip, [r0]
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	f100 0004 	add.w	r0, r0, #4
 8000a06:	d1ef      	bne.n	80009e8 <_Unwind_VRS_Pop+0x40>
 8000a08:	4638      	mov	r0, r7
 8000a0a:	63b1      	str	r1, [r6, #56]	; 0x38
 8000a0c:	f000 f96e 	bl	8000cec <__gnu_Unwind_Restore_WMMXC>
 8000a10:	2000      	movs	r0, #0
 8000a12:	b043      	add	sp, #268	; 0x10c
 8000a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a18:	2c03      	cmp	r4, #3
 8000a1a:	f040 8086 	bne.w	8000b2a <_Unwind_VRS_Pop+0x182>
 8000a1e:	b294      	uxth	r4, r2
 8000a20:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000a24:	2b10      	cmp	r3, #16
 8000a26:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000a2a:	d87e      	bhi.n	8000b2a <_Unwind_VRS_Pop+0x182>
 8000a2c:	6803      	ldr	r3, [r0, #0]
 8000a2e:	071f      	lsls	r7, r3, #28
 8000a30:	f100 80cb 	bmi.w	8000bca <_Unwind_VRS_Pop+0x222>
 8000a34:	af20      	add	r7, sp, #128	; 0x80
 8000a36:	4638      	mov	r0, r7
 8000a38:	f000 f936 	bl	8000ca8 <__gnu_Unwind_Save_WMMXD>
 8000a3c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000a3e:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000a42:	b154      	cbz	r4, 8000a5a <_Unwind_VRS_Pop+0xb2>
 8000a44:	460b      	mov	r3, r1
 8000a46:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000a4a:	1ad0      	subs	r0, r2, r3
 8000a4c:	00e4      	lsls	r4, r4, #3
 8000a4e:	581d      	ldr	r5, [r3, r0]
 8000a50:	f843 5b04 	str.w	r5, [r3], #4
 8000a54:	428b      	cmp	r3, r1
 8000a56:	d1fa      	bne.n	8000a4e <_Unwind_VRS_Pop+0xa6>
 8000a58:	4422      	add	r2, r4
 8000a5a:	4638      	mov	r0, r7
 8000a5c:	63b2      	str	r2, [r6, #56]	; 0x38
 8000a5e:	f000 f901 	bl	8000c64 <__gnu_Unwind_Restore_WMMXD>
 8000a62:	2000      	movs	r0, #0
 8000a64:	b043      	add	sp, #268	; 0x10c
 8000a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a6a:	2c01      	cmp	r4, #1
 8000a6c:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000a70:	b295      	uxth	r5, r2
 8000a72:	d056      	beq.n	8000b22 <_Unwind_VRS_Pop+0x17a>
 8000a74:	2c05      	cmp	r4, #5
 8000a76:	d158      	bne.n	8000b2a <_Unwind_VRS_Pop+0x182>
 8000a78:	eb08 0905 	add.w	r9, r8, r5
 8000a7c:	f1b9 0f20 	cmp.w	r9, #32
 8000a80:	d853      	bhi.n	8000b2a <_Unwind_VRS_Pop+0x182>
 8000a82:	f1b8 0f0f 	cmp.w	r8, #15
 8000a86:	d973      	bls.n	8000b70 <_Unwind_VRS_Pop+0x1c8>
 8000a88:	46a9      	mov	r9, r5
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	f040 8084 	bne.w	8000b98 <_Unwind_VRS_Pop+0x1f0>
 8000a90:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a92:	b365      	cbz	r5, 8000aee <_Unwind_VRS_Pop+0x146>
 8000a94:	af20      	add	r7, sp, #128	; 0x80
 8000a96:	f04f 0900 	mov.w	r9, #0
 8000a9a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000a9e:	3f04      	subs	r7, #4
 8000aa0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000aa4:	f853 1b04 	ldr.w	r1, [r3], #4
 8000aa8:	42ab      	cmp	r3, r5
 8000aaa:	f847 1f04 	str.w	r1, [r7, #4]!
 8000aae:	d1f9      	bne.n	8000aa4 <_Unwind_VRS_Pop+0xfc>
 8000ab0:	f1b9 0f00 	cmp.w	r9, #0
 8000ab4:	d00f      	beq.n	8000ad6 <_Unwind_VRS_Pop+0x12e>
 8000ab6:	466f      	mov	r7, sp
 8000ab8:	4641      	mov	r1, r8
 8000aba:	2910      	cmp	r1, #16
 8000abc:	bf38      	it	cc
 8000abe:	2110      	movcc	r1, #16
 8000ac0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000ac4:	3984      	subs	r1, #132	; 0x84
 8000ac6:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000aca:	f853 0b04 	ldr.w	r0, [r3], #4
 8000ace:	42ab      	cmp	r3, r5
 8000ad0:	f841 0f04 	str.w	r0, [r1, #4]!
 8000ad4:	d1f9      	bne.n	8000aca <_Unwind_VRS_Pop+0x122>
 8000ad6:	2c01      	cmp	r4, #1
 8000ad8:	d07f      	beq.n	8000bda <_Unwind_VRS_Pop+0x232>
 8000ada:	f1b8 0f0f 	cmp.w	r8, #15
 8000ade:	63b5      	str	r5, [r6, #56]	; 0x38
 8000ae0:	d942      	bls.n	8000b68 <_Unwind_VRS_Pop+0x1c0>
 8000ae2:	f1b9 0f00 	cmp.w	r9, #0
 8000ae6:	d002      	beq.n	8000aee <_Unwind_VRS_Pop+0x146>
 8000ae8:	4668      	mov	r0, sp
 8000aea:	f000 f8b3 	bl	8000c54 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000aee:	2000      	movs	r0, #0
 8000af0:	b043      	add	sp, #268	; 0x10c
 8000af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000af6:	b9c4      	cbnz	r4, 8000b2a <_Unwind_VRS_Pop+0x182>
 8000af8:	4623      	mov	r3, r4
 8000afa:	2401      	movs	r4, #1
 8000afc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000afe:	1d37      	adds	r7, r6, #4
 8000b00:	b2a8      	uxth	r0, r5
 8000b02:	fa04 f103 	lsl.w	r1, r4, r3
 8000b06:	4201      	tst	r1, r0
 8000b08:	bf1c      	itt	ne
 8000b0a:	f852 1b04 	ldrne.w	r1, [r2], #4
 8000b0e:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8000b12:	3301      	adds	r3, #1
 8000b14:	2b10      	cmp	r3, #16
 8000b16:	d1f4      	bne.n	8000b02 <_Unwind_VRS_Pop+0x15a>
 8000b18:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000b1c:	d1e7      	bne.n	8000aee <_Unwind_VRS_Pop+0x146>
 8000b1e:	63b2      	str	r2, [r6, #56]	; 0x38
 8000b20:	e004      	b.n	8000b2c <_Unwind_VRS_Pop+0x184>
 8000b22:	eb08 0305 	add.w	r3, r8, r5
 8000b26:	2b10      	cmp	r3, #16
 8000b28:	d903      	bls.n	8000b32 <_Unwind_VRS_Pop+0x18a>
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	b043      	add	sp, #268	; 0x10c
 8000b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b32:	f1b8 0f0f 	cmp.w	r8, #15
 8000b36:	d8f8      	bhi.n	8000b2a <_Unwind_VRS_Pop+0x182>
 8000b38:	6833      	ldr	r3, [r6, #0]
 8000b3a:	07da      	lsls	r2, r3, #31
 8000b3c:	d506      	bpl.n	8000b4c <_Unwind_VRS_Pop+0x1a4>
 8000b3e:	4630      	mov	r0, r6
 8000b40:	f023 0303 	bic.w	r3, r3, #3
 8000b44:	f840 3b48 	str.w	r3, [r0], #72
 8000b48:	f000 f878 	bl	8000c3c <__gnu_Unwind_Save_VFP>
 8000b4c:	af20      	add	r7, sp, #128	; 0x80
 8000b4e:	4638      	mov	r0, r7
 8000b50:	f000 f874 	bl	8000c3c <__gnu_Unwind_Save_VFP>
 8000b54:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d19d      	bne.n	8000a96 <_Unwind_VRS_Pop+0xee>
 8000b5a:	461d      	mov	r5, r3
 8000b5c:	3504      	adds	r5, #4
 8000b5e:	4638      	mov	r0, r7
 8000b60:	63b5      	str	r5, [r6, #56]	; 0x38
 8000b62:	f000 f867 	bl	8000c34 <__gnu_Unwind_Restore_VFP>
 8000b66:	e7c2      	b.n	8000aee <_Unwind_VRS_Pop+0x146>
 8000b68:	a820      	add	r0, sp, #128	; 0x80
 8000b6a:	f000 f86b 	bl	8000c44 <__gnu_Unwind_Restore_VFP_D>
 8000b6e:	e7b8      	b.n	8000ae2 <_Unwind_VRS_Pop+0x13a>
 8000b70:	f1b9 0f10 	cmp.w	r9, #16
 8000b74:	d93f      	bls.n	8000bf6 <_Unwind_VRS_Pop+0x24e>
 8000b76:	f1a9 0910 	sub.w	r9, r9, #16
 8000b7a:	6833      	ldr	r3, [r6, #0]
 8000b7c:	07d9      	lsls	r1, r3, #31
 8000b7e:	d508      	bpl.n	8000b92 <_Unwind_VRS_Pop+0x1ea>
 8000b80:	4630      	mov	r0, r6
 8000b82:	f023 0301 	bic.w	r3, r3, #1
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	f840 3b48 	str.w	r3, [r0], #72
 8000b8e:	f000 f85d 	bl	8000c4c <__gnu_Unwind_Save_VFP_D>
 8000b92:	f1b9 0f00 	cmp.w	r9, #0
 8000b96:	d031      	beq.n	8000bfc <_Unwind_VRS_Pop+0x254>
 8000b98:	6833      	ldr	r3, [r6, #0]
 8000b9a:	075a      	lsls	r2, r3, #29
 8000b9c:	d41f      	bmi.n	8000bde <_Unwind_VRS_Pop+0x236>
 8000b9e:	f1b8 0f0f 	cmp.w	r8, #15
 8000ba2:	d924      	bls.n	8000bee <_Unwind_VRS_Pop+0x246>
 8000ba4:	466f      	mov	r7, sp
 8000ba6:	f1c8 0510 	rsb	r5, r8, #16
 8000baa:	4638      	mov	r0, r7
 8000bac:	f000 f856 	bl	8000c5c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000bb4:	dd80      	ble.n	8000ab8 <_Unwind_VRS_Pop+0x110>
 8000bb6:	af20      	add	r7, sp, #128	; 0x80
 8000bb8:	e76f      	b.n	8000a9a <_Unwind_VRS_Pop+0xf2>
 8000bba:	f023 0310 	bic.w	r3, r3, #16
 8000bbe:	6033      	str	r3, [r6, #0]
 8000bc0:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000bc4:	f000 f89c 	bl	8000d00 <__gnu_Unwind_Save_WMMXC>
 8000bc8:	e706      	b.n	80009d8 <_Unwind_VRS_Pop+0x30>
 8000bca:	f023 0308 	bic.w	r3, r3, #8
 8000bce:	6003      	str	r3, [r0, #0]
 8000bd0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000bd4:	f000 f868 	bl	8000ca8 <__gnu_Unwind_Save_WMMXD>
 8000bd8:	e72c      	b.n	8000a34 <_Unwind_VRS_Pop+0x8c>
 8000bda:	af20      	add	r7, sp, #128	; 0x80
 8000bdc:	e7be      	b.n	8000b5c <_Unwind_VRS_Pop+0x1b4>
 8000bde:	4630      	mov	r0, r6
 8000be0:	f023 0304 	bic.w	r3, r3, #4
 8000be4:	f840 3bd0 	str.w	r3, [r0], #208
 8000be8:	f000 f838 	bl	8000c5c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bec:	e7d7      	b.n	8000b9e <_Unwind_VRS_Pop+0x1f6>
 8000bee:	a820      	add	r0, sp, #128	; 0x80
 8000bf0:	f000 f82c 	bl	8000c4c <__gnu_Unwind_Save_VFP_D>
 8000bf4:	e7d6      	b.n	8000ba4 <_Unwind_VRS_Pop+0x1fc>
 8000bf6:	f04f 0900 	mov.w	r9, #0
 8000bfa:	e7be      	b.n	8000b7a <_Unwind_VRS_Pop+0x1d2>
 8000bfc:	f1b8 0f0f 	cmp.w	r8, #15
 8000c00:	f63f af46 	bhi.w	8000a90 <_Unwind_VRS_Pop+0xe8>
 8000c04:	af20      	add	r7, sp, #128	; 0x80
 8000c06:	4638      	mov	r0, r7
 8000c08:	f000 f820 	bl	8000c4c <__gnu_Unwind_Save_VFP_D>
 8000c0c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	f47f af41 	bne.w	8000a96 <_Unwind_VRS_Pop+0xee>
 8000c14:	4638      	mov	r0, r7
 8000c16:	f000 f815 	bl	8000c44 <__gnu_Unwind_Restore_VFP_D>
 8000c1a:	e768      	b.n	8000aee <_Unwind_VRS_Pop+0x146>

08000c1c <__restore_core_regs>:
 8000c1c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000c20:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000c24:	469c      	mov	ip, r3
 8000c26:	46a6      	mov	lr, r4
 8000c28:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000c2c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000c30:	46e5      	mov	sp, ip
 8000c32:	bd00      	pop	{pc}

08000c34 <__gnu_Unwind_Restore_VFP>:
 8000c34:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__gnu_Unwind_Save_VFP>:
 8000c3c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <__gnu_Unwind_Restore_VFP_D>:
 8000c44:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__gnu_Unwind_Save_VFP_D>:
 8000c4c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000c54:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000c5c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__gnu_Unwind_Restore_WMMXD>:
 8000c64:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c68:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c6c:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c70:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c74:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c78:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c7c:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c80:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c84:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c88:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c8c:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c90:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c94:	ecf0 c102 	ldfp	f4, [r0], #8
 8000c98:	ecf0 d102 	ldfp	f5, [r0], #8
 8000c9c:	ecf0 e102 	ldfp	f6, [r0], #8
 8000ca0:	ecf0 f102 	ldfp	f7, [r0], #8
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__gnu_Unwind_Save_WMMXD>:
 8000ca8:	ece0 0102 	stfe	f0, [r0], #8
 8000cac:	ece0 1102 	stfe	f1, [r0], #8
 8000cb0:	ece0 2102 	stfe	f2, [r0], #8
 8000cb4:	ece0 3102 	stfe	f3, [r0], #8
 8000cb8:	ece0 4102 	stfe	f4, [r0], #8
 8000cbc:	ece0 5102 	stfe	f5, [r0], #8
 8000cc0:	ece0 6102 	stfe	f6, [r0], #8
 8000cc4:	ece0 7102 	stfe	f7, [r0], #8
 8000cc8:	ece0 8102 	stfp	f0, [r0], #8
 8000ccc:	ece0 9102 	stfp	f1, [r0], #8
 8000cd0:	ece0 a102 	stfp	f2, [r0], #8
 8000cd4:	ece0 b102 	stfp	f3, [r0], #8
 8000cd8:	ece0 c102 	stfp	f4, [r0], #8
 8000cdc:	ece0 d102 	stfp	f5, [r0], #8
 8000ce0:	ece0 e102 	stfp	f6, [r0], #8
 8000ce4:	ece0 f102 	stfp	f7, [r0], #8
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <__gnu_Unwind_Restore_WMMXC>:
 8000cec:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000cf0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000cf4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000cf8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <__gnu_Unwind_Save_WMMXC>:
 8000d00:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000d04:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000d08:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000d0c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <_Unwind_RaiseException>:
 8000d14:	46ec      	mov	ip, sp
 8000d16:	b500      	push	{lr}
 8000d18:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d1c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d28:	a901      	add	r1, sp, #4
 8000d2a:	f7ff fbe7 	bl	80004fc <__gnu_Unwind_RaiseException>
 8000d2e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d32:	b012      	add	sp, #72	; 0x48
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <_Unwind_Resume>:
 8000d38:	46ec      	mov	ip, sp
 8000d3a:	b500      	push	{lr}
 8000d3c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d40:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d4c:	a901      	add	r1, sp, #4
 8000d4e:	f7ff fc13 	bl	8000578 <__gnu_Unwind_Resume>
 8000d52:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d56:	b012      	add	sp, #72	; 0x48
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <_Unwind_Resume_or_Rethrow>:
 8000d5c:	46ec      	mov	ip, sp
 8000d5e:	b500      	push	{lr}
 8000d60:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d64:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d70:	a901      	add	r1, sp, #4
 8000d72:	f7ff fc23 	bl	80005bc <__gnu_Unwind_Resume_or_Rethrow>
 8000d76:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d7a:	b012      	add	sp, #72	; 0x48
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <_Unwind_ForcedUnwind>:
 8000d80:	46ec      	mov	ip, sp
 8000d82:	b500      	push	{lr}
 8000d84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d94:	ab01      	add	r3, sp, #4
 8000d96:	f7ff fbe5 	bl	8000564 <__gnu_Unwind_ForcedUnwind>
 8000d9a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d9e:	b012      	add	sp, #72	; 0x48
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <_Unwind_Backtrace>:
 8000da4:	46ec      	mov	ip, sp
 8000da6:	b500      	push	{lr}
 8000da8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000dac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000db8:	aa01      	add	r2, sp, #4
 8000dba:	f7ff fc5b 	bl	8000674 <__gnu_Unwind_Backtrace>
 8000dbe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000dc2:	b012      	add	sp, #72	; 0x48
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <next_unwind_byte>:
 8000dc8:	7a02      	ldrb	r2, [r0, #8]
 8000dca:	4603      	mov	r3, r0
 8000dcc:	b97a      	cbnz	r2, 8000dee <next_unwind_byte+0x26>
 8000dce:	7a42      	ldrb	r2, [r0, #9]
 8000dd0:	b1a2      	cbz	r2, 8000dfc <next_unwind_byte+0x34>
 8000dd2:	f04f 0c03 	mov.w	ip, #3
 8000dd6:	6841      	ldr	r1, [r0, #4]
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	7242      	strb	r2, [r0, #9]
 8000ddc:	6808      	ldr	r0, [r1, #0]
 8000dde:	1d0a      	adds	r2, r1, #4
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	0202      	lsls	r2, r0, #8
 8000de4:	f883 c008 	strb.w	ip, [r3, #8]
 8000de8:	0e00      	lsrs	r0, r0, #24
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	4770      	bx	lr
 8000dee:	6800      	ldr	r0, [r0, #0]
 8000df0:	3a01      	subs	r2, #1
 8000df2:	721a      	strb	r2, [r3, #8]
 8000df4:	0202      	lsls	r2, r0, #8
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	0e00      	lsrs	r0, r0, #24
 8000dfa:	4770      	bx	lr
 8000dfc:	20b0      	movs	r0, #176	; 0xb0
 8000dfe:	4770      	bx	lr

08000e00 <_Unwind_GetGR.constprop.0>:
 8000e00:	2300      	movs	r3, #0
 8000e02:	b500      	push	{lr}
 8000e04:	b085      	sub	sp, #20
 8000e06:	a903      	add	r1, sp, #12
 8000e08:	9100      	str	r1, [sp, #0]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f7ff fbe7 	bl	80005e0 <_Unwind_VRS_Get>
 8000e12:	9803      	ldr	r0, [sp, #12]
 8000e14:	b005      	add	sp, #20
 8000e16:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e1a:	bf00      	nop

08000e1c <unwind_UCB_from_context>:
 8000e1c:	e7f0      	b.n	8000e00 <_Unwind_GetGR.constprop.0>
 8000e1e:	bf00      	nop

08000e20 <__gnu_unwind_execute>:
 8000e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e24:	f04f 0800 	mov.w	r8, #0
 8000e28:	4605      	mov	r5, r0
 8000e2a:	460e      	mov	r6, r1
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	4630      	mov	r0, r6
 8000e30:	f7ff ffca 	bl	8000dc8 <next_unwind_byte>
 8000e34:	28b0      	cmp	r0, #176	; 0xb0
 8000e36:	4604      	mov	r4, r0
 8000e38:	f000 80ba 	beq.w	8000fb0 <__gnu_unwind_execute+0x190>
 8000e3c:	0607      	lsls	r7, r0, #24
 8000e3e:	d520      	bpl.n	8000e82 <__gnu_unwind_execute+0x62>
 8000e40:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000e44:	2b80      	cmp	r3, #128	; 0x80
 8000e46:	d04d      	beq.n	8000ee4 <__gnu_unwind_execute+0xc4>
 8000e48:	2b90      	cmp	r3, #144	; 0x90
 8000e4a:	d036      	beq.n	8000eba <__gnu_unwind_execute+0x9a>
 8000e4c:	2ba0      	cmp	r3, #160	; 0xa0
 8000e4e:	d060      	beq.n	8000f12 <__gnu_unwind_execute+0xf2>
 8000e50:	2bb0      	cmp	r3, #176	; 0xb0
 8000e52:	d073      	beq.n	8000f3c <__gnu_unwind_execute+0x11c>
 8000e54:	2bc0      	cmp	r3, #192	; 0xc0
 8000e56:	f000 808a 	beq.w	8000f6e <__gnu_unwind_execute+0x14e>
 8000e5a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e5e:	2bd0      	cmp	r3, #208	; 0xd0
 8000e60:	d10b      	bne.n	8000e7a <__gnu_unwind_execute+0x5a>
 8000e62:	f000 0207 	and.w	r2, r0, #7
 8000e66:	3201      	adds	r2, #1
 8000e68:	2305      	movs	r3, #5
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e72:	f7ff fd99 	bl	80009a8 <_Unwind_VRS_Pop>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d0d9      	beq.n	8000e2e <__gnu_unwind_execute+0xe>
 8000e7a:	2009      	movs	r0, #9
 8000e7c:	b005      	add	sp, #20
 8000e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e82:	0083      	lsls	r3, r0, #2
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	1d1f      	adds	r7, r3, #4
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f10d 090c 	add.w	r9, sp, #12
 8000e8e:	4619      	mov	r1, r3
 8000e90:	220d      	movs	r2, #13
 8000e92:	4628      	mov	r0, r5
 8000e94:	f8cd 9000 	str.w	r9, [sp]
 8000e98:	f7ff fba2 	bl	80005e0 <_Unwind_VRS_Get>
 8000e9c:	9b03      	ldr	r3, [sp, #12]
 8000e9e:	0660      	lsls	r0, r4, #25
 8000ea0:	bf4c      	ite	mi
 8000ea2:	1bdf      	submi	r7, r3, r7
 8000ea4:	18ff      	addpl	r7, r7, r3
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	220d      	movs	r2, #13
 8000eaa:	4628      	mov	r0, r5
 8000eac:	4619      	mov	r1, r3
 8000eae:	f8cd 9000 	str.w	r9, [sp]
 8000eb2:	9703      	str	r7, [sp, #12]
 8000eb4:	f7ff fbba 	bl	800062c <_Unwind_VRS_Set>
 8000eb8:	e7b9      	b.n	8000e2e <__gnu_unwind_execute+0xe>
 8000eba:	f000 030d 	and.w	r3, r0, #13
 8000ebe:	2b0d      	cmp	r3, #13
 8000ec0:	d0db      	beq.n	8000e7a <__gnu_unwind_execute+0x5a>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	af03      	add	r7, sp, #12
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f000 020f 	and.w	r2, r0, #15
 8000ecc:	9700      	str	r7, [sp, #0]
 8000ece:	4628      	mov	r0, r5
 8000ed0:	f7ff fb86 	bl	80005e0 <_Unwind_VRS_Get>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	220d      	movs	r2, #13
 8000ed8:	4628      	mov	r0, r5
 8000eda:	4619      	mov	r1, r3
 8000edc:	9700      	str	r7, [sp, #0]
 8000ede:	f7ff fba5 	bl	800062c <_Unwind_VRS_Set>
 8000ee2:	e7a4      	b.n	8000e2e <__gnu_unwind_execute+0xe>
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	f7ff ff6f 	bl	8000dc8 <next_unwind_byte>
 8000eea:	0224      	lsls	r4, r4, #8
 8000eec:	4320      	orrs	r0, r4
 8000eee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000ef2:	d0c2      	beq.n	8000e7a <__gnu_unwind_execute+0x5a>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	0104      	lsls	r4, r0, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4628      	mov	r0, r5
 8000efc:	b2a2      	uxth	r2, r4
 8000efe:	f7ff fd53 	bl	80009a8 <_Unwind_VRS_Pop>
 8000f02:	2800      	cmp	r0, #0
 8000f04:	d1b9      	bne.n	8000e7a <__gnu_unwind_execute+0x5a>
 8000f06:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000f0a:	bf18      	it	ne
 8000f0c:	f04f 0801 	movne.w	r8, #1
 8000f10:	e78d      	b.n	8000e2e <__gnu_unwind_execute+0xe>
 8000f12:	43c3      	mvns	r3, r0
 8000f14:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	411a      	asrs	r2, r3
 8000f1e:	2300      	movs	r3, #0
 8000f20:	0701      	lsls	r1, r0, #28
 8000f22:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000f26:	bf48      	it	mi
 8000f28:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f7ff fd3a 	bl	80009a8 <_Unwind_VRS_Pop>
 8000f34:	2800      	cmp	r0, #0
 8000f36:	f43f af7a 	beq.w	8000e2e <__gnu_unwind_execute+0xe>
 8000f3a:	e79e      	b.n	8000e7a <__gnu_unwind_execute+0x5a>
 8000f3c:	28b1      	cmp	r0, #177	; 0xb1
 8000f3e:	d03c      	beq.n	8000fba <__gnu_unwind_execute+0x19a>
 8000f40:	28b2      	cmp	r0, #178	; 0xb2
 8000f42:	f000 80b0 	beq.w	80010a6 <__gnu_unwind_execute+0x286>
 8000f46:	28b3      	cmp	r0, #179	; 0xb3
 8000f48:	d04a      	beq.n	8000fe0 <__gnu_unwind_execute+0x1c0>
 8000f4a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000f4e:	2bb4      	cmp	r3, #180	; 0xb4
 8000f50:	d093      	beq.n	8000e7a <__gnu_unwind_execute+0x5a>
 8000f52:	2301      	movs	r3, #1
 8000f54:	f000 0207 	and.w	r2, r0, #7
 8000f58:	441a      	add	r2, r3
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f62:	f7ff fd21 	bl	80009a8 <_Unwind_VRS_Pop>
 8000f66:	2800      	cmp	r0, #0
 8000f68:	f43f af61 	beq.w	8000e2e <__gnu_unwind_execute+0xe>
 8000f6c:	e785      	b.n	8000e7a <__gnu_unwind_execute+0x5a>
 8000f6e:	28c6      	cmp	r0, #198	; 0xc6
 8000f70:	d04f      	beq.n	8001012 <__gnu_unwind_execute+0x1f2>
 8000f72:	28c7      	cmp	r0, #199	; 0xc7
 8000f74:	d061      	beq.n	800103a <__gnu_unwind_execute+0x21a>
 8000f76:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f7a:	2bc0      	cmp	r3, #192	; 0xc0
 8000f7c:	d070      	beq.n	8001060 <__gnu_unwind_execute+0x240>
 8000f7e:	28c8      	cmp	r0, #200	; 0xc8
 8000f80:	d07c      	beq.n	800107c <__gnu_unwind_execute+0x25c>
 8000f82:	28c9      	cmp	r0, #201	; 0xc9
 8000f84:	f47f af79 	bne.w	8000e7a <__gnu_unwind_execute+0x5a>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	f7ff ff1d 	bl	8000dc8 <next_unwind_byte>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	4602      	mov	r2, r0
 8000f92:	2101      	movs	r1, #1
 8000f94:	4628      	mov	r0, r5
 8000f96:	0314      	lsls	r4, r2, #12
 8000f98:	f002 020f 	and.w	r2, r2, #15
 8000f9c:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000fa0:	440a      	add	r2, r1
 8000fa2:	4322      	orrs	r2, r4
 8000fa4:	f7ff fd00 	bl	80009a8 <_Unwind_VRS_Pop>
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	f43f af40 	beq.w	8000e2e <__gnu_unwind_execute+0xe>
 8000fae:	e764      	b.n	8000e7a <__gnu_unwind_execute+0x5a>
 8000fb0:	f1b8 0f00 	cmp.w	r8, #0
 8000fb4:	d01c      	beq.n	8000ff0 <__gnu_unwind_execute+0x1d0>
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	e760      	b.n	8000e7c <__gnu_unwind_execute+0x5c>
 8000fba:	4630      	mov	r0, r6
 8000fbc:	f7ff ff04 	bl	8000dc8 <next_unwind_byte>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	f43f af59 	beq.w	8000e7a <__gnu_unwind_execute+0x5a>
 8000fc8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fcc:	f47f af55 	bne.w	8000e7a <__gnu_unwind_execute+0x5a>
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	f7ff fce8 	bl	80009a8 <_Unwind_VRS_Pop>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	f43f af28 	beq.w	8000e2e <__gnu_unwind_execute+0xe>
 8000fde:	e74c      	b.n	8000e7a <__gnu_unwind_execute+0x5a>
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	f7ff fef1 	bl	8000dc8 <next_unwind_byte>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4619      	mov	r1, r3
 8000fec:	4628      	mov	r0, r5
 8000fee:	e7d2      	b.n	8000f96 <__gnu_unwind_execute+0x176>
 8000ff0:	ac03      	add	r4, sp, #12
 8000ff2:	4643      	mov	r3, r8
 8000ff4:	220e      	movs	r2, #14
 8000ff6:	4641      	mov	r1, r8
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	9400      	str	r4, [sp, #0]
 8000ffc:	f7ff faf0 	bl	80005e0 <_Unwind_VRS_Get>
 8001000:	4643      	mov	r3, r8
 8001002:	220f      	movs	r2, #15
 8001004:	4628      	mov	r0, r5
 8001006:	4641      	mov	r1, r8
 8001008:	9400      	str	r4, [sp, #0]
 800100a:	f7ff fb0f 	bl	800062c <_Unwind_VRS_Set>
 800100e:	4640      	mov	r0, r8
 8001010:	e734      	b.n	8000e7c <__gnu_unwind_execute+0x5c>
 8001012:	4630      	mov	r0, r6
 8001014:	f7ff fed8 	bl	8000dc8 <next_unwind_byte>
 8001018:	4602      	mov	r2, r0
 800101a:	2303      	movs	r3, #3
 800101c:	0314      	lsls	r4, r2, #12
 800101e:	f002 020f 	and.w	r2, r2, #15
 8001022:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8001026:	3201      	adds	r2, #1
 8001028:	4628      	mov	r0, r5
 800102a:	4619      	mov	r1, r3
 800102c:	4322      	orrs	r2, r4
 800102e:	f7ff fcbb 	bl	80009a8 <_Unwind_VRS_Pop>
 8001032:	2800      	cmp	r0, #0
 8001034:	f43f aefb 	beq.w	8000e2e <__gnu_unwind_execute+0xe>
 8001038:	e71f      	b.n	8000e7a <__gnu_unwind_execute+0x5a>
 800103a:	4630      	mov	r0, r6
 800103c:	f7ff fec4 	bl	8000dc8 <next_unwind_byte>
 8001040:	4602      	mov	r2, r0
 8001042:	2800      	cmp	r0, #0
 8001044:	f43f af19 	beq.w	8000e7a <__gnu_unwind_execute+0x5a>
 8001048:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800104c:	f47f af15 	bne.w	8000e7a <__gnu_unwind_execute+0x5a>
 8001050:	2104      	movs	r1, #4
 8001052:	4628      	mov	r0, r5
 8001054:	f7ff fca8 	bl	80009a8 <_Unwind_VRS_Pop>
 8001058:	2800      	cmp	r0, #0
 800105a:	f43f aee8 	beq.w	8000e2e <__gnu_unwind_execute+0xe>
 800105e:	e70c      	b.n	8000e7a <__gnu_unwind_execute+0x5a>
 8001060:	2303      	movs	r3, #3
 8001062:	f000 020f 	and.w	r2, r0, #15
 8001066:	3201      	adds	r2, #1
 8001068:	4628      	mov	r0, r5
 800106a:	4619      	mov	r1, r3
 800106c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001070:	f7ff fc9a 	bl	80009a8 <_Unwind_VRS_Pop>
 8001074:	2800      	cmp	r0, #0
 8001076:	f43f aeda 	beq.w	8000e2e <__gnu_unwind_execute+0xe>
 800107a:	e6fe      	b.n	8000e7a <__gnu_unwind_execute+0x5a>
 800107c:	4630      	mov	r0, r6
 800107e:	f7ff fea3 	bl	8000dc8 <next_unwind_byte>
 8001082:	4602      	mov	r2, r0
 8001084:	2101      	movs	r1, #1
 8001086:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 800108a:	f002 020f 	and.w	r2, r2, #15
 800108e:	3410      	adds	r4, #16
 8001090:	440a      	add	r2, r1
 8001092:	2305      	movs	r3, #5
 8001094:	4628      	mov	r0, r5
 8001096:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 800109a:	f7ff fc85 	bl	80009a8 <_Unwind_VRS_Pop>
 800109e:	2800      	cmp	r0, #0
 80010a0:	f43f aec5 	beq.w	8000e2e <__gnu_unwind_execute+0xe>
 80010a4:	e6e9      	b.n	8000e7a <__gnu_unwind_execute+0x5a>
 80010a6:	2300      	movs	r3, #0
 80010a8:	f10d 090c 	add.w	r9, sp, #12
 80010ac:	220d      	movs	r2, #13
 80010ae:	4619      	mov	r1, r3
 80010b0:	4628      	mov	r0, r5
 80010b2:	f8cd 9000 	str.w	r9, [sp]
 80010b6:	f7ff fa93 	bl	80005e0 <_Unwind_VRS_Get>
 80010ba:	4630      	mov	r0, r6
 80010bc:	f7ff fe84 	bl	8000dc8 <next_unwind_byte>
 80010c0:	0602      	lsls	r2, r0, #24
 80010c2:	f04f 0402 	mov.w	r4, #2
 80010c6:	d50c      	bpl.n	80010e2 <__gnu_unwind_execute+0x2c2>
 80010c8:	9b03      	ldr	r3, [sp, #12]
 80010ca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80010ce:	40a0      	lsls	r0, r4
 80010d0:	4418      	add	r0, r3
 80010d2:	9003      	str	r0, [sp, #12]
 80010d4:	4630      	mov	r0, r6
 80010d6:	f7ff fe77 	bl	8000dc8 <next_unwind_byte>
 80010da:	0603      	lsls	r3, r0, #24
 80010dc:	f104 0407 	add.w	r4, r4, #7
 80010e0:	d4f2      	bmi.n	80010c8 <__gnu_unwind_execute+0x2a8>
 80010e2:	9b03      	ldr	r3, [sp, #12]
 80010e4:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80010e8:	40a2      	lsls	r2, r4
 80010ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010ee:	441a      	add	r2, r3
 80010f0:	2300      	movs	r3, #0
 80010f2:	9203      	str	r2, [sp, #12]
 80010f4:	4628      	mov	r0, r5
 80010f6:	220d      	movs	r2, #13
 80010f8:	4619      	mov	r1, r3
 80010fa:	f8cd 9000 	str.w	r9, [sp]
 80010fe:	f7ff fa95 	bl	800062c <_Unwind_VRS_Set>
 8001102:	e694      	b.n	8000e2e <__gnu_unwind_execute+0xe>

08001104 <__gnu_unwind_frame>:
 8001104:	460b      	mov	r3, r1
 8001106:	f04f 0c03 	mov.w	ip, #3
 800110a:	b500      	push	{lr}
 800110c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800110e:	4618      	mov	r0, r3
 8001110:	6853      	ldr	r3, [r2, #4]
 8001112:	b085      	sub	sp, #20
 8001114:	3208      	adds	r2, #8
 8001116:	9202      	str	r2, [sp, #8]
 8001118:	a901      	add	r1, sp, #4
 800111a:	0e1a      	lsrs	r2, r3, #24
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	f88d c00c 	strb.w	ip, [sp, #12]
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	f88d 200d 	strb.w	r2, [sp, #13]
 8001128:	f7ff fe7a 	bl	8000e20 <__gnu_unwind_execute>
 800112c:	b005      	add	sp, #20
 800112e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001132:	bf00      	nop

08001134 <_Unwind_GetRegionStart>:
 8001134:	b508      	push	{r3, lr}
 8001136:	f7ff fe71 	bl	8000e1c <unwind_UCB_from_context>
 800113a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800113c:	bd08      	pop	{r3, pc}
 800113e:	bf00      	nop

08001140 <_Unwind_GetLanguageSpecificData>:
 8001140:	b508      	push	{r3, lr}
 8001142:	f7ff fe6b 	bl	8000e1c <unwind_UCB_from_context>
 8001146:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001148:	79c3      	ldrb	r3, [r0, #7]
 800114a:	3302      	adds	r3, #2
 800114c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001150:	bd08      	pop	{r3, pc}
 8001152:	bf00      	nop

08001154 <_ZN9AmplifierC1Ev>:
 */

#include "Amplifier.h"
#include "main.h"

Amplifier::Amplifier() {
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <_ZN9AmplifierC1Ev+0x1c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	08003bb8 	.word	0x08003bb8

08001174 <_ZN9AmplifierD1Ev>:

Amplifier::~Amplifier() {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <_ZN9AmplifierD1Ev+0x1c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	08003bb8 	.word	0x08003bb8

08001194 <_ZN9AmplifierD0Ev>:
Amplifier::~Amplifier() {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
}
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ffe9 	bl	8001174 <_ZN9AmplifierD1Ev>
 80011a2:	2104      	movs	r1, #4
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f001 ff0d 	bl	8002fc4 <_ZdlPvj>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_ZN9Amplifier3runEv>:

void Amplifier::run() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_SET );
 80011bc:	2201      	movs	r2, #1
 80011be:	2108      	movs	r1, #8
 80011c0:	4810      	ldr	r0, [pc, #64]	; (8001204 <_ZN9Amplifier3runEv+0x50>)
 80011c2:	f000 ffe3 	bl	800218c <HAL_GPIO_WritePin>

	  HAL_Delay( 200 );
 80011c6:	20c8      	movs	r0, #200	; 0xc8
 80011c8:	f000 fd44 	bl	8001c54 <HAL_Delay>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2108      	movs	r1, #8
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <_ZN9Amplifier3runEv+0x50>)
 80011d2:	f000 ffdb 	bl	800218c <HAL_GPIO_WritePin>

	  HAL_Delay( 200 );
 80011d6:	20c8      	movs	r0, #200	; 0xc8
 80011d8:	f000 fd3c 	bl	8001c54 <HAL_Delay>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LED_DOLBY_GPIO_Port, LED_DOLBY_Pin, GPIO_PIN_SET );
 80011dc:	2201      	movs	r2, #1
 80011de:	2102      	movs	r1, #2
 80011e0:	4809      	ldr	r0, [pc, #36]	; (8001208 <_ZN9Amplifier3runEv+0x54>)
 80011e2:	f000 ffd3 	bl	800218c <HAL_GPIO_WritePin>

	  HAL_Delay( 200 );
 80011e6:	20c8      	movs	r0, #200	; 0xc8
 80011e8:	f000 fd34 	bl	8001c54 <HAL_Delay>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LED_DOLBY_GPIO_Port, LED_DOLBY_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2102      	movs	r1, #2
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <_ZN9Amplifier3runEv+0x54>)
 80011f2:	f000 ffcb 	bl	800218c <HAL_GPIO_WritePin>

	  HAL_Delay( 200 );
 80011f6:	20c8      	movs	r0, #200	; 0xc8
 80011f8:	f000 fd2c 	bl	8001c54 <HAL_Delay>

}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40011000 	.word	0x40011000
 8001208:	40010800 	.word	0x40010800

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001212:	f000 fcbd 	bl	8001b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001216:	f000 f81b 	bl	8001250 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121a:	f000 f9cb 	bl	80015b4 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 800121e:	f000 f867 	bl	80012f0 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8001222:	f000 f8a1 	bl	8001368 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 8001226:	f000 f8db 	bl	80013e0 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 800122a:	f000 f937 	bl	800149c <_ZL12MX_TIM4_Initv>
  MX_USART3_UART_Init();
 800122e:	f000 f993 	bl	8001558 <_ZL19MX_USART3_UART_Initv>

  /* USER CODE BEGIN 2 */

  // The main amplifier class
  Amplifier amplifier;
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff8d 	bl	8001154 <_ZN9AmplifierC1Ev>
  {
    /* USER CODE END WHILE */

	  // Let's get the hell out of "C" and head into C++ land.
	  // Amplifier::run is the main loop for the entire amplifier.
	  amplifier.run();
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ffb9 	bl	80011b4 <_ZN9Amplifier3runEv>
 8001242:	e7fa      	b.n	800123a <main+0x2e>
  Amplifier amplifier;
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff94 	bl	8001174 <_ZN9AmplifierD1Ev>
 800124c:	f001 febc 	bl	8002fc8 <__cxa_end_cleanup>

08001250 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b090      	sub	sp, #64	; 0x40
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	2228      	movs	r2, #40	; 0x28
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f002 fbdc 	bl	8003a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001272:	2301      	movs	r3, #1
 8001274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800127a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800127c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001280:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001282:	2301      	movs	r3, #1
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001286:	2302      	movs	r3, #2
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001290:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001294:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	4618      	mov	r0, r3
 800129c:	f000 ff8e 	bl	80021bc <HAL_RCC_OscConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bf14      	ite	ne
 80012a6:	2301      	movne	r3, #1
 80012a8:	2300      	moveq	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <_Z18SystemClock_Configv+0x64>
  {
    Error_Handler();
 80012b0:	f000 fa4c 	bl	800174c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b8:	2302      	movs	r3, #2
 80012ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2102      	movs	r1, #2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 f9f6 	bl	80026c0 <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf14      	ite	ne
 80012da:	2301      	movne	r3, #1
 80012dc:	2300      	moveq	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 80012e4:	f000 fa32 	bl	800174c <Error_Handler>
  }
}
 80012e8:	bf00      	nop
 80012ea:	3740      	adds	r7, #64	; 0x40
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <_ZL12MX_SPI1_Initv+0x70>)
 80012f6:	4a1b      	ldr	r2, [pc, #108]	; (8001364 <_ZL12MX_SPI1_Initv+0x74>)
 80012f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <_ZL12MX_SPI1_Initv+0x70>)
 80012fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001300:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <_ZL12MX_SPI1_Initv+0x70>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <_ZL12MX_SPI1_Initv+0x70>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <_ZL12MX_SPI1_Initv+0x70>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <_ZL12MX_SPI1_Initv+0x70>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <_ZL12MX_SPI1_Initv+0x70>)
 800131c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001320:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <_ZL12MX_SPI1_Initv+0x70>)
 8001324:	2208      	movs	r2, #8
 8001326:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <_ZL12MX_SPI1_Initv+0x70>)
 800132a:	2200      	movs	r2, #0
 800132c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <_ZL12MX_SPI1_Initv+0x70>)
 8001330:	2200      	movs	r2, #0
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <_ZL12MX_SPI1_Initv+0x70>)
 8001336:	2200      	movs	r2, #0
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <_ZL12MX_SPI1_Initv+0x70>)
 800133c:	220a      	movs	r2, #10
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001340:	4807      	ldr	r0, [pc, #28]	; (8001360 <_ZL12MX_SPI1_Initv+0x70>)
 8001342:	f001 fb57 	bl	80029f4 <HAL_SPI_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	bf14      	ite	ne
 800134c:	2301      	movne	r3, #1
 800134e:	2300      	moveq	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001356:	f000 f9f9 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000094 	.word	0x20000094
 8001364:	40013000 	.word	0x40013000

08001368 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <_ZL12MX_SPI2_Initv+0x70>)
 800136e:	4a1b      	ldr	r2, [pc, #108]	; (80013dc <_ZL12MX_SPI2_Initv+0x74>)
 8001370:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <_ZL12MX_SPI2_Initv+0x70>)
 8001374:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001378:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <_ZL12MX_SPI2_Initv+0x70>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <_ZL12MX_SPI2_Initv+0x70>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <_ZL12MX_SPI2_Initv+0x70>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <_ZL12MX_SPI2_Initv+0x70>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <_ZL12MX_SPI2_Initv+0x70>)
 8001394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001398:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <_ZL12MX_SPI2_Initv+0x70>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <_ZL12MX_SPI2_Initv+0x70>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <_ZL12MX_SPI2_Initv+0x70>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <_ZL12MX_SPI2_Initv+0x70>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <_ZL12MX_SPI2_Initv+0x70>)
 80013b4:	220a      	movs	r2, #10
 80013b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013b8:	4807      	ldr	r0, [pc, #28]	; (80013d8 <_ZL12MX_SPI2_Initv+0x70>)
 80013ba:	f001 fb1b 	bl	80029f4 <HAL_SPI_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bf14      	ite	ne
 80013c4:	2301      	movne	r3, #1
 80013c6:	2300      	moveq	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 80013ce:	f000 f9bd 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200000ec 	.word	0x200000ec
 80013dc:	40003800 	.word	0x40003800

080013e0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	; 0x30
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	2224      	movs	r2, #36	; 0x24
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f002 fb14 	bl	8003a1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013fc:	4b25      	ldr	r3, [pc, #148]	; (8001494 <_ZL12MX_TIM3_Initv+0xb4>)
 80013fe:	4a26      	ldr	r2, [pc, #152]	; (8001498 <_ZL12MX_TIM3_Initv+0xb8>)
 8001400:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <_ZL12MX_TIM3_Initv+0xb4>)
 8001404:	2200      	movs	r2, #0
 8001406:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <_ZL12MX_TIM3_Initv+0xb4>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <_ZL12MX_TIM3_Initv+0xb4>)
 8001410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001414:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <_ZL12MX_TIM3_Initv+0xb4>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <_ZL12MX_TIM3_Initv+0xb4>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001422:	2301      	movs	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800142a:	2301      	movs	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800143a:	2301      	movs	r3, #1
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4619      	mov	r1, r3
 800144c:	4811      	ldr	r0, [pc, #68]	; (8001494 <_ZL12MX_TIM3_Initv+0xb4>)
 800144e:	f001 fb55 	bl	8002afc <HAL_TIM_Encoder_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf14      	ite	ne
 8001458:	2301      	movne	r3, #1
 800145a:	2300      	moveq	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8001462:	f000 f973 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4619      	mov	r1, r3
 8001472:	4808      	ldr	r0, [pc, #32]	; (8001494 <_ZL12MX_TIM3_Initv+0xb4>)
 8001474:	f001 fc5e 	bl	8002d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001488:	f000 f960 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	3730      	adds	r7, #48	; 0x30
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000144 	.word	0x20000144
 8001498:	40000400 	.word	0x40000400

0800149c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	; 0x30
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2224      	movs	r2, #36	; 0x24
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 fab6 	bl	8003a1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <_ZL12MX_TIM4_Initv+0xb4>)
 80014ba:	4a26      	ldr	r2, [pc, #152]	; (8001554 <_ZL12MX_TIM4_Initv+0xb8>)
 80014bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <_ZL12MX_TIM4_Initv+0xb4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <_ZL12MX_TIM4_Initv+0xb4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <_ZL12MX_TIM4_Initv+0xb4>)
 80014cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <_ZL12MX_TIM4_Initv+0xb4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <_ZL12MX_TIM4_Initv+0xb4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014de:	2301      	movs	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014e6:	2301      	movs	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014f6:	2301      	movs	r3, #1
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	4619      	mov	r1, r3
 8001508:	4811      	ldr	r0, [pc, #68]	; (8001550 <_ZL12MX_TIM4_Initv+0xb4>)
 800150a:	f001 faf7 	bl	8002afc <HAL_TIM_Encoder_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf14      	ite	ne
 8001514:	2301      	movne	r3, #1
 8001516:	2300      	moveq	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 800151e:	f000 f915 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4808      	ldr	r0, [pc, #32]	; (8001550 <_ZL12MX_TIM4_Initv+0xb4>)
 8001530:	f001 fc00 	bl	8002d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	bf14      	ite	ne
 800153a:	2301      	movne	r3, #1
 800153c:	2300      	moveq	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8001544:	f000 f902 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	3730      	adds	r7, #48	; 0x30
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000018c 	.word	0x2000018c
 8001554:	40000800 	.word	0x40000800

08001558 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <_ZL19MX_USART3_UART_Initv+0x54>)
 800155e:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001560:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <_ZL19MX_USART3_UART_Initv+0x54>)
 8001564:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001568:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <_ZL19MX_USART3_UART_Initv+0x54>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <_ZL19MX_USART3_UART_Initv+0x54>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <_ZL19MX_USART3_UART_Initv+0x54>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <_ZL19MX_USART3_UART_Initv+0x54>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <_ZL19MX_USART3_UART_Initv+0x54>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <_ZL19MX_USART3_UART_Initv+0x54>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800158e:	4807      	ldr	r0, [pc, #28]	; (80015ac <_ZL19MX_USART3_UART_Initv+0x54>)
 8001590:	f001 fc3c 	bl	8002e0c <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf14      	ite	ne
 800159a:	2301      	movne	r3, #1
 800159c:	2300      	moveq	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80015a4:	f000 f8d2 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200001d4 	.word	0x200001d4
 80015b0:	40004800 	.word	0x40004800

080015b4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0318 	add.w	r3, r7, #24
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c8:	4b5a      	ldr	r3, [pc, #360]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a59      	ldr	r2, [pc, #356]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 80015ce:	f043 0310 	orr.w	r3, r3, #16
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b57      	ldr	r3, [pc, #348]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b54      	ldr	r3, [pc, #336]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a53      	ldr	r2, [pc, #332]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b51      	ldr	r3, [pc, #324]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015f8:	4b4e      	ldr	r3, [pc, #312]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a4d      	ldr	r2, [pc, #308]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 80015fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	4b48      	ldr	r3, [pc, #288]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a47      	ldr	r2, [pc, #284]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 8001616:	f043 0308 	orr.w	r3, r3, #8
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b45      	ldr	r3, [pc, #276]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001628:	4b42      	ldr	r3, [pc, #264]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a41      	ldr	r2, [pc, #260]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 800162e:	f043 0320 	orr.w	r3, r3, #32
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b3f      	ldr	r3, [pc, #252]	; (8001734 <_ZL12MX_GPIO_Initv+0x180>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0320 	and.w	r3, r3, #32
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	2108      	movs	r1, #8
 8001644:	483c      	ldr	r0, [pc, #240]	; (8001738 <_ZL12MX_GPIO_Initv+0x184>)
 8001646:	f000 fda1 	bl	800218c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 800164a:	2200      	movs	r2, #0
 800164c:	211f      	movs	r1, #31
 800164e:	483b      	ldr	r0, [pc, #236]	; (800173c <_ZL12MX_GPIO_Initv+0x188>)
 8001650:	f000 fd9c 	bl	800218c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 800165a:	4839      	ldr	r0, [pc, #228]	; (8001740 <_ZL12MX_GPIO_Initv+0x18c>)
 800165c:	f000 fd96 	bl	800218c <HAL_GPIO_WritePin>
                          |LED_POWER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_5CH_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001666:	4837      	ldr	r0, [pc, #220]	; (8001744 <_ZL12MX_GPIO_Initv+0x190>)
 8001668:	f000 fd90 	bl	800218c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_MUTE_Pin */
  GPIO_InitStruct.Pin = LED_MUTE_Pin;
 800166c:	2308      	movs	r3, #8
 800166e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2302      	movs	r3, #2
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_MUTE_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0318 	add.w	r3, r7, #24
 8001680:	4619      	mov	r1, r3
 8001682:	482d      	ldr	r0, [pc, #180]	; (8001738 <_ZL12MX_GPIO_Initv+0x184>)
 8001684:	f000 fbee 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PCM_Pin LED_DOLBY_Pin PA2 LED_MUTEA3_Pin
                           PA4 */
  GPIO_InitStruct.Pin = LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 8001688:	231f      	movs	r3, #31
 800168a:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2302      	movs	r3, #2
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0318 	add.w	r3, r7, #24
 800169c:	4619      	mov	r1, r3
 800169e:	4827      	ldr	r0, [pc, #156]	; (800173c <_ZL12MX_GPIO_Initv+0x188>)
 80016a0:	f000 fbe0 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SETTING_BATTERY_Pin */
  GPIO_InitStruct.Pin = SETTING_BATTERY_Pin;
 80016a4:	2310      	movs	r3, #16
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SETTING_BATTERY_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 0318 	add.w	r3, r7, #24
 80016b4:	4619      	mov	r1, r3
 80016b6:	4820      	ldr	r0, [pc, #128]	; (8001738 <_ZL12MX_GPIO_Initv+0x184>)
 80016b8:	f000 fbd4 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_1_Pin LED_INPUT_2_Pin LED_INPUT_3_Pin LED_INPUT_4_Pin
                           LED_POWER_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 80016bc:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 80016c0:	61bb      	str	r3, [r7, #24]
                          |LED_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2302      	movs	r3, #2
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	4619      	mov	r1, r3
 80016d4:	481a      	ldr	r0, [pc, #104]	; (8001740 <_ZL12MX_GPIO_Initv+0x18c>)
 80016d6:	f000 fbc5 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_POWER_Pin */
  GPIO_InitStruct.Pin = BUTTON_POWER_Pin;
 80016da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_POWER_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0318 	add.w	r3, r7, #24
 80016ec:	4619      	mov	r1, r3
 80016ee:	4814      	ldr	r0, [pc, #80]	; (8001740 <_ZL12MX_GPIO_Initv+0x18c>)
 80016f0:	f000 fbb8 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_5CH_Pin LED_RUN_Pin */
  GPIO_InitStruct.Pin = LED_5CH_Pin|LED_RUN_Pin;
 80016f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2302      	movs	r3, #2
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 0318 	add.w	r3, r7, #24
 800170a:	4619      	mov	r1, r3
 800170c:	480d      	ldr	r0, [pc, #52]	; (8001744 <_ZL12MX_GPIO_Initv+0x190>)
 800170e:	f000 fba9 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8001712:	2308      	movs	r3, #8
 8001714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 0318 	add.w	r3, r7, #24
 8001722:	4619      	mov	r1, r3
 8001724:	4808      	ldr	r0, [pc, #32]	; (8001748 <_ZL12MX_GPIO_Initv+0x194>)
 8001726:	f000 fb9d 	bl	8001e64 <HAL_GPIO_Init>

}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	; 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	40011000 	.word	0x40011000
 800173c:	40010800 	.word	0x40010800
 8001740:	40011800 	.word	0x40011800
 8001744:	40010c00 	.word	0x40010c00
 8001748:	40011400 	.word	0x40011400

0800174c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001750:	b672      	cpsid	i
}
 8001752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001754:	e7fe      	b.n	8001754 <Error_Handler+0x8>
	...

08001758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_MspInit+0x5c>)
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <HAL_MspInit+0x5c>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6193      	str	r3, [r2, #24]
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_MspInit+0x5c>)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_MspInit+0x5c>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_MspInit+0x5c>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	61d3      	str	r3, [r2, #28]
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_MspInit+0x5c>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_MspInit+0x60>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_MspInit+0x60>)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000

080017bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0318 	add.w	r3, r7, #24
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a37      	ldr	r2, [pc, #220]	; (80018b4 <HAL_SPI_MspInit+0xf8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d130      	bne.n	800183e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017dc:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <HAL_SPI_MspInit+0xfc>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a35      	ldr	r2, [pc, #212]	; (80018b8 <HAL_SPI_MspInit+0xfc>)
 80017e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <HAL_SPI_MspInit+0xfc>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <HAL_SPI_MspInit+0xfc>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a2f      	ldr	r2, [pc, #188]	; (80018b8 <HAL_SPI_MspInit+0xfc>)
 80017fa:	f043 0304 	orr.w	r3, r3, #4
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <HAL_SPI_MspInit+0xfc>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800180c:	23a0      	movs	r3, #160	; 0xa0
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0318 	add.w	r3, r7, #24
 800181c:	4619      	mov	r1, r3
 800181e:	4827      	ldr	r0, [pc, #156]	; (80018bc <HAL_SPI_MspInit+0x100>)
 8001820:	f000 fb20 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001824:	2340      	movs	r3, #64	; 0x40
 8001826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0318 	add.w	r3, r7, #24
 8001834:	4619      	mov	r1, r3
 8001836:	4821      	ldr	r0, [pc, #132]	; (80018bc <HAL_SPI_MspInit+0x100>)
 8001838:	f000 fb14 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800183c:	e036      	b.n	80018ac <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1f      	ldr	r2, [pc, #124]	; (80018c0 <HAL_SPI_MspInit+0x104>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d131      	bne.n	80018ac <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_SPI_MspInit+0xfc>)
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <HAL_SPI_MspInit+0xfc>)
 800184e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001852:	61d3      	str	r3, [r2, #28]
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_SPI_MspInit+0xfc>)
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_SPI_MspInit+0xfc>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <HAL_SPI_MspInit+0xfc>)
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_SPI_MspInit+0xfc>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001878:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0318 	add.w	r3, r7, #24
 800188a:	4619      	mov	r1, r3
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <HAL_SPI_MspInit+0x108>)
 800188e:	f000 fae9 	bl	8001e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001892:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f107 0318 	add.w	r3, r7, #24
 80018a4:	4619      	mov	r1, r3
 80018a6:	4807      	ldr	r0, [pc, #28]	; (80018c4 <HAL_SPI_MspInit+0x108>)
 80018a8:	f000 fadc 	bl	8001e64 <HAL_GPIO_Init>
}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40013000 	.word	0x40013000
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010800 	.word	0x40010800
 80018c0:	40003800 	.word	0x40003800
 80018c4:	40010c00 	.word	0x40010c00

080018c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	; 0x30
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0318 	add.w	r3, r7, #24
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a3b      	ldr	r2, [pc, #236]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x108>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d136      	bne.n	8001956 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e8:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	4a39      	ldr	r2, [pc, #228]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80018ee:	f043 0302 	orr.w	r3, r3, #2
 80018f2:	61d3      	str	r3, [r2, #28]
 80018f4:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001900:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a33      	ldr	r2, [pc, #204]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001906:	f043 0310 	orr.w	r3, r3, #16
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001918:	23c0      	movs	r3, #192	; 0xc0
 800191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001924:	f107 0318 	add.w	r3, r7, #24
 8001928:	4619      	mov	r1, r3
 800192a:	482b      	ldr	r0, [pc, #172]	; (80019d8 <HAL_TIM_Encoder_MspInit+0x110>)
 800192c:	f000 fa9a 	bl	8001e64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001930:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <HAL_TIM_Encoder_MspInit+0x114>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
 8001936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001938:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
 800193e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001940:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001948:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
 800194e:	4a23      	ldr	r2, [pc, #140]	; (80019dc <HAL_TIM_Encoder_MspInit+0x114>)
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001954:	e037      	b.n	80019c6 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <HAL_TIM_Encoder_MspInit+0x118>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d132      	bne.n	80019c6 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	61d3      	str	r3, [r2, #28]
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800197e:	f043 0320 	orr.w	r3, r3, #32
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0320 	and.w	r3, r3, #32
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001990:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199e:	f107 0318 	add.w	r3, r7, #24
 80019a2:	4619      	mov	r1, r3
 80019a4:	480f      	ldr	r0, [pc, #60]	; (80019e4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80019a6:	f000 fa5d 	bl	8001e64 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_TIM_Encoder_MspInit+0x114>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_TIM_Encoder_MspInit+0x114>)
 80019c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c4:	6053      	str	r3, [r2, #4]
}
 80019c6:	bf00      	nop
 80019c8:	3730      	adds	r7, #48	; 0x30
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40000400 	.word	0x40000400
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40011000 	.word	0x40011000
 80019dc:	40010000 	.word	0x40010000
 80019e0:	40000800 	.word	0x40000800
 80019e4:	40011400 	.word	0x40011400

080019e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a25      	ldr	r2, [pc, #148]	; (8001a98 <HAL_UART_MspInit+0xb0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d143      	bne.n	8001a90 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_UART_MspInit+0xb4>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	4a23      	ldr	r2, [pc, #140]	; (8001a9c <HAL_UART_MspInit+0xb4>)
 8001a0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a12:	61d3      	str	r3, [r2, #28]
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <HAL_UART_MspInit+0xb4>)
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_UART_MspInit+0xb4>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <HAL_UART_MspInit+0xb4>)
 8001a26:	f043 0320 	orr.w	r3, r3, #32
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_UART_MspInit+0xb4>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4814      	ldr	r0, [pc, #80]	; (8001aa0 <HAL_UART_MspInit+0xb8>)
 8001a4e:	f000 fa09 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	480e      	ldr	r0, [pc, #56]	; (8001aa0 <HAL_UART_MspInit+0xb8>)
 8001a68:	f000 f9fc 	bl	8001e64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_ENABLE();
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_UART_MspInit+0xbc>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8a:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_UART_MspInit+0xbc>)
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40004800 	.word	0x40004800
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40011400 	.word	0x40011400
 8001aa4:	40010000 	.word	0x40010000

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <NMI_Handler+0x4>

08001aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <MemManage_Handler+0x4>

08001aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aee:	f000 f895 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
	return 1;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <_kill>:

int _kill(int pid, int sig)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b0e:	f001 ff53 	bl	80039b8 <__errno>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2216      	movs	r2, #22
 8001b16:	601a      	str	r2, [r3, #0]
	return -1;
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_exit>:

void _exit (int status)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ffe7 	bl	8001b04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b36:	e7fe      	b.n	8001b36 <_exit+0x12>

08001b38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b44:	480c      	ldr	r0, [pc, #48]	; (8001b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b46:	490d      	ldr	r1, [pc, #52]	; (8001b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b48:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b4c:	e002      	b.n	8001b54 <LoopCopyDataInit>

08001b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b52:	3304      	adds	r3, #4

08001b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b58:	d3f9      	bcc.n	8001b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b5c:	4c0a      	ldr	r4, [pc, #40]	; (8001b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b60:	e001      	b.n	8001b66 <LoopFillZerobss>

08001b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b64:	3204      	adds	r2, #4

08001b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b68:	d3fb      	bcc.n	8001b62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b6a:	f7ff ffe5 	bl	8001b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f001 ff29 	bl	80039c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b72:	f7ff fb4b 	bl	800120c <main>
  bx lr
 8001b76:	4770      	bx	lr
  ldr r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b7c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b80:	08003e64 	.word	0x08003e64
  ldr r2, =_sbss
 8001b84:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001b88:	20000234 	.word	0x20000234

08001b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <ADC1_2_IRQHandler>
	...

08001b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_Init+0x28>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <HAL_Init+0x28>)
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 f92b 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba6:	200f      	movs	r0, #15
 8001ba8:	f000 f808 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bac:	f7ff fdd4 	bl	8001758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40022000 	.word	0x40022000

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x54>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x58>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f935 	bl	8001e4a <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d80a      	bhi.n	8001c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf8:	f000 f90b 	bl	8001e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <HAL_InitTick+0x5c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000008 	.word	0x20000008
 8001c18:	20000004 	.word	0x20000004

08001c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_IncTick+0x1c>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_IncTick+0x20>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a03      	ldr	r2, [pc, #12]	; (8001c3c <HAL_IncTick+0x20>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	20000218 	.word	0x20000218

08001c40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return uwTick;
 8001c44:	4b02      	ldr	r3, [pc, #8]	; (8001c50 <HAL_GetTick+0x10>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	20000218 	.word	0x20000218

08001c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff fff0 	bl	8001c40 <HAL_GetTick>
 8001c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c6c:	d005      	beq.n	8001c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_Delay+0x44>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c7a:	bf00      	nop
 8001c7c:	f7ff ffe0 	bl	8001c40 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d8f7      	bhi.n	8001c7c <HAL_Delay+0x28>
  {
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000008 	.word	0x20000008

08001c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	; (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ddc:	f7ff ff90 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff49 	bl	8001c9c <__NVIC_SetPriorityGrouping>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff5e 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff90 	bl	8001d54 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5f 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffb0 	bl	8001db8 <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b08b      	sub	sp, #44	; 0x2c
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e76:	e179      	b.n	800216c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	f040 8168 	bne.w	8002166 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	4a96      	ldr	r2, [pc, #600]	; (80020f4 <HAL_GPIO_Init+0x290>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d05e      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001ea0:	4a94      	ldr	r2, [pc, #592]	; (80020f4 <HAL_GPIO_Init+0x290>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d875      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001ea6:	4a94      	ldr	r2, [pc, #592]	; (80020f8 <HAL_GPIO_Init+0x294>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d058      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001eac:	4a92      	ldr	r2, [pc, #584]	; (80020f8 <HAL_GPIO_Init+0x294>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d86f      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001eb2:	4a92      	ldr	r2, [pc, #584]	; (80020fc <HAL_GPIO_Init+0x298>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d052      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001eb8:	4a90      	ldr	r2, [pc, #576]	; (80020fc <HAL_GPIO_Init+0x298>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d869      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001ebe:	4a90      	ldr	r2, [pc, #576]	; (8002100 <HAL_GPIO_Init+0x29c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d04c      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001ec4:	4a8e      	ldr	r2, [pc, #568]	; (8002100 <HAL_GPIO_Init+0x29c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d863      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001eca:	4a8e      	ldr	r2, [pc, #568]	; (8002104 <HAL_GPIO_Init+0x2a0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d046      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001ed0:	4a8c      	ldr	r2, [pc, #560]	; (8002104 <HAL_GPIO_Init+0x2a0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d85d      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001ed6:	2b12      	cmp	r3, #18
 8001ed8:	d82a      	bhi.n	8001f30 <HAL_GPIO_Init+0xcc>
 8001eda:	2b12      	cmp	r3, #18
 8001edc:	d859      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001ede:	a201      	add	r2, pc, #4	; (adr r2, 8001ee4 <HAL_GPIO_Init+0x80>)
 8001ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee4:	08001f5f 	.word	0x08001f5f
 8001ee8:	08001f39 	.word	0x08001f39
 8001eec:	08001f4b 	.word	0x08001f4b
 8001ef0:	08001f8d 	.word	0x08001f8d
 8001ef4:	08001f93 	.word	0x08001f93
 8001ef8:	08001f93 	.word	0x08001f93
 8001efc:	08001f93 	.word	0x08001f93
 8001f00:	08001f93 	.word	0x08001f93
 8001f04:	08001f93 	.word	0x08001f93
 8001f08:	08001f93 	.word	0x08001f93
 8001f0c:	08001f93 	.word	0x08001f93
 8001f10:	08001f93 	.word	0x08001f93
 8001f14:	08001f93 	.word	0x08001f93
 8001f18:	08001f93 	.word	0x08001f93
 8001f1c:	08001f93 	.word	0x08001f93
 8001f20:	08001f93 	.word	0x08001f93
 8001f24:	08001f93 	.word	0x08001f93
 8001f28:	08001f41 	.word	0x08001f41
 8001f2c:	08001f55 	.word	0x08001f55
 8001f30:	4a75      	ldr	r2, [pc, #468]	; (8002108 <HAL_GPIO_Init+0x2a4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f36:	e02c      	b.n	8001f92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	623b      	str	r3, [r7, #32]
          break;
 8001f3e:	e029      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	3304      	adds	r3, #4
 8001f46:	623b      	str	r3, [r7, #32]
          break;
 8001f48:	e024      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	3308      	adds	r3, #8
 8001f50:	623b      	str	r3, [r7, #32]
          break;
 8001f52:	e01f      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	330c      	adds	r3, #12
 8001f5a:	623b      	str	r3, [r7, #32]
          break;
 8001f5c:	e01a      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d102      	bne.n	8001f6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f66:	2304      	movs	r3, #4
 8001f68:	623b      	str	r3, [r7, #32]
          break;
 8001f6a:	e013      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d105      	bne.n	8001f80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f74:	2308      	movs	r3, #8
 8001f76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	611a      	str	r2, [r3, #16]
          break;
 8001f7e:	e009      	b.n	8001f94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f80:	2308      	movs	r3, #8
 8001f82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	615a      	str	r2, [r3, #20]
          break;
 8001f8a:	e003      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	623b      	str	r3, [r7, #32]
          break;
 8001f90:	e000      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          break;
 8001f92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	2bff      	cmp	r3, #255	; 0xff
 8001f98:	d801      	bhi.n	8001f9e <HAL_GPIO_Init+0x13a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	e001      	b.n	8001fa2 <HAL_GPIO_Init+0x13e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2bff      	cmp	r3, #255	; 0xff
 8001fa8:	d802      	bhi.n	8001fb0 <HAL_GPIO_Init+0x14c>
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	e002      	b.n	8001fb6 <HAL_GPIO_Init+0x152>
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	3b08      	subs	r3, #8
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	210f      	movs	r1, #15
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	6a39      	ldr	r1, [r7, #32]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80c1 	beq.w	8002166 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe4:	4b49      	ldr	r3, [pc, #292]	; (800210c <HAL_GPIO_Init+0x2a8>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a48      	ldr	r2, [pc, #288]	; (800210c <HAL_GPIO_Init+0x2a8>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b46      	ldr	r3, [pc, #280]	; (800210c <HAL_GPIO_Init+0x2a8>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ffc:	4a44      	ldr	r2, [pc, #272]	; (8002110 <HAL_GPIO_Init+0x2ac>)
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	3302      	adds	r3, #2
 8002004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002008:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	220f      	movs	r2, #15
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4013      	ands	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3c      	ldr	r2, [pc, #240]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d01f      	beq.n	8002068 <HAL_GPIO_Init+0x204>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3b      	ldr	r2, [pc, #236]	; (8002118 <HAL_GPIO_Init+0x2b4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d019      	beq.n	8002064 <HAL_GPIO_Init+0x200>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3a      	ldr	r2, [pc, #232]	; (800211c <HAL_GPIO_Init+0x2b8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d013      	beq.n	8002060 <HAL_GPIO_Init+0x1fc>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a39      	ldr	r2, [pc, #228]	; (8002120 <HAL_GPIO_Init+0x2bc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00d      	beq.n	800205c <HAL_GPIO_Init+0x1f8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a38      	ldr	r2, [pc, #224]	; (8002124 <HAL_GPIO_Init+0x2c0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <HAL_GPIO_Init+0x1f4>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a37      	ldr	r2, [pc, #220]	; (8002128 <HAL_GPIO_Init+0x2c4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d101      	bne.n	8002054 <HAL_GPIO_Init+0x1f0>
 8002050:	2305      	movs	r3, #5
 8002052:	e00a      	b.n	800206a <HAL_GPIO_Init+0x206>
 8002054:	2306      	movs	r3, #6
 8002056:	e008      	b.n	800206a <HAL_GPIO_Init+0x206>
 8002058:	2304      	movs	r3, #4
 800205a:	e006      	b.n	800206a <HAL_GPIO_Init+0x206>
 800205c:	2303      	movs	r3, #3
 800205e:	e004      	b.n	800206a <HAL_GPIO_Init+0x206>
 8002060:	2302      	movs	r3, #2
 8002062:	e002      	b.n	800206a <HAL_GPIO_Init+0x206>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_GPIO_Init+0x206>
 8002068:	2300      	movs	r3, #0
 800206a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206c:	f002 0203 	and.w	r2, r2, #3
 8002070:	0092      	lsls	r2, r2, #2
 8002072:	4093      	lsls	r3, r2
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800207a:	4925      	ldr	r1, [pc, #148]	; (8002110 <HAL_GPIO_Init+0x2ac>)
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002094:	4b25      	ldr	r3, [pc, #148]	; (800212c <HAL_GPIO_Init+0x2c8>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4924      	ldr	r1, [pc, #144]	; (800212c <HAL_GPIO_Init+0x2c8>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020a2:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_GPIO_Init+0x2c8>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	4920      	ldr	r1, [pc, #128]	; (800212c <HAL_GPIO_Init+0x2c8>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_GPIO_Init+0x2c8>)
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	491a      	ldr	r1, [pc, #104]	; (800212c <HAL_GPIO_Init+0x2c8>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_GPIO_Init+0x2c8>)
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4916      	ldr	r1, [pc, #88]	; (800212c <HAL_GPIO_Init+0x2c8>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d025      	beq.n	8002130 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_GPIO_Init+0x2c8>)
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	4910      	ldr	r1, [pc, #64]	; (800212c <HAL_GPIO_Init+0x2c8>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	608b      	str	r3, [r1, #8]
 80020f0:	e025      	b.n	800213e <HAL_GPIO_Init+0x2da>
 80020f2:	bf00      	nop
 80020f4:	10320000 	.word	0x10320000
 80020f8:	10310000 	.word	0x10310000
 80020fc:	10220000 	.word	0x10220000
 8002100:	10210000 	.word	0x10210000
 8002104:	10120000 	.word	0x10120000
 8002108:	10110000 	.word	0x10110000
 800210c:	40021000 	.word	0x40021000
 8002110:	40010000 	.word	0x40010000
 8002114:	40010800 	.word	0x40010800
 8002118:	40010c00 	.word	0x40010c00
 800211c:	40011000 	.word	0x40011000
 8002120:	40011400 	.word	0x40011400
 8002124:	40011800 	.word	0x40011800
 8002128:	40011c00 	.word	0x40011c00
 800212c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002130:	4b15      	ldr	r3, [pc, #84]	; (8002188 <HAL_GPIO_Init+0x324>)
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	43db      	mvns	r3, r3
 8002138:	4913      	ldr	r1, [pc, #76]	; (8002188 <HAL_GPIO_Init+0x324>)
 800213a:	4013      	ands	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_GPIO_Init+0x324>)
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	490e      	ldr	r1, [pc, #56]	; (8002188 <HAL_GPIO_Init+0x324>)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	60cb      	str	r3, [r1, #12]
 8002156:	e006      	b.n	8002166 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_GPIO_Init+0x324>)
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	43db      	mvns	r3, r3
 8002160:	4909      	ldr	r1, [pc, #36]	; (8002188 <HAL_GPIO_Init+0x324>)
 8002162:	4013      	ands	r3, r2
 8002164:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	3301      	adds	r3, #1
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	fa22 f303 	lsr.w	r3, r2, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	f47f ae7e 	bne.w	8001e78 <HAL_GPIO_Init+0x14>
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	372c      	adds	r7, #44	; 0x2c
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40010400 	.word	0x40010400

0800218c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
 8002198:	4613      	mov	r3, r2
 800219a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800219c:	787b      	ldrb	r3, [r7, #1]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021a8:	e003      	b.n	80021b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021aa:	887b      	ldrh	r3, [r7, #2]
 80021ac:	041a      	lsls	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	611a      	str	r2, [r3, #16]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e272      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8087 	beq.w	80022ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021dc:	4b92      	ldr	r3, [pc, #584]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d00c      	beq.n	8002202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e8:	4b8f      	ldr	r3, [pc, #572]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d112      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
 80021f4:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d10b      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002202:	4b89      	ldr	r3, [pc, #548]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d06c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x12c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d168      	bne.n	80022e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e24c      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x76>
 8002224:	4b80      	ldr	r3, [pc, #512]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7f      	ldr	r2, [pc, #508]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e02e      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b7b      	ldr	r3, [pc, #492]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7a      	ldr	r2, [pc, #488]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b78      	ldr	r3, [pc, #480]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a77      	ldr	r2, [pc, #476]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01d      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0xbc>
 800225e:	4b72      	ldr	r3, [pc, #456]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a71      	ldr	r2, [pc, #452]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6e      	ldr	r2, [pc, #440]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002278:	4b6b      	ldr	r3, [pc, #428]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6a      	ldr	r2, [pc, #424]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b68      	ldr	r3, [pc, #416]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a67      	ldr	r2, [pc, #412]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff fcd2 	bl	8001c40 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff fcce 	bl	8001c40 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e200      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xe4>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fcbe 	bl	8001c40 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7ff fcba 	bl	8001c40 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1ec      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x10c>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f6:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
 800230e:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1c0      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4939      	ldr	r1, [pc, #228]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e03a      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b36      	ldr	r3, [pc, #216]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7ff fc73 	bl	8001c40 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7ff fc6f 	bl	8001c40 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1a1      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4927      	ldr	r1, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff fc52 	bl	8001c40 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a0:	f7ff fc4e 	bl	8001c40 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e180      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d03a      	beq.n	8002440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d019      	beq.n	8002406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7ff fc32 	bl	8001c40 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7ff fc2e 	bl	8001c40 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e160      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fe:	2001      	movs	r0, #1
 8002400:	f000 fada 	bl	80029b8 <RCC_Delay>
 8002404:	e01c      	b.n	8002440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7ff fc18 	bl	8001c40 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002412:	e00f      	b.n	8002434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7ff fc14 	bl	8001c40 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d908      	bls.n	8002434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e146      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	42420000 	.word	0x42420000
 8002430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4b92      	ldr	r3, [pc, #584]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e9      	bne.n	8002414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a6 	beq.w	800259a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10d      	bne.n	800247a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a87      	ldr	r2, [pc, #540]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002468:	61d3      	str	r3, [r2, #28]
 800246a:	4b85      	ldr	r3, [pc, #532]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b82      	ldr	r3, [pc, #520]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b7f      	ldr	r3, [pc, #508]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a7e      	ldr	r2, [pc, #504]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7ff fbd5 	bl	8001c40 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7ff fbd1 	bl	8001c40 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e103      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b75      	ldr	r3, [pc, #468]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x312>
 80024c0:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a6e      	ldr	r2, [pc, #440]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	e02d      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x334>
 80024d6:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a69      	ldr	r2, [pc, #420]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6213      	str	r3, [r2, #32]
 80024e2:	4b67      	ldr	r3, [pc, #412]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a66      	ldr	r2, [pc, #408]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6213      	str	r3, [r2, #32]
 80024ee:	e01c      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_OscConfig+0x356>
 80024f8:	4b61      	ldr	r3, [pc, #388]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4a60      	ldr	r2, [pc, #384]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6213      	str	r3, [r2, #32]
 8002504:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a5d      	ldr	r2, [pc, #372]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	e00b      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 8002512:	4b5b      	ldr	r3, [pc, #364]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a5a      	ldr	r2, [pc, #360]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b58      	ldr	r3, [pc, #352]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a57      	ldr	r2, [pc, #348]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d015      	beq.n	800255e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7ff fb85 	bl	8001c40 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7ff fb81 	bl	8001c40 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0b1      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ee      	beq.n	800253a <HAL_RCC_OscConfig+0x37e>
 800255c:	e014      	b.n	8002588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7ff fb6f 	bl	8001c40 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7ff fb6b 	bl	8001c40 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e09b      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	4b40      	ldr	r3, [pc, #256]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1ee      	bne.n	8002566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a3b      	ldr	r2, [pc, #236]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8087 	beq.w	80026b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d061      	beq.n	8002674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d146      	bne.n	8002646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b8:	4b33      	ldr	r3, [pc, #204]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7ff fb3f 	bl	8001c40 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7ff fb3b 	bl	8001c40 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e06d      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d108      	bne.n	8002600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4921      	ldr	r1, [pc, #132]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a19      	ldr	r1, [r3, #32]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	430b      	orrs	r3, r1
 8002612:	491b      	ldr	r1, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7ff fb0f 	bl	8001c40 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7ff fb0b 	bl	8001c40 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e03d      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x46a>
 8002644:	e035      	b.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7ff faf8 	bl	8001c40 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7ff faf4 	bl	8001c40 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e026      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x498>
 8002672:	e01e      	b.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d107      	bne.n	800268c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e019      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
 8002688:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_OscConfig+0x500>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	429a      	cmp	r2, r3
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0d0      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d4:	4b6a      	ldr	r3, [pc, #424]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d910      	bls.n	8002704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b67      	ldr	r3, [pc, #412]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0207 	bic.w	r2, r3, #7
 80026ea:	4965      	ldr	r1, [pc, #404]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0b8      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800271c:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002726:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002734:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800273e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	494d      	ldr	r1, [pc, #308]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d040      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d115      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e07f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	4b41      	ldr	r3, [pc, #260]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e073      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06b      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279e:	4b39      	ldr	r3, [pc, #228]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f023 0203 	bic.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4936      	ldr	r1, [pc, #216]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b0:	f7ff fa46 	bl	8001c40 <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b8:	f7ff fa42 	bl	8001c40 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e053      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 020c 	and.w	r2, r3, #12
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	429a      	cmp	r2, r3
 80027de:	d1eb      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d210      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 0207 	bic.w	r2, r3, #7
 80027f6:	4922      	ldr	r1, [pc, #136]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e032      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4916      	ldr	r1, [pc, #88]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	490e      	ldr	r1, [pc, #56]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284e:	f000 f821 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	490a      	ldr	r1, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x1c8>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	fa22 f303 	lsr.w	r3, r2, r3
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1cc>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1d0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff f9a4 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40022000 	.word	0x40022000
 8002884:	40021000 	.word	0x40021000
 8002888:	08003bc0 	.word	0x08003bc0
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b490      	push	{r4, r7}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_RCC_GetSysClockFreq+0xac>)
 800289c:	1d3c      	adds	r4, r7, #4
 800289e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028a4:	f240 2301 	movw	r3, #513	; 0x201
 80028a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d002      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x40>
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d003      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0x46>
 80028d2:	e02b      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d4:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028d6:	623b      	str	r3, [r7, #32]
      break;
 80028d8:	e02b      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	0c9b      	lsrs	r3, r3, #18
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3328      	adds	r3, #40	; 0x28
 80028e4:	443b      	add	r3, r7
 80028e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	0c5b      	lsrs	r3, r3, #17
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	3328      	adds	r3, #40	; 0x28
 8002902:	443b      	add	r3, r7
 8002904:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002908:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb4>)
 800290e:	fb03 f202 	mul.w	r2, r3, r2
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	e004      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	623b      	str	r3, [r7, #32]
      break;
 800292a:	e002      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <HAL_RCC_GetSysClockFreq+0xbc>)
 800292e:	623b      	str	r3, [r7, #32]
      break;
 8002930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002932:	6a3b      	ldr	r3, [r7, #32]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3728      	adds	r7, #40	; 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bc90      	pop	{r4, r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	08003ba0 	.word	0x08003ba0
 8002944:	40021000 	.word	0x40021000
 8002948:	00f42400 	.word	0x00f42400
 800294c:	003d0900 	.word	0x003d0900
 8002950:	007a1200 	.word	0x007a1200

08002954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002958:	4b02      	ldr	r3, [pc, #8]	; (8002964 <HAL_RCC_GetHCLKFreq+0x10>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	20000000 	.word	0x20000000

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800296c:	f7ff fff2 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4903      	ldr	r1, [pc, #12]	; (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	08003bd0 	.word	0x08003bd0

08002990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002994:	f7ff ffde 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	0adb      	lsrs	r3, r3, #11
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4903      	ldr	r1, [pc, #12]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000
 80029b4:	08003bd0 	.word	0x08003bd0

080029b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <RCC_Delay+0x34>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <RCC_Delay+0x38>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0a5b      	lsrs	r3, r3, #9
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029d4:	bf00      	nop
  }
  while (Delay --);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1e5a      	subs	r2, r3, #1
 80029da:	60fa      	str	r2, [r7, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f9      	bne.n	80029d4 <RCC_Delay+0x1c>
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	20000000 	.word	0x20000000
 80029f0:	10624dd3 	.word	0x10624dd3

080029f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e076      	b.n	8002af4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d108      	bne.n	8002a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a16:	d009      	beq.n	8002a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	61da      	str	r2, [r3, #28]
 8002a1e:	e005      	b.n	8002a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7fe feb8 	bl	80017bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab0:	ea42 0103 	orr.w	r1, r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	0c1a      	lsrs	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f002 0204 	and.w	r2, r2, #4
 8002ad2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69da      	ldr	r2, [r3, #28]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ae2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e093      	b.n	8002c38 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d106      	bne.n	8002b2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7fe fecf 	bl	80018c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b40:	f023 0307 	bic.w	r3, r3, #7
 8002b44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4610      	mov	r0, r2
 8002b52:	f000 f875 	bl	8002c40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7e:	f023 0303 	bic.w	r3, r3, #3
 8002b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b9c:	f023 030c 	bic.w	r3, r3, #12
 8002ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ba8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	011a      	lsls	r2, r3, #4
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	031b      	lsls	r3, r3, #12
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002bda:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	4313      	orrs	r3, r2
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a33      	ldr	r2, [pc, #204]	; (8002d20 <TIM_Base_SetConfig+0xe0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d013      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a32      	ldr	r2, [pc, #200]	; (8002d24 <TIM_Base_SetConfig+0xe4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00f      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c66:	d00b      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a2f      	ldr	r2, [pc, #188]	; (8002d28 <TIM_Base_SetConfig+0xe8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d007      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a2e      	ldr	r2, [pc, #184]	; (8002d2c <TIM_Base_SetConfig+0xec>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d003      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a2d      	ldr	r2, [pc, #180]	; (8002d30 <TIM_Base_SetConfig+0xf0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d108      	bne.n	8002c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <TIM_Base_SetConfig+0xe0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d013      	beq.n	8002cc2 <TIM_Base_SetConfig+0x82>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a21      	ldr	r2, [pc, #132]	; (8002d24 <TIM_Base_SetConfig+0xe4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00f      	beq.n	8002cc2 <TIM_Base_SetConfig+0x82>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca8:	d00b      	beq.n	8002cc2 <TIM_Base_SetConfig+0x82>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a1e      	ldr	r2, [pc, #120]	; (8002d28 <TIM_Base_SetConfig+0xe8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d007      	beq.n	8002cc2 <TIM_Base_SetConfig+0x82>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <TIM_Base_SetConfig+0xec>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d003      	beq.n	8002cc2 <TIM_Base_SetConfig+0x82>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <TIM_Base_SetConfig+0xf0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d108      	bne.n	8002cd4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a09      	ldr	r2, [pc, #36]	; (8002d20 <TIM_Base_SetConfig+0xe0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d003      	beq.n	8002d08 <TIM_Base_SetConfig+0xc8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <TIM_Base_SetConfig+0xe4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d103      	bne.n	8002d10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	615a      	str	r2, [r3, #20]
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40013400 	.word	0x40013400
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	40000800 	.word	0x40000800
 8002d30:	40000c00 	.word	0x40000c00

08002d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e050      	b.n	8002dee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d018      	beq.n	8002dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da2:	d00e      	beq.n	8002dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d009      	beq.n	8002dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d004      	beq.n	8002dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d10c      	bne.n	8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	40013400 	.word	0x40013400
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40000800 	.word	0x40000800
 8002e08:	40000c00 	.word	0x40000c00

08002e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e03f      	b.n	8002e9e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fe fdd8 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	; 0x24
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f829 	bl	8002ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ee2:	f023 030c 	bic.w	r3, r3, #12
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	430b      	orrs	r3, r1
 8002eee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2c      	ldr	r2, [pc, #176]	; (8002fbc <UART_SetConfig+0x114>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d103      	bne.n	8002f18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f10:	f7ff fd3e 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	e002      	b.n	8002f1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f18:	f7ff fd26 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8002f1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009a      	lsls	r2, r3, #2
 8002f28:	441a      	add	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <UART_SetConfig+0x118>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	0119      	lsls	r1, r3, #4
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009a      	lsls	r2, r3, #2
 8002f48:	441a      	add	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f54:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <UART_SetConfig+0x118>)
 8002f56:	fba3 0302 	umull	r0, r3, r3, r2
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2064      	movs	r0, #100	; 0x64
 8002f5e:	fb00 f303 	mul.w	r3, r0, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	3332      	adds	r3, #50	; 0x32
 8002f68:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <UART_SetConfig+0x118>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f74:	4419      	add	r1, r3
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009a      	lsls	r2, r3, #2
 8002f80:	441a      	add	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <UART_SetConfig+0x118>)
 8002f8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2064      	movs	r0, #100	; 0x64
 8002f96:	fb00 f303 	mul.w	r3, r0, r3
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	3332      	adds	r3, #50	; 0x32
 8002fa0:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <UART_SetConfig+0x118>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	f003 020f 	and.w	r2, r3, #15
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	440a      	add	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	51eb851f 	.word	0x51eb851f

08002fc4 <_ZdlPvj>:
 8002fc4:	f000 bc68 	b.w	8003898 <_ZdlPv>

08002fc8 <__cxa_end_cleanup>:
 8002fc8:	b41e      	push	{r1, r2, r3, r4}
 8002fca:	f000 f89c 	bl	8003106 <__gnu_end_cleanup>
 8002fce:	bc1e      	pop	{r1, r2, r3, r4}
 8002fd0:	f7fd feb2 	bl	8000d38 <_Unwind_Resume>

08002fd4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8002fd4:	7803      	ldrb	r3, [r0, #0]
 8002fd6:	2b47      	cmp	r3, #71	; 0x47
 8002fd8:	d117      	bne.n	800300a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002fda:	7843      	ldrb	r3, [r0, #1]
 8002fdc:	2b4e      	cmp	r3, #78	; 0x4e
 8002fde:	d114      	bne.n	800300a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002fe0:	7883      	ldrb	r3, [r0, #2]
 8002fe2:	2b55      	cmp	r3, #85	; 0x55
 8002fe4:	d111      	bne.n	800300a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002fe6:	78c3      	ldrb	r3, [r0, #3]
 8002fe8:	2b43      	cmp	r3, #67	; 0x43
 8002fea:	d10e      	bne.n	800300a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002fec:	7903      	ldrb	r3, [r0, #4]
 8002fee:	2b43      	cmp	r3, #67	; 0x43
 8002ff0:	d10b      	bne.n	800300a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002ff2:	7943      	ldrb	r3, [r0, #5]
 8002ff4:	2b2b      	cmp	r3, #43	; 0x2b
 8002ff6:	d108      	bne.n	800300a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002ff8:	7983      	ldrb	r3, [r0, #6]
 8002ffa:	2b2b      	cmp	r3, #43	; 0x2b
 8002ffc:	d105      	bne.n	800300a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002ffe:	79c0      	ldrb	r0, [r0, #7]
 8003000:	2801      	cmp	r0, #1
 8003002:	bf8c      	ite	hi
 8003004:	2000      	movhi	r0, #0
 8003006:	2001      	movls	r0, #1
 8003008:	4770      	bx	lr
 800300a:	2000      	movs	r0, #0
 800300c:	4770      	bx	lr
	...

08003010 <__cxa_type_match>:
 8003010:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003014:	461d      	mov	r5, r3
 8003016:	7803      	ldrb	r3, [r0, #0]
 8003018:	460e      	mov	r6, r1
 800301a:	2b47      	cmp	r3, #71	; 0x47
 800301c:	4602      	mov	r2, r0
 800301e:	79c1      	ldrb	r1, [r0, #7]
 8003020:	d113      	bne.n	800304a <__cxa_type_match+0x3a>
 8003022:	7843      	ldrb	r3, [r0, #1]
 8003024:	2b4e      	cmp	r3, #78	; 0x4e
 8003026:	d110      	bne.n	800304a <__cxa_type_match+0x3a>
 8003028:	7883      	ldrb	r3, [r0, #2]
 800302a:	2b55      	cmp	r3, #85	; 0x55
 800302c:	d10d      	bne.n	800304a <__cxa_type_match+0x3a>
 800302e:	78c3      	ldrb	r3, [r0, #3]
 8003030:	2b43      	cmp	r3, #67	; 0x43
 8003032:	d10a      	bne.n	800304a <__cxa_type_match+0x3a>
 8003034:	7903      	ldrb	r3, [r0, #4]
 8003036:	2b46      	cmp	r3, #70	; 0x46
 8003038:	d107      	bne.n	800304a <__cxa_type_match+0x3a>
 800303a:	7943      	ldrb	r3, [r0, #5]
 800303c:	2b4f      	cmp	r3, #79	; 0x4f
 800303e:	d104      	bne.n	800304a <__cxa_type_match+0x3a>
 8003040:	7983      	ldrb	r3, [r0, #6]
 8003042:	2b52      	cmp	r3, #82	; 0x52
 8003044:	d101      	bne.n	800304a <__cxa_type_match+0x3a>
 8003046:	2900      	cmp	r1, #0
 8003048:	d030      	beq.n	80030ac <__cxa_type_match+0x9c>
 800304a:	4610      	mov	r0, r2
 800304c:	f7ff ffc2 	bl	8002fd4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003050:	2300      	movs	r3, #0
 8003052:	f080 0401 	eor.w	r4, r0, #1
 8003056:	b2e4      	uxtb	r4, r4
 8003058:	2000      	movs	r0, #0
 800305a:	9001      	str	r0, [sp, #4]
 800305c:	bb4b      	cbnz	r3, 80030b2 <__cxa_type_match+0xa2>
 800305e:	bb54      	cbnz	r4, 80030b6 <__cxa_type_match+0xa6>
 8003060:	2901      	cmp	r1, #1
 8003062:	bf0a      	itet	eq
 8003064:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8003068:	f1a2 0320 	subne.w	r3, r2, #32
 800306c:	3b78      	subeq	r3, #120	; 0x78
 800306e:	2901      	cmp	r1, #1
 8003070:	bf0c      	ite	eq
 8003072:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8003076:	3258      	addne	r2, #88	; 0x58
 8003078:	681c      	ldr	r4, [r3, #0]
 800307a:	9201      	str	r2, [sp, #4]
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	4620      	mov	r0, r4
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	4798      	blx	r3
 8003084:	b1c8      	cbz	r0, 80030ba <__cxa_type_match+0xaa>
 8003086:	2702      	movs	r7, #2
 8003088:	9b01      	ldr	r3, [sp, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	6833      	ldr	r3, [r6, #0]
 8003090:	4621      	mov	r1, r4
 8003092:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8003096:	4630      	mov	r0, r6
 8003098:	2301      	movs	r3, #1
 800309a:	aa01      	add	r2, sp, #4
 800309c:	47c0      	blx	r8
 800309e:	b170      	cbz	r0, 80030be <__cxa_type_match+0xae>
 80030a0:	9b01      	ldr	r3, [sp, #4]
 80030a2:	602b      	str	r3, [r5, #0]
 80030a4:	4638      	mov	r0, r7
 80030a6:	b002      	add	sp, #8
 80030a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030ac:	2301      	movs	r3, #1
 80030ae:	460c      	mov	r4, r1
 80030b0:	e7d2      	b.n	8003058 <__cxa_type_match+0x48>
 80030b2:	4c04      	ldr	r4, [pc, #16]	; (80030c4 <__cxa_type_match+0xb4>)
 80030b4:	e7e2      	b.n	800307c <__cxa_type_match+0x6c>
 80030b6:	4c04      	ldr	r4, [pc, #16]	; (80030c8 <__cxa_type_match+0xb8>)
 80030b8:	e7e0      	b.n	800307c <__cxa_type_match+0x6c>
 80030ba:	2701      	movs	r7, #1
 80030bc:	e7e7      	b.n	800308e <__cxa_type_match+0x7e>
 80030be:	4607      	mov	r7, r0
 80030c0:	e7f0      	b.n	80030a4 <__cxa_type_match+0x94>
 80030c2:	bf00      	nop
 80030c4:	08003bd8 	.word	0x08003bd8
 80030c8:	08003be0 	.word	0x08003be0

080030cc <__cxa_begin_cleanup>:
 80030cc:	b510      	push	{r4, lr}
 80030ce:	4604      	mov	r4, r0
 80030d0:	f000 f832 	bl	8003138 <__cxa_get_globals>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4620      	mov	r0, r4
 80030d8:	f1a4 0120 	sub.w	r1, r4, #32
 80030dc:	f7ff ff7a 	bl	8002fd4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80030e0:	b160      	cbz	r0, 80030fc <__cxa_begin_cleanup+0x30>
 80030e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80030e6:	3301      	adds	r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80030ee:	d103      	bne.n	80030f8 <__cxa_begin_cleanup+0x2c>
 80030f0:	6893      	ldr	r3, [r2, #8]
 80030f2:	f844 3c08 	str.w	r3, [r4, #-8]
 80030f6:	6091      	str	r1, [r2, #8]
 80030f8:	2001      	movs	r0, #1
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	6893      	ldr	r3, [r2, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f9      	beq.n	80030f6 <__cxa_begin_cleanup+0x2a>
 8003102:	f000 faa3 	bl	800364c <_ZSt9terminatev>

08003106 <__gnu_end_cleanup>:
 8003106:	b510      	push	{r4, lr}
 8003108:	f000 f816 	bl	8003138 <__cxa_get_globals>
 800310c:	6882      	ldr	r2, [r0, #8]
 800310e:	4601      	mov	r1, r0
 8003110:	b90a      	cbnz	r2, 8003116 <__gnu_end_cleanup+0x10>
 8003112:	f000 fa9b 	bl	800364c <_ZSt9terminatev>
 8003116:	f102 0420 	add.w	r4, r2, #32
 800311a:	4620      	mov	r0, r4
 800311c:	f7ff ff5a 	bl	8002fd4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003120:	b140      	cbz	r0, 8003134 <__gnu_end_cleanup+0x2e>
 8003122:	69d3      	ldr	r3, [r2, #28]
 8003124:	3b01      	subs	r3, #1
 8003126:	61d3      	str	r3, [r2, #28]
 8003128:	b913      	cbnz	r3, 8003130 <__gnu_end_cleanup+0x2a>
 800312a:	6990      	ldr	r0, [r2, #24]
 800312c:	6088      	str	r0, [r1, #8]
 800312e:	6193      	str	r3, [r2, #24]
 8003130:	4620      	mov	r0, r4
 8003132:	bd10      	pop	{r4, pc}
 8003134:	6088      	str	r0, [r1, #8]
 8003136:	e7fb      	b.n	8003130 <__gnu_end_cleanup+0x2a>

08003138 <__cxa_get_globals>:
 8003138:	4800      	ldr	r0, [pc, #0]	; (800313c <__cxa_get_globals+0x4>)
 800313a:	4770      	bx	lr
 800313c:	2000021c 	.word	0x2000021c

08003140 <_ZL12read_uleb128PKhPm>:
 8003140:	2300      	movs	r3, #0
 8003142:	461a      	mov	r2, r3
 8003144:	b530      	push	{r4, r5, lr}
 8003146:	f810 5b01 	ldrb.w	r5, [r0], #1
 800314a:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 800314e:	4094      	lsls	r4, r2
 8003150:	4323      	orrs	r3, r4
 8003152:	062c      	lsls	r4, r5, #24
 8003154:	f102 0207 	add.w	r2, r2, #7
 8003158:	d4f5      	bmi.n	8003146 <_ZL12read_uleb128PKhPm+0x6>
 800315a:	600b      	str	r3, [r1, #0]
 800315c:	bd30      	pop	{r4, r5, pc}

0800315e <_ZL12read_sleb128PKhPl>:
 800315e:	2300      	movs	r3, #0
 8003160:	461a      	mov	r2, r3
 8003162:	b530      	push	{r4, r5, lr}
 8003164:	f810 4b01 	ldrb.w	r4, [r0], #1
 8003168:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 800316c:	4095      	lsls	r5, r2
 800316e:	432b      	orrs	r3, r5
 8003170:	0625      	lsls	r5, r4, #24
 8003172:	f102 0207 	add.w	r2, r2, #7
 8003176:	d4f5      	bmi.n	8003164 <_ZL12read_sleb128PKhPl+0x6>
 8003178:	2a1f      	cmp	r2, #31
 800317a:	d806      	bhi.n	800318a <_ZL12read_sleb128PKhPl+0x2c>
 800317c:	0664      	lsls	r4, r4, #25
 800317e:	bf42      	ittt	mi
 8003180:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 8003184:	fa04 f202 	lslmi.w	r2, r4, r2
 8003188:	4313      	orrmi	r3, r2
 800318a:	600b      	str	r3, [r1, #0]
 800318c:	bd30      	pop	{r4, r5, pc}

0800318e <_ZL28read_encoded_value_with_basehjPKhPj>:
 800318e:	2850      	cmp	r0, #80	; 0x50
 8003190:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003194:	4606      	mov	r6, r0
 8003196:	4688      	mov	r8, r1
 8003198:	4615      	mov	r5, r2
 800319a:	461f      	mov	r7, r3
 800319c:	d108      	bne.n	80031b0 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 800319e:	1cd0      	adds	r0, r2, #3
 80031a0:	f020 0003 	bic.w	r0, r0, #3
 80031a4:	f850 4b04 	ldr.w	r4, [r0], #4
 80031a8:	603c      	str	r4, [r7, #0]
 80031aa:	b002      	add	sp, #8
 80031ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031b0:	f000 030f 	and.w	r3, r0, #15
 80031b4:	2b0c      	cmp	r3, #12
 80031b6:	d82e      	bhi.n	8003216 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 80031b8:	e8df f003 	tbb	[pc, r3]
 80031bc:	251d0725 	.word	0x251d0725
 80031c0:	2d2d2d29 	.word	0x2d2d2d29
 80031c4:	2521182d 	.word	0x2521182d
 80031c8:	29          	.byte	0x29
 80031c9:	00          	.byte	0x00
 80031ca:	4628      	mov	r0, r5
 80031cc:	a901      	add	r1, sp, #4
 80031ce:	f7ff ffb7 	bl	8003140 <_ZL12read_uleb128PKhPm>
 80031d2:	9c01      	ldr	r4, [sp, #4]
 80031d4:	2c00      	cmp	r4, #0
 80031d6:	d0e7      	beq.n	80031a8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80031d8:	f006 0370 	and.w	r3, r6, #112	; 0x70
 80031dc:	2b10      	cmp	r3, #16
 80031de:	bf08      	it	eq
 80031e0:	46a8      	moveq	r8, r5
 80031e2:	0633      	lsls	r3, r6, #24
 80031e4:	4444      	add	r4, r8
 80031e6:	bf48      	it	mi
 80031e8:	6824      	ldrmi	r4, [r4, #0]
 80031ea:	e7dd      	b.n	80031a8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80031ec:	4628      	mov	r0, r5
 80031ee:	a901      	add	r1, sp, #4
 80031f0:	f7ff ffb5 	bl	800315e <_ZL12read_sleb128PKhPl>
 80031f4:	e7ed      	b.n	80031d2 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 80031f6:	4628      	mov	r0, r5
 80031f8:	f830 4b02 	ldrh.w	r4, [r0], #2
 80031fc:	e7ea      	b.n	80031d4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80031fe:	4628      	mov	r0, r5
 8003200:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8003204:	e7e6      	b.n	80031d4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8003206:	4628      	mov	r0, r5
 8003208:	f850 4b04 	ldr.w	r4, [r0], #4
 800320c:	e7e2      	b.n	80031d4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800320e:	4628      	mov	r0, r5
 8003210:	f850 4b08 	ldr.w	r4, [r0], #8
 8003214:	e7de      	b.n	80031d4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8003216:	f000 fbc7 	bl	80039a8 <abort>

0800321a <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800321a:	b508      	push	{r3, lr}
 800321c:	4603      	mov	r3, r0
 800321e:	2bff      	cmp	r3, #255	; 0xff
 8003220:	4608      	mov	r0, r1
 8003222:	d010      	beq.n	8003246 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8003224:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003228:	2a30      	cmp	r2, #48	; 0x30
 800322a:	d012      	beq.n	8003252 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 800322c:	d807      	bhi.n	800323e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 800322e:	2a20      	cmp	r2, #32
 8003230:	d00b      	beq.n	800324a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8003232:	d802      	bhi.n	800323a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8003234:	f013 0f60 	tst.w	r3, #96	; 0x60
 8003238:	d005      	beq.n	8003246 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 800323a:	f000 fbb5 	bl	80039a8 <abort>
 800323e:	2a40      	cmp	r2, #64	; 0x40
 8003240:	d00b      	beq.n	800325a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 8003242:	2a50      	cmp	r2, #80	; 0x50
 8003244:	d1f9      	bne.n	800323a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8003246:	2000      	movs	r0, #0
 8003248:	bd08      	pop	{r3, pc}
 800324a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800324e:	f000 bc8a 	b.w	8003b66 <_Unwind_GetTextRelBase>
 8003252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003256:	f000 bc83 	b.w	8003b60 <_Unwind_GetDataRelBase>
 800325a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800325e:	f7fd bf69 	b.w	8001134 <_Unwind_GetRegionStart>

08003262 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8003262:	b570      	push	{r4, r5, r6, lr}
 8003264:	460c      	mov	r4, r1
 8003266:	4601      	mov	r1, r0
 8003268:	4620      	mov	r0, r4
 800326a:	4615      	mov	r5, r2
 800326c:	461e      	mov	r6, r3
 800326e:	f7ff ffd4 	bl	800321a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8003272:	4633      	mov	r3, r6
 8003274:	4601      	mov	r1, r0
 8003276:	462a      	mov	r2, r5
 8003278:	4620      	mov	r0, r4
 800327a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800327e:	f7ff bf86 	b.w	800318e <_ZL28read_encoded_value_with_basehjPKhPj>

08003282 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8003282:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003284:	460c      	mov	r4, r1
 8003286:	4615      	mov	r5, r2
 8003288:	4606      	mov	r6, r0
 800328a:	b328      	cbz	r0, 80032d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 800328c:	f7fd ff52 	bl	8001134 <_Unwind_GetRegionStart>
 8003290:	4603      	mov	r3, r0
 8003292:	4620      	mov	r0, r4
 8003294:	602b      	str	r3, [r5, #0]
 8003296:	f810 1b01 	ldrb.w	r1, [r0], #1
 800329a:	29ff      	cmp	r1, #255	; 0xff
 800329c:	d01e      	beq.n	80032dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 800329e:	4602      	mov	r2, r0
 80032a0:	1d2b      	adds	r3, r5, #4
 80032a2:	4630      	mov	r0, r6
 80032a4:	f7ff ffdd 	bl	8003262 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80032a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80032ac:	2bff      	cmp	r3, #255	; 0xff
 80032ae:	752b      	strb	r3, [r5, #20]
 80032b0:	d016      	beq.n	80032e0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 80032b2:	2310      	movs	r3, #16
 80032b4:	a901      	add	r1, sp, #4
 80032b6:	752b      	strb	r3, [r5, #20]
 80032b8:	f7ff ff42 	bl	8003140 <_ZL12read_uleb128PKhPm>
 80032bc:	9b01      	ldr	r3, [sp, #4]
 80032be:	4403      	add	r3, r0
 80032c0:	60eb      	str	r3, [r5, #12]
 80032c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80032c6:	a901      	add	r1, sp, #4
 80032c8:	756b      	strb	r3, [r5, #21]
 80032ca:	f7ff ff39 	bl	8003140 <_ZL12read_uleb128PKhPm>
 80032ce:	9b01      	ldr	r3, [sp, #4]
 80032d0:	4403      	add	r3, r0
 80032d2:	612b      	str	r3, [r5, #16]
 80032d4:	b002      	add	sp, #8
 80032d6:	bd70      	pop	{r4, r5, r6, pc}
 80032d8:	4603      	mov	r3, r0
 80032da:	e7da      	b.n	8003292 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 80032dc:	606b      	str	r3, [r5, #4]
 80032de:	e7e3      	b.n	80032a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 80032e0:	2300      	movs	r3, #0
 80032e2:	e7ed      	b.n	80032c0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

080032e4 <_Unwind_GetGR>:
 80032e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80032e6:	ab03      	add	r3, sp, #12
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	2300      	movs	r3, #0
 80032ec:	460a      	mov	r2, r1
 80032ee:	4619      	mov	r1, r3
 80032f0:	f7fd f976 	bl	80005e0 <_Unwind_VRS_Get>
 80032f4:	9803      	ldr	r0, [sp, #12]
 80032f6:	b005      	add	sp, #20
 80032f8:	f85d fb04 	ldr.w	pc, [sp], #4

080032fc <__gxx_personality_v0>:
 80032fc:	2300      	movs	r3, #0
 80032fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003302:	b091      	sub	sp, #68	; 0x44
 8003304:	9305      	str	r3, [sp, #20]
 8003306:	f000 0303 	and.w	r3, r0, #3
 800330a:	2b01      	cmp	r3, #1
 800330c:	4606      	mov	r6, r0
 800330e:	460c      	mov	r4, r1
 8003310:	4617      	mov	r7, r2
 8003312:	d00e      	beq.n	8003332 <__gxx_personality_v0+0x36>
 8003314:	2b02      	cmp	r3, #2
 8003316:	d003      	beq.n	8003320 <__gxx_personality_v0+0x24>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d13b      	bne.n	8003394 <__gxx_personality_v0+0x98>
 800331c:	0701      	lsls	r1, r0, #28
 800331e:	d53b      	bpl.n	8003398 <__gxx_personality_v0+0x9c>
 8003320:	4639      	mov	r1, r7
 8003322:	4620      	mov	r0, r4
 8003324:	f7fd feee 	bl	8001104 <__gnu_unwind_frame>
 8003328:	b390      	cbz	r0, 8003390 <__gxx_personality_v0+0x94>
 800332a:	2009      	movs	r0, #9
 800332c:	b011      	add	sp, #68	; 0x44
 800332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003332:	0702      	lsls	r2, r0, #28
 8003334:	d406      	bmi.n	8003344 <__gxx_personality_v0+0x48>
 8003336:	6a0d      	ldr	r5, [r1, #32]
 8003338:	4638      	mov	r0, r7
 800333a:	210d      	movs	r1, #13
 800333c:	f7ff ffd2 	bl	80032e4 <_Unwind_GetGR>
 8003340:	4285      	cmp	r5, r0
 8003342:	d02b      	beq.n	800339c <__gxx_personality_v0+0xa0>
 8003344:	2002      	movs	r0, #2
 8003346:	2300      	movs	r3, #0
 8003348:	f006 0608 	and.w	r6, r6, #8
 800334c:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8003350:	4306      	orrs	r6, r0
 8003352:	220c      	movs	r2, #12
 8003354:	4619      	mov	r1, r3
 8003356:	4638      	mov	r0, r7
 8003358:	f8cd a000 	str.w	sl, [sp]
 800335c:	940a      	str	r4, [sp, #40]	; 0x28
 800335e:	f7fd f965 	bl	800062c <_Unwind_VRS_Set>
 8003362:	2e06      	cmp	r6, #6
 8003364:	d11c      	bne.n	80033a0 <__gxx_personality_v0+0xa4>
 8003366:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 800336a:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800336e:	f1b8 0f00 	cmp.w	r8, #0
 8003372:	bf0c      	ite	eq
 8003374:	f04f 0b01 	moveq.w	fp, #1
 8003378:	f04f 0b03 	movne.w	fp, #3
 800337c:	f016 0608 	ands.w	r6, r6, #8
 8003380:	f000 8107 	beq.w	8003592 <__gxx_personality_v0+0x296>
 8003384:	f1bb 0f01 	cmp.w	fp, #1
 8003388:	f040 80ff 	bne.w	800358a <__gxx_personality_v0+0x28e>
 800338c:	f000 f95e 	bl	800364c <_ZSt9terminatev>
 8003390:	2008      	movs	r0, #8
 8003392:	e7cb      	b.n	800332c <__gxx_personality_v0+0x30>
 8003394:	f000 fb08 	bl	80039a8 <abort>
 8003398:	2001      	movs	r0, #1
 800339a:	e7d4      	b.n	8003346 <__gxx_personality_v0+0x4a>
 800339c:	2006      	movs	r0, #6
 800339e:	e7d2      	b.n	8003346 <__gxx_personality_v0+0x4a>
 80033a0:	4638      	mov	r0, r7
 80033a2:	f7fd fecd 	bl	8001140 <_Unwind_GetLanguageSpecificData>
 80033a6:	4681      	mov	r9, r0
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d0b9      	beq.n	8003320 <__gxx_personality_v0+0x24>
 80033ac:	4652      	mov	r2, sl
 80033ae:	4601      	mov	r1, r0
 80033b0:	4638      	mov	r0, r7
 80033b2:	f7ff ff66 	bl	8003282 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80033b6:	4639      	mov	r1, r7
 80033b8:	4605      	mov	r5, r0
 80033ba:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80033be:	f7ff ff2c 	bl	800321a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80033c2:	210f      	movs	r1, #15
 80033c4:	900c      	str	r0, [sp, #48]	; 0x30
 80033c6:	4638      	mov	r0, r7
 80033c8:	f7ff ff8c 	bl	80032e4 <_Unwind_GetGR>
 80033cc:	f020 0801 	bic.w	r8, r0, #1
 80033d0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80033d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033d6:	42ab      	cmp	r3, r5
 80033d8:	f240 80bf 	bls.w	800355a <__gxx_personality_v0+0x25e>
 80033dc:	462a      	mov	r2, r5
 80033de:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80033e2:	ab06      	add	r3, sp, #24
 80033e4:	2000      	movs	r0, #0
 80033e6:	f7ff ff3c 	bl	8003262 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80033ea:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80033ee:	4602      	mov	r2, r0
 80033f0:	ab07      	add	r3, sp, #28
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7ff ff35 	bl	8003262 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80033f8:	ab08      	add	r3, sp, #32
 80033fa:	4602      	mov	r2, r0
 80033fc:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8003400:	2000      	movs	r0, #0
 8003402:	f7ff ff2e 	bl	8003262 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8003406:	a909      	add	r1, sp, #36	; 0x24
 8003408:	f7ff fe9a 	bl	8003140 <_ZL12read_uleb128PKhPm>
 800340c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800340e:	9a06      	ldr	r2, [sp, #24]
 8003410:	4605      	mov	r5, r0
 8003412:	4413      	add	r3, r2
 8003414:	4543      	cmp	r3, r8
 8003416:	d901      	bls.n	800341c <__gxx_personality_v0+0x120>
 8003418:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800341a:	e7db      	b.n	80033d4 <__gxx_personality_v0+0xd8>
 800341c:	9a07      	ldr	r2, [sp, #28]
 800341e:	4413      	add	r3, r2
 8003420:	4543      	cmp	r3, r8
 8003422:	d9d7      	bls.n	80033d4 <__gxx_personality_v0+0xd8>
 8003424:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003428:	f1b8 0f00 	cmp.w	r8, #0
 800342c:	d001      	beq.n	8003432 <__gxx_personality_v0+0x136>
 800342e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003430:	4498      	add	r8, r3
 8003432:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003434:	b115      	cbz	r5, 800343c <__gxx_personality_v0+0x140>
 8003436:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003438:	3d01      	subs	r5, #1
 800343a:	4405      	add	r5, r0
 800343c:	f1b8 0f00 	cmp.w	r8, #0
 8003440:	f43f af6e 	beq.w	8003320 <__gxx_personality_v0+0x24>
 8003444:	2d00      	cmp	r5, #0
 8003446:	f000 80f2 	beq.w	800362e <__gxx_personality_v0+0x332>
 800344a:	f016 0308 	ands.w	r3, r6, #8
 800344e:	9302      	str	r3, [sp, #8]
 8003450:	d034      	beq.n	80034bc <__gxx_personality_v0+0x1c0>
 8003452:	2347      	movs	r3, #71	; 0x47
 8003454:	7023      	strb	r3, [r4, #0]
 8003456:	234e      	movs	r3, #78	; 0x4e
 8003458:	7063      	strb	r3, [r4, #1]
 800345a:	2355      	movs	r3, #85	; 0x55
 800345c:	70a3      	strb	r3, [r4, #2]
 800345e:	2343      	movs	r3, #67	; 0x43
 8003460:	70e3      	strb	r3, [r4, #3]
 8003462:	2346      	movs	r3, #70	; 0x46
 8003464:	7123      	strb	r3, [r4, #4]
 8003466:	234f      	movs	r3, #79	; 0x4f
 8003468:	7163      	strb	r3, [r4, #5]
 800346a:	2352      	movs	r3, #82	; 0x52
 800346c:	71a3      	strb	r3, [r4, #6]
 800346e:	2300      	movs	r3, #0
 8003470:	71e3      	strb	r3, [r4, #7]
 8003472:	f04f 0b00 	mov.w	fp, #0
 8003476:	a907      	add	r1, sp, #28
 8003478:	4628      	mov	r0, r5
 800347a:	f7ff fe70 	bl	800315e <_ZL12read_sleb128PKhPl>
 800347e:	a908      	add	r1, sp, #32
 8003480:	9003      	str	r0, [sp, #12]
 8003482:	f7ff fe6c 	bl	800315e <_ZL12read_sleb128PKhPl>
 8003486:	9907      	ldr	r1, [sp, #28]
 8003488:	2900      	cmp	r1, #0
 800348a:	d063      	beq.n	8003554 <__gxx_personality_v0+0x258>
 800348c:	dd3a      	ble.n	8003504 <__gxx_personality_v0+0x208>
 800348e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8003492:	28ff      	cmp	r0, #255	; 0xff
 8003494:	d032      	beq.n	80034fc <__gxx_personality_v0+0x200>
 8003496:	f000 0307 	and.w	r3, r0, #7
 800349a:	2b04      	cmp	r3, #4
 800349c:	f63f af7a 	bhi.w	8003394 <__gxx_personality_v0+0x98>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <__gxx_personality_v0+0x1ac>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	08003501 	.word	0x08003501
 80034ac:	08003395 	.word	0x08003395
 80034b0:	080034cf 	.word	0x080034cf
 80034b4:	08003501 	.word	0x08003501
 80034b8:	080034f9 	.word	0x080034f9
 80034bc:	79e3      	ldrb	r3, [r4, #7]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	bf0c      	ite	eq
 80034c2:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 80034c6:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 80034ca:	9305      	str	r3, [sp, #20]
 80034cc:	e7d1      	b.n	8003472 <__gxx_personality_v0+0x176>
 80034ce:	2502      	movs	r5, #2
 80034d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80034d2:	ab09      	add	r3, sp, #36	; 0x24
 80034d4:	fb05 2211 	mls	r2, r5, r1, r2
 80034d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80034da:	f7ff fe58 	bl	800318e <_ZL28read_encoded_value_with_basehjPKhPj>
 80034de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80034e0:	b131      	cbz	r1, 80034f0 <__gxx_personality_v0+0x1f4>
 80034e2:	b35c      	cbz	r4, 800353c <__gxx_personality_v0+0x240>
 80034e4:	2200      	movs	r2, #0
 80034e6:	4620      	mov	r0, r4
 80034e8:	ab05      	add	r3, sp, #20
 80034ea:	f7ff fd91 	bl	8003010 <__cxa_type_match>
 80034ee:	b328      	cbz	r0, 800353c <__gxx_personality_v0+0x240>
 80034f0:	f04f 0b03 	mov.w	fp, #3
 80034f4:	9d07      	ldr	r5, [sp, #28]
 80034f6:	e034      	b.n	8003562 <__gxx_personality_v0+0x266>
 80034f8:	2508      	movs	r5, #8
 80034fa:	e7e9      	b.n	80034d0 <__gxx_personality_v0+0x1d4>
 80034fc:	2500      	movs	r5, #0
 80034fe:	e7e7      	b.n	80034d0 <__gxx_personality_v0+0x1d4>
 8003500:	2504      	movs	r5, #4
 8003502:	e7e5      	b.n	80034d0 <__gxx_personality_v0+0x1d4>
 8003504:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 8003508:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 800350c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800350e:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8003512:	313f      	adds	r1, #63	; 0x3f
 8003514:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8003518:	b1bc      	cbz	r4, 800354a <__gxx_personality_v0+0x24e>
 800351a:	9a02      	ldr	r2, [sp, #8]
 800351c:	b9aa      	cbnz	r2, 800354a <__gxx_personality_v0+0x24e>
 800351e:	9b05      	ldr	r3, [sp, #20]
 8003520:	3d04      	subs	r5, #4
 8003522:	9309      	str	r3, [sp, #36]	; 0x24
 8003524:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8003528:	2900      	cmp	r1, #0
 800352a:	d0e1      	beq.n	80034f0 <__gxx_personality_v0+0x1f4>
 800352c:	2200      	movs	r2, #0
 800352e:	4620      	mov	r0, r4
 8003530:	ab09      	add	r3, sp, #36	; 0x24
 8003532:	4429      	add	r1, r5
 8003534:	f7ff fd6c 	bl	8003010 <__cxa_type_match>
 8003538:	2800      	cmp	r0, #0
 800353a:	d0f3      	beq.n	8003524 <__gxx_personality_v0+0x228>
 800353c:	9d08      	ldr	r5, [sp, #32]
 800353e:	2d00      	cmp	r5, #0
 8003540:	d071      	beq.n	8003626 <__gxx_personality_v0+0x32a>
 8003542:	9b03      	ldr	r3, [sp, #12]
 8003544:	442b      	add	r3, r5
 8003546:	461d      	mov	r5, r3
 8003548:	e795      	b.n	8003476 <__gxx_personality_v0+0x17a>
 800354a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f4      	bne.n	800353c <__gxx_personality_v0+0x240>
 8003552:	e7cd      	b.n	80034f0 <__gxx_personality_v0+0x1f4>
 8003554:	f04f 0b01 	mov.w	fp, #1
 8003558:	e7f0      	b.n	800353c <__gxx_personality_v0+0x240>
 800355a:	2500      	movs	r5, #0
 800355c:	f04f 0b01 	mov.w	fp, #1
 8003560:	46a8      	mov	r8, r5
 8003562:	07f3      	lsls	r3, r6, #31
 8003564:	f57f af0a 	bpl.w	800337c <__gxx_personality_v0+0x80>
 8003568:	f1bb 0f02 	cmp.w	fp, #2
 800356c:	f43f aed8 	beq.w	8003320 <__gxx_personality_v0+0x24>
 8003570:	210d      	movs	r1, #13
 8003572:	4638      	mov	r0, r7
 8003574:	9e05      	ldr	r6, [sp, #20]
 8003576:	f7ff feb5 	bl	80032e4 <_Unwind_GetGR>
 800357a:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 800357e:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8003582:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8003586:	2006      	movs	r0, #6
 8003588:	e6d0      	b.n	800332c <__gxx_personality_v0+0x30>
 800358a:	2d00      	cmp	r5, #0
 800358c:	da22      	bge.n	80035d4 <__gxx_personality_v0+0x2d8>
 800358e:	f000 f86f 	bl	8003670 <_ZSt10unexpectedv>
 8003592:	f1bb 0f01 	cmp.w	fp, #1
 8003596:	d102      	bne.n	800359e <__gxx_personality_v0+0x2a2>
 8003598:	4620      	mov	r0, r4
 800359a:	f000 f99c 	bl	80038d6 <__cxa_call_terminate>
 800359e:	2d00      	cmp	r5, #0
 80035a0:	da18      	bge.n	80035d4 <__gxx_personality_v0+0x2d8>
 80035a2:	4652      	mov	r2, sl
 80035a4:	4649      	mov	r1, r9
 80035a6:	4638      	mov	r0, r7
 80035a8:	f7ff fe6b 	bl	8003282 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80035ac:	4639      	mov	r1, r7
 80035ae:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80035b2:	f7ff fe32 	bl	800321a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80035b6:	43eb      	mvns	r3, r5
 80035b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80035ba:	900c      	str	r0, [sp, #48]	; 0x30
 80035bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80035c0:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 80035c4:	b10a      	cbz	r2, 80035ca <__gxx_personality_v0+0x2ce>
 80035c6:	3601      	adds	r6, #1
 80035c8:	e7fa      	b.n	80035c0 <__gxx_personality_v0+0x2c4>
 80035ca:	2204      	movs	r2, #4
 80035cc:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 80035d0:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 80035d4:	2300      	movs	r3, #0
 80035d6:	ae09      	add	r6, sp, #36	; 0x24
 80035d8:	461a      	mov	r2, r3
 80035da:	4619      	mov	r1, r3
 80035dc:	4638      	mov	r0, r7
 80035de:	9600      	str	r6, [sp, #0]
 80035e0:	9409      	str	r4, [sp, #36]	; 0x24
 80035e2:	f7fd f823 	bl	800062c <_Unwind_VRS_Set>
 80035e6:	2300      	movs	r3, #0
 80035e8:	2201      	movs	r2, #1
 80035ea:	4619      	mov	r1, r3
 80035ec:	4638      	mov	r0, r7
 80035ee:	9600      	str	r6, [sp, #0]
 80035f0:	9509      	str	r5, [sp, #36]	; 0x24
 80035f2:	f7fd f81b 	bl	800062c <_Unwind_VRS_Set>
 80035f6:	210f      	movs	r1, #15
 80035f8:	4638      	mov	r0, r7
 80035fa:	f7ff fe73 	bl	80032e4 <_Unwind_GetGR>
 80035fe:	2300      	movs	r3, #0
 8003600:	f000 0001 	and.w	r0, r0, #1
 8003604:	ea40 0008 	orr.w	r0, r0, r8
 8003608:	9009      	str	r0, [sp, #36]	; 0x24
 800360a:	220f      	movs	r2, #15
 800360c:	4619      	mov	r1, r3
 800360e:	4638      	mov	r0, r7
 8003610:	9600      	str	r6, [sp, #0]
 8003612:	f7fd f80b 	bl	800062c <_Unwind_VRS_Set>
 8003616:	f1bb 0f02 	cmp.w	fp, #2
 800361a:	d102      	bne.n	8003622 <__gxx_personality_v0+0x326>
 800361c:	4620      	mov	r0, r4
 800361e:	f7ff fd55 	bl	80030cc <__cxa_begin_cleanup>
 8003622:	2007      	movs	r0, #7
 8003624:	e682      	b.n	800332c <__gxx_personality_v0+0x30>
 8003626:	f1bb 0f00 	cmp.w	fp, #0
 800362a:	f43f ae79 	beq.w	8003320 <__gxx_personality_v0+0x24>
 800362e:	f04f 0b02 	mov.w	fp, #2
 8003632:	e796      	b.n	8003562 <__gxx_personality_v0+0x266>

08003634 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003634:	b508      	push	{r3, lr}
 8003636:	4780      	blx	r0
 8003638:	f000 f9b6 	bl	80039a8 <abort>

0800363c <_ZSt13get_terminatev>:
 800363c:	4b02      	ldr	r3, [pc, #8]	; (8003648 <_ZSt13get_terminatev+0xc>)
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	f3bf 8f5b 	dmb	ish
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000010 	.word	0x20000010

0800364c <_ZSt9terminatev>:
 800364c:	b508      	push	{r3, lr}
 800364e:	f7ff fff5 	bl	800363c <_ZSt13get_terminatev>
 8003652:	f7ff ffef 	bl	8003634 <_ZN10__cxxabiv111__terminateEPFvvE>

08003656 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8003656:	b508      	push	{r3, lr}
 8003658:	4780      	blx	r0
 800365a:	f7ff fff7 	bl	800364c <_ZSt9terminatev>
	...

08003660 <_ZSt14get_unexpectedv>:
 8003660:	4b02      	ldr	r3, [pc, #8]	; (800366c <_ZSt14get_unexpectedv+0xc>)
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	f3bf 8f5b 	dmb	ish
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	2000000c 	.word	0x2000000c

08003670 <_ZSt10unexpectedv>:
 8003670:	b508      	push	{r3, lr}
 8003672:	f7ff fff5 	bl	8003660 <_ZSt14get_unexpectedv>
 8003676:	f7ff ffee 	bl	8003656 <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

0800367c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800367c:	b510      	push	{r4, lr}
 800367e:	4604      	mov	r4, r0
 8003680:	4b02      	ldr	r3, [pc, #8]	; (800368c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8003682:	6003      	str	r3, [r0, #0]
 8003684:	f000 f8b4 	bl	80037f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8003688:	4620      	mov	r0, r4
 800368a:	bd10      	pop	{r4, pc}
 800368c:	08003c68 	.word	0x08003c68

08003690 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8003690:	b510      	push	{r4, lr}
 8003692:	4604      	mov	r4, r0
 8003694:	f7ff fff2 	bl	800367c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8003698:	4620      	mov	r0, r4
 800369a:	210c      	movs	r1, #12
 800369c:	f7ff fc92 	bl	8002fc4 <_ZdlPvj>
 80036a0:	4620      	mov	r0, r4
 80036a2:	bd10      	pop	{r4, pc}

080036a4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80036a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80036ac:	4606      	mov	r6, r0
 80036ae:	4590      	cmp	r8, r2
 80036b0:	460f      	mov	r7, r1
 80036b2:	4615      	mov	r5, r2
 80036b4:	461c      	mov	r4, r3
 80036b6:	d00b      	beq.n	80036d0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80036b8:	68b0      	ldr	r0, [r6, #8]
 80036ba:	462a      	mov	r2, r5
 80036bc:	6803      	ldr	r3, [r0, #0]
 80036be:	f8cd 8018 	str.w	r8, [sp, #24]
 80036c2:	6a1e      	ldr	r6, [r3, #32]
 80036c4:	4639      	mov	r1, r7
 80036c6:	4623      	mov	r3, r4
 80036c8:	46b4      	mov	ip, r6
 80036ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036ce:	4760      	bx	ip
 80036d0:	4619      	mov	r1, r3
 80036d2:	f000 f857 	bl	8003784 <_ZNKSt9type_infoeqERKS_>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d0ee      	beq.n	80036b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80036da:	2006      	movs	r0, #6
 80036dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080036e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80036e0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e4:	460d      	mov	r5, r1
 80036e6:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80036ea:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80036ee:	4619      	mov	r1, r3
 80036f0:	4681      	mov	r9, r0
 80036f2:	4617      	mov	r7, r2
 80036f4:	4698      	mov	r8, r3
 80036f6:	f000 f845 	bl	8003784 <_ZNKSt9type_infoeqERKS_>
 80036fa:	b190      	cbz	r0, 8003722 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80036fc:	2d00      	cmp	r5, #0
 80036fe:	6034      	str	r4, [r6, #0]
 8003700:	7137      	strb	r7, [r6, #4]
 8003702:	db09      	blt.n	8003718 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8003704:	442c      	add	r4, r5
 8003706:	45a2      	cmp	sl, r4
 8003708:	bf0c      	ite	eq
 800370a:	2406      	moveq	r4, #6
 800370c:	2401      	movne	r4, #1
 800370e:	71b4      	strb	r4, [r6, #6]
 8003710:	2000      	movs	r0, #0
 8003712:	b001      	add	sp, #4
 8003714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003718:	3502      	adds	r5, #2
 800371a:	d1f9      	bne.n	8003710 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800371c:	2301      	movs	r3, #1
 800371e:	71b3      	strb	r3, [r6, #6]
 8003720:	e7f6      	b.n	8003710 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8003722:	4554      	cmp	r4, sl
 8003724:	d106      	bne.n	8003734 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8003726:	4659      	mov	r1, fp
 8003728:	4648      	mov	r0, r9
 800372a:	f000 f82b 	bl	8003784 <_ZNKSt9type_infoeqERKS_>
 800372e:	b108      	cbz	r0, 8003734 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8003730:	7177      	strb	r7, [r6, #5]
 8003732:	e7ed      	b.n	8003710 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8003734:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8003738:	463a      	mov	r2, r7
 800373a:	6803      	ldr	r3, [r0, #0]
 800373c:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8003740:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8003744:	69dc      	ldr	r4, [r3, #28]
 8003746:	4629      	mov	r1, r5
 8003748:	4643      	mov	r3, r8
 800374a:	46a4      	mov	ip, r4
 800374c:	b001      	add	sp, #4
 800374e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003752:	4760      	bx	ip

08003754 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8003754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003758:	4607      	mov	r7, r0
 800375a:	460c      	mov	r4, r1
 800375c:	4615      	mov	r5, r2
 800375e:	461e      	mov	r6, r3
 8003760:	f000 f879 	bl	8003856 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8003764:	b948      	cbnz	r0, 800377a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8003766:	68b8      	ldr	r0, [r7, #8]
 8003768:	462a      	mov	r2, r5
 800376a:	6803      	ldr	r3, [r0, #0]
 800376c:	4621      	mov	r1, r4
 800376e:	699f      	ldr	r7, [r3, #24]
 8003770:	4633      	mov	r3, r6
 8003772:	46bc      	mov	ip, r7
 8003774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003778:	4760      	bx	ip
 800377a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800377e <_ZNSt9type_infoD1Ev>:
 800377e:	4770      	bx	lr

08003780 <_ZNKSt9type_info14__is_pointer_pEv>:
 8003780:	2000      	movs	r0, #0
 8003782:	4770      	bx	lr

08003784 <_ZNKSt9type_infoeqERKS_>:
 8003784:	4281      	cmp	r1, r0
 8003786:	b508      	push	{r3, lr}
 8003788:	d00e      	beq.n	80037a8 <_ZNKSt9type_infoeqERKS_+0x24>
 800378a:	6840      	ldr	r0, [r0, #4]
 800378c:	7803      	ldrb	r3, [r0, #0]
 800378e:	2b2a      	cmp	r3, #42	; 0x2a
 8003790:	d00c      	beq.n	80037ac <_ZNKSt9type_infoeqERKS_+0x28>
 8003792:	6849      	ldr	r1, [r1, #4]
 8003794:	780b      	ldrb	r3, [r1, #0]
 8003796:	2b2a      	cmp	r3, #42	; 0x2a
 8003798:	bf08      	it	eq
 800379a:	3101      	addeq	r1, #1
 800379c:	f7fc fd42 	bl	8000224 <strcmp>
 80037a0:	fab0 f080 	clz	r0, r0
 80037a4:	0940      	lsrs	r0, r0, #5
 80037a6:	bd08      	pop	{r3, pc}
 80037a8:	2001      	movs	r0, #1
 80037aa:	e7fc      	b.n	80037a6 <_ZNKSt9type_infoeqERKS_+0x22>
 80037ac:	2000      	movs	r0, #0
 80037ae:	e7fa      	b.n	80037a6 <_ZNKSt9type_infoeqERKS_+0x22>

080037b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80037b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80037b2:	2400      	movs	r4, #0
 80037b4:	2310      	movs	r3, #16
 80037b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80037ba:	6803      	ldr	r3, [r0, #0]
 80037bc:	4615      	mov	r5, r2
 80037be:	699e      	ldr	r6, [r3, #24]
 80037c0:	e9cd 4400 	strd	r4, r4, [sp]
 80037c4:	466b      	mov	r3, sp
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	47b0      	blx	r6
 80037ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80037ce:	f003 0306 	and.w	r3, r3, #6
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	bf09      	itett	eq
 80037d6:	2001      	moveq	r0, #1
 80037d8:	4620      	movne	r0, r4
 80037da:	9b00      	ldreq	r3, [sp, #0]
 80037dc:	602b      	streq	r3, [r5, #0]
 80037de:	b004      	add	sp, #16
 80037e0:	bd70      	pop	{r4, r5, r6, pc}

080037e2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80037e2:	9800      	ldr	r0, [sp, #0]
 80037e4:	4290      	cmp	r0, r2
 80037e6:	bf14      	ite	ne
 80037e8:	2001      	movne	r0, #1
 80037ea:	2006      	moveq	r0, #6
 80037ec:	4770      	bx	lr
	...

080037f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80037f0:	b510      	push	{r4, lr}
 80037f2:	4604      	mov	r4, r0
 80037f4:	4b02      	ldr	r3, [pc, #8]	; (8003800 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80037f6:	6003      	str	r3, [r0, #0]
 80037f8:	f7ff ffc1 	bl	800377e <_ZNSt9type_infoD1Ev>
 80037fc:	4620      	mov	r0, r4
 80037fe:	bd10      	pop	{r4, pc}
 8003800:	08003cdc 	.word	0x08003cdc

08003804 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8003804:	b510      	push	{r4, lr}
 8003806:	4604      	mov	r4, r0
 8003808:	f7ff fff2 	bl	80037f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800380c:	4620      	mov	r0, r4
 800380e:	2108      	movs	r1, #8
 8003810:	f7ff fbd8 	bl	8002fc4 <_ZdlPvj>
 8003814:	4620      	mov	r0, r4
 8003816:	bd10      	pop	{r4, pc}

08003818 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8003818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800381c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003820:	461f      	mov	r7, r3
 8003822:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8003826:	4598      	cmp	r8, r3
 8003828:	4606      	mov	r6, r0
 800382a:	4615      	mov	r5, r2
 800382c:	d107      	bne.n	800383e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800382e:	9907      	ldr	r1, [sp, #28]
 8003830:	f7ff ffa8 	bl	8003784 <_ZNKSt9type_infoeqERKS_>
 8003834:	b118      	cbz	r0, 800383e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8003836:	7165      	strb	r5, [r4, #5]
 8003838:	2000      	movs	r0, #0
 800383a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800383e:	4639      	mov	r1, r7
 8003840:	4630      	mov	r0, r6
 8003842:	f7ff ff9f 	bl	8003784 <_ZNKSt9type_infoeqERKS_>
 8003846:	2800      	cmp	r0, #0
 8003848:	d0f6      	beq.n	8003838 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 800384a:	2301      	movs	r3, #1
 800384c:	f8c4 8000 	str.w	r8, [r4]
 8003850:	7125      	strb	r5, [r4, #4]
 8003852:	71a3      	strb	r3, [r4, #6]
 8003854:	e7f0      	b.n	8003838 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08003856 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8003856:	b538      	push	{r3, r4, r5, lr}
 8003858:	4615      	mov	r5, r2
 800385a:	461c      	mov	r4, r3
 800385c:	f7ff ff92 	bl	8003784 <_ZNKSt9type_infoeqERKS_>
 8003860:	b120      	cbz	r0, 800386c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8003862:	2308      	movs	r3, #8
 8003864:	60e3      	str	r3, [r4, #12]
 8003866:	2306      	movs	r3, #6
 8003868:	6025      	str	r5, [r4, #0]
 800386a:	7123      	strb	r3, [r4, #4]
 800386c:	bd38      	pop	{r3, r4, r5, pc}

0800386e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800386e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003872:	4605      	mov	r5, r0
 8003874:	460c      	mov	r4, r1
 8003876:	4616      	mov	r6, r2
 8003878:	461f      	mov	r7, r3
 800387a:	f7ff ff83 	bl	8003784 <_ZNKSt9type_infoeqERKS_>
 800387e:	b948      	cbnz	r0, 8003894 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8003880:	2f03      	cmp	r7, #3
 8003882:	d807      	bhi.n	8003894 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	4632      	mov	r2, r6
 8003888:	4629      	mov	r1, r5
 800388a:	4620      	mov	r0, r4
 800388c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	4718      	bx	r3
 8003894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003898 <_ZdlPv>:
 8003898:	f000 b8b8 	b.w	8003a0c <free>

0800389c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800389c:	7803      	ldrb	r3, [r0, #0]
 800389e:	2b47      	cmp	r3, #71	; 0x47
 80038a0:	d117      	bne.n	80038d2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80038a2:	7843      	ldrb	r3, [r0, #1]
 80038a4:	2b4e      	cmp	r3, #78	; 0x4e
 80038a6:	d114      	bne.n	80038d2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80038a8:	7883      	ldrb	r3, [r0, #2]
 80038aa:	2b55      	cmp	r3, #85	; 0x55
 80038ac:	d111      	bne.n	80038d2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80038ae:	78c3      	ldrb	r3, [r0, #3]
 80038b0:	2b43      	cmp	r3, #67	; 0x43
 80038b2:	d10e      	bne.n	80038d2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80038b4:	7903      	ldrb	r3, [r0, #4]
 80038b6:	2b43      	cmp	r3, #67	; 0x43
 80038b8:	d10b      	bne.n	80038d2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80038ba:	7943      	ldrb	r3, [r0, #5]
 80038bc:	2b2b      	cmp	r3, #43	; 0x2b
 80038be:	d108      	bne.n	80038d2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80038c0:	7983      	ldrb	r3, [r0, #6]
 80038c2:	2b2b      	cmp	r3, #43	; 0x2b
 80038c4:	d105      	bne.n	80038d2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80038c6:	79c0      	ldrb	r0, [r0, #7]
 80038c8:	2801      	cmp	r0, #1
 80038ca:	bf8c      	ite	hi
 80038cc:	2000      	movhi	r0, #0
 80038ce:	2001      	movls	r0, #1
 80038d0:	4770      	bx	lr
 80038d2:	2000      	movs	r0, #0
 80038d4:	4770      	bx	lr

080038d6 <__cxa_call_terminate>:
 80038d6:	b510      	push	{r4, lr}
 80038d8:	4604      	mov	r4, r0
 80038da:	b148      	cbz	r0, 80038f0 <__cxa_call_terminate+0x1a>
 80038dc:	f000 f83b 	bl	8003956 <__cxa_begin_catch>
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7ff ffdb 	bl	800389c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80038e6:	b118      	cbz	r0, 80038f0 <__cxa_call_terminate+0x1a>
 80038e8:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80038ec:	f7ff fea2 	bl	8003634 <_ZN10__cxxabiv111__terminateEPFvvE>
 80038f0:	f7ff feac 	bl	800364c <_ZSt9terminatev>

080038f4 <__cxa_call_unexpected>:
 80038f4:	b538      	push	{r3, r4, r5, lr}
 80038f6:	4602      	mov	r2, r0
 80038f8:	f7ff ffd0 	bl	800389c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80038fc:	4604      	mov	r4, r0
 80038fe:	b140      	cbz	r0, 8003912 <__cxa_call_unexpected+0x1e>
 8003900:	2500      	movs	r5, #0
 8003902:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8003906:	4610      	mov	r0, r2
 8003908:	f000 f825 	bl	8003956 <__cxa_begin_catch>
 800390c:	b11d      	cbz	r5, 8003916 <__cxa_call_unexpected+0x22>
 800390e:	f7ff feaf 	bl	8003670 <_ZSt10unexpectedv>
 8003912:	2501      	movs	r5, #1
 8003914:	e7f7      	b.n	8003906 <__cxa_call_unexpected+0x12>
 8003916:	4620      	mov	r0, r4
 8003918:	f7ff fe9d 	bl	8003656 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800391c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800391c:	7803      	ldrb	r3, [r0, #0]
 800391e:	2b47      	cmp	r3, #71	; 0x47
 8003920:	d117      	bne.n	8003952 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003922:	7843      	ldrb	r3, [r0, #1]
 8003924:	2b4e      	cmp	r3, #78	; 0x4e
 8003926:	d114      	bne.n	8003952 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003928:	7883      	ldrb	r3, [r0, #2]
 800392a:	2b55      	cmp	r3, #85	; 0x55
 800392c:	d111      	bne.n	8003952 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800392e:	78c3      	ldrb	r3, [r0, #3]
 8003930:	2b43      	cmp	r3, #67	; 0x43
 8003932:	d10e      	bne.n	8003952 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003934:	7903      	ldrb	r3, [r0, #4]
 8003936:	2b43      	cmp	r3, #67	; 0x43
 8003938:	d10b      	bne.n	8003952 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800393a:	7943      	ldrb	r3, [r0, #5]
 800393c:	2b2b      	cmp	r3, #43	; 0x2b
 800393e:	d108      	bne.n	8003952 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003940:	7983      	ldrb	r3, [r0, #6]
 8003942:	2b2b      	cmp	r3, #43	; 0x2b
 8003944:	d105      	bne.n	8003952 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003946:	79c0      	ldrb	r0, [r0, #7]
 8003948:	2801      	cmp	r0, #1
 800394a:	bf8c      	ite	hi
 800394c:	2000      	movhi	r0, #0
 800394e:	2001      	movls	r0, #1
 8003950:	4770      	bx	lr
 8003952:	2000      	movs	r0, #0
 8003954:	4770      	bx	lr

08003956 <__cxa_begin_catch>:
 8003956:	b538      	push	{r3, r4, r5, lr}
 8003958:	4604      	mov	r4, r0
 800395a:	f7ff fbed 	bl	8003138 <__cxa_get_globals>
 800395e:	4602      	mov	r2, r0
 8003960:	6805      	ldr	r5, [r0, #0]
 8003962:	4620      	mov	r0, r4
 8003964:	f1a4 0120 	sub.w	r1, r4, #32
 8003968:	f7ff ffd8 	bl	800391c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800396c:	b928      	cbnz	r0, 800397a <__cxa_begin_catch+0x24>
 800396e:	b10d      	cbz	r5, 8003974 <__cxa_begin_catch+0x1e>
 8003970:	f7ff fe6c 	bl	800364c <_ZSt9terminatev>
 8003974:	6011      	str	r1, [r2, #0]
 8003976:	4628      	mov	r0, r5
 8003978:	bd38      	pop	{r3, r4, r5, pc}
 800397a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800397e:	4620      	mov	r0, r4
 8003980:	2b00      	cmp	r3, #0
 8003982:	bfb4      	ite	lt
 8003984:	f1c3 0301 	rsblt	r3, r3, #1
 8003988:	3301      	addge	r3, #1
 800398a:	f844 3c0c 	str.w	r3, [r4, #-12]
 800398e:	6853      	ldr	r3, [r2, #4]
 8003990:	428d      	cmp	r5, r1
 8003992:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003996:	6053      	str	r3, [r2, #4]
 8003998:	bf1c      	itt	ne
 800399a:	f844 5c10 	strne.w	r5, [r4, #-16]
 800399e:	6011      	strne	r1, [r2, #0]
 80039a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80039a2:	f7fc fe15 	bl	80005d0 <_Unwind_Complete>
 80039a6:	e7e6      	b.n	8003976 <__cxa_begin_catch+0x20>

080039a8 <abort>:
 80039a8:	2006      	movs	r0, #6
 80039aa:	b508      	push	{r3, lr}
 80039ac:	f000 f8ae 	bl	8003b0c <raise>
 80039b0:	2001      	movs	r0, #1
 80039b2:	f7fe f8b7 	bl	8001b24 <_exit>
	...

080039b8 <__errno>:
 80039b8:	4b01      	ldr	r3, [pc, #4]	; (80039c0 <__errno+0x8>)
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000014 	.word	0x20000014

080039c4 <__libc_init_array>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	2600      	movs	r6, #0
 80039c8:	4d0c      	ldr	r5, [pc, #48]	; (80039fc <__libc_init_array+0x38>)
 80039ca:	4c0d      	ldr	r4, [pc, #52]	; (8003a00 <__libc_init_array+0x3c>)
 80039cc:	1b64      	subs	r4, r4, r5
 80039ce:	10a4      	asrs	r4, r4, #2
 80039d0:	42a6      	cmp	r6, r4
 80039d2:	d109      	bne.n	80039e8 <__libc_init_array+0x24>
 80039d4:	f000 f8d8 	bl	8003b88 <_init>
 80039d8:	2600      	movs	r6, #0
 80039da:	4d0a      	ldr	r5, [pc, #40]	; (8003a04 <__libc_init_array+0x40>)
 80039dc:	4c0a      	ldr	r4, [pc, #40]	; (8003a08 <__libc_init_array+0x44>)
 80039de:	1b64      	subs	r4, r4, r5
 80039e0:	10a4      	asrs	r4, r4, #2
 80039e2:	42a6      	cmp	r6, r4
 80039e4:	d105      	bne.n	80039f2 <__libc_init_array+0x2e>
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
 80039e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ec:	4798      	blx	r3
 80039ee:	3601      	adds	r6, #1
 80039f0:	e7ee      	b.n	80039d0 <__libc_init_array+0xc>
 80039f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f6:	4798      	blx	r3
 80039f8:	3601      	adds	r6, #1
 80039fa:	e7f2      	b.n	80039e2 <__libc_init_array+0x1e>
 80039fc:	08003e5c 	.word	0x08003e5c
 8003a00:	08003e5c 	.word	0x08003e5c
 8003a04:	08003e5c 	.word	0x08003e5c
 8003a08:	08003e60 	.word	0x08003e60

08003a0c <free>:
 8003a0c:	4b02      	ldr	r3, [pc, #8]	; (8003a18 <free+0xc>)
 8003a0e:	4601      	mov	r1, r0
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	f000 b80b 	b.w	8003a2c <_free_r>
 8003a16:	bf00      	nop
 8003a18:	20000014 	.word	0x20000014

08003a1c <memset>:
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	4402      	add	r2, r0
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d100      	bne.n	8003a26 <memset+0xa>
 8003a24:	4770      	bx	lr
 8003a26:	f803 1b01 	strb.w	r1, [r3], #1
 8003a2a:	e7f9      	b.n	8003a20 <memset+0x4>

08003a2c <_free_r>:
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	4605      	mov	r5, r0
 8003a30:	2900      	cmp	r1, #0
 8003a32:	d040      	beq.n	8003ab6 <_free_r+0x8a>
 8003a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a38:	1f0c      	subs	r4, r1, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bfb8      	it	lt
 8003a3e:	18e4      	addlt	r4, r4, r3
 8003a40:	f000 f880 	bl	8003b44 <__malloc_lock>
 8003a44:	4a1c      	ldr	r2, [pc, #112]	; (8003ab8 <_free_r+0x8c>)
 8003a46:	6813      	ldr	r3, [r2, #0]
 8003a48:	b933      	cbnz	r3, 8003a58 <_free_r+0x2c>
 8003a4a:	6063      	str	r3, [r4, #4]
 8003a4c:	6014      	str	r4, [r2, #0]
 8003a4e:	4628      	mov	r0, r5
 8003a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a54:	f000 b87c 	b.w	8003b50 <__malloc_unlock>
 8003a58:	42a3      	cmp	r3, r4
 8003a5a:	d908      	bls.n	8003a6e <_free_r+0x42>
 8003a5c:	6820      	ldr	r0, [r4, #0]
 8003a5e:	1821      	adds	r1, r4, r0
 8003a60:	428b      	cmp	r3, r1
 8003a62:	bf01      	itttt	eq
 8003a64:	6819      	ldreq	r1, [r3, #0]
 8003a66:	685b      	ldreq	r3, [r3, #4]
 8003a68:	1809      	addeq	r1, r1, r0
 8003a6a:	6021      	streq	r1, [r4, #0]
 8003a6c:	e7ed      	b.n	8003a4a <_free_r+0x1e>
 8003a6e:	461a      	mov	r2, r3
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	b10b      	cbz	r3, 8003a78 <_free_r+0x4c>
 8003a74:	42a3      	cmp	r3, r4
 8003a76:	d9fa      	bls.n	8003a6e <_free_r+0x42>
 8003a78:	6811      	ldr	r1, [r2, #0]
 8003a7a:	1850      	adds	r0, r2, r1
 8003a7c:	42a0      	cmp	r0, r4
 8003a7e:	d10b      	bne.n	8003a98 <_free_r+0x6c>
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	4401      	add	r1, r0
 8003a84:	1850      	adds	r0, r2, r1
 8003a86:	4283      	cmp	r3, r0
 8003a88:	6011      	str	r1, [r2, #0]
 8003a8a:	d1e0      	bne.n	8003a4e <_free_r+0x22>
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4401      	add	r1, r0
 8003a92:	6011      	str	r1, [r2, #0]
 8003a94:	6053      	str	r3, [r2, #4]
 8003a96:	e7da      	b.n	8003a4e <_free_r+0x22>
 8003a98:	d902      	bls.n	8003aa0 <_free_r+0x74>
 8003a9a:	230c      	movs	r3, #12
 8003a9c:	602b      	str	r3, [r5, #0]
 8003a9e:	e7d6      	b.n	8003a4e <_free_r+0x22>
 8003aa0:	6820      	ldr	r0, [r4, #0]
 8003aa2:	1821      	adds	r1, r4, r0
 8003aa4:	428b      	cmp	r3, r1
 8003aa6:	bf01      	itttt	eq
 8003aa8:	6819      	ldreq	r1, [r3, #0]
 8003aaa:	685b      	ldreq	r3, [r3, #4]
 8003aac:	1809      	addeq	r1, r1, r0
 8003aae:	6021      	streq	r1, [r4, #0]
 8003ab0:	6063      	str	r3, [r4, #4]
 8003ab2:	6054      	str	r4, [r2, #4]
 8003ab4:	e7cb      	b.n	8003a4e <_free_r+0x22>
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
 8003ab8:	20000228 	.word	0x20000228

08003abc <_raise_r>:
 8003abc:	291f      	cmp	r1, #31
 8003abe:	b538      	push	{r3, r4, r5, lr}
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	460d      	mov	r5, r1
 8003ac4:	d904      	bls.n	8003ad0 <_raise_r+0x14>
 8003ac6:	2316      	movs	r3, #22
 8003ac8:	6003      	str	r3, [r0, #0]
 8003aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003ad2:	b112      	cbz	r2, 8003ada <_raise_r+0x1e>
 8003ad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003ad8:	b94b      	cbnz	r3, 8003aee <_raise_r+0x32>
 8003ada:	4620      	mov	r0, r4
 8003adc:	f000 f830 	bl	8003b40 <_getpid_r>
 8003ae0:	462a      	mov	r2, r5
 8003ae2:	4601      	mov	r1, r0
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aea:	f000 b817 	b.w	8003b1c <_kill_r>
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d00a      	beq.n	8003b08 <_raise_r+0x4c>
 8003af2:	1c59      	adds	r1, r3, #1
 8003af4:	d103      	bne.n	8003afe <_raise_r+0x42>
 8003af6:	2316      	movs	r3, #22
 8003af8:	6003      	str	r3, [r0, #0]
 8003afa:	2001      	movs	r0, #1
 8003afc:	e7e7      	b.n	8003ace <_raise_r+0x12>
 8003afe:	2400      	movs	r4, #0
 8003b00:	4628      	mov	r0, r5
 8003b02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003b06:	4798      	blx	r3
 8003b08:	2000      	movs	r0, #0
 8003b0a:	e7e0      	b.n	8003ace <_raise_r+0x12>

08003b0c <raise>:
 8003b0c:	4b02      	ldr	r3, [pc, #8]	; (8003b18 <raise+0xc>)
 8003b0e:	4601      	mov	r1, r0
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	f7ff bfd3 	b.w	8003abc <_raise_r>
 8003b16:	bf00      	nop
 8003b18:	20000014 	.word	0x20000014

08003b1c <_kill_r>:
 8003b1c:	b538      	push	{r3, r4, r5, lr}
 8003b1e:	2300      	movs	r3, #0
 8003b20:	4d06      	ldr	r5, [pc, #24]	; (8003b3c <_kill_r+0x20>)
 8003b22:	4604      	mov	r4, r0
 8003b24:	4608      	mov	r0, r1
 8003b26:	4611      	mov	r1, r2
 8003b28:	602b      	str	r3, [r5, #0]
 8003b2a:	f7fd ffeb 	bl	8001b04 <_kill>
 8003b2e:	1c43      	adds	r3, r0, #1
 8003b30:	d102      	bne.n	8003b38 <_kill_r+0x1c>
 8003b32:	682b      	ldr	r3, [r5, #0]
 8003b34:	b103      	cbz	r3, 8003b38 <_kill_r+0x1c>
 8003b36:	6023      	str	r3, [r4, #0]
 8003b38:	bd38      	pop	{r3, r4, r5, pc}
 8003b3a:	bf00      	nop
 8003b3c:	2000022c 	.word	0x2000022c

08003b40 <_getpid_r>:
 8003b40:	f7fd bfd9 	b.w	8001af6 <_getpid>

08003b44 <__malloc_lock>:
 8003b44:	4801      	ldr	r0, [pc, #4]	; (8003b4c <__malloc_lock+0x8>)
 8003b46:	f000 b809 	b.w	8003b5c <__retarget_lock_acquire_recursive>
 8003b4a:	bf00      	nop
 8003b4c:	20000230 	.word	0x20000230

08003b50 <__malloc_unlock>:
 8003b50:	4801      	ldr	r0, [pc, #4]	; (8003b58 <__malloc_unlock+0x8>)
 8003b52:	f000 b804 	b.w	8003b5e <__retarget_lock_release_recursive>
 8003b56:	bf00      	nop
 8003b58:	20000230 	.word	0x20000230

08003b5c <__retarget_lock_acquire_recursive>:
 8003b5c:	4770      	bx	lr

08003b5e <__retarget_lock_release_recursive>:
 8003b5e:	4770      	bx	lr

08003b60 <_Unwind_GetDataRelBase>:
 8003b60:	b508      	push	{r3, lr}
 8003b62:	f7ff ff21 	bl	80039a8 <abort>

08003b66 <_Unwind_GetTextRelBase>:
 8003b66:	b508      	push	{r3, lr}
 8003b68:	f7ff fffa 	bl	8003b60 <_Unwind_GetDataRelBase>

08003b6c <memcpy>:
 8003b6c:	440a      	add	r2, r1
 8003b6e:	4291      	cmp	r1, r2
 8003b70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003b74:	d100      	bne.n	8003b78 <memcpy+0xc>
 8003b76:	4770      	bx	lr
 8003b78:	b510      	push	{r4, lr}
 8003b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b7e:	4291      	cmp	r1, r2
 8003b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b84:	d1f9      	bne.n	8003b7a <memcpy+0xe>
 8003b86:	bd10      	pop	{r4, pc}

08003b88 <_init>:
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	bf00      	nop
 8003b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8e:	bc08      	pop	{r3}
 8003b90:	469e      	mov	lr, r3
 8003b92:	4770      	bx	lr

08003b94 <_fini>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	bf00      	nop
 8003b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9a:	bc08      	pop	{r3}
 8003b9c:	469e      	mov	lr, r3
 8003b9e:	4770      	bx	lr
