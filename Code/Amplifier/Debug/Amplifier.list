
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d34  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08008f24  08008f24  00018f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000084  08009218  08009218  00019218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000118  0800929c  0800929c  0001929c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093b4  080093b4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080093b4  080093b4  000193b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093bc  080093bc  000193bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080093c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cc8  2000007c  0800943c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d44  0800943c  00021d44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033549  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006931  00000000  00000000  000535ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c70  00000000  00000000  00059f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ac0  00000000  00000000  0005bb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221ee  00000000  00000000  0005d650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024066  00000000  00000000  0007f83e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b72f8  00000000  00000000  000a38a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ab9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009594  00000000  00000000  0015abec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000007c 	.word	0x2000007c
 800020c:	00000000 	.word	0x00000000
 8000210:	08008f0c 	.word	0x08008f0c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000080 	.word	0x20000080
 800022c:	08008f0c 	.word	0x08008f0c

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <selfrel_offset31>:
 8000240:	6803      	ldr	r3, [r0, #0]
 8000242:	005a      	lsls	r2, r3, #1
 8000244:	bf4c      	ite	mi
 8000246:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800024a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800024e:	4418      	add	r0, r3
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop

08000254 <search_EIT_table>:
 8000254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000258:	b339      	cbz	r1, 80002aa <search_EIT_table+0x56>
 800025a:	1e4f      	subs	r7, r1, #1
 800025c:	4604      	mov	r4, r0
 800025e:	4615      	mov	r5, r2
 8000260:	463e      	mov	r6, r7
 8000262:	f04f 0800 	mov.w	r8, #0
 8000266:	eb08 0106 	add.w	r1, r8, r6
 800026a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800026e:	1049      	asrs	r1, r1, #1
 8000270:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000274:	4648      	mov	r0, r9
 8000276:	f7ff ffe3 	bl	8000240 <selfrel_offset31>
 800027a:	4603      	mov	r3, r0
 800027c:	00c8      	lsls	r0, r1, #3
 800027e:	3008      	adds	r0, #8
 8000280:	428f      	cmp	r7, r1
 8000282:	4420      	add	r0, r4
 8000284:	d00b      	beq.n	800029e <search_EIT_table+0x4a>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d80b      	bhi.n	80002a2 <search_EIT_table+0x4e>
 800028a:	f7ff ffd9 	bl	8000240 <selfrel_offset31>
 800028e:	3801      	subs	r0, #1
 8000290:	42a8      	cmp	r0, r5
 8000292:	f101 0801 	add.w	r8, r1, #1
 8000296:	d3e6      	bcc.n	8000266 <search_EIT_table+0x12>
 8000298:	4648      	mov	r0, r9
 800029a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800029e:	42ab      	cmp	r3, r5
 80002a0:	d9fa      	bls.n	8000298 <search_EIT_table+0x44>
 80002a2:	4588      	cmp	r8, r1
 80002a4:	d001      	beq.n	80002aa <search_EIT_table+0x56>
 80002a6:	1e4e      	subs	r6, r1, #1
 80002a8:	e7dd      	b.n	8000266 <search_EIT_table+0x12>
 80002aa:	f04f 0900 	mov.w	r9, #0
 80002ae:	4648      	mov	r0, r9
 80002b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080002b4 <__gnu_unwind_get_pr_addr>:
 80002b4:	2801      	cmp	r0, #1
 80002b6:	d007      	beq.n	80002c8 <__gnu_unwind_get_pr_addr+0x14>
 80002b8:	2802      	cmp	r0, #2
 80002ba:	d007      	beq.n	80002cc <__gnu_unwind_get_pr_addr+0x18>
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <__gnu_unwind_get_pr_addr+0x1c>)
 80002be:	2800      	cmp	r0, #0
 80002c0:	bf0c      	ite	eq
 80002c2:	4618      	moveq	r0, r3
 80002c4:	2000      	movne	r0, #0
 80002c6:	4770      	bx	lr
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <__gnu_unwind_get_pr_addr+0x20>)
 80002ca:	4770      	bx	lr
 80002cc:	4802      	ldr	r0, [pc, #8]	; (80002d8 <__gnu_unwind_get_pr_addr+0x24>)
 80002ce:	4770      	bx	lr
 80002d0:	080009a5 	.word	0x080009a5
 80002d4:	080009a9 	.word	0x080009a9
 80002d8:	080009ad 	.word	0x080009ad

080002dc <get_eit_entry>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	4b24      	ldr	r3, [pc, #144]	; (8000370 <get_eit_entry+0x94>)
 80002e0:	4604      	mov	r4, r0
 80002e2:	b083      	sub	sp, #12
 80002e4:	1e8d      	subs	r5, r1, #2
 80002e6:	b33b      	cbz	r3, 8000338 <get_eit_entry+0x5c>
 80002e8:	4628      	mov	r0, r5
 80002ea:	a901      	add	r1, sp, #4
 80002ec:	f3af 8000 	nop.w
 80002f0:	b1e8      	cbz	r0, 800032e <get_eit_entry+0x52>
 80002f2:	9901      	ldr	r1, [sp, #4]
 80002f4:	462a      	mov	r2, r5
 80002f6:	f7ff ffad 	bl	8000254 <search_EIT_table>
 80002fa:	4601      	mov	r1, r0
 80002fc:	b1b8      	cbz	r0, 800032e <get_eit_entry+0x52>
 80002fe:	f7ff ff9f 	bl	8000240 <selfrel_offset31>
 8000302:	684b      	ldr	r3, [r1, #4]
 8000304:	64a0      	str	r0, [r4, #72]	; 0x48
 8000306:	2b01      	cmp	r3, #1
 8000308:	d02e      	beq.n	8000368 <get_eit_entry+0x8c>
 800030a:	2b00      	cmp	r3, #0
 800030c:	db27      	blt.n	800035e <get_eit_entry+0x82>
 800030e:	1d08      	adds	r0, r1, #4
 8000310:	f7ff ff96 	bl	8000240 <selfrel_offset31>
 8000314:	2300      	movs	r3, #0
 8000316:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800031a:	6803      	ldr	r3, [r0, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	db12      	blt.n	8000346 <get_eit_entry+0x6a>
 8000320:	f7ff ff8e 	bl	8000240 <selfrel_offset31>
 8000324:	4603      	mov	r3, r0
 8000326:	2000      	movs	r0, #0
 8000328:	6123      	str	r3, [r4, #16]
 800032a:	b003      	add	sp, #12
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	2300      	movs	r3, #0
 8000330:	2009      	movs	r0, #9
 8000332:	6123      	str	r3, [r4, #16]
 8000334:	b003      	add	sp, #12
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <get_eit_entry+0x98>)
 800033a:	490f      	ldr	r1, [pc, #60]	; (8000378 <get_eit_entry+0x9c>)
 800033c:	4618      	mov	r0, r3
 800033e:	1ac9      	subs	r1, r1, r3
 8000340:	10c9      	asrs	r1, r1, #3
 8000342:	9101      	str	r1, [sp, #4]
 8000344:	e7d6      	b.n	80002f4 <get_eit_entry+0x18>
 8000346:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800034a:	f7ff ffb3 	bl	80002b4 <__gnu_unwind_get_pr_addr>
 800034e:	2800      	cmp	r0, #0
 8000350:	4603      	mov	r3, r0
 8000352:	bf14      	ite	ne
 8000354:	2000      	movne	r0, #0
 8000356:	2009      	moveq	r0, #9
 8000358:	6123      	str	r3, [r4, #16]
 800035a:	b003      	add	sp, #12
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	2301      	movs	r3, #1
 8000360:	1d08      	adds	r0, r1, #4
 8000362:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000366:	e7d8      	b.n	800031a <get_eit_entry+0x3e>
 8000368:	2300      	movs	r3, #0
 800036a:	2005      	movs	r0, #5
 800036c:	6123      	str	r3, [r4, #16]
 800036e:	e7dc      	b.n	800032a <get_eit_entry+0x4e>
 8000370:	00000000 	.word	0x00000000
 8000374:	0800929c 	.word	0x0800929c
 8000378:	080093b4 	.word	0x080093b4

0800037c <restore_non_core_regs>:
 800037c:	6803      	ldr	r3, [r0, #0]
 800037e:	b510      	push	{r4, lr}
 8000380:	07da      	lsls	r2, r3, #31
 8000382:	4604      	mov	r4, r0
 8000384:	d406      	bmi.n	8000394 <restore_non_core_regs+0x18>
 8000386:	079b      	lsls	r3, r3, #30
 8000388:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800038c:	d509      	bpl.n	80003a2 <restore_non_core_regs+0x26>
 800038e:	f000 fc5d 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000392:	6823      	ldr	r3, [r4, #0]
 8000394:	0759      	lsls	r1, r3, #29
 8000396:	d509      	bpl.n	80003ac <restore_non_core_regs+0x30>
 8000398:	071a      	lsls	r2, r3, #28
 800039a:	d50e      	bpl.n	80003ba <restore_non_core_regs+0x3e>
 800039c:	06db      	lsls	r3, r3, #27
 800039e:	d513      	bpl.n	80003c8 <restore_non_core_regs+0x4c>
 80003a0:	bd10      	pop	{r4, pc}
 80003a2:	f000 fc4b 	bl	8000c3c <__gnu_Unwind_Restore_VFP>
 80003a6:	6823      	ldr	r3, [r4, #0]
 80003a8:	0759      	lsls	r1, r3, #29
 80003aa:	d4f5      	bmi.n	8000398 <restore_non_core_regs+0x1c>
 80003ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80003b0:	f000 fc54 	bl	8000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80003b4:	6823      	ldr	r3, [r4, #0]
 80003b6:	071a      	lsls	r2, r3, #28
 80003b8:	d4f0      	bmi.n	800039c <restore_non_core_regs+0x20>
 80003ba:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80003be:	f000 fc55 	bl	8000c6c <__gnu_Unwind_Restore_WMMXD>
 80003c2:	6823      	ldr	r3, [r4, #0]
 80003c4:	06db      	lsls	r3, r3, #27
 80003c6:	d4eb      	bmi.n	80003a0 <restore_non_core_regs+0x24>
 80003c8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80003cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003d0:	f000 bc90 	b.w	8000cf4 <__gnu_Unwind_Restore_WMMXC>

080003d4 <__gnu_unwind_24bit.constprop.0>:
 80003d4:	2009      	movs	r0, #9
 80003d6:	4770      	bx	lr

080003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80003d8:	4603      	mov	r3, r0
 80003da:	6800      	ldr	r0, [r0, #0]
 80003dc:	b100      	cbz	r0, 80003e0 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80003de:	4418      	add	r0, r3
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop

080003e4 <_Unwind_DebugHook>:
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop

080003e8 <unwind_phase2>:
 80003e8:	b570      	push	{r4, r5, r6, lr}
 80003ea:	4604      	mov	r4, r0
 80003ec:	460e      	mov	r6, r1
 80003ee:	4620      	mov	r0, r4
 80003f0:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80003f2:	f7ff ff73 	bl	80002dc <get_eit_entry>
 80003f6:	4605      	mov	r5, r0
 80003f8:	b998      	cbnz	r0, 8000422 <unwind_phase2+0x3a>
 80003fa:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 80003fe:	4632      	mov	r2, r6
 8000400:	4621      	mov	r1, r4
 8000402:	2001      	movs	r0, #1
 8000404:	6923      	ldr	r3, [r4, #16]
 8000406:	f8c4 c014 	str.w	ip, [r4, #20]
 800040a:	4798      	blx	r3
 800040c:	2808      	cmp	r0, #8
 800040e:	d0ee      	beq.n	80003ee <unwind_phase2+0x6>
 8000410:	2807      	cmp	r0, #7
 8000412:	d106      	bne.n	8000422 <unwind_phase2+0x3a>
 8000414:	4628      	mov	r0, r5
 8000416:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000418:	f7ff ffe4 	bl	80003e4 <_Unwind_DebugHook>
 800041c:	1d30      	adds	r0, r6, #4
 800041e:	f000 fc01 	bl	8000c24 <__restore_core_regs>
 8000422:	f008 fb66 	bl	8008af2 <abort>
 8000426:	bf00      	nop

08000428 <unwind_phase2_forced>:
 8000428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800042c:	f04f 0a00 	mov.w	sl, #0
 8000430:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000434:	f10d 0e0c 	add.w	lr, sp, #12
 8000438:	f101 0c04 	add.w	ip, r1, #4
 800043c:	68c7      	ldr	r7, [r0, #12]
 800043e:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000442:	4606      	mov	r6, r0
 8000444:	4614      	mov	r4, r2
 8000446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800044a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800044e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000452:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000456:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800045a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800045e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000462:	ad02      	add	r5, sp, #8
 8000464:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000468:	f8c5 a000 	str.w	sl, [r5]
 800046c:	e021      	b.n	80004b2 <unwind_phase2_forced+0x8a>
 800046e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000470:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000474:	4629      	mov	r1, r5
 8000476:	6173      	str	r3, [r6, #20]
 8000478:	a87a      	add	r0, sp, #488	; 0x1e8
 800047a:	f008 fb8b 	bl	8008b94 <memcpy>
 800047e:	4631      	mov	r1, r6
 8000480:	4650      	mov	r0, sl
 8000482:	6933      	ldr	r3, [r6, #16]
 8000484:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000486:	4798      	blx	r3
 8000488:	9c88      	ldr	r4, [sp, #544]	; 0x220
 800048a:	4682      	mov	sl, r0
 800048c:	646c      	str	r4, [r5, #68]	; 0x44
 800048e:	4633      	mov	r3, r6
 8000490:	4632      	mov	r2, r6
 8000492:	4649      	mov	r1, r9
 8000494:	2001      	movs	r0, #1
 8000496:	e9cd 5800 	strd	r5, r8, [sp]
 800049a:	47b8      	blx	r7
 800049c:	4604      	mov	r4, r0
 800049e:	b9f0      	cbnz	r0, 80004de <unwind_phase2_forced+0xb6>
 80004a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80004a4:	4628      	mov	r0, r5
 80004a6:	a97a      	add	r1, sp, #488	; 0x1e8
 80004a8:	f008 fb74 	bl	8008b94 <memcpy>
 80004ac:	f1ba 0f08 	cmp.w	sl, #8
 80004b0:	d11b      	bne.n	80004ea <unwind_phase2_forced+0xc2>
 80004b2:	4630      	mov	r0, r6
 80004b4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004b6:	f7ff ff11 	bl	80002dc <get_eit_entry>
 80004ba:	f104 0909 	add.w	r9, r4, #9
 80004be:	fa5f fa89 	uxtb.w	sl, r9
 80004c2:	4604      	mov	r4, r0
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d0d2      	beq.n	800046e <unwind_phase2_forced+0x46>
 80004c8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80004ca:	4633      	mov	r3, r6
 80004cc:	6469      	str	r1, [r5, #68]	; 0x44
 80004ce:	4632      	mov	r2, r6
 80004d0:	2001      	movs	r0, #1
 80004d2:	e9cd 5800 	strd	r5, r8, [sp]
 80004d6:	f04a 0110 	orr.w	r1, sl, #16
 80004da:	47b8      	blx	r7
 80004dc:	b100      	cbz	r0, 80004e0 <unwind_phase2_forced+0xb8>
 80004de:	2409      	movs	r4, #9
 80004e0:	4620      	mov	r0, r4
 80004e2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1ba 0f07 	cmp.w	sl, #7
 80004ee:	d1f6      	bne.n	80004de <unwind_phase2_forced+0xb6>
 80004f0:	4620      	mov	r0, r4
 80004f2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004f4:	f7ff ff76 	bl	80003e4 <_Unwind_DebugHook>
 80004f8:	a803      	add	r0, sp, #12
 80004fa:	f000 fb93 	bl	8000c24 <__restore_core_regs>
 80004fe:	bf00      	nop

08000500 <_Unwind_GetCFA>:
 8000500:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000502:	4770      	bx	lr

08000504 <__gnu_Unwind_RaiseException>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800050a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800050c:	b0f9      	sub	sp, #484	; 0x1e4
 800050e:	640b      	str	r3, [r1, #64]	; 0x40
 8000510:	ac01      	add	r4, sp, #4
 8000512:	f101 0c04 	add.w	ip, r1, #4
 8000516:	460e      	mov	r6, r1
 8000518:	4605      	mov	r5, r0
 800051a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000534:	9700      	str	r7, [sp, #0]
 8000536:	e006      	b.n	8000546 <__gnu_Unwind_RaiseException+0x42>
 8000538:	466a      	mov	r2, sp
 800053a:	4629      	mov	r1, r5
 800053c:	692b      	ldr	r3, [r5, #16]
 800053e:	4798      	blx	r3
 8000540:	2808      	cmp	r0, #8
 8000542:	4604      	mov	r4, r0
 8000544:	d108      	bne.n	8000558 <__gnu_Unwind_RaiseException+0x54>
 8000546:	4628      	mov	r0, r5
 8000548:	9910      	ldr	r1, [sp, #64]	; 0x40
 800054a:	f7ff fec7 	bl	80002dc <get_eit_entry>
 800054e:	2800      	cmp	r0, #0
 8000550:	d0f2      	beq.n	8000538 <__gnu_Unwind_RaiseException+0x34>
 8000552:	2009      	movs	r0, #9
 8000554:	b079      	add	sp, #484	; 0x1e4
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000558:	4668      	mov	r0, sp
 800055a:	f7ff ff0f 	bl	800037c <restore_non_core_regs>
 800055e:	2c06      	cmp	r4, #6
 8000560:	d1f7      	bne.n	8000552 <__gnu_Unwind_RaiseException+0x4e>
 8000562:	4631      	mov	r1, r6
 8000564:	4628      	mov	r0, r5
 8000566:	f7ff ff3f 	bl	80003e8 <unwind_phase2>
 800056a:	bf00      	nop

0800056c <__gnu_Unwind_ForcedUnwind>:
 800056c:	b410      	push	{r4}
 800056e:	4614      	mov	r4, r2
 8000570:	6184      	str	r4, [r0, #24]
 8000572:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000574:	60c1      	str	r1, [r0, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	641c      	str	r4, [r3, #64]	; 0x40
 800057a:	4619      	mov	r1, r3
 800057c:	bc10      	pop	{r4}
 800057e:	e753      	b.n	8000428 <unwind_phase2_forced>

08000580 <__gnu_Unwind_Resume>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	6943      	ldr	r3, [r0, #20]
 8000584:	68c6      	ldr	r6, [r0, #12]
 8000586:	640b      	str	r3, [r1, #64]	; 0x40
 8000588:	b9ae      	cbnz	r6, 80005b6 <__gnu_Unwind_Resume+0x36>
 800058a:	460a      	mov	r2, r1
 800058c:	6903      	ldr	r3, [r0, #16]
 800058e:	4604      	mov	r4, r0
 8000590:	460d      	mov	r5, r1
 8000592:	4601      	mov	r1, r0
 8000594:	2002      	movs	r0, #2
 8000596:	4798      	blx	r3
 8000598:	2807      	cmp	r0, #7
 800059a:	d005      	beq.n	80005a8 <__gnu_Unwind_Resume+0x28>
 800059c:	2808      	cmp	r0, #8
 800059e:	d10f      	bne.n	80005c0 <__gnu_Unwind_Resume+0x40>
 80005a0:	4629      	mov	r1, r5
 80005a2:	4620      	mov	r0, r4
 80005a4:	f7ff ff20 	bl	80003e8 <unwind_phase2>
 80005a8:	4630      	mov	r0, r6
 80005aa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80005ac:	f7ff ff1a 	bl	80003e4 <_Unwind_DebugHook>
 80005b0:	1d28      	adds	r0, r5, #4
 80005b2:	f000 fb37 	bl	8000c24 <__restore_core_regs>
 80005b6:	2201      	movs	r2, #1
 80005b8:	f7ff ff36 	bl	8000428 <unwind_phase2_forced>
 80005bc:	f008 fa99 	bl	8008af2 <abort>
 80005c0:	f008 fa97 	bl	8008af2 <abort>

080005c4 <__gnu_Unwind_Resume_or_Rethrow>:
 80005c4:	68c2      	ldr	r2, [r0, #12]
 80005c6:	b12a      	cbz	r2, 80005d4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80005c8:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 80005cc:	2200      	movs	r2, #0
 80005ce:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 80005d2:	e729      	b.n	8000428 <unwind_phase2_forced>
 80005d4:	e796      	b.n	8000504 <__gnu_Unwind_RaiseException>
 80005d6:	bf00      	nop

080005d8 <_Unwind_Complete>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_Unwind_DeleteException>:
 80005dc:	6883      	ldr	r3, [r0, #8]
 80005de:	4601      	mov	r1, r0
 80005e0:	b10b      	cbz	r3, 80005e6 <_Unwind_DeleteException+0xa>
 80005e2:	2001      	movs	r0, #1
 80005e4:	4718      	bx	r3
 80005e6:	4770      	bx	lr

080005e8 <_Unwind_VRS_Get>:
 80005e8:	2901      	cmp	r1, #1
 80005ea:	d012      	beq.n	8000612 <_Unwind_VRS_Get+0x2a>
 80005ec:	d809      	bhi.n	8000602 <_Unwind_VRS_Get+0x1a>
 80005ee:	b973      	cbnz	r3, 800060e <_Unwind_VRS_Get+0x26>
 80005f0:	2a0f      	cmp	r2, #15
 80005f2:	d80c      	bhi.n	800060e <_Unwind_VRS_Get+0x26>
 80005f4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005f8:	6842      	ldr	r2, [r0, #4]
 80005fa:	4618      	mov	r0, r3
 80005fc:	9b00      	ldr	r3, [sp, #0]
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	4770      	bx	lr
 8000602:	3903      	subs	r1, #3
 8000604:	2901      	cmp	r1, #1
 8000606:	bf94      	ite	ls
 8000608:	2001      	movls	r0, #1
 800060a:	2002      	movhi	r0, #2
 800060c:	4770      	bx	lr
 800060e:	2002      	movs	r0, #2
 8000610:	4770      	bx	lr
 8000612:	4608      	mov	r0, r1
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <_Unwind_GetGR>:
 8000618:	2300      	movs	r3, #0
 800061a:	b500      	push	{lr}
 800061c:	b085      	sub	sp, #20
 800061e:	460a      	mov	r2, r1
 8000620:	a903      	add	r1, sp, #12
 8000622:	9100      	str	r1, [sp, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	f7ff ffdf 	bl	80005e8 <_Unwind_VRS_Get>
 800062a:	9803      	ldr	r0, [sp, #12]
 800062c:	b005      	add	sp, #20
 800062e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000632:	bf00      	nop

08000634 <_Unwind_VRS_Set>:
 8000634:	2901      	cmp	r1, #1
 8000636:	d012      	beq.n	800065e <_Unwind_VRS_Set+0x2a>
 8000638:	d809      	bhi.n	800064e <_Unwind_VRS_Set+0x1a>
 800063a:	b973      	cbnz	r3, 800065a <_Unwind_VRS_Set+0x26>
 800063c:	2a0f      	cmp	r2, #15
 800063e:	d80c      	bhi.n	800065a <_Unwind_VRS_Set+0x26>
 8000640:	9900      	ldr	r1, [sp, #0]
 8000642:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000646:	6809      	ldr	r1, [r1, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	6051      	str	r1, [r2, #4]
 800064c:	4770      	bx	lr
 800064e:	3903      	subs	r1, #3
 8000650:	2901      	cmp	r1, #1
 8000652:	bf94      	ite	ls
 8000654:	2001      	movls	r0, #1
 8000656:	2002      	movhi	r0, #2
 8000658:	4770      	bx	lr
 800065a:	2002      	movs	r0, #2
 800065c:	4770      	bx	lr
 800065e:	4608      	mov	r0, r1
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop

08000664 <_Unwind_SetGR>:
 8000664:	2300      	movs	r3, #0
 8000666:	b510      	push	{r4, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	ac03      	add	r4, sp, #12
 800066c:	9203      	str	r2, [sp, #12]
 800066e:	9400      	str	r4, [sp, #0]
 8000670:	460a      	mov	r2, r1
 8000672:	4619      	mov	r1, r3
 8000674:	f7ff ffde 	bl	8000634 <_Unwind_VRS_Set>
 8000678:	b004      	add	sp, #16
 800067a:	bd10      	pop	{r4, pc}

0800067c <__gnu_Unwind_Backtrace>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000682:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000684:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000688:	6413      	str	r3, [r2, #64]	; 0x40
 800068a:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 800068e:	f102 0c04 	add.w	ip, r2, #4
 8000692:	4605      	mov	r5, r0
 8000694:	460c      	mov	r4, r1
 8000696:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800069a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800069e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006ae:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80006b2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80006b6:	9616      	str	r6, [sp, #88]	; 0x58
 80006b8:	e012      	b.n	80006e0 <__gnu_Unwind_Backtrace+0x64>
 80006ba:	210c      	movs	r1, #12
 80006bc:	a816      	add	r0, sp, #88	; 0x58
 80006be:	466a      	mov	r2, sp
 80006c0:	f7ff ffd0 	bl	8000664 <_Unwind_SetGR>
 80006c4:	4621      	mov	r1, r4
 80006c6:	a816      	add	r0, sp, #88	; 0x58
 80006c8:	47a8      	blx	r5
 80006ca:	b978      	cbnz	r0, 80006ec <__gnu_Unwind_Backtrace+0x70>
 80006cc:	4669      	mov	r1, sp
 80006ce:	2008      	movs	r0, #8
 80006d0:	9b04      	ldr	r3, [sp, #16]
 80006d2:	aa16      	add	r2, sp, #88	; 0x58
 80006d4:	4798      	blx	r3
 80006d6:	2805      	cmp	r0, #5
 80006d8:	4606      	mov	r6, r0
 80006da:	d008      	beq.n	80006ee <__gnu_Unwind_Backtrace+0x72>
 80006dc:	2809      	cmp	r0, #9
 80006de:	d005      	beq.n	80006ec <__gnu_Unwind_Backtrace+0x70>
 80006e0:	4668      	mov	r0, sp
 80006e2:	9926      	ldr	r1, [sp, #152]	; 0x98
 80006e4:	f7ff fdfa 	bl	80002dc <get_eit_entry>
 80006e8:	2800      	cmp	r0, #0
 80006ea:	d0e6      	beq.n	80006ba <__gnu_Unwind_Backtrace+0x3e>
 80006ec:	2609      	movs	r6, #9
 80006ee:	a816      	add	r0, sp, #88	; 0x58
 80006f0:	f7ff fe44 	bl	800037c <restore_non_core_regs>
 80006f4:	4630      	mov	r0, r6
 80006f6:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80006fa:	bd70      	pop	{r4, r5, r6, pc}

080006fc <__gnu_unwind_pr_common>:
 80006fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000700:	461e      	mov	r6, r3
 8000702:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000704:	b089      	sub	sp, #36	; 0x24
 8000706:	f854 3b04 	ldr.w	r3, [r4], #4
 800070a:	460d      	mov	r5, r1
 800070c:	4617      	mov	r7, r2
 800070e:	f000 0803 	and.w	r8, r0, #3
 8000712:	9406      	str	r4, [sp, #24]
 8000714:	2e00      	cmp	r6, #0
 8000716:	d079      	beq.n	800080c <__gnu_unwind_pr_common+0x110>
 8000718:	2202      	movs	r2, #2
 800071a:	f88d 201c 	strb.w	r2, [sp, #28]
 800071e:	0c1a      	lsrs	r2, r3, #16
 8000720:	f88d 201d 	strb.w	r2, [sp, #29]
 8000724:	041b      	lsls	r3, r3, #16
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	9305      	str	r3, [sp, #20]
 800072a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800072e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000730:	f1b8 0f02 	cmp.w	r8, #2
 8000734:	bf08      	it	eq
 8000736:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000738:	f013 0301 	ands.w	r3, r3, #1
 800073c:	d00c      	beq.n	8000758 <__gnu_unwind_pr_common+0x5c>
 800073e:	4638      	mov	r0, r7
 8000740:	a905      	add	r1, sp, #20
 8000742:	f000 fb71 	bl	8000e28 <__gnu_unwind_execute>
 8000746:	b918      	cbnz	r0, 8000750 <__gnu_unwind_pr_common+0x54>
 8000748:	2008      	movs	r0, #8
 800074a:	b009      	add	sp, #36	; 0x24
 800074c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000750:	2009      	movs	r0, #9
 8000752:	b009      	add	sp, #36	; 0x24
 8000754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000758:	f8d4 a000 	ldr.w	sl, [r4]
 800075c:	f1ba 0f00 	cmp.w	sl, #0
 8000760:	d0ed      	beq.n	800073e <__gnu_unwind_pr_common+0x42>
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	f000 0308 	and.w	r3, r0, #8
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	2e02      	cmp	r6, #2
 800076c:	d04a      	beq.n	8000804 <__gnu_unwind_pr_common+0x108>
 800076e:	f8b4 a000 	ldrh.w	sl, [r4]
 8000772:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000776:	3404      	adds	r4, #4
 8000778:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800077a:	210f      	movs	r1, #15
 800077c:	4638      	mov	r0, r7
 800077e:	f029 0b01 	bic.w	fp, r9, #1
 8000782:	4493      	add	fp, r2
 8000784:	f7ff ff48 	bl	8000618 <_Unwind_GetGR>
 8000788:	4583      	cmp	fp, r0
 800078a:	d839      	bhi.n	8000800 <__gnu_unwind_pr_common+0x104>
 800078c:	f02a 0201 	bic.w	r2, sl, #1
 8000790:	445a      	add	r2, fp
 8000792:	4282      	cmp	r2, r0
 8000794:	bf94      	ite	ls
 8000796:	2000      	movls	r0, #0
 8000798:	2001      	movhi	r0, #1
 800079a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	f00a 0a01 	and.w	sl, sl, #1
 80007a6:	ea43 030a 	orr.w	r3, r3, sl
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d049      	beq.n	8000842 <__gnu_unwind_pr_common+0x146>
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d032      	beq.n	8000818 <__gnu_unwind_pr_common+0x11c>
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1cc      	bne.n	8000750 <__gnu_unwind_pr_common+0x54>
 80007b6:	f1b8 0f00 	cmp.w	r8, #0
 80007ba:	d002      	beq.n	80007c2 <__gnu_unwind_pr_common+0xc6>
 80007bc:	2800      	cmp	r0, #0
 80007be:	f040 80ce 	bne.w	800095e <__gnu_unwind_pr_common+0x262>
 80007c2:	3404      	adds	r4, #4
 80007c4:	f8d4 a000 	ldr.w	sl, [r4]
 80007c8:	f1ba 0f00 	cmp.w	sl, #0
 80007cc:	d1cd      	bne.n	800076a <__gnu_unwind_pr_common+0x6e>
 80007ce:	4638      	mov	r0, r7
 80007d0:	a905      	add	r1, sp, #20
 80007d2:	f000 fb29 	bl	8000e28 <__gnu_unwind_execute>
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d1ba      	bne.n	8000750 <__gnu_unwind_pr_common+0x54>
 80007da:	9b01      	ldr	r3, [sp, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0b3      	beq.n	8000748 <__gnu_unwind_pr_common+0x4c>
 80007e0:	210f      	movs	r1, #15
 80007e2:	4638      	mov	r0, r7
 80007e4:	f7ff ff18 	bl	8000618 <_Unwind_GetGR>
 80007e8:	210e      	movs	r1, #14
 80007ea:	4602      	mov	r2, r0
 80007ec:	4638      	mov	r0, r7
 80007ee:	f7ff ff39 	bl	8000664 <_Unwind_SetGR>
 80007f2:	4638      	mov	r0, r7
 80007f4:	210f      	movs	r1, #15
 80007f6:	4a6a      	ldr	r2, [pc, #424]	; (80009a0 <__gnu_unwind_pr_common+0x2a4>)
 80007f8:	f7ff ff34 	bl	8000664 <_Unwind_SetGR>
 80007fc:	2007      	movs	r0, #7
 80007fe:	e7a8      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000800:	2000      	movs	r0, #0
 8000802:	e7ca      	b.n	800079a <__gnu_unwind_pr_common+0x9e>
 8000804:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000808:	3408      	adds	r4, #8
 800080a:	e7b5      	b.n	8000778 <__gnu_unwind_pr_common+0x7c>
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	9305      	str	r3, [sp, #20]
 8000810:	2303      	movs	r3, #3
 8000812:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000816:	e78a      	b.n	800072e <__gnu_unwind_pr_common+0x32>
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800081e:	f1b8 0f00 	cmp.w	r8, #0
 8000822:	d145      	bne.n	80008b0 <__gnu_unwind_pr_common+0x1b4>
 8000824:	b128      	cbz	r0, 8000832 <__gnu_unwind_pr_common+0x136>
 8000826:	9a02      	ldr	r2, [sp, #8]
 8000828:	2a00      	cmp	r2, #0
 800082a:	d05c      	beq.n	80008e6 <__gnu_unwind_pr_common+0x1ea>
 800082c:	f1bb 0f00 	cmp.w	fp, #0
 8000830:	d074      	beq.n	800091c <__gnu_unwind_pr_common+0x220>
 8000832:	2b00      	cmp	r3, #0
 8000834:	da00      	bge.n	8000838 <__gnu_unwind_pr_common+0x13c>
 8000836:	3404      	adds	r4, #4
 8000838:	f10b 0b01 	add.w	fp, fp, #1
 800083c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000840:	e7c0      	b.n	80007c4 <__gnu_unwind_pr_common+0xc8>
 8000842:	f1b8 0f00 	cmp.w	r8, #0
 8000846:	d119      	bne.n	800087c <__gnu_unwind_pr_common+0x180>
 8000848:	b1b0      	cbz	r0, 8000878 <__gnu_unwind_pr_common+0x17c>
 800084a:	6863      	ldr	r3, [r4, #4]
 800084c:	6822      	ldr	r2, [r4, #0]
 800084e:	1c99      	adds	r1, r3, #2
 8000850:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000854:	f43f af7c 	beq.w	8000750 <__gnu_unwind_pr_common+0x54>
 8000858:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800085c:	3301      	adds	r3, #1
 800085e:	9104      	str	r1, [sp, #16]
 8000860:	f000 8091 	beq.w	8000986 <__gnu_unwind_pr_common+0x28a>
 8000864:	1d20      	adds	r0, r4, #4
 8000866:	f7ff fdb7 	bl	80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800086a:	ab04      	add	r3, sp, #16
 800086c:	4601      	mov	r1, r0
 800086e:	4628      	mov	r0, r5
 8000870:	f3af 8000 	nop.w
 8000874:	2800      	cmp	r0, #0
 8000876:	d15c      	bne.n	8000932 <__gnu_unwind_pr_common+0x236>
 8000878:	3408      	adds	r4, #8
 800087a:	e7a3      	b.n	80007c4 <__gnu_unwind_pr_common+0xc8>
 800087c:	210d      	movs	r1, #13
 800087e:	4638      	mov	r0, r7
 8000880:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000884:	f7ff fec8 	bl	8000618 <_Unwind_GetGR>
 8000888:	4581      	cmp	r9, r0
 800088a:	d1f5      	bne.n	8000878 <__gnu_unwind_pr_common+0x17c>
 800088c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800088e:	429c      	cmp	r4, r3
 8000890:	d1f2      	bne.n	8000878 <__gnu_unwind_pr_common+0x17c>
 8000892:	4620      	mov	r0, r4
 8000894:	f7ff fcd4 	bl	8000240 <selfrel_offset31>
 8000898:	210f      	movs	r1, #15
 800089a:	4602      	mov	r2, r0
 800089c:	4638      	mov	r0, r7
 800089e:	f7ff fee1 	bl	8000664 <_Unwind_SetGR>
 80008a2:	4638      	mov	r0, r7
 80008a4:	462a      	mov	r2, r5
 80008a6:	2100      	movs	r1, #0
 80008a8:	f7ff fedc 	bl	8000664 <_Unwind_SetGR>
 80008ac:	2007      	movs	r0, #7
 80008ae:	e750      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 80008b0:	210d      	movs	r1, #13
 80008b2:	4638      	mov	r0, r7
 80008b4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80008b8:	f7ff feae 	bl	8000618 <_Unwind_GetGR>
 80008bc:	4581      	cmp	r9, r0
 80008be:	d001      	beq.n	80008c4 <__gnu_unwind_pr_common+0x1c8>
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	e7b6      	b.n	8000832 <__gnu_unwind_pr_common+0x136>
 80008c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008c6:	429c      	cmp	r4, r3
 80008c8:	d1fa      	bne.n	80008c0 <__gnu_unwind_pr_common+0x1c4>
 80008ca:	2304      	movs	r3, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80008d2:	18e3      	adds	r3, r4, r3
 80008d4:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80008d8:	636b      	str	r3, [r5, #52]	; 0x34
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db5a      	blt.n	8000996 <__gnu_unwind_pr_common+0x29a>
 80008e0:	2301      	movs	r3, #1
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	e7a8      	b.n	8000838 <__gnu_unwind_pr_common+0x13c>
 80008e6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80008ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80008ee:	4691      	mov	r9, r2
 80008f0:	46b0      	mov	r8, r6
 80008f2:	f104 0a04 	add.w	sl, r4, #4
 80008f6:	461e      	mov	r6, r3
 80008f8:	e00e      	b.n	8000918 <__gnu_unwind_pr_common+0x21c>
 80008fa:	4650      	mov	r0, sl
 80008fc:	9604      	str	r6, [sp, #16]
 80008fe:	f7ff fd6b 	bl	80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000902:	2200      	movs	r2, #0
 8000904:	4601      	mov	r1, r0
 8000906:	ab04      	add	r3, sp, #16
 8000908:	4628      	mov	r0, r5
 800090a:	f109 0901 	add.w	r9, r9, #1
 800090e:	f10a 0a04 	add.w	sl, sl, #4
 8000912:	f3af 8000 	nop.w
 8000916:	b9e8      	cbnz	r0, 8000954 <__gnu_unwind_pr_common+0x258>
 8000918:	45d9      	cmp	r9, fp
 800091a:	d1ee      	bne.n	80008fa <__gnu_unwind_pr_common+0x1fe>
 800091c:	210d      	movs	r1, #13
 800091e:	4638      	mov	r0, r7
 8000920:	f7ff fe7a 	bl	8000618 <_Unwind_GetGR>
 8000924:	4603      	mov	r3, r0
 8000926:	9a04      	ldr	r2, [sp, #16]
 8000928:	2006      	movs	r0, #6
 800092a:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 800092e:	622b      	str	r3, [r5, #32]
 8000930:	e70f      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000932:	4681      	mov	r9, r0
 8000934:	210d      	movs	r1, #13
 8000936:	4638      	mov	r0, r7
 8000938:	f7ff fe6e 	bl	8000618 <_Unwind_GetGR>
 800093c:	f1b9 0f02 	cmp.w	r9, #2
 8000940:	6228      	str	r0, [r5, #32]
 8000942:	d125      	bne.n	8000990 <__gnu_unwind_pr_common+0x294>
 8000944:	462b      	mov	r3, r5
 8000946:	9a04      	ldr	r2, [sp, #16]
 8000948:	f843 2f2c 	str.w	r2, [r3, #44]!
 800094c:	626b      	str	r3, [r5, #36]	; 0x24
 800094e:	2006      	movs	r0, #6
 8000950:	62ac      	str	r4, [r5, #40]	; 0x28
 8000952:	e6fe      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000954:	4646      	mov	r6, r8
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800095c:	e769      	b.n	8000832 <__gnu_unwind_pr_common+0x136>
 800095e:	4620      	mov	r0, r4
 8000960:	f7ff fc6e 	bl	8000240 <selfrel_offset31>
 8000964:	4602      	mov	r2, r0
 8000966:	3404      	adds	r4, #4
 8000968:	63ac      	str	r4, [r5, #56]	; 0x38
 800096a:	4628      	mov	r0, r5
 800096c:	4614      	mov	r4, r2
 800096e:	f3af 8000 	nop.w
 8000972:	2800      	cmp	r0, #0
 8000974:	f43f aeec 	beq.w	8000750 <__gnu_unwind_pr_common+0x54>
 8000978:	4638      	mov	r0, r7
 800097a:	4622      	mov	r2, r4
 800097c:	210f      	movs	r1, #15
 800097e:	f7ff fe71 	bl	8000664 <_Unwind_SetGR>
 8000982:	2007      	movs	r0, #7
 8000984:	e6e5      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000986:	210d      	movs	r1, #13
 8000988:	4638      	mov	r0, r7
 800098a:	f7ff fe45 	bl	8000618 <_Unwind_GetGR>
 800098e:	6228      	str	r0, [r5, #32]
 8000990:	9b04      	ldr	r3, [sp, #16]
 8000992:	626b      	str	r3, [r5, #36]	; 0x24
 8000994:	e7db      	b.n	800094e <__gnu_unwind_pr_common+0x252>
 8000996:	f10b 0001 	add.w	r0, fp, #1
 800099a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800099e:	e779      	b.n	8000894 <__gnu_unwind_pr_common+0x198>
 80009a0:	00000000 	.word	0x00000000

080009a4 <__aeabi_unwind_cpp_pr0>:
 80009a4:	2300      	movs	r3, #0
 80009a6:	e6a9      	b.n	80006fc <__gnu_unwind_pr_common>

080009a8 <__aeabi_unwind_cpp_pr1>:
 80009a8:	2301      	movs	r3, #1
 80009aa:	e6a7      	b.n	80006fc <__gnu_unwind_pr_common>

080009ac <__aeabi_unwind_cpp_pr2>:
 80009ac:	2302      	movs	r3, #2
 80009ae:	e6a5      	b.n	80006fc <__gnu_unwind_pr_common>

080009b0 <_Unwind_VRS_Pop>:
 80009b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009b4:	4606      	mov	r6, r0
 80009b6:	4615      	mov	r5, r2
 80009b8:	461c      	mov	r4, r3
 80009ba:	b0c3      	sub	sp, #268	; 0x10c
 80009bc:	2904      	cmp	r1, #4
 80009be:	f200 80b8 	bhi.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009c2:	e8df f001 	tbb	[pc, r1]
 80009c6:	569c      	.short	0x569c
 80009c8:	2db6      	.short	0x2db6
 80009ca:	03          	.byte	0x03
 80009cb:	00          	.byte	0x00
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	f040 80b0 	bne.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009d2:	2a10      	cmp	r2, #16
 80009d4:	f200 80ad 	bhi.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009d8:	6803      	ldr	r3, [r0, #0]
 80009da:	06d8      	lsls	r0, r3, #27
 80009dc:	f100 80f1 	bmi.w	8000bc2 <_Unwind_VRS_Pop+0x212>
 80009e0:	af20      	add	r7, sp, #128	; 0x80
 80009e2:	4638      	mov	r0, r7
 80009e4:	f000 f990 	bl	8000d08 <__gnu_Unwind_Save_WMMXC>
 80009e8:	2401      	movs	r4, #1
 80009ea:	4638      	mov	r0, r7
 80009ec:	2300      	movs	r3, #0
 80009ee:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80009f0:	fa04 f203 	lsl.w	r2, r4, r3
 80009f4:	422a      	tst	r2, r5
 80009f6:	f103 0301 	add.w	r3, r3, #1
 80009fa:	d005      	beq.n	8000a08 <_Unwind_VRS_Pop+0x58>
 80009fc:	460a      	mov	r2, r1
 80009fe:	f852 cb04 	ldr.w	ip, [r2], #4
 8000a02:	4611      	mov	r1, r2
 8000a04:	f8c0 c000 	str.w	ip, [r0]
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	f100 0004 	add.w	r0, r0, #4
 8000a0e:	d1ef      	bne.n	80009f0 <_Unwind_VRS_Pop+0x40>
 8000a10:	4638      	mov	r0, r7
 8000a12:	63b1      	str	r1, [r6, #56]	; 0x38
 8000a14:	f000 f96e 	bl	8000cf4 <__gnu_Unwind_Restore_WMMXC>
 8000a18:	2000      	movs	r0, #0
 8000a1a:	b043      	add	sp, #268	; 0x10c
 8000a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a20:	2c03      	cmp	r4, #3
 8000a22:	f040 8086 	bne.w	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a26:	b294      	uxth	r4, r2
 8000a28:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000a2c:	2b10      	cmp	r3, #16
 8000a2e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000a32:	d87e      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a34:	6803      	ldr	r3, [r0, #0]
 8000a36:	071f      	lsls	r7, r3, #28
 8000a38:	f100 80cb 	bmi.w	8000bd2 <_Unwind_VRS_Pop+0x222>
 8000a3c:	af20      	add	r7, sp, #128	; 0x80
 8000a3e:	4638      	mov	r0, r7
 8000a40:	f000 f936 	bl	8000cb0 <__gnu_Unwind_Save_WMMXD>
 8000a44:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000a46:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000a4a:	b154      	cbz	r4, 8000a62 <_Unwind_VRS_Pop+0xb2>
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000a52:	1ad0      	subs	r0, r2, r3
 8000a54:	00e4      	lsls	r4, r4, #3
 8000a56:	581d      	ldr	r5, [r3, r0]
 8000a58:	f843 5b04 	str.w	r5, [r3], #4
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d1fa      	bne.n	8000a56 <_Unwind_VRS_Pop+0xa6>
 8000a60:	4422      	add	r2, r4
 8000a62:	4638      	mov	r0, r7
 8000a64:	63b2      	str	r2, [r6, #56]	; 0x38
 8000a66:	f000 f901 	bl	8000c6c <__gnu_Unwind_Restore_WMMXD>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	b043      	add	sp, #268	; 0x10c
 8000a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a72:	2c01      	cmp	r4, #1
 8000a74:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000a78:	b295      	uxth	r5, r2
 8000a7a:	d056      	beq.n	8000b2a <_Unwind_VRS_Pop+0x17a>
 8000a7c:	2c05      	cmp	r4, #5
 8000a7e:	d158      	bne.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a80:	eb08 0905 	add.w	r9, r8, r5
 8000a84:	f1b9 0f20 	cmp.w	r9, #32
 8000a88:	d853      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a8a:	f1b8 0f0f 	cmp.w	r8, #15
 8000a8e:	d973      	bls.n	8000b78 <_Unwind_VRS_Pop+0x1c8>
 8000a90:	46a9      	mov	r9, r5
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f040 8084 	bne.w	8000ba0 <_Unwind_VRS_Pop+0x1f0>
 8000a98:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a9a:	b365      	cbz	r5, 8000af6 <_Unwind_VRS_Pop+0x146>
 8000a9c:	af20      	add	r7, sp, #128	; 0x80
 8000a9e:	f04f 0900 	mov.w	r9, #0
 8000aa2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000aa6:	3f04      	subs	r7, #4
 8000aa8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000aac:	f853 1b04 	ldr.w	r1, [r3], #4
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	f847 1f04 	str.w	r1, [r7, #4]!
 8000ab6:	d1f9      	bne.n	8000aac <_Unwind_VRS_Pop+0xfc>
 8000ab8:	f1b9 0f00 	cmp.w	r9, #0
 8000abc:	d00f      	beq.n	8000ade <_Unwind_VRS_Pop+0x12e>
 8000abe:	466f      	mov	r7, sp
 8000ac0:	4641      	mov	r1, r8
 8000ac2:	2910      	cmp	r1, #16
 8000ac4:	bf38      	it	cc
 8000ac6:	2110      	movcc	r1, #16
 8000ac8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000acc:	3984      	subs	r1, #132	; 0x84
 8000ace:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000ad2:	f853 0b04 	ldr.w	r0, [r3], #4
 8000ad6:	42ab      	cmp	r3, r5
 8000ad8:	f841 0f04 	str.w	r0, [r1, #4]!
 8000adc:	d1f9      	bne.n	8000ad2 <_Unwind_VRS_Pop+0x122>
 8000ade:	2c01      	cmp	r4, #1
 8000ae0:	d07f      	beq.n	8000be2 <_Unwind_VRS_Pop+0x232>
 8000ae2:	f1b8 0f0f 	cmp.w	r8, #15
 8000ae6:	63b5      	str	r5, [r6, #56]	; 0x38
 8000ae8:	d942      	bls.n	8000b70 <_Unwind_VRS_Pop+0x1c0>
 8000aea:	f1b9 0f00 	cmp.w	r9, #0
 8000aee:	d002      	beq.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000af0:	4668      	mov	r0, sp
 8000af2:	f000 f8b3 	bl	8000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000af6:	2000      	movs	r0, #0
 8000af8:	b043      	add	sp, #268	; 0x10c
 8000afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000afe:	b9c4      	cbnz	r4, 8000b32 <_Unwind_VRS_Pop+0x182>
 8000b00:	4623      	mov	r3, r4
 8000b02:	2401      	movs	r4, #1
 8000b04:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000b06:	1d37      	adds	r7, r6, #4
 8000b08:	b2a8      	uxth	r0, r5
 8000b0a:	fa04 f103 	lsl.w	r1, r4, r3
 8000b0e:	4201      	tst	r1, r0
 8000b10:	bf1c      	itt	ne
 8000b12:	f852 1b04 	ldrne.w	r1, [r2], #4
 8000b16:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	2b10      	cmp	r3, #16
 8000b1e:	d1f4      	bne.n	8000b0a <_Unwind_VRS_Pop+0x15a>
 8000b20:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000b24:	d1e7      	bne.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000b26:	63b2      	str	r2, [r6, #56]	; 0x38
 8000b28:	e004      	b.n	8000b34 <_Unwind_VRS_Pop+0x184>
 8000b2a:	eb08 0305 	add.w	r3, r8, r5
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d903      	bls.n	8000b3a <_Unwind_VRS_Pop+0x18a>
 8000b32:	2002      	movs	r0, #2
 8000b34:	b043      	add	sp, #268	; 0x10c
 8000b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b3a:	f1b8 0f0f 	cmp.w	r8, #15
 8000b3e:	d8f8      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000b40:	6833      	ldr	r3, [r6, #0]
 8000b42:	07da      	lsls	r2, r3, #31
 8000b44:	d506      	bpl.n	8000b54 <_Unwind_VRS_Pop+0x1a4>
 8000b46:	4630      	mov	r0, r6
 8000b48:	f023 0303 	bic.w	r3, r3, #3
 8000b4c:	f840 3b48 	str.w	r3, [r0], #72
 8000b50:	f000 f878 	bl	8000c44 <__gnu_Unwind_Save_VFP>
 8000b54:	af20      	add	r7, sp, #128	; 0x80
 8000b56:	4638      	mov	r0, r7
 8000b58:	f000 f874 	bl	8000c44 <__gnu_Unwind_Save_VFP>
 8000b5c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d19d      	bne.n	8000a9e <_Unwind_VRS_Pop+0xee>
 8000b62:	461d      	mov	r5, r3
 8000b64:	3504      	adds	r5, #4
 8000b66:	4638      	mov	r0, r7
 8000b68:	63b5      	str	r5, [r6, #56]	; 0x38
 8000b6a:	f000 f867 	bl	8000c3c <__gnu_Unwind_Restore_VFP>
 8000b6e:	e7c2      	b.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000b70:	a820      	add	r0, sp, #128	; 0x80
 8000b72:	f000 f86b 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000b76:	e7b8      	b.n	8000aea <_Unwind_VRS_Pop+0x13a>
 8000b78:	f1b9 0f10 	cmp.w	r9, #16
 8000b7c:	d93f      	bls.n	8000bfe <_Unwind_VRS_Pop+0x24e>
 8000b7e:	f1a9 0910 	sub.w	r9, r9, #16
 8000b82:	6833      	ldr	r3, [r6, #0]
 8000b84:	07d9      	lsls	r1, r3, #31
 8000b86:	d508      	bpl.n	8000b9a <_Unwind_VRS_Pop+0x1ea>
 8000b88:	4630      	mov	r0, r6
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f840 3b48 	str.w	r3, [r0], #72
 8000b96:	f000 f85d 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000b9a:	f1b9 0f00 	cmp.w	r9, #0
 8000b9e:	d031      	beq.n	8000c04 <_Unwind_VRS_Pop+0x254>
 8000ba0:	6833      	ldr	r3, [r6, #0]
 8000ba2:	075a      	lsls	r2, r3, #29
 8000ba4:	d41f      	bmi.n	8000be6 <_Unwind_VRS_Pop+0x236>
 8000ba6:	f1b8 0f0f 	cmp.w	r8, #15
 8000baa:	d924      	bls.n	8000bf6 <_Unwind_VRS_Pop+0x246>
 8000bac:	466f      	mov	r7, sp
 8000bae:	f1c8 0510 	rsb	r5, r8, #16
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	f000 f856 	bl	8000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000bbc:	dd80      	ble.n	8000ac0 <_Unwind_VRS_Pop+0x110>
 8000bbe:	af20      	add	r7, sp, #128	; 0x80
 8000bc0:	e76f      	b.n	8000aa2 <_Unwind_VRS_Pop+0xf2>
 8000bc2:	f023 0310 	bic.w	r3, r3, #16
 8000bc6:	6033      	str	r3, [r6, #0]
 8000bc8:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000bcc:	f000 f89c 	bl	8000d08 <__gnu_Unwind_Save_WMMXC>
 8000bd0:	e706      	b.n	80009e0 <_Unwind_VRS_Pop+0x30>
 8000bd2:	f023 0308 	bic.w	r3, r3, #8
 8000bd6:	6003      	str	r3, [r0, #0]
 8000bd8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000bdc:	f000 f868 	bl	8000cb0 <__gnu_Unwind_Save_WMMXD>
 8000be0:	e72c      	b.n	8000a3c <_Unwind_VRS_Pop+0x8c>
 8000be2:	af20      	add	r7, sp, #128	; 0x80
 8000be4:	e7be      	b.n	8000b64 <_Unwind_VRS_Pop+0x1b4>
 8000be6:	4630      	mov	r0, r6
 8000be8:	f023 0304 	bic.w	r3, r3, #4
 8000bec:	f840 3bd0 	str.w	r3, [r0], #208
 8000bf0:	f000 f838 	bl	8000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bf4:	e7d7      	b.n	8000ba6 <_Unwind_VRS_Pop+0x1f6>
 8000bf6:	a820      	add	r0, sp, #128	; 0x80
 8000bf8:	f000 f82c 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000bfc:	e7d6      	b.n	8000bac <_Unwind_VRS_Pop+0x1fc>
 8000bfe:	f04f 0900 	mov.w	r9, #0
 8000c02:	e7be      	b.n	8000b82 <_Unwind_VRS_Pop+0x1d2>
 8000c04:	f1b8 0f0f 	cmp.w	r8, #15
 8000c08:	f63f af46 	bhi.w	8000a98 <_Unwind_VRS_Pop+0xe8>
 8000c0c:	af20      	add	r7, sp, #128	; 0x80
 8000c0e:	4638      	mov	r0, r7
 8000c10:	f000 f820 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000c14:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	f47f af41 	bne.w	8000a9e <_Unwind_VRS_Pop+0xee>
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	f000 f815 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000c22:	e768      	b.n	8000af6 <_Unwind_VRS_Pop+0x146>

08000c24 <__restore_core_regs>:
 8000c24:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000c28:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000c2c:	469c      	mov	ip, r3
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000c34:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000c38:	46e5      	mov	sp, ip
 8000c3a:	bd00      	pop	{pc}

08000c3c <__gnu_Unwind_Restore_VFP>:
 8000c3c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <__gnu_Unwind_Save_VFP>:
 8000c44:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__gnu_Unwind_Restore_VFP_D>:
 8000c4c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__gnu_Unwind_Save_VFP_D>:
 8000c54:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000c5c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000c64:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__gnu_Unwind_Restore_WMMXD>:
 8000c6c:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c70:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c74:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c78:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c7c:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c80:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c84:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c88:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c8c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c90:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c94:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c98:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c9c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000ca0:	ecf0 d102 	ldfp	f5, [r0], #8
 8000ca4:	ecf0 e102 	ldfp	f6, [r0], #8
 8000ca8:	ecf0 f102 	ldfp	f7, [r0], #8
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__gnu_Unwind_Save_WMMXD>:
 8000cb0:	ece0 0102 	stfe	f0, [r0], #8
 8000cb4:	ece0 1102 	stfe	f1, [r0], #8
 8000cb8:	ece0 2102 	stfe	f2, [r0], #8
 8000cbc:	ece0 3102 	stfe	f3, [r0], #8
 8000cc0:	ece0 4102 	stfe	f4, [r0], #8
 8000cc4:	ece0 5102 	stfe	f5, [r0], #8
 8000cc8:	ece0 6102 	stfe	f6, [r0], #8
 8000ccc:	ece0 7102 	stfe	f7, [r0], #8
 8000cd0:	ece0 8102 	stfp	f0, [r0], #8
 8000cd4:	ece0 9102 	stfp	f1, [r0], #8
 8000cd8:	ece0 a102 	stfp	f2, [r0], #8
 8000cdc:	ece0 b102 	stfp	f3, [r0], #8
 8000ce0:	ece0 c102 	stfp	f4, [r0], #8
 8000ce4:	ece0 d102 	stfp	f5, [r0], #8
 8000ce8:	ece0 e102 	stfp	f6, [r0], #8
 8000cec:	ece0 f102 	stfp	f7, [r0], #8
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <__gnu_Unwind_Restore_WMMXC>:
 8000cf4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000cf8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000cfc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000d00:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__gnu_Unwind_Save_WMMXC>:
 8000d08:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000d0c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000d10:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000d14:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <_Unwind_RaiseException>:
 8000d1c:	46ec      	mov	ip, sp
 8000d1e:	b500      	push	{lr}
 8000d20:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d24:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d30:	a901      	add	r1, sp, #4
 8000d32:	f7ff fbe7 	bl	8000504 <__gnu_Unwind_RaiseException>
 8000d36:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d3a:	b012      	add	sp, #72	; 0x48
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <_Unwind_Resume>:
 8000d40:	46ec      	mov	ip, sp
 8000d42:	b500      	push	{lr}
 8000d44:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d48:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d54:	a901      	add	r1, sp, #4
 8000d56:	f7ff fc13 	bl	8000580 <__gnu_Unwind_Resume>
 8000d5a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d5e:	b012      	add	sp, #72	; 0x48
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <_Unwind_Resume_or_Rethrow>:
 8000d64:	46ec      	mov	ip, sp
 8000d66:	b500      	push	{lr}
 8000d68:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d6c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d78:	a901      	add	r1, sp, #4
 8000d7a:	f7ff fc23 	bl	80005c4 <__gnu_Unwind_Resume_or_Rethrow>
 8000d7e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d82:	b012      	add	sp, #72	; 0x48
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <_Unwind_ForcedUnwind>:
 8000d88:	46ec      	mov	ip, sp
 8000d8a:	b500      	push	{lr}
 8000d8c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d90:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d9c:	ab01      	add	r3, sp, #4
 8000d9e:	f7ff fbe5 	bl	800056c <__gnu_Unwind_ForcedUnwind>
 8000da2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000da6:	b012      	add	sp, #72	; 0x48
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <_Unwind_Backtrace>:
 8000dac:	46ec      	mov	ip, sp
 8000dae:	b500      	push	{lr}
 8000db0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000db4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000dc0:	aa01      	add	r2, sp, #4
 8000dc2:	f7ff fc5b 	bl	800067c <__gnu_Unwind_Backtrace>
 8000dc6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000dca:	b012      	add	sp, #72	; 0x48
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <next_unwind_byte>:
 8000dd0:	7a02      	ldrb	r2, [r0, #8]
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b97a      	cbnz	r2, 8000df6 <next_unwind_byte+0x26>
 8000dd6:	7a42      	ldrb	r2, [r0, #9]
 8000dd8:	b1a2      	cbz	r2, 8000e04 <next_unwind_byte+0x34>
 8000dda:	f04f 0c03 	mov.w	ip, #3
 8000dde:	6841      	ldr	r1, [r0, #4]
 8000de0:	3a01      	subs	r2, #1
 8000de2:	7242      	strb	r2, [r0, #9]
 8000de4:	6808      	ldr	r0, [r1, #0]
 8000de6:	1d0a      	adds	r2, r1, #4
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	0202      	lsls	r2, r0, #8
 8000dec:	f883 c008 	strb.w	ip, [r3, #8]
 8000df0:	0e00      	lsrs	r0, r0, #24
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	4770      	bx	lr
 8000df6:	6800      	ldr	r0, [r0, #0]
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	721a      	strb	r2, [r3, #8]
 8000dfc:	0202      	lsls	r2, r0, #8
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	0e00      	lsrs	r0, r0, #24
 8000e02:	4770      	bx	lr
 8000e04:	20b0      	movs	r0, #176	; 0xb0
 8000e06:	4770      	bx	lr

08000e08 <_Unwind_GetGR.constprop.0>:
 8000e08:	2300      	movs	r3, #0
 8000e0a:	b500      	push	{lr}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	a903      	add	r1, sp, #12
 8000e10:	9100      	str	r1, [sp, #0]
 8000e12:	220c      	movs	r2, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	f7ff fbe7 	bl	80005e8 <_Unwind_VRS_Get>
 8000e1a:	9803      	ldr	r0, [sp, #12]
 8000e1c:	b005      	add	sp, #20
 8000e1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e22:	bf00      	nop

08000e24 <unwind_UCB_from_context>:
 8000e24:	e7f0      	b.n	8000e08 <_Unwind_GetGR.constprop.0>
 8000e26:	bf00      	nop

08000e28 <__gnu_unwind_execute>:
 8000e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e2c:	f04f 0800 	mov.w	r8, #0
 8000e30:	4605      	mov	r5, r0
 8000e32:	460e      	mov	r6, r1
 8000e34:	b085      	sub	sp, #20
 8000e36:	4630      	mov	r0, r6
 8000e38:	f7ff ffca 	bl	8000dd0 <next_unwind_byte>
 8000e3c:	28b0      	cmp	r0, #176	; 0xb0
 8000e3e:	4604      	mov	r4, r0
 8000e40:	f000 80ba 	beq.w	8000fb8 <__gnu_unwind_execute+0x190>
 8000e44:	0607      	lsls	r7, r0, #24
 8000e46:	d520      	bpl.n	8000e8a <__gnu_unwind_execute+0x62>
 8000e48:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000e4c:	2b80      	cmp	r3, #128	; 0x80
 8000e4e:	d04d      	beq.n	8000eec <__gnu_unwind_execute+0xc4>
 8000e50:	2b90      	cmp	r3, #144	; 0x90
 8000e52:	d036      	beq.n	8000ec2 <__gnu_unwind_execute+0x9a>
 8000e54:	2ba0      	cmp	r3, #160	; 0xa0
 8000e56:	d060      	beq.n	8000f1a <__gnu_unwind_execute+0xf2>
 8000e58:	2bb0      	cmp	r3, #176	; 0xb0
 8000e5a:	d073      	beq.n	8000f44 <__gnu_unwind_execute+0x11c>
 8000e5c:	2bc0      	cmp	r3, #192	; 0xc0
 8000e5e:	f000 808a 	beq.w	8000f76 <__gnu_unwind_execute+0x14e>
 8000e62:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e66:	2bd0      	cmp	r3, #208	; 0xd0
 8000e68:	d10b      	bne.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000e6a:	f000 0207 	and.w	r2, r0, #7
 8000e6e:	3201      	adds	r2, #1
 8000e70:	2305      	movs	r3, #5
 8000e72:	2101      	movs	r1, #1
 8000e74:	4628      	mov	r0, r5
 8000e76:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e7a:	f7ff fd99 	bl	80009b0 <_Unwind_VRS_Pop>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d0d9      	beq.n	8000e36 <__gnu_unwind_execute+0xe>
 8000e82:	2009      	movs	r0, #9
 8000e84:	b005      	add	sp, #20
 8000e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e8a:	0083      	lsls	r3, r0, #2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	1d1f      	adds	r7, r3, #4
 8000e90:	2300      	movs	r3, #0
 8000e92:	f10d 090c 	add.w	r9, sp, #12
 8000e96:	4619      	mov	r1, r3
 8000e98:	220d      	movs	r2, #13
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f8cd 9000 	str.w	r9, [sp]
 8000ea0:	f7ff fba2 	bl	80005e8 <_Unwind_VRS_Get>
 8000ea4:	9b03      	ldr	r3, [sp, #12]
 8000ea6:	0660      	lsls	r0, r4, #25
 8000ea8:	bf4c      	ite	mi
 8000eaa:	1bdf      	submi	r7, r3, r7
 8000eac:	18ff      	addpl	r7, r7, r3
 8000eae:	2300      	movs	r3, #0
 8000eb0:	220d      	movs	r2, #13
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f8cd 9000 	str.w	r9, [sp]
 8000eba:	9703      	str	r7, [sp, #12]
 8000ebc:	f7ff fbba 	bl	8000634 <_Unwind_VRS_Set>
 8000ec0:	e7b9      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000ec2:	f000 030d 	and.w	r3, r0, #13
 8000ec6:	2b0d      	cmp	r3, #13
 8000ec8:	d0db      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	af03      	add	r7, sp, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f000 020f 	and.w	r2, r0, #15
 8000ed4:	9700      	str	r7, [sp, #0]
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	f7ff fb86 	bl	80005e8 <_Unwind_VRS_Get>
 8000edc:	2300      	movs	r3, #0
 8000ede:	220d      	movs	r2, #13
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	9700      	str	r7, [sp, #0]
 8000ee6:	f7ff fba5 	bl	8000634 <_Unwind_VRS_Set>
 8000eea:	e7a4      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000eec:	4630      	mov	r0, r6
 8000eee:	f7ff ff6f 	bl	8000dd0 <next_unwind_byte>
 8000ef2:	0224      	lsls	r4, r4, #8
 8000ef4:	4320      	orrs	r0, r4
 8000ef6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000efa:	d0c2      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000efc:	2300      	movs	r3, #0
 8000efe:	0104      	lsls	r4, r0, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4628      	mov	r0, r5
 8000f04:	b2a2      	uxth	r2, r4
 8000f06:	f7ff fd53 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d1b9      	bne.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f0e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000f12:	bf18      	it	ne
 8000f14:	f04f 0801 	movne.w	r8, #1
 8000f18:	e78d      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000f1a:	43c3      	mvns	r3, r0
 8000f1c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	411a      	asrs	r2, r3
 8000f26:	2300      	movs	r3, #0
 8000f28:	0701      	lsls	r1, r0, #28
 8000f2a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000f2e:	bf48      	it	mi
 8000f30:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000f34:	4628      	mov	r0, r5
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fd3a 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	f43f af7a 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000f42:	e79e      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f44:	28b1      	cmp	r0, #177	; 0xb1
 8000f46:	d03c      	beq.n	8000fc2 <__gnu_unwind_execute+0x19a>
 8000f48:	28b2      	cmp	r0, #178	; 0xb2
 8000f4a:	f000 80b0 	beq.w	80010ae <__gnu_unwind_execute+0x286>
 8000f4e:	28b3      	cmp	r0, #179	; 0xb3
 8000f50:	d04a      	beq.n	8000fe8 <__gnu_unwind_execute+0x1c0>
 8000f52:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000f56:	2bb4      	cmp	r3, #180	; 0xb4
 8000f58:	d093      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f000 0207 	and.w	r2, r0, #7
 8000f60:	441a      	add	r2, r3
 8000f62:	4628      	mov	r0, r5
 8000f64:	4619      	mov	r1, r3
 8000f66:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f6a:	f7ff fd21 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	f43f af61 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000f74:	e785      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f76:	28c6      	cmp	r0, #198	; 0xc6
 8000f78:	d04f      	beq.n	800101a <__gnu_unwind_execute+0x1f2>
 8000f7a:	28c7      	cmp	r0, #199	; 0xc7
 8000f7c:	d061      	beq.n	8001042 <__gnu_unwind_execute+0x21a>
 8000f7e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f82:	2bc0      	cmp	r3, #192	; 0xc0
 8000f84:	d070      	beq.n	8001068 <__gnu_unwind_execute+0x240>
 8000f86:	28c8      	cmp	r0, #200	; 0xc8
 8000f88:	d07c      	beq.n	8001084 <__gnu_unwind_execute+0x25c>
 8000f8a:	28c9      	cmp	r0, #201	; 0xc9
 8000f8c:	f47f af79 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000f90:	4630      	mov	r0, r6
 8000f92:	f7ff ff1d 	bl	8000dd0 <next_unwind_byte>
 8000f96:	2305      	movs	r3, #5
 8000f98:	4602      	mov	r2, r0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	0314      	lsls	r4, r2, #12
 8000fa0:	f002 020f 	and.w	r2, r2, #15
 8000fa4:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000fa8:	440a      	add	r2, r1
 8000faa:	4322      	orrs	r2, r4
 8000fac:	f7ff fd00 	bl	80009b0 <_Unwind_VRS_Pop>
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	f43f af40 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000fb6:	e764      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000fb8:	f1b8 0f00 	cmp.w	r8, #0
 8000fbc:	d01c      	beq.n	8000ff8 <__gnu_unwind_execute+0x1d0>
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	e760      	b.n	8000e84 <__gnu_unwind_execute+0x5c>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	f7ff ff04 	bl	8000dd0 <next_unwind_byte>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	f43f af59 	beq.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000fd0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fd4:	f47f af55 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f7ff fce8 	bl	80009b0 <_Unwind_VRS_Pop>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	f43f af28 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000fe6:	e74c      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f7ff fef1 	bl	8000dd0 <next_unwind_byte>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	e7d2      	b.n	8000f9e <__gnu_unwind_execute+0x176>
 8000ff8:	ac03      	add	r4, sp, #12
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	220e      	movs	r2, #14
 8000ffe:	4641      	mov	r1, r8
 8001000:	4628      	mov	r0, r5
 8001002:	9400      	str	r4, [sp, #0]
 8001004:	f7ff faf0 	bl	80005e8 <_Unwind_VRS_Get>
 8001008:	4643      	mov	r3, r8
 800100a:	220f      	movs	r2, #15
 800100c:	4628      	mov	r0, r5
 800100e:	4641      	mov	r1, r8
 8001010:	9400      	str	r4, [sp, #0]
 8001012:	f7ff fb0f 	bl	8000634 <_Unwind_VRS_Set>
 8001016:	4640      	mov	r0, r8
 8001018:	e734      	b.n	8000e84 <__gnu_unwind_execute+0x5c>
 800101a:	4630      	mov	r0, r6
 800101c:	f7ff fed8 	bl	8000dd0 <next_unwind_byte>
 8001020:	4602      	mov	r2, r0
 8001022:	2303      	movs	r3, #3
 8001024:	0314      	lsls	r4, r2, #12
 8001026:	f002 020f 	and.w	r2, r2, #15
 800102a:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 800102e:	3201      	adds	r2, #1
 8001030:	4628      	mov	r0, r5
 8001032:	4619      	mov	r1, r3
 8001034:	4322      	orrs	r2, r4
 8001036:	f7ff fcbb 	bl	80009b0 <_Unwind_VRS_Pop>
 800103a:	2800      	cmp	r0, #0
 800103c:	f43f aefb 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001040:	e71f      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001042:	4630      	mov	r0, r6
 8001044:	f7ff fec4 	bl	8000dd0 <next_unwind_byte>
 8001048:	4602      	mov	r2, r0
 800104a:	2800      	cmp	r0, #0
 800104c:	f43f af19 	beq.w	8000e82 <__gnu_unwind_execute+0x5a>
 8001050:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001054:	f47f af15 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8001058:	2104      	movs	r1, #4
 800105a:	4628      	mov	r0, r5
 800105c:	f7ff fca8 	bl	80009b0 <_Unwind_VRS_Pop>
 8001060:	2800      	cmp	r0, #0
 8001062:	f43f aee8 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001066:	e70c      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001068:	2303      	movs	r3, #3
 800106a:	f000 020f 	and.w	r2, r0, #15
 800106e:	3201      	adds	r2, #1
 8001070:	4628      	mov	r0, r5
 8001072:	4619      	mov	r1, r3
 8001074:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001078:	f7ff fc9a 	bl	80009b0 <_Unwind_VRS_Pop>
 800107c:	2800      	cmp	r0, #0
 800107e:	f43f aeda 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001082:	e6fe      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001084:	4630      	mov	r0, r6
 8001086:	f7ff fea3 	bl	8000dd0 <next_unwind_byte>
 800108a:	4602      	mov	r2, r0
 800108c:	2101      	movs	r1, #1
 800108e:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8001092:	f002 020f 	and.w	r2, r2, #15
 8001096:	3410      	adds	r4, #16
 8001098:	440a      	add	r2, r1
 800109a:	2305      	movs	r3, #5
 800109c:	4628      	mov	r0, r5
 800109e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80010a2:	f7ff fc85 	bl	80009b0 <_Unwind_VRS_Pop>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	f43f aec5 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 80010ac:	e6e9      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 80010ae:	2300      	movs	r3, #0
 80010b0:	f10d 090c 	add.w	r9, sp, #12
 80010b4:	220d      	movs	r2, #13
 80010b6:	4619      	mov	r1, r3
 80010b8:	4628      	mov	r0, r5
 80010ba:	f8cd 9000 	str.w	r9, [sp]
 80010be:	f7ff fa93 	bl	80005e8 <_Unwind_VRS_Get>
 80010c2:	4630      	mov	r0, r6
 80010c4:	f7ff fe84 	bl	8000dd0 <next_unwind_byte>
 80010c8:	0602      	lsls	r2, r0, #24
 80010ca:	f04f 0402 	mov.w	r4, #2
 80010ce:	d50c      	bpl.n	80010ea <__gnu_unwind_execute+0x2c2>
 80010d0:	9b03      	ldr	r3, [sp, #12]
 80010d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80010d6:	40a0      	lsls	r0, r4
 80010d8:	4418      	add	r0, r3
 80010da:	9003      	str	r0, [sp, #12]
 80010dc:	4630      	mov	r0, r6
 80010de:	f7ff fe77 	bl	8000dd0 <next_unwind_byte>
 80010e2:	0603      	lsls	r3, r0, #24
 80010e4:	f104 0407 	add.w	r4, r4, #7
 80010e8:	d4f2      	bmi.n	80010d0 <__gnu_unwind_execute+0x2a8>
 80010ea:	9b03      	ldr	r3, [sp, #12]
 80010ec:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80010f0:	40a2      	lsls	r2, r4
 80010f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010f6:	441a      	add	r2, r3
 80010f8:	2300      	movs	r3, #0
 80010fa:	9203      	str	r2, [sp, #12]
 80010fc:	4628      	mov	r0, r5
 80010fe:	220d      	movs	r2, #13
 8001100:	4619      	mov	r1, r3
 8001102:	f8cd 9000 	str.w	r9, [sp]
 8001106:	f7ff fa95 	bl	8000634 <_Unwind_VRS_Set>
 800110a:	e694      	b.n	8000e36 <__gnu_unwind_execute+0xe>

0800110c <__gnu_unwind_frame>:
 800110c:	460b      	mov	r3, r1
 800110e:	f04f 0c03 	mov.w	ip, #3
 8001112:	b500      	push	{lr}
 8001114:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001116:	4618      	mov	r0, r3
 8001118:	6853      	ldr	r3, [r2, #4]
 800111a:	b085      	sub	sp, #20
 800111c:	3208      	adds	r2, #8
 800111e:	9202      	str	r2, [sp, #8]
 8001120:	a901      	add	r1, sp, #4
 8001122:	0e1a      	lsrs	r2, r3, #24
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	f88d c00c 	strb.w	ip, [sp, #12]
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	f88d 200d 	strb.w	r2, [sp, #13]
 8001130:	f7ff fe7a 	bl	8000e28 <__gnu_unwind_execute>
 8001134:	b005      	add	sp, #20
 8001136:	f85d fb04 	ldr.w	pc, [sp], #4
 800113a:	bf00      	nop

0800113c <_Unwind_GetRegionStart>:
 800113c:	b508      	push	{r3, lr}
 800113e:	f7ff fe71 	bl	8000e24 <unwind_UCB_from_context>
 8001142:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001144:	bd08      	pop	{r3, pc}
 8001146:	bf00      	nop

08001148 <_Unwind_GetLanguageSpecificData>:
 8001148:	b508      	push	{r3, lr}
 800114a:	f7ff fe6b 	bl	8000e24 <unwind_UCB_from_context>
 800114e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001150:	79c3      	ldrb	r3, [r0, #7]
 8001152:	3302      	adds	r3, #2
 8001154:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001158:	bd08      	pop	{r3, pc}
 800115a:	bf00      	nop

0800115c <_ZN3LED6setPinEt>:
public:
	LED();
	LED( GPIO_TypeDef*, uint16_t pin );
	virtual ~LED();

	void setPin( uint16_t pin ) { mPin = pin; }
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	811a      	strh	r2, [r3, #8]
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <_ZN3LED7setPortEP12GPIO_TypeDef>:
	void setPort( GPIO_TypeDef* port ) { mPort = port; }
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>:
	void setPortAndPin( GPIO_TypeDef* port, uint16_t pin ) { setPin( pin ); setPort( port ); }
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	4613      	mov	r3, r2
 800119e:	80fb      	strh	r3, [r7, #6]
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	4619      	mov	r1, r3
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f7ff ffd9 	bl	800115c <_ZN3LED6setPinEt>
 80011aa:	68b9      	ldr	r1, [r7, #8]
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff ffe3 	bl	8001178 <_ZN3LED7setPortEP12GPIO_TypeDef>
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <_ZN3I2CC1Ev>:
	I2C_HandleTypeDef mI2C;
private:
	uint8_t mBuffer[16] = {0};

public:
	I2C() {}
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <_ZN3I2CC1Ev+0x28>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3358      	adds	r3, #88	; 0x58
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	08009070 	.word	0x08009070

080011e8 <_ZN3I2C10setBusDataE17I2C_HandleTypeDef>:
	I2C( I2C_HandleTypeDef bus );
	virtual ~I2C();

	void setBusData( I2C_HandleTypeDef bus ) { mI2C = bus; }
 80011e8:	b084      	sub	sp, #16
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	f107 0014 	add.w	r0, r7, #20
 80011f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3304      	adds	r3, #4
 80011fe:	f107 0114 	add.w	r1, r7, #20
 8001202:	2254      	movs	r2, #84	; 0x54
 8001204:	4618      	mov	r0, r3
 8001206:	f007 fcc5 	bl	8008b94 <memcpy>
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001214:	b004      	add	sp, #16
 8001216:	4770      	bx	lr

08001218 <_ZN9AmplifierC1Ev>:
#include "cmsis_os.h"
#include "I2CDevice.h"
#include "DACPCM1681.h"
#include "DolbyDecoderSTA310.h"

Amplifier::Amplifier() : mDAC( 0 ), mDecoder( 0 ) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	4a14      	ldr	r2, [pc, #80]	; (8001274 <_ZN9AmplifierC1Ev+0x5c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3304      	adds	r3, #4
 800122a:	4618      	mov	r0, r3
 800122c:	f001 f810 	bl	8002250 <_ZN2UIC1Ev>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3308      	adds	r3, #8
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fafd 	bl	8001834 <_ZN7DisplayC1Ev>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3310      	adds	r3, #16
 800123e:	4618      	mov	r0, r3
 8001240:	f000 ffac 	bl	800219c <_ZN3LEDC1Ev>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3320      	adds	r3, #32
 8001248:	4618      	mov	r0, r3
 800124a:	f000 ffa7 	bl	800219c <_ZN3LEDC1Ev>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3330      	adds	r3, #48	; 0x30
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ffb2 	bl	80011bc <_ZN3I2CC1Ev>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	// TODO Auto-generated constructor stub
}
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	08008f7c 	.word	0x08008f7c

08001278 <_ZN9AmplifierD1Ev>:

Amplifier::~Amplifier() {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <_ZN9AmplifierD1Ev+0x4c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3330      	adds	r3, #48	; 0x30
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fe06 	bl	8001e9c <_ZN3I2CD1Ev>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3320      	adds	r3, #32
 8001294:	4618      	mov	r0, r3
 8001296:	f000 ff99 	bl	80021cc <_ZN3LEDD1Ev>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3310      	adds	r3, #16
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 ff94 	bl	80021cc <_ZN3LEDD1Ev>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3308      	adds	r3, #8
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fad5 	bl	8001858 <_ZN7DisplayD1Ev>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3304      	adds	r3, #4
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 ffdc 	bl	8002270 <_ZN2UID1Ev>
	// TODO Auto-generated destructor stub
}
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	08008f7c 	.word	0x08008f7c

080012c8 <_ZN9AmplifierD0Ev>:
Amplifier::~Amplifier() {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
}
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ffd1 	bl	8001278 <_ZN9AmplifierD1Ev>
 80012d6:	21a0      	movs	r1, #160	; 0xa0
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f007 fb5c 	bl	8008996 <_ZdlPvj>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_ZN9Amplifier10initializeE17I2C_HandleTypeDef>:

void
Amplifier::initialize( I2C_HandleTypeDef bus ) {
 80012e8:	b084      	sub	sp, #16
 80012ea:	b5b0      	push	{r4, r5, r7, lr}
 80012ec:	b094      	sub	sp, #80	; 0x50
 80012ee:	af12      	add	r7, sp, #72	; 0x48
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	f107 001c 	add.w	r0, r7, #28
 80012f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	mDolbyLED.setPortAndPin( LED_MUTE_GPIO_Port, LED_MUTE_Pin );
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3310      	adds	r3, #16
 80012fe:	2208      	movs	r2, #8
 8001300:	4920      	ldr	r1, [pc, #128]	; (8001384 <_ZN9Amplifier10initializeE17I2C_HandleTypeDef+0x9c>)
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff45 	bl	8001192 <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>

	// Take the I2C bus info and configure our internal I2C bus class
	mBusI2C.setBusData( bus );
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800130e:	4668      	mov	r0, sp
 8001310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001314:	2248      	movs	r2, #72	; 0x48
 8001316:	4619      	mov	r1, r3
 8001318:	f007 fc3c 	bl	8008b94 <memcpy>
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001322:	4620      	mov	r0, r4
 8001324:	f7ff ff60 	bl	80011e8 <_ZN3I2C10setBusDataE17I2C_HandleTypeDef>

	mDAC = new DAC_PCM1681( mBusI2C.makeDevice( 0 ) );
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3330      	adds	r3, #48	; 0x30
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fe66 	bl	8002000 <_ZN3I2C10makeDeviceEh>
 8001334:	4605      	mov	r5, r0
 8001336:	2010      	movs	r0, #16
 8001338:	f007 fb2f 	bl	800899a <_Znwj>
 800133c:	4603      	mov	r3, r0
 800133e:	461c      	mov	r4, r3
 8001340:	4629      	mov	r1, r5
 8001342:	4620      	mov	r0, r4
 8001344:	f000 f92c 	bl	80015a0 <_ZN11DAC_PCM1681C1EP10I2C_Device>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98

	mDecoder = new DolbyDecoder_STA310( mBusI2C.makeDevice( 0 ) );
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3330      	adds	r3, #48	; 0x30
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fe53 	bl	8002000 <_ZN3I2C10makeDeviceEh>
 800135a:	4605      	mov	r5, r0
 800135c:	2010      	movs	r0, #16
 800135e:	f007 fb1c 	bl	800899a <_Znwj>
 8001362:	4603      	mov	r3, r0
 8001364:	461c      	mov	r4, r3
 8001366:	4629      	mov	r1, r5
 8001368:	4620      	mov	r0, r4
 800136a:	f000 fac5 	bl	80018f8 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800137e:	b004      	add	sp, #16
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40011000 	.word	0x40011000

08001388 <_ZN9Amplifier3runEv>:

void Amplifier::run() {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	for(;;) {
		osDelay(1);
 8001390:	2001      	movs	r0, #1
 8001392:	f004 ff09 	bl	80061a8 <osDelay>
		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_SET );
 8001396:	2201      	movs	r2, #1
 8001398:	2108      	movs	r1, #8
 800139a:	480f      	ldr	r0, [pc, #60]	; (80013d8 <_ZN9Amplifier3runEv+0x50>)
 800139c:	f002 f8e2 	bl	8003564 <HAL_GPIO_WritePin>

		  osDelay( 200 );
 80013a0:	20c8      	movs	r0, #200	; 0xc8
 80013a2:	f004 ff01 	bl	80061a8 <osDelay>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2108      	movs	r1, #8
 80013aa:	480b      	ldr	r0, [pc, #44]	; (80013d8 <_ZN9Amplifier3runEv+0x50>)
 80013ac:	f002 f8da 	bl	8003564 <HAL_GPIO_WritePin>

		  osDelay( 200 );
 80013b0:	20c8      	movs	r0, #200	; 0xc8
 80013b2:	f004 fef9 	bl	80061a8 <osDelay>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_DOLBY_GPIO_Port, LED_DOLBY_Pin, GPIO_PIN_SET );
 80013b6:	2201      	movs	r2, #1
 80013b8:	2102      	movs	r1, #2
 80013ba:	4808      	ldr	r0, [pc, #32]	; (80013dc <_ZN9Amplifier3runEv+0x54>)
 80013bc:	f002 f8d2 	bl	8003564 <HAL_GPIO_WritePin>

		  osDelay( 200 );
 80013c0:	20c8      	movs	r0, #200	; 0xc8
 80013c2:	f004 fef1 	bl	80061a8 <osDelay>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_DOLBY_GPIO_Port, LED_DOLBY_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2102      	movs	r1, #2
 80013ca:	4804      	ldr	r0, [pc, #16]	; (80013dc <_ZN9Amplifier3runEv+0x54>)
 80013cc:	f002 f8ca 	bl	8003564 <HAL_GPIO_WritePin>

		  osDelay( 200 );
 80013d0:	20c8      	movs	r0, #200	; 0xc8
 80013d2:	f004 fee9 	bl	80061a8 <osDelay>
		osDelay(1);
 80013d6:	e7db      	b.n	8001390 <_ZN9Amplifier3runEv+0x8>
 80013d8:	40011000 	.word	0x40011000
 80013dc:	40010800 	.word	0x40010800

080013e0 <_ZN6DAC_IC9isEnabledEv>:

	// the name for this DAC
	virtual std::string name() = 0;
	virtual void init() = 0;

	virtual bool isEnabled() { return true; }
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	2301      	movs	r3, #1
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <_ZN6DAC_IC6enableEb>:
	virtual void enable( bool state ) {};
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <_ZN6DAC_IC14supportsFormatEh>:
	virtual bool supportsFormat( uint8_t format ) { return false; }
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	460b      	mov	r3, r1
 8001414:	70fb      	strb	r3, [r7, #3]
 8001416:	2300      	movs	r3, #0
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <_ZN6DAC_IC14supportsVolumeEv>:
	virtual bool supportsVolume() { return false; }
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	2300      	movs	r3, #0
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <_ZN6DAC_IC12supportsMuteEv>:
	virtual bool supportsMute() { return false; }
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	2300      	movs	r3, #0
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <_ZN6DAC_IC8channelsEv>:
	virtual int channels() { return 0; }
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	2300      	movs	r3, #0
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <_ZN6DAC_IC16setChannelVolumeEii>:

	// volume is 0 to 63, where 0 is lowest and 63 is highest
	virtual void setChannelVolume( int channel, int volume ) {}
 800145e:	b480      	push	{r7}
 8001460:	b085      	sub	sp, #20
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <_ZN6DAC_IC9setVolumeEi>:

	// sets the volume on all channels
	virtual void setVolume( int volume ) {};
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <_ZN6DAC_IC11muteChannelEib>:

	virtual void muteChannel( int channel, bool enable ) {}
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	4613      	mov	r3, r2
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <_ZN6DAC_IC4muteEb>:
	virtual void mute( bool enable ) {}
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <_ZN6DAC_IC9setFormatEh>:

	virtual void setFormat( uint8_t format ) {};
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	460b      	mov	r3, r1
 80014c0:	70fb      	strb	r3, [r7, #3]
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <_ZN6DAC_ICC1Ev>:
 *      Author: duane
 */

#include "DAC.h"

DAC_IC::DAC_IC() {
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <_ZN6DAC_ICC1Ev+0x1c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	08008f94 	.word	0x08008f94

080014ec <_ZN6DAC_ICD1Ev>:

DAC_IC::~DAC_IC() {
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <_ZN6DAC_ICD1Ev+0x1c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	08008f94 	.word	0x08008f94

0800150c <_ZN11DAC_PCM16819isEnabledEv>:
	DAC_PCM1681( I2C_Device *device );
	virtual ~DAC_PCM1681();

	virtual void init();

	virtual bool isEnabled() { return mEnabled; }
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7b5b      	ldrb	r3, [r3, #13]
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf14      	ite	ne
 800151c:	2301      	movne	r3, #1
 800151e:	2300      	moveq	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <_ZN11DAC_PCM168114supportsVolumeEv>:
	virtual void enable( bool state );

	virtual bool supportsFormat( uint8_t format );
	virtual bool supportsVolume() { return true; }
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	2301      	movs	r3, #1
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <_ZN11DAC_PCM168112supportsMuteEv>:
	virtual bool supportsMute() { return true; }
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	2301      	movs	r3, #1
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <_ZN11DAC_PCM16818channelsEv>:
	virtual int channels() { return 8; }
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	2308      	movs	r3, #8
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <_ZN11DAC_PCM16814nameB5cxx11Ev>:

	virtual std::string name() { return "PCM1681"; }
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	4618      	mov	r0, r3
 8001578:	f007 fa23 	bl	80089c2 <_ZNSaIcEC1Ev>
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	461a      	mov	r2, r3
 8001582:	4906      	ldr	r1, [pc, #24]	; (800159c <_ZN11DAC_PCM16814nameB5cxx11Ev+0x34>)
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f007 fa79 	bl	8008a7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	4618      	mov	r0, r3
 8001590:	f007 fa18 	bl	80089c4 <_ZNSaIcED1Ev>
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	08008f24 	.word	0x08008f24

080015a0 <_ZN11DAC_PCM1681C1EP10I2C_Device>:
#define PCM1681_REG_MUTE	7
#define PCM1681_REG_ENABLE	8
#define PCM1681_REG_FORMAT	9
#define PCM1681_REG_DAMS	13

DAC_PCM1681::DAC_PCM1681( I2C_Device *device ) : mDevice( device ), mEnabled( true ) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff8d 	bl	80014cc <_ZN6DAC_ICC1Ev>
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <_ZN11DAC_PCM1681C1EP10I2C_Device+0x34>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	735a      	strb	r2, [r3, #13]
	// TODO Auto-generated constructor stub
	mMuteStatus = 0;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	731a      	strb	r2, [r3, #12]
}
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	08008fd8 	.word	0x08008fd8

080015d8 <_ZN11DAC_PCM1681D1Ev>:

DAC_PCM1681::~DAC_PCM1681() {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <_ZN11DAC_PCM1681D1Ev+0x20>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff7f 	bl	80014ec <_ZN6DAC_ICD1Ev>
	// TODO Auto-generated destructor stub
}
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	08008fd8 	.word	0x08008fd8

080015fc <_ZN11DAC_PCM1681D0Ev>:
DAC_PCM1681::~DAC_PCM1681() {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
}
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ffe7 	bl	80015d8 <_ZN11DAC_PCM1681D1Ev>
 800160a:	2110      	movs	r1, #16
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f007 f9c2 	bl	8008996 <_ZdlPvj>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_ZN11DAC_PCM16816enableEb>:

void
DAC_PCM1681::enable( bool state ) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	70fb      	strb	r3, [r7, #3]
	if ( state ) {
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00a      	beq.n	8001644 <_ZN11DAC_PCM16816enableEb+0x28>
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0 );
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6898      	ldr	r0, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3314      	adds	r3, #20
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2200      	movs	r2, #0
 800163e:	2108      	movs	r1, #8
 8001640:	4798      	blx	r3
 8001642:	e009      	b.n	8001658 <_ZN11DAC_PCM16816enableEb+0x3c>
	} else {
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0xff );
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6898      	ldr	r0, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	3314      	adds	r3, #20
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	22ff      	movs	r2, #255	; 0xff
 8001654:	2108      	movs	r1, #8
 8001656:	4798      	blx	r3
	}

	mEnabled = state;
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	735a      	strb	r2, [r3, #13]
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_ZN11DAC_PCM168114supportsFormatEh>:

bool
DAC_PCM1681::supportsFormat( uint8_t format ) {
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	460b      	mov	r3, r1
 8001670:	70fb      	strb	r3, [r7, #3]
	return ( format == DAC_IC::FORMAT_SONY || format == DAC_IC::FORMAT_I2S );
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <_ZN11DAC_PCM168114supportsFormatEh+0x18>
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <_ZN11DAC_PCM168114supportsFormatEh+0x1c>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <_ZN11DAC_PCM168114supportsFormatEh+0x1e>
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <_ZN11DAC_PCM16819setFormatEh>:

void
DAC_PCM1681::setFormat( uint8_t format ) {
 800168e:	b580      	push	{r7, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
	if ( format == FORMAT_SONY ) {
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_ZN11DAC_PCM16819setFormatEh+0x1c>
		value = 5;
 80016a4:	2305      	movs	r3, #5
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e004      	b.n	80016b4 <_ZN11DAC_PCM16819setFormatEh+0x26>
	} else if ( format == FORMAT_I2S ) {
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <_ZN11DAC_PCM16819setFormatEh+0x26>
		value = 4;
 80016b0:	2304      	movs	r3, #4
 80016b2:	73fb      	strb	r3, [r7, #15]
	}

	mDevice->writeRegister( PCM1681_REG_FORMAT, value );
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6898      	ldr	r0, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3314      	adds	r3, #20
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	2109      	movs	r1, #9
 80016c6:	4798      	blx	r3
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <_ZN11DAC_PCM16814initEv>:

void
DAC_PCM1681::init() {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	// do setup

	// set digital attenuation range of 0-63db in 0.5db increments
	mDevice->writeRegister( PCM1681_REG_DAMS, 0 );
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6898      	ldr	r0, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3314      	adds	r3, #20
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2200      	movs	r2, #0
 80016e8:	210d      	movs	r1, #13
 80016ea:	4798      	blx	r3
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <_ZN11DAC_PCM168116setChannelVolumeEii>:

void
DAC_PCM1681::setChannelVolume( int channel, int volume ) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
	uint8_t reg = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	75fb      	strb	r3, [r7, #23]
	switch( channel ) {
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b05      	cmp	r3, #5
 8001708:	d820      	bhi.n	800174c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
 800170a:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <_ZN11DAC_PCM168116setChannelVolumeEii+0x1c>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	08001729 	.word	0x08001729
 8001714:	0800172f 	.word	0x0800172f
 8001718:	08001735 	.word	0x08001735
 800171c:	0800173b 	.word	0x0800173b
 8001720:	08001741 	.word	0x08001741
 8001724:	08001747 	.word	0x08001747
		case FRONT_LEFT:
			reg = 1;
 8001728:	2301      	movs	r3, #1
 800172a:	75fb      	strb	r3, [r7, #23]
			break;
 800172c:	e00e      	b.n	800174c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case FRONT_RIGHT:
			reg = 2;
 800172e:	2302      	movs	r3, #2
 8001730:	75fb      	strb	r3, [r7, #23]
			break;
 8001732:	e00b      	b.n	800174c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_LEFT:
			reg = 3;
 8001734:	2303      	movs	r3, #3
 8001736:	75fb      	strb	r3, [r7, #23]
			break;
 8001738:	e008      	b.n	800174c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_RIGHT:
			reg = 4;
 800173a:	2304      	movs	r3, #4
 800173c:	75fb      	strb	r3, [r7, #23]
			break;
 800173e:	e005      	b.n	800174c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case CENTER:
			reg = 5;
 8001740:	2305      	movs	r3, #5
 8001742:	75fb      	strb	r3, [r7, #23]
			break;
 8001744:	e002      	b.n	800174c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case SUBWOOFER:
			reg = 6;
 8001746:	2306      	movs	r3, #6
 8001748:	75fb      	strb	r3, [r7, #23]
			break;
 800174a:	bf00      	nop
	}

	// Clamp the volume to the upper limit
	if ( volume > 127 ) {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b7f      	cmp	r3, #127	; 0x7f
 8001750:	dd01      	ble.n	8001756 <_ZN11DAC_PCM168116setChannelVolumeEii+0x62>
		volume = 127;
 8001752:	237f      	movs	r3, #127	; 0x7f
 8001754:	607b      	str	r3, [r7, #4]
	}

	uint8_t volumeLevel = volume + 128;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	3b80      	subs	r3, #128	; 0x80
 800175c:	75bb      	strb	r3, [r7, #22]
	mDevice->writeRegister( reg, volumeLevel );
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6898      	ldr	r0, [r3, #8]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3314      	adds	r3, #20
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	7dba      	ldrb	r2, [r7, #22]
 800176e:	7df9      	ldrb	r1, [r7, #23]
 8001770:	4798      	blx	r3
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop

0800177c <_ZN11DAC_PCM16819setVolumeEi>:

void
DAC_PCM1681::setVolume( int volume ) {
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]

}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <_ZN11DAC_PCM168111muteChannelEib>:

void
DAC_PCM1681::muteChannel( int channel, bool enable ) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	4613      	mov	r3, r2
 800179c:	71fb      	strb	r3, [r7, #7]
	uint8_t mask =  ( 1 << ( channel ) );
 800179e:	2201      	movs	r2, #1
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	75fb      	strb	r3, [r7, #23]
	if ( enable ) {
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d007      	beq.n	80017be <_ZN11DAC_PCM168111muteChannelEib+0x2e>
		// enable the bit representing this channel
		mMuteStatus = mMuteStatus & mask;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	7b1a      	ldrb	r2, [r3, #12]
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	4013      	ands	r3, r2
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	731a      	strb	r2, [r3, #12]
 80017bc:	e00b      	b.n	80017d6 <_ZN11DAC_PCM168111muteChannelEib+0x46>
	} else {
		// disable the bit representing the channel
		mMuteStatus = mMuteStatus & ~mask;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	7b1b      	ldrb	r3, [r3, #12]
 80017c2:	b25a      	sxtb	r2, r3
 80017c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	4013      	ands	r3, r2
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	731a      	strb	r2, [r3, #12]
	}

	mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6898      	ldr	r0, [r3, #8]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3314      	adds	r3, #20
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	7b12      	ldrb	r2, [r2, #12]
 80017e8:	2107      	movs	r1, #7
 80017ea:	4798      	blx	r3
}
 80017ec:	bf00      	nop
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_ZN11DAC_PCM16814muteEb>:

void
DAC_PCM1681::mute( bool enable ) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	70fb      	strb	r3, [r7, #3]
	 if ( enable ) {
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <_ZN11DAC_PCM16814muteEb+0x1a>
		 mMuteStatus = 0xff;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	22ff      	movs	r2, #255	; 0xff
 800180a:	731a      	strb	r2, [r3, #12]
 800180c:	e002      	b.n	8001814 <_ZN11DAC_PCM16814muteEb+0x20>
	 } else {
		 mMuteStatus = 0;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	731a      	strb	r2, [r3, #12]
	 }

	 mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6898      	ldr	r0, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3314      	adds	r3, #20
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	7b12      	ldrb	r2, [r2, #12]
 8001826:	2107      	movs	r1, #7
 8001828:	4798      	blx	r3
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <_ZN7DisplayC1Ev>:

#include "Display.h"
#include "main.h"
#include "cmsis_os.h"

Display::Display() : mShouldUpdate( true ) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	4a05      	ldr	r2, [pc, #20]	; (8001854 <_ZN7DisplayC1Ev+0x20>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	711a      	strb	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	0800901c 	.word	0x0800901c

08001858 <_ZN7DisplayD1Ev>:

Display::~Display() {
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <_ZN7DisplayD1Ev+0x1c>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	0800901c 	.word	0x0800901c

08001878 <_ZN7DisplayD0Ev>:
Display::~Display() {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
}
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ffe9 	bl	8001858 <_ZN7DisplayD1Ev>
 8001886:	2108      	movs	r1, #8
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f007 f884 	bl	8008996 <_ZdlPvj>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_ZN7Display3runEv>:
Display::update() {
	mShouldUpdate = true;
}

void
Display::run() {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	for(;;) {
		// Check to see if we need to update the display
		if ( mShouldUpdate ) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	791b      	ldrb	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d002      	beq.n	80018ae <_ZN7Display3runEv+0x16>

			// Clear the update for the next time
			mShouldUpdate = false;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	711a      	strb	r2, [r3, #4]
		}

		osDelay( 5 );
 80018ae:	2005      	movs	r0, #5
 80018b0:	f004 fc7a 	bl	80061a8 <osDelay>
		if ( mShouldUpdate ) {
 80018b4:	e7f4      	b.n	80018a0 <_ZN7Display3runEv+0x8>
	...

080018b8 <_ZN12DolbyDecoderC1Ev>:
 *      Author: duane
 */

#include "DolbyDecoder.h"

DolbyDecoder::DolbyDecoder() {
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <_ZN12DolbyDecoderC1Ev+0x1c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	08009030 	.word	0x08009030

080018d8 <_ZN12DolbyDecoderD1Ev>:

DolbyDecoder::~DolbyDecoder() {
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <_ZN12DolbyDecoderD1Ev+0x1c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	08009030 	.word	0x08009030

080018f8 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device>:
 */

#include "DolbyDecoderSTA310.h"
#include "cmsis_os.h"

DolbyDecoder_STA310::DolbyDecoder_STA310( I2C_Device *device ) :
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
	mDevice( device ), mInitialized( false ), mMuted( false ), mRunning( false ), mPlaying( false ) {
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ffd7 	bl	80018b8 <_ZN12DolbyDecoderC1Ev>
 800190a:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device+0x40>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	721a      	strb	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	725a      	strb	r2, [r3, #9]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	729a      	strb	r2, [r3, #10]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	72da      	strb	r2, [r3, #11]
	// TODO Auto-generated constructor stub

}
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	08009050 	.word	0x08009050

0800193c <_ZN19DolbyDecoder_STA310D1Ev>:

DolbyDecoder_STA310::~DolbyDecoder_STA310() {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <_ZN19DolbyDecoder_STA310D1Ev+0x20>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ffc3 	bl	80018d8 <_ZN12DolbyDecoderD1Ev>
	// TODO Auto-generated destructor stub
}
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	08009050 	.word	0x08009050

08001960 <_ZN19DolbyDecoder_STA310D0Ev>:
DolbyDecoder_STA310::~DolbyDecoder_STA310() {
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
}
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ffe7 	bl	800193c <_ZN19DolbyDecoder_STA310D1Ev>
 800196e:	2110      	movs	r1, #16
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f007 f810 	bl	8008996 <_ZdlPvj>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_ZN19DolbyDecoder_STA3104muteEb>:

void
DolbyDecoder_STA310::mute( bool enable ) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00a      	beq.n	80019a8 <_ZN19DolbyDecoder_STA3104muteEb+0x28>
		mDevice->writeRegister( DolbyDecoder_STA310::MUTE, 1 );
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6858      	ldr	r0, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3314      	adds	r3, #20
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2201      	movs	r2, #1
 80019a2:	2114      	movs	r1, #20
 80019a4:	4798      	blx	r3
 80019a6:	e009      	b.n	80019bc <_ZN19DolbyDecoder_STA3104muteEb+0x3c>
	} else {
		mDevice->writeRegister( DolbyDecoder_STA310::MUTE, 0 );
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6858      	ldr	r0, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3314      	adds	r3, #20
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2200      	movs	r2, #0
 80019b8:	2114      	movs	r1, #20
 80019ba:	4798      	blx	r3
	}

	mMuted = enable;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	725a      	strb	r2, [r3, #9]
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_ZN19DolbyDecoder_STA3104playEb>:

void
DolbyDecoder_STA310::play( bool enable ) {
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	460b      	mov	r3, r1
 80019d4:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00a      	beq.n	80019f2 <_ZN19DolbyDecoder_STA3104playEb+0x28>
		mDevice->writeRegister( DolbyDecoder_STA310::PLAY, 1 );
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6858      	ldr	r0, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3314      	adds	r3, #20
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2201      	movs	r2, #1
 80019ec:	2113      	movs	r1, #19
 80019ee:	4798      	blx	r3
 80019f0:	e009      	b.n	8001a06 <_ZN19DolbyDecoder_STA3104playEb+0x3c>
	} else {
		mDevice->writeRegister( DolbyDecoder_STA310::PLAY, 0 );
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6858      	ldr	r0, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	3314      	adds	r3, #20
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2200      	movs	r2, #0
 8001a02:	2113      	movs	r1, #19
 8001a04:	4798      	blx	r3
	}

	mPlaying = enable;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	72da      	strb	r2, [r3, #11]
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_ZN19DolbyDecoder_STA3103runEv>:

void
DolbyDecoder_STA310::run() {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	if ( !mRunning ) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7a9b      	ldrb	r3, [r3, #10]
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00c      	beq.n	8001a44 <_ZN19DolbyDecoder_STA3103runEv+0x30>
		mDevice->writeRegister( DolbyDecoder_STA310::RUN, 1 );
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6858      	ldr	r0, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3314      	adds	r3, #20
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2172      	movs	r1, #114	; 0x72
 8001a3c:	4798      	blx	r3
		mRunning = true;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	729a      	strb	r2, [r3, #10]

		// We are now running, the only way to stop is to do a reset of the chip
	}
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>:

void
DolbyDecoder_STA310::enableAudioPLL() {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	mDevice->writeRegister( DolbyDecoder_STA310::ENABLE_PLL, 1 );
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6858      	ldr	r0, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3314      	adds	r3, #20
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2201      	movs	r2, #1
 8001a64:	21b5      	movs	r1, #181	; 0xb5
 8001a66:	4798      	blx	r3
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_ZN19DolbyDecoder_STA31010initializeEv>:

void
DolbyDecoder_STA310::initialize() {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	softReset();
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f956 	bl	8001d2a <_ZN19DolbyDecoder_STA3109softResetEv>

	if ( mInitialized ) {
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7a1b      	ldrb	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d024      	beq.n	8001ad0 <_ZN19DolbyDecoder_STA31010initializeEv+0x60>
		// perform startup routine
		// Enable the AUDIO PLL
		enableAudioPLL();
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffe0 	bl	8001a4c <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>
		configureAudioPLL();
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f943 	bl	8001d18 <_ZN19DolbyDecoder_STA31017configureAudioPLLEv>
		configureInterrupts();
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f83c 	bl	8001b10 <_ZN19DolbyDecoder_STA31019configureInterruptsEv>
		configureSync();
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f855 	bl	8001b48 <_ZN19DolbyDecoder_STA31013configureSyncEv>
		configurePCMOUT();
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f81a 	bl	8001ad8 <_ZN19DolbyDecoder_STA31015configurePCMOUTEv>
		configureSPDIF();
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8a5 	bl	8001bf4 <_ZN19DolbyDecoder_STA31014configureSPDIFEv>
		configureDecoder();
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f886 	bl	8001bbc <_ZN19DolbyDecoder_STA31016configureDecoderEv>
		configureAC3();
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f8d9 	bl	8001c68 <_ZN19DolbyDecoder_STA31012configureAC3Ev>

		// Let's start the clocks
		// First, mute the output
		mute();
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	330c      	adds	r3, #12
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2101      	movs	r1, #1
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3

		// Next, exit idle mode.  Since we are muted, the DAC clock will be started, but it will receive 0s
		run();
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3314      	adds	r3, #20
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3

		// To start actual decoding and DAC playing, we need to run play().  But we need to configure the DAC first
	}
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZN19DolbyDecoder_STA31015configurePCMOUTEv>:

void
DolbyDecoder_STA310::configurePCMOUT() {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	// Set PCM clock divider to support 384*Fs as 32 bits
	mDevice->writeRegister( DolbyDecoder_STA310::PCM_DIV, 2 );
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6858      	ldr	r0, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3314      	adds	r3, #20
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2202      	movs	r2, #2
 8001af0:	2154      	movs	r1, #84	; 0x54
 8001af2:	4798      	blx	r3

	// Set for 24 bit data
	mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 3 );
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6858      	ldr	r0, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3314      	adds	r3, #20
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2203      	movs	r2, #3
 8001b04:	2155      	movs	r1, #85	; 0x55
 8001b06:	4798      	blx	r3
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_ZN19DolbyDecoder_STA31019configureInterruptsEv>:

void
DolbyDecoder_STA310::configureInterrupts() {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	mDevice->writeRegister( DolbyDecoder_STA310::INT1, DolbyDecoder_STA310::ERR | DolbyDecoder_STA310::SFR );
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6858      	ldr	r0, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3314      	adds	r3, #20
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	220c      	movs	r2, #12
 8001b28:	2107      	movs	r1, #7
 8001b2a:	4798      	blx	r3
	mDevice->writeRegister( DolbyDecoder_STA310::INT2, DolbyDecoder_STA310::RST | DolbyDecoder_STA310::LCK );
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6858      	ldr	r0, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3314      	adds	r3, #20
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2230      	movs	r2, #48	; 0x30
 8001b3c:	2108      	movs	r1, #8
 8001b3e:	4798      	blx	r3
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_ZN19DolbyDecoder_STA31013configureSyncEv>:

void
DolbyDecoder_STA310::configureSync() {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	// Only 1 packet needed to synchronize stream
	mDevice->writeRegister( DolbyDecoder_STA310::PACKET_LOCK, 0 );
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6858      	ldr	r0, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3314      	adds	r3, #20
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	214f      	movs	r1, #79	; 0x4f
 8001b62:	4798      	blx	r3

	// Only 1 packet for synchronization lock
	mDevice->writeRegister( DolbyDecoder_STA310::SYNC_LOCK, 0 );
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6858      	ldr	r0, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3314      	adds	r3, #20
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	2153      	movs	r1, #83	; 0x53
 8001b76:	4798      	blx	r3

	// Disable only decoding one particular audio stream (i.e decode them all)
	mDevice->writeRegister( DolbyDecoder_STA310::ID_EN, 0 );
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6858      	ldr	r0, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	3314      	adds	r3, #20
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2200      	movs	r2, #0
 8001b88:	2150      	movs	r1, #80	; 0x50
 8001b8a:	4798      	blx	r3

	// Should be ignored if the ID_EN is set to 0, but also set ID of channel to 0
	mDevice->writeRegister( DolbyDecoder_STA310::ID, 0 );
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6858      	ldr	r0, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3314      	adds	r3, #20
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2151      	movs	r1, #81	; 0x51
 8001b9e:	4798      	blx	r3

	// Should be ignored if the ID_EN is set to 0, but also set ID extended to 0
	mDevice->writeRegister( DolbyDecoder_STA310::ID_EXT, 0 );
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6858      	ldr	r0, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3314      	adds	r3, #20
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2152      	movs	r1, #82	; 0x52
 8001bb2:	4798      	blx	r3

}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_ZN19DolbyDecoder_STA31016configureDecoderEv>:

void
DolbyDecoder_STA310::configureDecoder() {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	// Set for SPDIF data format
	mDevice->writeRegister( DolbyDecoder_STA310::STREAM_SEL, 5 );
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6858      	ldr	r0, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3314      	adds	r3, #20
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2205      	movs	r2, #5
 8001bd4:	214c      	movs	r1, #76	; 0x4c
 8001bd6:	4798      	blx	r3

	// Set for Dolby Digital
	mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, 0 );
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6858      	ldr	r0, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3314      	adds	r3, #20
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2200      	movs	r2, #0
 8001be8:	214d      	movs	r1, #77	; 0x4d
 8001bea:	4798      	blx	r3
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_ZN19DolbyDecoder_STA31014configureSPDIFEv>:

void
DolbyDecoder_STA310::configureSPDIF() {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	// Configure the use of the SPDIF input and serial
	mDevice->writeRegister( DolbyDecoder_STA310::SIN_SETUP, 11 );
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6858      	ldr	r0, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3314      	adds	r3, #20
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	220b      	movs	r2, #11
 8001c0c:	210c      	movs	r1, #12
 8001c0e:	4798      	blx	r3

	// Must be set to 2 for SPDIF
	mDevice->writeRegister( DolbyDecoder_STA310::CAN_SETUP, 0 );
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6858      	ldr	r0, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3314      	adds	r3, #20
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	210d      	movs	r1, #13
 8001c22:	4798      	blx	r3

	// Set up the PLL PCMCLK, PCMCLK FROM SPDIF, SYS CLOCK FROM PLL/2
	mDevice->writeRegister( DolbyDecoder_STA310::PLL_CTRL, 30 );
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6858      	ldr	r0, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3314      	adds	r3, #20
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	221e      	movs	r2, #30
 8001c34:	2112      	movs	r1, #18
 8001c36:	4798      	blx	r3

	// Enable auto detection on the stream
	mDevice->writeRegister( DolbyDecoder_STA310::AUTODETECT_ENA, 1 );
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6858      	ldr	r0, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3314      	adds	r3, #20
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	21e0      	movs	r1, #224	; 0xe0
 8001c4a:	4798      	blx	r3

	// Set SPDIF auto-detection sensitivity
	mDevice->writeRegister( DolbyDecoder_STA310::AUTODETECT_SENS, 0 );
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6858      	ldr	r0, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3314      	adds	r3, #20
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	21e1      	movs	r1, #225	; 0xe1
 8001c5e:	4798      	blx	r3
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_ZN19DolbyDecoder_STA31012configureAC3Ev>:

void
DolbyDecoder_STA310::configureAC3() {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	// Enable LFE
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DECODE_LFE, 1 );
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6858      	ldr	r0, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	3314      	adds	r3, #20
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	2168      	movs	r1, #104	; 0x68
 8001c82:	4798      	blx	r3

	// Configure for line out or spreakers
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_COMP_MOD, 2 );
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6858      	ldr	r0, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3314      	adds	r3, #20
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2202      	movs	r2, #2
 8001c94:	2169      	movs	r1, #105	; 0x69
 8001c96:	4798      	blx	r3

	// Full dynamic range for loud sounds
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_HDR, 0 );
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6858      	ldr	r0, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3314      	adds	r3, #20
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	216a      	movs	r1, #106	; 0x6a
 8001caa:	4798      	blx	r3

	// Don't boost low signals
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_LDR, 0 );
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6858      	ldr	r0, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	3314      	adds	r3, #20
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	216b      	movs	r1, #107	; 0x6b
 8001cbe:	4798      	blx	r3

	// Mute audio output if stream errors are detected
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_RPC, 0 );
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6858      	ldr	r0, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	3314      	adds	r3, #20
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	216c      	movs	r1, #108	; 0x6c
 8001cd2:	4798      	blx	r3

	// Karaoke aware
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_KARAOKE, 0 );
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6858      	ldr	r0, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3314      	adds	r3, #20
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	216d      	movs	r1, #109	; 0x6d
 8001ce6:	4798      	blx	r3

	// Output dual mode streams as stereo
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DUALMODE, 0 );
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6858      	ldr	r0, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	3314      	adds	r3, #20
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	216e      	movs	r1, #110	; 0x6e
 8001cfa:	4798      	blx	r3

	// Set for a 5.1 downmix - this is useful to change if certain speakers are missing
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DOWNMIX, 7 );
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6858      	ldr	r0, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3314      	adds	r3, #20
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2207      	movs	r2, #7
 8001d0c:	216f      	movs	r1, #111	; 0x6f
 8001d0e:	4798      	blx	r3
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <_ZN19DolbyDecoder_STA31017configureAudioPLLEv>:

void
DolbyDecoder_STA310::configureAudioPLL() {
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	// Our DAC supports 384*FS, so nothing to do here
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <_ZN19DolbyDecoder_STA3109softResetEv>:

void
DolbyDecoder_STA310::softReset() {
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
	mInitialized = false;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	721a      	strb	r2, [r3, #8]

	// Perform soft mute on incoming framers
	mDevice->writeRegister( DolbyDecoder_STA310::SOFT_MUTE, 1 );
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6858      	ldr	r0, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	3314      	adds	r3, #20
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2201      	movs	r2, #1
 8001d48:	2173      	movs	r1, #115	; 0x73
 8001d4a:	4798      	blx	r3

	// Perform soft reset
	mDevice->writeRegister( DolbyDecoder_STA310::SOFT_RESET, 1 );
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6858      	ldr	r0, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	3314      	adds	r3, #20
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	4798      	blx	r3

	// Write magical breakpoint register
	mDevice->writeRegister( DolbyDecoder_STA310::BREAKPOINT, 8 );
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6858      	ldr	r0, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3314      	adds	r3, #20
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2208      	movs	r2, #8
 8001d70:	212b      	movs	r1, #43	; 0x2b
 8001d72:	4798      	blx	r3

	// Write clock command
	mDevice->writeRegister( DolbyDecoder_STA310::CLOCK_CMD, 0 );
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6858      	ldr	r0, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3314      	adds	r3, #20
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2200      	movs	r2, #0
 8001d84:	213a      	movs	r1, #58	; 0x3a
 8001d86:	4798      	blx	r3

	int attempts = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
	while ( attempts < 5 && !mInitialized ) {
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	dc1d      	bgt.n	8001dce <_ZN19DolbyDecoder_STA3109softResetEv+0xa4>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7a1b      	ldrb	r3, [r3, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d119      	bne.n	8001dce <_ZN19DolbyDecoder_STA3109softResetEv+0xa4>
		// We need to check for the device to say it's ready
		I2C_RESULT result = mDevice->readRegister( 0xff );
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3318      	adds	r3, #24
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	21ff      	movs	r1, #255	; 0xff
 8001daa:	4610      	mov	r0, r2
 8001dac:	4798      	blx	r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	817b      	strh	r3, [r7, #10]
		if ( result == 1 ) {
 8001db2:	897b      	ldrh	r3, [r7, #10]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d103      	bne.n	8001dc0 <_ZN19DolbyDecoder_STA3109softResetEv+0x96>
			// Device is ready
			mInitialized = true;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	721a      	strb	r2, [r3, #8]
 8001dbe:	e7e5      	b.n	8001d8c <_ZN19DolbyDecoder_STA3109softResetEv+0x62>
		} else {
			attempts++;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]

			// if it's not ready, let's wait 5ms and try again
			osDelay( 5 );
 8001dc6:	2005      	movs	r0, #5
 8001dc8:	f004 f9ee 	bl	80061a8 <osDelay>
	while ( attempts < 5 && !mInitialized ) {
 8001dcc:	e7de      	b.n	8001d8c <_ZN19DolbyDecoder_STA3109softResetEv+0x62>
	}

	if ( !mInitialized ) {
		// this is an error condition we should deal with
	}
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <_ZN3I2CC1ERKS_>:
class I2C {
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	4a0c      	ldr	r2, [pc, #48]	; (8001e14 <_ZN3I2CC1ERKS_+0x3c>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	1d10      	adds	r0, r2, #4
 8001dee:	3304      	adds	r3, #4
 8001df0:	2254      	movs	r2, #84	; 0x54
 8001df2:	4619      	mov	r1, r3
 8001df4:	f006 fece 	bl	8008b94 <memcpy>
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f102 0458 	add.w	r4, r2, #88	; 0x58
 8001e00:	3358      	adds	r3, #88	; 0x58
 8001e02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd90      	pop	{r4, r7, pc}
 8001e12:	bf00      	nop
 8001e14:	08009070 	.word	0x08009070

08001e18 <_ZN10I2C_DeviceC1E3I2Ch>:
	I2C mBus;
	I2C_ADDR mAddr;
public:
	I2C_Device( I2C bus ) : mBus( bus ), mAddr( 0 ) {}
	I2C_Device( I2C_ADDR addr );
	I2C_Device( I2C bus, I2C_ADDR addr ) : mBus( bus), mAddr( addr ) {}
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	4613      	mov	r3, r2
 8001e24:	71fb      	strb	r3, [r7, #7]
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <_ZN10I2C_DeviceC1E3I2Ch+0x34>)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ffd0 	bl	8001dd8 <_ZN3I2CC1ERKS_>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	79fa      	ldrb	r2, [r7, #7]
 8001e3c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	08009080 	.word	0x08009080

08001e50 <_ZN3I2CC1E17I2C_HandleTypeDef>:
#include "I2CDevice.h"
#include <memory>

#define I2C_ERROR -1

I2C::I2C( I2C_HandleTypeDef bus ) : mI2C( bus ) {
 8001e50:	b084      	sub	sp, #16
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	f107 0014 	add.w	r0, r7, #20
 8001e5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001e62:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <_ZN3I2CC1E17I2C_HandleTypeDef+0x48>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	f107 0114 	add.w	r1, r7, #20
 8001e70:	2254      	movs	r2, #84	; 0x54
 8001e72:	4618      	mov	r0, r3
 8001e74:	f006 fe8e 	bl	8008b94 <memcpy>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3358      	adds	r3, #88	; 0x58
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub

}
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e92:	b004      	add	sp, #16
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	08009070 	.word	0x08009070

08001e9c <_ZN3I2CD1Ev>:

I2C::~I2C() {
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <_ZN3I2CD1Ev+0x1c>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	08009070 	.word	0x08009070

08001ebc <_ZN3I2CD0Ev>:
I2C::~I2C() {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
}
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ffe9 	bl	8001e9c <_ZN3I2CD1Ev>
 8001eca:	2168      	movs	r1, #104	; 0x68
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f006 fd62 	bl	8008996 <_ZdlPvj>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_ZN3I2C8readByteEh>:

uint8_t
I2C::readByte( I2C_ADDR addr ) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70fb      	strb	r3, [r7, #3]
	int ret = HAL_I2C_Master_Receive( &mI2C, addr, mBuffer, 1, HAL_MAX_DELAY );
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	1d18      	adds	r0, r3, #4
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	b299      	uxth	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2301      	movs	r3, #1
 8001efe:	f001 fd8b 	bl	8003a18 <HAL_I2C_Master_Receive>
 8001f02:	4603      	mov	r3, r0
 8001f04:	60fb      	str	r3, [r7, #12]
	if ( ret == HAL_OK ) {
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d103      	bne.n	8001f14 <_ZN3I2C8readByteEh+0x38>
		return mBuffer[ 0 ];
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f12:	e000      	b.n	8001f16 <_ZN3I2C8readByteEh+0x3a>
	} else {
		return 0;
 8001f14:	2300      	movs	r3, #0
	}
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZN3I2C9writeByteEhh>:

bool
I2C::writeByte( I2C_ADDR addr, uint8_t data ) {
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af02      	add	r7, sp, #8
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	70fb      	strb	r3, [r7, #3]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	70bb      	strb	r3, [r7, #2]
	int ret = HAL_I2C_Master_Transmit( &mI2C, addr, &data, 1, HAL_MAX_DELAY );
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	1d18      	adds	r0, r3, #4
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	b299      	uxth	r1, r3
 8001f36:	1cba      	adds	r2, r7, #2
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f001 fc6c 	bl	800381c <HAL_I2C_Master_Transmit>
 8001f44:	4603      	mov	r3, r0
 8001f46:	60fb      	str	r3, [r7, #12]
	return ( ret == HAL_OK );
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf0c      	ite	eq
 8001f4e:	2301      	moveq	r3, #1
 8001f50:	2300      	movne	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_ZN3I2C13writeRegisterEhhh>:
	int ret = HAL_I2C_Master_Transmit( &mI2C, addr, data, size, HAL_MAX_DELAY );
	return ( ret == HAL_OK );
}

bool
I2C::writeRegister( I2C_ADDR addr, uint8_t reg, uint8_t value ) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af04      	add	r7, sp, #16
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	4608      	mov	r0, r1
 8001f66:	4611      	mov	r1, r2
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	70fb      	strb	r3, [r7, #3]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	70bb      	strb	r3, [r7, #2]
 8001f72:	4613      	mov	r3, r2
 8001f74:	707b      	strb	r3, [r7, #1]
	int ret =  HAL_I2C_Mem_Write( &mI2C, addr, reg, 1, &value, sizeof( value ), HAL_MAX_DELAY );
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	1d18      	adds	r0, r3, #4
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	b299      	uxth	r1, r3
 8001f7e:	78bb      	ldrb	r3, [r7, #2]
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f86:	9302      	str	r3, [sp, #8]
 8001f88:	2301      	movs	r3, #1
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	1c7b      	adds	r3, r7, #1
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2301      	movs	r3, #1
 8001f92:	f001 ffa1 	bl	8003ed8 <HAL_I2C_Mem_Write>
 8001f96:	4603      	mov	r3, r0
 8001f98:	60fb      	str	r3, [r7, #12]
	return ( ret == HAL_OK );
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <_ZN3I2C12readRegisterEhh>:

I2C_RESULT
I2C::readRegister( I2C_ADDR addr, uint8_t reg ) {
 8001fae:	b590      	push	{r4, r7, lr}
 8001fb0:	b089      	sub	sp, #36	; 0x24
 8001fb2:	af04      	add	r7, sp, #16
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	70fb      	strb	r3, [r7, #3]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	70bb      	strb	r3, [r7, #2]
	int ret =  HAL_I2C_Mem_Read( &mI2C, addr, reg, 1, mBuffer, 1, HAL_MAX_DELAY );
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	1d18      	adds	r0, r3, #4
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	b299      	uxth	r1, r3
 8001fc6:	78bb      	ldrb	r3, [r7, #2]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3358      	adds	r3, #88	; 0x58
 8001fce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001fd2:	9402      	str	r4, [sp, #8]
 8001fd4:	2401      	movs	r4, #1
 8001fd6:	9401      	str	r4, [sp, #4]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f002 f876 	bl	80040cc <HAL_I2C_Mem_Read>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60fb      	str	r3, [r7, #12]
	if ( ret == HAL_OK ) {
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d104      	bne.n	8001ff4 <_ZN3I2C12readRegisterEhh+0x46>
		return mBuffer[0];
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	e001      	b.n	8001ff8 <_ZN3I2C12readRegisterEhh+0x4a>
	} else {
		return I2C_ERROR;
 8001ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd90      	pop	{r4, r7, pc}

08002000 <_ZN3I2C10makeDeviceEh>:

I2C_Device *
I2C::makeDevice( I2C_ADDR addr ) {
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	b0ae      	sub	sp, #184	; 0xb8
 8002004:	af12      	add	r7, sp, #72	; 0x48
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
	return new I2C_Device( mI2C, addr );
 800200c:	687c      	ldr	r4, [r7, #4]
 800200e:	f107 0508 	add.w	r5, r7, #8
 8002012:	4668      	mov	r0, sp
 8002014:	f104 0310 	add.w	r3, r4, #16
 8002018:	2248      	movs	r2, #72	; 0x48
 800201a:	4619      	mov	r1, r3
 800201c:	f006 fdba 	bl	8008b94 <memcpy>
 8002020:	1d23      	adds	r3, r4, #4
 8002022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002024:	4628      	mov	r0, r5
 8002026:	f7ff ff13 	bl	8001e50 <_ZN3I2CC1E17I2C_HandleTypeDef>
 800202a:	f107 0408 	add.w	r4, r7, #8
 800202e:	2070      	movs	r0, #112	; 0x70
 8002030:	f006 fcb3 	bl	800899a <_Znwj>
 8002034:	4603      	mov	r3, r0
 8002036:	461d      	mov	r5, r3
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	461a      	mov	r2, r3
 800203c:	4621      	mov	r1, r4
 800203e:	4628      	mov	r0, r5
 8002040:	f7ff feea 	bl	8001e18 <_ZN10I2C_DeviceC1E3I2Ch>
 8002044:	f107 0308 	add.w	r3, r7, #8
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff27 	bl	8001e9c <_ZN3I2CD1Ev>
 800204e:	462b      	mov	r3, r5
}
 8002050:	4618      	mov	r0, r3
 8002052:	3770      	adds	r7, #112	; 0x70
 8002054:	46bd      	mov	sp, r7
 8002056:	bdb0      	pop	{r4, r5, r7, pc}

08002058 <_ZN10I2C_Device7setAddrEh>:

	virtual ~I2C_Device();

	virtual void setAddr( I2C_ADDR addr ) { mAddr = addr; }
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	70fb      	strb	r3, [r7, #3]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
	...

08002078 <_ZN10I2C_DeviceD1Ev>:
I2C_Device::I2C_Device( I2C_ADDR addr ) : mAddr( addr ) {
	// TODO Auto-generated constructor stub

}

I2C_Device::~I2C_Device() {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	4a06      	ldr	r2, [pc, #24]	; (800209c <_ZN10I2C_DeviceD1Ev+0x24>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff06 	bl	8001e9c <_ZN3I2CD1Ev>
	// TODO Auto-generated destructor stub
}
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	08009080 	.word	0x08009080

080020a0 <_ZN10I2C_DeviceD0Ev>:
I2C_Device::~I2C_Device() {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
}
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ffe5 	bl	8002078 <_ZN10I2C_DeviceD1Ev>
 80020ae:	2170      	movs	r1, #112	; 0x70
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f006 fc70 	bl	8008996 <_ZdlPvj>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_ZN10I2C_Device9writeByteEh>:

bool
I2C_Device::writeByte( uint8_t data ) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
	return mBus.writeByte( mAddr, data );
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	1d18      	adds	r0, r3, #4
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	4619      	mov	r1, r3
 80020da:	f7ff ff20 	bl	8001f1e <_ZN3I2C9writeByteEhh>
 80020de:	4603      	mov	r3, r0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_ZN10I2C_Device13writeRegisterEhh>:

bool
I2C_Device::writeRegister( uint8_t reg, uint8_t value ) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70fb      	strb	r3, [r7, #3]
 80020f4:	4613      	mov	r3, r2
 80020f6:	70bb      	strb	r3, [r7, #2]
	return mBus.writeRegister( mAddr, reg, value );
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	1d18      	adds	r0, r3, #4
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8002102:	78bb      	ldrb	r3, [r7, #2]
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	f7ff ff29 	bl	8001f5c <_ZN3I2C13writeRegisterEhhh>
 800210a:	4603      	mov	r3, r0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <_ZN10I2C_Device12readRegisterEh>:

I2C_RESULT
I2C_Device::readRegister( uint8_t reg ) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	70fb      	strb	r3, [r7, #3]
	return mBus.readRegister( mAddr, reg );
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	1d18      	adds	r0, r3, #4
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	4619      	mov	r1, r3
 800212e:	f7ff ff3e 	bl	8001fae <_ZN3I2C12readRegisterEhh>
 8002132:	4603      	mov	r3, r0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_ZN10I2C_Device8readByteEv>:

uint8_t
I2C_Device::readByte() {
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	return mBus.readByte( mAddr );
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	1d1a      	adds	r2, r3, #4
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800214e:	4619      	mov	r1, r3
 8002150:	4610      	mov	r0, r2
 8002152:	f7ff fec3 	bl	8001edc <_ZN3I2C8readByteEh>
 8002156:	4603      	mov	r3, r0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_ZN3LED6enableEv>:

	virtual void enable() { setState( true ); }
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3310      	adds	r3, #16
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2101      	movs	r1, #1
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <_ZN3LED7disableEv>:
	virtual void disable() { setState( false ); }
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	3310      	adds	r3, #16
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2100      	movs	r1, #0
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <_ZN3LEDC1Ev>:
 */

#include "LED.h"
#include "main.h"

LED::LED() : mPort( 0 ), mPin( 0 ), mCurrentState( 0 ) {
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <_ZN3LEDC1Ev+0x2c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	811a      	strh	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub

}
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	080090a4 	.word	0x080090a4

080021cc <_ZN3LEDD1Ev>:

LED::LED( GPIO_TypeDef* port, uint16_t pin ) : mPort( port ), mPin( pin ), mCurrentState( 0 ) {

}

LED::~LED() {
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <_ZN3LEDD1Ev+0x1c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	080090a4 	.word	0x080090a4

080021ec <_ZN3LEDD0Ev>:
LED::~LED() {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
}
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ffe9 	bl	80021cc <_ZN3LEDD1Ev>
 80021fa:	2110      	movs	r1, #16
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f006 fbca 	bl	8008996 <_ZdlPvj>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <_ZN3LED8setStateEb>:

void
LED::setState( bool enable ) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <_ZN3LED8setStateEb+0x24>
		HAL_GPIO_WritePin( mPort, mPin, GPIO_PIN_SET );
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6858      	ldr	r0, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	891b      	ldrh	r3, [r3, #8]
 8002226:	2201      	movs	r2, #1
 8002228:	4619      	mov	r1, r3
 800222a:	f001 f99b 	bl	8003564 <HAL_GPIO_WritePin>
 800222e:	e007      	b.n	8002240 <_ZN3LED8setStateEb+0x34>
	} else {
		HAL_GPIO_WritePin( mPort, mPin, GPIO_PIN_RESET );
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6858      	ldr	r0, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	891b      	ldrh	r3, [r3, #8]
 8002238:	2200      	movs	r2, #0
 800223a:	4619      	mov	r1, r3
 800223c:	f001 f992 	bl	8003564 <HAL_GPIO_WritePin>
	}

	mCurrentState = enable;
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60da      	str	r2, [r3, #12]
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <_ZN2UIC1Ev>:

#include "UI.h"
#include "main.h"
#include "cmsis_os.h"

UI::UI() {
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	4a04      	ldr	r2, [pc, #16]	; (800226c <_ZN2UIC1Ev+0x1c>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	080090c0 	.word	0x080090c0

08002270 <_ZN2UID1Ev>:

UI::~UI() {
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	4a04      	ldr	r2, [pc, #16]	; (800228c <_ZN2UID1Ev+0x1c>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	080090c0 	.word	0x080090c0

08002290 <_ZN2UID0Ev>:
UI::~UI() {
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
}
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ffe9 	bl	8002270 <_ZN2UID1Ev>
 800229e:	2104      	movs	r1, #4
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f006 fb78 	bl	8008996 <_ZdlPvj>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_ZN2UI3runEv>:

void UI::run() {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	for(;;) {
		osDelay(1);
 80022b8:	2001      	movs	r0, #1
 80022ba:	f003 ff75 	bl	80061a8 <osDelay>
 80022be:	e7fb      	b.n	80022b8 <_ZN2UI3runEv+0x8>

080022c0 <_ZN9Amplifier5getUIEv>:
	DolbyDecoder *mDecoder;
public:
	Amplifier();
	virtual ~Amplifier();

	UI &getUI() { return mUI; }
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <_ZN9Amplifier10getDisplayEv>:
	Display &getDisplay() { return mDisplay; }
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3308      	adds	r3, #8
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b093      	sub	sp, #76	; 0x4c
 80022f0:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022f2:	f000 fe33 	bl	8002f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022f6:	f000 f85d 	bl	80023b4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022fa:	f000 fa41 	bl	8002780 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80022fe:	f000 f8dd 	bl	80024bc <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8002302:	f000 f917 	bl	8002534 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 8002306:	f000 f951 	bl	80025ac <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 800230a:	f000 f9ad 	bl	8002668 <_ZL12MX_TIM4_Initv>
  MX_USART3_UART_Init();
 800230e:	f000 fa09 	bl	8002724 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 8002312:	f000 f89f 	bl	8002454 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  // The main amplifier class

  amplifier.initialize( hi2c1 );
 8002316:	4c19      	ldr	r4, [pc, #100]	; (800237c <main+0x90>)
 8002318:	4668      	mov	r0, sp
 800231a:	f104 030c 	add.w	r3, r4, #12
 800231e:	2248      	movs	r2, #72	; 0x48
 8002320:	4619      	mov	r1, r3
 8002322:	f006 fc37 	bl	8008b94 <memcpy>
 8002326:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800232a:	4815      	ldr	r0, [pc, #84]	; (8002380 <main+0x94>)
 800232c:	f7fe ffdc 	bl	80012e8 <_ZN9Amplifier10initializeE17I2C_HandleTypeDef>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002330:	f003 fe2a 	bl	8005f88 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002334:	4a13      	ldr	r2, [pc, #76]	; (8002384 <main+0x98>)
 8002336:	2100      	movs	r1, #0
 8002338:	4813      	ldr	r0, [pc, #76]	; (8002388 <main+0x9c>)
 800233a:	f003 fe8b 	bl	8006054 <osThreadNew>
 800233e:	4603      	mov	r3, r0
 8002340:	4a12      	ldr	r2, [pc, #72]	; (800238c <main+0xa0>)
 8002342:	6013      	str	r3, [r2, #0]

  /* creation of display */
  displayHandle = osThreadNew(startDisplay, NULL, &display_attributes);
 8002344:	4a12      	ldr	r2, [pc, #72]	; (8002390 <main+0xa4>)
 8002346:	2100      	movs	r1, #0
 8002348:	4812      	ldr	r0, [pc, #72]	; (8002394 <main+0xa8>)
 800234a:	f003 fe83 	bl	8006054 <osThreadNew>
 800234e:	4603      	mov	r3, r0
 8002350:	4a11      	ldr	r2, [pc, #68]	; (8002398 <main+0xac>)
 8002352:	6013      	str	r3, [r2, #0]

  /* creation of audio */
  audioHandle = osThreadNew(startAudio, NULL, &audio_attributes);
 8002354:	4a11      	ldr	r2, [pc, #68]	; (800239c <main+0xb0>)
 8002356:	2100      	movs	r1, #0
 8002358:	4811      	ldr	r0, [pc, #68]	; (80023a0 <main+0xb4>)
 800235a:	f003 fe7b 	bl	8006054 <osThreadNew>
 800235e:	4603      	mov	r3, r0
 8002360:	4a10      	ldr	r2, [pc, #64]	; (80023a4 <main+0xb8>)
 8002362:	6013      	str	r3, [r2, #0]

  /* creation of UI */
  UIHandle = osThreadNew(startUI, NULL, &UI_attributes);
 8002364:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <main+0xbc>)
 8002366:	2100      	movs	r1, #0
 8002368:	4810      	ldr	r0, [pc, #64]	; (80023ac <main+0xc0>)
 800236a:	f003 fe73 	bl	8006054 <osThreadNew>
 800236e:	4603      	mov	r3, r0
 8002370:	4a0f      	ldr	r2, [pc, #60]	; (80023b0 <main+0xc4>)
 8002372:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002374:	f003 fe3a 	bl	8005fec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002378:	e7fe      	b.n	8002378 <main+0x8c>
 800237a:	bf00      	nop
 800237c:	20000098 	.word	0x20000098
 8002380:	20000280 	.word	0x20000280
 8002384:	080090cc 	.word	0x080090cc
 8002388:	08002919 	.word	0x08002919
 800238c:	20000270 	.word	0x20000270
 8002390:	080090f0 	.word	0x080090f0
 8002394:	08002935 	.word	0x08002935
 8002398:	20000274 	.word	0x20000274
 800239c:	08009114 	.word	0x08009114
 80023a0:	0800295d 	.word	0x0800295d
 80023a4:	20000278 	.word	0x20000278
 80023a8:	08009138 	.word	0x08009138
 80023ac:	0800296d 	.word	0x0800296d
 80023b0:	2000027c 	.word	0x2000027c

080023b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b090      	sub	sp, #64	; 0x40
 80023b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ba:	f107 0318 	add.w	r3, r7, #24
 80023be:	2228      	movs	r2, #40	; 0x28
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f006 fbf4 	bl	8008bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	60da      	str	r2, [r3, #12]
 80023d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023e4:	2301      	movs	r3, #1
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e8:	2302      	movs	r3, #2
 80023ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80023f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f8:	f107 0318 	add.w	r3, r7, #24
 80023fc:	4618      	mov	r0, r3
 80023fe:	f002 fd77 	bl	8004ef0 <HAL_RCC_OscConfig>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8002412:	f000 fabf 	bl	8002994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002416:	230f      	movs	r3, #15
 8002418:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800241a:	2302      	movs	r3, #2
 800241c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	2101      	movs	r1, #1
 8002430:	4618      	mov	r0, r3
 8002432:	f002 ffdf 	bl	80053f4 <HAL_RCC_ClockConfig>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf14      	ite	ne
 800243c:	2301      	movne	r3, #1
 800243e:	2300      	moveq	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8002446:	f000 faa5 	bl	8002994 <Error_Handler>
  }
}
 800244a:	bf00      	nop
 800244c:	3740      	adds	r7, #64	; 0x40
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800245a:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <_ZL12MX_I2C1_Initv+0x60>)
 800245c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002460:	4a15      	ldr	r2, [pc, #84]	; (80024b8 <_ZL12MX_I2C1_Initv+0x64>)
 8002462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800246c:	2200      	movs	r2, #0
 800246e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002476:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002478:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800247a:	2200      	movs	r2, #0
 800247c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002486:	2200      	movs	r2, #0
 8002488:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800248c:	2200      	movs	r2, #0
 800248e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002490:	4807      	ldr	r0, [pc, #28]	; (80024b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002492:	f001 f87f 	bl	8003594 <HAL_I2C_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf14      	ite	ne
 800249c:	2301      	movne	r3, #1
 800249e:	2300      	moveq	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80024a6:	f000 fa75 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000098 	.word	0x20000098
 80024b4:	40005400 	.word	0x40005400
 80024b8:	000186a0 	.word	0x000186a0

080024bc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024c0:	4b1a      	ldr	r3, [pc, #104]	; (800252c <_ZL12MX_SPI1_Initv+0x70>)
 80024c2:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <_ZL12MX_SPI1_Initv+0x74>)
 80024c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024c6:	4b19      	ldr	r3, [pc, #100]	; (800252c <_ZL12MX_SPI1_Initv+0x70>)
 80024c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ce:	4b17      	ldr	r3, [pc, #92]	; (800252c <_ZL12MX_SPI1_Initv+0x70>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024d4:	4b15      	ldr	r3, [pc, #84]	; (800252c <_ZL12MX_SPI1_Initv+0x70>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <_ZL12MX_SPI1_Initv+0x70>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <_ZL12MX_SPI1_Initv+0x70>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <_ZL12MX_SPI1_Initv+0x70>)
 80024e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <_ZL12MX_SPI1_Initv+0x70>)
 80024f0:	2208      	movs	r2, #8
 80024f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <_ZL12MX_SPI1_Initv+0x70>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <_ZL12MX_SPI1_Initv+0x70>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <_ZL12MX_SPI1_Initv+0x70>)
 8002502:	2200      	movs	r2, #0
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <_ZL12MX_SPI1_Initv+0x70>)
 8002508:	220a      	movs	r2, #10
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800250c:	4807      	ldr	r0, [pc, #28]	; (800252c <_ZL12MX_SPI1_Initv+0x70>)
 800250e:	f003 f90b 	bl	8005728 <HAL_SPI_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8002522:	f000 fa37 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200000ec 	.word	0x200000ec
 8002530:	40013000 	.word	0x40013000

08002534 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002538:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <_ZL12MX_SPI2_Initv+0x70>)
 800253a:	4a1b      	ldr	r2, [pc, #108]	; (80025a8 <_ZL12MX_SPI2_Initv+0x74>)
 800253c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <_ZL12MX_SPI2_Initv+0x70>)
 8002540:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002544:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002546:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <_ZL12MX_SPI2_Initv+0x70>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <_ZL12MX_SPI2_Initv+0x70>)
 800254e:	2200      	movs	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <_ZL12MX_SPI2_Initv+0x70>)
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <_ZL12MX_SPI2_Initv+0x70>)
 800255a:	2200      	movs	r2, #0
 800255c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <_ZL12MX_SPI2_Initv+0x70>)
 8002560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002564:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <_ZL12MX_SPI2_Initv+0x70>)
 8002568:	2200      	movs	r2, #0
 800256a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800256c:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <_ZL12MX_SPI2_Initv+0x70>)
 800256e:	2200      	movs	r2, #0
 8002570:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <_ZL12MX_SPI2_Initv+0x70>)
 8002574:	2200      	movs	r2, #0
 8002576:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <_ZL12MX_SPI2_Initv+0x70>)
 800257a:	2200      	movs	r2, #0
 800257c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <_ZL12MX_SPI2_Initv+0x70>)
 8002580:	220a      	movs	r2, #10
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002584:	4807      	ldr	r0, [pc, #28]	; (80025a4 <_ZL12MX_SPI2_Initv+0x70>)
 8002586:	f003 f8cf 	bl	8005728 <HAL_SPI_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 800259a:	f000 f9fb 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000144 	.word	0x20000144
 80025a8:	40003800 	.word	0x40003800

080025ac <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08c      	sub	sp, #48	; 0x30
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025b2:	f107 030c 	add.w	r3, r7, #12
 80025b6:	2224      	movs	r2, #36	; 0x24
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f006 faf8 	bl	8008bb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <_ZL12MX_TIM3_Initv+0xb4>)
 80025ca:	4a26      	ldr	r2, [pc, #152]	; (8002664 <_ZL12MX_TIM3_Initv+0xb8>)
 80025cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025ce:	4b24      	ldr	r3, [pc, #144]	; (8002660 <_ZL12MX_TIM3_Initv+0xb4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d4:	4b22      	ldr	r3, [pc, #136]	; (8002660 <_ZL12MX_TIM3_Initv+0xb4>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <_ZL12MX_TIM3_Initv+0xb4>)
 80025dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e2:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <_ZL12MX_TIM3_Initv+0xb4>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e8:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <_ZL12MX_TIM3_Initv+0xb4>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80025ee:	2301      	movs	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025f6:	2301      	movs	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002606:	2301      	movs	r3, #1
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800260a:	2300      	movs	r3, #0
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002612:	f107 030c 	add.w	r3, r7, #12
 8002616:	4619      	mov	r1, r3
 8002618:	4811      	ldr	r0, [pc, #68]	; (8002660 <_ZL12MX_TIM3_Initv+0xb4>)
 800261a:	f003 f909 	bl	8005830 <HAL_TIM_Encoder_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800262e:	f000 f9b1 	bl	8002994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	4619      	mov	r1, r3
 800263e:	4808      	ldr	r0, [pc, #32]	; (8002660 <_ZL12MX_TIM3_Initv+0xb4>)
 8002640:	f003 fb48 	bl	8005cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	bf14      	ite	ne
 800264a:	2301      	movne	r3, #1
 800264c:	2300      	moveq	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8002654:	f000 f99e 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002658:	bf00      	nop
 800265a:	3730      	adds	r7, #48	; 0x30
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	2000019c 	.word	0x2000019c
 8002664:	40000400 	.word	0x40000400

08002668 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	; 0x30
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800266e:	f107 030c 	add.w	r3, r7, #12
 8002672:	2224      	movs	r2, #36	; 0x24
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f006 fa9a 	bl	8008bb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <_ZL12MX_TIM4_Initv+0xb4>)
 8002686:	4a26      	ldr	r2, [pc, #152]	; (8002720 <_ZL12MX_TIM4_Initv+0xb8>)
 8002688:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <_ZL12MX_TIM4_Initv+0xb4>)
 800268c:	2200      	movs	r2, #0
 800268e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002690:	4b22      	ldr	r3, [pc, #136]	; (800271c <_ZL12MX_TIM4_Initv+0xb4>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <_ZL12MX_TIM4_Initv+0xb4>)
 8002698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800269c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269e:	4b1f      	ldr	r3, [pc, #124]	; (800271c <_ZL12MX_TIM4_Initv+0xb4>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a4:	4b1d      	ldr	r3, [pc, #116]	; (800271c <_ZL12MX_TIM4_Initv+0xb4>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026b2:	2301      	movs	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026c2:	2301      	movs	r3, #1
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026c6:	2300      	movs	r3, #0
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	4619      	mov	r1, r3
 80026d4:	4811      	ldr	r0, [pc, #68]	; (800271c <_ZL12MX_TIM4_Initv+0xb4>)
 80026d6:	f003 f8ab 	bl	8005830 <HAL_TIM_Encoder_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 80026ea:	f000 f953 	bl	8002994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	4619      	mov	r1, r3
 80026fa:	4808      	ldr	r0, [pc, #32]	; (800271c <_ZL12MX_TIM4_Initv+0xb4>)
 80026fc:	f003 faea 	bl	8005cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf14      	ite	ne
 8002706:	2301      	movne	r3, #1
 8002708:	2300      	moveq	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8002710:	f000 f940 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002714:	bf00      	nop
 8002716:	3730      	adds	r7, #48	; 0x30
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200001e4 	.word	0x200001e4
 8002720:	40000800 	.word	0x40000800

08002724 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <_ZL19MX_USART3_UART_Initv+0x54>)
 800272a:	4a14      	ldr	r2, [pc, #80]	; (800277c <_ZL19MX_USART3_UART_Initv+0x58>)
 800272c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <_ZL19MX_USART3_UART_Initv+0x54>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <_ZL19MX_USART3_UART_Initv+0x54>)
 800274a:	220c      	movs	r2, #12
 800274c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800275a:	4807      	ldr	r0, [pc, #28]	; (8002778 <_ZL19MX_USART3_UART_Initv+0x54>)
 800275c:	f003 fb38 	bl	8005dd0 <HAL_UART_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf14      	ite	ne
 8002766:	2301      	movne	r3, #1
 8002768:	2300      	moveq	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002770:	f000 f910 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	2000022c 	.word	0x2000022c
 800277c:	40004800 	.word	0x40004800

08002780 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002786:	f107 0318 	add.w	r3, r7, #24
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002794:	4b5a      	ldr	r3, [pc, #360]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	4a59      	ldr	r2, [pc, #356]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 800279a:	f043 0310 	orr.w	r3, r3, #16
 800279e:	6193      	str	r3, [r2, #24]
 80027a0:	4b57      	ldr	r3, [pc, #348]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ac:	4b54      	ldr	r3, [pc, #336]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	4a53      	ldr	r2, [pc, #332]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6193      	str	r3, [r2, #24]
 80027b8:	4b51      	ldr	r3, [pc, #324]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027c4:	4b4e      	ldr	r3, [pc, #312]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	4a4d      	ldr	r2, [pc, #308]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 80027ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ce:	6193      	str	r3, [r2, #24]
 80027d0:	4b4b      	ldr	r3, [pc, #300]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027dc:	4b48      	ldr	r3, [pc, #288]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a47      	ldr	r2, [pc, #284]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 80027e2:	f043 0308 	orr.w	r3, r3, #8
 80027e6:	6193      	str	r3, [r2, #24]
 80027e8:	4b45      	ldr	r3, [pc, #276]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f4:	4b42      	ldr	r3, [pc, #264]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	4a41      	ldr	r2, [pc, #260]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 80027fa:	f043 0320 	orr.w	r3, r3, #32
 80027fe:	6193      	str	r3, [r2, #24]
 8002800:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <_ZL12MX_GPIO_Initv+0x180>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET);
 800280c:	2200      	movs	r2, #0
 800280e:	2108      	movs	r1, #8
 8002810:	483c      	ldr	r0, [pc, #240]	; (8002904 <_ZL12MX_GPIO_Initv+0x184>)
 8002812:	f000 fea7 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 8002816:	2200      	movs	r2, #0
 8002818:	211f      	movs	r1, #31
 800281a:	483b      	ldr	r0, [pc, #236]	; (8002908 <_ZL12MX_GPIO_Initv+0x188>)
 800281c:	f000 fea2 	bl	8003564 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 8002820:	2200      	movs	r2, #0
 8002822:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 8002826:	4839      	ldr	r0, [pc, #228]	; (800290c <_ZL12MX_GPIO_Initv+0x18c>)
 8002828:	f000 fe9c 	bl	8003564 <HAL_GPIO_WritePin>
                          |LED_POWER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_5CH_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
 800282c:	2200      	movs	r2, #0
 800282e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002832:	4837      	ldr	r0, [pc, #220]	; (8002910 <_ZL12MX_GPIO_Initv+0x190>)
 8002834:	f000 fe96 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_MUTE_Pin */
  GPIO_InitStruct.Pin = LED_MUTE_Pin;
 8002838:	2308      	movs	r3, #8
 800283a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283c:	2301      	movs	r3, #1
 800283e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2302      	movs	r3, #2
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_MUTE_GPIO_Port, &GPIO_InitStruct);
 8002848:	f107 0318 	add.w	r3, r7, #24
 800284c:	4619      	mov	r1, r3
 800284e:	482d      	ldr	r0, [pc, #180]	; (8002904 <_ZL12MX_GPIO_Initv+0x184>)
 8002850:	f000 fcf4 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PCM_Pin LED_DOLBY_Pin PA2 LED_MUTEA3_Pin
                           PA4 */
  GPIO_InitStruct.Pin = LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 8002854:	231f      	movs	r3, #31
 8002856:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002858:	2301      	movs	r3, #1
 800285a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2302      	movs	r3, #2
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002864:	f107 0318 	add.w	r3, r7, #24
 8002868:	4619      	mov	r1, r3
 800286a:	4827      	ldr	r0, [pc, #156]	; (8002908 <_ZL12MX_GPIO_Initv+0x188>)
 800286c:	f000 fce6 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : SETTING_BATTERY_Pin */
  GPIO_InitStruct.Pin = SETTING_BATTERY_Pin;
 8002870:	2310      	movs	r3, #16
 8002872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SETTING_BATTERY_GPIO_Port, &GPIO_InitStruct);
 800287c:	f107 0318 	add.w	r3, r7, #24
 8002880:	4619      	mov	r1, r3
 8002882:	4820      	ldr	r0, [pc, #128]	; (8002904 <_ZL12MX_GPIO_Initv+0x184>)
 8002884:	f000 fcda 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_1_Pin LED_INPUT_2_Pin LED_INPUT_3_Pin LED_INPUT_4_Pin
                           LED_POWER_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 8002888:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 800288c:	61bb      	str	r3, [r7, #24]
                          |LED_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288e:	2301      	movs	r3, #1
 8002890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2302      	movs	r3, #2
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800289a:	f107 0318 	add.w	r3, r7, #24
 800289e:	4619      	mov	r1, r3
 80028a0:	481a      	ldr	r0, [pc, #104]	; (800290c <_ZL12MX_GPIO_Initv+0x18c>)
 80028a2:	f000 fccb 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_POWER_Pin */
  GPIO_InitStruct.Pin = BUTTON_POWER_Pin;
 80028a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_POWER_GPIO_Port, &GPIO_InitStruct);
 80028b4:	f107 0318 	add.w	r3, r7, #24
 80028b8:	4619      	mov	r1, r3
 80028ba:	4814      	ldr	r0, [pc, #80]	; (800290c <_ZL12MX_GPIO_Initv+0x18c>)
 80028bc:	f000 fcbe 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_5CH_Pin LED_RUN_Pin */
  GPIO_InitStruct.Pin = LED_5CH_Pin|LED_RUN_Pin;
 80028c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2302      	movs	r3, #2
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d2:	f107 0318 	add.w	r3, r7, #24
 80028d6:	4619      	mov	r1, r3
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <_ZL12MX_GPIO_Initv+0x190>)
 80028da:	f000 fcaf 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_VOLUME_Pin BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_VOLUME_Pin|BUTTON_INPUT_Pin;
 80028de:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80028e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028e8:	2301      	movs	r3, #1
 80028ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028ec:	f107 0318 	add.w	r3, r7, #24
 80028f0:	4619      	mov	r1, r3
 80028f2:	4808      	ldr	r0, [pc, #32]	; (8002914 <_ZL12MX_GPIO_Initv+0x194>)
 80028f4:	f000 fca2 	bl	800323c <HAL_GPIO_Init>

}
 80028f8:	bf00      	nop
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	40011000 	.word	0x40011000
 8002908:	40010800 	.word	0x40010800
 800290c:	40011800 	.word	0x40011800
 8002910:	40010c00 	.word	0x40010c00
 8002914:	40011400 	.word	0x40011400

08002918 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  amplifier.run();
 8002920:	4803      	ldr	r0, [pc, #12]	; (8002930 <_Z16StartDefaultTaskPv+0x18>)
 8002922:	f7fe fd31 	bl	8001388 <_ZN9Amplifier3runEv>
  /* USER CODE END 5 */
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000280 	.word	0x20000280

08002934 <_Z12startDisplayPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startDisplay */
void startDisplay(void *argument)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDisplay */
  /* Infinite loop */
  amplifier.getDisplay().run();
 800293c:	4806      	ldr	r0, [pc, #24]	; (8002958 <_Z12startDisplayPv+0x24>)
 800293e:	f7ff fcca 	bl	80022d6 <_ZN9Amplifier10getDisplayEv>
 8002942:	4603      	mov	r3, r0
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	3208      	adds	r2, #8
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	4790      	blx	r2
  /* USER CODE END startDisplay */
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000280 	.word	0x20000280

0800295c <_Z10startAudioPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAudio */
void startAudio(void *argument)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAudio */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002964:	2001      	movs	r0, #1
 8002966:	f003 fc1f 	bl	80061a8 <osDelay>
 800296a:	e7fb      	b.n	8002964 <_Z10startAudioPv+0x8>

0800296c <_Z7startUIPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startUI */
void startUI(void *argument)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUI */
  /* Infinite loop */
	amplifier.getUI().run();
 8002974:	4806      	ldr	r0, [pc, #24]	; (8002990 <_Z7startUIPv+0x24>)
 8002976:	f7ff fca3 	bl	80022c0 <_ZN9Amplifier5getUIEv>
 800297a:	4603      	mov	r3, r0
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	3208      	adds	r2, #8
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	4790      	blx	r2
  /* USER CODE END startUI */
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000280 	.word	0x20000280

08002994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002998:	b672      	cpsid	i
}
 800299a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800299c:	e7fe      	b.n	800299c <Error_Handler+0x8>
	...

080029a0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10c      	bne.n	80029ca <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d107      	bne.n	80029ca <_Z41__static_initialization_and_destruction_0ii+0x2a>
Amplifier amplifier;
 80029ba:	4806      	ldr	r0, [pc, #24]	; (80029d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80029bc:	f7fe fc2c 	bl	8001218 <_ZN9AmplifierC1Ev>
 80029c0:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80029c2:	4906      	ldr	r1, [pc, #24]	; (80029dc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80029c4:	4803      	ldr	r0, [pc, #12]	; (80029d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80029c6:	f005 ffe1 	bl	800898c <__aeabi_atexit>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000280 	.word	0x20000280
 80029d8:	20000000 	.word	0x20000000
 80029dc:	08001279 	.word	0x08001279

080029e0 <_GLOBAL__sub_I_hi2c1>:
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029e8:	2001      	movs	r0, #1
 80029ea:	f7ff ffd9 	bl	80029a0 <_Z41__static_initialization_and_destruction_0ii>
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029f6:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_MspInit+0x68>)
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_MspInit+0x68>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6193      	str	r3, [r2, #24]
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_MspInit+0x68>)
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_MspInit+0x68>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	4a11      	ldr	r2, [pc, #68]	; (8002a58 <HAL_MspInit+0x68>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a18:	61d3      	str	r3, [r2, #28]
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_MspInit+0x68>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	210f      	movs	r1, #15
 8002a2a:	f06f 0001 	mvn.w	r0, #1
 8002a2e:	f000 fbce 	bl	80031ce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_MspInit+0x6c>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <HAL_MspInit+0x6c>)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40010000 	.word	0x40010000

08002a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 0310 	add.w	r3, r7, #16
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a15      	ldr	r2, [pc, #84]	; (8002ad0 <HAL_I2C_MspInit+0x70>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d123      	bne.n	8002ac8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_I2C_MspInit+0x74>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <HAL_I2C_MspInit+0x74>)
 8002a86:	f043 0308 	orr.w	r3, r3, #8
 8002a8a:	6193      	str	r3, [r2, #24]
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <HAL_I2C_MspInit+0x74>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a98:	23c0      	movs	r3, #192	; 0xc0
 8002a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a9c:	2312      	movs	r3, #18
 8002a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa4:	f107 0310 	add.w	r3, r7, #16
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	480b      	ldr	r0, [pc, #44]	; (8002ad8 <HAL_I2C_MspInit+0x78>)
 8002aac:	f000 fbc6 	bl	800323c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <HAL_I2C_MspInit+0x74>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <HAL_I2C_MspInit+0x74>)
 8002ab6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aba:	61d3      	str	r3, [r2, #28]
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_I2C_MspInit+0x74>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ac8:	bf00      	nop
 8002aca:	3720      	adds	r7, #32
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40005400 	.word	0x40005400
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40010c00 	.word	0x40010c00

08002adc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0318 	add.w	r3, r7, #24
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a37      	ldr	r2, [pc, #220]	; (8002bd4 <HAL_SPI_MspInit+0xf8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d130      	bne.n	8002b5e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002afc:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_SPI_MspInit+0xfc>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	4a35      	ldr	r2, [pc, #212]	; (8002bd8 <HAL_SPI_MspInit+0xfc>)
 8002b02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b06:	6193      	str	r3, [r2, #24]
 8002b08:	4b33      	ldr	r3, [pc, #204]	; (8002bd8 <HAL_SPI_MspInit+0xfc>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b14:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <HAL_SPI_MspInit+0xfc>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	4a2f      	ldr	r2, [pc, #188]	; (8002bd8 <HAL_SPI_MspInit+0xfc>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6193      	str	r3, [r2, #24]
 8002b20:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <HAL_SPI_MspInit+0xfc>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b2c:	23a0      	movs	r3, #160	; 0xa0
 8002b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b30:	2302      	movs	r3, #2
 8002b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b34:	2303      	movs	r3, #3
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b38:	f107 0318 	add.w	r3, r7, #24
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4827      	ldr	r0, [pc, #156]	; (8002bdc <HAL_SPI_MspInit+0x100>)
 8002b40:	f000 fb7c 	bl	800323c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b44:	2340      	movs	r3, #64	; 0x40
 8002b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b50:	f107 0318 	add.w	r3, r7, #24
 8002b54:	4619      	mov	r1, r3
 8002b56:	4821      	ldr	r0, [pc, #132]	; (8002bdc <HAL_SPI_MspInit+0x100>)
 8002b58:	f000 fb70 	bl	800323c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b5c:	e036      	b.n	8002bcc <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <HAL_SPI_MspInit+0x104>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d131      	bne.n	8002bcc <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <HAL_SPI_MspInit+0xfc>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	4a1a      	ldr	r2, [pc, #104]	; (8002bd8 <HAL_SPI_MspInit+0xfc>)
 8002b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b72:	61d3      	str	r3, [r2, #28]
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <HAL_SPI_MspInit+0xfc>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b80:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <HAL_SPI_MspInit+0xfc>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <HAL_SPI_MspInit+0xfc>)
 8002b86:	f043 0308 	orr.w	r3, r3, #8
 8002b8a:	6193      	str	r3, [r2, #24]
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_SPI_MspInit+0xfc>)
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002b98:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba6:	f107 0318 	add.w	r3, r7, #24
 8002baa:	4619      	mov	r1, r3
 8002bac:	480d      	ldr	r0, [pc, #52]	; (8002be4 <HAL_SPI_MspInit+0x108>)
 8002bae:	f000 fb45 	bl	800323c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002bb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc0:	f107 0318 	add.w	r3, r7, #24
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4807      	ldr	r0, [pc, #28]	; (8002be4 <HAL_SPI_MspInit+0x108>)
 8002bc8:	f000 fb38 	bl	800323c <HAL_GPIO_Init>
}
 8002bcc:	bf00      	nop
 8002bce:	3728      	adds	r7, #40	; 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40013000 	.word	0x40013000
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40010800 	.word	0x40010800
 8002be0:	40003800 	.word	0x40003800
 8002be4:	40010c00 	.word	0x40010c00

08002be8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08c      	sub	sp, #48	; 0x30
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 0318 	add.w	r3, r7, #24
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a43      	ldr	r2, [pc, #268]	; (8002d10 <HAL_TIM_Encoder_MspInit+0x128>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d13e      	bne.n	8002c86 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c08:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	4a41      	ldr	r2, [pc, #260]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002c0e:	f043 0302 	orr.w	r3, r3, #2
 8002c12:	61d3      	str	r3, [r2, #28]
 8002c14:	4b3f      	ldr	r3, [pc, #252]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c20:	4b3c      	ldr	r3, [pc, #240]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	4a3b      	ldr	r2, [pc, #236]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002c26:	f043 0310 	orr.w	r3, r3, #16
 8002c2a:	6193      	str	r3, [r2, #24]
 8002c2c:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c38:	23c0      	movs	r3, #192	; 0xc0
 8002c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c44:	f107 0318 	add.w	r3, r7, #24
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4833      	ldr	r0, [pc, #204]	; (8002d18 <HAL_TIM_Encoder_MspInit+0x130>)
 8002c4c:	f000 faf6 	bl	800323c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002c50:	4b32      	ldr	r3, [pc, #200]	; (8002d1c <HAL_TIM_Encoder_MspInit+0x134>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c6e:	4a2b      	ldr	r2, [pc, #172]	; (8002d1c <HAL_TIM_Encoder_MspInit+0x134>)
 8002c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c72:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002c74:	2200      	movs	r2, #0
 8002c76:	2105      	movs	r1, #5
 8002c78:	201d      	movs	r0, #29
 8002c7a:	f000 faa8 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c7e:	201d      	movs	r0, #29
 8002c80:	f000 fac1 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c84:	e03f      	b.n	8002d06 <HAL_TIM_Encoder_MspInit+0x11e>
  else if(htim_encoder->Instance==TIM4)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <HAL_TIM_Encoder_MspInit+0x138>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d13a      	bne.n	8002d06 <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c90:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	61d3      	str	r3, [r2, #28]
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	4a19      	ldr	r2, [pc, #100]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002cae:	f043 0320 	orr.w	r3, r3, #32
 8002cb2:	6193      	str	r3, [r2, #24]
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002cc0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cce:	f107 0318 	add.w	r3, r7, #24
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4813      	ldr	r0, [pc, #76]	; (8002d24 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002cd6:	f000 fab1 	bl	800323c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <HAL_TIM_Encoder_MspInit+0x134>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf0:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <HAL_TIM_Encoder_MspInit+0x134>)
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2105      	movs	r1, #5
 8002cfa:	201e      	movs	r0, #30
 8002cfc:	f000 fa67 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d00:	201e      	movs	r0, #30
 8002d02:	f000 fa80 	bl	8003206 <HAL_NVIC_EnableIRQ>
}
 8002d06:	bf00      	nop
 8002d08:	3730      	adds	r7, #48	; 0x30
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40011000 	.word	0x40011000
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	40000800 	.word	0x40000800
 8002d24:	40011400 	.word	0x40011400

08002d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a25      	ldr	r2, [pc, #148]	; (8002dd8 <HAL_UART_MspInit+0xb0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d143      	bne.n	8002dd0 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d48:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_UART_MspInit+0xb4>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	4a23      	ldr	r2, [pc, #140]	; (8002ddc <HAL_UART_MspInit+0xb4>)
 8002d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d52:	61d3      	str	r3, [r2, #28]
 8002d54:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <HAL_UART_MspInit+0xb4>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d60:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <HAL_UART_MspInit+0xb4>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <HAL_UART_MspInit+0xb4>)
 8002d66:	f043 0320 	orr.w	r3, r3, #32
 8002d6a:	6193      	str	r3, [r2, #24]
 8002d6c:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <HAL_UART_MspInit+0xb4>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d82:	2303      	movs	r3, #3
 8002d84:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4814      	ldr	r0, [pc, #80]	; (8002de0 <HAL_UART_MspInit+0xb8>)
 8002d8e:	f000 fa55 	bl	800323c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	4619      	mov	r1, r3
 8002da6:	480e      	ldr	r0, [pc, #56]	; (8002de0 <HAL_UART_MspInit+0xb8>)
 8002da8:	f000 fa48 	bl	800323c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_ENABLE();
 8002dac:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_UART_MspInit+0xbc>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	4a06      	ldr	r2, [pc, #24]	; (8002de4 <HAL_UART_MspInit+0xbc>)
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002dd0:	bf00      	nop
 8002dd2:	3728      	adds	r7, #40	; 0x28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40004800 	.word	0x40004800
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40011400 	.word	0x40011400
 8002de4:	40010000 	.word	0x40010000

08002de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <NMI_Handler+0x4>

08002dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002df2:	e7fe      	b.n	8002df2 <HardFault_Handler+0x4>

08002df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002df8:	e7fe      	b.n	8002df8 <MemManage_Handler+0x4>

08002dfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dfe:	e7fe      	b.n	8002dfe <BusFault_Handler+0x4>

08002e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e04:	e7fe      	b.n	8002e04 <UsageFault_Handler+0x4>

08002e06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e16:	f000 f8e7 	bl	8002fe8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002e1a:	f004 fdff 	bl	8007a1c <xTaskGetSchedulerState>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d001      	beq.n	8002e28 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002e24:	f005 fb58 	bl	80084d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e30:	4802      	ldr	r0, [pc, #8]	; (8002e3c <TIM3_IRQHandler+0x10>)
 8002e32:	f002 fd9f 	bl	8005974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000019c 	.word	0x2000019c

08002e40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <TIM4_IRQHandler+0x10>)
 8002e46:	f002 fd95 	bl	8005974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200001e4 	.word	0x200001e4

08002e54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
	return 1;
 8002e58:	2301      	movs	r3, #1
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr

08002e62 <_kill>:

int _kill(int pid, int sig)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e6c:	f005 fe56 	bl	8008b1c <__errno>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2216      	movs	r2, #22
 8002e74:	601a      	str	r2, [r3, #0]
	return -1;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <_exit>:

void _exit (int status)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff ffe7 	bl	8002e62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e94:	e7fe      	b.n	8002e94 <_exit+0x12>
	...

08002e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <_sbrk+0x5c>)
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <_sbrk+0x60>)
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <_sbrk+0x64>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <_sbrk+0x64>)
 8002eb6:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <_sbrk+0x68>)
 8002eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <_sbrk+0x64>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d207      	bcs.n	8002ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec8:	f005 fe28 	bl	8008b1c <__errno>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	220c      	movs	r2, #12
 8002ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ed6:	e009      	b.n	8002eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <_sbrk+0x64>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ede:	4b07      	ldr	r3, [pc, #28]	; (8002efc <_sbrk+0x64>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <_sbrk+0x64>)
 8002ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eea:	68fb      	ldr	r3, [r7, #12]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20010000 	.word	0x20010000
 8002ef8:	00000400 	.word	0x00000400
 8002efc:	20000320 	.word	0x20000320
 8002f00:	20001d48 	.word	0x20001d48

08002f04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f10:	480c      	ldr	r0, [pc, #48]	; (8002f44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f12:	490d      	ldr	r1, [pc, #52]	; (8002f48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f14:	4a0d      	ldr	r2, [pc, #52]	; (8002f4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f18:	e002      	b.n	8002f20 <LoopCopyDataInit>

08002f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f1e:	3304      	adds	r3, #4

08002f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f24:	d3f9      	bcc.n	8002f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f26:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f28:	4c0a      	ldr	r4, [pc, #40]	; (8002f54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f2c:	e001      	b.n	8002f32 <LoopFillZerobss>

08002f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f30:	3204      	adds	r2, #4

08002f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f34:	d3fb      	bcc.n	8002f2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f36:	f7ff ffe5 	bl	8002f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f3a:	f005 fdf5 	bl	8008b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f3e:	f7ff f9d5 	bl	80022ec <main>
  bx lr
 8002f42:	4770      	bx	lr
  ldr r0, =_sdata
 8002f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f48:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002f4c:	080093c0 	.word	0x080093c0
  ldr r2, =_sbss
 8002f50:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002f54:	20001d44 	.word	0x20001d44

08002f58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f58:	e7fe      	b.n	8002f58 <ADC1_2_IRQHandler>
	...

08002f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <HAL_Init+0x28>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a07      	ldr	r2, [pc, #28]	; (8002f84 <HAL_Init+0x28>)
 8002f66:	f043 0310 	orr.w	r3, r3, #16
 8002f6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f6c:	2003      	movs	r0, #3
 8002f6e:	f000 f923 	bl	80031b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f72:	200f      	movs	r0, #15
 8002f74:	f000 f808 	bl	8002f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f78:	f7ff fd3a 	bl	80029f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40022000 	.word	0x40022000

08002f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f90:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <HAL_InitTick+0x54>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_InitTick+0x58>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f93b 	bl	8003222 <HAL_SYSTICK_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e00e      	b.n	8002fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b0f      	cmp	r3, #15
 8002fba:	d80a      	bhi.n	8002fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fc4:	f000 f903 	bl	80031ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc8:	4a06      	ldr	r2, [pc, #24]	; (8002fe4 <HAL_InitTick+0x5c>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e000      	b.n	8002fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000004 	.word	0x20000004
 8002fe0:	2000000c 	.word	0x2000000c
 8002fe4:	20000008 	.word	0x20000008

08002fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_IncTick+0x1c>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_IncTick+0x20>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	4a03      	ldr	r2, [pc, #12]	; (8003008 <HAL_IncTick+0x20>)
 8002ffa:	6013      	str	r3, [r2, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	2000000c 	.word	0x2000000c
 8003008:	20000324 	.word	0x20000324

0800300c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return uwTick;
 8003010:	4b02      	ldr	r3, [pc, #8]	; (800301c <HAL_GetTick+0x10>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	20000324 	.word	0x20000324

08003020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800303c:	4013      	ands	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800304c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003052:	4a04      	ldr	r2, [pc, #16]	; (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	60d3      	str	r3, [r2, #12]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <__NVIC_GetPriorityGrouping+0x18>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	f003 0307 	and.w	r3, r3, #7
}
 8003076:	4618      	mov	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	2b00      	cmp	r3, #0
 8003094:	db0b      	blt.n	80030ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	f003 021f 	and.w	r2, r3, #31
 800309c:	4906      	ldr	r1, [pc, #24]	; (80030b8 <__NVIC_EnableIRQ+0x34>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2001      	movs	r0, #1
 80030a6:	fa00 f202 	lsl.w	r2, r0, r2
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	e000e100 	.word	0xe000e100

080030bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	db0a      	blt.n	80030e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	490c      	ldr	r1, [pc, #48]	; (8003108 <__NVIC_SetPriority+0x4c>)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	440b      	add	r3, r1
 80030e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e4:	e00a      	b.n	80030fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4908      	ldr	r1, [pc, #32]	; (800310c <__NVIC_SetPriority+0x50>)
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	3b04      	subs	r3, #4
 80030f4:	0112      	lsls	r2, r2, #4
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	440b      	add	r3, r1
 80030fa:	761a      	strb	r2, [r3, #24]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e000e100 	.word	0xe000e100
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f1c3 0307 	rsb	r3, r3, #7
 800312a:	2b04      	cmp	r3, #4
 800312c:	bf28      	it	cs
 800312e:	2304      	movcs	r3, #4
 8003130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3304      	adds	r3, #4
 8003136:	2b06      	cmp	r3, #6
 8003138:	d902      	bls.n	8003140 <NVIC_EncodePriority+0x30>
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3b03      	subs	r3, #3
 800313e:	e000      	b.n	8003142 <NVIC_EncodePriority+0x32>
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43da      	mvns	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	401a      	ands	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003158:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	43d9      	mvns	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003168:	4313      	orrs	r3, r2
         );
}
 800316a:	4618      	mov	r0, r3
 800316c:	3724      	adds	r7, #36	; 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3b01      	subs	r3, #1
 8003180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003184:	d301      	bcc.n	800318a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003186:	2301      	movs	r3, #1
 8003188:	e00f      	b.n	80031aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800318a:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <SysTick_Config+0x40>)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3b01      	subs	r3, #1
 8003190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003192:	210f      	movs	r1, #15
 8003194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003198:	f7ff ff90 	bl	80030bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <SysTick_Config+0x40>)
 800319e:	2200      	movs	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031a2:	4b04      	ldr	r3, [pc, #16]	; (80031b4 <SysTick_Config+0x40>)
 80031a4:	2207      	movs	r2, #7
 80031a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	e000e010 	.word	0xe000e010

080031b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ff2d 	bl	8003020 <__NVIC_SetPriorityGrouping>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b086      	sub	sp, #24
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e0:	f7ff ff42 	bl	8003068 <__NVIC_GetPriorityGrouping>
 80031e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	6978      	ldr	r0, [r7, #20]
 80031ec:	f7ff ff90 	bl	8003110 <NVIC_EncodePriority>
 80031f0:	4602      	mov	r2, r0
 80031f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff5f 	bl	80030bc <__NVIC_SetPriority>
}
 80031fe:	bf00      	nop
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff35 	bl	8003084 <__NVIC_EnableIRQ>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff ffa2 	bl	8003174 <SysTick_Config>
 8003230:	4603      	mov	r3, r0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800323c:	b480      	push	{r7}
 800323e:	b08b      	sub	sp, #44	; 0x2c
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800324e:	e179      	b.n	8003544 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003250:	2201      	movs	r2, #1
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	429a      	cmp	r2, r3
 800326a:	f040 8168 	bne.w	800353e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4a96      	ldr	r2, [pc, #600]	; (80034cc <HAL_GPIO_Init+0x290>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d05e      	beq.n	8003336 <HAL_GPIO_Init+0xfa>
 8003278:	4a94      	ldr	r2, [pc, #592]	; (80034cc <HAL_GPIO_Init+0x290>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d875      	bhi.n	800336a <HAL_GPIO_Init+0x12e>
 800327e:	4a94      	ldr	r2, [pc, #592]	; (80034d0 <HAL_GPIO_Init+0x294>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d058      	beq.n	8003336 <HAL_GPIO_Init+0xfa>
 8003284:	4a92      	ldr	r2, [pc, #584]	; (80034d0 <HAL_GPIO_Init+0x294>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d86f      	bhi.n	800336a <HAL_GPIO_Init+0x12e>
 800328a:	4a92      	ldr	r2, [pc, #584]	; (80034d4 <HAL_GPIO_Init+0x298>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d052      	beq.n	8003336 <HAL_GPIO_Init+0xfa>
 8003290:	4a90      	ldr	r2, [pc, #576]	; (80034d4 <HAL_GPIO_Init+0x298>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d869      	bhi.n	800336a <HAL_GPIO_Init+0x12e>
 8003296:	4a90      	ldr	r2, [pc, #576]	; (80034d8 <HAL_GPIO_Init+0x29c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d04c      	beq.n	8003336 <HAL_GPIO_Init+0xfa>
 800329c:	4a8e      	ldr	r2, [pc, #568]	; (80034d8 <HAL_GPIO_Init+0x29c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d863      	bhi.n	800336a <HAL_GPIO_Init+0x12e>
 80032a2:	4a8e      	ldr	r2, [pc, #568]	; (80034dc <HAL_GPIO_Init+0x2a0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d046      	beq.n	8003336 <HAL_GPIO_Init+0xfa>
 80032a8:	4a8c      	ldr	r2, [pc, #560]	; (80034dc <HAL_GPIO_Init+0x2a0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d85d      	bhi.n	800336a <HAL_GPIO_Init+0x12e>
 80032ae:	2b12      	cmp	r3, #18
 80032b0:	d82a      	bhi.n	8003308 <HAL_GPIO_Init+0xcc>
 80032b2:	2b12      	cmp	r3, #18
 80032b4:	d859      	bhi.n	800336a <HAL_GPIO_Init+0x12e>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <HAL_GPIO_Init+0x80>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	08003337 	.word	0x08003337
 80032c0:	08003311 	.word	0x08003311
 80032c4:	08003323 	.word	0x08003323
 80032c8:	08003365 	.word	0x08003365
 80032cc:	0800336b 	.word	0x0800336b
 80032d0:	0800336b 	.word	0x0800336b
 80032d4:	0800336b 	.word	0x0800336b
 80032d8:	0800336b 	.word	0x0800336b
 80032dc:	0800336b 	.word	0x0800336b
 80032e0:	0800336b 	.word	0x0800336b
 80032e4:	0800336b 	.word	0x0800336b
 80032e8:	0800336b 	.word	0x0800336b
 80032ec:	0800336b 	.word	0x0800336b
 80032f0:	0800336b 	.word	0x0800336b
 80032f4:	0800336b 	.word	0x0800336b
 80032f8:	0800336b 	.word	0x0800336b
 80032fc:	0800336b 	.word	0x0800336b
 8003300:	08003319 	.word	0x08003319
 8003304:	0800332d 	.word	0x0800332d
 8003308:	4a75      	ldr	r2, [pc, #468]	; (80034e0 <HAL_GPIO_Init+0x2a4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800330e:	e02c      	b.n	800336a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	623b      	str	r3, [r7, #32]
          break;
 8003316:	e029      	b.n	800336c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	3304      	adds	r3, #4
 800331e:	623b      	str	r3, [r7, #32]
          break;
 8003320:	e024      	b.n	800336c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	3308      	adds	r3, #8
 8003328:	623b      	str	r3, [r7, #32]
          break;
 800332a:	e01f      	b.n	800336c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	330c      	adds	r3, #12
 8003332:	623b      	str	r3, [r7, #32]
          break;
 8003334:	e01a      	b.n	800336c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d102      	bne.n	8003344 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800333e:	2304      	movs	r3, #4
 8003340:	623b      	str	r3, [r7, #32]
          break;
 8003342:	e013      	b.n	800336c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d105      	bne.n	8003358 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800334c:	2308      	movs	r3, #8
 800334e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	611a      	str	r2, [r3, #16]
          break;
 8003356:	e009      	b.n	800336c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003358:	2308      	movs	r3, #8
 800335a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	615a      	str	r2, [r3, #20]
          break;
 8003362:	e003      	b.n	800336c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003364:	2300      	movs	r3, #0
 8003366:	623b      	str	r3, [r7, #32]
          break;
 8003368:	e000      	b.n	800336c <HAL_GPIO_Init+0x130>
          break;
 800336a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2bff      	cmp	r3, #255	; 0xff
 8003370:	d801      	bhi.n	8003376 <HAL_GPIO_Init+0x13a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	e001      	b.n	800337a <HAL_GPIO_Init+0x13e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3304      	adds	r3, #4
 800337a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2bff      	cmp	r3, #255	; 0xff
 8003380:	d802      	bhi.n	8003388 <HAL_GPIO_Init+0x14c>
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	e002      	b.n	800338e <HAL_GPIO_Init+0x152>
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	3b08      	subs	r3, #8
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	210f      	movs	r1, #15
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	fa01 f303 	lsl.w	r3, r1, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	401a      	ands	r2, r3
 80033a0:	6a39      	ldr	r1, [r7, #32]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	431a      	orrs	r2, r3
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80c1 	beq.w	800353e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033bc:	4b49      	ldr	r3, [pc, #292]	; (80034e4 <HAL_GPIO_Init+0x2a8>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	4a48      	ldr	r2, [pc, #288]	; (80034e4 <HAL_GPIO_Init+0x2a8>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6193      	str	r3, [r2, #24]
 80033c8:	4b46      	ldr	r3, [pc, #280]	; (80034e4 <HAL_GPIO_Init+0x2a8>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033d4:	4a44      	ldr	r2, [pc, #272]	; (80034e8 <HAL_GPIO_Init+0x2ac>)
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	089b      	lsrs	r3, r3, #2
 80033da:	3302      	adds	r3, #2
 80033dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4013      	ands	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a3c      	ldr	r2, [pc, #240]	; (80034ec <HAL_GPIO_Init+0x2b0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d01f      	beq.n	8003440 <HAL_GPIO_Init+0x204>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a3b      	ldr	r2, [pc, #236]	; (80034f0 <HAL_GPIO_Init+0x2b4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d019      	beq.n	800343c <HAL_GPIO_Init+0x200>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a3a      	ldr	r2, [pc, #232]	; (80034f4 <HAL_GPIO_Init+0x2b8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <HAL_GPIO_Init+0x1fc>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a39      	ldr	r2, [pc, #228]	; (80034f8 <HAL_GPIO_Init+0x2bc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00d      	beq.n	8003434 <HAL_GPIO_Init+0x1f8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a38      	ldr	r2, [pc, #224]	; (80034fc <HAL_GPIO_Init+0x2c0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d007      	beq.n	8003430 <HAL_GPIO_Init+0x1f4>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a37      	ldr	r2, [pc, #220]	; (8003500 <HAL_GPIO_Init+0x2c4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_GPIO_Init+0x1f0>
 8003428:	2305      	movs	r3, #5
 800342a:	e00a      	b.n	8003442 <HAL_GPIO_Init+0x206>
 800342c:	2306      	movs	r3, #6
 800342e:	e008      	b.n	8003442 <HAL_GPIO_Init+0x206>
 8003430:	2304      	movs	r3, #4
 8003432:	e006      	b.n	8003442 <HAL_GPIO_Init+0x206>
 8003434:	2303      	movs	r3, #3
 8003436:	e004      	b.n	8003442 <HAL_GPIO_Init+0x206>
 8003438:	2302      	movs	r3, #2
 800343a:	e002      	b.n	8003442 <HAL_GPIO_Init+0x206>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <HAL_GPIO_Init+0x206>
 8003440:	2300      	movs	r3, #0
 8003442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003444:	f002 0203 	and.w	r2, r2, #3
 8003448:	0092      	lsls	r2, r2, #2
 800344a:	4093      	lsls	r3, r2
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003452:	4925      	ldr	r1, [pc, #148]	; (80034e8 <HAL_GPIO_Init+0x2ac>)
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	089b      	lsrs	r3, r3, #2
 8003458:	3302      	adds	r3, #2
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d006      	beq.n	800347a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <HAL_GPIO_Init+0x2c8>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4924      	ldr	r1, [pc, #144]	; (8003504 <HAL_GPIO_Init+0x2c8>)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	4313      	orrs	r3, r2
 8003476:	600b      	str	r3, [r1, #0]
 8003478:	e006      	b.n	8003488 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800347a:	4b22      	ldr	r3, [pc, #136]	; (8003504 <HAL_GPIO_Init+0x2c8>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	43db      	mvns	r3, r3
 8003482:	4920      	ldr	r1, [pc, #128]	; (8003504 <HAL_GPIO_Init+0x2c8>)
 8003484:	4013      	ands	r3, r2
 8003486:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d006      	beq.n	80034a2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_GPIO_Init+0x2c8>)
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	491a      	ldr	r1, [pc, #104]	; (8003504 <HAL_GPIO_Init+0x2c8>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
 80034a0:	e006      	b.n	80034b0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034a2:	4b18      	ldr	r3, [pc, #96]	; (8003504 <HAL_GPIO_Init+0x2c8>)
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	4916      	ldr	r1, [pc, #88]	; (8003504 <HAL_GPIO_Init+0x2c8>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d025      	beq.n	8003508 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034bc:	4b11      	ldr	r3, [pc, #68]	; (8003504 <HAL_GPIO_Init+0x2c8>)
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	4910      	ldr	r1, [pc, #64]	; (8003504 <HAL_GPIO_Init+0x2c8>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	608b      	str	r3, [r1, #8]
 80034c8:	e025      	b.n	8003516 <HAL_GPIO_Init+0x2da>
 80034ca:	bf00      	nop
 80034cc:	10320000 	.word	0x10320000
 80034d0:	10310000 	.word	0x10310000
 80034d4:	10220000 	.word	0x10220000
 80034d8:	10210000 	.word	0x10210000
 80034dc:	10120000 	.word	0x10120000
 80034e0:	10110000 	.word	0x10110000
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40010000 	.word	0x40010000
 80034ec:	40010800 	.word	0x40010800
 80034f0:	40010c00 	.word	0x40010c00
 80034f4:	40011000 	.word	0x40011000
 80034f8:	40011400 	.word	0x40011400
 80034fc:	40011800 	.word	0x40011800
 8003500:	40011c00 	.word	0x40011c00
 8003504:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_GPIO_Init+0x324>)
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	43db      	mvns	r3, r3
 8003510:	4913      	ldr	r1, [pc, #76]	; (8003560 <HAL_GPIO_Init+0x324>)
 8003512:	4013      	ands	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d006      	beq.n	8003530 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <HAL_GPIO_Init+0x324>)
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	490e      	ldr	r1, [pc, #56]	; (8003560 <HAL_GPIO_Init+0x324>)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	60cb      	str	r3, [r1, #12]
 800352e:	e006      	b.n	800353e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_GPIO_Init+0x324>)
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	43db      	mvns	r3, r3
 8003538:	4909      	ldr	r1, [pc, #36]	; (8003560 <HAL_GPIO_Init+0x324>)
 800353a:	4013      	ands	r3, r2
 800353c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	3301      	adds	r3, #1
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	fa22 f303 	lsr.w	r3, r2, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	f47f ae7e 	bne.w	8003250 <HAL_GPIO_Init+0x14>
  }
}
 8003554:	bf00      	nop
 8003556:	bf00      	nop
 8003558:	372c      	adds	r7, #44	; 0x2c
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	40010400 	.word	0x40010400

08003564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	807b      	strh	r3, [r7, #2]
 8003570:	4613      	mov	r3, r2
 8003572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003574:	787b      	ldrb	r3, [r7, #1]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800357a:	887a      	ldrh	r2, [r7, #2]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003580:	e003      	b.n	800358a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003582:	887b      	ldrh	r3, [r7, #2]
 8003584:	041a      	lsls	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	611a      	str	r2, [r3, #16]
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr

08003594 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e12b      	b.n	80037fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fa50 	bl	8002a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2224      	movs	r2, #36	; 0x24
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0201 	bic.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035f8:	f002 f850 	bl	800569c <HAL_RCC_GetPCLK1Freq>
 80035fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4a81      	ldr	r2, [pc, #516]	; (8003808 <HAL_I2C_Init+0x274>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d807      	bhi.n	8003618 <HAL_I2C_Init+0x84>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a80      	ldr	r2, [pc, #512]	; (800380c <HAL_I2C_Init+0x278>)
 800360c:	4293      	cmp	r3, r2
 800360e:	bf94      	ite	ls
 8003610:	2301      	movls	r3, #1
 8003612:	2300      	movhi	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	e006      	b.n	8003626 <HAL_I2C_Init+0x92>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a7d      	ldr	r2, [pc, #500]	; (8003810 <HAL_I2C_Init+0x27c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	bf94      	ite	ls
 8003620:	2301      	movls	r3, #1
 8003622:	2300      	movhi	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0e7      	b.n	80037fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a78      	ldr	r2, [pc, #480]	; (8003814 <HAL_I2C_Init+0x280>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	0c9b      	lsrs	r3, r3, #18
 8003638:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a6a      	ldr	r2, [pc, #424]	; (8003808 <HAL_I2C_Init+0x274>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d802      	bhi.n	8003668 <HAL_I2C_Init+0xd4>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	3301      	adds	r3, #1
 8003666:	e009      	b.n	800367c <HAL_I2C_Init+0xe8>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	4a69      	ldr	r2, [pc, #420]	; (8003818 <HAL_I2C_Init+0x284>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	099b      	lsrs	r3, r3, #6
 800367a:	3301      	adds	r3, #1
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	430b      	orrs	r3, r1
 8003682:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800368e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	495c      	ldr	r1, [pc, #368]	; (8003808 <HAL_I2C_Init+0x274>)
 8003698:	428b      	cmp	r3, r1
 800369a:	d819      	bhi.n	80036d0 <HAL_I2C_Init+0x13c>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1e59      	subs	r1, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036aa:	1c59      	adds	r1, r3, #1
 80036ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036b0:	400b      	ands	r3, r1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_I2C_Init+0x138>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1e59      	subs	r1, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ca:	e051      	b.n	8003770 <HAL_I2C_Init+0x1dc>
 80036cc:	2304      	movs	r3, #4
 80036ce:	e04f      	b.n	8003770 <HAL_I2C_Init+0x1dc>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d111      	bne.n	80036fc <HAL_I2C_Init+0x168>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1e58      	subs	r0, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6859      	ldr	r1, [r3, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	440b      	add	r3, r1
 80036e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf0c      	ite	eq
 80036f4:	2301      	moveq	r3, #1
 80036f6:	2300      	movne	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	e012      	b.n	8003722 <HAL_I2C_Init+0x18e>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1e58      	subs	r0, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	0099      	lsls	r1, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003712:	3301      	adds	r3, #1
 8003714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Init+0x196>
 8003726:	2301      	movs	r3, #1
 8003728:	e022      	b.n	8003770 <HAL_I2C_Init+0x1dc>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10e      	bne.n	8003750 <HAL_I2C_Init+0x1bc>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1e58      	subs	r0, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	440b      	add	r3, r1
 8003740:	fbb0 f3f3 	udiv	r3, r0, r3
 8003744:	3301      	adds	r3, #1
 8003746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800374e:	e00f      	b.n	8003770 <HAL_I2C_Init+0x1dc>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1e58      	subs	r0, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	0099      	lsls	r1, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	fbb0 f3f3 	udiv	r3, r0, r3
 8003766:	3301      	adds	r3, #1
 8003768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	6809      	ldr	r1, [r1, #0]
 8003774:	4313      	orrs	r3, r2
 8003776:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69da      	ldr	r2, [r3, #28]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800379e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6911      	ldr	r1, [r2, #16]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68d2      	ldr	r2, [r2, #12]
 80037aa:	4311      	orrs	r1, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	000186a0 	.word	0x000186a0
 800380c:	001e847f 	.word	0x001e847f
 8003810:	003d08ff 	.word	0x003d08ff
 8003814:	431bde83 	.word	0x431bde83
 8003818:	10624dd3 	.word	0x10624dd3

0800381c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	461a      	mov	r2, r3
 8003828:	460b      	mov	r3, r1
 800382a:	817b      	strh	r3, [r7, #10]
 800382c:	4613      	mov	r3, r2
 800382e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003830:	f7ff fbec 	bl	800300c <HAL_GetTick>
 8003834:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b20      	cmp	r3, #32
 8003840:	f040 80e0 	bne.w	8003a04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	2319      	movs	r3, #25
 800384a:	2201      	movs	r2, #1
 800384c:	4970      	ldr	r1, [pc, #448]	; (8003a10 <HAL_I2C_Master_Transmit+0x1f4>)
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f001 f972 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800385a:	2302      	movs	r3, #2
 800385c:	e0d3      	b.n	8003a06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_I2C_Master_Transmit+0x50>
 8003868:	2302      	movs	r3, #2
 800386a:	e0cc      	b.n	8003a06 <HAL_I2C_Master_Transmit+0x1ea>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d007      	beq.n	8003892 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0201 	orr.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2221      	movs	r2, #33	; 0x21
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2210      	movs	r2, #16
 80038ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	893a      	ldrh	r2, [r7, #8]
 80038c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4a50      	ldr	r2, [pc, #320]	; (8003a14 <HAL_I2C_Master_Transmit+0x1f8>)
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038d4:	8979      	ldrh	r1, [r7, #10]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	6a3a      	ldr	r2, [r7, #32]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 fe5e 	bl	800459c <I2C_MasterRequestWrite>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e08d      	b.n	8003a06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003900:	e066      	b.n	80039d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	6a39      	ldr	r1, [r7, #32]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f001 f9ec 	bl	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00d      	beq.n	800392e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	2b04      	cmp	r3, #4
 8003918:	d107      	bne.n	800392a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003928:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e06b      	b.n	8003a06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b04      	cmp	r3, #4
 800396a:	d11b      	bne.n	80039a4 <HAL_I2C_Master_Transmit+0x188>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	d017      	beq.n	80039a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	781a      	ldrb	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	6a39      	ldr	r1, [r7, #32]
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f001 f9dc 	bl	8004d66 <I2C_WaitOnBTFFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00d      	beq.n	80039d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d107      	bne.n	80039cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e01a      	b.n	8003a06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d194      	bne.n	8003902 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
  }
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	00100002 	.word	0x00100002
 8003a14:	ffff0000 	.word	0xffff0000

08003a18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08c      	sub	sp, #48	; 0x30
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	461a      	mov	r2, r3
 8003a24:	460b      	mov	r3, r1
 8003a26:	817b      	strh	r3, [r7, #10]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a30:	f7ff faec 	bl	800300c <HAL_GetTick>
 8003a34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	f040 823f 	bne.w	8003ec2 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2319      	movs	r3, #25
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	497f      	ldr	r1, [pc, #508]	; (8003c4c <HAL_I2C_Master_Receive+0x234>)
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f001 f872 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e232      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_I2C_Master_Receive+0x54>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e22b      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x4ac>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d007      	beq.n	8003a92 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2222      	movs	r2, #34	; 0x22
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2210      	movs	r2, #16
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	893a      	ldrh	r2, [r7, #8]
 8003ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4a5f      	ldr	r2, [pc, #380]	; (8003c50 <HAL_I2C_Master_Receive+0x238>)
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ad4:	8979      	ldrh	r1, [r7, #10]
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fde0 	bl	80046a0 <I2C_MasterRequestRead>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e1ec      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d113      	bne.n	8003b1a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	e1c0      	b.n	8003e9c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d11e      	bne.n	8003b60 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b32:	b672      	cpsid	i
}
 8003b34:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	61bb      	str	r3, [r7, #24]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b5c:	b662      	cpsie	i
}
 8003b5e:	e035      	b.n	8003bcc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d11e      	bne.n	8003ba6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b78:	b672      	cpsid	i
}
 8003b7a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ba2:	b662      	cpsie	i
}
 8003ba4:	e012      	b.n	8003bcc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003bcc:	e166      	b.n	8003e9c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	f200 811f 	bhi.w	8003e16 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d123      	bne.n	8003c28 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f001 f8ff 	bl	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e167      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c26:	e139      	b.n	8003e9c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d152      	bne.n	8003cd6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	2200      	movs	r2, #0
 8003c38:	4906      	ldr	r1, [pc, #24]	; (8003c54 <HAL_I2C_Master_Receive+0x23c>)
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 ff7c 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e13c      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x4ac>
 8003c4a:	bf00      	nop
 8003c4c:	00100002 	.word	0x00100002
 8003c50:	ffff0000 	.word	0xffff0000
 8003c54:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c58:	b672      	cpsid	i
}
 8003c5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c9e:	b662      	cpsie	i
}
 8003ca0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cd4:	e0e2      	b.n	8003e9c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	2200      	movs	r2, #0
 8003cde:	497b      	ldr	r1, [pc, #492]	; (8003ecc <HAL_I2C_Master_Receive+0x4b4>)
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 ff29 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0e9      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d00:	b672      	cpsid	i
}
 8003d02:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d36:	4b66      	ldr	r3, [pc, #408]	; (8003ed0 <HAL_I2C_Master_Receive+0x4b8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	08db      	lsrs	r3, r3, #3
 8003d3c:	4a65      	ldr	r2, [pc, #404]	; (8003ed4 <HAL_I2C_Master_Receive+0x4bc>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	0a1a      	lsrs	r2, r3, #8
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	00da      	lsls	r2, r3, #3
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d118      	bne.n	8003d8e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f043 0220 	orr.w	r2, r3, #32
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003d7e:	b662      	cpsie	i
}
 8003d80:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e09a      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d1d9      	bne.n	8003d50 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dde:	b662      	cpsie	i
}
 8003de0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e14:	e042      	b.n	8003e9c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 ffe4 	bl	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e04c      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d118      	bne.n	8003e9c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f47f ae94 	bne.w	8003bce <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e000      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003ec2:	2302      	movs	r3, #2
  }
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3728      	adds	r7, #40	; 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	00010004 	.word	0x00010004
 8003ed0:	20000004 	.word	0x20000004
 8003ed4:	14f8b589 	.word	0x14f8b589

08003ed8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	817b      	strh	r3, [r7, #10]
 8003eea:	460b      	mov	r3, r1
 8003eec:	813b      	strh	r3, [r7, #8]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ef2:	f7ff f88b 	bl	800300c <HAL_GetTick>
 8003ef6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	f040 80d9 	bne.w	80040b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	2319      	movs	r3, #25
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	496d      	ldr	r1, [pc, #436]	; (80040c4 <HAL_I2C_Mem_Write+0x1ec>)
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fe11 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e0cc      	b.n	80040ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_I2C_Mem_Write+0x56>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e0c5      	b.n	80040ba <HAL_I2C_Mem_Write+0x1e2>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d007      	beq.n	8003f54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2221      	movs	r2, #33	; 0x21
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2240      	movs	r2, #64	; 0x40
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a3a      	ldr	r2, [r7, #32]
 8003f7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a4d      	ldr	r2, [pc, #308]	; (80040c8 <HAL_I2C_Mem_Write+0x1f0>)
 8003f94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f96:	88f8      	ldrh	r0, [r7, #6]
 8003f98:	893a      	ldrh	r2, [r7, #8]
 8003f9a:	8979      	ldrh	r1, [r7, #10]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fc48 	bl	800483c <I2C_RequestMemoryWrite>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d052      	beq.n	8004058 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e081      	b.n	80040ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 fe92 	bl	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00d      	beq.n	8003fe2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d107      	bne.n	8003fde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e06b      	b.n	80040ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	781a      	ldrb	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b04      	cmp	r3, #4
 800401e:	d11b      	bne.n	8004058 <HAL_I2C_Mem_Write+0x180>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004024:	2b00      	cmp	r3, #0
 8004026:	d017      	beq.n	8004058 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1aa      	bne.n	8003fb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 fe7e 	bl	8004d66 <I2C_WaitOnBTFFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00d      	beq.n	800408c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	2b04      	cmp	r3, #4
 8004076:	d107      	bne.n	8004088 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004086:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e016      	b.n	80040ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e000      	b.n	80040ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80040b8:	2302      	movs	r3, #2
  }
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	00100002 	.word	0x00100002
 80040c8:	ffff0000 	.word	0xffff0000

080040cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08c      	sub	sp, #48	; 0x30
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	4608      	mov	r0, r1
 80040d6:	4611      	mov	r1, r2
 80040d8:	461a      	mov	r2, r3
 80040da:	4603      	mov	r3, r0
 80040dc:	817b      	strh	r3, [r7, #10]
 80040de:	460b      	mov	r3, r1
 80040e0:	813b      	strh	r3, [r7, #8]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040ea:	f7fe ff8f 	bl	800300c <HAL_GetTick>
 80040ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	f040 8244 	bne.w	8004586 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	2319      	movs	r3, #25
 8004104:	2201      	movs	r2, #1
 8004106:	4982      	ldr	r1, [pc, #520]	; (8004310 <HAL_I2C_Mem_Read+0x244>)
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 fd15 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004114:	2302      	movs	r3, #2
 8004116:	e237      	b.n	8004588 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_I2C_Mem_Read+0x5a>
 8004122:	2302      	movs	r3, #2
 8004124:	e230      	b.n	8004588 <HAL_I2C_Mem_Read+0x4bc>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b01      	cmp	r3, #1
 800413a:	d007      	beq.n	800414c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800415a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2222      	movs	r2, #34	; 0x22
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2240      	movs	r2, #64	; 0x40
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800417c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4a62      	ldr	r2, [pc, #392]	; (8004314 <HAL_I2C_Mem_Read+0x248>)
 800418c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800418e:	88f8      	ldrh	r0, [r7, #6]
 8004190:	893a      	ldrh	r2, [r7, #8]
 8004192:	8979      	ldrh	r1, [r7, #10]
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	4603      	mov	r3, r0
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fbe2 	bl	8004968 <I2C_RequestMemoryRead>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e1ec      	b.n	8004588 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d113      	bne.n	80041de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e1c0      	b.n	8004560 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d11e      	bne.n	8004224 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041f6:	b672      	cpsid	i
}
 80041f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004220:	b662      	cpsie	i
}
 8004222:	e035      	b.n	8004290 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004228:	2b02      	cmp	r3, #2
 800422a:	d11e      	bne.n	800426a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800423a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800423c:	b672      	cpsid	i
}
 800423e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004264:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004266:	b662      	cpsie	i
}
 8004268:	e012      	b.n	8004290 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004278:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004290:	e166      	b.n	8004560 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	2b03      	cmp	r3, #3
 8004298:	f200 811f 	bhi.w	80044da <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d123      	bne.n	80042ec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 fd9d 	bl	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e167      	b.n	8004588 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042ea:	e139      	b.n	8004560 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d152      	bne.n	800439a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fa:	2200      	movs	r2, #0
 80042fc:	4906      	ldr	r1, [pc, #24]	; (8004318 <HAL_I2C_Mem_Read+0x24c>)
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fc1a 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d008      	beq.n	800431c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e13c      	b.n	8004588 <HAL_I2C_Mem_Read+0x4bc>
 800430e:	bf00      	nop
 8004310:	00100002 	.word	0x00100002
 8004314:	ffff0000 	.word	0xffff0000
 8004318:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800431c:	b672      	cpsid	i
}
 800431e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004362:	b662      	cpsie	i
}
 8004364:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004398:	e0e2      	b.n	8004560 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	2200      	movs	r2, #0
 80043a2:	497b      	ldr	r1, [pc, #492]	; (8004590 <HAL_I2C_Mem_Read+0x4c4>)
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fbc7 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0e9      	b.n	8004588 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043c4:	b672      	cpsid	i
}
 80043c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80043fa:	4b66      	ldr	r3, [pc, #408]	; (8004594 <HAL_I2C_Mem_Read+0x4c8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	08db      	lsrs	r3, r3, #3
 8004400:	4a65      	ldr	r2, [pc, #404]	; (8004598 <HAL_I2C_Mem_Read+0x4cc>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	0a1a      	lsrs	r2, r3, #8
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	00da      	lsls	r2, r3, #3
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	3b01      	subs	r3, #1
 8004418:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d118      	bne.n	8004452 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004442:	b662      	cpsie	i
}
 8004444:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e09a      	b.n	8004588 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b04      	cmp	r3, #4
 800445e:	d1d9      	bne.n	8004414 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80044a2:	b662      	cpsie	i
}
 80044a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044d8:	e042      	b.n	8004560 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fc82 	bl	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e04c      	b.n	8004588 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d118      	bne.n	8004560 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004564:	2b00      	cmp	r3, #0
 8004566:	f47f ae94 	bne.w	8004292 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	e000      	b.n	8004588 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004586:	2302      	movs	r3, #2
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	3728      	adds	r7, #40	; 0x28
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	00010004 	.word	0x00010004
 8004594:	20000004 	.word	0x20000004
 8004598:	14f8b589 	.word	0x14f8b589

0800459c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	607a      	str	r2, [r7, #4]
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	460b      	mov	r3, r1
 80045aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d006      	beq.n	80045c6 <I2C_MasterRequestWrite+0x2a>
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d003      	beq.n	80045c6 <I2C_MasterRequestWrite+0x2a>
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045c4:	d108      	bne.n	80045d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e00b      	b.n	80045f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	2b12      	cmp	r3, #18
 80045de:	d107      	bne.n	80045f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fa9b 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00d      	beq.n	8004624 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004616:	d103      	bne.n	8004620 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e035      	b.n	8004690 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800462c:	d108      	bne.n	8004640 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800462e:	897b      	ldrh	r3, [r7, #10]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800463c:	611a      	str	r2, [r3, #16]
 800463e:	e01b      	b.n	8004678 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004640:	897b      	ldrh	r3, [r7, #10]
 8004642:	11db      	asrs	r3, r3, #7
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f003 0306 	and.w	r3, r3, #6
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f063 030f 	orn	r3, r3, #15
 8004650:	b2da      	uxtb	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	490e      	ldr	r1, [pc, #56]	; (8004698 <I2C_MasterRequestWrite+0xfc>)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 fac1 	bl	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e010      	b.n	8004690 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800466e:	897b      	ldrh	r3, [r7, #10]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4907      	ldr	r1, [pc, #28]	; (800469c <I2C_MasterRequestWrite+0x100>)
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fab1 	bl	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	00010008 	.word	0x00010008
 800469c:	00010002 	.word	0x00010002

080046a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	607a      	str	r2, [r7, #4]
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	460b      	mov	r3, r1
 80046ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d006      	beq.n	80046da <I2C_MasterRequestRead+0x3a>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d003      	beq.n	80046da <I2C_MasterRequestRead+0x3a>
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046d8:	d108      	bne.n	80046ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	e00b      	b.n	8004704 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	2b11      	cmp	r3, #17
 80046f2:	d107      	bne.n	8004704 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004702:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fa11 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00d      	beq.n	8004738 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472a:	d103      	bne.n	8004734 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004732:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e079      	b.n	800482c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004740:	d108      	bne.n	8004754 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004742:	897b      	ldrh	r3, [r7, #10]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	b2da      	uxtb	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	611a      	str	r2, [r3, #16]
 8004752:	e05f      	b.n	8004814 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004754:	897b      	ldrh	r3, [r7, #10]
 8004756:	11db      	asrs	r3, r3, #7
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f003 0306 	and.w	r3, r3, #6
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f063 030f 	orn	r3, r3, #15
 8004764:	b2da      	uxtb	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	4930      	ldr	r1, [pc, #192]	; (8004834 <I2C_MasterRequestRead+0x194>)
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fa37 	bl	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e054      	b.n	800482c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004782:	897b      	ldrh	r3, [r7, #10]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4929      	ldr	r1, [pc, #164]	; (8004838 <I2C_MasterRequestRead+0x198>)
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 fa27 	bl	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e044      	b.n	800482c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a2:	2300      	movs	r3, #0
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f9af 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00d      	beq.n	80047fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ee:	d103      	bne.n	80047f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e017      	b.n	800482c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80047fc:	897b      	ldrh	r3, [r7, #10]
 80047fe:	11db      	asrs	r3, r3, #7
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f003 0306 	and.w	r3, r3, #6
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f063 030e 	orn	r3, r3, #14
 800480c:	b2da      	uxtb	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	4907      	ldr	r1, [pc, #28]	; (8004838 <I2C_MasterRequestRead+0x198>)
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f9e3 	bl	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	00010008 	.word	0x00010008
 8004838:	00010002 	.word	0x00010002

0800483c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	4608      	mov	r0, r1
 8004846:	4611      	mov	r1, r2
 8004848:	461a      	mov	r2, r3
 800484a:	4603      	mov	r3, r0
 800484c:	817b      	strh	r3, [r7, #10]
 800484e:	460b      	mov	r3, r1
 8004850:	813b      	strh	r3, [r7, #8]
 8004852:	4613      	mov	r3, r2
 8004854:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004864:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	2200      	movs	r2, #0
 800486e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f960 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00d      	beq.n	800489a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488c:	d103      	bne.n	8004896 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004894:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e05f      	b.n	800495a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800489a:	897b      	ldrh	r3, [r7, #10]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	6a3a      	ldr	r2, [r7, #32]
 80048ae:	492d      	ldr	r1, [pc, #180]	; (8004964 <I2C_RequestMemoryWrite+0x128>)
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f998 	bl	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e04c      	b.n	800495a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d8:	6a39      	ldr	r1, [r7, #32]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fa02 	bl	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00d      	beq.n	8004902 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d107      	bne.n	80048fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e02b      	b.n	800495a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004902:	88fb      	ldrh	r3, [r7, #6]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d105      	bne.n	8004914 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004908:	893b      	ldrh	r3, [r7, #8]
 800490a:	b2da      	uxtb	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	611a      	str	r2, [r3, #16]
 8004912:	e021      	b.n	8004958 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004914:	893b      	ldrh	r3, [r7, #8]
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	b29b      	uxth	r3, r3
 800491a:	b2da      	uxtb	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004924:	6a39      	ldr	r1, [r7, #32]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f9dc 	bl	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00d      	beq.n	800494e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	2b04      	cmp	r3, #4
 8004938:	d107      	bne.n	800494a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004948:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e005      	b.n	800495a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800494e:	893b      	ldrh	r3, [r7, #8]
 8004950:	b2da      	uxtb	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	00010002 	.word	0x00010002

08004968 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	4608      	mov	r0, r1
 8004972:	4611      	mov	r1, r2
 8004974:	461a      	mov	r2, r3
 8004976:	4603      	mov	r3, r0
 8004978:	817b      	strh	r3, [r7, #10]
 800497a:	460b      	mov	r3, r1
 800497c:	813b      	strh	r3, [r7, #8]
 800497e:	4613      	mov	r3, r2
 8004980:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004990:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f8c2 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00d      	beq.n	80049d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c8:	d103      	bne.n	80049d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e0aa      	b.n	8004b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049d6:	897b      	ldrh	r3, [r7, #10]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	6a3a      	ldr	r2, [r7, #32]
 80049ea:	4952      	ldr	r1, [pc, #328]	; (8004b34 <I2C_RequestMemoryRead+0x1cc>)
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f8fa 	bl	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e097      	b.n	8004b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a14:	6a39      	ldr	r1, [r7, #32]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f964 	bl	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00d      	beq.n	8004a3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d107      	bne.n	8004a3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e076      	b.n	8004b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d105      	bne.n	8004a50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a44:	893b      	ldrh	r3, [r7, #8]
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	611a      	str	r2, [r3, #16]
 8004a4e:	e021      	b.n	8004a94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a50:	893b      	ldrh	r3, [r7, #8]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a60:	6a39      	ldr	r1, [r7, #32]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f93e 	bl	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00d      	beq.n	8004a8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d107      	bne.n	8004a86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e050      	b.n	8004b2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a8a:	893b      	ldrh	r3, [r7, #8]
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a96:	6a39      	ldr	r1, [r7, #32]
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f923 	bl	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00d      	beq.n	8004ac0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d107      	bne.n	8004abc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e035      	b.n	8004b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ace:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f82b 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00d      	beq.n	8004b04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af6:	d103      	bne.n	8004b00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e013      	b.n	8004b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b04:	897b      	ldrh	r3, [r7, #10]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	6a3a      	ldr	r2, [r7, #32]
 8004b18:	4906      	ldr	r1, [pc, #24]	; (8004b34 <I2C_RequestMemoryRead+0x1cc>)
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f863 	bl	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	00010002 	.word	0x00010002

08004b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b48:	e025      	b.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b50:	d021      	beq.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b52:	f7fe fa5b 	bl	800300c <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d302      	bcc.n	8004b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d116      	bne.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	f043 0220 	orr.w	r2, r3, #32
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e023      	b.n	8004bde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d10d      	bne.n	8004bbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	43da      	mvns	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4013      	ands	r3, r2
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bf0c      	ite	eq
 8004bb2:	2301      	moveq	r3, #1
 8004bb4:	2300      	movne	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	e00c      	b.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	43da      	mvns	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d0b6      	beq.n	8004b4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
 8004bf2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bf4:	e051      	b.n	8004c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c04:	d123      	bne.n	8004c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	f043 0204 	orr.w	r2, r3, #4
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e046      	b.n	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c54:	d021      	beq.n	8004c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c56:	f7fe f9d9 	bl	800300c <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d302      	bcc.n	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d116      	bne.n	8004c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	f043 0220 	orr.w	r2, r3, #32
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e020      	b.n	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d10c      	bne.n	8004cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	43da      	mvns	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bf14      	ite	ne
 8004cb6:	2301      	movne	r3, #1
 8004cb8:	2300      	moveq	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	e00b      	b.n	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	43da      	mvns	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf14      	ite	ne
 8004cd0:	2301      	movne	r3, #1
 8004cd2:	2300      	moveq	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d18d      	bne.n	8004bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cf0:	e02d      	b.n	8004d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f8ce 	bl	8004e94 <I2C_IsAcknowledgeFailed>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e02d      	b.n	8004d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d08:	d021      	beq.n	8004d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0a:	f7fe f97f 	bl	800300c <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d302      	bcc.n	8004d20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d116      	bne.n	8004d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f043 0220 	orr.w	r2, r3, #32
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e007      	b.n	8004d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b80      	cmp	r3, #128	; 0x80
 8004d5a:	d1ca      	bne.n	8004cf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d72:	e02d      	b.n	8004dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f88d 	bl	8004e94 <I2C_IsAcknowledgeFailed>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e02d      	b.n	8004de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d8a:	d021      	beq.n	8004dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8c:	f7fe f93e 	bl	800300c <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d302      	bcc.n	8004da2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d116      	bne.n	8004dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e007      	b.n	8004de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d1ca      	bne.n	8004d74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004df4:	e042      	b.n	8004e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d119      	bne.n	8004e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0210 	mvn.w	r2, #16
 8004e0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e029      	b.n	8004e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e38:	f7fe f8e8 	bl	800300c <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d302      	bcc.n	8004e4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d116      	bne.n	8004e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	f043 0220 	orr.w	r2, r3, #32
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e007      	b.n	8004e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b40      	cmp	r3, #64	; 0x40
 8004e88:	d1b5      	bne.n	8004df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eaa:	d11b      	bne.n	8004ee4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	f043 0204 	orr.w	r2, r3, #4
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e272      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8087 	beq.w	800501e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f10:	4b92      	ldr	r3, [pc, #584]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 030c 	and.w	r3, r3, #12
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d00c      	beq.n	8004f36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f1c:	4b8f      	ldr	r3, [pc, #572]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 030c 	and.w	r3, r3, #12
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d112      	bne.n	8004f4e <HAL_RCC_OscConfig+0x5e>
 8004f28:	4b8c      	ldr	r3, [pc, #560]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f34:	d10b      	bne.n	8004f4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f36:	4b89      	ldr	r3, [pc, #548]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d06c      	beq.n	800501c <HAL_RCC_OscConfig+0x12c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d168      	bne.n	800501c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e24c      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f56:	d106      	bne.n	8004f66 <HAL_RCC_OscConfig+0x76>
 8004f58:	4b80      	ldr	r3, [pc, #512]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a7f      	ldr	r2, [pc, #508]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	e02e      	b.n	8004fc4 <HAL_RCC_OscConfig+0xd4>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x98>
 8004f6e:	4b7b      	ldr	r3, [pc, #492]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a7a      	ldr	r2, [pc, #488]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	4b78      	ldr	r3, [pc, #480]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a77      	ldr	r2, [pc, #476]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e01d      	b.n	8004fc4 <HAL_RCC_OscConfig+0xd4>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f90:	d10c      	bne.n	8004fac <HAL_RCC_OscConfig+0xbc>
 8004f92:	4b72      	ldr	r3, [pc, #456]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a71      	ldr	r2, [pc, #452]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	4b6f      	ldr	r3, [pc, #444]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a6e      	ldr	r2, [pc, #440]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e00b      	b.n	8004fc4 <HAL_RCC_OscConfig+0xd4>
 8004fac:	4b6b      	ldr	r3, [pc, #428]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a6a      	ldr	r2, [pc, #424]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	4b68      	ldr	r3, [pc, #416]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a67      	ldr	r2, [pc, #412]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d013      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fcc:	f7fe f81e 	bl	800300c <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd4:	f7fe f81a 	bl	800300c <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b64      	cmp	r3, #100	; 0x64
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e200      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe6:	4b5d      	ldr	r3, [pc, #372]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f0      	beq.n	8004fd4 <HAL_RCC_OscConfig+0xe4>
 8004ff2:	e014      	b.n	800501e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff4:	f7fe f80a 	bl	800300c <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ffc:	f7fe f806 	bl	800300c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b64      	cmp	r3, #100	; 0x64
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e1ec      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500e:	4b53      	ldr	r3, [pc, #332]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0x10c>
 800501a:	e000      	b.n	800501e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800501c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d063      	beq.n	80050f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800502a:	4b4c      	ldr	r3, [pc, #304]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005036:	4b49      	ldr	r3, [pc, #292]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f003 030c 	and.w	r3, r3, #12
 800503e:	2b08      	cmp	r3, #8
 8005040:	d11c      	bne.n	800507c <HAL_RCC_OscConfig+0x18c>
 8005042:	4b46      	ldr	r3, [pc, #280]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d116      	bne.n	800507c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800504e:	4b43      	ldr	r3, [pc, #268]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_RCC_OscConfig+0x176>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d001      	beq.n	8005066 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e1c0      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005066:	4b3d      	ldr	r3, [pc, #244]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4939      	ldr	r1, [pc, #228]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800507a:	e03a      	b.n	80050f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d020      	beq.n	80050c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005084:	4b36      	ldr	r3, [pc, #216]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8005086:	2201      	movs	r2, #1
 8005088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508a:	f7fd ffbf 	bl	800300c <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005092:	f7fd ffbb 	bl	800300c <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e1a1      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a4:	4b2d      	ldr	r3, [pc, #180]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b0:	4b2a      	ldr	r3, [pc, #168]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4927      	ldr	r1, [pc, #156]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	600b      	str	r3, [r1, #0]
 80050c4:	e015      	b.n	80050f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c6:	4b26      	ldr	r3, [pc, #152]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050cc:	f7fd ff9e 	bl	800300c <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d4:	f7fd ff9a 	bl	800300c <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e180      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e6:	4b1d      	ldr	r3, [pc, #116]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d03a      	beq.n	8005174 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d019      	beq.n	800513a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005106:	4b17      	ldr	r3, [pc, #92]	; (8005164 <HAL_RCC_OscConfig+0x274>)
 8005108:	2201      	movs	r2, #1
 800510a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800510c:	f7fd ff7e 	bl	800300c <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005114:	f7fd ff7a 	bl	800300c <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e160      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <HAL_RCC_OscConfig+0x26c>)
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005132:	2001      	movs	r0, #1
 8005134:	f000 fada 	bl	80056ec <RCC_Delay>
 8005138:	e01c      	b.n	8005174 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800513a:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <HAL_RCC_OscConfig+0x274>)
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005140:	f7fd ff64 	bl	800300c <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005146:	e00f      	b.n	8005168 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005148:	f7fd ff60 	bl	800300c <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d908      	bls.n	8005168 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e146      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
 800515a:	bf00      	nop
 800515c:	40021000 	.word	0x40021000
 8005160:	42420000 	.word	0x42420000
 8005164:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005168:	4b92      	ldr	r3, [pc, #584]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e9      	bne.n	8005148 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 80a6 	beq.w	80052ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005182:	2300      	movs	r3, #0
 8005184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005186:	4b8b      	ldr	r3, [pc, #556]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10d      	bne.n	80051ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005192:	4b88      	ldr	r3, [pc, #544]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	4a87      	ldr	r2, [pc, #540]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 8005198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519c:	61d3      	str	r3, [r2, #28]
 800519e:	4b85      	ldr	r3, [pc, #532]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a6:	60bb      	str	r3, [r7, #8]
 80051a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051aa:	2301      	movs	r3, #1
 80051ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ae:	4b82      	ldr	r3, [pc, #520]	; (80053b8 <HAL_RCC_OscConfig+0x4c8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d118      	bne.n	80051ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ba:	4b7f      	ldr	r3, [pc, #508]	; (80053b8 <HAL_RCC_OscConfig+0x4c8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a7e      	ldr	r2, [pc, #504]	; (80053b8 <HAL_RCC_OscConfig+0x4c8>)
 80051c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c6:	f7fd ff21 	bl	800300c <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051cc:	e008      	b.n	80051e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ce:	f7fd ff1d 	bl	800300c <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b64      	cmp	r3, #100	; 0x64
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e103      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e0:	4b75      	ldr	r3, [pc, #468]	; (80053b8 <HAL_RCC_OscConfig+0x4c8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0f0      	beq.n	80051ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d106      	bne.n	8005202 <HAL_RCC_OscConfig+0x312>
 80051f4:	4b6f      	ldr	r3, [pc, #444]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	4a6e      	ldr	r2, [pc, #440]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 80051fa:	f043 0301 	orr.w	r3, r3, #1
 80051fe:	6213      	str	r3, [r2, #32]
 8005200:	e02d      	b.n	800525e <HAL_RCC_OscConfig+0x36e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10c      	bne.n	8005224 <HAL_RCC_OscConfig+0x334>
 800520a:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	4a69      	ldr	r2, [pc, #420]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	6213      	str	r3, [r2, #32]
 8005216:	4b67      	ldr	r3, [pc, #412]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	4a66      	ldr	r2, [pc, #408]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 800521c:	f023 0304 	bic.w	r3, r3, #4
 8005220:	6213      	str	r3, [r2, #32]
 8005222:	e01c      	b.n	800525e <HAL_RCC_OscConfig+0x36e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2b05      	cmp	r3, #5
 800522a:	d10c      	bne.n	8005246 <HAL_RCC_OscConfig+0x356>
 800522c:	4b61      	ldr	r3, [pc, #388]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	4a60      	ldr	r2, [pc, #384]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 8005232:	f043 0304 	orr.w	r3, r3, #4
 8005236:	6213      	str	r3, [r2, #32]
 8005238:	4b5e      	ldr	r3, [pc, #376]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	4a5d      	ldr	r2, [pc, #372]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	6213      	str	r3, [r2, #32]
 8005244:	e00b      	b.n	800525e <HAL_RCC_OscConfig+0x36e>
 8005246:	4b5b      	ldr	r3, [pc, #364]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	4a5a      	ldr	r2, [pc, #360]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	6213      	str	r3, [r2, #32]
 8005252:	4b58      	ldr	r3, [pc, #352]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	4a57      	ldr	r2, [pc, #348]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 8005258:	f023 0304 	bic.w	r3, r3, #4
 800525c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d015      	beq.n	8005292 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005266:	f7fd fed1 	bl	800300c <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526c:	e00a      	b.n	8005284 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526e:	f7fd fecd 	bl	800300c <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	f241 3288 	movw	r2, #5000	; 0x1388
 800527c:	4293      	cmp	r3, r2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e0b1      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005284:	4b4b      	ldr	r3, [pc, #300]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ee      	beq.n	800526e <HAL_RCC_OscConfig+0x37e>
 8005290:	e014      	b.n	80052bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005292:	f7fd febb 	bl	800300c <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005298:	e00a      	b.n	80052b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529a:	f7fd feb7 	bl	800300c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e09b      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b0:	4b40      	ldr	r3, [pc, #256]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1ee      	bne.n	800529a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d105      	bne.n	80052ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c2:	4b3c      	ldr	r3, [pc, #240]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	4a3b      	ldr	r2, [pc, #236]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 80052c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8087 	beq.w	80053e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052d8:	4b36      	ldr	r3, [pc, #216]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d061      	beq.n	80053a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d146      	bne.n	800537a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ec:	4b33      	ldr	r3, [pc, #204]	; (80053bc <HAL_RCC_OscConfig+0x4cc>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f2:	f7fd fe8b 	bl	800300c <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fa:	f7fd fe87 	bl	800300c <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e06d      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800530c:	4b29      	ldr	r3, [pc, #164]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f0      	bne.n	80052fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005320:	d108      	bne.n	8005334 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005322:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	4921      	ldr	r1, [pc, #132]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 8005330:	4313      	orrs	r3, r2
 8005332:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005334:	4b1f      	ldr	r3, [pc, #124]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a19      	ldr	r1, [r3, #32]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	430b      	orrs	r3, r1
 8005346:	491b      	ldr	r1, [pc, #108]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 8005348:	4313      	orrs	r3, r2
 800534a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800534c:	4b1b      	ldr	r3, [pc, #108]	; (80053bc <HAL_RCC_OscConfig+0x4cc>)
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005352:	f7fd fe5b 	bl	800300c <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800535a:	f7fd fe57 	bl	800300c <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e03d      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800536c:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0f0      	beq.n	800535a <HAL_RCC_OscConfig+0x46a>
 8005378:	e035      	b.n	80053e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537a:	4b10      	ldr	r3, [pc, #64]	; (80053bc <HAL_RCC_OscConfig+0x4cc>)
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005380:	f7fd fe44 	bl	800300c <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005388:	f7fd fe40 	bl	800300c <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e026      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800539a:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <HAL_RCC_OscConfig+0x4c4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f0      	bne.n	8005388 <HAL_RCC_OscConfig+0x498>
 80053a6:	e01e      	b.n	80053e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d107      	bne.n	80053c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e019      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
 80053b4:	40021000 	.word	0x40021000
 80053b8:	40007000 	.word	0x40007000
 80053bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <HAL_RCC_OscConfig+0x500>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d106      	bne.n	80053e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053de:	429a      	cmp	r2, r3
 80053e0:	d001      	beq.n	80053e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40021000 	.word	0x40021000

080053f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e0d0      	b.n	80055aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005408:	4b6a      	ldr	r3, [pc, #424]	; (80055b4 <HAL_RCC_ClockConfig+0x1c0>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d910      	bls.n	8005438 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005416:	4b67      	ldr	r3, [pc, #412]	; (80055b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f023 0207 	bic.w	r2, r3, #7
 800541e:	4965      	ldr	r1, [pc, #404]	; (80055b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	4313      	orrs	r3, r2
 8005424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005426:	4b63      	ldr	r3, [pc, #396]	; (80055b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d001      	beq.n	8005438 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e0b8      	b.n	80055aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d020      	beq.n	8005486 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005450:	4b59      	ldr	r3, [pc, #356]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	4a58      	ldr	r2, [pc, #352]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005456:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800545a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005468:	4b53      	ldr	r3, [pc, #332]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	4a52      	ldr	r2, [pc, #328]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 800546e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005472:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005474:	4b50      	ldr	r3, [pc, #320]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	494d      	ldr	r1, [pc, #308]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005482:	4313      	orrs	r3, r2
 8005484:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d040      	beq.n	8005514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d107      	bne.n	80054aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549a:	4b47      	ldr	r3, [pc, #284]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d115      	bne.n	80054d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e07f      	b.n	80055aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d107      	bne.n	80054c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054b2:	4b41      	ldr	r3, [pc, #260]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d109      	bne.n	80054d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e073      	b.n	80055aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c2:	4b3d      	ldr	r3, [pc, #244]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e06b      	b.n	80055aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054d2:	4b39      	ldr	r3, [pc, #228]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f023 0203 	bic.w	r2, r3, #3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	4936      	ldr	r1, [pc, #216]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054e4:	f7fd fd92 	bl	800300c <HAL_GetTick>
 80054e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ea:	e00a      	b.n	8005502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ec:	f7fd fd8e 	bl	800300c <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e053      	b.n	80055aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005502:	4b2d      	ldr	r3, [pc, #180]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f003 020c 	and.w	r2, r3, #12
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	429a      	cmp	r2, r3
 8005512:	d1eb      	bne.n	80054ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005514:	4b27      	ldr	r3, [pc, #156]	; (80055b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d210      	bcs.n	8005544 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005522:	4b24      	ldr	r3, [pc, #144]	; (80055b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f023 0207 	bic.w	r2, r3, #7
 800552a:	4922      	ldr	r1, [pc, #136]	; (80055b4 <HAL_RCC_ClockConfig+0x1c0>)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	4313      	orrs	r3, r2
 8005530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005532:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d001      	beq.n	8005544 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e032      	b.n	80055aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005550:	4b19      	ldr	r3, [pc, #100]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4916      	ldr	r1, [pc, #88]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 800555e:	4313      	orrs	r3, r2
 8005560:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d009      	beq.n	8005582 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	490e      	ldr	r1, [pc, #56]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 800557e:	4313      	orrs	r3, r2
 8005580:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005582:	f000 f821 	bl	80055c8 <HAL_RCC_GetSysClockFreq>
 8005586:	4602      	mov	r2, r0
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <HAL_RCC_ClockConfig+0x1c4>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	490a      	ldr	r1, [pc, #40]	; (80055bc <HAL_RCC_ClockConfig+0x1c8>)
 8005594:	5ccb      	ldrb	r3, [r1, r3]
 8005596:	fa22 f303 	lsr.w	r3, r2, r3
 800559a:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <HAL_RCC_ClockConfig+0x1cc>)
 800559c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800559e:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <HAL_RCC_ClockConfig+0x1d0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fd fcf0 	bl	8002f88 <HAL_InitTick>

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40022000 	.word	0x40022000
 80055b8:	40021000 	.word	0x40021000
 80055bc:	0800915c 	.word	0x0800915c
 80055c0:	20000004 	.word	0x20000004
 80055c4:	20000008 	.word	0x20000008

080055c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055c8:	b490      	push	{r4, r7}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80055ce:	4b29      	ldr	r3, [pc, #164]	; (8005674 <HAL_RCC_GetSysClockFreq+0xac>)
 80055d0:	1d3c      	adds	r4, r7, #4
 80055d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80055d8:	f240 2301 	movw	r3, #513	; 0x201
 80055dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	2300      	movs	r3, #0
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	2300      	movs	r3, #0
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80055f2:	4b21      	ldr	r3, [pc, #132]	; (8005678 <HAL_RCC_GetSysClockFreq+0xb0>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f003 030c 	and.w	r3, r3, #12
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d002      	beq.n	8005608 <HAL_RCC_GetSysClockFreq+0x40>
 8005602:	2b08      	cmp	r3, #8
 8005604:	d003      	beq.n	800560e <HAL_RCC_GetSysClockFreq+0x46>
 8005606:	e02b      	b.n	8005660 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005608:	4b1c      	ldr	r3, [pc, #112]	; (800567c <HAL_RCC_GetSysClockFreq+0xb4>)
 800560a:	623b      	str	r3, [r7, #32]
      break;
 800560c:	e02b      	b.n	8005666 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	0c9b      	lsrs	r3, r3, #18
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	3328      	adds	r3, #40	; 0x28
 8005618:	443b      	add	r3, r7
 800561a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800561e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d012      	beq.n	8005650 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800562a:	4b13      	ldr	r3, [pc, #76]	; (8005678 <HAL_RCC_GetSysClockFreq+0xb0>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	0c5b      	lsrs	r3, r3, #17
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	3328      	adds	r3, #40	; 0x28
 8005636:	443b      	add	r3, r7
 8005638:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800563c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	4a0e      	ldr	r2, [pc, #56]	; (800567c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005642:	fb03 f202 	mul.w	r2, r3, r2
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	fbb2 f3f3 	udiv	r3, r2, r3
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
 800564e:	e004      	b.n	800565a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	4a0b      	ldr	r2, [pc, #44]	; (8005680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005654:	fb02 f303 	mul.w	r3, r2, r3
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	623b      	str	r3, [r7, #32]
      break;
 800565e:	e002      	b.n	8005666 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005660:	4b08      	ldr	r3, [pc, #32]	; (8005684 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005662:	623b      	str	r3, [r7, #32]
      break;
 8005664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005666:	6a3b      	ldr	r3, [r7, #32]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3728      	adds	r7, #40	; 0x28
 800566c:	46bd      	mov	sp, r7
 800566e:	bc90      	pop	{r4, r7}
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	08008f4c 	.word	0x08008f4c
 8005678:	40021000 	.word	0x40021000
 800567c:	00f42400 	.word	0x00f42400
 8005680:	003d0900 	.word	0x003d0900
 8005684:	007a1200 	.word	0x007a1200

08005688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800568c:	4b02      	ldr	r3, [pc, #8]	; (8005698 <HAL_RCC_GetHCLKFreq+0x10>)
 800568e:	681b      	ldr	r3, [r3, #0]
}
 8005690:	4618      	mov	r0, r3
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr
 8005698:	20000004 	.word	0x20000004

0800569c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056a0:	f7ff fff2 	bl	8005688 <HAL_RCC_GetHCLKFreq>
 80056a4:	4602      	mov	r2, r0
 80056a6:	4b05      	ldr	r3, [pc, #20]	; (80056bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	0a1b      	lsrs	r3, r3, #8
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	4903      	ldr	r1, [pc, #12]	; (80056c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b2:	5ccb      	ldrb	r3, [r1, r3]
 80056b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40021000 	.word	0x40021000
 80056c0:	0800916c 	.word	0x0800916c

080056c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056c8:	f7ff ffde 	bl	8005688 <HAL_RCC_GetHCLKFreq>
 80056cc:	4602      	mov	r2, r0
 80056ce:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	0adb      	lsrs	r3, r3, #11
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	4903      	ldr	r1, [pc, #12]	; (80056e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056da:	5ccb      	ldrb	r3, [r1, r3]
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40021000 	.word	0x40021000
 80056e8:	0800916c 	.word	0x0800916c

080056ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80056f4:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <RCC_Delay+0x34>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a0a      	ldr	r2, [pc, #40]	; (8005724 <RCC_Delay+0x38>)
 80056fa:	fba2 2303 	umull	r2, r3, r2, r3
 80056fe:	0a5b      	lsrs	r3, r3, #9
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005708:	bf00      	nop
  }
  while (Delay --);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	1e5a      	subs	r2, r3, #1
 800570e:	60fa      	str	r2, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f9      	bne.n	8005708 <RCC_Delay+0x1c>
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr
 8005720:	20000004 	.word	0x20000004
 8005724:	10624dd3 	.word	0x10624dd3

08005728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e076      	b.n	8005828 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	2b00      	cmp	r3, #0
 8005740:	d108      	bne.n	8005754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800574a:	d009      	beq.n	8005760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	61da      	str	r2, [r3, #28]
 8005752:	e005      	b.n	8005760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fd f9ae 	bl	8002adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005796:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e4:	ea42 0103 	orr.w	r1, r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	0c1a      	lsrs	r2, r3, #16
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f002 0204 	and.w	r2, r2, #4
 8005806:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69da      	ldr	r2, [r3, #28]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005816:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e093      	b.n	800596c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d106      	bne.n	800585e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7fd f9c5 	bl	8002be8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6812      	ldr	r2, [r2, #0]
 8005870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005874:	f023 0307 	bic.w	r3, r3, #7
 8005878:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3304      	adds	r3, #4
 8005882:	4619      	mov	r1, r3
 8005884:	4610      	mov	r0, r2
 8005886:	f000 f9ab 	bl	8005be0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b2:	f023 0303 	bic.w	r3, r3, #3
 80058b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	4313      	orrs	r3, r2
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80058d0:	f023 030c 	bic.w	r3, r3, #12
 80058d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	4313      	orrs	r3, r2
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	011a      	lsls	r2, r3, #4
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	031b      	lsls	r3, r3, #12
 8005900:	4313      	orrs	r3, r2
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800590e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	4313      	orrs	r3, r2
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b02      	cmp	r3, #2
 8005988:	d122      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b02      	cmp	r3, #2
 8005996:	d11b      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0202 	mvn.w	r2, #2
 80059a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f8f6 	bl	8005ba8 <HAL_TIM_IC_CaptureCallback>
 80059bc:	e005      	b.n	80059ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f8e9 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f8f8 	bl	8005bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d122      	bne.n	8005a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d11b      	bne.n	8005a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0204 	mvn.w	r2, #4
 80059f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2202      	movs	r2, #2
 80059fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f8cc 	bl	8005ba8 <HAL_TIM_IC_CaptureCallback>
 8005a10:	e005      	b.n	8005a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f8bf 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f8ce 	bl	8005bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d122      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d11b      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0208 	mvn.w	r2, #8
 8005a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2204      	movs	r2, #4
 8005a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f8a2 	bl	8005ba8 <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f895 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f8a4 	bl	8005bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	2b10      	cmp	r3, #16
 8005a84:	d122      	bne.n	8005acc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d11b      	bne.n	8005acc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0210 	mvn.w	r2, #16
 8005a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f878 	bl	8005ba8 <HAL_TIM_IC_CaptureCallback>
 8005ab8:	e005      	b.n	8005ac6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f86b 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f87a 	bl	8005bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d10e      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d107      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0201 	mvn.w	r2, #1
 8005af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f846 	bl	8005b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d10e      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b10:	2b80      	cmp	r3, #128	; 0x80
 8005b12:	d107      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f94d 	bl	8005dbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	d10e      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d107      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f83e 	bl	8005bcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d10e      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	d107      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0220 	mvn.w	r2, #32
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f918 	bl	8005dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b7c:	bf00      	nop
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bc80      	pop	{r7}
 8005b94:	4770      	bx	lr

08005b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr

08005bba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr
	...

08005be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a33      	ldr	r2, [pc, #204]	; (8005cc0 <TIM_Base_SetConfig+0xe0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d013      	beq.n	8005c20 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a32      	ldr	r2, [pc, #200]	; (8005cc4 <TIM_Base_SetConfig+0xe4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00f      	beq.n	8005c20 <TIM_Base_SetConfig+0x40>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c06:	d00b      	beq.n	8005c20 <TIM_Base_SetConfig+0x40>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a2f      	ldr	r2, [pc, #188]	; (8005cc8 <TIM_Base_SetConfig+0xe8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d007      	beq.n	8005c20 <TIM_Base_SetConfig+0x40>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a2e      	ldr	r2, [pc, #184]	; (8005ccc <TIM_Base_SetConfig+0xec>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_Base_SetConfig+0x40>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a2d      	ldr	r2, [pc, #180]	; (8005cd0 <TIM_Base_SetConfig+0xf0>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d108      	bne.n	8005c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a22      	ldr	r2, [pc, #136]	; (8005cc0 <TIM_Base_SetConfig+0xe0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <TIM_Base_SetConfig+0x82>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a21      	ldr	r2, [pc, #132]	; (8005cc4 <TIM_Base_SetConfig+0xe4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00f      	beq.n	8005c62 <TIM_Base_SetConfig+0x82>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c48:	d00b      	beq.n	8005c62 <TIM_Base_SetConfig+0x82>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a1e      	ldr	r2, [pc, #120]	; (8005cc8 <TIM_Base_SetConfig+0xe8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d007      	beq.n	8005c62 <TIM_Base_SetConfig+0x82>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1d      	ldr	r2, [pc, #116]	; (8005ccc <TIM_Base_SetConfig+0xec>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_Base_SetConfig+0x82>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a1c      	ldr	r2, [pc, #112]	; (8005cd0 <TIM_Base_SetConfig+0xf0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d108      	bne.n	8005c74 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a09      	ldr	r2, [pc, #36]	; (8005cc0 <TIM_Base_SetConfig+0xe0>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_Base_SetConfig+0xc8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a08      	ldr	r2, [pc, #32]	; (8005cc4 <TIM_Base_SetConfig+0xe4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d103      	bne.n	8005cb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	615a      	str	r2, [r3, #20]
}
 8005cb6:	bf00      	nop
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr
 8005cc0:	40012c00 	.word	0x40012c00
 8005cc4:	40013400 	.word	0x40013400
 8005cc8:	40000400 	.word	0x40000400
 8005ccc:	40000800 	.word	0x40000800
 8005cd0:	40000c00 	.word	0x40000c00

08005cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e050      	b.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1b      	ldr	r2, [pc, #108]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d018      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a19      	ldr	r2, [pc, #100]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d013      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d42:	d00e      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a15      	ldr	r2, [pc, #84]	; (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d009      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a14      	ldr	r2, [pc, #80]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d004      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a12      	ldr	r2, [pc, #72]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d10c      	bne.n	8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr
 8005d98:	40012c00 	.word	0x40012c00
 8005d9c:	40013400 	.word	0x40013400
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800
 8005da8:	40000c00 	.word	0x40000c00

08005dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr

08005dbe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bc80      	pop	{r7}
 8005dce:	4770      	bx	lr

08005dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e03f      	b.n	8005e62 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fc ff96 	bl	8002d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2224      	movs	r2, #36	; 0x24
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f829 	bl	8005e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691a      	ldr	r2, [r3, #16]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695a      	ldr	r2, [r3, #20]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
	...

08005e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005ea6:	f023 030c 	bic.w	r3, r3, #12
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a2c      	ldr	r2, [pc, #176]	; (8005f80 <UART_SetConfig+0x114>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d103      	bne.n	8005edc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ed4:	f7ff fbf6 	bl	80056c4 <HAL_RCC_GetPCLK2Freq>
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	e002      	b.n	8005ee2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005edc:	f7ff fbde 	bl	800569c <HAL_RCC_GetPCLK1Freq>
 8005ee0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	009a      	lsls	r2, r3, #2
 8005eec:	441a      	add	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef8:	4a22      	ldr	r2, [pc, #136]	; (8005f84 <UART_SetConfig+0x118>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	0119      	lsls	r1, r3, #4
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009a      	lsls	r2, r3, #2
 8005f0c:	441a      	add	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f18:	4b1a      	ldr	r3, [pc, #104]	; (8005f84 <UART_SetConfig+0x118>)
 8005f1a:	fba3 0302 	umull	r0, r3, r3, r2
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	2064      	movs	r0, #100	; 0x64
 8005f22:	fb00 f303 	mul.w	r3, r0, r3
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	3332      	adds	r3, #50	; 0x32
 8005f2c:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <UART_SetConfig+0x118>)
 8005f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f38:	4419      	add	r1, r3
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009a      	lsls	r2, r3, #2
 8005f44:	441a      	add	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f50:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <UART_SetConfig+0x118>)
 8005f52:	fba3 0302 	umull	r0, r3, r3, r2
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	2064      	movs	r0, #100	; 0x64
 8005f5a:	fb00 f303 	mul.w	r3, r0, r3
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	3332      	adds	r3, #50	; 0x32
 8005f64:	4a07      	ldr	r2, [pc, #28]	; (8005f84 <UART_SetConfig+0x118>)
 8005f66:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	f003 020f 	and.w	r2, r3, #15
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	440a      	add	r2, r1
 8005f76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f78:	bf00      	nop
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	40013800 	.word	0x40013800
 8005f84:	51eb851f 	.word	0x51eb851f

08005f88 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f8e:	f3ef 8305 	mrs	r3, IPSR
 8005f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10f      	bne.n	8005fba <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f9e:	607b      	str	r3, [r7, #4]
  return(result);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <osKernelInitialize+0x32>
 8005fa6:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <osKernelInitialize+0x60>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d109      	bne.n	8005fc2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fae:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005fba:	f06f 0305 	mvn.w	r3, #5
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e00c      	b.n	8005fdc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <osKernelInitialize+0x60>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d105      	bne.n	8005fd6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005fca:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <osKernelInitialize+0x60>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	e002      	b.n	8005fdc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr
 8005fe8:	20000328 	.word	0x20000328

08005fec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ff2:	f3ef 8305 	mrs	r3, IPSR
 8005ff6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10f      	bne.n	800601e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8006002:	607b      	str	r3, [r7, #4]
  return(result);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <osKernelStart+0x32>
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <osKernelStart+0x64>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d109      	bne.n	8006026 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006012:	f3ef 8311 	mrs	r3, BASEPRI
 8006016:	603b      	str	r3, [r7, #0]
  return(result);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <osKernelStart+0x3a>
    stat = osErrorISR;
 800601e:	f06f 0305 	mvn.w	r3, #5
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e00e      	b.n	8006044 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <osKernelStart+0x64>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d107      	bne.n	800603e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800602e:	4b08      	ldr	r3, [pc, #32]	; (8006050 <osKernelStart+0x64>)
 8006030:	2202      	movs	r2, #2
 8006032:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006034:	f001 f890 	bl	8007158 <vTaskStartScheduler>
      stat = osOK;
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	e002      	b.n	8006044 <osKernelStart+0x58>
    } else {
      stat = osError;
 800603e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006042:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006044:	68fb      	ldr	r3, [r7, #12]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20000328 	.word	0x20000328

08006054 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006054:	b580      	push	{r7, lr}
 8006056:	b092      	sub	sp, #72	; 0x48
 8006058:	af04      	add	r7, sp, #16
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006064:	f3ef 8305 	mrs	r3, IPSR
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800606c:	2b00      	cmp	r3, #0
 800606e:	f040 8094 	bne.w	800619a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006072:	f3ef 8310 	mrs	r3, PRIMASK
 8006076:	623b      	str	r3, [r7, #32]
  return(result);
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f040 808d 	bne.w	800619a <osThreadNew+0x146>
 8006080:	4b48      	ldr	r3, [pc, #288]	; (80061a4 <osThreadNew+0x150>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d106      	bne.n	8006096 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006088:	f3ef 8311 	mrs	r3, BASEPRI
 800608c:	61fb      	str	r3, [r7, #28]
  return(result);
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	2b00      	cmp	r3, #0
 8006092:	f040 8082 	bne.w	800619a <osThreadNew+0x146>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d07e      	beq.n	800619a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800609c:	2380      	movs	r3, #128	; 0x80
 800609e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80060a0:	2318      	movs	r3, #24
 80060a2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80060a4:	2300      	movs	r3, #0
 80060a6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80060a8:	f107 031b 	add.w	r3, r7, #27
 80060ac:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80060ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060b2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d045      	beq.n	8006146 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <osThreadNew+0x74>
        name = attr->name;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80060d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <osThreadNew+0x9a>
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	2b38      	cmp	r3, #56	; 0x38
 80060e0:	d805      	bhi.n	80060ee <osThreadNew+0x9a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <osThreadNew+0x9e>
        return (NULL);
 80060ee:	2300      	movs	r3, #0
 80060f0:	e054      	b.n	800619c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	089b      	lsrs	r3, r3, #2
 8006100:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00e      	beq.n	8006128 <osThreadNew+0xd4>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2bbb      	cmp	r3, #187	; 0xbb
 8006110:	d90a      	bls.n	8006128 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006116:	2b00      	cmp	r3, #0
 8006118:	d006      	beq.n	8006128 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <osThreadNew+0xd4>
        mem = 1;
 8006122:	2301      	movs	r3, #1
 8006124:	62bb      	str	r3, [r7, #40]	; 0x28
 8006126:	e010      	b.n	800614a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10c      	bne.n	800614a <osThreadNew+0xf6>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d108      	bne.n	800614a <osThreadNew+0xf6>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <osThreadNew+0xf6>
          mem = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28
 8006144:	e001      	b.n	800614a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614c:	2b01      	cmp	r3, #1
 800614e:	d110      	bne.n	8006172 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006158:	9202      	str	r2, [sp, #8]
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006164:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fe12 	bl	8006d90 <xTaskCreateStatic>
 800616c:	4603      	mov	r3, r0
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	e013      	b.n	800619a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	2b00      	cmp	r3, #0
 8006176:	d110      	bne.n	800619a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	b29a      	uxth	r2, r3
 800617c:	f107 0314 	add.w	r3, r7, #20
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fe5c 	bl	8006e48 <xTaskCreate>
 8006190:	4603      	mov	r3, r0
 8006192:	2b01      	cmp	r3, #1
 8006194:	d001      	beq.n	800619a <osThreadNew+0x146>
          hTask = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800619a:	697b      	ldr	r3, [r7, #20]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3738      	adds	r7, #56	; 0x38
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20000328 	.word	0x20000328

080061a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061b0:	f3ef 8305 	mrs	r3, IPSR
 80061b4:	613b      	str	r3, [r7, #16]
  return(result);
 80061b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10f      	bne.n	80061dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061bc:	f3ef 8310 	mrs	r3, PRIMASK
 80061c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d109      	bne.n	80061dc <osDelay+0x34>
 80061c8:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <osDelay+0x58>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d109      	bne.n	80061e4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061d0:	f3ef 8311 	mrs	r3, BASEPRI
 80061d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <osDelay+0x3c>
    stat = osErrorISR;
 80061dc:	f06f 0305 	mvn.w	r3, #5
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	e007      	b.n	80061f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 ff7e 	bl	80070f0 <vTaskDelay>
    }
  }

  return (stat);
 80061f4:	697b      	ldr	r3, [r7, #20]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000328 	.word	0x20000328

08006204 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4a06      	ldr	r2, [pc, #24]	; (800622c <vApplicationGetIdleTaskMemory+0x28>)
 8006214:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	4a05      	ldr	r2, [pc, #20]	; (8006230 <vApplicationGetIdleTaskMemory+0x2c>)
 800621a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2280      	movs	r2, #128	; 0x80
 8006220:	601a      	str	r2, [r3, #0]
}
 8006222:	bf00      	nop
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr
 800622c:	2000032c 	.word	0x2000032c
 8006230:	200003e8 	.word	0x200003e8

08006234 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a07      	ldr	r2, [pc, #28]	; (8006260 <vApplicationGetTimerTaskMemory+0x2c>)
 8006244:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4a06      	ldr	r2, [pc, #24]	; (8006264 <vApplicationGetTimerTaskMemory+0x30>)
 800624a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006252:	601a      	str	r2, [r3, #0]
}
 8006254:	bf00      	nop
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	bc80      	pop	{r7}
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	200005e8 	.word	0x200005e8
 8006264:	200006a4 	.word	0x200006a4

08006268 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f103 0208 	add.w	r2, r3, #8
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006280:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f103 0208 	add.w	r2, r3, #8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f103 0208 	add.w	r2, r3, #8
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bc80      	pop	{r7}
 80062a4:	4770      	bx	lr

080062a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr

080062be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062be:	b480      	push	{r7}
 80062c0:	b085      	sub	sp, #20
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	601a      	str	r2, [r3, #0]
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr

08006304 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800631a:	d103      	bne.n	8006324 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	60fb      	str	r3, [r7, #12]
 8006322:	e00c      	b.n	800633e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3308      	adds	r3, #8
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	e002      	b.n	8006332 <vListInsert+0x2e>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	d2f6      	bcs.n	800632c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	601a      	str	r2, [r3, #0]
}
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr

08006374 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6892      	ldr	r2, [r2, #8]
 800638a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6852      	ldr	r2, [r2, #4]
 8006394:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	429a      	cmp	r2, r3
 800639e:	d103      	bne.n	80063a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	1e5a      	subs	r2, r3, #1
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr
	...

080063c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80063f2:	f001 fff3 	bl	80083dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	68f9      	ldr	r1, [r7, #12]
 8006400:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006402:	fb01 f303 	mul.w	r3, r1, r3
 8006406:	441a      	add	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006422:	3b01      	subs	r3, #1
 8006424:	68f9      	ldr	r1, [r7, #12]
 8006426:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006428:	fb01 f303 	mul.w	r3, r1, r3
 800642c:	441a      	add	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	22ff      	movs	r2, #255	; 0xff
 8006436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	22ff      	movs	r2, #255	; 0xff
 800643e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d114      	bne.n	8006472 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d01a      	beq.n	8006486 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3310      	adds	r3, #16
 8006454:	4618      	mov	r0, r3
 8006456:	f001 f91b 	bl	8007690 <xTaskRemoveFromEventList>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d012      	beq.n	8006486 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006460:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <xQueueGenericReset+0xcc>)
 8006462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	e009      	b.n	8006486 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3310      	adds	r3, #16
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff fef6 	bl	8006268 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3324      	adds	r3, #36	; 0x24
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff fef1 	bl	8006268 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006486:	f001 ffd9 	bl	800843c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800648a:	2301      	movs	r3, #1
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	e000ed04 	.word	0xe000ed04

08006498 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08e      	sub	sp, #56	; 0x38
 800649c:	af02      	add	r7, sp, #8
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10a      	bne.n	80064c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064be:	bf00      	nop
 80064c0:	e7fe      	b.n	80064c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064da:	bf00      	nop
 80064dc:	e7fe      	b.n	80064dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <xQueueGenericCreateStatic+0x52>
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <xQueueGenericCreateStatic+0x56>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <xQueueGenericCreateStatic+0x58>
 80064ee:	2300      	movs	r3, #0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	623b      	str	r3, [r7, #32]
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d102      	bne.n	8006516 <xQueueGenericCreateStatic+0x7e>
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <xQueueGenericCreateStatic+0x82>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <xQueueGenericCreateStatic+0x84>
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10a      	bne.n	8006536 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	61fb      	str	r3, [r7, #28]
}
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006536:	2350      	movs	r3, #80	; 0x50
 8006538:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b50      	cmp	r3, #80	; 0x50
 800653e:	d00a      	beq.n	8006556 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	61bb      	str	r3, [r7, #24]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00d      	beq.n	800657c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006568:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	4613      	mov	r3, r2
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	68b9      	ldr	r1, [r7, #8]
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 f805 	bl	8006586 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800657e:	4618      	mov	r0, r3
 8006580:	3730      	adds	r7, #48	; 0x30
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	607a      	str	r2, [r7, #4]
 8006592:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d103      	bne.n	80065a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	e002      	b.n	80065a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065b4:	2101      	movs	r1, #1
 80065b6:	69b8      	ldr	r0, [r7, #24]
 80065b8:	f7ff ff06 	bl	80063c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	78fa      	ldrb	r2, [r7, #3]
 80065c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065c4:	bf00      	nop
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b08e      	sub	sp, #56	; 0x38
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80065da:	2300      	movs	r3, #0
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <xQueueGenericSend+0x32>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065fa:	bf00      	nop
 80065fc:	e7fe      	b.n	80065fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d103      	bne.n	800660c <xQueueGenericSend+0x40>
 8006604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <xQueueGenericSend+0x44>
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <xQueueGenericSend+0x46>
 8006610:	2300      	movs	r3, #0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10a      	bne.n	800662c <xQueueGenericSend+0x60>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006628:	bf00      	nop
 800662a:	e7fe      	b.n	800662a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b02      	cmp	r3, #2
 8006630:	d103      	bne.n	800663a <xQueueGenericSend+0x6e>
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <xQueueGenericSend+0x72>
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <xQueueGenericSend+0x74>
 800663e:	2300      	movs	r3, #0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <xQueueGenericSend+0x8e>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	623b      	str	r3, [r7, #32]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800665a:	f001 f9df 	bl	8007a1c <xTaskGetSchedulerState>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d102      	bne.n	800666a <xQueueGenericSend+0x9e>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <xQueueGenericSend+0xa2>
 800666a:	2301      	movs	r3, #1
 800666c:	e000      	b.n	8006670 <xQueueGenericSend+0xa4>
 800666e:	2300      	movs	r3, #0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <xQueueGenericSend+0xbe>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	61fb      	str	r3, [r7, #28]
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800668a:	f001 fea7 	bl	80083dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006696:	429a      	cmp	r2, r3
 8006698:	d302      	bcc.n	80066a0 <xQueueGenericSend+0xd4>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d129      	bne.n	80066f4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	68b9      	ldr	r1, [r7, #8]
 80066a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066a6:	f000 fa07 	bl	8006ab8 <prvCopyDataToQueue>
 80066aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d010      	beq.n	80066d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	3324      	adds	r3, #36	; 0x24
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 ffe9 	bl	8007690 <xTaskRemoveFromEventList>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d013      	beq.n	80066ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80066c4:	4b3f      	ldr	r3, [pc, #252]	; (80067c4 <xQueueGenericSend+0x1f8>)
 80066c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	e00a      	b.n	80066ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d007      	beq.n	80066ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80066dc:	4b39      	ldr	r3, [pc, #228]	; (80067c4 <xQueueGenericSend+0x1f8>)
 80066de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80066ec:	f001 fea6 	bl	800843c <vPortExitCritical>
				return pdPASS;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e063      	b.n	80067bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d103      	bne.n	8006702 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066fa:	f001 fe9f 	bl	800843c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	e05c      	b.n	80067bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006704:	2b00      	cmp	r3, #0
 8006706:	d106      	bne.n	8006716 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006708:	f107 0314 	add.w	r3, r7, #20
 800670c:	4618      	mov	r0, r3
 800670e:	f001 f823 	bl	8007758 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006712:	2301      	movs	r3, #1
 8006714:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006716:	f001 fe91 	bl	800843c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800671a:	f000 fd8d 	bl	8007238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800671e:	f001 fe5d 	bl	80083dc <vPortEnterCritical>
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006728:	b25b      	sxtb	r3, r3
 800672a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800672e:	d103      	bne.n	8006738 <xQueueGenericSend+0x16c>
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800673e:	b25b      	sxtb	r3, r3
 8006740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006744:	d103      	bne.n	800674e <xQueueGenericSend+0x182>
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800674e:	f001 fe75 	bl	800843c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006752:	1d3a      	adds	r2, r7, #4
 8006754:	f107 0314 	add.w	r3, r7, #20
 8006758:	4611      	mov	r1, r2
 800675a:	4618      	mov	r0, r3
 800675c:	f001 f812 	bl	8007784 <xTaskCheckForTimeOut>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d124      	bne.n	80067b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006766:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006768:	f000 fa9e 	bl	8006ca8 <prvIsQueueFull>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d018      	beq.n	80067a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	3310      	adds	r3, #16
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	4611      	mov	r1, r2
 800677a:	4618      	mov	r0, r3
 800677c:	f000 ff38 	bl	80075f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006782:	f000 fa29 	bl	8006bd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006786:	f000 fd65 	bl	8007254 <xTaskResumeAll>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	f47f af7c 	bne.w	800668a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006792:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <xQueueGenericSend+0x1f8>)
 8006794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	e772      	b.n	800668a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80067a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067a6:	f000 fa17 	bl	8006bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067aa:	f000 fd53 	bl	8007254 <xTaskResumeAll>
 80067ae:	e76c      	b.n	800668a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80067b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067b2:	f000 fa11 	bl	8006bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067b6:	f000 fd4d 	bl	8007254 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80067ba:	2300      	movs	r3, #0
		}
	}
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3738      	adds	r7, #56	; 0x38
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	e000ed04 	.word	0xe000ed04

080067c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08e      	sub	sp, #56	; 0x38
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10a      	bne.n	80067f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067f2:	bf00      	nop
 80067f4:	e7fe      	b.n	80067f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d103      	bne.n	8006804 <xQueueGenericSendFromISR+0x3c>
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <xQueueGenericSendFromISR+0x40>
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <xQueueGenericSendFromISR+0x42>
 8006808:	2300      	movs	r3, #0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	623b      	str	r3, [r7, #32]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d103      	bne.n	8006832 <xQueueGenericSendFromISR+0x6a>
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682e:	2b01      	cmp	r3, #1
 8006830:	d101      	bne.n	8006836 <xQueueGenericSendFromISR+0x6e>
 8006832:	2301      	movs	r3, #1
 8006834:	e000      	b.n	8006838 <xQueueGenericSendFromISR+0x70>
 8006836:	2300      	movs	r3, #0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	61fb      	str	r3, [r7, #28]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006852:	f001 fe85 	bl	8008560 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006856:	f3ef 8211 	mrs	r2, BASEPRI
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	61ba      	str	r2, [r7, #24]
 800686c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800686e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687a:	429a      	cmp	r2, r3
 800687c:	d302      	bcc.n	8006884 <xQueueGenericSendFromISR+0xbc>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d12c      	bne.n	80068de <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800688a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006894:	f000 f910 	bl	8006ab8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006898:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068a0:	d112      	bne.n	80068c8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d016      	beq.n	80068d8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	3324      	adds	r3, #36	; 0x24
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 feee 	bl	8007690 <xTaskRemoveFromEventList>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00e      	beq.n	80068d8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00b      	beq.n	80068d8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	e007      	b.n	80068d8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068cc:	3301      	adds	r3, #1
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	b25a      	sxtb	r2, r3
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80068d8:	2301      	movs	r3, #1
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80068dc:	e001      	b.n	80068e2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80068de:	2300      	movs	r3, #0
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80068ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3738      	adds	r7, #56	; 0x38
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08c      	sub	sp, #48	; 0x30
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006904:	2300      	movs	r3, #0
 8006906:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <xQueueReceive+0x30>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	623b      	str	r3, [r7, #32]
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d103      	bne.n	8006936 <xQueueReceive+0x3e>
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <xQueueReceive+0x42>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <xQueueReceive+0x44>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <xQueueReceive+0x5e>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	61fb      	str	r3, [r7, #28]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006956:	f001 f861 	bl	8007a1c <xTaskGetSchedulerState>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d102      	bne.n	8006966 <xQueueReceive+0x6e>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <xQueueReceive+0x72>
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <xQueueReceive+0x74>
 800696a:	2300      	movs	r3, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <xQueueReceive+0x8e>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	61bb      	str	r3, [r7, #24]
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006986:	f001 fd29 	bl	80083dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	2b00      	cmp	r3, #0
 8006994:	d01f      	beq.n	80069d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800699a:	f000 f8f7 	bl	8006b8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	1e5a      	subs	r2, r3, #1
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00f      	beq.n	80069ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	3310      	adds	r3, #16
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fe6c 	bl	8007690 <xTaskRemoveFromEventList>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d007      	beq.n	80069ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069be:	4b3d      	ldr	r3, [pc, #244]	; (8006ab4 <xQueueReceive+0x1bc>)
 80069c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069ce:	f001 fd35 	bl	800843c <vPortExitCritical>
				return pdPASS;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e069      	b.n	8006aaa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d103      	bne.n	80069e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069dc:	f001 fd2e 	bl	800843c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80069e0:	2300      	movs	r3, #0
 80069e2:	e062      	b.n	8006aaa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069ea:	f107 0310 	add.w	r3, r7, #16
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 feb2 	bl	8007758 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069f4:	2301      	movs	r3, #1
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069f8:	f001 fd20 	bl	800843c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069fc:	f000 fc1c 	bl	8007238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a00:	f001 fcec 	bl	80083dc <vPortEnterCritical>
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a0a:	b25b      	sxtb	r3, r3
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a10:	d103      	bne.n	8006a1a <xQueueReceive+0x122>
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a20:	b25b      	sxtb	r3, r3
 8006a22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a26:	d103      	bne.n	8006a30 <xQueueReceive+0x138>
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a30:	f001 fd04 	bl	800843c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a34:	1d3a      	adds	r2, r7, #4
 8006a36:	f107 0310 	add.w	r3, r7, #16
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fea1 	bl	8007784 <xTaskCheckForTimeOut>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d123      	bne.n	8006a90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a4a:	f000 f917 	bl	8006c7c <prvIsQueueEmpty>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d017      	beq.n	8006a84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a56:	3324      	adds	r3, #36	; 0x24
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 fdc7 	bl	80075f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a64:	f000 f8b8 	bl	8006bd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a68:	f000 fbf4 	bl	8007254 <xTaskResumeAll>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d189      	bne.n	8006986 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006a72:	4b10      	ldr	r3, [pc, #64]	; (8006ab4 <xQueueReceive+0x1bc>)
 8006a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	e780      	b.n	8006986 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a86:	f000 f8a7 	bl	8006bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a8a:	f000 fbe3 	bl	8007254 <xTaskResumeAll>
 8006a8e:	e77a      	b.n	8006986 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a92:	f000 f8a1 	bl	8006bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a96:	f000 fbdd 	bl	8007254 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a9c:	f000 f8ee 	bl	8006c7c <prvIsQueueEmpty>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f43f af6f 	beq.w	8006986 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006aa8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3730      	adds	r7, #48	; 0x30
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	e000ed04 	.word	0xe000ed04

08006ab8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006acc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10d      	bne.n	8006af2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d14d      	bne.n	8006b7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 ffb8 	bl	8007a58 <xTaskPriorityDisinherit>
 8006ae8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	605a      	str	r2, [r3, #4]
 8006af0:	e043      	b.n	8006b7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d119      	bne.n	8006b2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6898      	ldr	r0, [r3, #8]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	461a      	mov	r2, r3
 8006b02:	68b9      	ldr	r1, [r7, #8]
 8006b04:	f002 f846 	bl	8008b94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	441a      	add	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d32b      	bcc.n	8006b7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	609a      	str	r2, [r3, #8]
 8006b2a:	e026      	b.n	8006b7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	68d8      	ldr	r0, [r3, #12]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	461a      	mov	r2, r3
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	f002 f82c 	bl	8008b94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	425b      	negs	r3, r3
 8006b46:	441a      	add	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d207      	bcs.n	8006b68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b60:	425b      	negs	r3, r3
 8006b62:	441a      	add	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d105      	bne.n	8006b7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b82:	697b      	ldr	r3, [r7, #20]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d018      	beq.n	8006bd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	441a      	add	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d303      	bcc.n	8006bc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68d9      	ldr	r1, [r3, #12]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc8:	461a      	mov	r2, r3
 8006bca:	6838      	ldr	r0, [r7, #0]
 8006bcc:	f001 ffe2 	bl	8008b94 <memcpy>
	}
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006be0:	f001 fbfc 	bl	80083dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bec:	e011      	b.n	8006c12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d012      	beq.n	8006c1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3324      	adds	r3, #36	; 0x24
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fd48 	bl	8007690 <xTaskRemoveFromEventList>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c06:	f000 fe1f 	bl	8007848 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	dce9      	bgt.n	8006bee <prvUnlockQueue+0x16>
 8006c1a:	e000      	b.n	8006c1e <prvUnlockQueue+0x46>
					break;
 8006c1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	22ff      	movs	r2, #255	; 0xff
 8006c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c26:	f001 fc09 	bl	800843c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c2a:	f001 fbd7 	bl	80083dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c36:	e011      	b.n	8006c5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d012      	beq.n	8006c66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3310      	adds	r3, #16
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 fd23 	bl	8007690 <xTaskRemoveFromEventList>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c50:	f000 fdfa 	bl	8007848 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	dce9      	bgt.n	8006c38 <prvUnlockQueue+0x60>
 8006c64:	e000      	b.n	8006c68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	22ff      	movs	r2, #255	; 0xff
 8006c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c70:	f001 fbe4 	bl	800843c <vPortExitCritical>
}
 8006c74:	bf00      	nop
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c84:	f001 fbaa 	bl	80083dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d102      	bne.n	8006c96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c90:	2301      	movs	r3, #1
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	e001      	b.n	8006c9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c9a:	f001 fbcf 	bl	800843c <vPortExitCritical>

	return xReturn;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cb0:	f001 fb94 	bl	80083dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d102      	bne.n	8006cc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e001      	b.n	8006cca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cca:	f001 fbb7 	bl	800843c <vPortExitCritical>

	return xReturn;
 8006cce:	68fb      	ldr	r3, [r7, #12]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	e014      	b.n	8006d12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ce8:	4a0e      	ldr	r2, [pc, #56]	; (8006d24 <vQueueAddToRegistry+0x4c>)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10b      	bne.n	8006d0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006cf4:	490b      	ldr	r1, [pc, #44]	; (8006d24 <vQueueAddToRegistry+0x4c>)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006cfe:	4a09      	ldr	r2, [pc, #36]	; (8006d24 <vQueueAddToRegistry+0x4c>)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	00db      	lsls	r3, r3, #3
 8006d04:	4413      	add	r3, r2
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d0a:	e006      	b.n	8006d1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b07      	cmp	r3, #7
 8006d16:	d9e7      	bls.n	8006ce8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d18:	bf00      	nop
 8006d1a:	bf00      	nop
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr
 8006d24:	20000aa4 	.word	0x20000aa4

08006d28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d38:	f001 fb50 	bl	80083dc <vPortEnterCritical>
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d42:	b25b      	sxtb	r3, r3
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d48:	d103      	bne.n	8006d52 <vQueueWaitForMessageRestricted+0x2a>
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d58:	b25b      	sxtb	r3, r3
 8006d5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d5e:	d103      	bne.n	8006d68 <vQueueWaitForMessageRestricted+0x40>
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d68:	f001 fb68 	bl	800843c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d106      	bne.n	8006d82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	3324      	adds	r3, #36	; 0x24
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fc5b 	bl	8007638 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006d82:	6978      	ldr	r0, [r7, #20]
 8006d84:	f7ff ff28 	bl	8006bd8 <prvUnlockQueue>
	}
 8006d88:	bf00      	nop
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b08e      	sub	sp, #56	; 0x38
 8006d94:	af04      	add	r7, sp, #16
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <xTaskCreateStatic+0x2a>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	623b      	str	r3, [r7, #32]
}
 8006db6:	bf00      	nop
 8006db8:	e7fe      	b.n	8006db8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	61fb      	str	r3, [r7, #28]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006dd6:	23bc      	movs	r3, #188	; 0xbc
 8006dd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2bbc      	cmp	r3, #188	; 0xbc
 8006dde:	d00a      	beq.n	8006df6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	61bb      	str	r3, [r7, #24]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01e      	beq.n	8006e3a <xTaskCreateStatic+0xaa>
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d01b      	beq.n	8006e3a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e0a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e14:	2300      	movs	r3, #0
 8006e16:	9303      	str	r3, [sp, #12]
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	9302      	str	r3, [sp, #8]
 8006e1c:	f107 0314 	add.w	r3, r7, #20
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	68b9      	ldr	r1, [r7, #8]
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f851 	bl	8006ed4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e34:	f000 f8ec 	bl	8007010 <prvAddNewTaskToReadyList>
 8006e38:	e001      	b.n	8006e3e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e3e:	697b      	ldr	r3, [r7, #20]
	}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3728      	adds	r7, #40	; 0x28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08c      	sub	sp, #48	; 0x30
 8006e4c:	af04      	add	r7, sp, #16
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	4613      	mov	r3, r2
 8006e56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e58:	88fb      	ldrh	r3, [r7, #6]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 fbbd 	bl	80085dc <pvPortMalloc>
 8006e62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00e      	beq.n	8006e88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006e6a:	20bc      	movs	r0, #188	; 0xbc
 8006e6c:	f001 fbb6 	bl	80085dc <pvPortMalloc>
 8006e70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8006e7e:	e005      	b.n	8006e8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e80:	6978      	ldr	r0, [r7, #20]
 8006e82:	f001 fc6f 	bl	8008764 <vPortFree>
 8006e86:	e001      	b.n	8006e8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d017      	beq.n	8006ec2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e9a:	88fa      	ldrh	r2, [r7, #6]
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9303      	str	r3, [sp, #12]
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	9302      	str	r3, [sp, #8]
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 f80f 	bl	8006ed4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006eb6:	69f8      	ldr	r0, [r7, #28]
 8006eb8:	f000 f8aa 	bl	8007010 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	61bb      	str	r3, [r7, #24]
 8006ec0:	e002      	b.n	8006ec8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ec6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ec8:	69bb      	ldr	r3, [r7, #24]
	}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3720      	adds	r7, #32
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
	...

08006ed4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b088      	sub	sp, #32
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	461a      	mov	r2, r3
 8006eec:	21a5      	movs	r1, #165	; 0xa5
 8006eee:	f001 fe5f 	bl	8008bb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006efc:	3b01      	subs	r3, #1
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	f023 0307 	bic.w	r3, r3, #7
 8006f0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	617b      	str	r3, [r7, #20]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61fb      	str	r3, [r7, #28]
 8006f30:	e012      	b.n	8006f58 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	4413      	add	r3, r2
 8006f38:	7819      	ldrb	r1, [r3, #0]
 8006f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	4413      	add	r3, r2
 8006f40:	3334      	adds	r3, #52	; 0x34
 8006f42:	460a      	mov	r2, r1
 8006f44:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d006      	beq.n	8006f60 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	3301      	adds	r3, #1
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	2b0f      	cmp	r3, #15
 8006f5c:	d9e9      	bls.n	8006f32 <prvInitialiseNewTask+0x5e>
 8006f5e:	e000      	b.n	8006f62 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006f60:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	2b37      	cmp	r3, #55	; 0x37
 8006f6e:	d901      	bls.n	8006f74 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f70:	2337      	movs	r3, #55	; 0x37
 8006f72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f82:	2200      	movs	r2, #0
 8006f84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff f98b 	bl	80062a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	3318      	adds	r3, #24
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff f986 	bl	80062a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	3354      	adds	r3, #84	; 0x54
 8006fc4:	2260      	movs	r2, #96	; 0x60
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 fdf1 	bl	8008bb0 <memset>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	4a0c      	ldr	r2, [pc, #48]	; (8007004 <prvInitialiseNewTask+0x130>)
 8006fd2:	659a      	str	r2, [r3, #88]	; 0x58
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	4a0c      	ldr	r2, [pc, #48]	; (8007008 <prvInitialiseNewTask+0x134>)
 8006fd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	4a0b      	ldr	r2, [pc, #44]	; (800700c <prvInitialiseNewTask+0x138>)
 8006fde:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	68f9      	ldr	r1, [r7, #12]
 8006fe4:	69b8      	ldr	r0, [r7, #24]
 8006fe6:	f001 f90b 	bl	8008200 <pxPortInitialiseStack>
 8006fea:	4602      	mov	r2, r0
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ffa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ffc:	bf00      	nop
 8006ffe:	3720      	adds	r7, #32
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	080091d8 	.word	0x080091d8
 8007008:	080091f8 	.word	0x080091f8
 800700c:	080091b8 	.word	0x080091b8

08007010 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007018:	f001 f9e0 	bl	80083dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800701c:	4b2d      	ldr	r3, [pc, #180]	; (80070d4 <prvAddNewTaskToReadyList+0xc4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3301      	adds	r3, #1
 8007022:	4a2c      	ldr	r2, [pc, #176]	; (80070d4 <prvAddNewTaskToReadyList+0xc4>)
 8007024:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007026:	4b2c      	ldr	r3, [pc, #176]	; (80070d8 <prvAddNewTaskToReadyList+0xc8>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800702e:	4a2a      	ldr	r2, [pc, #168]	; (80070d8 <prvAddNewTaskToReadyList+0xc8>)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007034:	4b27      	ldr	r3, [pc, #156]	; (80070d4 <prvAddNewTaskToReadyList+0xc4>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d110      	bne.n	800705e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800703c:	f000 fc28 	bl	8007890 <prvInitialiseTaskLists>
 8007040:	e00d      	b.n	800705e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007042:	4b26      	ldr	r3, [pc, #152]	; (80070dc <prvAddNewTaskToReadyList+0xcc>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d109      	bne.n	800705e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800704a:	4b23      	ldr	r3, [pc, #140]	; (80070d8 <prvAddNewTaskToReadyList+0xc8>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	429a      	cmp	r2, r3
 8007056:	d802      	bhi.n	800705e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007058:	4a1f      	ldr	r2, [pc, #124]	; (80070d8 <prvAddNewTaskToReadyList+0xc8>)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800705e:	4b20      	ldr	r3, [pc, #128]	; (80070e0 <prvAddNewTaskToReadyList+0xd0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3301      	adds	r3, #1
 8007064:	4a1e      	ldr	r2, [pc, #120]	; (80070e0 <prvAddNewTaskToReadyList+0xd0>)
 8007066:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007068:	4b1d      	ldr	r3, [pc, #116]	; (80070e0 <prvAddNewTaskToReadyList+0xd0>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	4b1b      	ldr	r3, [pc, #108]	; (80070e4 <prvAddNewTaskToReadyList+0xd4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d903      	bls.n	8007084 <prvAddNewTaskToReadyList+0x74>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	4a18      	ldr	r2, [pc, #96]	; (80070e4 <prvAddNewTaskToReadyList+0xd4>)
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007088:	4613      	mov	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4a15      	ldr	r2, [pc, #84]	; (80070e8 <prvAddNewTaskToReadyList+0xd8>)
 8007092:	441a      	add	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3304      	adds	r3, #4
 8007098:	4619      	mov	r1, r3
 800709a:	4610      	mov	r0, r2
 800709c:	f7ff f90f 	bl	80062be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070a0:	f001 f9cc 	bl	800843c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070a4:	4b0d      	ldr	r3, [pc, #52]	; (80070dc <prvAddNewTaskToReadyList+0xcc>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00e      	beq.n	80070ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80070ac:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <prvAddNewTaskToReadyList+0xc8>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d207      	bcs.n	80070ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80070ba:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <prvAddNewTaskToReadyList+0xdc>)
 80070bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000fb8 	.word	0x20000fb8
 80070d8:	20000ae4 	.word	0x20000ae4
 80070dc:	20000fc4 	.word	0x20000fc4
 80070e0:	20000fd4 	.word	0x20000fd4
 80070e4:	20000fc0 	.word	0x20000fc0
 80070e8:	20000ae8 	.word	0x20000ae8
 80070ec:	e000ed04 	.word	0xe000ed04

080070f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d017      	beq.n	8007132 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007102:	4b13      	ldr	r3, [pc, #76]	; (8007150 <vTaskDelay+0x60>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <vTaskDelay+0x30>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	60bb      	str	r3, [r7, #8]
}
 800711c:	bf00      	nop
 800711e:	e7fe      	b.n	800711e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007120:	f000 f88a 	bl	8007238 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007124:	2100      	movs	r1, #0
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fd04 	bl	8007b34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800712c:	f000 f892 	bl	8007254 <xTaskResumeAll>
 8007130:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d107      	bne.n	8007148 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <vTaskDelay+0x64>)
 800713a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007148:	bf00      	nop
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20000fe0 	.word	0x20000fe0
 8007154:	e000ed04 	.word	0xe000ed04

08007158 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08a      	sub	sp, #40	; 0x28
 800715c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800715e:	2300      	movs	r3, #0
 8007160:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007162:	2300      	movs	r3, #0
 8007164:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007166:	463a      	mov	r2, r7
 8007168:	1d39      	adds	r1, r7, #4
 800716a:	f107 0308 	add.w	r3, r7, #8
 800716e:	4618      	mov	r0, r3
 8007170:	f7ff f848 	bl	8006204 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	9202      	str	r2, [sp, #8]
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	2300      	movs	r3, #0
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	2300      	movs	r3, #0
 8007184:	460a      	mov	r2, r1
 8007186:	4924      	ldr	r1, [pc, #144]	; (8007218 <vTaskStartScheduler+0xc0>)
 8007188:	4824      	ldr	r0, [pc, #144]	; (800721c <vTaskStartScheduler+0xc4>)
 800718a:	f7ff fe01 	bl	8006d90 <xTaskCreateStatic>
 800718e:	4603      	mov	r3, r0
 8007190:	4a23      	ldr	r2, [pc, #140]	; (8007220 <vTaskStartScheduler+0xc8>)
 8007192:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007194:	4b22      	ldr	r3, [pc, #136]	; (8007220 <vTaskStartScheduler+0xc8>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800719c:	2301      	movs	r3, #1
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	e001      	b.n	80071a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d102      	bne.n	80071b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80071ac:	f000 fd16 	bl	8007bdc <xTimerCreateTimerTask>
 80071b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d11b      	bne.n	80071f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	613b      	str	r3, [r7, #16]
}
 80071ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071cc:	4b15      	ldr	r3, [pc, #84]	; (8007224 <vTaskStartScheduler+0xcc>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3354      	adds	r3, #84	; 0x54
 80071d2:	4a15      	ldr	r2, [pc, #84]	; (8007228 <vTaskStartScheduler+0xd0>)
 80071d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071d6:	4b15      	ldr	r3, [pc, #84]	; (800722c <vTaskStartScheduler+0xd4>)
 80071d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071de:	4b14      	ldr	r3, [pc, #80]	; (8007230 <vTaskStartScheduler+0xd8>)
 80071e0:	2201      	movs	r2, #1
 80071e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80071e4:	4b13      	ldr	r3, [pc, #76]	; (8007234 <vTaskStartScheduler+0xdc>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071ea:	f001 f885 	bl	80082f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071ee:	e00e      	b.n	800720e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071f6:	d10a      	bne.n	800720e <vTaskStartScheduler+0xb6>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	60fb      	str	r3, [r7, #12]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <vTaskStartScheduler+0xb4>
}
 800720e:	bf00      	nop
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	08008f5c 	.word	0x08008f5c
 800721c:	08007861 	.word	0x08007861
 8007220:	20000fdc 	.word	0x20000fdc
 8007224:	20000ae4 	.word	0x20000ae4
 8007228:	20000018 	.word	0x20000018
 800722c:	20000fd8 	.word	0x20000fd8
 8007230:	20000fc4 	.word	0x20000fc4
 8007234:	20000fbc 	.word	0x20000fbc

08007238 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <vTaskSuspendAll+0x18>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3301      	adds	r3, #1
 8007242:	4a03      	ldr	r2, [pc, #12]	; (8007250 <vTaskSuspendAll+0x18>)
 8007244:	6013      	str	r3, [r2, #0]
}
 8007246:	bf00      	nop
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	20000fe0 	.word	0x20000fe0

08007254 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800725e:	2300      	movs	r3, #0
 8007260:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007262:	4b42      	ldr	r3, [pc, #264]	; (800736c <xTaskResumeAll+0x118>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <xTaskResumeAll+0x2c>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	603b      	str	r3, [r7, #0]
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007280:	f001 f8ac 	bl	80083dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007284:	4b39      	ldr	r3, [pc, #228]	; (800736c <xTaskResumeAll+0x118>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3b01      	subs	r3, #1
 800728a:	4a38      	ldr	r2, [pc, #224]	; (800736c <xTaskResumeAll+0x118>)
 800728c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800728e:	4b37      	ldr	r3, [pc, #220]	; (800736c <xTaskResumeAll+0x118>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d162      	bne.n	800735c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007296:	4b36      	ldr	r3, [pc, #216]	; (8007370 <xTaskResumeAll+0x11c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d05e      	beq.n	800735c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800729e:	e02f      	b.n	8007300 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80072a0:	4b34      	ldr	r3, [pc, #208]	; (8007374 <xTaskResumeAll+0x120>)
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3318      	adds	r3, #24
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff f861 	bl	8006374 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3304      	adds	r3, #4
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7ff f85c 	bl	8006374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c0:	4b2d      	ldr	r3, [pc, #180]	; (8007378 <xTaskResumeAll+0x124>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d903      	bls.n	80072d0 <xTaskResumeAll+0x7c>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	4a2a      	ldr	r2, [pc, #168]	; (8007378 <xTaskResumeAll+0x124>)
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4a27      	ldr	r2, [pc, #156]	; (800737c <xTaskResumeAll+0x128>)
 80072de:	441a      	add	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3304      	adds	r3, #4
 80072e4:	4619      	mov	r1, r3
 80072e6:	4610      	mov	r0, r2
 80072e8:	f7fe ffe9 	bl	80062be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f0:	4b23      	ldr	r3, [pc, #140]	; (8007380 <xTaskResumeAll+0x12c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d302      	bcc.n	8007300 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80072fa:	4b22      	ldr	r3, [pc, #136]	; (8007384 <xTaskResumeAll+0x130>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007300:	4b1c      	ldr	r3, [pc, #112]	; (8007374 <xTaskResumeAll+0x120>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1cb      	bne.n	80072a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800730e:	f000 fb61 	bl	80079d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007312:	4b1d      	ldr	r3, [pc, #116]	; (8007388 <xTaskResumeAll+0x134>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d010      	beq.n	8007340 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800731e:	f000 f845 	bl	80073ac <xTaskIncrementTick>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007328:	4b16      	ldr	r3, [pc, #88]	; (8007384 <xTaskResumeAll+0x130>)
 800732a:	2201      	movs	r2, #1
 800732c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3b01      	subs	r3, #1
 8007332:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1f1      	bne.n	800731e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800733a:	4b13      	ldr	r3, [pc, #76]	; (8007388 <xTaskResumeAll+0x134>)
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007340:	4b10      	ldr	r3, [pc, #64]	; (8007384 <xTaskResumeAll+0x130>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d009      	beq.n	800735c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007348:	2301      	movs	r3, #1
 800734a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800734c:	4b0f      	ldr	r3, [pc, #60]	; (800738c <xTaskResumeAll+0x138>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800735c:	f001 f86e 	bl	800843c <vPortExitCritical>

	return xAlreadyYielded;
 8007360:	68bb      	ldr	r3, [r7, #8]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20000fe0 	.word	0x20000fe0
 8007370:	20000fb8 	.word	0x20000fb8
 8007374:	20000f78 	.word	0x20000f78
 8007378:	20000fc0 	.word	0x20000fc0
 800737c:	20000ae8 	.word	0x20000ae8
 8007380:	20000ae4 	.word	0x20000ae4
 8007384:	20000fcc 	.word	0x20000fcc
 8007388:	20000fc8 	.word	0x20000fc8
 800738c:	e000ed04 	.word	0xe000ed04

08007390 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007396:	4b04      	ldr	r3, [pc, #16]	; (80073a8 <xTaskGetTickCount+0x18>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800739c:	687b      	ldr	r3, [r7, #4]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bc80      	pop	{r7}
 80073a6:	4770      	bx	lr
 80073a8:	20000fbc 	.word	0x20000fbc

080073ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073b6:	4b51      	ldr	r3, [pc, #324]	; (80074fc <xTaskIncrementTick+0x150>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 808e 	bne.w	80074dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073c0:	4b4f      	ldr	r3, [pc, #316]	; (8007500 <xTaskIncrementTick+0x154>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3301      	adds	r3, #1
 80073c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073c8:	4a4d      	ldr	r2, [pc, #308]	; (8007500 <xTaskIncrementTick+0x154>)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d120      	bne.n	8007416 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80073d4:	4b4b      	ldr	r3, [pc, #300]	; (8007504 <xTaskIncrementTick+0x158>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	603b      	str	r3, [r7, #0]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <xTaskIncrementTick+0x46>
 80073f4:	4b43      	ldr	r3, [pc, #268]	; (8007504 <xTaskIncrementTick+0x158>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	60fb      	str	r3, [r7, #12]
 80073fa:	4b43      	ldr	r3, [pc, #268]	; (8007508 <xTaskIncrementTick+0x15c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a41      	ldr	r2, [pc, #260]	; (8007504 <xTaskIncrementTick+0x158>)
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	4a41      	ldr	r2, [pc, #260]	; (8007508 <xTaskIncrementTick+0x15c>)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	4b40      	ldr	r3, [pc, #256]	; (800750c <xTaskIncrementTick+0x160>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3301      	adds	r3, #1
 800740e:	4a3f      	ldr	r2, [pc, #252]	; (800750c <xTaskIncrementTick+0x160>)
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	f000 fadf 	bl	80079d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007416:	4b3e      	ldr	r3, [pc, #248]	; (8007510 <xTaskIncrementTick+0x164>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	429a      	cmp	r2, r3
 800741e:	d34e      	bcc.n	80074be <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007420:	4b38      	ldr	r3, [pc, #224]	; (8007504 <xTaskIncrementTick+0x158>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <xTaskIncrementTick+0x82>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <xTaskIncrementTick+0x84>
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007434:	4b36      	ldr	r3, [pc, #216]	; (8007510 <xTaskIncrementTick+0x164>)
 8007436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800743a:	601a      	str	r2, [r3, #0]
					break;
 800743c:	e03f      	b.n	80074be <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800743e:	4b31      	ldr	r3, [pc, #196]	; (8007504 <xTaskIncrementTick+0x158>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	429a      	cmp	r2, r3
 8007454:	d203      	bcs.n	800745e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007456:	4a2e      	ldr	r2, [pc, #184]	; (8007510 <xTaskIncrementTick+0x164>)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6013      	str	r3, [r2, #0]
						break;
 800745c:	e02f      	b.n	80074be <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	3304      	adds	r3, #4
 8007462:	4618      	mov	r0, r3
 8007464:	f7fe ff86 	bl	8006374 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746c:	2b00      	cmp	r3, #0
 800746e:	d004      	beq.n	800747a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	3318      	adds	r3, #24
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe ff7d 	bl	8006374 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747e:	4b25      	ldr	r3, [pc, #148]	; (8007514 <xTaskIncrementTick+0x168>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	429a      	cmp	r2, r3
 8007484:	d903      	bls.n	800748e <xTaskIncrementTick+0xe2>
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748a:	4a22      	ldr	r2, [pc, #136]	; (8007514 <xTaskIncrementTick+0x168>)
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4a1f      	ldr	r2, [pc, #124]	; (8007518 <xTaskIncrementTick+0x16c>)
 800749c:	441a      	add	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	3304      	adds	r3, #4
 80074a2:	4619      	mov	r1, r3
 80074a4:	4610      	mov	r0, r2
 80074a6:	f7fe ff0a 	bl	80062be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ae:	4b1b      	ldr	r3, [pc, #108]	; (800751c <xTaskIncrementTick+0x170>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d3b3      	bcc.n	8007420 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80074b8:	2301      	movs	r3, #1
 80074ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074bc:	e7b0      	b.n	8007420 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074be:	4b17      	ldr	r3, [pc, #92]	; (800751c <xTaskIncrementTick+0x170>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c4:	4914      	ldr	r1, [pc, #80]	; (8007518 <xTaskIncrementTick+0x16c>)
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d907      	bls.n	80074e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80074d6:	2301      	movs	r3, #1
 80074d8:	617b      	str	r3, [r7, #20]
 80074da:	e004      	b.n	80074e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80074dc:	4b10      	ldr	r3, [pc, #64]	; (8007520 <xTaskIncrementTick+0x174>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3301      	adds	r3, #1
 80074e2:	4a0f      	ldr	r2, [pc, #60]	; (8007520 <xTaskIncrementTick+0x174>)
 80074e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80074e6:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <xTaskIncrementTick+0x178>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80074ee:	2301      	movs	r3, #1
 80074f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80074f2:	697b      	ldr	r3, [r7, #20]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	20000fe0 	.word	0x20000fe0
 8007500:	20000fbc 	.word	0x20000fbc
 8007504:	20000f70 	.word	0x20000f70
 8007508:	20000f74 	.word	0x20000f74
 800750c:	20000fd0 	.word	0x20000fd0
 8007510:	20000fd8 	.word	0x20000fd8
 8007514:	20000fc0 	.word	0x20000fc0
 8007518:	20000ae8 	.word	0x20000ae8
 800751c:	20000ae4 	.word	0x20000ae4
 8007520:	20000fc8 	.word	0x20000fc8
 8007524:	20000fcc 	.word	0x20000fcc

08007528 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800752e:	4b2a      	ldr	r3, [pc, #168]	; (80075d8 <vTaskSwitchContext+0xb0>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007536:	4b29      	ldr	r3, [pc, #164]	; (80075dc <vTaskSwitchContext+0xb4>)
 8007538:	2201      	movs	r2, #1
 800753a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800753c:	e046      	b.n	80075cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800753e:	4b27      	ldr	r3, [pc, #156]	; (80075dc <vTaskSwitchContext+0xb4>)
 8007540:	2200      	movs	r2, #0
 8007542:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007544:	4b26      	ldr	r3, [pc, #152]	; (80075e0 <vTaskSwitchContext+0xb8>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	60fb      	str	r3, [r7, #12]
 800754a:	e010      	b.n	800756e <vTaskSwitchContext+0x46>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <vTaskSwitchContext+0x40>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	607b      	str	r3, [r7, #4]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <vTaskSwitchContext+0x3e>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3b01      	subs	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	491d      	ldr	r1, [pc, #116]	; (80075e4 <vTaskSwitchContext+0xbc>)
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	440b      	add	r3, r1
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0e4      	beq.n	800754c <vTaskSwitchContext+0x24>
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4a15      	ldr	r2, [pc, #84]	; (80075e4 <vTaskSwitchContext+0xbc>)
 800758e:	4413      	add	r3, r2
 8007590:	60bb      	str	r3, [r7, #8]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	605a      	str	r2, [r3, #4]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	3308      	adds	r3, #8
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d104      	bne.n	80075b2 <vTaskSwitchContext+0x8a>
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	605a      	str	r2, [r3, #4]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	4a0b      	ldr	r2, [pc, #44]	; (80075e8 <vTaskSwitchContext+0xc0>)
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	4a08      	ldr	r2, [pc, #32]	; (80075e0 <vTaskSwitchContext+0xb8>)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80075c2:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <vTaskSwitchContext+0xc0>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3354      	adds	r3, #84	; 0x54
 80075c8:	4a08      	ldr	r2, [pc, #32]	; (80075ec <vTaskSwitchContext+0xc4>)
 80075ca:	6013      	str	r3, [r2, #0]
}
 80075cc:	bf00      	nop
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bc80      	pop	{r7}
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	20000fe0 	.word	0x20000fe0
 80075dc:	20000fcc 	.word	0x20000fcc
 80075e0:	20000fc0 	.word	0x20000fc0
 80075e4:	20000ae8 	.word	0x20000ae8
 80075e8:	20000ae4 	.word	0x20000ae4
 80075ec:	20000018 	.word	0x20000018

080075f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10a      	bne.n	8007616 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	60fb      	str	r3, [r7, #12]
}
 8007612:	bf00      	nop
 8007614:	e7fe      	b.n	8007614 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007616:	4b07      	ldr	r3, [pc, #28]	; (8007634 <vTaskPlaceOnEventList+0x44>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3318      	adds	r3, #24
 800761c:	4619      	mov	r1, r3
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7fe fe70 	bl	8006304 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007624:	2101      	movs	r1, #1
 8007626:	6838      	ldr	r0, [r7, #0]
 8007628:	f000 fa84 	bl	8007b34 <prvAddCurrentTaskToDelayedList>
}
 800762c:	bf00      	nop
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20000ae4 	.word	0x20000ae4

08007638 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10a      	bne.n	8007660 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	617b      	str	r3, [r7, #20]
}
 800765c:	bf00      	nop
 800765e:	e7fe      	b.n	800765e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007660:	4b0a      	ldr	r3, [pc, #40]	; (800768c <vTaskPlaceOnEventListRestricted+0x54>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3318      	adds	r3, #24
 8007666:	4619      	mov	r1, r3
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f7fe fe28 	bl	80062be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007678:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	68b8      	ldr	r0, [r7, #8]
 800767e:	f000 fa59 	bl	8007b34 <prvAddCurrentTaskToDelayedList>
	}
 8007682:	bf00      	nop
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20000ae4 	.word	0x20000ae4

08007690 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	60fb      	str	r3, [r7, #12]
}
 80076b8:	bf00      	nop
 80076ba:	e7fe      	b.n	80076ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	3318      	adds	r3, #24
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fe fe57 	bl	8006374 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c6:	4b1e      	ldr	r3, [pc, #120]	; (8007740 <xTaskRemoveFromEventList+0xb0>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d11d      	bne.n	800770a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	3304      	adds	r3, #4
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fe fe4e 	bl	8006374 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076dc:	4b19      	ldr	r3, [pc, #100]	; (8007744 <xTaskRemoveFromEventList+0xb4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d903      	bls.n	80076ec <xTaskRemoveFromEventList+0x5c>
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	4a16      	ldr	r2, [pc, #88]	; (8007744 <xTaskRemoveFromEventList+0xb4>)
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4a13      	ldr	r2, [pc, #76]	; (8007748 <xTaskRemoveFromEventList+0xb8>)
 80076fa:	441a      	add	r2, r3
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	3304      	adds	r3, #4
 8007700:	4619      	mov	r1, r3
 8007702:	4610      	mov	r0, r2
 8007704:	f7fe fddb 	bl	80062be <vListInsertEnd>
 8007708:	e005      	b.n	8007716 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	3318      	adds	r3, #24
 800770e:	4619      	mov	r1, r3
 8007710:	480e      	ldr	r0, [pc, #56]	; (800774c <xTaskRemoveFromEventList+0xbc>)
 8007712:	f7fe fdd4 	bl	80062be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771a:	4b0d      	ldr	r3, [pc, #52]	; (8007750 <xTaskRemoveFromEventList+0xc0>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007720:	429a      	cmp	r2, r3
 8007722:	d905      	bls.n	8007730 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007724:	2301      	movs	r3, #1
 8007726:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007728:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <xTaskRemoveFromEventList+0xc4>)
 800772a:	2201      	movs	r2, #1
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	e001      	b.n	8007734 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007730:	2300      	movs	r3, #0
 8007732:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007734:	697b      	ldr	r3, [r7, #20]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20000fe0 	.word	0x20000fe0
 8007744:	20000fc0 	.word	0x20000fc0
 8007748:	20000ae8 	.word	0x20000ae8
 800774c:	20000f78 	.word	0x20000f78
 8007750:	20000ae4 	.word	0x20000ae4
 8007754:	20000fcc 	.word	0x20000fcc

08007758 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007760:	4b06      	ldr	r3, [pc, #24]	; (800777c <vTaskInternalSetTimeOutState+0x24>)
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007768:	4b05      	ldr	r3, [pc, #20]	; (8007780 <vTaskInternalSetTimeOutState+0x28>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	605a      	str	r2, [r3, #4]
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	bc80      	pop	{r7}
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	20000fd0 	.word	0x20000fd0
 8007780:	20000fbc 	.word	0x20000fbc

08007784 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	613b      	str	r3, [r7, #16]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10a      	bne.n	80077c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	60fb      	str	r3, [r7, #12]
}
 80077c2:	bf00      	nop
 80077c4:	e7fe      	b.n	80077c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80077c6:	f000 fe09 	bl	80083dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077ca:	4b1d      	ldr	r3, [pc, #116]	; (8007840 <xTaskCheckForTimeOut+0xbc>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077e2:	d102      	bne.n	80077ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077e4:	2300      	movs	r3, #0
 80077e6:	61fb      	str	r3, [r7, #28]
 80077e8:	e023      	b.n	8007832 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	4b15      	ldr	r3, [pc, #84]	; (8007844 <xTaskCheckForTimeOut+0xc0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d007      	beq.n	8007806 <xTaskCheckForTimeOut+0x82>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d302      	bcc.n	8007806 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007800:	2301      	movs	r3, #1
 8007802:	61fb      	str	r3, [r7, #28]
 8007804:	e015      	b.n	8007832 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	429a      	cmp	r2, r3
 800780e:	d20b      	bcs.n	8007828 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	1ad2      	subs	r2, r2, r3
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7ff ff9b 	bl	8007758 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007822:	2300      	movs	r3, #0
 8007824:	61fb      	str	r3, [r7, #28]
 8007826:	e004      	b.n	8007832 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800782e:	2301      	movs	r3, #1
 8007830:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007832:	f000 fe03 	bl	800843c <vPortExitCritical>

	return xReturn;
 8007836:	69fb      	ldr	r3, [r7, #28]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3720      	adds	r7, #32
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20000fbc 	.word	0x20000fbc
 8007844:	20000fd0 	.word	0x20000fd0

08007848 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800784c:	4b03      	ldr	r3, [pc, #12]	; (800785c <vTaskMissedYield+0x14>)
 800784e:	2201      	movs	r2, #1
 8007850:	601a      	str	r2, [r3, #0]
}
 8007852:	bf00      	nop
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	20000fcc 	.word	0x20000fcc

08007860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007868:	f000 f852 	bl	8007910 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800786c:	4b06      	ldr	r3, [pc, #24]	; (8007888 <prvIdleTask+0x28>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d9f9      	bls.n	8007868 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007874:	4b05      	ldr	r3, [pc, #20]	; (800788c <prvIdleTask+0x2c>)
 8007876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007884:	e7f0      	b.n	8007868 <prvIdleTask+0x8>
 8007886:	bf00      	nop
 8007888:	20000ae8 	.word	0x20000ae8
 800788c:	e000ed04 	.word	0xe000ed04

08007890 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007896:	2300      	movs	r3, #0
 8007898:	607b      	str	r3, [r7, #4]
 800789a:	e00c      	b.n	80078b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4a12      	ldr	r2, [pc, #72]	; (80078f0 <prvInitialiseTaskLists+0x60>)
 80078a8:	4413      	add	r3, r2
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fcdc 	bl	8006268 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3301      	adds	r3, #1
 80078b4:	607b      	str	r3, [r7, #4]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b37      	cmp	r3, #55	; 0x37
 80078ba:	d9ef      	bls.n	800789c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078bc:	480d      	ldr	r0, [pc, #52]	; (80078f4 <prvInitialiseTaskLists+0x64>)
 80078be:	f7fe fcd3 	bl	8006268 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078c2:	480d      	ldr	r0, [pc, #52]	; (80078f8 <prvInitialiseTaskLists+0x68>)
 80078c4:	f7fe fcd0 	bl	8006268 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078c8:	480c      	ldr	r0, [pc, #48]	; (80078fc <prvInitialiseTaskLists+0x6c>)
 80078ca:	f7fe fccd 	bl	8006268 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078ce:	480c      	ldr	r0, [pc, #48]	; (8007900 <prvInitialiseTaskLists+0x70>)
 80078d0:	f7fe fcca 	bl	8006268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078d4:	480b      	ldr	r0, [pc, #44]	; (8007904 <prvInitialiseTaskLists+0x74>)
 80078d6:	f7fe fcc7 	bl	8006268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078da:	4b0b      	ldr	r3, [pc, #44]	; (8007908 <prvInitialiseTaskLists+0x78>)
 80078dc:	4a05      	ldr	r2, [pc, #20]	; (80078f4 <prvInitialiseTaskLists+0x64>)
 80078de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078e0:	4b0a      	ldr	r3, [pc, #40]	; (800790c <prvInitialiseTaskLists+0x7c>)
 80078e2:	4a05      	ldr	r2, [pc, #20]	; (80078f8 <prvInitialiseTaskLists+0x68>)
 80078e4:	601a      	str	r2, [r3, #0]
}
 80078e6:	bf00      	nop
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20000ae8 	.word	0x20000ae8
 80078f4:	20000f48 	.word	0x20000f48
 80078f8:	20000f5c 	.word	0x20000f5c
 80078fc:	20000f78 	.word	0x20000f78
 8007900:	20000f8c 	.word	0x20000f8c
 8007904:	20000fa4 	.word	0x20000fa4
 8007908:	20000f70 	.word	0x20000f70
 800790c:	20000f74 	.word	0x20000f74

08007910 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007916:	e019      	b.n	800794c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007918:	f000 fd60 	bl	80083dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800791c:	4b10      	ldr	r3, [pc, #64]	; (8007960 <prvCheckTasksWaitingTermination+0x50>)
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	4618      	mov	r0, r3
 800792a:	f7fe fd23 	bl	8006374 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800792e:	4b0d      	ldr	r3, [pc, #52]	; (8007964 <prvCheckTasksWaitingTermination+0x54>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3b01      	subs	r3, #1
 8007934:	4a0b      	ldr	r2, [pc, #44]	; (8007964 <prvCheckTasksWaitingTermination+0x54>)
 8007936:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007938:	4b0b      	ldr	r3, [pc, #44]	; (8007968 <prvCheckTasksWaitingTermination+0x58>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3b01      	subs	r3, #1
 800793e:	4a0a      	ldr	r2, [pc, #40]	; (8007968 <prvCheckTasksWaitingTermination+0x58>)
 8007940:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007942:	f000 fd7b 	bl	800843c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f810 	bl	800796c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <prvCheckTasksWaitingTermination+0x58>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e1      	bne.n	8007918 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000f8c 	.word	0x20000f8c
 8007964:	20000fb8 	.word	0x20000fb8
 8007968:	20000fa0 	.word	0x20000fa0

0800796c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3354      	adds	r3, #84	; 0x54
 8007978:	4618      	mov	r0, r3
 800797a:	f001 fa0b 	bl	8008d94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007984:	2b00      	cmp	r3, #0
 8007986:	d108      	bne.n	800799a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fee9 	bl	8008764 <vPortFree>
				vPortFree( pxTCB );
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fee6 	bl	8008764 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007998:	e018      	b.n	80079cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d103      	bne.n	80079ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fedd 	bl	8008764 <vPortFree>
	}
 80079aa:	e00f      	b.n	80079cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d00a      	beq.n	80079cc <prvDeleteTCB+0x60>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	60fb      	str	r3, [r7, #12]
}
 80079c8:	bf00      	nop
 80079ca:	e7fe      	b.n	80079ca <prvDeleteTCB+0x5e>
	}
 80079cc:	bf00      	nop
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079da:	4b0e      	ldr	r3, [pc, #56]	; (8007a14 <prvResetNextTaskUnblockTime+0x40>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <prvResetNextTaskUnblockTime+0x14>
 80079e4:	2301      	movs	r3, #1
 80079e6:	e000      	b.n	80079ea <prvResetNextTaskUnblockTime+0x16>
 80079e8:	2300      	movs	r3, #0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d004      	beq.n	80079f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079ee:	4b0a      	ldr	r3, [pc, #40]	; (8007a18 <prvResetNextTaskUnblockTime+0x44>)
 80079f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079f6:	e008      	b.n	8007a0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80079f8:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <prvResetNextTaskUnblockTime+0x40>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	4a04      	ldr	r2, [pc, #16]	; (8007a18 <prvResetNextTaskUnblockTime+0x44>)
 8007a08:	6013      	str	r3, [r2, #0]
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bc80      	pop	{r7}
 8007a12:	4770      	bx	lr
 8007a14:	20000f70 	.word	0x20000f70
 8007a18:	20000fd8 	.word	0x20000fd8

08007a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a22:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <xTaskGetSchedulerState+0x34>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d102      	bne.n	8007a30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	607b      	str	r3, [r7, #4]
 8007a2e:	e008      	b.n	8007a42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a30:	4b08      	ldr	r3, [pc, #32]	; (8007a54 <xTaskGetSchedulerState+0x38>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a38:	2302      	movs	r3, #2
 8007a3a:	607b      	str	r3, [r7, #4]
 8007a3c:	e001      	b.n	8007a42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a42:	687b      	ldr	r3, [r7, #4]
	}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bc80      	pop	{r7}
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000fc4 	.word	0x20000fc4
 8007a54:	20000fe0 	.word	0x20000fe0

08007a58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a64:	2300      	movs	r3, #0
 8007a66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d056      	beq.n	8007b1c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a6e:	4b2e      	ldr	r3, [pc, #184]	; (8007b28 <xTaskPriorityDisinherit+0xd0>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d00a      	beq.n	8007a8e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	60fb      	str	r3, [r7, #12]
}
 8007a8a:	bf00      	nop
 8007a8c:	e7fe      	b.n	8007a8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10a      	bne.n	8007aac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	60bb      	str	r3, [r7, #8]
}
 8007aa8:	bf00      	nop
 8007aaa:	e7fe      	b.n	8007aaa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab0:	1e5a      	subs	r2, r3, #1
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d02c      	beq.n	8007b1c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d128      	bne.n	8007b1c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	3304      	adds	r3, #4
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe fc50 	bl	8006374 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aec:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <xTaskPriorityDisinherit+0xd4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d903      	bls.n	8007afc <xTaskPriorityDisinherit+0xa4>
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af8:	4a0c      	ldr	r2, [pc, #48]	; (8007b2c <xTaskPriorityDisinherit+0xd4>)
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b00:	4613      	mov	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4a09      	ldr	r2, [pc, #36]	; (8007b30 <xTaskPriorityDisinherit+0xd8>)
 8007b0a:	441a      	add	r2, r3
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	4619      	mov	r1, r3
 8007b12:	4610      	mov	r0, r2
 8007b14:	f7fe fbd3 	bl	80062be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b1c:	697b      	ldr	r3, [r7, #20]
	}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3718      	adds	r7, #24
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000ae4 	.word	0x20000ae4
 8007b2c:	20000fc0 	.word	0x20000fc0
 8007b30:	20000ae8 	.word	0x20000ae8

08007b34 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b3e:	4b21      	ldr	r3, [pc, #132]	; (8007bc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b44:	4b20      	ldr	r3, [pc, #128]	; (8007bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3304      	adds	r3, #4
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fe fc12 	bl	8006374 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b56:	d10a      	bne.n	8007b6e <prvAddCurrentTaskToDelayedList+0x3a>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b5e:	4b1a      	ldr	r3, [pc, #104]	; (8007bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3304      	adds	r3, #4
 8007b64:	4619      	mov	r1, r3
 8007b66:	4819      	ldr	r0, [pc, #100]	; (8007bcc <prvAddCurrentTaskToDelayedList+0x98>)
 8007b68:	f7fe fba9 	bl	80062be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b6c:	e026      	b.n	8007bbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4413      	add	r3, r2
 8007b74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b76:	4b14      	ldr	r3, [pc, #80]	; (8007bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d209      	bcs.n	8007b9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b86:	4b12      	ldr	r3, [pc, #72]	; (8007bd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4619      	mov	r1, r3
 8007b92:	4610      	mov	r0, r2
 8007b94:	f7fe fbb6 	bl	8006304 <vListInsert>
}
 8007b98:	e010      	b.n	8007bbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b9a:	4b0e      	ldr	r3, [pc, #56]	; (8007bd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	f7fe fbac 	bl	8006304 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bac:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d202      	bcs.n	8007bbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007bb6:	4a08      	ldr	r2, [pc, #32]	; (8007bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	6013      	str	r3, [r2, #0]
}
 8007bbc:	bf00      	nop
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20000fbc 	.word	0x20000fbc
 8007bc8:	20000ae4 	.word	0x20000ae4
 8007bcc:	20000fa4 	.word	0x20000fa4
 8007bd0:	20000f74 	.word	0x20000f74
 8007bd4:	20000f70 	.word	0x20000f70
 8007bd8:	20000fd8 	.word	0x20000fd8

08007bdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08a      	sub	sp, #40	; 0x28
 8007be0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007be6:	f000 facb 	bl	8008180 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007bea:	4b1c      	ldr	r3, [pc, #112]	; (8007c5c <xTimerCreateTimerTask+0x80>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d021      	beq.n	8007c36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007bfa:	1d3a      	adds	r2, r7, #4
 8007bfc:	f107 0108 	add.w	r1, r7, #8
 8007c00:	f107 030c 	add.w	r3, r7, #12
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fe fb15 	bl	8006234 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	9202      	str	r2, [sp, #8]
 8007c12:	9301      	str	r3, [sp, #4]
 8007c14:	2302      	movs	r3, #2
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	2300      	movs	r3, #0
 8007c1a:	460a      	mov	r2, r1
 8007c1c:	4910      	ldr	r1, [pc, #64]	; (8007c60 <xTimerCreateTimerTask+0x84>)
 8007c1e:	4811      	ldr	r0, [pc, #68]	; (8007c64 <xTimerCreateTimerTask+0x88>)
 8007c20:	f7ff f8b6 	bl	8006d90 <xTaskCreateStatic>
 8007c24:	4603      	mov	r3, r0
 8007c26:	4a10      	ldr	r2, [pc, #64]	; (8007c68 <xTimerCreateTimerTask+0x8c>)
 8007c28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c2a:	4b0f      	ldr	r3, [pc, #60]	; (8007c68 <xTimerCreateTimerTask+0x8c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c32:	2301      	movs	r3, #1
 8007c34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10a      	bne.n	8007c52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	613b      	str	r3, [r7, #16]
}
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c52:	697b      	ldr	r3, [r7, #20]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	20001014 	.word	0x20001014
 8007c60:	08008f64 	.word	0x08008f64
 8007c64:	08007d89 	.word	0x08007d89
 8007c68:	20001018 	.word	0x20001018

08007c6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08a      	sub	sp, #40	; 0x28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	623b      	str	r3, [r7, #32]
}
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c9a:	4b1a      	ldr	r3, [pc, #104]	; (8007d04 <xTimerGenericCommand+0x98>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d02a      	beq.n	8007cf8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2b05      	cmp	r3, #5
 8007cb2:	dc18      	bgt.n	8007ce6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007cb4:	f7ff feb2 	bl	8007a1c <xTaskGetSchedulerState>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d109      	bne.n	8007cd2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007cbe:	4b11      	ldr	r3, [pc, #68]	; (8007d04 <xTimerGenericCommand+0x98>)
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	f107 0110 	add.w	r1, r7, #16
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cca:	f7fe fc7f 	bl	80065cc <xQueueGenericSend>
 8007cce:	6278      	str	r0, [r7, #36]	; 0x24
 8007cd0:	e012      	b.n	8007cf8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007cd2:	4b0c      	ldr	r3, [pc, #48]	; (8007d04 <xTimerGenericCommand+0x98>)
 8007cd4:	6818      	ldr	r0, [r3, #0]
 8007cd6:	f107 0110 	add.w	r1, r7, #16
 8007cda:	2300      	movs	r3, #0
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f7fe fc75 	bl	80065cc <xQueueGenericSend>
 8007ce2:	6278      	str	r0, [r7, #36]	; 0x24
 8007ce4:	e008      	b.n	8007cf8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ce6:	4b07      	ldr	r3, [pc, #28]	; (8007d04 <xTimerGenericCommand+0x98>)
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	f107 0110 	add.w	r1, r7, #16
 8007cee:	2300      	movs	r3, #0
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	f7fe fd69 	bl	80067c8 <xQueueGenericSendFromISR>
 8007cf6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3728      	adds	r7, #40	; 0x28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20001014 	.word	0x20001014

08007d08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d12:	4b1c      	ldr	r3, [pc, #112]	; (8007d84 <prvProcessExpiredTimer+0x7c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fe fb27 	bl	8006374 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d122      	bne.n	8007d74 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	699a      	ldr	r2, [r3, #24]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	18d1      	adds	r1, r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	6978      	ldr	r0, [r7, #20]
 8007d3c:	f000 f8c8 	bl	8007ed0 <prvInsertTimerInActiveList>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d016      	beq.n	8007d74 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d46:	2300      	movs	r3, #0
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	2100      	movs	r1, #0
 8007d50:	6978      	ldr	r0, [r7, #20]
 8007d52:	f7ff ff8b 	bl	8007c6c <xTimerGenericCommand>
 8007d56:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	60fb      	str	r3, [r7, #12]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d78:	6978      	ldr	r0, [r7, #20]
 8007d7a:	4798      	blx	r3
}
 8007d7c:	bf00      	nop
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	2000100c 	.word	0x2000100c

08007d88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d90:	f107 0308 	add.w	r3, r7, #8
 8007d94:	4618      	mov	r0, r3
 8007d96:	f000 f857 	bl	8007e48 <prvGetNextExpireTime>
 8007d9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 f803 	bl	8007dac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007da6:	f000 f8d5 	bl	8007f54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007daa:	e7f1      	b.n	8007d90 <prvTimerTask+0x8>

08007dac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007db6:	f7ff fa3f 	bl	8007238 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007dba:	f107 0308 	add.w	r3, r7, #8
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 f866 	bl	8007e90 <prvSampleTimeNow>
 8007dc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d130      	bne.n	8007e2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <prvProcessTimerOrBlockTask+0x3c>
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d806      	bhi.n	8007de8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007dda:	f7ff fa3b 	bl	8007254 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007dde:	68f9      	ldr	r1, [r7, #12]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7ff ff91 	bl	8007d08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007de6:	e024      	b.n	8007e32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d008      	beq.n	8007e00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007dee:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <prvProcessTimerOrBlockTask+0x90>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bf0c      	ite	eq
 8007df8:	2301      	moveq	r3, #1
 8007dfa:	2300      	movne	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e00:	4b0f      	ldr	r3, [pc, #60]	; (8007e40 <prvProcessTimerOrBlockTask+0x94>)
 8007e02:	6818      	ldr	r0, [r3, #0]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	f7fe ff8b 	bl	8006d28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e12:	f7ff fa1f 	bl	8007254 <xTaskResumeAll>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e1c:	4b09      	ldr	r3, [pc, #36]	; (8007e44 <prvProcessTimerOrBlockTask+0x98>)
 8007e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	f3bf 8f6f 	isb	sy
}
 8007e2c:	e001      	b.n	8007e32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e2e:	f7ff fa11 	bl	8007254 <xTaskResumeAll>
}
 8007e32:	bf00      	nop
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20001010 	.word	0x20001010
 8007e40:	20001014 	.word	0x20001014
 8007e44:	e000ed04 	.word	0xe000ed04

08007e48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e50:	4b0e      	ldr	r3, [pc, #56]	; (8007e8c <prvGetNextExpireTime+0x44>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bf0c      	ite	eq
 8007e5a:	2301      	moveq	r3, #1
 8007e5c:	2300      	movne	r3, #0
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	461a      	mov	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d105      	bne.n	8007e7a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e6e:	4b07      	ldr	r3, [pc, #28]	; (8007e8c <prvGetNextExpireTime+0x44>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	e001      	b.n	8007e7e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bc80      	pop	{r7}
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	2000100c 	.word	0x2000100c

08007e90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e98:	f7ff fa7a 	bl	8007390 <xTaskGetTickCount>
 8007e9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <prvSampleTimeNow+0x3c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d205      	bcs.n	8007eb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ea8:	f000 f908 	bl	80080bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	e002      	b.n	8007eba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007eba:	4a04      	ldr	r2, [pc, #16]	; (8007ecc <prvSampleTimeNow+0x3c>)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	2000101c 	.word	0x2000101c

08007ed0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
 8007edc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d812      	bhi.n	8007f1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	1ad2      	subs	r2, r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d302      	bcc.n	8007f0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f04:	2301      	movs	r3, #1
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	e01b      	b.n	8007f42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f0a:	4b10      	ldr	r3, [pc, #64]	; (8007f4c <prvInsertTimerInActiveList+0x7c>)
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3304      	adds	r3, #4
 8007f12:	4619      	mov	r1, r3
 8007f14:	4610      	mov	r0, r2
 8007f16:	f7fe f9f5 	bl	8006304 <vListInsert>
 8007f1a:	e012      	b.n	8007f42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d206      	bcs.n	8007f32 <prvInsertTimerInActiveList+0x62>
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d302      	bcc.n	8007f32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	e007      	b.n	8007f42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f32:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <prvInsertTimerInActiveList+0x80>)
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3304      	adds	r3, #4
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	f7fe f9e1 	bl	8006304 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f42:	697b      	ldr	r3, [r7, #20]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	20001010 	.word	0x20001010
 8007f50:	2000100c 	.word	0x2000100c

08007f54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08e      	sub	sp, #56	; 0x38
 8007f58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f5a:	e09d      	b.n	8008098 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	da18      	bge.n	8007f94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f62:	1d3b      	adds	r3, r7, #4
 8007f64:	3304      	adds	r3, #4
 8007f66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	61fb      	str	r3, [r7, #28]
}
 8007f80:	bf00      	nop
 8007f82:	e7fe      	b.n	8007f82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f8a:	6850      	ldr	r0, [r2, #4]
 8007f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f8e:	6892      	ldr	r2, [r2, #8]
 8007f90:	4611      	mov	r1, r2
 8007f92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	db7d      	blt.n	8008096 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d004      	beq.n	8007fb0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	3304      	adds	r3, #4
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fe f9e2 	bl	8006374 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fb0:	463b      	mov	r3, r7
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7ff ff6c 	bl	8007e90 <prvSampleTimeNow>
 8007fb8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b09      	cmp	r3, #9
 8007fbe:	d86b      	bhi.n	8008098 <prvProcessReceivedCommands+0x144>
 8007fc0:	a201      	add	r2, pc, #4	; (adr r2, 8007fc8 <prvProcessReceivedCommands+0x74>)
 8007fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc6:	bf00      	nop
 8007fc8:	08007ff1 	.word	0x08007ff1
 8007fcc:	08007ff1 	.word	0x08007ff1
 8007fd0:	08007ff1 	.word	0x08007ff1
 8007fd4:	08008099 	.word	0x08008099
 8007fd8:	0800804d 	.word	0x0800804d
 8007fdc:	08008085 	.word	0x08008085
 8007fe0:	08007ff1 	.word	0x08007ff1
 8007fe4:	08007ff1 	.word	0x08007ff1
 8007fe8:	08008099 	.word	0x08008099
 8007fec:	0800804d 	.word	0x0800804d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	18d1      	adds	r1, r2, r3
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ffe:	f7ff ff67 	bl	8007ed0 <prvInsertTimerInActiveList>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d047      	beq.n	8008098 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800800e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d13f      	bne.n	8008098 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	441a      	add	r2, r3
 8008020:	2300      	movs	r3, #0
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	2300      	movs	r3, #0
 8008026:	2100      	movs	r1, #0
 8008028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800802a:	f7ff fe1f 	bl	8007c6c <xTimerGenericCommand>
 800802e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d130      	bne.n	8008098 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	61bb      	str	r3, [r7, #24]
}
 8008048:	bf00      	nop
 800804a:	e7fe      	b.n	800804a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008050:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	617b      	str	r3, [r7, #20]
}
 800806c:	bf00      	nop
 800806e:	e7fe      	b.n	800806e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	699a      	ldr	r2, [r3, #24]
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	18d1      	adds	r1, r2, r3
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800807e:	f7ff ff27 	bl	8007ed0 <prvInsertTimerInActiveList>
					break;
 8008082:	e009      	b.n	8008098 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008086:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800808a:	2b00      	cmp	r3, #0
 800808c:	d104      	bne.n	8008098 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800808e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008090:	f000 fb68 	bl	8008764 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008094:	e000      	b.n	8008098 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008096:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008098:	4b07      	ldr	r3, [pc, #28]	; (80080b8 <prvProcessReceivedCommands+0x164>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	1d39      	adds	r1, r7, #4
 800809e:	2200      	movs	r2, #0
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fe fc29 	bl	80068f8 <xQueueReceive>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f47f af57 	bne.w	8007f5c <prvProcessReceivedCommands+0x8>
	}
}
 80080ae:	bf00      	nop
 80080b0:	bf00      	nop
 80080b2:	3730      	adds	r7, #48	; 0x30
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20001014 	.word	0x20001014

080080bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b088      	sub	sp, #32
 80080c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080c2:	e045      	b.n	8008150 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080c4:	4b2c      	ldr	r3, [pc, #176]	; (8008178 <prvSwitchTimerLists+0xbc>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080ce:	4b2a      	ldr	r3, [pc, #168]	; (8008178 <prvSwitchTimerLists+0xbc>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	3304      	adds	r3, #4
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fe f949 	bl	8006374 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d12e      	bne.n	8008150 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	4413      	add	r3, r2
 80080fa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	429a      	cmp	r2, r3
 8008102:	d90e      	bls.n	8008122 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008110:	4b19      	ldr	r3, [pc, #100]	; (8008178 <prvSwitchTimerLists+0xbc>)
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3304      	adds	r3, #4
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f7fe f8f2 	bl	8006304 <vListInsert>
 8008120:	e016      	b.n	8008150 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008122:	2300      	movs	r3, #0
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	2300      	movs	r3, #0
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	2100      	movs	r1, #0
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff fd9d 	bl	8007c6c <xTimerGenericCommand>
 8008132:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <prvSwitchTimerLists+0x94>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	603b      	str	r3, [r7, #0]
}
 800814c:	bf00      	nop
 800814e:	e7fe      	b.n	800814e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008150:	4b09      	ldr	r3, [pc, #36]	; (8008178 <prvSwitchTimerLists+0xbc>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1b4      	bne.n	80080c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800815a:	4b07      	ldr	r3, [pc, #28]	; (8008178 <prvSwitchTimerLists+0xbc>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008160:	4b06      	ldr	r3, [pc, #24]	; (800817c <prvSwitchTimerLists+0xc0>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a04      	ldr	r2, [pc, #16]	; (8008178 <prvSwitchTimerLists+0xbc>)
 8008166:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008168:	4a04      	ldr	r2, [pc, #16]	; (800817c <prvSwitchTimerLists+0xc0>)
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	6013      	str	r3, [r2, #0]
}
 800816e:	bf00      	nop
 8008170:	3718      	adds	r7, #24
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	2000100c 	.word	0x2000100c
 800817c:	20001010 	.word	0x20001010

08008180 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008186:	f000 f929 	bl	80083dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800818a:	4b15      	ldr	r3, [pc, #84]	; (80081e0 <prvCheckForValidListAndQueue+0x60>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d120      	bne.n	80081d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008192:	4814      	ldr	r0, [pc, #80]	; (80081e4 <prvCheckForValidListAndQueue+0x64>)
 8008194:	f7fe f868 	bl	8006268 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008198:	4813      	ldr	r0, [pc, #76]	; (80081e8 <prvCheckForValidListAndQueue+0x68>)
 800819a:	f7fe f865 	bl	8006268 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800819e:	4b13      	ldr	r3, [pc, #76]	; (80081ec <prvCheckForValidListAndQueue+0x6c>)
 80081a0:	4a10      	ldr	r2, [pc, #64]	; (80081e4 <prvCheckForValidListAndQueue+0x64>)
 80081a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80081a4:	4b12      	ldr	r3, [pc, #72]	; (80081f0 <prvCheckForValidListAndQueue+0x70>)
 80081a6:	4a10      	ldr	r2, [pc, #64]	; (80081e8 <prvCheckForValidListAndQueue+0x68>)
 80081a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80081aa:	2300      	movs	r3, #0
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	4b11      	ldr	r3, [pc, #68]	; (80081f4 <prvCheckForValidListAndQueue+0x74>)
 80081b0:	4a11      	ldr	r2, [pc, #68]	; (80081f8 <prvCheckForValidListAndQueue+0x78>)
 80081b2:	2110      	movs	r1, #16
 80081b4:	200a      	movs	r0, #10
 80081b6:	f7fe f96f 	bl	8006498 <xQueueGenericCreateStatic>
 80081ba:	4603      	mov	r3, r0
 80081bc:	4a08      	ldr	r2, [pc, #32]	; (80081e0 <prvCheckForValidListAndQueue+0x60>)
 80081be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80081c0:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <prvCheckForValidListAndQueue+0x60>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d005      	beq.n	80081d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <prvCheckForValidListAndQueue+0x60>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	490b      	ldr	r1, [pc, #44]	; (80081fc <prvCheckForValidListAndQueue+0x7c>)
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fe fd82 	bl	8006cd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081d4:	f000 f932 	bl	800843c <vPortExitCritical>
}
 80081d8:	bf00      	nop
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	20001014 	.word	0x20001014
 80081e4:	20000fe4 	.word	0x20000fe4
 80081e8:	20000ff8 	.word	0x20000ff8
 80081ec:	2000100c 	.word	0x2000100c
 80081f0:	20001010 	.word	0x20001010
 80081f4:	200010c0 	.word	0x200010c0
 80081f8:	20001020 	.word	0x20001020
 80081fc:	08008f6c 	.word	0x08008f6c

08008200 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3b04      	subs	r3, #4
 8008210:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3b04      	subs	r3, #4
 800821e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f023 0201 	bic.w	r2, r3, #1
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3b04      	subs	r3, #4
 800822e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008230:	4a08      	ldr	r2, [pc, #32]	; (8008254 <pxPortInitialiseStack+0x54>)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3b14      	subs	r3, #20
 800823a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3b20      	subs	r3, #32
 8008246:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008248:	68fb      	ldr	r3, [r7, #12]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	bc80      	pop	{r7}
 8008252:	4770      	bx	lr
 8008254:	08008259 	.word	0x08008259

08008258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800825e:	2300      	movs	r3, #0
 8008260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008262:	4b12      	ldr	r3, [pc, #72]	; (80082ac <prvTaskExitError+0x54>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800826a:	d00a      	beq.n	8008282 <prvTaskExitError+0x2a>
	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	60fb      	str	r3, [r7, #12]
}
 800827e:	bf00      	nop
 8008280:	e7fe      	b.n	8008280 <prvTaskExitError+0x28>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	60bb      	str	r3, [r7, #8]
}
 8008294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008296:	bf00      	nop
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0fc      	beq.n	8008298 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800829e:	bf00      	nop
 80082a0:	bf00      	nop
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bc80      	pop	{r7}
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	20000010 	.word	0x20000010

080082b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082b0:	4b07      	ldr	r3, [pc, #28]	; (80082d0 <pxCurrentTCBConst2>)
 80082b2:	6819      	ldr	r1, [r3, #0]
 80082b4:	6808      	ldr	r0, [r1, #0]
 80082b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80082ba:	f380 8809 	msr	PSP, r0
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f04f 0000 	mov.w	r0, #0
 80082c6:	f380 8811 	msr	BASEPRI, r0
 80082ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80082ce:	4770      	bx	lr

080082d0 <pxCurrentTCBConst2>:
 80082d0:	20000ae4 	.word	0x20000ae4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop

080082d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80082d8:	4806      	ldr	r0, [pc, #24]	; (80082f4 <prvPortStartFirstTask+0x1c>)
 80082da:	6800      	ldr	r0, [r0, #0]
 80082dc:	6800      	ldr	r0, [r0, #0]
 80082de:	f380 8808 	msr	MSP, r0
 80082e2:	b662      	cpsie	i
 80082e4:	b661      	cpsie	f
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	df00      	svc	0
 80082f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082f2:	bf00      	nop
 80082f4:	e000ed08 	.word	0xe000ed08

080082f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082fe:	4b32      	ldr	r3, [pc, #200]	; (80083c8 <xPortStartScheduler+0xd0>)
 8008300:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	b2db      	uxtb	r3, r3
 8008308:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	22ff      	movs	r2, #255	; 0xff
 800830e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	b2db      	uxtb	r3, r3
 8008316:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	b2db      	uxtb	r3, r3
 800831c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008320:	b2da      	uxtb	r2, r3
 8008322:	4b2a      	ldr	r3, [pc, #168]	; (80083cc <xPortStartScheduler+0xd4>)
 8008324:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008326:	4b2a      	ldr	r3, [pc, #168]	; (80083d0 <xPortStartScheduler+0xd8>)
 8008328:	2207      	movs	r2, #7
 800832a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800832c:	e009      	b.n	8008342 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800832e:	4b28      	ldr	r3, [pc, #160]	; (80083d0 <xPortStartScheduler+0xd8>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	3b01      	subs	r3, #1
 8008334:	4a26      	ldr	r2, [pc, #152]	; (80083d0 <xPortStartScheduler+0xd8>)
 8008336:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	b2db      	uxtb	r3, r3
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	b2db      	uxtb	r3, r3
 8008340:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008342:	78fb      	ldrb	r3, [r7, #3]
 8008344:	b2db      	uxtb	r3, r3
 8008346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834a:	2b80      	cmp	r3, #128	; 0x80
 800834c:	d0ef      	beq.n	800832e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800834e:	4b20      	ldr	r3, [pc, #128]	; (80083d0 <xPortStartScheduler+0xd8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f1c3 0307 	rsb	r3, r3, #7
 8008356:	2b04      	cmp	r3, #4
 8008358:	d00a      	beq.n	8008370 <xPortStartScheduler+0x78>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	60bb      	str	r3, [r7, #8]
}
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008370:	4b17      	ldr	r3, [pc, #92]	; (80083d0 <xPortStartScheduler+0xd8>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	4a16      	ldr	r2, [pc, #88]	; (80083d0 <xPortStartScheduler+0xd8>)
 8008378:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800837a:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <xPortStartScheduler+0xd8>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008382:	4a13      	ldr	r2, [pc, #76]	; (80083d0 <xPortStartScheduler+0xd8>)
 8008384:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	b2da      	uxtb	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800838e:	4b11      	ldr	r3, [pc, #68]	; (80083d4 <xPortStartScheduler+0xdc>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a10      	ldr	r2, [pc, #64]	; (80083d4 <xPortStartScheduler+0xdc>)
 8008394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008398:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800839a:	4b0e      	ldr	r3, [pc, #56]	; (80083d4 <xPortStartScheduler+0xdc>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a0d      	ldr	r2, [pc, #52]	; (80083d4 <xPortStartScheduler+0xdc>)
 80083a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80083a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083a6:	f000 f8b9 	bl	800851c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083aa:	4b0b      	ldr	r3, [pc, #44]	; (80083d8 <xPortStartScheduler+0xe0>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083b0:	f7ff ff92 	bl	80082d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083b4:	f7ff f8b8 	bl	8007528 <vTaskSwitchContext>
	prvTaskExitError();
 80083b8:	f7ff ff4e 	bl	8008258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	e000e400 	.word	0xe000e400
 80083cc:	20001110 	.word	0x20001110
 80083d0:	20001114 	.word	0x20001114
 80083d4:	e000ed20 	.word	0xe000ed20
 80083d8:	20000010 	.word	0x20000010

080083dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	607b      	str	r3, [r7, #4]
}
 80083f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80083f6:	4b0f      	ldr	r3, [pc, #60]	; (8008434 <vPortEnterCritical+0x58>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3301      	adds	r3, #1
 80083fc:	4a0d      	ldr	r2, [pc, #52]	; (8008434 <vPortEnterCritical+0x58>)
 80083fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008400:	4b0c      	ldr	r3, [pc, #48]	; (8008434 <vPortEnterCritical+0x58>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d10f      	bne.n	8008428 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008408:	4b0b      	ldr	r3, [pc, #44]	; (8008438 <vPortEnterCritical+0x5c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00a      	beq.n	8008428 <vPortEnterCritical+0x4c>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	603b      	str	r3, [r7, #0]
}
 8008424:	bf00      	nop
 8008426:	e7fe      	b.n	8008426 <vPortEnterCritical+0x4a>
	}
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	bc80      	pop	{r7}
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	20000010 	.word	0x20000010
 8008438:	e000ed04 	.word	0xe000ed04

0800843c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008442:	4b11      	ldr	r3, [pc, #68]	; (8008488 <vPortExitCritical+0x4c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10a      	bne.n	8008460 <vPortExitCritical+0x24>
	__asm volatile
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	607b      	str	r3, [r7, #4]
}
 800845c:	bf00      	nop
 800845e:	e7fe      	b.n	800845e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008460:	4b09      	ldr	r3, [pc, #36]	; (8008488 <vPortExitCritical+0x4c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3b01      	subs	r3, #1
 8008466:	4a08      	ldr	r2, [pc, #32]	; (8008488 <vPortExitCritical+0x4c>)
 8008468:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800846a:	4b07      	ldr	r3, [pc, #28]	; (8008488 <vPortExitCritical+0x4c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d105      	bne.n	800847e <vPortExitCritical+0x42>
 8008472:	2300      	movs	r3, #0
 8008474:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	f383 8811 	msr	BASEPRI, r3
}
 800847c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	bc80      	pop	{r7}
 8008486:	4770      	bx	lr
 8008488:	20000010 	.word	0x20000010
 800848c:	00000000 	.word	0x00000000

08008490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008490:	f3ef 8009 	mrs	r0, PSP
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	4b0d      	ldr	r3, [pc, #52]	; (80084d0 <pxCurrentTCBConst>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084a0:	6010      	str	r0, [r2, #0]
 80084a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80084a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80084aa:	f380 8811 	msr	BASEPRI, r0
 80084ae:	f7ff f83b 	bl	8007528 <vTaskSwitchContext>
 80084b2:	f04f 0000 	mov.w	r0, #0
 80084b6:	f380 8811 	msr	BASEPRI, r0
 80084ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80084be:	6819      	ldr	r1, [r3, #0]
 80084c0:	6808      	ldr	r0, [r1, #0]
 80084c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084c6:	f380 8809 	msr	PSP, r0
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	4770      	bx	lr

080084d0 <pxCurrentTCBConst>:
 80084d0:	20000ae4 	.word	0x20000ae4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop

080084d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	607b      	str	r3, [r7, #4]
}
 80084f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084f2:	f7fe ff5b 	bl	80073ac <xTaskIncrementTick>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d003      	beq.n	8008504 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084fc:	4b06      	ldr	r3, [pc, #24]	; (8008518 <xPortSysTickHandler+0x40>)
 80084fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	2300      	movs	r3, #0
 8008506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	f383 8811 	msr	BASEPRI, r3
}
 800850e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800851c:	b480      	push	{r7}
 800851e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008520:	4b0a      	ldr	r3, [pc, #40]	; (800854c <vPortSetupTimerInterrupt+0x30>)
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008526:	4b0a      	ldr	r3, [pc, #40]	; (8008550 <vPortSetupTimerInterrupt+0x34>)
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800852c:	4b09      	ldr	r3, [pc, #36]	; (8008554 <vPortSetupTimerInterrupt+0x38>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a09      	ldr	r2, [pc, #36]	; (8008558 <vPortSetupTimerInterrupt+0x3c>)
 8008532:	fba2 2303 	umull	r2, r3, r2, r3
 8008536:	099b      	lsrs	r3, r3, #6
 8008538:	4a08      	ldr	r2, [pc, #32]	; (800855c <vPortSetupTimerInterrupt+0x40>)
 800853a:	3b01      	subs	r3, #1
 800853c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800853e:	4b03      	ldr	r3, [pc, #12]	; (800854c <vPortSetupTimerInterrupt+0x30>)
 8008540:	2207      	movs	r2, #7
 8008542:	601a      	str	r2, [r3, #0]
}
 8008544:	bf00      	nop
 8008546:	46bd      	mov	sp, r7
 8008548:	bc80      	pop	{r7}
 800854a:	4770      	bx	lr
 800854c:	e000e010 	.word	0xe000e010
 8008550:	e000e018 	.word	0xe000e018
 8008554:	20000004 	.word	0x20000004
 8008558:	10624dd3 	.word	0x10624dd3
 800855c:	e000e014 	.word	0xe000e014

08008560 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008566:	f3ef 8305 	mrs	r3, IPSR
 800856a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b0f      	cmp	r3, #15
 8008570:	d914      	bls.n	800859c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008572:	4a16      	ldr	r2, [pc, #88]	; (80085cc <vPortValidateInterruptPriority+0x6c>)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4413      	add	r3, r2
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800857c:	4b14      	ldr	r3, [pc, #80]	; (80085d0 <vPortValidateInterruptPriority+0x70>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	7afa      	ldrb	r2, [r7, #11]
 8008582:	429a      	cmp	r2, r3
 8008584:	d20a      	bcs.n	800859c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	607b      	str	r3, [r7, #4]
}
 8008598:	bf00      	nop
 800859a:	e7fe      	b.n	800859a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800859c:	4b0d      	ldr	r3, [pc, #52]	; (80085d4 <vPortValidateInterruptPriority+0x74>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085a4:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <vPortValidateInterruptPriority+0x78>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d90a      	bls.n	80085c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	603b      	str	r3, [r7, #0]
}
 80085be:	bf00      	nop
 80085c0:	e7fe      	b.n	80085c0 <vPortValidateInterruptPriority+0x60>
	}
 80085c2:	bf00      	nop
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bc80      	pop	{r7}
 80085ca:	4770      	bx	lr
 80085cc:	e000e3f0 	.word	0xe000e3f0
 80085d0:	20001110 	.word	0x20001110
 80085d4:	e000ed0c 	.word	0xe000ed0c
 80085d8:	20001114 	.word	0x20001114

080085dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08a      	sub	sp, #40	; 0x28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80085e4:	2300      	movs	r3, #0
 80085e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085e8:	f7fe fe26 	bl	8007238 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085ec:	4b58      	ldr	r3, [pc, #352]	; (8008750 <pvPortMalloc+0x174>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085f4:	f000 f910 	bl	8008818 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085f8:	4b56      	ldr	r3, [pc, #344]	; (8008754 <pvPortMalloc+0x178>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4013      	ands	r3, r2
 8008600:	2b00      	cmp	r3, #0
 8008602:	f040 808e 	bne.w	8008722 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d01d      	beq.n	8008648 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800860c:	2208      	movs	r2, #8
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4413      	add	r3, r2
 8008612:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	2b00      	cmp	r3, #0
 800861c:	d014      	beq.n	8008648 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f023 0307 	bic.w	r3, r3, #7
 8008624:	3308      	adds	r3, #8
 8008626:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f003 0307 	and.w	r3, r3, #7
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00a      	beq.n	8008648 <pvPortMalloc+0x6c>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	617b      	str	r3, [r7, #20]
}
 8008644:	bf00      	nop
 8008646:	e7fe      	b.n	8008646 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d069      	beq.n	8008722 <pvPortMalloc+0x146>
 800864e:	4b42      	ldr	r3, [pc, #264]	; (8008758 <pvPortMalloc+0x17c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	429a      	cmp	r2, r3
 8008656:	d864      	bhi.n	8008722 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008658:	4b40      	ldr	r3, [pc, #256]	; (800875c <pvPortMalloc+0x180>)
 800865a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800865c:	4b3f      	ldr	r3, [pc, #252]	; (800875c <pvPortMalloc+0x180>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008662:	e004      	b.n	800866e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	429a      	cmp	r2, r3
 8008676:	d903      	bls.n	8008680 <pvPortMalloc+0xa4>
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1f1      	bne.n	8008664 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008680:	4b33      	ldr	r3, [pc, #204]	; (8008750 <pvPortMalloc+0x174>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008686:	429a      	cmp	r2, r3
 8008688:	d04b      	beq.n	8008722 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2208      	movs	r2, #8
 8008690:	4413      	add	r3, r2
 8008692:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	1ad2      	subs	r2, r2, r3
 80086a4:	2308      	movs	r3, #8
 80086a6:	005b      	lsls	r3, r3, #1
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d91f      	bls.n	80086ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4413      	add	r3, r2
 80086b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <pvPortMalloc+0xf8>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	613b      	str	r3, [r7, #16]
}
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	1ad2      	subs	r2, r2, r3
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086e6:	69b8      	ldr	r0, [r7, #24]
 80086e8:	f000 f8f8 	bl	80088dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086ec:	4b1a      	ldr	r3, [pc, #104]	; (8008758 <pvPortMalloc+0x17c>)
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	4a18      	ldr	r2, [pc, #96]	; (8008758 <pvPortMalloc+0x17c>)
 80086f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086fa:	4b17      	ldr	r3, [pc, #92]	; (8008758 <pvPortMalloc+0x17c>)
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	4b18      	ldr	r3, [pc, #96]	; (8008760 <pvPortMalloc+0x184>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	429a      	cmp	r2, r3
 8008704:	d203      	bcs.n	800870e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008706:	4b14      	ldr	r3, [pc, #80]	; (8008758 <pvPortMalloc+0x17c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a15      	ldr	r2, [pc, #84]	; (8008760 <pvPortMalloc+0x184>)
 800870c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	685a      	ldr	r2, [r3, #4]
 8008712:	4b10      	ldr	r3, [pc, #64]	; (8008754 <pvPortMalloc+0x178>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	431a      	orrs	r2, r3
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	2200      	movs	r2, #0
 8008720:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008722:	f7fe fd97 	bl	8007254 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	f003 0307 	and.w	r3, r3, #7
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00a      	beq.n	8008746 <pvPortMalloc+0x16a>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	60fb      	str	r3, [r7, #12]
}
 8008742:	bf00      	nop
 8008744:	e7fe      	b.n	8008744 <pvPortMalloc+0x168>
	return pvReturn;
 8008746:	69fb      	ldr	r3, [r7, #28]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3728      	adds	r7, #40	; 0x28
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	20001d20 	.word	0x20001d20
 8008754:	20001d2c 	.word	0x20001d2c
 8008758:	20001d24 	.word	0x20001d24
 800875c:	20001d18 	.word	0x20001d18
 8008760:	20001d28 	.word	0x20001d28

08008764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d048      	beq.n	8008808 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008776:	2308      	movs	r3, #8
 8008778:	425b      	negs	r3, r3
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	4413      	add	r3, r2
 800877e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	4b21      	ldr	r3, [pc, #132]	; (8008810 <vPortFree+0xac>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4013      	ands	r3, r2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10a      	bne.n	80087a8 <vPortFree+0x44>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	60fb      	str	r3, [r7, #12]
}
 80087a4:	bf00      	nop
 80087a6:	e7fe      	b.n	80087a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00a      	beq.n	80087c6 <vPortFree+0x62>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	60bb      	str	r3, [r7, #8]
}
 80087c2:	bf00      	nop
 80087c4:	e7fe      	b.n	80087c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	4b11      	ldr	r3, [pc, #68]	; (8008810 <vPortFree+0xac>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4013      	ands	r3, r2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d019      	beq.n	8008808 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d115      	bne.n	8008808 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <vPortFree+0xac>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	43db      	mvns	r3, r3
 80087e6:	401a      	ands	r2, r3
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087ec:	f7fe fd24 	bl	8007238 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	4b07      	ldr	r3, [pc, #28]	; (8008814 <vPortFree+0xb0>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4413      	add	r3, r2
 80087fa:	4a06      	ldr	r2, [pc, #24]	; (8008814 <vPortFree+0xb0>)
 80087fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087fe:	6938      	ldr	r0, [r7, #16]
 8008800:	f000 f86c 	bl	80088dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008804:	f7fe fd26 	bl	8007254 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008808:	bf00      	nop
 800880a:	3718      	adds	r7, #24
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	20001d2c 	.word	0x20001d2c
 8008814:	20001d24 	.word	0x20001d24

08008818 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800881e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008822:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008824:	4b27      	ldr	r3, [pc, #156]	; (80088c4 <prvHeapInit+0xac>)
 8008826:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f003 0307 	and.w	r3, r3, #7
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00c      	beq.n	800884c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3307      	adds	r3, #7
 8008836:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0307 	bic.w	r3, r3, #7
 800883e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	4a1f      	ldr	r2, [pc, #124]	; (80088c4 <prvHeapInit+0xac>)
 8008848:	4413      	add	r3, r2
 800884a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008850:	4a1d      	ldr	r2, [pc, #116]	; (80088c8 <prvHeapInit+0xb0>)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008856:	4b1c      	ldr	r3, [pc, #112]	; (80088c8 <prvHeapInit+0xb0>)
 8008858:	2200      	movs	r2, #0
 800885a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	4413      	add	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008864:	2208      	movs	r2, #8
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	1a9b      	subs	r3, r3, r2
 800886a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f023 0307 	bic.w	r3, r3, #7
 8008872:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	4a15      	ldr	r2, [pc, #84]	; (80088cc <prvHeapInit+0xb4>)
 8008878:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800887a:	4b14      	ldr	r3, [pc, #80]	; (80088cc <prvHeapInit+0xb4>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2200      	movs	r2, #0
 8008880:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008882:	4b12      	ldr	r3, [pc, #72]	; (80088cc <prvHeapInit+0xb4>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2200      	movs	r2, #0
 8008888:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	1ad2      	subs	r2, r2, r3
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008898:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <prvHeapInit+0xb4>)
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	4a0a      	ldr	r2, [pc, #40]	; (80088d0 <prvHeapInit+0xb8>)
 80088a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	4a09      	ldr	r2, [pc, #36]	; (80088d4 <prvHeapInit+0xbc>)
 80088ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088b0:	4b09      	ldr	r3, [pc, #36]	; (80088d8 <prvHeapInit+0xc0>)
 80088b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80088b6:	601a      	str	r2, [r3, #0]
}
 80088b8:	bf00      	nop
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	bc80      	pop	{r7}
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	20001118 	.word	0x20001118
 80088c8:	20001d18 	.word	0x20001d18
 80088cc:	20001d20 	.word	0x20001d20
 80088d0:	20001d28 	.word	0x20001d28
 80088d4:	20001d24 	.word	0x20001d24
 80088d8:	20001d2c 	.word	0x20001d2c

080088dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088e4:	4b27      	ldr	r3, [pc, #156]	; (8008984 <prvInsertBlockIntoFreeList+0xa8>)
 80088e6:	60fb      	str	r3, [r7, #12]
 80088e8:	e002      	b.n	80088f0 <prvInsertBlockIntoFreeList+0x14>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d8f7      	bhi.n	80088ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	4413      	add	r3, r2
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	429a      	cmp	r2, r3
 800890a:	d108      	bne.n	800891e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	441a      	add	r2, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	441a      	add	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	429a      	cmp	r2, r3
 8008930:	d118      	bne.n	8008964 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	4b14      	ldr	r3, [pc, #80]	; (8008988 <prvInsertBlockIntoFreeList+0xac>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	429a      	cmp	r2, r3
 800893c:	d00d      	beq.n	800895a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	441a      	add	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	e008      	b.n	800896c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800895a:	4b0b      	ldr	r3, [pc, #44]	; (8008988 <prvInsertBlockIntoFreeList+0xac>)
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	e003      	b.n	800896c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	429a      	cmp	r2, r3
 8008972:	d002      	beq.n	800897a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800897a:	bf00      	nop
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	bc80      	pop	{r7}
 8008982:	4770      	bx	lr
 8008984:	20001d18 	.word	0x20001d18
 8008988:	20001d20 	.word	0x20001d20

0800898c <__aeabi_atexit>:
 800898c:	460b      	mov	r3, r1
 800898e:	4601      	mov	r1, r0
 8008990:	4618      	mov	r0, r3
 8008992:	f000 b8b5 	b.w	8008b00 <__cxa_atexit>

08008996 <_ZdlPvj>:
 8008996:	f000 b886 	b.w	8008aa6 <_ZdlPv>

0800899a <_Znwj>:
 800899a:	2801      	cmp	r0, #1
 800899c:	bf38      	it	cc
 800899e:	2001      	movcc	r0, #1
 80089a0:	b510      	push	{r4, lr}
 80089a2:	4604      	mov	r4, r0
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 f8e5 	bl	8008b74 <malloc>
 80089aa:	b930      	cbnz	r0, 80089ba <_Znwj+0x20>
 80089ac:	f000 f890 	bl	8008ad0 <_ZSt15get_new_handlerv>
 80089b0:	b908      	cbnz	r0, 80089b6 <_Znwj+0x1c>
 80089b2:	f000 f89e 	bl	8008af2 <abort>
 80089b6:	4780      	blx	r0
 80089b8:	e7f4      	b.n	80089a4 <_Znwj+0xa>
 80089ba:	bd10      	pop	{r4, pc}

080089bc <__cxa_pure_virtual>:
 80089bc:	b508      	push	{r3, lr}
 80089be:	f000 f881 	bl	8008ac4 <_ZSt9terminatev>

080089c2 <_ZNSaIcEC1Ev>:
 80089c2:	4770      	bx	lr

080089c4 <_ZNSaIcED1Ev>:
 80089c4:	4770      	bx	lr

080089c6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80089c6:	b10a      	cbz	r2, 80089cc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80089c8:	f000 b8e4 	b.w	8008b94 <memcpy>
 80089cc:	4770      	bx	lr
	...

080089d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80089d0:	b508      	push	{r3, lr}
 80089d2:	680b      	ldr	r3, [r1, #0]
 80089d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d8:	d302      	bcc.n	80089e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80089da:	480d      	ldr	r0, [pc, #52]	; (8008a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80089dc:	f000 f886 	bl	8008aec <_ZSt20__throw_length_errorPKc>
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d90b      	bls.n	80089fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80089e4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80089e8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80089ec:	d206      	bcs.n	80089fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80089ee:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80089f2:	bf2a      	itet	cs
 80089f4:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80089f8:	6008      	strcc	r0, [r1, #0]
 80089fa:	600b      	strcs	r3, [r1, #0]
 80089fc:	6808      	ldr	r0, [r1, #0]
 80089fe:	3001      	adds	r0, #1
 8008a00:	d501      	bpl.n	8008a06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8008a02:	f000 f86d 	bl	8008ae0 <_ZSt17__throw_bad_allocv>
 8008a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a0a:	f7ff bfc6 	b.w	800899a <_Znwj>
 8008a0e:	bf00      	nop
 8008a10:	08009174 	.word	0x08009174

08008a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8008a14:	2a01      	cmp	r2, #1
 8008a16:	b410      	push	{r4}
 8008a18:	d103      	bne.n	8008a22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 8008a1a:	780a      	ldrb	r2, [r1, #0]
 8008a1c:	bc10      	pop	{r4}
 8008a1e:	7002      	strb	r2, [r0, #0]
 8008a20:	4770      	bx	lr
 8008a22:	bc10      	pop	{r4}
 8008a24:	f7ff bfcf 	b.w	80089c6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08008a28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8008a28:	b508      	push	{r3, lr}
 8008a2a:	1a52      	subs	r2, r2, r1
 8008a2c:	f7ff fff2 	bl	8008a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008a30:	bd08      	pop	{r3, pc}
	...

08008a34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8008a34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a36:	4604      	mov	r4, r0
 8008a38:	4616      	mov	r6, r2
 8008a3a:	460d      	mov	r5, r1
 8008a3c:	b919      	cbnz	r1, 8008a46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8008a3e:	b112      	cbz	r2, 8008a46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8008a40:	480d      	ldr	r0, [pc, #52]	; (8008a78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8008a42:	f000 f850 	bl	8008ae6 <_ZSt19__throw_logic_errorPKc>
 8008a46:	1b73      	subs	r3, r6, r5
 8008a48:	2b0f      	cmp	r3, #15
 8008a4a:	9301      	str	r3, [sp, #4]
 8008a4c:	d907      	bls.n	8008a5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8008a4e:	2200      	movs	r2, #0
 8008a50:	4620      	mov	r0, r4
 8008a52:	a901      	add	r1, sp, #4
 8008a54:	f7ff ffbc 	bl	80089d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	6020      	str	r0, [r4, #0]
 8008a5c:	60a3      	str	r3, [r4, #8]
 8008a5e:	4632      	mov	r2, r6
 8008a60:	4629      	mov	r1, r5
 8008a62:	6820      	ldr	r0, [r4, #0]
 8008a64:	f7ff ffe0 	bl	8008a28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8008a68:	2100      	movs	r1, #0
 8008a6a:	9b01      	ldr	r3, [sp, #4]
 8008a6c:	6822      	ldr	r2, [r4, #0]
 8008a6e:	6063      	str	r3, [r4, #4]
 8008a70:	54d1      	strb	r1, [r2, r3]
 8008a72:	b002      	add	sp, #8
 8008a74:	bd70      	pop	{r4, r5, r6, pc}
 8008a76:	bf00      	nop
 8008a78:	0800918c 	.word	0x0800918c

08008a7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	f100 0308 	add.w	r3, r0, #8
 8008a82:	4604      	mov	r4, r0
 8008a84:	460d      	mov	r5, r1
 8008a86:	6003      	str	r3, [r0, #0]
 8008a88:	b159      	cbz	r1, 8008aa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	f7f7 fbd0 	bl	8000230 <strlen>
 8008a90:	182a      	adds	r2, r5, r0
 8008a92:	4620      	mov	r0, r4
 8008a94:	f04f 0300 	mov.w	r3, #0
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7ff ffcb 	bl	8008a34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	bd38      	pop	{r3, r4, r5, pc}
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	e7f5      	b.n	8008a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08008aa6 <_ZdlPv>:
 8008aa6:	f000 b86d 	b.w	8008b84 <free>

08008aaa <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008aaa:	b508      	push	{r3, lr}
 8008aac:	4780      	blx	r0
 8008aae:	f000 f820 	bl	8008af2 <abort>
	...

08008ab4 <_ZSt13get_terminatev>:
 8008ab4:	4b02      	ldr	r3, [pc, #8]	; (8008ac0 <_ZSt13get_terminatev+0xc>)
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	f3bf 8f5b 	dmb	ish
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	20000014 	.word	0x20000014

08008ac4 <_ZSt9terminatev>:
 8008ac4:	b508      	push	{r3, lr}
 8008ac6:	f7ff fff5 	bl	8008ab4 <_ZSt13get_terminatev>
 8008aca:	f7ff ffee 	bl	8008aaa <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08008ad0 <_ZSt15get_new_handlerv>:
 8008ad0:	4b02      	ldr	r3, [pc, #8]	; (8008adc <_ZSt15get_new_handlerv+0xc>)
 8008ad2:	6818      	ldr	r0, [r3, #0]
 8008ad4:	f3bf 8f5b 	dmb	ish
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	20001d30 	.word	0x20001d30

08008ae0 <_ZSt17__throw_bad_allocv>:
 8008ae0:	b508      	push	{r3, lr}
 8008ae2:	f000 f806 	bl	8008af2 <abort>

08008ae6 <_ZSt19__throw_logic_errorPKc>:
 8008ae6:	b508      	push	{r3, lr}
 8008ae8:	f000 f803 	bl	8008af2 <abort>

08008aec <_ZSt20__throw_length_errorPKc>:
 8008aec:	b508      	push	{r3, lr}
 8008aee:	f000 f800 	bl	8008af2 <abort>

08008af2 <abort>:
 8008af2:	2006      	movs	r0, #6
 8008af4:	b508      	push	{r3, lr}
 8008af6:	f000 f9e1 	bl	8008ebc <raise>
 8008afa:	2001      	movs	r0, #1
 8008afc:	f7fa f9c1 	bl	8002e82 <_exit>

08008b00 <__cxa_atexit>:
 8008b00:	b510      	push	{r4, lr}
 8008b02:	4604      	mov	r4, r0
 8008b04:	4804      	ldr	r0, [pc, #16]	; (8008b18 <__cxa_atexit+0x18>)
 8008b06:	4613      	mov	r3, r2
 8008b08:	b120      	cbz	r0, 8008b14 <__cxa_atexit+0x14>
 8008b0a:	460a      	mov	r2, r1
 8008b0c:	2002      	movs	r0, #2
 8008b0e:	4621      	mov	r1, r4
 8008b10:	f3af 8000 	nop.w
 8008b14:	bd10      	pop	{r4, pc}
 8008b16:	bf00      	nop
 8008b18:	00000000 	.word	0x00000000

08008b1c <__errno>:
 8008b1c:	4b01      	ldr	r3, [pc, #4]	; (8008b24 <__errno+0x8>)
 8008b1e:	6818      	ldr	r0, [r3, #0]
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	20000018 	.word	0x20000018

08008b28 <__libc_init_array>:
 8008b28:	b570      	push	{r4, r5, r6, lr}
 8008b2a:	2600      	movs	r6, #0
 8008b2c:	4d0c      	ldr	r5, [pc, #48]	; (8008b60 <__libc_init_array+0x38>)
 8008b2e:	4c0d      	ldr	r4, [pc, #52]	; (8008b64 <__libc_init_array+0x3c>)
 8008b30:	1b64      	subs	r4, r4, r5
 8008b32:	10a4      	asrs	r4, r4, #2
 8008b34:	42a6      	cmp	r6, r4
 8008b36:	d109      	bne.n	8008b4c <__libc_init_array+0x24>
 8008b38:	f000 f9e8 	bl	8008f0c <_init>
 8008b3c:	2600      	movs	r6, #0
 8008b3e:	4d0a      	ldr	r5, [pc, #40]	; (8008b68 <__libc_init_array+0x40>)
 8008b40:	4c0a      	ldr	r4, [pc, #40]	; (8008b6c <__libc_init_array+0x44>)
 8008b42:	1b64      	subs	r4, r4, r5
 8008b44:	10a4      	asrs	r4, r4, #2
 8008b46:	42a6      	cmp	r6, r4
 8008b48:	d105      	bne.n	8008b56 <__libc_init_array+0x2e>
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}
 8008b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b50:	4798      	blx	r3
 8008b52:	3601      	adds	r6, #1
 8008b54:	e7ee      	b.n	8008b34 <__libc_init_array+0xc>
 8008b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5a:	4798      	blx	r3
 8008b5c:	3601      	adds	r6, #1
 8008b5e:	e7f2      	b.n	8008b46 <__libc_init_array+0x1e>
 8008b60:	080093b4 	.word	0x080093b4
 8008b64:	080093b4 	.word	0x080093b4
 8008b68:	080093b4 	.word	0x080093b4
 8008b6c:	080093bc 	.word	0x080093bc

08008b70 <__retarget_lock_acquire_recursive>:
 8008b70:	4770      	bx	lr

08008b72 <__retarget_lock_release_recursive>:
 8008b72:	4770      	bx	lr

08008b74 <malloc>:
 8008b74:	4b02      	ldr	r3, [pc, #8]	; (8008b80 <malloc+0xc>)
 8008b76:	4601      	mov	r1, r0
 8008b78:	6818      	ldr	r0, [r3, #0]
 8008b7a:	f000 b889 	b.w	8008c90 <_malloc_r>
 8008b7e:	bf00      	nop
 8008b80:	20000018 	.word	0x20000018

08008b84 <free>:
 8008b84:	4b02      	ldr	r3, [pc, #8]	; (8008b90 <free+0xc>)
 8008b86:	4601      	mov	r1, r0
 8008b88:	6818      	ldr	r0, [r3, #0]
 8008b8a:	f000 b819 	b.w	8008bc0 <_free_r>
 8008b8e:	bf00      	nop
 8008b90:	20000018 	.word	0x20000018

08008b94 <memcpy>:
 8008b94:	440a      	add	r2, r1
 8008b96:	4291      	cmp	r1, r2
 8008b98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b9c:	d100      	bne.n	8008ba0 <memcpy+0xc>
 8008b9e:	4770      	bx	lr
 8008ba0:	b510      	push	{r4, lr}
 8008ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ba6:	4291      	cmp	r1, r2
 8008ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bac:	d1f9      	bne.n	8008ba2 <memcpy+0xe>
 8008bae:	bd10      	pop	{r4, pc}

08008bb0 <memset>:
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	4402      	add	r2, r0
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d100      	bne.n	8008bba <memset+0xa>
 8008bb8:	4770      	bx	lr
 8008bba:	f803 1b01 	strb.w	r1, [r3], #1
 8008bbe:	e7f9      	b.n	8008bb4 <memset+0x4>

08008bc0 <_free_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	2900      	cmp	r1, #0
 8008bc6:	d040      	beq.n	8008c4a <_free_r+0x8a>
 8008bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bcc:	1f0c      	subs	r4, r1, #4
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	bfb8      	it	lt
 8008bd2:	18e4      	addlt	r4, r4, r3
 8008bd4:	f000 f98e 	bl	8008ef4 <__malloc_lock>
 8008bd8:	4a1c      	ldr	r2, [pc, #112]	; (8008c4c <_free_r+0x8c>)
 8008bda:	6813      	ldr	r3, [r2, #0]
 8008bdc:	b933      	cbnz	r3, 8008bec <_free_r+0x2c>
 8008bde:	6063      	str	r3, [r4, #4]
 8008be0:	6014      	str	r4, [r2, #0]
 8008be2:	4628      	mov	r0, r5
 8008be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008be8:	f000 b98a 	b.w	8008f00 <__malloc_unlock>
 8008bec:	42a3      	cmp	r3, r4
 8008bee:	d908      	bls.n	8008c02 <_free_r+0x42>
 8008bf0:	6820      	ldr	r0, [r4, #0]
 8008bf2:	1821      	adds	r1, r4, r0
 8008bf4:	428b      	cmp	r3, r1
 8008bf6:	bf01      	itttt	eq
 8008bf8:	6819      	ldreq	r1, [r3, #0]
 8008bfa:	685b      	ldreq	r3, [r3, #4]
 8008bfc:	1809      	addeq	r1, r1, r0
 8008bfe:	6021      	streq	r1, [r4, #0]
 8008c00:	e7ed      	b.n	8008bde <_free_r+0x1e>
 8008c02:	461a      	mov	r2, r3
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	b10b      	cbz	r3, 8008c0c <_free_r+0x4c>
 8008c08:	42a3      	cmp	r3, r4
 8008c0a:	d9fa      	bls.n	8008c02 <_free_r+0x42>
 8008c0c:	6811      	ldr	r1, [r2, #0]
 8008c0e:	1850      	adds	r0, r2, r1
 8008c10:	42a0      	cmp	r0, r4
 8008c12:	d10b      	bne.n	8008c2c <_free_r+0x6c>
 8008c14:	6820      	ldr	r0, [r4, #0]
 8008c16:	4401      	add	r1, r0
 8008c18:	1850      	adds	r0, r2, r1
 8008c1a:	4283      	cmp	r3, r0
 8008c1c:	6011      	str	r1, [r2, #0]
 8008c1e:	d1e0      	bne.n	8008be2 <_free_r+0x22>
 8008c20:	6818      	ldr	r0, [r3, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	4401      	add	r1, r0
 8008c26:	6011      	str	r1, [r2, #0]
 8008c28:	6053      	str	r3, [r2, #4]
 8008c2a:	e7da      	b.n	8008be2 <_free_r+0x22>
 8008c2c:	d902      	bls.n	8008c34 <_free_r+0x74>
 8008c2e:	230c      	movs	r3, #12
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	e7d6      	b.n	8008be2 <_free_r+0x22>
 8008c34:	6820      	ldr	r0, [r4, #0]
 8008c36:	1821      	adds	r1, r4, r0
 8008c38:	428b      	cmp	r3, r1
 8008c3a:	bf01      	itttt	eq
 8008c3c:	6819      	ldreq	r1, [r3, #0]
 8008c3e:	685b      	ldreq	r3, [r3, #4]
 8008c40:	1809      	addeq	r1, r1, r0
 8008c42:	6021      	streq	r1, [r4, #0]
 8008c44:	6063      	str	r3, [r4, #4]
 8008c46:	6054      	str	r4, [r2, #4]
 8008c48:	e7cb      	b.n	8008be2 <_free_r+0x22>
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	20001d38 	.word	0x20001d38

08008c50 <sbrk_aligned>:
 8008c50:	b570      	push	{r4, r5, r6, lr}
 8008c52:	4e0e      	ldr	r6, [pc, #56]	; (8008c8c <sbrk_aligned+0x3c>)
 8008c54:	460c      	mov	r4, r1
 8008c56:	6831      	ldr	r1, [r6, #0]
 8008c58:	4605      	mov	r5, r0
 8008c5a:	b911      	cbnz	r1, 8008c62 <sbrk_aligned+0x12>
 8008c5c:	f000 f8f6 	bl	8008e4c <_sbrk_r>
 8008c60:	6030      	str	r0, [r6, #0]
 8008c62:	4621      	mov	r1, r4
 8008c64:	4628      	mov	r0, r5
 8008c66:	f000 f8f1 	bl	8008e4c <_sbrk_r>
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	d00a      	beq.n	8008c84 <sbrk_aligned+0x34>
 8008c6e:	1cc4      	adds	r4, r0, #3
 8008c70:	f024 0403 	bic.w	r4, r4, #3
 8008c74:	42a0      	cmp	r0, r4
 8008c76:	d007      	beq.n	8008c88 <sbrk_aligned+0x38>
 8008c78:	1a21      	subs	r1, r4, r0
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f000 f8e6 	bl	8008e4c <_sbrk_r>
 8008c80:	3001      	adds	r0, #1
 8008c82:	d101      	bne.n	8008c88 <sbrk_aligned+0x38>
 8008c84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008c88:	4620      	mov	r0, r4
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	20001d3c 	.word	0x20001d3c

08008c90 <_malloc_r>:
 8008c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c94:	1ccd      	adds	r5, r1, #3
 8008c96:	f025 0503 	bic.w	r5, r5, #3
 8008c9a:	3508      	adds	r5, #8
 8008c9c:	2d0c      	cmp	r5, #12
 8008c9e:	bf38      	it	cc
 8008ca0:	250c      	movcc	r5, #12
 8008ca2:	2d00      	cmp	r5, #0
 8008ca4:	4607      	mov	r7, r0
 8008ca6:	db01      	blt.n	8008cac <_malloc_r+0x1c>
 8008ca8:	42a9      	cmp	r1, r5
 8008caa:	d905      	bls.n	8008cb8 <_malloc_r+0x28>
 8008cac:	230c      	movs	r3, #12
 8008cae:	2600      	movs	r6, #0
 8008cb0:	603b      	str	r3, [r7, #0]
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb8:	4e2e      	ldr	r6, [pc, #184]	; (8008d74 <_malloc_r+0xe4>)
 8008cba:	f000 f91b 	bl	8008ef4 <__malloc_lock>
 8008cbe:	6833      	ldr	r3, [r6, #0]
 8008cc0:	461c      	mov	r4, r3
 8008cc2:	bb34      	cbnz	r4, 8008d12 <_malloc_r+0x82>
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	f7ff ffc2 	bl	8008c50 <sbrk_aligned>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	4604      	mov	r4, r0
 8008cd0:	d14d      	bne.n	8008d6e <_malloc_r+0xde>
 8008cd2:	6834      	ldr	r4, [r6, #0]
 8008cd4:	4626      	mov	r6, r4
 8008cd6:	2e00      	cmp	r6, #0
 8008cd8:	d140      	bne.n	8008d5c <_malloc_r+0xcc>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	4631      	mov	r1, r6
 8008cde:	4638      	mov	r0, r7
 8008ce0:	eb04 0803 	add.w	r8, r4, r3
 8008ce4:	f000 f8b2 	bl	8008e4c <_sbrk_r>
 8008ce8:	4580      	cmp	r8, r0
 8008cea:	d13a      	bne.n	8008d62 <_malloc_r+0xd2>
 8008cec:	6821      	ldr	r1, [r4, #0]
 8008cee:	3503      	adds	r5, #3
 8008cf0:	1a6d      	subs	r5, r5, r1
 8008cf2:	f025 0503 	bic.w	r5, r5, #3
 8008cf6:	3508      	adds	r5, #8
 8008cf8:	2d0c      	cmp	r5, #12
 8008cfa:	bf38      	it	cc
 8008cfc:	250c      	movcc	r5, #12
 8008cfe:	4638      	mov	r0, r7
 8008d00:	4629      	mov	r1, r5
 8008d02:	f7ff ffa5 	bl	8008c50 <sbrk_aligned>
 8008d06:	3001      	adds	r0, #1
 8008d08:	d02b      	beq.n	8008d62 <_malloc_r+0xd2>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	442b      	add	r3, r5
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	e00e      	b.n	8008d30 <_malloc_r+0xa0>
 8008d12:	6822      	ldr	r2, [r4, #0]
 8008d14:	1b52      	subs	r2, r2, r5
 8008d16:	d41e      	bmi.n	8008d56 <_malloc_r+0xc6>
 8008d18:	2a0b      	cmp	r2, #11
 8008d1a:	d916      	bls.n	8008d4a <_malloc_r+0xba>
 8008d1c:	1961      	adds	r1, r4, r5
 8008d1e:	42a3      	cmp	r3, r4
 8008d20:	6025      	str	r5, [r4, #0]
 8008d22:	bf18      	it	ne
 8008d24:	6059      	strne	r1, [r3, #4]
 8008d26:	6863      	ldr	r3, [r4, #4]
 8008d28:	bf08      	it	eq
 8008d2a:	6031      	streq	r1, [r6, #0]
 8008d2c:	5162      	str	r2, [r4, r5]
 8008d2e:	604b      	str	r3, [r1, #4]
 8008d30:	4638      	mov	r0, r7
 8008d32:	f104 060b 	add.w	r6, r4, #11
 8008d36:	f000 f8e3 	bl	8008f00 <__malloc_unlock>
 8008d3a:	f026 0607 	bic.w	r6, r6, #7
 8008d3e:	1d23      	adds	r3, r4, #4
 8008d40:	1af2      	subs	r2, r6, r3
 8008d42:	d0b6      	beq.n	8008cb2 <_malloc_r+0x22>
 8008d44:	1b9b      	subs	r3, r3, r6
 8008d46:	50a3      	str	r3, [r4, r2]
 8008d48:	e7b3      	b.n	8008cb2 <_malloc_r+0x22>
 8008d4a:	6862      	ldr	r2, [r4, #4]
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	bf0c      	ite	eq
 8008d50:	6032      	streq	r2, [r6, #0]
 8008d52:	605a      	strne	r2, [r3, #4]
 8008d54:	e7ec      	b.n	8008d30 <_malloc_r+0xa0>
 8008d56:	4623      	mov	r3, r4
 8008d58:	6864      	ldr	r4, [r4, #4]
 8008d5a:	e7b2      	b.n	8008cc2 <_malloc_r+0x32>
 8008d5c:	4634      	mov	r4, r6
 8008d5e:	6876      	ldr	r6, [r6, #4]
 8008d60:	e7b9      	b.n	8008cd6 <_malloc_r+0x46>
 8008d62:	230c      	movs	r3, #12
 8008d64:	4638      	mov	r0, r7
 8008d66:	603b      	str	r3, [r7, #0]
 8008d68:	f000 f8ca 	bl	8008f00 <__malloc_unlock>
 8008d6c:	e7a1      	b.n	8008cb2 <_malloc_r+0x22>
 8008d6e:	6025      	str	r5, [r4, #0]
 8008d70:	e7de      	b.n	8008d30 <_malloc_r+0xa0>
 8008d72:	bf00      	nop
 8008d74:	20001d38 	.word	0x20001d38

08008d78 <cleanup_glue>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	460c      	mov	r4, r1
 8008d7c:	6809      	ldr	r1, [r1, #0]
 8008d7e:	4605      	mov	r5, r0
 8008d80:	b109      	cbz	r1, 8008d86 <cleanup_glue+0xe>
 8008d82:	f7ff fff9 	bl	8008d78 <cleanup_glue>
 8008d86:	4621      	mov	r1, r4
 8008d88:	4628      	mov	r0, r5
 8008d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d8e:	f7ff bf17 	b.w	8008bc0 <_free_r>
	...

08008d94 <_reclaim_reent>:
 8008d94:	4b2c      	ldr	r3, [pc, #176]	; (8008e48 <_reclaim_reent+0xb4>)
 8008d96:	b570      	push	{r4, r5, r6, lr}
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4283      	cmp	r3, r0
 8008d9e:	d051      	beq.n	8008e44 <_reclaim_reent+0xb0>
 8008da0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008da2:	b143      	cbz	r3, 8008db6 <_reclaim_reent+0x22>
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d14a      	bne.n	8008e40 <_reclaim_reent+0xac>
 8008daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dac:	6819      	ldr	r1, [r3, #0]
 8008dae:	b111      	cbz	r1, 8008db6 <_reclaim_reent+0x22>
 8008db0:	4620      	mov	r0, r4
 8008db2:	f7ff ff05 	bl	8008bc0 <_free_r>
 8008db6:	6961      	ldr	r1, [r4, #20]
 8008db8:	b111      	cbz	r1, 8008dc0 <_reclaim_reent+0x2c>
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f7ff ff00 	bl	8008bc0 <_free_r>
 8008dc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008dc2:	b111      	cbz	r1, 8008dca <_reclaim_reent+0x36>
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f7ff fefb 	bl	8008bc0 <_free_r>
 8008dca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008dcc:	b111      	cbz	r1, 8008dd4 <_reclaim_reent+0x40>
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f7ff fef6 	bl	8008bc0 <_free_r>
 8008dd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008dd6:	b111      	cbz	r1, 8008dde <_reclaim_reent+0x4a>
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f7ff fef1 	bl	8008bc0 <_free_r>
 8008dde:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008de0:	b111      	cbz	r1, 8008de8 <_reclaim_reent+0x54>
 8008de2:	4620      	mov	r0, r4
 8008de4:	f7ff feec 	bl	8008bc0 <_free_r>
 8008de8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008dea:	b111      	cbz	r1, 8008df2 <_reclaim_reent+0x5e>
 8008dec:	4620      	mov	r0, r4
 8008dee:	f7ff fee7 	bl	8008bc0 <_free_r>
 8008df2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008df4:	b111      	cbz	r1, 8008dfc <_reclaim_reent+0x68>
 8008df6:	4620      	mov	r0, r4
 8008df8:	f7ff fee2 	bl	8008bc0 <_free_r>
 8008dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dfe:	b111      	cbz	r1, 8008e06 <_reclaim_reent+0x72>
 8008e00:	4620      	mov	r0, r4
 8008e02:	f7ff fedd 	bl	8008bc0 <_free_r>
 8008e06:	69a3      	ldr	r3, [r4, #24]
 8008e08:	b1e3      	cbz	r3, 8008e44 <_reclaim_reent+0xb0>
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e0e:	4798      	blx	r3
 8008e10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008e12:	b1b9      	cbz	r1, 8008e44 <_reclaim_reent+0xb0>
 8008e14:	4620      	mov	r0, r4
 8008e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e1a:	f7ff bfad 	b.w	8008d78 <cleanup_glue>
 8008e1e:	5949      	ldr	r1, [r1, r5]
 8008e20:	b941      	cbnz	r1, 8008e34 <_reclaim_reent+0xa0>
 8008e22:	3504      	adds	r5, #4
 8008e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e26:	2d80      	cmp	r5, #128	; 0x80
 8008e28:	68d9      	ldr	r1, [r3, #12]
 8008e2a:	d1f8      	bne.n	8008e1e <_reclaim_reent+0x8a>
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f7ff fec7 	bl	8008bc0 <_free_r>
 8008e32:	e7ba      	b.n	8008daa <_reclaim_reent+0x16>
 8008e34:	680e      	ldr	r6, [r1, #0]
 8008e36:	4620      	mov	r0, r4
 8008e38:	f7ff fec2 	bl	8008bc0 <_free_r>
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	e7ef      	b.n	8008e20 <_reclaim_reent+0x8c>
 8008e40:	2500      	movs	r5, #0
 8008e42:	e7ef      	b.n	8008e24 <_reclaim_reent+0x90>
 8008e44:	bd70      	pop	{r4, r5, r6, pc}
 8008e46:	bf00      	nop
 8008e48:	20000018 	.word	0x20000018

08008e4c <_sbrk_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	2300      	movs	r3, #0
 8008e50:	4d05      	ldr	r5, [pc, #20]	; (8008e68 <_sbrk_r+0x1c>)
 8008e52:	4604      	mov	r4, r0
 8008e54:	4608      	mov	r0, r1
 8008e56:	602b      	str	r3, [r5, #0]
 8008e58:	f7fa f81e 	bl	8002e98 <_sbrk>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d102      	bne.n	8008e66 <_sbrk_r+0x1a>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	b103      	cbz	r3, 8008e66 <_sbrk_r+0x1a>
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	20001d40 	.word	0x20001d40

08008e6c <_raise_r>:
 8008e6c:	291f      	cmp	r1, #31
 8008e6e:	b538      	push	{r3, r4, r5, lr}
 8008e70:	4604      	mov	r4, r0
 8008e72:	460d      	mov	r5, r1
 8008e74:	d904      	bls.n	8008e80 <_raise_r+0x14>
 8008e76:	2316      	movs	r3, #22
 8008e78:	6003      	str	r3, [r0, #0]
 8008e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e82:	b112      	cbz	r2, 8008e8a <_raise_r+0x1e>
 8008e84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e88:	b94b      	cbnz	r3, 8008e9e <_raise_r+0x32>
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f000 f830 	bl	8008ef0 <_getpid_r>
 8008e90:	462a      	mov	r2, r5
 8008e92:	4601      	mov	r1, r0
 8008e94:	4620      	mov	r0, r4
 8008e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e9a:	f000 b817 	b.w	8008ecc <_kill_r>
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d00a      	beq.n	8008eb8 <_raise_r+0x4c>
 8008ea2:	1c59      	adds	r1, r3, #1
 8008ea4:	d103      	bne.n	8008eae <_raise_r+0x42>
 8008ea6:	2316      	movs	r3, #22
 8008ea8:	6003      	str	r3, [r0, #0]
 8008eaa:	2001      	movs	r0, #1
 8008eac:	e7e7      	b.n	8008e7e <_raise_r+0x12>
 8008eae:	2400      	movs	r4, #0
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008eb6:	4798      	blx	r3
 8008eb8:	2000      	movs	r0, #0
 8008eba:	e7e0      	b.n	8008e7e <_raise_r+0x12>

08008ebc <raise>:
 8008ebc:	4b02      	ldr	r3, [pc, #8]	; (8008ec8 <raise+0xc>)
 8008ebe:	4601      	mov	r1, r0
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	f7ff bfd3 	b.w	8008e6c <_raise_r>
 8008ec6:	bf00      	nop
 8008ec8:	20000018 	.word	0x20000018

08008ecc <_kill_r>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	2300      	movs	r3, #0
 8008ed0:	4d06      	ldr	r5, [pc, #24]	; (8008eec <_kill_r+0x20>)
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	4608      	mov	r0, r1
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	602b      	str	r3, [r5, #0]
 8008eda:	f7f9 ffc2 	bl	8002e62 <_kill>
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	d102      	bne.n	8008ee8 <_kill_r+0x1c>
 8008ee2:	682b      	ldr	r3, [r5, #0]
 8008ee4:	b103      	cbz	r3, 8008ee8 <_kill_r+0x1c>
 8008ee6:	6023      	str	r3, [r4, #0]
 8008ee8:	bd38      	pop	{r3, r4, r5, pc}
 8008eea:	bf00      	nop
 8008eec:	20001d40 	.word	0x20001d40

08008ef0 <_getpid_r>:
 8008ef0:	f7f9 bfb0 	b.w	8002e54 <_getpid>

08008ef4 <__malloc_lock>:
 8008ef4:	4801      	ldr	r0, [pc, #4]	; (8008efc <__malloc_lock+0x8>)
 8008ef6:	f7ff be3b 	b.w	8008b70 <__retarget_lock_acquire_recursive>
 8008efa:	bf00      	nop
 8008efc:	20001d34 	.word	0x20001d34

08008f00 <__malloc_unlock>:
 8008f00:	4801      	ldr	r0, [pc, #4]	; (8008f08 <__malloc_unlock+0x8>)
 8008f02:	f7ff be36 	b.w	8008b72 <__retarget_lock_release_recursive>
 8008f06:	bf00      	nop
 8008f08:	20001d34 	.word	0x20001d34

08008f0c <_init>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	bf00      	nop
 8008f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f12:	bc08      	pop	{r3}
 8008f14:	469e      	mov	lr, r3
 8008f16:	4770      	bx	lr

08008f18 <_fini>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	bf00      	nop
 8008f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1e:	bc08      	pop	{r3}
 8008f20:	469e      	mov	lr, r3
 8008f22:	4770      	bx	lr
